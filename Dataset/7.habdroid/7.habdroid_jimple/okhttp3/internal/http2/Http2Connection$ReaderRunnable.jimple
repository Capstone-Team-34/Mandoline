okhttp3.internal.http2.Http2Connection$ReaderRunnable extends okhttp3.internal.NamedRunnable implements okhttp3.internal.http2.Http2Reader$Handler
final okhttp3.internal.http2.Http2Reader reader
final okhttp3.internal.http2.Http2Connection this$0
    void <init>(okhttp3.internal.http2.Http2Connection, okhttp3.internal.http2.Http2Reader)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        okhttp3.internal.http2.Http2Connection $r1;
        okhttp3.internal.http2.Http2Reader $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $r1 := @parameter0: okhttp3.internal.http2.Http2Connection;

        $r2 := @parameter1: okhttp3.internal.http2.Http2Reader;

        r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0> = $r1;

        $r4 = newarray (java.lang.Object)[1];

        $r3 = $r1.<okhttp3.internal.http2.Http2Connection: java.lang.String hostname>;

        $r4[0] = $r3;

        specialinvoke r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4);

        r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Reader reader> = $r2;

        return;
    }
    private void applyAndAckSettings(okhttp3.internal.http2.Settings)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        okhttp3.internal.http2.Settings $r1;
        java.util.concurrent.ExecutorService $r2;
        okhttp3.internal.http2.Http2Connection$ReaderRunnable$3 $r3;
        java.lang.Object[] $r4;
        okhttp3.internal.http2.Http2Connection $r5;
        java.lang.String $r6;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $r1 := @parameter0: okhttp3.internal.http2.Settings;

        $r2 = <okhttp3.internal.http2.Http2Connection: java.util.concurrent.ExecutorService executor>;

        $r3 = new okhttp3.internal.http2.Http2Connection$ReaderRunnable$3;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r6 = $r5.<okhttp3.internal.http2.Http2Connection: java.lang.String hostname>;

        $r4[0] = $r6;

        specialinvoke $r3.<okhttp3.internal.http2.Http2Connection$ReaderRunnable$3: void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[],okhttp3.internal.http2.Settings)>(r0, "OkHttp %s ACK Settings", $r4, $r1);

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r3);

        return;
    }
    public void ackSettings()
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        return;
    }
    public void alternateService(int, java.lang.String, okio.ByteString, java.lang.String, int, long)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        okio.ByteString $r2;
        long $l2;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: okio.ByteString;

        $r3 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $l2 := @parameter5: long;

        return;
    }
    public void data(boolean, int, okio.BufferedSource, int) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        boolean $z0, $z1;
        int $i0, $i1;
        okio.BufferedSource $r1;
        okhttp3.internal.http2.Http2Connection $r2;
        okhttp3.internal.http2.Http2Stream $r3;
        okhttp3.internal.http2.ErrorCode $r4;
        long $l2;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 := @parameter2: okio.BufferedSource;

        $i1 := @parameter3: int;

        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $z1 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: boolean pushedStream(int)>($i0);

        if $z1 == 0 goto label1;

        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: void pushDataLater(int,okio.BufferedSource,int,boolean)>($i0, $r1, $i1, $z0);

        return;

     label1:
        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r3 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream getStream(int)>($i0);

        if $r3 != null goto label2;

        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r4 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: void writeSynResetLater(int,okhttp3.internal.http2.ErrorCode)>($i0, $r4);

        $l2 = (long) $i1;

        interfaceinvoke $r1.<okio.BufferedSource: void skip(long)>($l2);

        return;

     label2:
        virtualinvoke $r3.<okhttp3.internal.http2.Http2Stream: void receiveData(okio.BufferedSource,int)>($r1, $i1);

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<okhttp3.internal.http2.Http2Stream: void receiveFin()>();

     label3:
        return;
    }
    protected void execute()
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        java.io.IOException r1, $r8, $r9, $r10;
        boolean $z0;
        okhttp3.internal.http2.ErrorCode r2, r3, r5;
        okhttp3.internal.http2.Http2Reader $r4;
        okhttp3.internal.http2.Http2Connection $r6;
        java.lang.Throwable $r7;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        r2 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode INTERNAL_ERROR>;

        r3 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode INTERNAL_ERROR>;

     label01:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Reader reader>;

     label02:
        virtualinvoke $r4.<okhttp3.internal.http2.Http2Reader: void readConnectionPreface(okhttp3.internal.http2.Http2Reader$Handler)>(r0);

     label03:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Reader reader>;

     label04:
        $z0 = virtualinvoke $r4.<okhttp3.internal.http2.Http2Reader: boolean nextFrame(boolean,okhttp3.internal.http2.Http2Reader$Handler)>(0, r0);

     label05:
        if $z0 != 0 goto label03;

     label06:
        r2 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode NO_ERROR>;

        r5 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode CANCEL>;

     label07:
        $r6 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

     label08:
        virtualinvoke $r6.<okhttp3.internal.http2.Http2Connection: void close(okhttp3.internal.http2.ErrorCode,okhttp3.internal.http2.ErrorCode)>(r2, r5);

     label09:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Reader reader>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r4);

        return;

     label10:
        r1 := @caughtexception;

     label11:
        r2 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR>;

        r5 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR>;

     label12:
        $r6 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

     label13:
        virtualinvoke $r6.<okhttp3.internal.http2.Http2Connection: void close(okhttp3.internal.http2.ErrorCode,okhttp3.internal.http2.ErrorCode)>(r2, r5);

     label14:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Reader reader>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r4);

        return;

     label15:
        $r7 := @caughtexception;

        $r6 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

     label16:
        virtualinvoke $r6.<okhttp3.internal.http2.Http2Connection: void close(okhttp3.internal.http2.ErrorCode,okhttp3.internal.http2.ErrorCode)>(r2, r3);

     label17:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Reader reader>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r4);

        throw $r7;

     label18:
        $r8 := @caughtexception;

        goto label17;

     label19:
        $r9 := @caughtexception;

        goto label14;

     label20:
        $r10 := @caughtexception;

        goto label09;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.lang.Throwable from label01 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.io.IOException from label08 to label09 with label20;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label19;
        catch java.io.IOException from label16 to label17 with label18;
    }
    public void goAway(int, okhttp3.internal.http2.ErrorCode, okio.ByteString)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        int $i0, $i1, $i2, $i3;
        okhttp3.internal.http2.ErrorCode $r1;
        okio.ByteString $r2;
        okhttp3.internal.http2.Http2Stream r3;
        okhttp3.internal.http2.Http2Connection $r4, $r5;
        java.util.Map $r6;
        java.util.Collection $r7;
        okhttp3.internal.http2.Http2Stream[] $r8;
        java.lang.Object[] $r9;
        boolean $z0;
        java.lang.Throwable $r10;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $i0 := @parameter0: int;

        $r1 := @parameter1: okhttp3.internal.http2.ErrorCode;

        $r2 := @parameter2: okio.ByteString;

        $i1 = virtualinvoke $r2.<okio.ByteString: int size()>();

        if $i1 <= 0 goto label1;

     label1:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        entermonitor $r4;

     label2:
        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r6 = $r5.<okhttp3.internal.http2.Http2Connection: java.util.Map streams>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r6 = $r5.<okhttp3.internal.http2.Http2Connection: java.util.Map streams>;

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r8 = newarray (okhttp3.internal.http2.Http2Stream)[$i1];

        $r9 = interfaceinvoke $r7.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r8 = (okhttp3.internal.http2.Http2Stream[]) $r9;

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r5.<okhttp3.internal.http2.Http2Connection: boolean shutdown> = 1;

        exitmonitor $r4;

     label3:
        $i1 = lengthof $r8;

        $i2 = 0;

     label4:
        if $i2 >= $i1 goto label9;

        r3 = $r8[$i2];

        $i3 = virtualinvoke r3.<okhttp3.internal.http2.Http2Stream: int getId()>();

        if $i3 <= $i0 goto label5;

        $z0 = virtualinvoke r3.<okhttp3.internal.http2.Http2Stream: boolean isLocallyInitiated()>();

        if $z0 == 0 goto label5;

        $r1 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode REFUSED_STREAM>;

        virtualinvoke r3.<okhttp3.internal.http2.Http2Stream: void receiveRstStream(okhttp3.internal.http2.ErrorCode)>($r1);

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $i3 = virtualinvoke r3.<okhttp3.internal.http2.Http2Stream: int getId()>();

        virtualinvoke $r4.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream removeStream(int)>($i3);

     label5:
        $i2 = $i2 + 1;

        goto label4;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor $r4;

     label8:
        throw $r10;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
    public void headers(boolean, int, int, java.util.List)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        java.util.List r1;
        okhttp3.internal.http2.Http2Stream r2;
        okhttp3.internal.http2.Http2Connection $r3, $r4;
        java.lang.Throwable $r5;
        java.util.Map $r6;
        java.lang.Integer $r7;
        java.util.concurrent.ExecutorService $r8;
        okhttp3.internal.http2.Http2Connection$ReaderRunnable$1 $r9;
        java.lang.Object[] $r10;
        java.lang.String $r11;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 := @parameter3: java.util.List;

        $r3 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $z1 = virtualinvoke $r3.<okhttp3.internal.http2.Http2Connection: boolean pushedStream(int)>($i0);

        if $z1 == 0 goto label01;

        $r3 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        virtualinvoke $r3.<okhttp3.internal.http2.Http2Connection: void pushHeadersLater(int,java.util.List,boolean)>($i0, r1, $z0);

        return;

     label01:
        $r3 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        entermonitor $r3;

     label02:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $z1 = $r4.<okhttp3.internal.http2.Http2Connection: boolean shutdown>;

        if $z1 == 0 goto label06;

        exitmonitor $r3;

     label03:
        return;

     label04:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label05:
        throw $r5;

     label06:
        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        r2 = virtualinvoke $r4.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream getStream(int)>($i0);

        if r2 != null goto label12;

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $i1 = $r4.<okhttp3.internal.http2.Http2Connection: int lastGoodStreamId>;

        if $i0 > $i1 goto label08;

        exitmonitor $r3;

     label07:
        return;

     label08:
        $i1 = $i0 % 2;

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $i2 = $r4.<okhttp3.internal.http2.Http2Connection: int nextStreamId>;

        $i2 = $i2 % 2;

        if $i1 != $i2 goto label10;

        exitmonitor $r3;

     label09:
        return;

     label10:
        r2 = new okhttp3.internal.http2.Http2Stream;

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        specialinvoke r2.<okhttp3.internal.http2.Http2Stream: void <init>(int,okhttp3.internal.http2.Http2Connection,boolean,boolean,java.util.List)>($i0, $r4, 0, $z0, r1);

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r4.<okhttp3.internal.http2.Http2Connection: int lastGoodStreamId> = $i0;

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r6 = $r4.<okhttp3.internal.http2.Http2Connection: java.util.Map streams>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        $r8 = <okhttp3.internal.http2.Http2Connection: java.util.concurrent.ExecutorService executor>;

        $r9 = new okhttp3.internal.http2.Http2Connection$ReaderRunnable$1;

        $r10 = newarray (java.lang.Object)[2];

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r11 = $r4.<okhttp3.internal.http2.Http2Connection: java.lang.String hostname>;

        $r10[0] = $r11;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10[1] = $r7;

        specialinvoke $r9.<okhttp3.internal.http2.Http2Connection$ReaderRunnable$1: void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[],okhttp3.internal.http2.Http2Stream)>(r0, "OkHttp %s stream %d", $r10, r2);

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r9);

        exitmonitor $r3;

     label11:
        return;

     label12:
        exitmonitor $r3;

     label13:
        virtualinvoke r2.<okhttp3.internal.http2.Http2Stream: void receiveHeaders(java.util.List)>(r1);

        if $z0 == 0 goto label14;

        virtualinvoke r2.<okhttp3.internal.http2.Http2Stream: void receiveFin()>();

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
    }
    public void ping(boolean, int, int)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        boolean $z0;
        int $i0, $i1;
        okhttp3.internal.http2.Ping $r1;
        okhttp3.internal.http2.Http2Connection $r2;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $z0 == 0 goto label1;

        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r1 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Ping removePing(int)>($i0);

        if $r1 == null goto label2;

        virtualinvoke $r1.<okhttp3.internal.http2.Ping: void receive()>();

        return;

     label1:
        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: void writePingLater(boolean,int,int,okhttp3.internal.http2.Ping)>(1, $i0, $i1, null);

     label2:
        return;
    }
    public void priority(int, int, int, boolean)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $z0 := @parameter3: boolean;

        return;
    }
    public void pushPromise(int, int, java.util.List)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        int $i0, $i1;
        java.util.List r1;
        okhttp3.internal.http2.Http2Connection $r2;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: void pushRequestLater(int,java.util.List)>($i1, r1);

        return;
    }
    public void rstStream(int, okhttp3.internal.http2.ErrorCode)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        int $i0;
        okhttp3.internal.http2.ErrorCode $r1;
        okhttp3.internal.http2.Http2Connection $r2;
        boolean $z0;
        okhttp3.internal.http2.Http2Stream $r3;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $i0 := @parameter0: int;

        $r1 := @parameter1: okhttp3.internal.http2.ErrorCode;

        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $z0 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: boolean pushedStream(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: void pushResetLater(int,okhttp3.internal.http2.ErrorCode)>($i0, $r1);

        return;

     label1:
        $r2 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r3 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream removeStream(int)>($i0);

        if $r3 == null goto label2;

        virtualinvoke $r3.<okhttp3.internal.http2.Http2Stream: void receiveRstStream(okhttp3.internal.http2.ErrorCode)>($r1);

     label2:
        return;
    }
    public void settings(boolean, okhttp3.internal.http2.Settings)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        boolean $z0;
        okhttp3.internal.http2.Settings $r1, $r6;
        okhttp3.internal.http2.Http2Stream r2;
        long l0;
        okhttp3.internal.http2.Http2Stream[] r3;
        okhttp3.internal.http2.Http2Connection $r4, $r5;
        int $i1, $i2;
        java.util.Map $r7;
        java.util.Collection $r8;
        java.lang.Object[] $r9;
        java.util.concurrent.ExecutorService $r10;
        okhttp3.internal.http2.Http2Connection$ReaderRunnable$2 $r11;
        java.lang.String $r12;
        byte $b3;
        java.lang.Throwable $r13, $r14;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: okhttp3.internal.http2.Settings;

        l0 = 0L;

        r3 = null;

        $r4 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        entermonitor $r4;

     label01:
        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r6 = $r5.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Settings peerSettings>;

        $i1 = virtualinvoke $r6.<okhttp3.internal.http2.Settings: int getInitialWindowSize()>();

        if $z0 == 0 goto label02;

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r6 = $r5.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Settings peerSettings>;

        virtualinvoke $r6.<okhttp3.internal.http2.Settings: void clear()>();

     label02:
        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r6 = $r5.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Settings peerSettings>;

        virtualinvoke $r6.<okhttp3.internal.http2.Settings: void merge(okhttp3.internal.http2.Settings)>($r1);

        specialinvoke r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: void applyAndAckSettings(okhttp3.internal.http2.Settings)>($r1);

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r1 = $r5.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Settings peerSettings>;

        $i2 = virtualinvoke $r1.<okhttp3.internal.http2.Settings: int getInitialWindowSize()>();

        if $i2 == -1 goto label04;

        if $i2 == $i1 goto label04;

        $i1 = $i2 - $i1;

        l0 = (long) $i1;

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $z0 = $r5.<okhttp3.internal.http2.Http2Connection: boolean receivedInitialPeerSettings>;

        if $z0 != 0 goto label03;

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        virtualinvoke $r5.<okhttp3.internal.http2.Http2Connection: void addBytesToWriteWindow(long)>(l0);

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r5.<okhttp3.internal.http2.Http2Connection: boolean receivedInitialPeerSettings> = 1;

     label03:
        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r7 = $r5.<okhttp3.internal.http2.Http2Connection: java.util.Map streams>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label04;

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r7 = $r5.<okhttp3.internal.http2.Http2Connection: java.util.Map streams>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r7 = $r5.<okhttp3.internal.http2.Http2Connection: java.util.Map streams>;

        $i1 = interfaceinvoke $r7.<java.util.Map: int size()>();

        r3 = newarray (okhttp3.internal.http2.Http2Stream)[$i1];

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        r3 = (okhttp3.internal.http2.Http2Stream[]) $r9;

     label04:
        $r10 = <okhttp3.internal.http2.Http2Connection: java.util.concurrent.ExecutorService executor>;

        $r11 = new okhttp3.internal.http2.Http2Connection$ReaderRunnable$2;

        $r9 = newarray (java.lang.Object)[1];

        $r5 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r12 = $r5.<okhttp3.internal.http2.Http2Connection: java.lang.String hostname>;

        $r9[0] = $r12;

        specialinvoke $r11.<okhttp3.internal.http2.Http2Connection$ReaderRunnable$2: void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[])>(r0, "OkHttp %s settings", $r9);

        interfaceinvoke $r10.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r11);

        exitmonitor $r4;

     label05:
        if r3 == null goto label15;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label15;

        $i1 = lengthof r3;

        $i2 = 0;

     label06:
        if $i2 >= $i1 goto label15;

        r2 = r3[$i2];

        entermonitor r2;

     label07:
        virtualinvoke r2.<okhttp3.internal.http2.Http2Stream: void addBytesToWriteWindow(long)>(l0);

        exitmonitor r2;

     label08:
        $i2 = $i2 + 1;

        goto label06;

     label09:
        $r13 := @caughtexception;

     label10:
        exitmonitor $r4;

     label11:
        throw $r13;

     label12:
        $r14 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r14;

     label15:
        return;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
    }
    public void windowUpdate(int, long)
    {
        okhttp3.internal.http2.Http2Connection$ReaderRunnable r0;
        int $i0;
        long $l1, $l2;
        okhttp3.internal.http2.Http2Connection $r1, $r3;
        okhttp3.internal.http2.Http2Stream $r2;
        java.lang.Throwable $r4, $r5;

        r0 := @this: okhttp3.internal.http2.Http2Connection$ReaderRunnable;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        if $i0 != 0 goto label05;

        $r1 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        entermonitor $r1;

     label01:
        $r3 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $l2 = $r3.<okhttp3.internal.http2.Http2Connection: long bytesLeftInWriteWindow>;

        $l1 = $l2 + $l1;

        $r3.<okhttp3.internal.http2.Http2Connection: long bytesLeftInWriteWindow> = $l1;

        $r3 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor $r1;

     label02:
        return;

     label03:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label04:
        throw $r4;

     label05:
        $r1 = r0.<okhttp3.internal.http2.Http2Connection$ReaderRunnable: okhttp3.internal.http2.Http2Connection this$0>;

        $r2 = virtualinvoke $r1.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream getStream(int)>($i0);

        if $r2 == null goto label10;

        entermonitor $r2;

     label06:
        virtualinvoke $r2.<okhttp3.internal.http2.Http2Stream: void addBytesToWriteWindow(long)>($l1);

        exitmonitor $r2;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label09:
        throw $r5;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }
