okhttp3.internal.http2.Http2Stream extends java.lang.Object
static final boolean $assertionsDisabled
long bytesLeftInWriteWindow
final okhttp3.internal.http2.Http2Connection connection
okhttp3.internal.http2.ErrorCode errorCode
private boolean hasResponseHeaders
final int id
final okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout
private final java.util.List requestHeaders
private java.util.List responseHeaders
final okhttp3.internal.http2.Http2Stream$FramingSink sink
private final okhttp3.internal.http2.Http2Stream$FramingSource source
long unacknowledgedBytesRead
final okhttp3.internal.http2.Http2Stream$StreamTimeout writeTimeout
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;

        $r0 = class "Lokhttp3/internal/http2/Http2Stream;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <okhttp3.internal.http2.Http2Stream: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    void <init>(int, okhttp3.internal.http2.Http2Connection, boolean, boolean, java.util.List)
    {
        okhttp3.internal.http2.Http2Stream r0;
        int $i0;
        okhttp3.internal.http2.Http2Connection $r1;
        boolean $z0, $z1;
        java.util.List r2;
        long $l1;
        okhttp3.internal.http2.Http2Stream$StreamTimeout $r3;
        java.lang.NullPointerException $r4;
        okhttp3.internal.http2.Settings $r5;
        okhttp3.internal.http2.Http2Stream$FramingSource $r6;
        okhttp3.internal.http2.Http2Stream$FramingSink $r7;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: okhttp3.internal.http2.Http2Connection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        r2 := @parameter4: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http2.Http2Stream: long unacknowledgedBytesRead> = 0L;

        $r3 = new okhttp3.internal.http2.Http2Stream$StreamTimeout;

        specialinvoke $r3.<okhttp3.internal.http2.Http2Stream$StreamTimeout: void <init>(okhttp3.internal.http2.Http2Stream)>(r0);

        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout> = $r3;

        $r3 = new okhttp3.internal.http2.Http2Stream$StreamTimeout;

        specialinvoke $r3.<okhttp3.internal.http2.Http2Stream$StreamTimeout: void <init>(okhttp3.internal.http2.Http2Stream)>(r0);

        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$StreamTimeout writeTimeout> = $r3;

        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode> = null;

        if $r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("connection == null");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("requestHeaders == null");

        throw $r4;

     label2:
        r0.<okhttp3.internal.http2.Http2Stream: int id> = $i0;

        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection> = $r1;

        $r5 = $r1.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Settings peerSettings>;

        $i0 = virtualinvoke $r5.<okhttp3.internal.http2.Settings: int getInitialWindowSize()>();

        $l1 = (long) $i0;

        r0.<okhttp3.internal.http2.Http2Stream: long bytesLeftInWriteWindow> = $l1;

        $r6 = new okhttp3.internal.http2.Http2Stream$FramingSource;

        $r5 = $r1.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Settings okHttpSettings>;

        $i0 = virtualinvoke $r5.<okhttp3.internal.http2.Settings: int getInitialWindowSize()>();

        $l1 = (long) $i0;

        specialinvoke $r6.<okhttp3.internal.http2.Http2Stream$FramingSource: void <init>(okhttp3.internal.http2.Http2Stream,long)>(r0, $l1);

        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source> = $r6;

        $r7 = new okhttp3.internal.http2.Http2Stream$FramingSink;

        specialinvoke $r7.<okhttp3.internal.http2.Http2Stream$FramingSink: void <init>(okhttp3.internal.http2.Http2Stream)>(r0);

        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink> = $r7;

        $r6 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $r6.<okhttp3.internal.http2.Http2Stream$FramingSource: boolean finished> = $z1;

        $r7 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $r7.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean finished> = $z0;

        r0.<okhttp3.internal.http2.Http2Stream: java.util.List requestHeaders> = r2;

        return;
    }
    private boolean closeInternal(okhttp3.internal.http2.ErrorCode)
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.ErrorCode $r1, $r3;
        boolean $z0;
        java.lang.AssertionError $r2;
        okhttp3.internal.http2.Http2Stream$FramingSource $r4;
        okhttp3.internal.http2.Http2Stream$FramingSink $r5;
        java.lang.Throwable $r6;
        okhttp3.internal.http2.Http2Connection $r7;
        int $i0;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $r1 := @parameter0: okhttp3.internal.http2.ErrorCode;

        $z0 = <okhttp3.internal.http2.Http2Stream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        entermonitor r0;

     label2:
        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

        if $r3 == null goto label4;

        exitmonitor r0;

     label3:
        return 0;

     label4:
        $r4 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $z0 = $r4.<okhttp3.internal.http2.Http2Stream$FramingSource: boolean finished>;

        if $z0 == 0 goto label8;

        $r5 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $z0 = $r5.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean finished>;

        if $z0 == 0 goto label8;

        exitmonitor r0;

     label5:
        return 0;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r6;

     label8:
        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode> = $r1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label9:
        $r7 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        virtualinvoke $r7.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream removeStream(int)>($i0);

        return 1;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.Throwable from label8 to label9 with label6;
    }
    void addBytesToWriteWindow(long)
    {
        okhttp3.internal.http2.Http2Stream r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $l0 := @parameter0: long;

        $l1 = r0.<okhttp3.internal.http2.Http2Stream: long bytesLeftInWriteWindow>;

        $l1 = $l1 + $l0;

        r0.<okhttp3.internal.http2.Http2Stream: long bytesLeftInWriteWindow> = $l1;

        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label1:
        return;
    }
    void cancelStreamIfNecessary() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Stream r0;
        int $i0;
        boolean $z0, $z1;
        java.lang.AssertionError $r1;
        okhttp3.internal.http2.Http2Stream$FramingSource $r2;
        okhttp3.internal.http2.Http2Stream$FramingSink $r3;
        okhttp3.internal.http2.ErrorCode $r4;
        java.lang.Throwable $r5;
        okhttp3.internal.http2.Http2Connection $r6;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $z0 = <okhttp3.internal.http2.Http2Stream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z0 == 0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        entermonitor r0;

     label02:
        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $z0 = $r2.<okhttp3.internal.http2.Http2Stream$FramingSource: boolean finished>;

        if $z0 != 0 goto label06;

        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $z0 = $r2.<okhttp3.internal.http2.Http2Stream$FramingSource: boolean closed>;

        if $z0 == 0 goto label06;

        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $z0 = $r3.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean finished>;

        if $z0 != 0 goto label03;

        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $z0 = $r3.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean closed>;

        if $z0 == 0 goto label06;

     label03:
        $z0 = 1;

     label04:
        $z1 = virtualinvoke r0.<okhttp3.internal.http2.Http2Stream: boolean isOpen()>();

        exitmonitor r0;

     label05:
        if $z0 == 0 goto label10;

        $r4 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode CANCEL>;

        virtualinvoke r0.<okhttp3.internal.http2.Http2Stream: void close(okhttp3.internal.http2.ErrorCode)>($r4);

        return;

     label06:
        $z0 = 0;

        goto label04;

     label07:
        $r5 := @caughtexception;

     label08:
        exitmonitor r0;

     label09:
        throw $r5;

     label10:
        if $z1 != 0 goto label11;

        $r6 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        virtualinvoke $r6.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream removeStream(int)>($i0);

     label11:
        return;

        catch java.lang.Throwable from label02 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }
    void checkOutNotClosed() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.Http2Stream$FramingSink $r1;
        boolean $z0;
        java.io.IOException $r2;
        okhttp3.internal.http2.ErrorCode $r3;
        okhttp3.internal.http2.StreamResetException $r4;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $z0 = $r1.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("stream closed");

        throw $r2;

     label1:
        $r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $z0 = $r1.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean finished>;

        if $z0 == 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("stream finished");

        throw $r2;

     label2:
        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

        if $r3 == null goto label3;

        $r4 = new okhttp3.internal.http2.StreamResetException;

        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

        specialinvoke $r4.<okhttp3.internal.http2.StreamResetException: void <init>(okhttp3.internal.http2.ErrorCode)>($r3);

        throw $r4;

     label3:
        return;
    }
    public void close(okhttp3.internal.http2.ErrorCode) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.ErrorCode $r1;
        int $i0;
        boolean $z0;
        okhttp3.internal.http2.Http2Connection $r2;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $r1 := @parameter0: okhttp3.internal.http2.ErrorCode;

        $z0 = specialinvoke r0.<okhttp3.internal.http2.Http2Stream: boolean closeInternal(okhttp3.internal.http2.ErrorCode)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: void writeSynReset(int,okhttp3.internal.http2.ErrorCode)>($i0, $r1);

        return;
    }
    public void closeLater(okhttp3.internal.http2.ErrorCode)
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.ErrorCode $r1;
        int $i0;
        boolean $z0;
        okhttp3.internal.http2.Http2Connection $r2;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $r1 := @parameter0: okhttp3.internal.http2.ErrorCode;

        $z0 = specialinvoke r0.<okhttp3.internal.http2.Http2Stream: boolean closeInternal(okhttp3.internal.http2.ErrorCode)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Connection: void writeSynResetLater(int,okhttp3.internal.http2.ErrorCode)>($i0, $r1);

        return;
    }
    public okhttp3.internal.http2.Http2Connection getConnection()
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.Http2Connection r1;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        return r1;
    }
    public okhttp3.internal.http2.ErrorCode getErrorCode()
    {
        okhttp3.internal.http2.Http2Stream r0;
        java.lang.Throwable $r1;
        okhttp3.internal.http2.ErrorCode r2;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        entermonitor r0;

     label1:
        r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getId()
    {
        okhttp3.internal.http2.Http2Stream r0;
        int i0;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        return i0;
    }
    public java.util.List getRequestHeaders()
    {
        okhttp3.internal.http2.Http2Stream r0;
        java.util.List r1;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        r1 = r0.<okhttp3.internal.http2.Http2Stream: java.util.List requestHeaders>;

        return r1;
    }
    public okio.Sink getSink()
    {
        okhttp3.internal.http2.Http2Stream r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2;
        okhttp3.internal.http2.Http2Stream$FramingSink r3;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        entermonitor r0;

     label1:
        $z0 = r0.<okhttp3.internal.http2.Http2Stream: boolean hasResponseHeaders>;

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke r0.<okhttp3.internal.http2.Http2Stream: boolean isLocallyInitiated()>();

        if $z0 != 0 goto label4;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("reply before requesting the sink");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

     label3:
        throw $r2;

     label4:
        exitmonitor r0;

     label5:
        r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        return r3;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }
    public okio.Source getSource()
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.Http2Stream$FramingSource r1;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        return r1;
    }
    public boolean isLocallyInitiated()
    {
        okhttp3.internal.http2.Http2Stream r0;
        int $i0;
        boolean z0, $z1;
        okhttp3.internal.http2.Http2Connection $r1;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        $i0 = $i0 & 1;

        if $i0 != 1 goto label2;

        z0 = 1;

     label1:
        $r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $z1 = $r1.<okhttp3.internal.http2.Http2Connection: boolean client>;

        if $z1 != z0 goto label3;

        return 1;

     label2:
        z0 = 0;

        goto label1;

     label3:
        return 0;
    }
    public boolean isOpen()
    {
        okhttp3.internal.http2.Http2Stream r0;
        boolean $z0, $z1;
        okhttp3.internal.http2.ErrorCode $r1;
        okhttp3.internal.http2.Http2Stream$FramingSource $r2;
        okhttp3.internal.http2.Http2Stream$FramingSink $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $z0 = 0;

        entermonitor r0;

     label1:
        $r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

     label2:
        if $r1 == null goto label4;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $z1 = $r2.<okhttp3.internal.http2.Http2Stream$FramingSource: boolean finished>;

        if $z1 != 0 goto label5;

        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $z1 = $r2.<okhttp3.internal.http2.Http2Stream$FramingSource: boolean closed>;

        if $z1 == 0 goto label8;

     label5:
        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $z1 = $r3.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean finished>;

        if $z1 != 0 goto label6;

        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $z1 = $r3.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean closed>;

        if $z1 == 0 goto label8;

     label6:
        $z1 = r0.<okhttp3.internal.http2.Http2Stream: boolean hasResponseHeaders>;

     label7:
        if $z1 != 0 goto label3;

     label8:
        $z0 = 1;

        goto label3;

     label9:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label4 to label7 with label9;
    }
    public okio.Timeout readTimeout()
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.Http2Stream$StreamTimeout r1;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout>;

        return r1;
    }
    void receiveData(okio.BufferedSource, int) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Stream r0;
        okio.BufferedSource $r1;
        int $i0;
        long $l1;
        boolean $z0;
        java.lang.AssertionError $r2;
        okhttp3.internal.http2.Http2Stream$FramingSource $r3;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $r1 := @parameter0: okio.BufferedSource;

        $i0 := @parameter1: int;

        $z0 = <okhttp3.internal.http2.Http2Stream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $l1 = (long) $i0;

        virtualinvoke $r3.<okhttp3.internal.http2.Http2Stream$FramingSource: void receive(okio.BufferedSource,long)>($r1, $l1);

        return;
    }
    void receiveFin()
    {
        okhttp3.internal.http2.Http2Stream r0;
        boolean $z0;
        java.lang.AssertionError $r1;
        okhttp3.internal.http2.Http2Stream$FramingSource $r2;
        okhttp3.internal.http2.Http2Connection $r3;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $z0 = <okhttp3.internal.http2.Http2Stream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        entermonitor r0;

     label2:
        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSource source>;

        $r2.<okhttp3.internal.http2.Http2Stream$FramingSource: boolean finished> = 1;

        $z0 = virtualinvoke r0.<okhttp3.internal.http2.Http2Stream: boolean isOpen()>();

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label3:
        if $z0 != 0 goto label7;

        $r3 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        virtualinvoke $r3.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream removeStream(int)>($i0);

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    void receiveHeaders(java.util.List)
    {
        okhttp3.internal.http2.Http2Stream r0;
        java.util.List r1, $r4;
        java.util.ArrayList r2;
        int $i0;
        boolean $z0;
        java.lang.AssertionError $r3;
        okhttp3.internal.http2.Http2Connection $r5;
        java.lang.Throwable $r6;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        r1 := @parameter0: java.util.List;

        $z0 = <okhttp3.internal.http2.Http2Stream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z0 = 1;

        entermonitor r0;

     label2:
        r0.<okhttp3.internal.http2.Http2Stream: boolean hasResponseHeaders> = 1;

        $r4 = r0.<okhttp3.internal.http2.Http2Stream: java.util.List responseHeaders>;

        if $r4 != null goto label5;

        r0.<okhttp3.internal.http2.Http2Stream: java.util.List responseHeaders> = r1;

        $z0 = virtualinvoke r0.<okhttp3.internal.http2.Http2Stream: boolean isOpen()>();

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label3:
        exitmonitor r0;

     label4:
        if $z0 != 0 goto label8;

        $r5 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        virtualinvoke $r5.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream removeStream(int)>($i0);

        return;

     label5:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<okhttp3.internal.http2.Http2Stream: java.util.List responseHeaders>;

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(null);

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        r0.<okhttp3.internal.http2.Http2Stream: java.util.List responseHeaders> = r2;

        goto label3;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r6;

     label8:
        return;

        catch java.lang.Throwable from label2 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }
    void receiveRstStream(okhttp3.internal.http2.ErrorCode)
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.ErrorCode $r1, $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        $r1 := @parameter0: okhttp3.internal.http2.ErrorCode;

        entermonitor r0;

     label1:
        $r2 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

        if $r2 != null goto label2;

        r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode> = $r1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void sendResponseHeaders(java.util.List, boolean) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Stream r0;
        java.util.List r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r2;
        java.lang.NullPointerException $r3;
        okhttp3.internal.http2.Http2Stream$FramingSink $r4;
        okhttp3.internal.http2.Http2Connection $r5;
        int $i0;
        java.lang.Throwable $r6;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        r1 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        $z1 = <okhttp3.internal.http2.Http2Stream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("responseHeaders == null");

        throw $r3;

     label2:
        $z1 = 0;

        entermonitor r0;

     label3:
        r0.<okhttp3.internal.http2.Http2Stream: boolean hasResponseHeaders> = 1;

        if $z0 != 0 goto label4;

        $r4 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$FramingSink sink>;

        $r4.<okhttp3.internal.http2.Http2Stream$FramingSink: boolean finished> = 1;

        $z1 = 1;

     label4:
        exitmonitor r0;

     label5:
        $r5 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        $i0 = r0.<okhttp3.internal.http2.Http2Stream: int id>;

        virtualinvoke $r5.<okhttp3.internal.http2.Http2Connection: void writeSynReply(int,boolean,java.util.List)>($i0, $z1, r1);

        if $z1 == 0 goto label9;

        $r5 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Connection connection>;

        virtualinvoke $r5.<okhttp3.internal.http2.Http2Connection: void flush()>();

        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r6;

     label9:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
    public java.util.List takeResponseHeaders() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Stream r0;
        java.util.List r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3, $r6;
        okhttp3.internal.http2.Http2Stream$StreamTimeout $r4;
        okhttp3.internal.http2.ErrorCode $r5;
        okhttp3.internal.http2.StreamResetException $r7;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        entermonitor r0;

     label01:
        $z0 = virtualinvoke r0.<okhttp3.internal.http2.Http2Stream: boolean isLocallyInitiated()>();

        if $z0 != 0 goto label03;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("servers cannot read response headers");

        throw $r2;

     label02:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label03:
        $r4 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout>;

        virtualinvoke $r4.<okhttp3.internal.http2.Http2Stream$StreamTimeout: void enter()>();

     label04:
        r1 = r0.<okhttp3.internal.http2.Http2Stream: java.util.List responseHeaders>;

        if r1 != null goto label08;

        $r5 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

        if $r5 != null goto label08;

        virtualinvoke r0.<okhttp3.internal.http2.Http2Stream: void waitForIo()>();

     label05:
        goto label04;

     label06:
        $r6 := @caughtexception;

     label07:
        $r4 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout>;

        virtualinvoke $r4.<okhttp3.internal.http2.Http2Stream$StreamTimeout: void exitAndThrowIfTimedOut()>();

        throw $r6;

     label08:
        $r4 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout>;

        virtualinvoke $r4.<okhttp3.internal.http2.Http2Stream$StreamTimeout: void exitAndThrowIfTimedOut()>();

        r1 = r0.<okhttp3.internal.http2.Http2Stream: java.util.List responseHeaders>;

        if r1 == null goto label10;

        r0.<okhttp3.internal.http2.Http2Stream: java.util.List responseHeaders> = null;

     label09:
        exitmonitor r0;

        return r1;

     label10:
        $r7 = new okhttp3.internal.http2.StreamResetException;

        $r5 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.ErrorCode errorCode>;

        specialinvoke $r7.<okhttp3.internal.http2.StreamResetException: void <init>(okhttp3.internal.http2.ErrorCode)>($r5);

        throw $r7;

     label11:
        nop;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label09 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
    }
    void waitForIo() throws java.io.InterruptedIOException
    {
        okhttp3.internal.http2.Http2Stream r0;
        java.lang.InterruptedException r1;
        java.io.InterruptedIOException $r2;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

     label1:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r2 = new java.io.InterruptedIOException;

        specialinvoke $r2.<java.io.InterruptedIOException: void <init>()>();

        throw $r2;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
    public okio.Timeout writeTimeout()
    {
        okhttp3.internal.http2.Http2Stream r0;
        okhttp3.internal.http2.Http2Stream$StreamTimeout r1;

        r0 := @this: okhttp3.internal.http2.Http2Stream;

        r1 = r0.<okhttp3.internal.http2.Http2Stream: okhttp3.internal.http2.Http2Stream$StreamTimeout writeTimeout>;

        return r1;
    }
