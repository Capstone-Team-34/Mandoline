okhttp3.internal.http2.Http2Codec$StreamFinishingSource extends okio.ForwardingSource
final okhttp3.internal.http2.Http2Codec this$0
    public void <init>(okhttp3.internal.http2.Http2Codec, okio.Source)
    {
        okhttp3.internal.http2.Http2Codec$StreamFinishingSource r0;
        okhttp3.internal.http2.Http2Codec $r1;
        okio.Source $r2;

        r0 := @this: okhttp3.internal.http2.Http2Codec$StreamFinishingSource;

        $r1 := @parameter0: okhttp3.internal.http2.Http2Codec;

        $r2 := @parameter1: okio.Source;

        r0.<okhttp3.internal.http2.Http2Codec$StreamFinishingSource: okhttp3.internal.http2.Http2Codec this$0> = $r1;

        specialinvoke r0.<okio.ForwardingSource: void <init>(okio.Source)>($r2);

        return;
    }
    public void close() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Codec$StreamFinishingSource r0;
        okhttp3.internal.http2.Http2Codec $r1;
        okhttp3.internal.connection.StreamAllocation $r2;

        r0 := @this: okhttp3.internal.http2.Http2Codec$StreamFinishingSource;

        $r1 = r0.<okhttp3.internal.http2.Http2Codec$StreamFinishingSource: okhttp3.internal.http2.Http2Codec this$0>;

        $r2 = $r1.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        $r1 = r0.<okhttp3.internal.http2.Http2Codec$StreamFinishingSource: okhttp3.internal.http2.Http2Codec this$0>;

        virtualinvoke $r2.<okhttp3.internal.connection.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpCodec)>(0, $r1);

        specialinvoke r0.<okio.ForwardingSource: void close()>();

        return;
    }
