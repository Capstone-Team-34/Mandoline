okhttp3.internal.http2.ErrorCode extends java.lang.Enum
private static final okhttp3.internal.http2.ErrorCode[] $VALUES
public static final enum okhttp3.internal.http2.ErrorCode CANCEL
public static final enum okhttp3.internal.http2.ErrorCode FLOW_CONTROL_ERROR
public static final enum okhttp3.internal.http2.ErrorCode INTERNAL_ERROR
public static final enum okhttp3.internal.http2.ErrorCode NO_ERROR
public static final enum okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR
public static final enum okhttp3.internal.http2.ErrorCode REFUSED_STREAM
public final int httpCode
    static void <clinit>()
    {
        okhttp3.internal.http2.ErrorCode $r0;
        okhttp3.internal.http2.ErrorCode[] $r1;

        $r0 = new okhttp3.internal.http2.ErrorCode;

        specialinvoke $r0.<okhttp3.internal.http2.ErrorCode: void <init>(java.lang.String,int,int)>("NO_ERROR", 0, 0);

        <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode NO_ERROR> = $r0;

        $r0 = new okhttp3.internal.http2.ErrorCode;

        specialinvoke $r0.<okhttp3.internal.http2.ErrorCode: void <init>(java.lang.String,int,int)>("PROTOCOL_ERROR", 1, 1);

        <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR> = $r0;

        $r0 = new okhttp3.internal.http2.ErrorCode;

        specialinvoke $r0.<okhttp3.internal.http2.ErrorCode: void <init>(java.lang.String,int,int)>("INTERNAL_ERROR", 2, 2);

        <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode INTERNAL_ERROR> = $r0;

        $r0 = new okhttp3.internal.http2.ErrorCode;

        specialinvoke $r0.<okhttp3.internal.http2.ErrorCode: void <init>(java.lang.String,int,int)>("FLOW_CONTROL_ERROR", 3, 3);

        <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode FLOW_CONTROL_ERROR> = $r0;

        $r0 = new okhttp3.internal.http2.ErrorCode;

        specialinvoke $r0.<okhttp3.internal.http2.ErrorCode: void <init>(java.lang.String,int,int)>("REFUSED_STREAM", 4, 7);

        <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode REFUSED_STREAM> = $r0;

        $r0 = new okhttp3.internal.http2.ErrorCode;

        specialinvoke $r0.<okhttp3.internal.http2.ErrorCode: void <init>(java.lang.String,int,int)>("CANCEL", 5, 8);

        <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode CANCEL> = $r0;

        $r1 = newarray (okhttp3.internal.http2.ErrorCode)[6];

        $r0 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode NO_ERROR>;

        $r1[0] = $r0;

        $r0 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR>;

        $r1[1] = $r0;

        $r0 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode INTERNAL_ERROR>;

        $r1[2] = $r0;

        $r0 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode FLOW_CONTROL_ERROR>;

        $r1[3] = $r0;

        $r0 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode REFUSED_STREAM>;

        $r1[4] = $r0;

        $r0 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode CANCEL>;

        $r1[5] = $r0;

        <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int, int)
    {
        okhttp3.internal.http2.ErrorCode r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @this: okhttp3.internal.http2.ErrorCode;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<okhttp3.internal.http2.ErrorCode: int httpCode> = $i1;

        return;
    }
    public static okhttp3.internal.http2.ErrorCode fromHttp2(int)
    {
        int $i0, $i1, $i2, $i3;
        okhttp3.internal.http2.ErrorCode[] $r0;
        okhttp3.internal.http2.ErrorCode r1;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode[] values()>();

        $i1 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label3;

        r1 = $r0[$i3];

        $i2 = r1.<okhttp3.internal.http2.ErrorCode: int httpCode>;

        if $i2 != $i0 goto label2;

        return r1;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return null;
    }
    public static okhttp3.internal.http2.ErrorCode valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        okhttp3.internal.http2.ErrorCode $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lokhttp3/internal/http2/ErrorCode;", $r0);

        $r2 = (okhttp3.internal.http2.ErrorCode) $r1;

        return $r2;
    }
    public static okhttp3.internal.http2.ErrorCode[] values()
    {
        java.lang.Object $r0;
        okhttp3.internal.http2.ErrorCode[] $r1;

        $r1 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (okhttp3.internal.http2.ErrorCode[]) $r0;

        return $r1;
    }
