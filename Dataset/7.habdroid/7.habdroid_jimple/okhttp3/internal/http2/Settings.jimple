okhttp3.internal.http2.Settings extends java.lang.Object
static final int COUNT
static final int DEFAULT_INITIAL_WINDOW_SIZE
static final int ENABLE_PUSH
static final int HEADER_TABLE_SIZE
static final int INITIAL_WINDOW_SIZE
static final int MAX_CONCURRENT_STREAMS
static final int MAX_FRAME_SIZE
static final int MAX_HEADER_LIST_SIZE
private int set
private final int[] values
    public void <init>()
    {
        okhttp3.internal.http2.Settings r0;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[10];

        r0.<okhttp3.internal.http2.Settings: int[] values> = $r1;

        return;
    }
    void clear()
    {
        okhttp3.internal.http2.Settings r0;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        r0.<okhttp3.internal.http2.Settings: int set> = 0;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 0);

        return;
    }
    int get(int)
    {
        okhttp3.internal.http2.Settings r0;
        int $i0;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 := @parameter0: int;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $i0 = $r1[$i0];

        return $i0;
    }
    boolean getEnablePush(boolean)
    {
        okhttp3.internal.http2.Settings r0;
        boolean $z0;
        int $i0;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $z0 := @parameter0: boolean;

        $i0 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $i0 = $r1[2];

     label1:
        if $i0 != 1 goto label4;

        return 1;

     label2:
        if $z0 == 0 goto label3;

        $i0 = 1;

        goto label1;

     label3:
        $i0 = 0;

        goto label1;

     label4:
        return 0;
    }
    int getHeaderTableSize()
    {
        okhttp3.internal.http2.Settings r0;
        int $i0;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $i0 = $r1[1];

        return $i0;

     label1:
        return -1;
    }
    int getInitialWindowSize()
    {
        okhttp3.internal.http2.Settings r0;
        int $i0;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i0 = $i0 & 128;

        if $i0 == 0 goto label1;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $i0 = $r1[7];

        return $i0;

     label1:
        return 65535;
    }
    int getMaxConcurrentStreams(int)
    {
        okhttp3.internal.http2.Settings r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 := @parameter0: int;

        $i1 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i1 = $i1 & 16;

        if $i1 == 0 goto label1;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $i0 = $r1[4];

     label1:
        return $i0;
    }
    int getMaxFrameSize(int)
    {
        okhttp3.internal.http2.Settings r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 := @parameter0: int;

        $i1 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i1 = $i1 & 32;

        if $i1 == 0 goto label1;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $i0 = $r1[5];

     label1:
        return $i0;
    }
    int getMaxHeaderListSize(int)
    {
        okhttp3.internal.http2.Settings r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 := @parameter0: int;

        $i1 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i1 = $i1 & 64;

        if $i1 == 0 goto label1;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $i0 = $r1[6];

     label1:
        return $i0;
    }
    boolean isSet(int)
    {
        okhttp3.internal.http2.Settings r0;
        int $i0, $i1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 := @parameter0: int;

        $i0 = 1 << $i0;

        $i1 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    void merge(okhttp3.internal.http2.Settings)
    {
        okhttp3.internal.http2.Settings r0, $r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: okhttp3.internal.http2.Settings;

        $r1 := @parameter0: okhttp3.internal.http2.Settings;

        i0 = 0;

     label1:
        if i0 >= 10 goto label4;

        $z0 = virtualinvoke $r1.<okhttp3.internal.http2.Settings: boolean isSet(int)>(i0);

        if $z0 != 0 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $i1 = virtualinvoke $r1.<okhttp3.internal.http2.Settings: int get(int)>(i0);

        virtualinvoke r0.<okhttp3.internal.http2.Settings: okhttp3.internal.http2.Settings set(int,int)>(i0, $i1);

        goto label2;

     label4:
        return;
    }
    okhttp3.internal.http2.Settings set(int, int)
    {
        okhttp3.internal.http2.Settings r0;
        int $i0, $i1, i2, $i3;
        int[] $r1;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        i2 = lengthof $r1;

        if $i0 < i2 goto label1;

        return r0;

     label1:
        i2 = 1 << $i0;

        $i3 = r0.<okhttp3.internal.http2.Settings: int set>;

        i2 = $i3 | i2;

        r0.<okhttp3.internal.http2.Settings: int set> = i2;

        $r1 = r0.<okhttp3.internal.http2.Settings: int[] values>;

        $r1[$i0] = $i1;

        return r0;
    }
    int size()
    {
        okhttp3.internal.http2.Settings r0;
        int $i0;

        r0 := @this: okhttp3.internal.http2.Settings;

        $i0 = r0.<okhttp3.internal.http2.Settings: int set>;

        $i0 = staticinvoke <java.lang.Integer: int bitCount(int)>($i0);

        return $i0;
    }
