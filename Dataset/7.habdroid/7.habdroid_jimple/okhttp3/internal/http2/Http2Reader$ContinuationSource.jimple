okhttp3.internal.http2.Http2Reader$ContinuationSource extends java.lang.Object implements okio.Source
byte flags
int left
int length
short padding
private final okio.BufferedSource source
int streamId
    public void <init>(okio.BufferedSource)
    {
        okhttp3.internal.http2.Http2Reader$ContinuationSource r0;
        okio.BufferedSource $r1;

        r0 := @this: okhttp3.internal.http2.Http2Reader$ContinuationSource;

        $r1 := @parameter0: okio.BufferedSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source> = $r1;

        return;
    }
    private void readContinuationHeader() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Reader$ContinuationSource r0;
        int i0, $i3, $i4;
        byte b1, $b2;
        okio.BufferedSource $r1;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        boolean $z0;
        java.lang.String $r4;
        java.lang.Object[] $r5;
        java.lang.Byte $r6;
        java.io.IOException $r7;

        r0 := @this: okhttp3.internal.http2.Http2Reader$ContinuationSource;

        i0 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int streamId>;

        $r1 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source>;

        $i3 = staticinvoke <okhttp3.internal.http2.Http2Reader: int readMedium(okio.BufferedSource)>($r1);

        r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int left> = $i3;

        r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int length> = $i3;

        $r1 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source>;

        b1 = interfaceinvoke $r1.<okio.BufferedSource: byte readByte()>();

        $i3 = b1 & 255;

        b1 = (byte) $i3;

        $r1 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source>;

        $b2 = interfaceinvoke $r1.<okio.BufferedSource: byte readByte()>();

        $i3 = $b2 & 255;

        $b2 = (byte) $i3;

        r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: byte flags> = $b2;

        $r2 = <okhttp3.internal.http2.Http2Reader: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r3);

        if $z0 == 0 goto label1;

        $r2 = <okhttp3.internal.http2.Http2Reader: java.util.logging.Logger logger>;

        $i3 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int streamId>;

        $i4 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int length>;

        $b2 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: byte flags>;

        $r4 = staticinvoke <okhttp3.internal.http2.Http2: java.lang.String frameLog(boolean,int,int,byte,byte)>(1, $i3, $i4, b1, $b2);

        virtualinvoke $r2.<java.util.logging.Logger: void fine(java.lang.String)>($r4);

     label1:
        $r1 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source>;

        $i3 = interfaceinvoke $r1.<okio.BufferedSource: int readInt()>();

        $i3 = $i3 & 2147483647;

        r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int streamId> = $i3;

        if b1 == 9 goto label2;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b1);

        $r5[0] = $r6;

        $r7 = staticinvoke <okhttp3.internal.http2.Http2: java.io.IOException ioException(java.lang.String,java.lang.Object[])>("%s != TYPE_CONTINUATION", $r5);

        throw $r7;

     label2:
        $i3 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int streamId>;

        if $i3 == i0 goto label3;

        $r5 = newarray (java.lang.Object)[0];

        $r7 = staticinvoke <okhttp3.internal.http2.Http2: java.io.IOException ioException(java.lang.String,java.lang.Object[])>("TYPE_CONTINUATION streamId changed", $r5);

        throw $r7;

     label3:
        return;
    }
    public void close() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Reader$ContinuationSource r0;

        r0 := @this: okhttp3.internal.http2.Http2Reader$ContinuationSource;

        return;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Reader$ContinuationSource r0;
        okio.Buffer $r1;
        long $l0, $l3;
        int $i1;
        okio.BufferedSource $r2;
        short $s2;
        byte $b4;

        r0 := @this: okhttp3.internal.http2.Http2Reader$ContinuationSource;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

     label1:
        $i1 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int left>;

        if $i1 != 0 goto label3;

        $r2 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source>;

        $s2 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: short padding>;

        $l3 = (long) $s2;

        interfaceinvoke $r2.<okio.BufferedSource: void skip(long)>($l3);

        r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: short padding> = 0;

        $b4 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: byte flags>;

        $i1 = $b4 & 4;

        if $i1 == 0 goto label2;

        return -1L;

     label2:
        specialinvoke r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: void readContinuationHeader()>();

        goto label1;

     label3:
        $r2 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source>;

        $i1 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int left>;

        $l3 = (long) $i1;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l3);

        $l0 = interfaceinvoke $r2.<okio.BufferedSource: long read(okio.Buffer,long)>($r1, $l0);

        $b4 = $l0 cmp -1L;

        if $b4 != 0 goto label4;

        return -1L;

     label4:
        $i1 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int left>;

        $l3 = (long) $i1;

        $l3 = $l3 - $l0;

        $i1 = (int) $l3;

        r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: int left> = $i1;

        return $l0;
    }
    public okio.Timeout timeout()
    {
        okhttp3.internal.http2.Http2Reader$ContinuationSource r0;
        okio.Timeout $r1;
        okio.BufferedSource $r2;

        r0 := @this: okhttp3.internal.http2.Http2Reader$ContinuationSource;

        $r2 = r0.<okhttp3.internal.http2.Http2Reader$ContinuationSource: okio.BufferedSource source>;

        $r1 = interfaceinvoke $r2.<okio.BufferedSource: okio.Timeout timeout()>();

        return $r1;
    }
