okhttp3.internal.platform.Jdk9Platform extends okhttp3.internal.platform.Platform
final java.lang.reflect.Method getProtocolMethod
final java.lang.reflect.Method setProtocolMethod
    public void <init>(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        okhttp3.internal.platform.Jdk9Platform r0;
        java.lang.reflect.Method $r1, $r2;

        r0 := @this: okhttp3.internal.platform.Jdk9Platform;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>();

        r0.<okhttp3.internal.platform.Jdk9Platform: java.lang.reflect.Method setProtocolMethod> = $r1;

        r0.<okhttp3.internal.platform.Jdk9Platform: java.lang.reflect.Method getProtocolMethod> = $r2;

        return;
    }
    public static okhttp3.internal.platform.Jdk9Platform buildIfSupported()
    {
        java.lang.Class $r0;
        java.lang.Class[] $r1;
        java.lang.reflect.Method $r2, $r3;
        okhttp3.internal.platform.Jdk9Platform $r4;
        java.lang.NoSuchMethodException $r5;

        $r0 = class "Ljavax/net/ssl/SSLParameters;";

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "[Ljava/lang/String;";

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setApplicationProtocols", $r1);

     label2:
        $r0 = class "Ljavax/net/ssl/SSLSocket;";

        $r1 = newarray (java.lang.Class)[0];

     label3:
        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getApplicationProtocol", $r1);

     label4:
        $r4 = new okhttp3.internal.platform.Jdk9Platform;

     label5:
        specialinvoke $r4.<okhttp3.internal.platform.Jdk9Platform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method)>($r2, $r3);

     label6:
        return $r4;

     label7:
        $r5 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.lang.NoSuchMethodException from label3 to label4 with label7;
        catch java.lang.NoSuchMethodException from label5 to label6 with label7;
    }
    public void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        okhttp3.internal.platform.Jdk9Platform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List r3;
        javax.net.ssl.SSLParameters $r4;
        java.lang.reflect.Method $r5;
        java.lang.Object[] $r6, $r8;
        int $i0;
        java.lang.String[] $r7;
        java.lang.IllegalAccessException r9;
        java.lang.AssertionError $r10;
        java.lang.reflect.InvocationTargetException r11;

        r0 := @this: okhttp3.internal.platform.Jdk9Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

     label01:
        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>();

        r3 = staticinvoke <okhttp3.internal.platform.Jdk9Platform: java.util.List alpnProtocolNames(java.util.List)>(r3);

     label02:
        $r5 = r0.<okhttp3.internal.platform.Jdk9Platform: java.lang.reflect.Method setProtocolMethod>;

        $r6 = newarray (java.lang.Object)[1];

     label03:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

     label04:
        $r7 = newarray (java.lang.String)[$i0];

     label05:
        $r8 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label06:
        $r6[0] = $r8;

     label07:
        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r6);

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>($r4);

     label08:
        return;

     label09:
        r9 := @caughtexception;

     label10:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label11:
        r11 := @caughtexception;

        goto label10;

        catch java.lang.IllegalAccessException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label03 to label04 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label11;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label11;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label11;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label11;
    }
    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        okhttp3.internal.platform.Jdk9Platform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0;
        java.lang.IllegalAccessException r6;
        java.lang.AssertionError $r7;
        java.lang.reflect.InvocationTargetException r8;

        r0 := @this: okhttp3.internal.platform.Jdk9Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<okhttp3.internal.platform.Jdk9Platform: java.lang.reflect.Method getProtocolMethod>;

        $r3 = newarray (java.lang.Object)[0];

     label1:
        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label2:
        r5 = (java.lang.String) $r4;

        if r5 == null goto label5;

     label3:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("");

     label4:
        if $z0 == 0 goto label9;

     label5:
        return null;

     label6:
        r6 := @caughtexception;

     label7:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label8:
        r8 := @caughtexception;

        goto label7;

     label9:
        return r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label8;
    }
    public javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)
    {
        okhttp3.internal.platform.Jdk9Platform r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: okhttp3.internal.platform.Jdk9Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+");

        throw $r2;
    }
