okhttp3.internal.platform.AndroidPlatform extends okhttp3.internal.platform.Platform
private static final int MAX_LOG_LENGTH
private final okhttp3.internal.platform.AndroidPlatform$CloseGuard closeGuard
private final okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol
private final okhttp3.internal.platform.OptionalMethod setAlpnProtocols
private final okhttp3.internal.platform.OptionalMethod setHostname
private final okhttp3.internal.platform.OptionalMethod setUseSessionTickets
private final java.lang.Class sslParametersClass
    public void <init>(java.lang.Class, okhttp3.internal.platform.OptionalMethod, okhttp3.internal.platform.OptionalMethod, okhttp3.internal.platform.OptionalMethod, okhttp3.internal.platform.OptionalMethod)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        java.lang.Class r1;
        okhttp3.internal.platform.OptionalMethod r2, r3, r4, r5;
        okhttp3.internal.platform.AndroidPlatform$CloseGuard $r6;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: okhttp3.internal.platform.OptionalMethod;

        r3 := @parameter2: okhttp3.internal.platform.OptionalMethod;

        r4 := @parameter3: okhttp3.internal.platform.OptionalMethod;

        r5 := @parameter4: okhttp3.internal.platform.OptionalMethod;

        specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>();

        $r6 = staticinvoke <okhttp3.internal.platform.AndroidPlatform$CloseGuard: okhttp3.internal.platform.AndroidPlatform$CloseGuard get()>();

        r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.AndroidPlatform$CloseGuard closeGuard> = $r6;

        r0.<okhttp3.internal.platform.AndroidPlatform: java.lang.Class sslParametersClass> = r1;

        r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setUseSessionTickets> = r2;

        r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setHostname> = r3;

        r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol> = r4;

        r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setAlpnProtocols> = r5;

        return;
    }
    public static okhttp3.internal.platform.Platform buildIfSupported()
    {
        okhttp3.internal.platform.OptionalMethod r0, r1, r3, r4, r8;
        java.lang.ClassNotFoundException r2, $r10, $r11, $r12;
        java.lang.Class $r5, $r7;
        java.lang.Class[] $r6;
        okhttp3.internal.platform.AndroidPlatform $r9;

     label01:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.android.org.conscrypt.SSLParametersImpl");

     label02:
        r0 = new okhttp3.internal.platform.OptionalMethod;

        $r6 = newarray (java.lang.Class)[1];

        $r7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6[0] = $r7;

     label03:
        specialinvoke r0.<okhttp3.internal.platform.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r6);

     label04:
        r1 = new okhttp3.internal.platform.OptionalMethod;

        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljava/lang/String;";

     label05:
        specialinvoke r1.<okhttp3.internal.platform.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r6);

     label06:
        r4 = null;

        r8 = null;

     label07:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.net.Network");

     label08:
        r3 = new okhttp3.internal.platform.OptionalMethod;

        $r6 = newarray (java.lang.Class)[0];

     label09:
        specialinvoke r3.<okhttp3.internal.platform.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(class "[B", "getAlpnSelectedProtocol", $r6);

     label10:
        r4 = new okhttp3.internal.platform.OptionalMethod;

        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "[B";

     label11:
        specialinvoke r4.<okhttp3.internal.platform.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setAlpnProtocols", $r6);

     label12:
        r8 = r4;

        r4 = r3;

     label13:
        $r9 = new okhttp3.internal.platform.AndroidPlatform;

     label14:
        specialinvoke $r9.<okhttp3.internal.platform.AndroidPlatform: void <init>(java.lang.Class,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod)>($r5, r0, r1, r4, r8);

     label15:
        return $r9;

     label16:
        r2 := @caughtexception;

     label17:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.harmony.xnet.provider.jsse.SSLParametersImpl");

     label18:
        goto label02;

     label19:
        $r10 := @caughtexception;

        return null;

     label20:
        $r11 := @caughtexception;

        goto label13;

     label21:
        $r12 := @caughtexception;

        r4 = r3;

        goto label13;

        catch java.lang.ClassNotFoundException from label01 to label02 with label16;
        catch java.lang.ClassNotFoundException from label03 to label04 with label19;
        catch java.lang.ClassNotFoundException from label05 to label06 with label19;
        catch java.lang.ClassNotFoundException from label07 to label08 with label20;
        catch java.lang.ClassNotFoundException from label09 to label10 with label20;
        catch java.lang.ClassNotFoundException from label11 to label12 with label21;
        catch java.lang.ClassNotFoundException from label14 to label15 with label19;
        catch java.lang.ClassNotFoundException from label17 to label18 with label19;
    }
    public okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        javax.net.ssl.X509TrustManager $r1;
        java.lang.Exception r2;
        java.lang.Class $r3;
        java.lang.Class[] $r4;
        java.lang.reflect.Constructor $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        java.lang.reflect.Method $r8;
        okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner $r9;
        okhttp3.internal.tls.CertificateChainCleaner $r10;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: javax.net.ssl.X509TrustManager;

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.net.http.X509TrustManagerExtensions");

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljavax/net/ssl/X509TrustManager;";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        $r7 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r4 = newarray (java.lang.Class)[3];

        $r4[0] = class "[Ljava/security/cert/X509Certificate;";

        $r4[1] = class "Ljava/lang/String;";

        $r4[2] = class "Ljava/lang/String;";

        $r8 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("checkServerTrusted", $r4);

     label2:
        $r9 = new okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner;

     label3:
        specialinvoke $r9.<okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>($r7, $r8);

     label4:
        return $r9;

     label5:
        r2 := @caughtexception;

        $r10 = specialinvoke r0.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>($r1);

        return $r10;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List r3;
        java.lang.Object[] r4;
        okhttp3.internal.platform.OptionalMethod $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        byte[] $r7;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        if $r2 == null goto label1;

        $r5 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setUseSessionTickets>;

        r4 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r4[0] = $r6;

        virtualinvoke $r5.<okhttp3.internal.platform.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, r4);

        $r5 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setHostname>;

        r4 = newarray (java.lang.Object)[1];

        r4[0] = $r2;

        virtualinvoke $r5.<okhttp3.internal.platform.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, r4);

     label1:
        $r5 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setAlpnProtocols>;

        if $r5 == null goto label2;

        $r5 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setAlpnProtocols>;

        $z0 = virtualinvoke $r5.<okhttp3.internal.platform.OptionalMethod: boolean isSupported(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        r4 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: byte[] concatLengthPrefixed(java.util.List)>(r3);

        r4[0] = $r7;

        $r5 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod setAlpnProtocols>;

        virtualinvoke $r5.<okhttp3.internal.platform.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, r4);

     label2:
        return;
    }
    public void connectSocket(java.net.Socket, java.net.InetSocketAddress, int) throws java.io.IOException
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        java.net.Socket $r1;
        java.net.InetSocketAddress $r2;
        int $i0;
        java.io.IOException r3;
        boolean $z0;
        java.lang.AssertionError r4;
        java.lang.SecurityException r5;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $i0 := @parameter2: int;

     label1:
        virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0);

     label2:
        return;

     label3:
        r4 := @caughtexception;

        $z0 = staticinvoke <okhttp3.internal.Util: boolean isAndroidGetsocknameError(java.lang.AssertionError)>(r4);

        if $z0 == 0 goto label4;

        r3 = new java.io.IOException;

        specialinvoke r3.<java.io.IOException: void <init>(java.lang.Throwable)>(r4);

        throw r3;

     label4:
        throw r4;

     label5:
        r5 := @caughtexception;

        r3 = new java.io.IOException;

        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>("Exception in connect");

        virtualinvoke r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r5);

        throw r3;

        catch java.lang.AssertionError from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label5;
    }
    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        okhttp3.internal.platform.OptionalMethod $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        byte[] $r5;
        java.lang.String $r6;
        java.nio.charset.Charset $r7;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol>;

        $z0 = virtualinvoke $r2.<okhttp3.internal.platform.OptionalMethod: boolean isSupported(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        $r2 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol>;

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<okhttp3.internal.platform.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r3);

        $r5 = (byte[]) $r4;

        if $r5 == null goto label3;

        $r6 = new java.lang.String;

        $r7 = <okhttp3.internal.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r5, $r7);

     label2:
        return $r6;

     label3:
        $r6 = null;

        goto label2;

     label4:
        return null;
    }
    public java.lang.Object getStackTraceForCloseable(java.lang.String)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        okhttp3.internal.platform.AndroidPlatform$CloseGuard $r3;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.AndroidPlatform$CloseGuard closeGuard>;

        $r2 = virtualinvoke $r3.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.Object createAndOpen(java.lang.String)>($r1);

        return $r2;
    }
    public boolean isCleartextTrafficPermitted(java.lang.String)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        java.lang.Boolean $r7;
        boolean $z0;
        java.lang.ClassNotFoundException r8;
        java.lang.IllegalAccessException r9;
        java.lang.AssertionError $r10;
        java.lang.IllegalArgumentException r11;
        java.lang.reflect.InvocationTargetException r12;
        java.lang.NoSuchMethodException r13;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: java.lang.String;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.security.NetworkSecurityPolicy");

     label02:
        $r3 = newarray (java.lang.Class)[0];

     label03:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstance", $r3);

     label04:
        $r5 = newarray (java.lang.Object)[0];

     label05:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label06:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/String;";

     label07:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isCleartextTrafficPermitted", $r3);

     label08:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r1;

     label09:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

     label10:
        $r7 = (java.lang.Boolean) $r6;

     label11:
        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

     label12:
        return $z0;

     label13:
        r8 := @caughtexception;

     label14:
        $z0 = specialinvoke r0.<okhttp3.internal.platform.Platform: boolean isCleartextTrafficPermitted(java.lang.String)>($r1);

        return $z0;

     label15:
        r9 := @caughtexception;

     label16:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label17:
        r11 := @caughtexception;

        goto label16;

     label18:
        r12 := @caughtexception;

        goto label16;

     label19:
        r13 := @caughtexception;

        goto label14;

        catch java.lang.ClassNotFoundException from label01 to label02 with label13;
        catch java.lang.ClassNotFoundException from label03 to label04 with label13;
        catch java.lang.ClassNotFoundException from label05 to label06 with label13;
        catch java.lang.ClassNotFoundException from label07 to label08 with label13;
        catch java.lang.ClassNotFoundException from label09 to label10 with label13;
        catch java.lang.ClassNotFoundException from label11 to label12 with label13;
        catch java.lang.NoSuchMethodException from label01 to label02 with label19;
        catch java.lang.NoSuchMethodException from label03 to label04 with label19;
        catch java.lang.NoSuchMethodException from label05 to label06 with label19;
        catch java.lang.NoSuchMethodException from label07 to label08 with label19;
        catch java.lang.NoSuchMethodException from label09 to label10 with label19;
        catch java.lang.NoSuchMethodException from label11 to label12 with label19;
        catch java.lang.IllegalAccessException from label01 to label02 with label15;
        catch java.lang.IllegalAccessException from label03 to label04 with label15;
        catch java.lang.IllegalAccessException from label05 to label06 with label15;
        catch java.lang.IllegalAccessException from label07 to label08 with label15;
        catch java.lang.IllegalAccessException from label09 to label10 with label15;
        catch java.lang.IllegalAccessException from label11 to label12 with label15;
        catch java.lang.IllegalArgumentException from label01 to label02 with label17;
        catch java.lang.IllegalArgumentException from label03 to label04 with label17;
        catch java.lang.IllegalArgumentException from label05 to label06 with label17;
        catch java.lang.IllegalArgumentException from label07 to label08 with label17;
        catch java.lang.IllegalArgumentException from label09 to label10 with label17;
        catch java.lang.IllegalArgumentException from label11 to label12 with label17;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label18;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label18;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label18;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label18;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label18;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label18;
    }
    public void log(int, java.lang.String, java.lang.Throwable)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        int $i0, $i2, $i3, i4;
        java.lang.Throwable $r1;
        java.lang.String $r2, $r4;
        byte b1;
        java.lang.StringBuilder $r3;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $i0 := @parameter0: int;

        $r2 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Throwable;

        b1 = 5;

        if $i0 != 5 goto label5;

     label1:
        if $r1 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r2 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $i0 = 0;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

     label3:
        if $i0 >= $i2 goto label7;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(10, $i0);

        i4 = $i3;

        if $i3 == -1 goto label6;

     label4:
        $i3 = $i0 + 4000;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i3);

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>(b1, "OkHttp", $r4);

        $i0 = $i3;

        if $i3 < i4 goto label4;

        $i0 = $i3 + 1;

        goto label3;

     label5:
        b1 = 3;

        goto label1;

     label6:
        i4 = $i2;

        goto label4;

     label7:
        return;
    }
    public void logCloseableLeak(java.lang.String, java.lang.Object)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        boolean $z0;
        okhttp3.internal.platform.AndroidPlatform$CloseGuard $r3;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.AndroidPlatform$CloseGuard closeGuard>;

        $z0 = virtualinvoke $r3.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: boolean warnIfOpen(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<okhttp3.internal.platform.AndroidPlatform: void log(int,java.lang.String,java.lang.Throwable)>(5, $r1, null);

     label1:
        return;
    }
    public javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)
    {
        okhttp3.internal.platform.AndroidPlatform r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.ClassNotFoundException r2;
        java.lang.Class $r3;
        java.lang.Object $r4, r5;
        java.lang.ClassLoader $r6;
        javax.net.ssl.X509TrustManager r7;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r3 = r0.<okhttp3.internal.platform.AndroidPlatform: java.lang.Class sslParametersClass>;

        $r4 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r3, "sslParameters");

        r5 = $r4;

        if $r4 != null goto label2;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.google.android.gms.org.conscrypt.SSLParametersImpl", 0, $r6);

        r5 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r3, "sslParameters");

     label2:
        $r4 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>(r5, class "Ljavax/net/ssl/X509TrustManager;", "x509TrustManager");

        r7 = (javax.net.ssl.X509TrustManager) $r4;

        if r7 == null goto label4;

        return r7;

     label3:
        r2 := @caughtexception;

        r7 = specialinvoke r0.<okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r1);

        return r7;

     label4:
        r5 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>(r5, class "Ljavax/net/ssl/X509TrustManager;", "trustManager");

        r7 = (javax.net.ssl.X509TrustManager) r5;

        return r7;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
