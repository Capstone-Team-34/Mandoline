okhttp3.internal.platform.Platform extends java.lang.Object
public static final int INFO
private static final okhttp3.internal.platform.Platform PLATFORM
public static final int WARN
private static final java.util.logging.Logger logger
    static void <clinit>()
    {
        okhttp3.internal.platform.Platform $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;

        $r0 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform findPlatform()>();

        <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform PLATFORM> = $r0;

        $r1 = class "Lokhttp3/OkHttpClient;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        <okhttp3.internal.platform.Platform: java.util.logging.Logger logger> = $r3;

        return;
    }
    public void <init>()
    {
        okhttp3.internal.platform.Platform r0;

        r0 := @this: okhttp3.internal.platform.Platform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.util.List alpnProtocolNames(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1;
        int $i0, $i1;
        java.lang.Object $r2;
        okhttp3.Protocol r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.util.List;

        r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

     label1:
        if $i0 >= $i1 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (okhttp3.Protocol) $r2;

        $r4 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_0>;

        if r3 != $r4 goto label3;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r3.<okhttp3.Protocol: java.lang.String toString()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label4:
        return r1;
    }
    static byte[] concatLengthPrefixed(java.util.List)
    {
        java.util.List r0;
        okio.Buffer r1;
        int i0, $i1, $i2;
        java.lang.Object $r2;
        okhttp3.Protocol r3, $r4;
        java.lang.String $r5;
        byte[] $r6;

        r0 := @parameter0: java.util.List;

        r1 = new okio.Buffer;

        specialinvoke r1.<okio.Buffer: void <init>()>();

        i0 = 0;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (okhttp3.Protocol) $r2;

        $r4 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_0>;

        if r3 != $r4 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r3.<okhttp3.Protocol: java.lang.String toString()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeByte(int)>($i2);

        $r5 = virtualinvoke r3.<okhttp3.Protocol: java.lang.String toString()>();

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r5);

        goto label2;

     label4:
        $r6 = virtualinvoke r1.<okio.Buffer: byte[] readByteArray()>();

        return $r6;
    }
    private static okhttp3.internal.platform.Platform findPlatform()
    {
        okhttp3.internal.platform.Platform $r0;
        okhttp3.internal.platform.Jdk9Platform $r1;

        $r0 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.Platform buildIfSupported()>();

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <okhttp3.internal.platform.Jdk9Platform: okhttp3.internal.platform.Jdk9Platform buildIfSupported()>();

        if $r1 == null goto label2;

        return $r1;

     label2:
        $r0 = staticinvoke <okhttp3.internal.platform.JdkWithJettyBootPlatform: okhttp3.internal.platform.Platform buildIfSupported()>();

        if $r0 == null goto label3;

        return $r0;

     label3:
        $r0 = new okhttp3.internal.platform.Platform;

        specialinvoke $r0.<okhttp3.internal.platform.Platform: void <init>()>();

        return $r0;
    }
    public static okhttp3.internal.platform.Platform get()
    {
        okhttp3.internal.platform.Platform r0;

        r0 = <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform PLATFORM>;

        return r0;
    }
    static java.lang.Object readFieldOrNull(java.lang.Object, java.lang.Class, java.lang.String)
    {
        java.lang.Object $r0, $r6;
        java.lang.Class r1, $r4;
        java.lang.String $r2;
        java.lang.IllegalAccessException r3;
        java.lang.reflect.Field $r5;
        boolean $z0;
        java.lang.AssertionError $r7;
        java.lang.NoSuchFieldException $r8;

        $r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: java.lang.String;

        $r4 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

     label01:
        if $r4 == class "Ljava/lang/Object;" goto label10;

     label02:
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

     label03:
        if $r6 == null goto label11;

     label04:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r6);

     label05:
        if $z0 != 0 goto label06;

        return null;

     label06:
        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r6);

     label07:
        return $r6;

     label08:
        r3 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label09:
        $r8 := @caughtexception;

        $r4 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label01;

     label10:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("delegate");

        if $z0 != 0 goto label11;

        $r0 = staticinvoke <okhttp3.internal.platform.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "Ljava/lang/Object;", "delegate");

        if $r0 == null goto label11;

        $r0 = staticinvoke <okhttp3.internal.platform.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, r1, $r2);

        return $r0;

     label11:
        return null;

        catch java.lang.NoSuchFieldException from label02 to label03 with label09;
        catch java.lang.NoSuchFieldException from label04 to label05 with label09;
        catch java.lang.NoSuchFieldException from label06 to label07 with label09;
        catch java.lang.IllegalAccessException from label02 to label03 with label08;
        catch java.lang.IllegalAccessException from label04 to label05 with label08;
        catch java.lang.IllegalAccessException from label06 to label07 with label08;
    }
    public void afterHandshake(javax.net.ssl.SSLSocket)
    {
        okhttp3.internal.platform.Platform r0;
        javax.net.ssl.SSLSocket $r1;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        return;
    }
    public okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)
    {
        okhttp3.internal.platform.Platform r0;
        javax.net.ssl.X509TrustManager $r1;
        okhttp3.internal.tls.BasicCertificateChainCleaner $r2;
        okhttp3.internal.tls.TrustRootIndex $r3;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: javax.net.ssl.X509TrustManager;

        $r2 = new okhttp3.internal.tls.BasicCertificateChainCleaner;

        $r3 = staticinvoke <okhttp3.internal.tls.TrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager)>($r1);

        specialinvoke $r2.<okhttp3.internal.tls.BasicCertificateChainCleaner: void <init>(okhttp3.internal.tls.TrustRootIndex)>($r3);

        return $r2;
    }
    public void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        okhttp3.internal.platform.Platform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List r3;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        return;
    }
    public void connectSocket(java.net.Socket, java.net.InetSocketAddress, int) throws java.io.IOException
    {
        okhttp3.internal.platform.Platform r0;
        java.net.Socket $r1;
        java.net.InetSocketAddress $r2;
        int $i0;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $i0 := @parameter2: int;

        virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0);

        return;
    }
    public java.lang.String getPrefix()
    {
        okhttp3.internal.platform.Platform r0;

        r0 := @this: okhttp3.internal.platform.Platform;

        return "OkHttp";
    }
    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        okhttp3.internal.platform.Platform r0;
        javax.net.ssl.SSLSocket $r1;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        return null;
    }
    public java.lang.Object getStackTraceForCloseable(java.lang.String)
    {
        okhttp3.internal.platform.Platform r0;
        java.lang.String $r1;
        java.util.logging.Level $r2;
        boolean $z0;
        java.util.logging.Logger $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: java.lang.String;

        $r3 = <okhttp3.internal.platform.Platform: java.util.logging.Logger logger>;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r3.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>(java.lang.String)>($r1);

        return $r4;

     label1:
        return null;
    }
    public boolean isCleartextTrafficPermitted(java.lang.String)
    {
        okhttp3.internal.platform.Platform r0;
        java.lang.String $r1;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: java.lang.String;

        return 1;
    }
    public void log(int, java.lang.String, java.lang.Throwable)
    {
        okhttp3.internal.platform.Platform r0;
        int $i0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        java.util.logging.Level r3;
        java.util.logging.Logger $r4;

        r0 := @this: okhttp3.internal.platform.Platform;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        if $i0 != 5 goto label2;

        r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

     label1:
        $r4 = <okhttp3.internal.platform.Platform: java.util.logging.Logger logger>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(r3, $r1, $r2);

        return;

     label2:
        r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        goto label1;
    }
    public void logCloseableLeak(java.lang.String, java.lang.Object)
    {
        okhttp3.internal.platform.Platform r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = (java.lang.Throwable) $r2;

        virtualinvoke r0.<okhttp3.internal.platform.Platform: void log(int,java.lang.String,java.lang.Throwable)>(5, $r1, $r4);

        return;
    }
    public javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)
    {
        okhttp3.internal.platform.Platform r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.ClassNotFoundException r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        javax.net.ssl.X509TrustManager $r5;

        r0 := @this: okhttp3.internal.platform.Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.security.ssl.SSLContextImpl");

        $r4 = staticinvoke <okhttp3.internal.platform.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r3, "context");

     label2:
        if $r4 != null goto label3;

        return null;

     label3:
        $r4 = staticinvoke <okhttp3.internal.platform.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r4, class "Ljavax/net/ssl/X509TrustManager;", "trustManager");

     label4:
        $r5 = (javax.net.ssl.X509TrustManager) $r4;

        return $r5;

     label5:
        r2 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }
