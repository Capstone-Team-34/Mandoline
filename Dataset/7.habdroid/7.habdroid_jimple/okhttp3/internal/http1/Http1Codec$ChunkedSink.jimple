okhttp3.internal.http1.Http1Codec$ChunkedSink extends java.lang.Object implements okio.Sink
private boolean closed
final okhttp3.internal.http1.Http1Codec this$0
private final okio.ForwardingTimeout timeout
    void <init>(okhttp3.internal.http1.Http1Codec)
    {
        okhttp3.internal.http1.Http1Codec$ChunkedSink r0;
        okhttp3.internal.http1.Http1Codec $r1;
        okio.ForwardingTimeout $r2;
        okio.Timeout $r3;
        okio.BufferedSink $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec$ChunkedSink;

        $r1 := @parameter0: okhttp3.internal.http1.Http1Codec;

        r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new okio.ForwardingTimeout;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r4 = $r1.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        $r3 = interfaceinvoke $r4.<okio.BufferedSink: okio.Timeout timeout()>();

        specialinvoke $r2.<okio.ForwardingTimeout: void <init>(okio.Timeout)>($r3);

        r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okio.ForwardingTimeout timeout> = $r2;

        return;
    }
    public void close() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec$ChunkedSink r0;
        boolean $z0;
        okhttp3.internal.http1.Http1Codec $r1;
        okio.BufferedSink $r2;
        okio.ForwardingTimeout $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec$ChunkedSink;

        entermonitor r0;

     label1:
        $z0 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: boolean closed>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: boolean closed> = 1;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r2 = $r1.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r2.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("0\r\n\r\n");

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r3 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okio.ForwardingTimeout timeout>;

        virtualinvoke $r1.<okhttp3.internal.http1.Http1Codec: void detachTimeout(okio.ForwardingTimeout)>($r3);

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r1.<okhttp3.internal.http1.Http1Codec: int state> = 3;

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void flush() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec$ChunkedSink r0;
        boolean $z0;
        okhttp3.internal.http1.Http1Codec $r1;
        okio.BufferedSink $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.http1.Http1Codec$ChunkedSink;

        entermonitor r0;

     label1:
        $z0 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: boolean closed>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r1 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r2 = $r1.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r2.<okio.BufferedSink: void flush()>();

     label5:
        goto label3;

     label6:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public okio.Timeout timeout()
    {
        okhttp3.internal.http1.Http1Codec$ChunkedSink r0;
        okio.ForwardingTimeout r1;

        r0 := @this: okhttp3.internal.http1.Http1Codec$ChunkedSink;

        r1 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okio.ForwardingTimeout timeout>;

        return r1;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec$ChunkedSink r0;
        okio.Buffer $r1;
        long $l0;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        byte $b1;
        okhttp3.internal.http1.Http1Codec $r3;
        okio.BufferedSink $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec$ChunkedSink;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $z0 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        return;

     label2:
        $r3 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r4 = $r3.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeHexadecimalUnsignedLong(long)>($l0);

        $r3 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r4 = $r3.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

        $r3 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r4 = $r3.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r4.<okio.BufferedSink: void write(okio.Buffer,long)>($r1, $l0);

        $r3 = r0.<okhttp3.internal.http1.Http1Codec$ChunkedSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r4 = $r3.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

        return;
    }
