okhttp3.CertificatePinner extends java.lang.Object
public static final okhttp3.CertificatePinner DEFAULT
private final okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner
private final java.util.Set pins
    static void <clinit>()
    {
        okhttp3.CertificatePinner $r0;
        okhttp3.CertificatePinner$Builder $r1;

        $r1 = new okhttp3.CertificatePinner$Builder;

        specialinvoke $r1.<okhttp3.CertificatePinner$Builder: void <init>()>();

        $r0 = virtualinvoke $r1.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>();

        <okhttp3.CertificatePinner: okhttp3.CertificatePinner DEFAULT> = $r0;

        return;
    }
    void <init>(java.util.Set, okhttp3.internal.tls.CertificateChainCleaner)
    {
        okhttp3.CertificatePinner r0;
        java.util.Set r1;
        okhttp3.internal.tls.CertificateChainCleaner $r2;

        r0 := @this: okhttp3.CertificatePinner;

        r1 := @parameter0: java.util.Set;

        $r2 := @parameter1: okhttp3.internal.tls.CertificateChainCleaner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.CertificatePinner: java.util.Set pins> = r1;

        r0.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner> = $r2;

        return;
    }
    public static java.lang.String pin(java.security.cert.Certificate)
    {
        java.security.cert.Certificate $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.security.cert.X509Certificate $r3;
        okio.ByteString $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.security.cert.Certificate;

        $z0 = $r0 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Certificate pinning requires X509 certificates");

        throw $r1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sha256/");

        $r3 = (java.security.cert.X509Certificate) $r0;

        $r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r3);

        $r5 = virtualinvoke $r4.<okio.ByteString: java.lang.String base64()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
    static okio.ByteString sha1(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate $r0;
        java.security.PublicKey $r1;
        byte[] $r2;
        okio.ByteString $r3;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 = virtualinvoke $r0.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $r2 = interfaceinvoke $r1.<java.security.PublicKey: byte[] getEncoded()>();

        $r3 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r2);

        $r3 = virtualinvoke $r3.<okio.ByteString: okio.ByteString sha1()>();

        return $r3;
    }
    static okio.ByteString sha256(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate $r0;
        java.security.PublicKey $r1;
        byte[] $r2;
        okio.ByteString $r3;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 = virtualinvoke $r0.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $r2 = interfaceinvoke $r1.<java.security.PublicKey: byte[] getEncoded()>();

        $r3 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r2);

        $r3 = virtualinvoke $r3.<okio.ByteString: okio.ByteString sha256()>();

        return $r3;
    }
    public void check(java.lang.String, java.util.List) throws javax.net.ssl.SSLPeerUnverifiedException
    {
        okhttp3.CertificatePinner r0;
        java.lang.String $r1, $r10;
        java.util.List r2, $r3;
        boolean $z0;
        okhttp3.internal.tls.CertificateChainCleaner $r4;
        int i0, $i1, i2, $i3;
        java.lang.Object $r5;
        java.security.cert.X509Certificate r6;
        okio.ByteString r7, r8, $r11;
        okhttp3.CertificatePinner$Pin r9;
        java.lang.AssertionError $r12;
        java.lang.StringBuilder $r13, $r14;
        java.security.Principal $r15;
        javax.net.ssl.SSLPeerUnverifiedException $r16;

        r0 := @this: okhttp3.CertificatePinner;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r3 = virtualinvoke r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r4 = r0.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        if $r4 == null goto label02;

        $r4 = r0.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        r2 = virtualinvoke $r4.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>(r2, $r1);

     label02:
        i0 = 0;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

     label03:
        if i0 >= $i1 goto label11;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (java.security.cert.X509Certificate) $r5;

        r7 = null;

        r8 = null;

        i2 = 0;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

     label04:
        if i2 >= $i3 goto label10;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        r9 = (okhttp3.CertificatePinner$Pin) $r5;

        $r10 = r9.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("sha256/");

        if $z0 == 0 goto label07;

        if r8 != null goto label05;

        r8 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>(r6);

     label05:
        $r11 = r9.<okhttp3.CertificatePinner$Pin: okio.ByteString hash>;

        $z0 = virtualinvoke $r11.<okio.ByteString: boolean equals(java.lang.Object)>(r8);

        if $z0 != 0 goto label16;

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        $r10 = r9.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("sha1/");

        if $z0 == 0 goto label09;

        if r7 != null goto label08;

        r7 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha1(java.security.cert.X509Certificate)>(r6);

     label08:
        $r11 = r9.<okhttp3.CertificatePinner$Pin: okio.ByteString hash>;

        $z0 = virtualinvoke $r11.<okio.ByteString: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label06;

        return;

     label09:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label10:
        i0 = i0 + 1;

        goto label03;

     label11:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate pinning failure!");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  Peer certificate chain:");

        i0 = 0;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

     label12:
        if i0 >= $i1 goto label13;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (java.security.cert.X509Certificate) $r5;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

        $r10 = staticinvoke <okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>(r6);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = virtualinvoke r6.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r10 = interfaceinvoke $r15.<java.security.Principal: java.lang.String getName()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        i0 = i0 + 1;

        goto label12;

     label13:
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  Pinned certificates for ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        i0 = 0;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label14:
        if i0 >= $i1 goto label15;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (okhttp3.CertificatePinner$Pin) $r5;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        i0 = i0 + 1;

        goto label14;

     label15:
        $r16 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r1);

        throw $r16;

     label16:
        return;
    }
    public transient void check(java.lang.String, java.security.cert.Certificate[]) throws javax.net.ssl.SSLPeerUnverifiedException
    {
        okhttp3.CertificatePinner r0;
        java.lang.String $r1;
        java.security.cert.Certificate[] $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.CertificatePinner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.cert.Certificate[];

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        virtualinvoke r0.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r1, $r3);

        return;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.CertificatePinner r0, $r3;
        java.lang.Object r1;
        boolean $z0;
        okhttp3.internal.tls.CertificateChainCleaner $r2, $r4;
        java.util.Set $r5, $r6;

        r0 := @this: okhttp3.CertificatePinner;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof okhttp3.CertificatePinner;

        if $z0 == 0 goto label3;

        $r2 = r0.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        $r3 = (okhttp3.CertificatePinner) r1;

        $r4 = $r3.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        $z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label3;

        $r5 = r0.<okhttp3.CertificatePinner: java.util.Set pins>;

        r0 = (okhttp3.CertificatePinner) r1;

        $r6 = r0.<okhttp3.CertificatePinner: java.util.Set pins>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $z0 = 1;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }
    java.util.List findMatchingPins(java.lang.String)
    {
        okhttp3.CertificatePinner r0;
        java.lang.String $r1;
        java.util.List $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        okhttp3.CertificatePinner$Pin r6;
        java.util.ArrayList $r7;

        r0 := @this: okhttp3.CertificatePinner;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = r0.<okhttp3.CertificatePinner: java.util.Set pins>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (okhttp3.CertificatePinner$Pin) $r5;

        $z0 = virtualinvoke r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r7 = new java.util.ArrayList;

        $r2 = $r7;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

     label2:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label3:
        return $r2;
    }
    public int hashCode()
    {
        okhttp3.CertificatePinner r0;
        okhttp3.internal.tls.CertificateChainCleaner $r1;
        int $i0, $i1;
        java.util.Set $r2;

        r0 := @this: okhttp3.CertificatePinner;

        $r1 = r0.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        if $r1 == null goto label2;

        $r1 = r0.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

     label1:
        $i0 = $i0 * 31;

        $r2 = r0.<okhttp3.CertificatePinner: java.util.Set pins>;

        $i1 = interfaceinvoke $r2.<java.util.Set: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;

     label2:
        $i0 = 0;

        goto label1;
    }
    okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)
    {
        okhttp3.internal.tls.CertificateChainCleaner $r0, $r3;
        java.util.Set $r1;
        boolean $z0;
        okhttp3.CertificatePinner r2, $r4;

        r2 := @this: okhttp3.CertificatePinner;

        $r0 := @parameter0: okhttp3.internal.tls.CertificateChainCleaner;

        $r3 = r2.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        $z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r3, $r0);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r4 = new okhttp3.CertificatePinner;

        $r1 = r2.<okhttp3.CertificatePinner: java.util.Set pins>;

        specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner)>($r1, $r0);

        return $r4;
    }
