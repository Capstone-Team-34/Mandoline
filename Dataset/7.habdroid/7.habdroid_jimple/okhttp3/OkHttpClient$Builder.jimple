okhttp3.OkHttpClient$Builder extends java.lang.Object
okhttp3.Authenticator authenticator
okhttp3.Cache cache
okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner
okhttp3.CertificatePinner certificatePinner
int connectTimeout
okhttp3.ConnectionPool connectionPool
java.util.List connectionSpecs
okhttp3.CookieJar cookieJar
okhttp3.Dispatcher dispatcher
okhttp3.Dns dns
boolean followRedirects
boolean followSslRedirects
javax.net.ssl.HostnameVerifier hostnameVerifier
final java.util.List interceptors
okhttp3.internal.cache.InternalCache internalCache
final java.util.List networkInterceptors
int pingInterval
java.util.List protocols
java.net.Proxy proxy
okhttp3.Authenticator proxyAuthenticator
java.net.ProxySelector proxySelector
int readTimeout
boolean retryOnConnectionFailure
javax.net.SocketFactory socketFactory
javax.net.ssl.SSLSocketFactory sslSocketFactory
int writeTimeout
    public void <init>()
    {
        okhttp3.OkHttpClient$Builder r0;
        java.util.ArrayList $r1;
        okhttp3.Dispatcher $r2;
        java.util.List $r3;
        java.net.ProxySelector $r4;
        okhttp3.CookieJar $r5;
        javax.net.SocketFactory $r6;
        okhttp3.internal.tls.OkHostnameVerifier $r7;
        okhttp3.CertificatePinner $r8;
        okhttp3.Authenticator $r9;
        okhttp3.ConnectionPool $r10;
        okhttp3.Dns $r11;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.OkHttpClient$Builder: java.util.List interceptors> = $r1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.OkHttpClient$Builder: java.util.List networkInterceptors> = $r1;

        $r2 = new okhttp3.Dispatcher;

        specialinvoke $r2.<okhttp3.Dispatcher: void <init>()>();

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Dispatcher dispatcher> = $r2;

        $r3 = <okhttp3.OkHttpClient: java.util.List DEFAULT_PROTOCOLS>;

        r0.<okhttp3.OkHttpClient$Builder: java.util.List protocols> = $r3;

        $r3 = <okhttp3.OkHttpClient: java.util.List DEFAULT_CONNECTION_SPECS>;

        r0.<okhttp3.OkHttpClient$Builder: java.util.List connectionSpecs> = $r3;

        $r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

        r0.<okhttp3.OkHttpClient$Builder: java.net.ProxySelector proxySelector> = $r4;

        $r5 = <okhttp3.CookieJar: okhttp3.CookieJar NO_COOKIES>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.CookieJar cookieJar> = $r5;

        $r6 = staticinvoke <javax.net.SocketFactory: javax.net.SocketFactory getDefault()>();

        r0.<okhttp3.OkHttpClient$Builder: javax.net.SocketFactory socketFactory> = $r6;

        $r7 = <okhttp3.internal.tls.OkHostnameVerifier: okhttp3.internal.tls.OkHostnameVerifier INSTANCE>;

        r0.<okhttp3.OkHttpClient$Builder: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r7;

        $r8 = <okhttp3.CertificatePinner: okhttp3.CertificatePinner DEFAULT>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner certificatePinner> = $r8;

        $r9 = <okhttp3.Authenticator: okhttp3.Authenticator NONE>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator proxyAuthenticator> = $r9;

        $r9 = <okhttp3.Authenticator: okhttp3.Authenticator NONE>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator authenticator> = $r9;

        $r10 = new okhttp3.ConnectionPool;

        specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>();

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.ConnectionPool connectionPool> = $r10;

        $r11 = <okhttp3.Dns: okhttp3.Dns SYSTEM>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Dns dns> = $r11;

        r0.<okhttp3.OkHttpClient$Builder: boolean followSslRedirects> = 1;

        r0.<okhttp3.OkHttpClient$Builder: boolean followRedirects> = 1;

        r0.<okhttp3.OkHttpClient$Builder: boolean retryOnConnectionFailure> = 1;

        r0.<okhttp3.OkHttpClient$Builder: int connectTimeout> = 10000;

        r0.<okhttp3.OkHttpClient$Builder: int readTimeout> = 10000;

        r0.<okhttp3.OkHttpClient$Builder: int writeTimeout> = 10000;

        r0.<okhttp3.OkHttpClient$Builder: int pingInterval> = 0;

        return;
    }
    void <init>(okhttp3.OkHttpClient)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.OkHttpClient $r1;
        java.util.ArrayList $r2;
        okhttp3.Dispatcher $r3;
        java.net.Proxy $r4;
        java.util.List $r5, $r6;
        java.net.ProxySelector $r7;
        okhttp3.CookieJar $r8;
        okhttp3.internal.cache.InternalCache $r9;
        okhttp3.Cache $r10;
        javax.net.SocketFactory $r11;
        javax.net.ssl.SSLSocketFactory $r12;
        okhttp3.internal.tls.CertificateChainCleaner $r13;
        javax.net.ssl.HostnameVerifier $r14;
        okhttp3.CertificatePinner $r15;
        okhttp3.Authenticator $r16;
        okhttp3.ConnectionPool $r17;
        okhttp3.Dns $r18;
        boolean $z0;
        int $i0;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.OkHttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.OkHttpClient$Builder: java.util.List interceptors> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.OkHttpClient$Builder: java.util.List networkInterceptors> = $r2;

        $r3 = $r1.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Dispatcher dispatcher> = $r3;

        $r4 = $r1.<okhttp3.OkHttpClient: java.net.Proxy proxy>;

        r0.<okhttp3.OkHttpClient$Builder: java.net.Proxy proxy> = $r4;

        $r5 = $r1.<okhttp3.OkHttpClient: java.util.List protocols>;

        r0.<okhttp3.OkHttpClient$Builder: java.util.List protocols> = $r5;

        $r5 = $r1.<okhttp3.OkHttpClient: java.util.List connectionSpecs>;

        r0.<okhttp3.OkHttpClient$Builder: java.util.List connectionSpecs> = $r5;

        $r5 = r0.<okhttp3.OkHttpClient$Builder: java.util.List interceptors>;

        $r6 = $r1.<okhttp3.OkHttpClient: java.util.List interceptors>;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        $r5 = r0.<okhttp3.OkHttpClient$Builder: java.util.List networkInterceptors>;

        $r6 = $r1.<okhttp3.OkHttpClient: java.util.List networkInterceptors>;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        $r7 = $r1.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector>;

        r0.<okhttp3.OkHttpClient$Builder: java.net.ProxySelector proxySelector> = $r7;

        $r8 = $r1.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.CookieJar cookieJar> = $r8;

        $r9 = $r1.<okhttp3.OkHttpClient: okhttp3.internal.cache.InternalCache internalCache>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.internal.cache.InternalCache internalCache> = $r9;

        $r10 = $r1.<okhttp3.OkHttpClient: okhttp3.Cache cache>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Cache cache> = $r10;

        $r11 = $r1.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory>;

        r0.<okhttp3.OkHttpClient$Builder: javax.net.SocketFactory socketFactory> = $r11;

        $r12 = $r1.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        r0.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r12;

        $r13 = $r1.<okhttp3.OkHttpClient: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner> = $r13;

        $r14 = $r1.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        r0.<okhttp3.OkHttpClient$Builder: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r14;

        $r15 = $r1.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner certificatePinner> = $r15;

        $r16 = $r1.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator proxyAuthenticator> = $r16;

        $r16 = $r1.<okhttp3.OkHttpClient: okhttp3.Authenticator authenticator>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator authenticator> = $r16;

        $r17 = $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.ConnectionPool connectionPool> = $r17;

        $r18 = $r1.<okhttp3.OkHttpClient: okhttp3.Dns dns>;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Dns dns> = $r18;

        $z0 = $r1.<okhttp3.OkHttpClient: boolean followSslRedirects>;

        r0.<okhttp3.OkHttpClient$Builder: boolean followSslRedirects> = $z0;

        $z0 = $r1.<okhttp3.OkHttpClient: boolean followRedirects>;

        r0.<okhttp3.OkHttpClient$Builder: boolean followRedirects> = $z0;

        $z0 = $r1.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure>;

        r0.<okhttp3.OkHttpClient$Builder: boolean retryOnConnectionFailure> = $z0;

        $i0 = $r1.<okhttp3.OkHttpClient: int connectTimeout>;

        r0.<okhttp3.OkHttpClient$Builder: int connectTimeout> = $i0;

        $i0 = $r1.<okhttp3.OkHttpClient: int readTimeout>;

        r0.<okhttp3.OkHttpClient$Builder: int readTimeout> = $i0;

        $i0 = $r1.<okhttp3.OkHttpClient: int writeTimeout>;

        r0.<okhttp3.OkHttpClient$Builder: int writeTimeout> = $i0;

        $i0 = $r1.<okhttp3.OkHttpClient: int pingInterval>;

        r0.<okhttp3.OkHttpClient$Builder: int pingInterval> = $i0;

        return;
    }
    private static int checkDuration(java.lang.String, long, java.util.concurrent.TimeUnit)
    {
        java.lang.String $r0;
        long $l0, $l2;
        java.util.concurrent.TimeUnit $r1;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.NullPointerException $r4;
        int $i3;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("unit == null");

        throw $r4;

     label2:
        $l2 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        $b1 = $l2 cmp 2147483647L;

        if $b1 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too large.");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label3:
        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label4;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too small.");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label4:
        $i3 = (int) $l2;

        return $i3;
    }
    public okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.Interceptor $r1;
        java.util.List $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.Interceptor;

        $r2 = r0.<okhttp3.OkHttpClient$Builder: java.util.List interceptors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.Interceptor $r1;
        java.util.List $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.Interceptor;

        $r2 = r0.<okhttp3.OkHttpClient$Builder: java.util.List networkInterceptors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.Authenticator $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.Authenticator;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("authenticator == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator authenticator> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient build()
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.OkHttpClient $r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 = new okhttp3.OkHttpClient;

        specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>(r0);

        return $r1;
    }
    public okhttp3.OkHttpClient$Builder cache(okhttp3.Cache)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.Cache $r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.Cache;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Cache cache> = $r1;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.internal.cache.InternalCache internalCache> = null;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.CertificatePinner $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.CertificatePinner;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("certificatePinner == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner certificatePinner> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder connectTimeout(long, java.util.concurrent.TimeUnit)
    {
        okhttp3.OkHttpClient$Builder r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        int $i1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $i1 = staticinvoke <okhttp3.OkHttpClient$Builder: int checkDuration(java.lang.String,long,java.util.concurrent.TimeUnit)>("timeout", $l0, $r1);

        r0.<okhttp3.OkHttpClient$Builder: int connectTimeout> = $i1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.ConnectionPool $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("connectionPool == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: okhttp3.ConnectionPool connectionPool> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List)
    {
        okhttp3.OkHttpClient$Builder r0;
        java.util.List r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        r1 := @parameter0: java.util.List;

        r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>(r1);

        r0.<okhttp3.OkHttpClient$Builder: java.util.List connectionSpecs> = r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.CookieJar $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.CookieJar;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("cookieJar == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: okhttp3.CookieJar cookieJar> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.Dispatcher $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.Dispatcher;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dispatcher == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Dispatcher dispatcher> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.Dns $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.Dns;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("dns == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Dns dns> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder followRedirects(boolean)
    {
        okhttp3.OkHttpClient$Builder r0;
        boolean $z0;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $z0 := @parameter0: boolean;

        r0.<okhttp3.OkHttpClient$Builder: boolean followRedirects> = $z0;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder followSslRedirects(boolean)
    {
        okhttp3.OkHttpClient$Builder r0;
        boolean $z0;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $z0 := @parameter0: boolean;

        r0.<okhttp3.OkHttpClient$Builder: boolean followSslRedirects> = $z0;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier)
    {
        okhttp3.OkHttpClient$Builder r0;
        javax.net.ssl.HostnameVerifier $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: javax.net.ssl.HostnameVerifier;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("hostnameVerifier == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r1;

        return r0;
    }
    public java.util.List interceptors()
    {
        okhttp3.OkHttpClient$Builder r0;
        java.util.List r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        r1 = r0.<okhttp3.OkHttpClient$Builder: java.util.List interceptors>;

        return r1;
    }
    public java.util.List networkInterceptors()
    {
        okhttp3.OkHttpClient$Builder r0;
        java.util.List r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        r1 = r0.<okhttp3.OkHttpClient$Builder: java.util.List networkInterceptors>;

        return r1;
    }
    public okhttp3.OkHttpClient$Builder pingInterval(long, java.util.concurrent.TimeUnit)
    {
        okhttp3.OkHttpClient$Builder r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        int $i1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $i1 = staticinvoke <okhttp3.OkHttpClient$Builder: int checkDuration(java.lang.String,long,java.util.concurrent.TimeUnit)>("interval", $l0, $r1);

        r0.<okhttp3.OkHttpClient$Builder: int pingInterval> = $i1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder protocols(java.util.List)
    {
        okhttp3.OkHttpClient$Builder r0;
        java.util.List r1;
        java.util.ArrayList r2;
        okhttp3.Protocol $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        r1 := @parameter0: java.util.List;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r3 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_1>;

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocols doesn\'t contain http/1.1: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $r3 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_0>;

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocols must not contain http/1.0: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z0 == 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocols must not contain null");

        throw $r4;

     label3:
        $r3 = <okhttp3.Protocol: okhttp3.Protocol SPDY_3>;

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        $r3 = <okhttp3.Protocol: okhttp3.Protocol SPDY_3>;

        interfaceinvoke r2.<java.util.List: boolean remove(java.lang.Object)>($r3);

     label4:
        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        r0.<okhttp3.OkHttpClient$Builder: java.util.List protocols> = r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder proxy(java.net.Proxy)
    {
        okhttp3.OkHttpClient$Builder r0;
        java.net.Proxy $r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: java.net.Proxy;

        r0.<okhttp3.OkHttpClient$Builder: java.net.Proxy proxy> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.Authenticator $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.Authenticator;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("proxyAuthenticator == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator proxyAuthenticator> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector)
    {
        okhttp3.OkHttpClient$Builder r0;
        java.net.ProxySelector $r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: java.net.ProxySelector;

        r0.<okhttp3.OkHttpClient$Builder: java.net.ProxySelector proxySelector> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder readTimeout(long, java.util.concurrent.TimeUnit)
    {
        okhttp3.OkHttpClient$Builder r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        int $i1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $i1 = staticinvoke <okhttp3.OkHttpClient$Builder: int checkDuration(java.lang.String,long,java.util.concurrent.TimeUnit)>("timeout", $l0, $r1);

        r0.<okhttp3.OkHttpClient$Builder: int readTimeout> = $i1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean)
    {
        okhttp3.OkHttpClient$Builder r0;
        boolean $z0;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $z0 := @parameter0: boolean;

        r0.<okhttp3.OkHttpClient$Builder: boolean retryOnConnectionFailure> = $z0;

        return r0;
    }
    void setInternalCache(okhttp3.internal.cache.InternalCache)
    {
        okhttp3.OkHttpClient$Builder r0;
        okhttp3.internal.cache.InternalCache $r1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: okhttp3.internal.cache.InternalCache;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.internal.cache.InternalCache internalCache> = $r1;

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.Cache cache> = null;

        return;
    }
    public okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory)
    {
        okhttp3.OkHttpClient$Builder r0;
        javax.net.SocketFactory $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: javax.net.SocketFactory;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("socketFactory == null");

        throw $r2;

     label1:
        r0.<okhttp3.OkHttpClient$Builder: javax.net.SocketFactory socketFactory> = $r1;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        okhttp3.OkHttpClient$Builder r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.NullPointerException $r2;
        okhttp3.internal.platform.Platform $r3;
        javax.net.ssl.X509TrustManager $r4;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Class $r7;
        java.lang.String $r8;
        okhttp3.internal.tls.CertificateChainCleaner $r9;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("sslSocketFactory == null");

        throw $r2;

     label1:
        $r3 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r4 = virtualinvoke $r3.<okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r1);

        if $r4 != null goto label2;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to extract the trust manager on ");

        $r3 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sslSocketFactory is ");

        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label2:
        r0.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r1;

        $r9 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r4);

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner> = $r9;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)
    {
        okhttp3.OkHttpClient$Builder r0;
        javax.net.ssl.SSLSocketFactory $r1;
        javax.net.ssl.X509TrustManager $r2;
        okhttp3.internal.tls.CertificateChainCleaner $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r2 := @parameter1: javax.net.ssl.X509TrustManager;

        if $r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("sslSocketFactory == null");

        throw $r4;

     label1:
        if $r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("trustManager == null");

        throw $r4;

     label2:
        r0.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r1;

        $r3 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r2);

        r0.<okhttp3.OkHttpClient$Builder: okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner> = $r3;

        return r0;
    }
    public okhttp3.OkHttpClient$Builder writeTimeout(long, java.util.concurrent.TimeUnit)
    {
        okhttp3.OkHttpClient$Builder r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        int $i1;

        r0 := @this: okhttp3.OkHttpClient$Builder;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $i1 = staticinvoke <okhttp3.OkHttpClient$Builder: int checkDuration(java.lang.String,long,java.util.concurrent.TimeUnit)>("timeout", $l0, $r1);

        r0.<okhttp3.OkHttpClient$Builder: int writeTimeout> = $i1;

        return r0;
    }
