okhttp3.Request extends java.lang.Object
final okhttp3.RequestBody body
private volatile okhttp3.CacheControl cacheControl
final okhttp3.Headers headers
final java.lang.String method
final java.lang.Object tag
final okhttp3.HttpUrl url
    void <init>(okhttp3.Request$Builder)
    {
        okhttp3.Request r0;
        okhttp3.Request$Builder $r1;
        okhttp3.Headers $r2;
        okhttp3.HttpUrl $r3;
        java.lang.String $r4;
        okhttp3.Headers$Builder $r5;
        okhttp3.RequestBody $r6;
        java.lang.Object $r7;

        r0 := @this: okhttp3.Request;

        $r1 := @parameter0: okhttp3.Request$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<okhttp3.Request$Builder: okhttp3.HttpUrl url>;

        r0.<okhttp3.Request: okhttp3.HttpUrl url> = $r3;

        $r4 = $r1.<okhttp3.Request$Builder: java.lang.String method>;

        r0.<okhttp3.Request: java.lang.String method> = $r4;

        $r5 = $r1.<okhttp3.Request$Builder: okhttp3.Headers$Builder headers>;

        $r2 = virtualinvoke $r5.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        r0.<okhttp3.Request: okhttp3.Headers headers> = $r2;

        $r6 = $r1.<okhttp3.Request$Builder: okhttp3.RequestBody body>;

        r0.<okhttp3.Request: okhttp3.RequestBody body> = $r6;

        $r7 = $r1.<okhttp3.Request$Builder: java.lang.Object tag>;

        if $r7 == null goto label2;

        $r7 = $r1.<okhttp3.Request$Builder: java.lang.Object tag>;

     label1:
        r0.<okhttp3.Request: java.lang.Object tag> = $r7;

        return;

     label2:
        $r7 = r0;

        goto label1;
    }
    public okhttp3.RequestBody body()
    {
        okhttp3.Request r0;
        okhttp3.RequestBody r1;

        r0 := @this: okhttp3.Request;

        r1 = r0.<okhttp3.Request: okhttp3.RequestBody body>;

        return r1;
    }
    public okhttp3.CacheControl cacheControl()
    {
        okhttp3.Request r0;
        okhttp3.Headers $r1;
        okhttp3.CacheControl $r2;

        r0 := @this: okhttp3.Request;

        $r2 = r0.<okhttp3.Request: okhttp3.CacheControl cacheControl>;

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r1 = r0.<okhttp3.Request: okhttp3.Headers headers>;

        $r2 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r1);

        r0.<okhttp3.Request: okhttp3.CacheControl cacheControl> = $r2;

        return $r2;
    }
    public java.lang.String header(java.lang.String)
    {
        okhttp3.Request r0;
        java.lang.String $r1;
        okhttp3.Headers $r2;

        r0 := @this: okhttp3.Request;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<okhttp3.Request: okhttp3.Headers headers>;

        $r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1);

        return $r1;
    }
    public java.util.List headers(java.lang.String)
    {
        okhttp3.Request r0;
        java.lang.String $r1;
        java.util.List $r2;
        okhttp3.Headers $r3;

        r0 := @this: okhttp3.Request;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<okhttp3.Request: okhttp3.Headers headers>;

        $r2 = virtualinvoke $r3.<okhttp3.Headers: java.util.List values(java.lang.String)>($r1);

        return $r2;
    }
    public okhttp3.Headers headers()
    {
        okhttp3.Request r0;
        okhttp3.Headers r1;

        r0 := @this: okhttp3.Request;

        r1 = r0.<okhttp3.Request: okhttp3.Headers headers>;

        return r1;
    }
    public boolean isHttps()
    {
        okhttp3.Request r0;
        boolean $z0;
        okhttp3.HttpUrl $r1;

        r0 := @this: okhttp3.Request;

        $r1 = r0.<okhttp3.Request: okhttp3.HttpUrl url>;

        $z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>();

        return $z0;
    }
    public java.lang.String method()
    {
        okhttp3.Request r0;
        java.lang.String r1;

        r0 := @this: okhttp3.Request;

        r1 = r0.<okhttp3.Request: java.lang.String method>;

        return r1;
    }
    public okhttp3.Request$Builder newBuilder()
    {
        okhttp3.Request r0;
        okhttp3.Request$Builder $r1;

        r0 := @this: okhttp3.Request;

        $r1 = new okhttp3.Request$Builder;

        specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>(r0);

        return $r1;
    }
    public java.lang.Object tag()
    {
        okhttp3.Request r0;
        java.lang.Object r1;

        r0 := @this: okhttp3.Request;

        r1 = r0.<okhttp3.Request: java.lang.Object tag>;

        return r1;
    }
    public java.lang.String toString()
    {
        okhttp3.Request r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        okhttp3.HttpUrl $r3;
        java.lang.Object $r4;

        r0 := @this: okhttp3.Request;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request{method=");

        $r2 = r0.<okhttp3.Request: java.lang.String method>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", url=");

        $r3 = r0.<okhttp3.Request: okhttp3.HttpUrl url>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", tag=");

        $r4 = r0.<okhttp3.Request: java.lang.Object tag>;

        if $r4 == r0 goto label2;

        $r4 = r0.<okhttp3.Request: java.lang.Object tag>;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label2:
        $r4 = null;

        goto label1;
    }
    public okhttp3.HttpUrl url()
    {
        okhttp3.Request r0;
        okhttp3.HttpUrl r1;

        r0 := @this: okhttp3.Request;

        r1 = r0.<okhttp3.Request: okhttp3.HttpUrl url>;

        return r1;
    }
