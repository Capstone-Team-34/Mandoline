okhttp3.Response extends java.lang.Object implements java.io.Closeable
final okhttp3.ResponseBody body
private volatile okhttp3.CacheControl cacheControl
final okhttp3.Response cacheResponse
final int code
final okhttp3.Handshake handshake
final okhttp3.Headers headers
final java.lang.String message
final okhttp3.Response networkResponse
final okhttp3.Response priorResponse
final okhttp3.Protocol protocol
final long receivedResponseAtMillis
final okhttp3.Request request
final long sentRequestAtMillis
    void <init>(okhttp3.Response$Builder)
    {
        okhttp3.Response r0, $r9;
        okhttp3.Response$Builder $r1;
        okhttp3.Headers $r2;
        okhttp3.Request $r3;
        okhttp3.Protocol $r4;
        int $i0;
        java.lang.String $r5;
        okhttp3.Handshake $r6;
        okhttp3.Headers$Builder $r7;
        okhttp3.ResponseBody $r8;
        long $l1;

        r0 := @this: okhttp3.Response;

        $r1 := @parameter0: okhttp3.Response$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<okhttp3.Response$Builder: okhttp3.Request request>;

        r0.<okhttp3.Response: okhttp3.Request request> = $r3;

        $r4 = $r1.<okhttp3.Response$Builder: okhttp3.Protocol protocol>;

        r0.<okhttp3.Response: okhttp3.Protocol protocol> = $r4;

        $i0 = $r1.<okhttp3.Response$Builder: int code>;

        r0.<okhttp3.Response: int code> = $i0;

        $r5 = $r1.<okhttp3.Response$Builder: java.lang.String message>;

        r0.<okhttp3.Response: java.lang.String message> = $r5;

        $r6 = $r1.<okhttp3.Response$Builder: okhttp3.Handshake handshake>;

        r0.<okhttp3.Response: okhttp3.Handshake handshake> = $r6;

        $r7 = $r1.<okhttp3.Response$Builder: okhttp3.Headers$Builder headers>;

        $r2 = virtualinvoke $r7.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        r0.<okhttp3.Response: okhttp3.Headers headers> = $r2;

        $r8 = $r1.<okhttp3.Response$Builder: okhttp3.ResponseBody body>;

        r0.<okhttp3.Response: okhttp3.ResponseBody body> = $r8;

        $r9 = $r1.<okhttp3.Response$Builder: okhttp3.Response networkResponse>;

        r0.<okhttp3.Response: okhttp3.Response networkResponse> = $r9;

        $r9 = $r1.<okhttp3.Response$Builder: okhttp3.Response cacheResponse>;

        r0.<okhttp3.Response: okhttp3.Response cacheResponse> = $r9;

        $r9 = $r1.<okhttp3.Response$Builder: okhttp3.Response priorResponse>;

        r0.<okhttp3.Response: okhttp3.Response priorResponse> = $r9;

        $l1 = $r1.<okhttp3.Response$Builder: long sentRequestAtMillis>;

        r0.<okhttp3.Response: long sentRequestAtMillis> = $l1;

        $l1 = $r1.<okhttp3.Response$Builder: long receivedResponseAtMillis>;

        r0.<okhttp3.Response: long receivedResponseAtMillis> = $l1;

        return;
    }
    public okhttp3.ResponseBody body()
    {
        okhttp3.Response r0;
        okhttp3.ResponseBody r1;

        r0 := @this: okhttp3.Response;

        r1 = r0.<okhttp3.Response: okhttp3.ResponseBody body>;

        return r1;
    }
    public okhttp3.CacheControl cacheControl()
    {
        okhttp3.Response r0;
        okhttp3.Headers $r1;
        okhttp3.CacheControl $r2;

        r0 := @this: okhttp3.Response;

        $r2 = r0.<okhttp3.Response: okhttp3.CacheControl cacheControl>;

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r1 = r0.<okhttp3.Response: okhttp3.Headers headers>;

        $r2 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r1);

        r0.<okhttp3.Response: okhttp3.CacheControl cacheControl> = $r2;

        return $r2;
    }
    public okhttp3.Response cacheResponse()
    {
        okhttp3.Response r0;

        r0 := @this: okhttp3.Response;

        r0 = r0.<okhttp3.Response: okhttp3.Response cacheResponse>;

        return r0;
    }
    public java.util.List challenges()
    {
        okhttp3.Response r0;
        int $i0;
        java.lang.String r1;
        okhttp3.Headers $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.Response;

        $i0 = r0.<okhttp3.Response: int code>;

        if $i0 != 401 goto label2;

        r1 = "WWW-Authenticate";

     label1:
        $r2 = virtualinvoke r0.<okhttp3.Response: okhttp3.Headers headers()>();

        $r3 = staticinvoke <okhttp3.internal.http.HttpHeaders: java.util.List parseChallenges(okhttp3.Headers,java.lang.String)>($r2, r1);

        return $r3;

     label2:
        $i0 = r0.<okhttp3.Response: int code>;

        if $i0 != 407 goto label3;

        r1 = "Proxy-Authenticate";

        goto label1;

     label3:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;
    }
    public void close()
    {
        okhttp3.Response r0;
        okhttp3.ResponseBody $r1;

        r0 := @this: okhttp3.Response;

        $r1 = r0.<okhttp3.Response: okhttp3.ResponseBody body>;

        virtualinvoke $r1.<okhttp3.ResponseBody: void close()>();

        return;
    }
    public int code()
    {
        okhttp3.Response r0;
        int i0;

        r0 := @this: okhttp3.Response;

        i0 = r0.<okhttp3.Response: int code>;

        return i0;
    }
    public okhttp3.Handshake handshake()
    {
        okhttp3.Response r0;
        okhttp3.Handshake r1;

        r0 := @this: okhttp3.Response;

        r1 = r0.<okhttp3.Response: okhttp3.Handshake handshake>;

        return r1;
    }
    public java.lang.String header(java.lang.String)
    {
        okhttp3.Response r0;
        java.lang.String $r1;

        r0 := @this: okhttp3.Response;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null);

        return $r1;
    }
    public java.lang.String header(java.lang.String, java.lang.String)
    {
        okhttp3.Response r0;
        java.lang.String $r1, $r2;
        okhttp3.Headers $r3;

        r0 := @this: okhttp3.Response;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.Response: okhttp3.Headers headers>;

        $r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1);

        if $r1 == null goto label1;

        return $r1;

     label1:
        return $r2;
    }
    public java.util.List headers(java.lang.String)
    {
        okhttp3.Response r0;
        java.lang.String $r1;
        java.util.List $r2;
        okhttp3.Headers $r3;

        r0 := @this: okhttp3.Response;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<okhttp3.Response: okhttp3.Headers headers>;

        $r2 = virtualinvoke $r3.<okhttp3.Headers: java.util.List values(java.lang.String)>($r1);

        return $r2;
    }
    public okhttp3.Headers headers()
    {
        okhttp3.Response r0;
        okhttp3.Headers r1;

        r0 := @this: okhttp3.Response;

        r1 = r0.<okhttp3.Response: okhttp3.Headers headers>;

        return r1;
    }
    public boolean isRedirect()
    {
        okhttp3.Response r0;
        int $i0;

        r0 := @this: okhttp3.Response;

        $i0 = r0.<okhttp3.Response: int code>;

        lookupswitch($i0)
        {
            case 300: goto label2;
            case 301: goto label2;
            case 302: goto label2;
            case 303: goto label2;
            case 304: goto label1;
            case 305: goto label1;
            case 306: goto label1;
            case 307: goto label2;
            case 308: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    public boolean isSuccessful()
    {
        okhttp3.Response r0;
        int $i0;

        r0 := @this: okhttp3.Response;

        $i0 = r0.<okhttp3.Response: int code>;

        if $i0 < 200 goto label1;

        $i0 = r0.<okhttp3.Response: int code>;

        if $i0 >= 300 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String message()
    {
        okhttp3.Response r0;
        java.lang.String r1;

        r0 := @this: okhttp3.Response;

        r1 = r0.<okhttp3.Response: java.lang.String message>;

        return r1;
    }
    public okhttp3.Response networkResponse()
    {
        okhttp3.Response r0;

        r0 := @this: okhttp3.Response;

        r0 = r0.<okhttp3.Response: okhttp3.Response networkResponse>;

        return r0;
    }
    public okhttp3.Response$Builder newBuilder()
    {
        okhttp3.Response r0;
        okhttp3.Response$Builder $r1;

        r0 := @this: okhttp3.Response;

        $r1 = new okhttp3.Response$Builder;

        specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>(r0);

        return $r1;
    }
    public okhttp3.ResponseBody peekBody(long) throws java.io.IOException
    {
        okhttp3.Response r0;
        long $l0, $l1;
        okhttp3.ResponseBody $r1;
        okio.BufferedSource $r2;
        okio.Buffer $r3, r4;
        byte $b2;
        okhttp3.MediaType $r5;

        r0 := @this: okhttp3.Response;

        $l0 := @parameter0: long;

        $r1 = r0.<okhttp3.Response: okhttp3.ResponseBody body>;

        $r2 = virtualinvoke $r1.<okhttp3.ResponseBody: okio.BufferedSource source()>();

        interfaceinvoke $r2.<okio.BufferedSource: boolean request(long)>($l0);

        $r3 = interfaceinvoke $r2.<okio.BufferedSource: okio.Buffer buffer()>();

        $r3 = virtualinvoke $r3.<okio.Buffer: okio.Buffer clone()>();

        $l1 = virtualinvoke $r3.<okio.Buffer: long size()>();

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label2;

        r4 = new okio.Buffer;

        specialinvoke r4.<okio.Buffer: void <init>()>();

        virtualinvoke r4.<okio.Buffer: void write(okio.Buffer,long)>($r3, $l0);

        virtualinvoke $r3.<okio.Buffer: void clear()>();

     label1:
        $r1 = r0.<okhttp3.Response: okhttp3.ResponseBody body>;

        $r5 = virtualinvoke $r1.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>();

        $l0 = virtualinvoke r4.<okio.Buffer: long size()>();

        $r1 = staticinvoke <okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource)>($r5, $l0, r4);

        return $r1;

     label2:
        r4 = $r3;

        goto label1;
    }
    public okhttp3.Response priorResponse()
    {
        okhttp3.Response r0;

        r0 := @this: okhttp3.Response;

        r0 = r0.<okhttp3.Response: okhttp3.Response priorResponse>;

        return r0;
    }
    public okhttp3.Protocol protocol()
    {
        okhttp3.Response r0;
        okhttp3.Protocol r1;

        r0 := @this: okhttp3.Response;

        r1 = r0.<okhttp3.Response: okhttp3.Protocol protocol>;

        return r1;
    }
    public long receivedResponseAtMillis()
    {
        okhttp3.Response r0;
        long l0;

        r0 := @this: okhttp3.Response;

        l0 = r0.<okhttp3.Response: long receivedResponseAtMillis>;

        return l0;
    }
    public okhttp3.Request request()
    {
        okhttp3.Response r0;
        okhttp3.Request r1;

        r0 := @this: okhttp3.Response;

        r1 = r0.<okhttp3.Response: okhttp3.Request request>;

        return r1;
    }
    public long sentRequestAtMillis()
    {
        okhttp3.Response r0;
        long l0;

        r0 := @this: okhttp3.Response;

        l0 = r0.<okhttp3.Response: long sentRequestAtMillis>;

        return l0;
    }
    public java.lang.String toString()
    {
        okhttp3.Response r0;
        java.lang.StringBuilder $r1;
        okhttp3.Protocol $r2;
        int $i0;
        java.lang.String $r3;
        okhttp3.Request $r4;
        okhttp3.HttpUrl $r5;

        r0 := @this: okhttp3.Response;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Response{protocol=");

        $r2 = r0.<okhttp3.Response: okhttp3.Protocol protocol>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", code=");

        $i0 = r0.<okhttp3.Response: int code>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", message=");

        $r3 = r0.<okhttp3.Response: java.lang.String message>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", url=");

        $r4 = r0.<okhttp3.Response: okhttp3.Request request>;

        $r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
