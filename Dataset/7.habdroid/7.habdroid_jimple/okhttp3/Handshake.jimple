okhttp3.Handshake extends java.lang.Object
private final okhttp3.CipherSuite cipherSuite
private final java.util.List localCertificates
private final java.util.List peerCertificates
private final okhttp3.TlsVersion tlsVersion
    private void <init>(okhttp3.TlsVersion, okhttp3.CipherSuite, java.util.List, java.util.List)
    {
        okhttp3.Handshake r0;
        okhttp3.TlsVersion $r1;
        okhttp3.CipherSuite $r2;
        java.util.List r3, r4;

        r0 := @this: okhttp3.Handshake;

        $r1 := @parameter0: okhttp3.TlsVersion;

        $r2 := @parameter1: okhttp3.CipherSuite;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.Handshake: okhttp3.TlsVersion tlsVersion> = $r1;

        r0.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite> = $r2;

        r0.<okhttp3.Handshake: java.util.List peerCertificates> = r3;

        r0.<okhttp3.Handshake: java.util.List localCertificates> = r4;

        return;
    }
    public static okhttp3.Handshake get(javax.net.ssl.SSLSession)
    {
        javax.net.ssl.SSLSession $r0;
        javax.net.ssl.SSLPeerUnverifiedException r1;
        java.lang.String $r2;
        java.lang.IllegalStateException $r3;
        okhttp3.CipherSuite $r4;
        okhttp3.TlsVersion $r5;
        java.security.cert.Certificate[] $r6;
        java.util.List $r7, $r8;
        okhttp3.Handshake $r9;

        $r0 := @parameter0: javax.net.ssl.SSLSession;

        $r2 = interfaceinvoke $r0.<javax.net.ssl.SSLSession: java.lang.String getCipherSuite()>();

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipherSuite == null");

        throw $r3;

     label1:
        $r4 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r2);

        $r2 = interfaceinvoke $r0.<javax.net.ssl.SSLSession: java.lang.String getProtocol()>();

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("tlsVersion == null");

        throw $r3;

     label2:
        $r5 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r2);

     label3:
        $r6 = interfaceinvoke $r0.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

     label4:
        if $r6 == null goto label8;

        $r7 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r6);

     label5:
        $r6 = interfaceinvoke $r0.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getLocalCertificates()>();

        if $r6 == null goto label9;

        $r8 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r6);

     label6:
        $r9 = new okhttp3.Handshake;

        specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r5, $r4, $r7, $r8);

        return $r9;

     label7:
        r1 := @caughtexception;

        $r6 = null;

        goto label4;

     label8:
        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label5;

     label9:
        $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label6;

        catch javax.net.ssl.SSLPeerUnverifiedException from label3 to label4 with label7;
    }
    public static okhttp3.Handshake get(okhttp3.TlsVersion, okhttp3.CipherSuite, java.util.List, java.util.List)
    {
        okhttp3.TlsVersion $r0;
        okhttp3.CipherSuite $r1;
        java.util.List r2, r3;
        java.lang.NullPointerException $r4;
        okhttp3.Handshake $r5;

        $r0 := @parameter0: okhttp3.TlsVersion;

        $r1 := @parameter1: okhttp3.CipherSuite;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        if $r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("cipherSuite == null");

        throw $r4;

     label1:
        $r5 = new okhttp3.Handshake;

        r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>(r2);

        r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>(r3);

        specialinvoke $r5.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r0, $r1, r2, r3);

        return $r5;
    }
    public okhttp3.CipherSuite cipherSuite()
    {
        okhttp3.Handshake r0;
        okhttp3.CipherSuite r1;

        r0 := @this: okhttp3.Handshake;

        r1 = r0.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite>;

        return r1;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.Handshake r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        okhttp3.CipherSuite $r3, $r4;
        java.util.List $r5, $r6;

        r0 := @this: okhttp3.Handshake;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof okhttp3.Handshake;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (okhttp3.Handshake) $r1;

        $r3 = r0.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite>;

        $r4 = r2.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite>;

        $z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label2;

        $r3 = r0.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite>;

        $r4 = r2.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<okhttp3.Handshake: java.util.List peerCertificates>;

        $r6 = r2.<okhttp3.Handshake: java.util.List peerCertificates>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r5 = r0.<okhttp3.Handshake: java.util.List localCertificates>;

        $r6 = r2.<okhttp3.Handshake: java.util.List localCertificates>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public int hashCode()
    {
        okhttp3.Handshake r0;
        okhttp3.TlsVersion $r1;
        int $i0, $i1;
        okhttp3.CipherSuite $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.Handshake;

        $r1 = r0.<okhttp3.Handshake: okhttp3.TlsVersion tlsVersion>;

        if $r1 == null goto label2;

        $r1 = r0.<okhttp3.Handshake: okhttp3.TlsVersion tlsVersion>;

        $i0 = virtualinvoke $r1.<okhttp3.TlsVersion: int hashCode()>();

     label1:
        $i0 = $i0 + 527;

        $i0 = $i0 * 31;

        $r2 = r0.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r3 = r0.<okhttp3.Handshake: java.util.List peerCertificates>;

        $i1 = interfaceinvoke $r3.<java.util.List: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r3 = r0.<okhttp3.Handshake: java.util.List localCertificates>;

        $i1 = interfaceinvoke $r3.<java.util.List: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;

     label2:
        $i0 = 0;

        goto label1;
    }
    public java.util.List localCertificates()
    {
        okhttp3.Handshake r0;
        java.util.List r1;

        r0 := @this: okhttp3.Handshake;

        r1 = r0.<okhttp3.Handshake: java.util.List localCertificates>;

        return r1;
    }
    public java.security.Principal localPrincipal()
    {
        okhttp3.Handshake r0;
        java.util.List $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.security.cert.X509Certificate $r3;
        javax.security.auth.x500.X500Principal $r4;

        r0 := @this: okhttp3.Handshake;

        $r1 = r0.<okhttp3.Handshake: java.util.List localCertificates>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<okhttp3.Handshake: java.util.List localCertificates>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.security.cert.X509Certificate) $r2;

        $r4 = virtualinvoke $r3.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r4;

     label1:
        return null;
    }
    public java.util.List peerCertificates()
    {
        okhttp3.Handshake r0;
        java.util.List r1;

        r0 := @this: okhttp3.Handshake;

        r1 = r0.<okhttp3.Handshake: java.util.List peerCertificates>;

        return r1;
    }
    public java.security.Principal peerPrincipal()
    {
        okhttp3.Handshake r0;
        java.util.List $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.security.cert.X509Certificate $r3;
        javax.security.auth.x500.X500Principal $r4;

        r0 := @this: okhttp3.Handshake;

        $r1 = r0.<okhttp3.Handshake: java.util.List peerCertificates>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<okhttp3.Handshake: java.util.List peerCertificates>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.security.cert.X509Certificate) $r2;

        $r4 = virtualinvoke $r3.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r4;

     label1:
        return null;
    }
    public okhttp3.TlsVersion tlsVersion()
    {
        okhttp3.Handshake r0;
        okhttp3.TlsVersion r1;

        r0 := @this: okhttp3.Handshake;

        r1 = r0.<okhttp3.Handshake: okhttp3.TlsVersion tlsVersion>;

        return r1;
    }
