okhttp3.OkHttpClient$1 extends okhttp3.internal.Internal
    void <init>()
    {
        okhttp3.OkHttpClient$1 r0;

        r0 := @this: okhttp3.OkHttpClient$1;

        specialinvoke r0.<okhttp3.internal.Internal: void <init>()>();

        return;
    }
    public void addLenient(okhttp3.Headers$Builder, java.lang.String)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.Headers$Builder $r1;
        java.lang.String $r2;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.Headers$Builder;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2);

        return;
    }
    public void addLenient(okhttp3.Headers$Builder, java.lang.String, java.lang.String)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.Headers$Builder $r1;
        java.lang.String $r2, $r3;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.Headers$Builder;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r3);

        return;
    }
    public void apply(okhttp3.ConnectionSpec, javax.net.ssl.SSLSocket, boolean)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.ConnectionSpec $r1;
        javax.net.ssl.SSLSocket $r2;
        boolean $z0;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.ConnectionSpec;

        $r2 := @parameter1: javax.net.ssl.SSLSocket;

        $z0 := @parameter2: boolean;

        virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0);

        return;
    }
    public int code(okhttp3.Response$Builder)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.Response$Builder $r1;
        int i0;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.Response$Builder;

        i0 = $r1.<okhttp3.Response$Builder: int code>;

        return i0;
    }
    public boolean connectionBecameIdle(okhttp3.ConnectionPool, okhttp3.internal.connection.RealConnection)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.internal.connection.RealConnection $r2;
        boolean $z0;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        $r2 := @parameter1: okhttp3.internal.connection.RealConnection;

        $z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)>($r2);

        return $z0;
    }
    public java.net.Socket deduplicate(okhttp3.ConnectionPool, okhttp3.Address, okhttp3.internal.connection.StreamAllocation)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.Address $r2;
        okhttp3.internal.connection.StreamAllocation $r3;
        java.net.Socket $r4;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        $r2 := @parameter1: okhttp3.Address;

        $r3 := @parameter2: okhttp3.internal.connection.StreamAllocation;

        $r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: java.net.Socket deduplicate(okhttp3.Address,okhttp3.internal.connection.StreamAllocation)>($r2, $r3);

        return $r4;
    }
    public okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool, okhttp3.Address, okhttp3.internal.connection.StreamAllocation)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.Address $r2;
        okhttp3.internal.connection.StreamAllocation $r3;
        okhttp3.internal.connection.RealConnection $r4;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        $r2 := @parameter1: okhttp3.Address;

        $r3 := @parameter2: okhttp3.internal.connection.StreamAllocation;

        $r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.connection.RealConnection get(okhttp3.Address,okhttp3.internal.connection.StreamAllocation)>($r2, $r3);

        return $r4;
    }
    public okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) throws java.net.MalformedURLException, java.net.UnknownHostException
    {
        okhttp3.OkHttpClient$1 r0;
        java.lang.String $r1;
        okhttp3.HttpUrl $r2;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl getChecked(java.lang.String)>($r1);

        return $r2;
    }
    public okhttp3.Call newWebSocketCall(okhttp3.OkHttpClient, okhttp3.Request)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.OkHttpClient $r1;
        okhttp3.Request $r2;
        okhttp3.RealCall $r3;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.OkHttpClient;

        $r2 := @parameter1: okhttp3.Request;

        $r3 = new okhttp3.RealCall;

        specialinvoke $r3.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)>($r1, $r2, 1);

        return $r3;
    }
    public void put(okhttp3.ConnectionPool, okhttp3.internal.connection.RealConnection)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.internal.connection.RealConnection $r2;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        $r2 := @parameter1: okhttp3.internal.connection.RealConnection;

        virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.connection.RealConnection)>($r2);

        return;
    }
    public okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.internal.connection.RouteDatabase r2;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        r2 = $r1.<okhttp3.ConnectionPool: okhttp3.internal.connection.RouteDatabase routeDatabase>;

        return r2;
    }
    public void setCache(okhttp3.OkHttpClient$Builder, okhttp3.internal.cache.InternalCache)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.OkHttpClient$Builder $r1;
        okhttp3.internal.cache.InternalCache $r2;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r1 := @parameter0: okhttp3.OkHttpClient$Builder;

        $r2 := @parameter1: okhttp3.internal.cache.InternalCache;

        virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: void setInternalCache(okhttp3.internal.cache.InternalCache)>($r2);

        return;
    }
    public okhttp3.internal.connection.StreamAllocation streamAllocation(okhttp3.Call)
    {
        okhttp3.OkHttpClient$1 r0;
        okhttp3.internal.connection.StreamAllocation $r1;
        okhttp3.Call $r2;
        okhttp3.RealCall $r3;

        r0 := @this: okhttp3.OkHttpClient$1;

        $r2 := @parameter0: okhttp3.Call;

        $r3 = (okhttp3.RealCall) $r2;

        $r1 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.internal.connection.StreamAllocation streamAllocation()>();

        return $r1;
    }
