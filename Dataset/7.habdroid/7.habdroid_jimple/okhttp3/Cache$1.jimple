okhttp3.Cache$1 extends java.lang.Object implements okhttp3.internal.cache.InternalCache
final okhttp3.Cache this$0
    void <init>(okhttp3.Cache)
    {
        okhttp3.Cache$1 r0;
        okhttp3.Cache $r1;

        r0 := @this: okhttp3.Cache$1;

        $r1 := @parameter0: okhttp3.Cache;

        r0.<okhttp3.Cache$1: okhttp3.Cache this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public okhttp3.Response get(okhttp3.Request) throws java.io.IOException
    {
        okhttp3.Cache$1 r0;
        okhttp3.Request $r1;
        okhttp3.Response $r2;
        okhttp3.Cache $r3;

        r0 := @this: okhttp3.Cache$1;

        $r1 := @parameter0: okhttp3.Request;

        $r3 = r0.<okhttp3.Cache$1: okhttp3.Cache this$0>;

        $r2 = virtualinvoke $r3.<okhttp3.Cache: okhttp3.Response get(okhttp3.Request)>($r1);

        return $r2;
    }
    public okhttp3.internal.cache.CacheRequest put(okhttp3.Response) throws java.io.IOException
    {
        okhttp3.Cache$1 r0;
        okhttp3.Response $r1;
        okhttp3.internal.cache.CacheRequest $r2;
        okhttp3.Cache $r3;

        r0 := @this: okhttp3.Cache$1;

        $r1 := @parameter0: okhttp3.Response;

        $r3 = r0.<okhttp3.Cache$1: okhttp3.Cache this$0>;

        $r2 = virtualinvoke $r3.<okhttp3.Cache: okhttp3.internal.cache.CacheRequest put(okhttp3.Response)>($r1);

        return $r2;
    }
    public void remove(okhttp3.Request) throws java.io.IOException
    {
        okhttp3.Cache$1 r0;
        okhttp3.Request $r1;
        okhttp3.Cache $r2;

        r0 := @this: okhttp3.Cache$1;

        $r1 := @parameter0: okhttp3.Request;

        $r2 = r0.<okhttp3.Cache$1: okhttp3.Cache this$0>;

        virtualinvoke $r2.<okhttp3.Cache: void remove(okhttp3.Request)>($r1);

        return;
    }
    public void trackConditionalCacheHit()
    {
        okhttp3.Cache$1 r0;
        okhttp3.Cache $r1;

        r0 := @this: okhttp3.Cache$1;

        $r1 = r0.<okhttp3.Cache$1: okhttp3.Cache this$0>;

        virtualinvoke $r1.<okhttp3.Cache: void trackConditionalCacheHit()>();

        return;
    }
    public void trackResponse(okhttp3.internal.cache.CacheStrategy)
    {
        okhttp3.Cache$1 r0;
        okhttp3.internal.cache.CacheStrategy $r1;
        okhttp3.Cache $r2;

        r0 := @this: okhttp3.Cache$1;

        $r1 := @parameter0: okhttp3.internal.cache.CacheStrategy;

        $r2 = r0.<okhttp3.Cache$1: okhttp3.Cache this$0>;

        virtualinvoke $r2.<okhttp3.Cache: void trackResponse(okhttp3.internal.cache.CacheStrategy)>($r1);

        return;
    }
    public void update(okhttp3.Response, okhttp3.Response)
    {
        okhttp3.Cache$1 r0;
        okhttp3.Response $r1, $r2;
        okhttp3.Cache $r3;

        r0 := @this: okhttp3.Cache$1;

        $r1 := @parameter0: okhttp3.Response;

        $r2 := @parameter1: okhttp3.Response;

        $r3 = r0.<okhttp3.Cache$1: okhttp3.Cache this$0>;

        virtualinvoke $r3.<okhttp3.Cache: void update(okhttp3.Response,okhttp3.Response)>($r1, $r2);

        return;
    }
