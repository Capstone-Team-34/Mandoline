okhttp3.Cache$Entry extends java.lang.Object
private static final java.lang.String RECEIVED_MILLIS
private static final java.lang.String SENT_MILLIS
private final int code
private final okhttp3.Handshake handshake
private final java.lang.String message
private final okhttp3.Protocol protocol
private final long receivedResponseMillis
private final java.lang.String requestMethod
private final okhttp3.Headers responseHeaders
private final long sentRequestMillis
private final java.lang.String url
private final okhttp3.Headers varyHeaders
    static void <clinit>()
    {
        java.lang.StringBuilder $r0;
        okhttp3.internal.platform.Platform $r1;
        java.lang.String $r2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r2 = virtualinvoke $r1.<okhttp3.internal.platform.Platform: java.lang.String getPrefix()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Sent-Millis");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <okhttp3.Cache$Entry: java.lang.String SENT_MILLIS> = $r2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r2 = virtualinvoke $r1.<okhttp3.internal.platform.Platform: java.lang.String getPrefix()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Received-Millis");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <okhttp3.Cache$Entry: java.lang.String RECEIVED_MILLIS> = $r2;

        return;
    }
    public void <init>(okhttp3.Response)
    {
        okhttp3.Cache$Entry r0;
        okhttp3.Response $r1;
        okhttp3.Request $r2;
        okhttp3.HttpUrl $r3;
        java.lang.String $r4;
        okhttp3.Headers $r5;
        okhttp3.Protocol $r6;
        int $i0;
        okhttp3.Handshake $r7;
        long $l1;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 := @parameter0: okhttp3.Response;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r4 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>();

        r0.<okhttp3.Cache$Entry: java.lang.String url> = $r4;

        $r5 = staticinvoke <okhttp3.internal.http.HttpHeaders: okhttp3.Headers varyHeaders(okhttp3.Response)>($r1);

        r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders> = $r5;

        $r2 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r4 = virtualinvoke $r2.<okhttp3.Request: java.lang.String method()>();

        r0.<okhttp3.Cache$Entry: java.lang.String requestMethod> = $r4;

        $r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Protocol protocol()>();

        r0.<okhttp3.Cache$Entry: okhttp3.Protocol protocol> = $r6;

        $i0 = virtualinvoke $r1.<okhttp3.Response: int code()>();

        r0.<okhttp3.Cache$Entry: int code> = $i0;

        $r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String message()>();

        r0.<okhttp3.Cache$Entry: java.lang.String message> = $r4;

        $r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>();

        r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders> = $r5;

        $r7 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Handshake handshake()>();

        r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake> = $r7;

        $l1 = virtualinvoke $r1.<okhttp3.Response: long sentRequestAtMillis()>();

        r0.<okhttp3.Cache$Entry: long sentRequestMillis> = $l1;

        $l1 = virtualinvoke $r1.<okhttp3.Response: long receivedResponseAtMillis()>();

        r0.<okhttp3.Cache$Entry: long receivedResponseMillis> = $l1;

        return;
    }
    public void <init>(okio.Source) throws java.io.IOException
    {
        okhttp3.Cache$Entry r0;
        okio.Source $r1;
        okhttp3.Headers$Builder r2;
        okio.BufferedSource $r3;
        java.lang.String $r4, $r8, $r9;
        int $i0, i1;
        okhttp3.Headers $r5;
        okhttp3.internal.http.StatusLine $r6;
        okhttp3.Protocol $r7;
        long $l2;
        boolean $z0;
        java.io.IOException $r10;
        java.lang.StringBuilder $r11;
        java.lang.Throwable $r12;
        okhttp3.CipherSuite $r13;
        java.util.List $r14, $r15;
        okhttp3.TlsVersion $r16;
        okhttp3.Handshake $r17;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 := @parameter0: okio.Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label01:
        $r3 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r1);

        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        r0.<okhttp3.Cache$Entry: java.lang.String url> = $r4;

        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        r0.<okhttp3.Cache$Entry: java.lang.String requestMethod> = $r4;

        r2 = new okhttp3.Headers$Builder;

        specialinvoke r2.<okhttp3.Headers$Builder: void <init>()>();

        $i0 = staticinvoke <okhttp3.Cache: int readInt(okio.BufferedSource)>($r3);

     label02:
        i1 = 0;

     label03:
        if i1 >= $i0 goto label06;

     label04:
        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r4);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        $r5 = virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders> = $r5;

        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        $r6 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r4);

        $r7 = $r6.<okhttp3.internal.http.StatusLine: okhttp3.Protocol protocol>;

        r0.<okhttp3.Cache$Entry: okhttp3.Protocol protocol> = $r7;

        $i0 = $r6.<okhttp3.internal.http.StatusLine: int code>;

        r0.<okhttp3.Cache$Entry: int code> = $i0;

        $r4 = $r6.<okhttp3.internal.http.StatusLine: java.lang.String message>;

        r0.<okhttp3.Cache$Entry: java.lang.String message> = $r4;

        r2 = new okhttp3.Headers$Builder;

        specialinvoke r2.<okhttp3.Headers$Builder: void <init>()>();

        $i0 = staticinvoke <okhttp3.Cache: int readInt(okio.BufferedSource)>($r3);

     label07:
        i1 = 0;

     label08:
        if i1 >= $i0 goto label11;

     label09:
        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r4);

     label10:
        i1 = i1 + 1;

        goto label08;

     label11:
        $r4 = <okhttp3.Cache$Entry: java.lang.String SENT_MILLIS>;

        $r4 = virtualinvoke r2.<okhttp3.Headers$Builder: java.lang.String get(java.lang.String)>($r4);

        $r8 = <okhttp3.Cache$Entry: java.lang.String RECEIVED_MILLIS>;

        $r8 = virtualinvoke r2.<okhttp3.Headers$Builder: java.lang.String get(java.lang.String)>($r8);

        $r9 = <okhttp3.Cache$Entry: java.lang.String SENT_MILLIS>;

        virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r9);

        $r9 = <okhttp3.Cache$Entry: java.lang.String RECEIVED_MILLIS>;

        virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r9);

     label12:
        if $r4 == null goto label23;

     label13:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

     label14:
        r0.<okhttp3.Cache$Entry: long sentRequestMillis> = $l2;

     label15:
        if $r8 == null goto label24;

     label16:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r8);

     label17:
        r0.<okhttp3.Cache$Entry: long receivedResponseMillis> = $l2;

        $r5 = virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders> = $r5;

        $z0 = specialinvoke r0.<okhttp3.Cache$Entry: boolean isHttps()>();

     label18:
        if $z0 == 0 goto label31;

     label19:
        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

     label20:
        if $i0 <= 0 goto label25;

     label21:
        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \"\" but was \"");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r10;

     label22:
        $r12 := @caughtexception;

        interfaceinvoke $r1.<okio.Source: void close()>();

        throw $r12;

     label23:
        $l2 = 0L;

        goto label14;

     label24:
        $l2 = 0L;

        goto label17;

     label25:
        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        $r13 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r4);

        $r14 = specialinvoke r0.<okhttp3.Cache$Entry: java.util.List readCertificateList(okio.BufferedSource)>($r3);

        $r15 = specialinvoke r0.<okhttp3.Cache$Entry: java.util.List readCertificateList(okio.BufferedSource)>($r3);

        $z0 = interfaceinvoke $r3.<okio.BufferedSource: boolean exhausted()>();

     label26:
        if $z0 != 0 goto label30;

     label27:
        $r4 = interfaceinvoke $r3.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        $r16 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r4);

     label28:
        $r17 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r16, $r13, $r14, $r15);

        r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake> = $r17;

     label29:
        interfaceinvoke $r1.<okio.Source: void close()>();

        return;

     label30:
        $r16 = null;

        goto label28;

     label31:
        r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake> = null;

     label32:
        goto label29;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label25 to label26 with label22;
        catch java.lang.Throwable from label27 to label28 with label22;
        catch java.lang.Throwable from label28 to label29 with label22;
        catch java.lang.Throwable from label31 to label32 with label22;
    }
    private boolean isHttps()
    {
        okhttp3.Cache$Entry r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 = r0.<okhttp3.Cache$Entry: java.lang.String url>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        return $z0;
    }
    private java.util.List readCertificateList(okio.BufferedSource) throws java.io.IOException
    {
        okhttp3.Cache$Entry r0;
        okio.BufferedSource $r1;
        okio.Buffer r2;
        java.security.cert.CertificateException r3;
        int $i0, i1;
        java.util.List $r4;
        java.security.cert.CertificateFactory $r5;
        java.util.ArrayList r6;
        java.lang.String $r7;
        okio.ByteString $r8;
        java.io.InputStream $r9;
        java.security.cert.Certificate $r10;
        java.io.IOException $r11;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 := @parameter0: okio.BufferedSource;

        $i0 = staticinvoke <okhttp3.Cache: int readInt(okio.BufferedSource)>($r1);

        if $i0 != -1 goto label01;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label01:
        $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label02:
        r6 = new java.util.ArrayList;

     label03:
        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i0);

     label04:
        i1 = 0;

     label05:
        if i1 >= $i0 goto label11;

     label06:
        $r7 = interfaceinvoke $r1.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

     label07:
        r2 = new okio.Buffer;

     label08:
        specialinvoke r2.<okio.Buffer: void <init>()>();

        $r8 = staticinvoke <okio.ByteString: okio.ByteString decodeBase64(java.lang.String)>($r7);

        virtualinvoke r2.<okio.Buffer: okio.Buffer write(okio.ByteString)>($r8);

        $r9 = virtualinvoke r2.<okio.Buffer: java.io.InputStream inputStream()>();

        $r10 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r9);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r10);

     label09:
        i1 = i1 + 1;

        goto label05;

     label10:
        r3 := @caughtexception;

        $r11 = new java.io.IOException;

        $r7 = virtualinvoke r3.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label11:
        return r6;

        catch java.security.cert.CertificateException from label01 to label02 with label10;
        catch java.security.cert.CertificateException from label03 to label04 with label10;
        catch java.security.cert.CertificateException from label06 to label07 with label10;
        catch java.security.cert.CertificateException from label08 to label09 with label10;
    }
    private void writeCertList(okio.BufferedSink, java.util.List) throws java.io.IOException
    {
        okhttp3.Cache$Entry r0;
        okio.BufferedSink $r1, $r4;
        java.util.List r2;
        java.security.cert.CertificateEncodingException r3;
        int $i0, $i2;
        long $l1;
        java.lang.Object $r5;
        java.security.cert.Certificate $r6;
        byte[] $r7;
        okio.ByteString $r8;
        java.lang.String $r9;
        java.io.IOException $r10;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 := @parameter0: okio.BufferedSink;

        r2 := @parameter1: java.util.List;

     label01:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

     label02:
        $l1 = (long) $i0;

     label03:
        $r4 = interfaceinvoke $r1.<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>($l1);

        interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

     label04:
        $i0 = 0;

     label05:
        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

     label06:
        if $i0 >= $i2 goto label12;

     label07:
        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i0);

     label08:
        $r6 = (java.security.cert.Certificate) $r5;

     label09:
        $r7 = virtualinvoke $r6.<java.security.cert.Certificate: byte[] getEncoded()>();

        $r8 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r7);

        $r9 = virtualinvoke $r8.<okio.ByteString: java.lang.String base64()>();

        $r4 = interfaceinvoke $r1.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r9);

        interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

     label10:
        $i0 = $i0 + 1;

        goto label06;

     label11:
        r3 := @caughtexception;

        $r10 = new java.io.IOException;

        $r9 = virtualinvoke r3.<java.security.cert.CertificateEncodingException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r10;

     label12:
        return;

        catch java.security.cert.CertificateEncodingException from label01 to label02 with label11;
        catch java.security.cert.CertificateEncodingException from label03 to label04 with label11;
        catch java.security.cert.CertificateEncodingException from label05 to label06 with label11;
        catch java.security.cert.CertificateEncodingException from label07 to label08 with label11;
        catch java.security.cert.CertificateEncodingException from label09 to label10 with label11;
    }
    public boolean matches(okhttp3.Request, okhttp3.Response)
    {
        okhttp3.Cache$Entry r0;
        okhttp3.Request $r1;
        okhttp3.Response $r2;
        java.lang.String $r3, $r5;
        okhttp3.HttpUrl $r4;
        boolean $z0;
        okhttp3.Headers $r6;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 := @parameter0: okhttp3.Request;

        $r2 := @parameter1: okhttp3.Response;

        $r3 = r0.<okhttp3.Cache$Entry: java.lang.String url>;

        $r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r5 = virtualinvoke $r4.<okhttp3.HttpUrl: java.lang.String toString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r3 = r0.<okhttp3.Cache$Entry: java.lang.String requestMethod>;

        $r5 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders>;

        $z0 = staticinvoke <okhttp3.internal.http.HttpHeaders: boolean varyMatches(okhttp3.Response,okhttp3.Headers,okhttp3.Request)>($r2, $r6, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public okhttp3.Response response(okhttp3.internal.cache.DiskLruCache$Snapshot)
    {
        okhttp3.Cache$Entry r0;
        okhttp3.internal.cache.DiskLruCache$Snapshot $r1;
        okhttp3.Headers $r2;
        java.lang.String $r3, $r4, $r6;
        okhttp3.Request$Builder $r5;
        okhttp3.Request $r7;
        okhttp3.Response$Builder $r8;
        okhttp3.Protocol $r9;
        int $i0;
        okhttp3.Cache$CacheResponseBody $r10;
        okhttp3.Handshake $r11;
        long $l1;
        okhttp3.Response $r12;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 := @parameter0: okhttp3.internal.cache.DiskLruCache$Snapshot;

        $r2 = r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders>;

        $r3 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type");

        $r2 = r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders>;

        $r4 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length");

        $r5 = new okhttp3.Request$Builder;

        specialinvoke $r5.<okhttp3.Request$Builder: void <init>()>();

        $r6 = r0.<okhttp3.Cache$Entry: java.lang.String url>;

        $r5 = virtualinvoke $r5.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r6);

        $r6 = r0.<okhttp3.Cache$Entry: java.lang.String requestMethod>;

        $r5 = virtualinvoke $r5.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r6, null);

        $r2 = r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders>;

        $r5 = virtualinvoke $r5.<okhttp3.Request$Builder: okhttp3.Request$Builder headers(okhttp3.Headers)>($r2);

        $r7 = virtualinvoke $r5.<okhttp3.Request$Builder: okhttp3.Request build()>();

        $r8 = new okhttp3.Response$Builder;

        specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>();

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r7);

        $r9 = r0.<okhttp3.Cache$Entry: okhttp3.Protocol protocol>;

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9);

        $i0 = r0.<okhttp3.Cache$Entry: int code>;

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0);

        $r6 = r0.<okhttp3.Cache$Entry: java.lang.String message>;

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r6);

        $r2 = r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders>;

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r2);

        $r10 = new okhttp3.Cache$CacheResponseBody;

        specialinvoke $r10.<okhttp3.Cache$CacheResponseBody: void <init>(okhttp3.internal.cache.DiskLruCache$Snapshot,java.lang.String,java.lang.String)>($r1, $r3, $r4);

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r10);

        $r11 = r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake>;

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r11);

        $l1 = r0.<okhttp3.Cache$Entry: long sentRequestMillis>;

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l1);

        $l1 = r0.<okhttp3.Cache$Entry: long receivedResponseMillis>;

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l1);

        $r12 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>();

        return $r12;
    }
    public void writeTo(okhttp3.internal.cache.DiskLruCache$Editor) throws java.io.IOException
    {
        okhttp3.Cache$Entry r0;
        okhttp3.internal.cache.DiskLruCache$Editor $r1;
        int $i0, $i2;
        java.lang.String $r2;
        okio.Sink $r3;
        okio.BufferedSink $r4, $r5;
        okhttp3.Headers $r6;
        long $l1;
        okhttp3.internal.http.StatusLine $r7;
        okhttp3.Protocol $r8;
        boolean $z0;
        okhttp3.Handshake $r9;
        okhttp3.CipherSuite $r10;
        java.util.List $r11;
        okhttp3.TlsVersion $r12;

        r0 := @this: okhttp3.Cache$Entry;

        $r1 := @parameter0: okhttp3.internal.cache.DiskLruCache$Editor;

        $r3 = virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache$Editor: okio.Sink newSink(int)>(0);

        $r4 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r3);

        $r2 = r0.<okhttp3.Cache$Entry: java.lang.String url>;

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $r2 = r0.<okhttp3.Cache$Entry: java.lang.String requestMethod>;

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders>;

        $i0 = virtualinvoke $r6.<okhttp3.Headers: int size()>();

        $l1 = (long) $i0;

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>($l1);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $i0 = 0;

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders>;

        $i2 = virtualinvoke $r6.<okhttp3.Headers: int size()>();

     label1:
        if $i0 >= $i2 goto label2;

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders>;

        $r2 = virtualinvoke $r6.<okhttp3.Headers: java.lang.String name(int)>($i0);

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>(": ");

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers varyHeaders>;

        $r2 = virtualinvoke $r6.<okhttp3.Headers: java.lang.String value(int)>($i0);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r7 = new okhttp3.internal.http.StatusLine;

        $r8 = r0.<okhttp3.Cache$Entry: okhttp3.Protocol protocol>;

        $i0 = r0.<okhttp3.Cache$Entry: int code>;

        $r2 = r0.<okhttp3.Cache$Entry: java.lang.String message>;

        specialinvoke $r7.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r8, $i0, $r2);

        $r2 = virtualinvoke $r7.<okhttp3.internal.http.StatusLine: java.lang.String toString()>();

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders>;

        $i0 = virtualinvoke $r6.<okhttp3.Headers: int size()>();

        $i0 = $i0 + 2;

        $l1 = (long) $i0;

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>($l1);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $i0 = 0;

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders>;

        $i2 = virtualinvoke $r6.<okhttp3.Headers: int size()>();

     label3:
        if $i0 >= $i2 goto label4;

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders>;

        $r2 = virtualinvoke $r6.<okhttp3.Headers: java.lang.String name(int)>($i0);

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>(": ");

        $r6 = r0.<okhttp3.Cache$Entry: okhttp3.Headers responseHeaders>;

        $r2 = virtualinvoke $r6.<okhttp3.Headers: java.lang.String value(int)>($i0);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r2 = <okhttp3.Cache$Entry: java.lang.String SENT_MILLIS>;

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>(": ");

        $l1 = r0.<okhttp3.Cache$Entry: long sentRequestMillis>;

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>($l1);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $r2 = <okhttp3.Cache$Entry: java.lang.String RECEIVED_MILLIS>;

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>(": ");

        $l1 = r0.<okhttp3.Cache$Entry: long receivedResponseMillis>;

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>($l1);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $z0 = specialinvoke r0.<okhttp3.Cache$Entry: boolean isHttps()>();

        if $z0 == 0 goto label5;

        interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $r9 = r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake>;

        $r10 = virtualinvoke $r9.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite()>();

        $r2 = virtualinvoke $r10.<okhttp3.CipherSuite: java.lang.String javaName()>();

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

        $r9 = r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake>;

        $r11 = virtualinvoke $r9.<okhttp3.Handshake: java.util.List peerCertificates()>();

        specialinvoke r0.<okhttp3.Cache$Entry: void writeCertList(okio.BufferedSink,java.util.List)>($r4, $r11);

        $r9 = r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake>;

        $r11 = virtualinvoke $r9.<okhttp3.Handshake: java.util.List localCertificates()>();

        specialinvoke r0.<okhttp3.Cache$Entry: void writeCertList(okio.BufferedSink,java.util.List)>($r4, $r11);

        $r9 = r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake>;

        $r12 = virtualinvoke $r9.<okhttp3.Handshake: okhttp3.TlsVersion tlsVersion()>();

        if $r12 == null goto label5;

        $r9 = r0.<okhttp3.Cache$Entry: okhttp3.Handshake handshake>;

        $r12 = virtualinvoke $r9.<okhttp3.Handshake: okhttp3.TlsVersion tlsVersion()>();

        $r2 = virtualinvoke $r12.<okhttp3.TlsVersion: java.lang.String javaName()>();

        $r5 = interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(10);

     label5:
        interfaceinvoke $r4.<okio.BufferedSink: void close()>();

        return;
    }
