okhttp3.ResponseBody$BomAwareReader extends java.io.Reader
private final java.nio.charset.Charset charset
private boolean closed
private java.io.Reader delegate
private final okio.BufferedSource source
    void <init>(okio.BufferedSource, java.nio.charset.Charset)
    {
        okhttp3.ResponseBody$BomAwareReader r0;
        okio.BufferedSource $r1;
        java.nio.charset.Charset $r2;

        r0 := @this: okhttp3.ResponseBody$BomAwareReader;

        $r1 := @parameter0: okio.BufferedSource;

        $r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<okhttp3.ResponseBody$BomAwareReader: okio.BufferedSource source> = $r1;

        r0.<okhttp3.ResponseBody$BomAwareReader: java.nio.charset.Charset charset> = $r2;

        return;
    }
    public void close() throws java.io.IOException
    {
        okhttp3.ResponseBody$BomAwareReader r0;
        java.io.Reader $r1;
        okio.BufferedSource $r2;

        r0 := @this: okhttp3.ResponseBody$BomAwareReader;

        r0.<okhttp3.ResponseBody$BomAwareReader: boolean closed> = 1;

        $r1 = r0.<okhttp3.ResponseBody$BomAwareReader: java.io.Reader delegate>;

        if $r1 == null goto label1;

        $r1 = r0.<okhttp3.ResponseBody$BomAwareReader: java.io.Reader delegate>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

        return;

     label1:
        $r2 = r0.<okhttp3.ResponseBody$BomAwareReader: okio.BufferedSource source>;

        interfaceinvoke $r2.<okio.BufferedSource: void close()>();

        return;
    }
    public int read(char[], int, int) throws java.io.IOException
    {
        okhttp3.ResponseBody$BomAwareReader r0;
        char[] $r1;
        int $i0, $i1;
        boolean $z0;
        java.io.Reader r2;
        okio.BufferedSource $r3;
        java.nio.charset.Charset $r4;
        java.io.InputStream $r5;
        java.io.IOException $r6;
        java.io.InputStreamReader $r7;

        r0 := @this: okhttp3.ResponseBody$BomAwareReader;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<okhttp3.ResponseBody$BomAwareReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r6;

     label1:
        r2 = r0.<okhttp3.ResponseBody$BomAwareReader: java.io.Reader delegate>;

        if r2 != null goto label2;

        $r3 = r0.<okhttp3.ResponseBody$BomAwareReader: okio.BufferedSource source>;

        $r4 = r0.<okhttp3.ResponseBody$BomAwareReader: java.nio.charset.Charset charset>;

        $r4 = staticinvoke <okhttp3.internal.Util: java.nio.charset.Charset bomAwareCharset(okio.BufferedSource,java.nio.charset.Charset)>($r3, $r4);

        $r7 = new java.io.InputStreamReader;

        r2 = $r7;

        $r3 = r0.<okhttp3.ResponseBody$BomAwareReader: okio.BufferedSource source>;

        $r5 = interfaceinvoke $r3.<okio.BufferedSource: java.io.InputStream inputStream()>();

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, $r4);

        r0.<okhttp3.ResponseBody$BomAwareReader: java.io.Reader delegate> = $r7;

     label2:
        $i0 = virtualinvoke r2.<java.io.Reader: int read(char[],int,int)>($r1, $i0, $i1);

        return $i0;
    }
