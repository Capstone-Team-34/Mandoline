okhttp3.MediaType extends java.lang.Object
private static final java.util.regex.Pattern PARAMETER
private static final java.lang.String QUOTED
private static final java.lang.String TOKEN
private static final java.util.regex.Pattern TYPE_SUBTYPE
private final java.lang.String charset
private final java.lang.String mediaType
private final java.lang.String subtype
private final java.lang.String type
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)/([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)");

        <okhttp3.MediaType: java.util.regex.Pattern TYPE_SUBTYPE> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(";\\s*(?:([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)=(?:([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)|\"([^\"]*)\"))?");

        <okhttp3.MediaType: java.util.regex.Pattern PARAMETER> = $r0;

        return;
    }
    private void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        okhttp3.MediaType r0;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: okhttp3.MediaType;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.MediaType: java.lang.String mediaType> = $r1;

        r0.<okhttp3.MediaType: java.lang.String type> = $r2;

        r0.<okhttp3.MediaType: java.lang.String subtype> = $r3;

        r0.<okhttp3.MediaType: java.lang.String charset> = $r4;

        return;
    }
    public static okhttp3.MediaType parse(java.lang.String)
    {
        java.lang.String $r0, $r3, $r5, r6, $r8;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2, $r7;
        boolean $z0;
        java.util.Locale $r4;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10;
        okhttp3.MediaType $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 = <okhttp3.MediaType: java.util.regex.Pattern TYPE_SUBTYPE>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        $r5 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        r6 = null;

        $r1 = <okhttp3.MediaType: java.util.regex.Pattern PARAMETER>;

        $r7 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

     label02:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label09;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        virtualinvoke $r7.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i0, $i1);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label10;

        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        if $r8 == null goto label03;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("charset");

        if $z0 != 0 goto label04;

     label03:
        $i0 = virtualinvoke $r7.<java.util.regex.Matcher: int end()>();

        goto label02;

     label04:
        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if $r8 == null goto label07;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label06;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label06;

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 <= 2 goto label06;

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

     label05:
        if r6 == null goto label08;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z0 != 0 goto label08;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple different charsets: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r9;

     label06:
        goto label05;

     label07:
        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        goto label05;

     label08:
        r6 = $r8;

        goto label03;

     label09:
        $r11 = new okhttp3.MediaType;

        specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r3, $r5, r6);

        return $r11;

     label10:
        return null;
    }
    public java.nio.charset.Charset charset()
    {
        okhttp3.MediaType r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;

        r0 := @this: okhttp3.MediaType;

        $r2 = r0.<okhttp3.MediaType: java.lang.String charset>;

        if $r2 == null goto label1;

        $r2 = r0.<okhttp3.MediaType: java.lang.String charset>;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r2);

        return $r1;

     label1:
        return null;
    }
    public java.nio.charset.Charset charset(java.nio.charset.Charset)
    {
        okhttp3.MediaType r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;

        r0 := @this: okhttp3.MediaType;

        $r1 := @parameter0: java.nio.charset.Charset;

        $r2 = r0.<okhttp3.MediaType: java.lang.String charset>;

        if $r2 == null goto label1;

        $r2 = r0.<okhttp3.MediaType: java.lang.String charset>;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r2);

     label1:
        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.MediaType r0, $r3;
        java.lang.String $r1, $r4;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: okhttp3.MediaType;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof okhttp3.MediaType;

        if $z0 == 0 goto label1;

        $r3 = (okhttp3.MediaType) $r2;

        $r4 = $r3.<okhttp3.MediaType: java.lang.String mediaType>;

        $r1 = r0.<okhttp3.MediaType: java.lang.String mediaType>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int hashCode()
    {
        okhttp3.MediaType r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: okhttp3.MediaType;

        $r1 = r0.<okhttp3.MediaType: java.lang.String mediaType>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }
    public java.lang.String subtype()
    {
        okhttp3.MediaType r0;
        java.lang.String r1;

        r0 := @this: okhttp3.MediaType;

        r1 = r0.<okhttp3.MediaType: java.lang.String subtype>;

        return r1;
    }
    public java.lang.String toString()
    {
        okhttp3.MediaType r0;
        java.lang.String r1;

        r0 := @this: okhttp3.MediaType;

        r1 = r0.<okhttp3.MediaType: java.lang.String mediaType>;

        return r1;
    }
    public java.lang.String type()
    {
        okhttp3.MediaType r0;
        java.lang.String r1;

        r0 := @this: okhttp3.MediaType;

        r1 = r0.<okhttp3.MediaType: java.lang.String type>;

        return r1;
    }
