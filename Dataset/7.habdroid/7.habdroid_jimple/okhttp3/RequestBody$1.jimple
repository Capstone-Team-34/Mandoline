okhttp3.RequestBody$1 extends okhttp3.RequestBody
final okio.ByteString val$content
final okhttp3.MediaType val$contentType
    void <init>(okhttp3.MediaType, okio.ByteString)
    {
        okhttp3.RequestBody$1 r0;
        okhttp3.MediaType $r1;
        okio.ByteString $r2;

        r0 := @this: okhttp3.RequestBody$1;

        $r1 := @parameter0: okhttp3.MediaType;

        $r2 := @parameter1: okio.ByteString;

        r0.<okhttp3.RequestBody$1: okhttp3.MediaType val$contentType> = $r1;

        r0.<okhttp3.RequestBody$1: okio.ByteString val$content> = $r2;

        specialinvoke r0.<okhttp3.RequestBody: void <init>()>();

        return;
    }
    public long contentLength() throws java.io.IOException
    {
        okhttp3.RequestBody$1 r0;
        int $i0;
        okio.ByteString $r1;
        long $l1;

        r0 := @this: okhttp3.RequestBody$1;

        $r1 = r0.<okhttp3.RequestBody$1: okio.ByteString val$content>;

        $i0 = virtualinvoke $r1.<okio.ByteString: int size()>();

        $l1 = (long) $i0;

        return $l1;
    }
    public okhttp3.MediaType contentType()
    {
        okhttp3.RequestBody$1 r0;
        okhttp3.MediaType r1;

        r0 := @this: okhttp3.RequestBody$1;

        r1 = r0.<okhttp3.RequestBody$1: okhttp3.MediaType val$contentType>;

        return r1;
    }
    public void writeTo(okio.BufferedSink) throws java.io.IOException
    {
        okhttp3.RequestBody$1 r0;
        okio.BufferedSink $r1;
        okio.ByteString $r2;

        r0 := @this: okhttp3.RequestBody$1;

        $r1 := @parameter0: okio.BufferedSink;

        $r2 = r0.<okhttp3.RequestBody$1: okio.ByteString val$content>;

        interfaceinvoke $r1.<okio.BufferedSink: okio.BufferedSink write(okio.ByteString)>($r2);

        return;
    }
