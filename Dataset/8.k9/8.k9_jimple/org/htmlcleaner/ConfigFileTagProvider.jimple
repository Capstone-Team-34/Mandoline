org.htmlcleaner.ConfigFileTagProvider extends java.util.HashMap implements org.htmlcleaner.ITagInfoProvider
static javax.xml.parsers.SAXParserFactory parserFactory
private boolean generateCode
    static void <clinit>()
    {
        javax.xml.parsers.SAXParserFactory $r0;

        $r0 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

        <org.htmlcleaner.ConfigFileTagProvider: javax.xml.parsers.SAXParserFactory parserFactory> = $r0;

        $r0 = <org.htmlcleaner.ConfigFileTagProvider: javax.xml.parsers.SAXParserFactory parserFactory>;

        virtualinvoke $r0.<javax.xml.parsers.SAXParserFactory: void setValidating(boolean)>(0);

        $r0 = <org.htmlcleaner.ConfigFileTagProvider: javax.xml.parsers.SAXParserFactory parserFactory>;

        virtualinvoke $r0.<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>(0);

        return;
    }
    private void <init>()
    {
        org.htmlcleaner.ConfigFileTagProvider r0;

        r0 := @this: org.htmlcleaner.ConfigFileTagProvider;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.htmlcleaner.ConfigFileTagProvider: boolean generateCode> = 0;

        return;
    }
    public void <init>(java.io.File)
    {
        org.htmlcleaner.ConfigFileTagProvider r0;
        java.io.File $r1;
        java.lang.Exception r2;
        java.io.FileReader $r3;
        org.htmlcleaner.ConfigFileTagProvider$ConfigParser $r4;
        org.xml.sax.InputSource $r5;
        org.htmlcleaner.HtmlCleanerException $r6;

        r0 := @this: org.htmlcleaner.ConfigFileTagProvider;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.htmlcleaner.ConfigFileTagProvider: boolean generateCode> = 0;

        $r4 = new org.htmlcleaner.ConfigFileTagProvider$ConfigParser;

     label1:
        specialinvoke $r4.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void <init>(org.htmlcleaner.ConfigFileTagProvider,java.util.Map)>(r0, r0);

     label2:
        $r5 = new org.xml.sax.InputSource;

        $r3 = new java.io.FileReader;

     label3:
        specialinvoke $r3.<java.io.FileReader: void <init>(java.io.File)>($r1);

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r3);

        virtualinvoke $r4.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void parse(org.xml.sax.InputSource)>($r5);

     label4:
        return;

     label5:
        r2 := @caughtexception;

        $r6 = new org.htmlcleaner.HtmlCleanerException;

        specialinvoke $r6.<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing tag configuration file!", r2);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public void <init>(java.net.URL)
    {
        org.htmlcleaner.ConfigFileTagProvider r0;
        java.net.URL $r1;
        java.lang.Exception r2;
        java.io.InputStreamReader r3;
        java.lang.Object $r4;
        boolean $z0;
        java.io.InputStream r5;
        org.htmlcleaner.ConfigFileTagProvider$ConfigParser $r6;
        org.xml.sax.InputSource $r7;
        org.htmlcleaner.HtmlCleanerException $r8;

        r0 := @this: org.htmlcleaner.ConfigFileTagProvider;

        $r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.htmlcleaner.ConfigFileTagProvider: boolean generateCode> = 0;

     label01:
        $r4 = virtualinvoke $r1.<java.net.URL: java.lang.Object getContent()>();

     label02:
        $z0 = $r4 instanceof java.io.InputStream;

        if $z0 == 0 goto label10;

        r3 = new java.io.InputStreamReader;

     label03:
        r5 = (java.io.InputStream) $r4;

        specialinvoke r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r5);

     label04:
        $r6 = new org.htmlcleaner.ConfigFileTagProvider$ConfigParser;

     label05:
        specialinvoke $r6.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void <init>(org.htmlcleaner.ConfigFileTagProvider,java.util.Map)>(r0, r0);

     label06:
        $r7 = new org.xml.sax.InputSource;

     label07:
        specialinvoke $r7.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r3);

        virtualinvoke $r6.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void parse(org.xml.sax.InputSource)>($r7);

     label08:
        return;

     label09:
        r2 := @caughtexception;

        $r8 = new org.htmlcleaner.HtmlCleanerException;

        specialinvoke $r8.<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing tag configuration file!", r2);

        throw $r8;

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
    }
    public void <init>(org.xml.sax.InputSource)
    {
        org.htmlcleaner.ConfigFileTagProvider r0;
        org.xml.sax.InputSource $r1;
        java.lang.Exception r2;
        org.htmlcleaner.ConfigFileTagProvider$ConfigParser $r3;
        org.htmlcleaner.HtmlCleanerException $r4;

        r0 := @this: org.htmlcleaner.ConfigFileTagProvider;

        $r1 := @parameter0: org.xml.sax.InputSource;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.htmlcleaner.ConfigFileTagProvider: boolean generateCode> = 0;

        $r3 = new org.htmlcleaner.ConfigFileTagProvider$ConfigParser;

     label1:
        specialinvoke $r3.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void <init>(org.htmlcleaner.ConfigFileTagProvider,java.util.Map)>(r0, r0);

        virtualinvoke $r3.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void parse(org.xml.sax.InputSource)>($r1);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r4 = new org.htmlcleaner.HtmlCleanerException;

        specialinvoke $r4.<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing tag configuration file!", r2);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    static boolean access$000(org.htmlcleaner.ConfigFileTagProvider)
    {
        org.htmlcleaner.ConfigFileTagProvider $r0;
        boolean z0;

        $r0 := @parameter0: org.htmlcleaner.ConfigFileTagProvider;

        z0 = $r0.<org.htmlcleaner.ConfigFileTagProvider: boolean generateCode>;

        return z0;
    }
    public static void main(java.lang.String[]) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException
    {
        java.lang.String[] $r0;
        java.io.File r1;
        org.htmlcleaner.ConfigFileTagProvider$ConfigParser r2;
        org.htmlcleaner.ConfigFileTagProvider r3;
        java.lang.String r4;
        int $i0;
        java.io.PrintStream $r5;
        java.lang.StringBuilder $r6;
        org.xml.sax.InputSource $r7;
        java.io.FileReader $r8;

        $r0 := @parameter0: java.lang.String[];

        r3 = new org.htmlcleaner.ConfigFileTagProvider;

        specialinvoke r3.<org.htmlcleaner.ConfigFileTagProvider: void <init>()>();

        r3.<org.htmlcleaner.ConfigFileTagProvider: boolean generateCode> = 1;

        r4 = "default.xml";

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label1;

        r4 = $r0[0];

     label1:
        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>(r4);

        r2 = new org.htmlcleaner.ConfigFileTagProvider$ConfigParser;

        virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r2.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void <init>(org.htmlcleaner.ConfigFileTagProvider,java.util.Map)>(r3, r3);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.htmlcleaner");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r4);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("import java.util.HashMap;");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public class ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CustomTagProvider");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends HashMap implements ITagInfoProvider {");

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r4);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("private ConcurrentMap<String, TagInfo> tagInfoMap = new ConcurrentHashMap<String, TagInfo>();");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("// singleton instance, used if no other TagInfoProvider is specified");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public final static ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CustomTagProvider");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INSTANCE= new ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CustomTagProvider");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("();");

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r4);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CustomTagProvider");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() {");

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r4);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("TagInfo tagInfo;");

        $r7 = new org.xml.sax.InputSource;

        $r8 = new java.io.FileReader;

        specialinvoke $r8.<java.io.FileReader: void <init>(java.io.File)>(r1);

        specialinvoke $r7.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r8);

        virtualinvoke r2.<org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void parse(org.xml.sax.InputSource)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("}");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("}");

        return;
    }
    public org.htmlcleaner.TagInfo getTagInfo(java.lang.String)
    {
        org.htmlcleaner.ConfigFileTagProvider r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        org.htmlcleaner.TagInfo $r3;

        r0 := @this: org.htmlcleaner.ConfigFileTagProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.htmlcleaner.ConfigFileTagProvider: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (org.htmlcleaner.TagInfo) $r2;

        return $r3;
    }
