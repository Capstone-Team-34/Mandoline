org.htmlcleaner.HtmlSerializer extends org.htmlcleaner.Serializer
    protected void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.HtmlSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.HtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<org.htmlcleaner.Serializer: void <init>(org.htmlcleaner.CleanerProperties)>($r1);

        return;
    }
    protected boolean dontEscape(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.HtmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $z0 = virtualinvoke r0.<org.htmlcleaner.HtmlSerializer: boolean isScriptOrStyle(org.htmlcleaner.TagNode)>($r1);

        return $z0;
    }
    protected java.lang.String escapeText(java.lang.String)
    {
        org.htmlcleaner.HtmlSerializer r0;
        java.lang.String $r1;
        org.htmlcleaner.CleanerProperties $r2;

        r0 := @this: org.htmlcleaner.HtmlSerializer;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.HtmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $r1 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeHtml(java.lang.String,org.htmlcleaner.CleanerProperties)>($r1, $r2);

        return $r1;
    }
    protected boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.HtmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.CleanerProperties $r2;
        org.htmlcleaner.ITagInfoProvider $r3;
        java.lang.String $r4;
        org.htmlcleaner.TagInfo $r5;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = r0.<org.htmlcleaner.HtmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $r3 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>();

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r5 = interfaceinvoke $r3.<org.htmlcleaner.ITagInfoProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>($r4);

        if $r5 == null goto label1;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean hasChildren()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r5.<org.htmlcleaner.TagInfo: boolean isEmptyTag()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void serializeEndTag(org.htmlcleaner.TagNode, java.io.Writer, boolean) throws java.io.IOException
    {
        org.htmlcleaner.HtmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        boolean $z0, $z1;
        java.lang.String $r3, r4, $r5;
        org.htmlcleaner.CleanerProperties $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: org.htmlcleaner.HtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        r4 = $r3;

        $z1 = staticinvoke <org.htmlcleaner.Utils: boolean isEmptyString(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r5 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlNSPrefix(java.lang.String)>($r3);

        if $r5 == null goto label2;

        $r6 = r0.<org.htmlcleaner.HtmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $z1 = virtualinvoke $r6.<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>();

        if $z1 != 0 goto label2;

        r4 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlName(java.lang.String)>($r3);

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

     label3:
        return;
    }
    protected void serializeOpenTag(org.htmlcleaner.TagNode, java.io.Writer, boolean) throws java.io.IOException
    {
        org.htmlcleaner.HtmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, r4, $r6;
        org.htmlcleaner.CleanerProperties $r5;
        java.lang.StringBuilder $r7;
        java.util.Map $r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        java.util.Map$Entry r12;
        int $i0;

        r0 := @this: org.htmlcleaner.HtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        r4 = $r3;

        $z1 = staticinvoke <org.htmlcleaner.Utils: boolean isEmptyString(java.lang.Object)>($r3);

        if $z1 == 0 goto label01;

        return;

     label01:
        $r5 = r0.<org.htmlcleaner.HtmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $z1 = virtualinvoke $r5.<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>();

        if $z1 != 0 goto label02;

        $r6 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlNSPrefix(java.lang.String)>($r3);

        if $r6 == null goto label02;

        r4 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlName(java.lang.String)>($r3);

     label02:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        $r8 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r11;

        if $z1 != 0 goto label04;

        r4 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlNSPrefix(java.lang.String)>($r3);

        if r4 == null goto label04;

        $r3 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlName(java.lang.String)>($r3);

     label04:
        if $z1 == 0 goto label05;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("xmlns");

        if $z2 != 0 goto label03;

     label05:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r11;

        $r3 = virtualinvoke r0.<org.htmlcleaner.HtmlSerializer: java.lang.String escapeText(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        goto label03;

     label06:
        if $z1 == 0 goto label09;

        $r8 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getNamespaceDeclarations()>();

        if $r8 == null goto label09;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r11;

        r4 = "xmlns";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label08;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r11;

        $r3 = virtualinvoke r0.<org.htmlcleaner.HtmlSerializer: java.lang.String escapeText(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        goto label07;

     label09:
        $z1 = virtualinvoke r0.<org.htmlcleaner.HtmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>($r1);

        if $z1 == 0 goto label10;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(" />");

        if $z0 == 0 goto label11;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

        return;

     label10:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(">");

     label11:
        return;
    }
