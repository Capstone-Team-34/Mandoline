org.htmlcleaner.TagNode extends org.htmlcleaner.TagToken implements org.htmlcleaner.HtmlNode
private final java.util.Map attributes
private boolean autoGenerated
private final java.util.List children
private org.htmlcleaner.DoctypeToken docType
private boolean foreignMarkupFlagSet
private final boolean isCopy
private boolean isForeignMarkup
private transient boolean isFormed
private boolean isTrimAttributeValues
private java.util.List itemsToMove
private java.util.Map nsDeclarations
private org.htmlcleaner.TagNode parent
private boolean pruned
    public void <init>(java.lang.String)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.TagNode: void <init>(java.lang.String,boolean)>($r1, 0);

        return;
    }
    private void <init>(java.lang.String, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.LinkedHashMap $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.htmlcleaner.TagToken: void <init>(java.lang.String)>($r1);

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.htmlcleaner.TagNode: java.util.Map attributes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.TagNode: java.util.List children> = $r3;

        r0.<org.htmlcleaner.TagNode: boolean foreignMarkupFlagSet> = 0;

        r0.<org.htmlcleaner.TagNode: boolean isTrimAttributeValues> = 1;

        r0.<org.htmlcleaner.TagNode: boolean isCopy> = $z0;

        return;
    }
    private java.util.Map attributesToLowerCase()
    {
        org.htmlcleaner.TagNode r0;
        java.util.LinkedHashMap r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String r6, $r7;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = new java.util.LinkedHashMap;

        specialinvoke r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

        goto label1;

     label2:
        return r1;
    }
    private org.htmlcleaner.TagNode findElement(org.htmlcleaner.conditional.ITagNodeCondition, boolean)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.conditional.ITagNodeCondition $r1;
        boolean $z0, $z1;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.conditional.ITagNodeCondition;

        $z0 := @parameter1: boolean;

        if $r1 == null goto label3;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof org.htmlcleaner.TagNode;

        if $z1 == 0 goto label1;

        r0 = (org.htmlcleaner.TagNode) $r4;

        $z1 = interfaceinvoke $r1.<org.htmlcleaner.conditional.ITagNodeCondition: boolean satisfy(org.htmlcleaner.TagNode)>(r0);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        if $z0 == 0 goto label1;

        r0 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElement(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r1, $z0);

        if r0 == null goto label1;

        return r0;

     label3:
        return null;
    }
    private java.util.List findMatchingTagNodes(org.htmlcleaner.conditional.ITagNodeCondition, boolean)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.conditional.ITagNodeCondition $r1;
        boolean $z0, $z1;
        java.util.LinkedList r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        int $i0;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.conditional.ITagNodeCondition;

        $z0 := @parameter1: boolean;

        r2 = new java.util.LinkedList;

        specialinvoke r2.<java.util.LinkedList: void <init>()>();

        if $r1 != null goto label1;

        return r2;

     label1:
        $r3 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r5 instanceof org.htmlcleaner.TagNode;

        if $z1 == 0 goto label2;

        r0 = (org.htmlcleaner.TagNode) $r5;

        $z1 = interfaceinvoke $r1.<org.htmlcleaner.conditional.ITagNodeCondition: boolean satisfy(org.htmlcleaner.TagNode)>(r0);

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r0);

     label3:
        if $z0 == 0 goto label2;

        $r3 = specialinvoke r0.<org.htmlcleaner.TagNode: java.util.List findMatchingTagNodes(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r1, $z0);

        if $r3 == null goto label2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        goto label2;

     label4:
        return r2;
    }
    private org.htmlcleaner.TagNode[] getElements(org.htmlcleaner.conditional.ITagNodeCondition, boolean)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.conditional.ITagNodeCondition $r1;
        boolean $z0;
        java.util.List $r2;
        org.htmlcleaner.TagNode[] r3;
        int $i0;
        java.lang.Object[] $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.conditional.ITagNodeCondition;

        $z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<org.htmlcleaner.TagNode: java.util.List findMatchingTagNodes(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r1, $z0);

        if $r2 != null goto label1;

        r3 = newarray (org.htmlcleaner.TagNode)[0];

        return r3;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r3 = newarray (org.htmlcleaner.TagNode)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        r3 = (org.htmlcleaner.TagNode[]) $r4;

        return r3;
    }
    private void handleInterruption()
    {
        org.htmlcleaner.TagNode r0;

        r0 := @this: org.htmlcleaner.TagNode;

        return;
    }
    private void replaceAttributes(java.util.Map)
    {
        org.htmlcleaner.TagNode r0;
        java.util.Map r1, $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }
    private boolean traverseInternally(org.htmlcleaner.TagNodeVisitor)
    {
        org.htmlcleaner.TagNode r0, $r2;
        org.htmlcleaner.TagNodeVisitor $r1;
        int $i0, $i1;
        boolean z0, $z1, z2;
        java.util.List $r3;
        java.lang.Object[] $r4;
        java.lang.Object r5;
        org.htmlcleaner.ContentNode r6;
        org.htmlcleaner.CommentNode r7;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.TagNodeVisitor;

        if $r1 == null goto label09;

        $r2 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        if $r2 == null goto label02;

        z0 = 1;

     label01:
        $r2 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        $z1 = interfaceinvoke $r1.<org.htmlcleaner.TagNodeVisitor: boolean visit(org.htmlcleaner.TagNode,org.htmlcleaner.HtmlNode)>($r2, r0);

        z2 = $z1;

        if $z1 != 0 goto label03;

        return 0;

     label02:
        z0 = 0;

        goto label01;

     label03:
        if z0 == 0 goto label04;

        $r2 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        if $r2 != null goto label04;

        return 1;

     label04:
        $r3 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label05:
        if $i1 >= $i0 goto label09;

        r5 = $r4[$i1];

        z0 = r5 instanceof org.htmlcleaner.TagNode;

        if z0 == 0 goto label07;

        $r2 = (org.htmlcleaner.TagNode) r5;

        z2 = specialinvoke $r2.<org.htmlcleaner.TagNode: boolean traverseInternally(org.htmlcleaner.TagNodeVisitor)>($r1);

     label06:
        if z2 == 0 goto label10;

        $i1 = $i1 + 1;

        goto label05;

     label07:
        z0 = r5 instanceof org.htmlcleaner.ContentNode;

        if z0 == 0 goto label08;

        r6 = (org.htmlcleaner.ContentNode) r5;

        z2 = interfaceinvoke $r1.<org.htmlcleaner.TagNodeVisitor: boolean visit(org.htmlcleaner.TagNode,org.htmlcleaner.HtmlNode)>(r0, r6);

        goto label06;

     label08:
        z0 = r5 instanceof org.htmlcleaner.CommentNode;

        if z0 == 0 goto label06;

        r7 = (org.htmlcleaner.CommentNode) r5;

        z2 = interfaceinvoke $r1.<org.htmlcleaner.TagNodeVisitor: boolean visit(org.htmlcleaner.TagNode,org.htmlcleaner.HtmlNode)>(r0, r7);

        goto label06;

     label09:
        return 1;

     label10:
        return 0;
    }
    public void addAttribute(java.lang.String, java.lang.String)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        int $i0;
        java.util.Map $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label5;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r1 = $r3;

        $z0 = r0.<org.htmlcleaner.TagNode: boolean isForeignMarkup>;

        if $z0 != 0 goto label1;

        $z0 = r0.<org.htmlcleaner.TagNode: boolean foreignMarkupFlagSet>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

     label1:
        if $r2 != null goto label4;

        $r2 = "";

     label2:
        $z0 = r0.<org.htmlcleaner.TagNode: boolean isTrimAttributeValues>;

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\p{Cntrl}", " ");

     label3:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label5;

        $r4 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;

     label4:
        goto label2;

     label5:
        return;
    }
    public void addChild(java.lang.Object)
    {
        org.htmlcleaner.TagNode r0, r5;
        java.lang.Object r1;
        boolean $z0;
        java.util.List r2;
        org.htmlcleaner.ProxyTagNode r3;
        org.htmlcleaner.BaseToken $r4;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = r1 instanceof java.util.List;

        if $z0 == 0 goto label2;

        r2 = (java.util.List) r1;

        virtualinvoke r0.<org.htmlcleaner.TagNode: void addChildren(java.util.List)>(r2);

        return;

     label2:
        $z0 = r1 instanceof org.htmlcleaner.ProxyTagNode;

        if $z0 == 0 goto label3;

        r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        r3 = (org.htmlcleaner.ProxyTagNode) r1;

        $r4 = virtualinvoke r3.<org.htmlcleaner.ProxyTagNode: org.htmlcleaner.BaseToken getToken()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;

     label3:
        $z0 = r1 instanceof org.htmlcleaner.BaseToken;

        if $z0 == 0 goto label4;

        r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r4 = (org.htmlcleaner.BaseToken) r1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $z0 = r1 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label5;

        r5 = (org.htmlcleaner.TagNode) r1;

        r5.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent> = r0;

        return;

     label4:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add invalid child object to TagNode; class=");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label5:
        return;
    }
    public void addChildren(java.util.List)
    {
        org.htmlcleaner.TagNode r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.util.List;

        if $r1 == null goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>($r3);

        goto label1;

     label2:
        return;
    }
    void addItemForMoving(java.lang.Object)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.Object r1;
        java.util.List $r2;
        java.util.ArrayList $r3;
        boolean $z0;
        org.htmlcleaner.BaseToken r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List itemsToMove>;

        if $r2 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.TagNode: java.util.List itemsToMove> = $r3;

     label1:
        $z0 = r1 instanceof org.htmlcleaner.BaseToken;

        if $z0 == 0 goto label2;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List itemsToMove>;

        r4 = (org.htmlcleaner.BaseToken) r1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        return;

     label2:
        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to add invalid item for moving; class=");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r5;
    }
    public void addNamespaceDeclaration(java.lang.String, java.lang.String)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1, $r2;
        java.util.Map $r3;
        java.util.TreeMap $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.htmlcleaner.TagNode: java.util.Map nsDeclarations>;

        if $r3 != null goto label1;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<org.htmlcleaner.TagNode: java.util.Map nsDeclarations> = $r4;

     label1:
        $r3 = r0.<org.htmlcleaner.TagNode: java.util.Map nsDeclarations>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    void collectNamespacePrefixesOnPath(java.util.Set)
    {
        org.htmlcleaner.TagNode r0, $r7;
        java.util.Set r1, $r3;
        java.util.Map $r2;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String r6;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 := @parameter0: java.util.Set;

        $r2 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.Map getNamespaceDeclarations()>();

        if $r2 == null goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        $r7 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        if $r7 == null goto label3;

        r0 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        virtualinvoke r0.<org.htmlcleaner.TagNode: void collectNamespacePrefixesOnPath(java.util.Set)>(r1);

     label3:
        return;
    }
    public java.lang.Object[] evaluateXPath(java.lang.String) throws org.htmlcleaner.XPatherException
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        org.htmlcleaner.XPather $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $r3 = new org.htmlcleaner.XPather;

        specialinvoke $r3.<org.htmlcleaner.XPather: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r3.<org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>(r0);

        return $r2;
    }
    public org.htmlcleaner.TagNode findElementByAttValue(java.lang.String, java.lang.String, boolean, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;
        org.htmlcleaner.conditional.TagNodeAttValueCondition $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r3 = new org.htmlcleaner.conditional.TagNodeAttValueCondition;

        specialinvoke $r3.<org.htmlcleaner.conditional.TagNodeAttValueCondition: void <init>(java.lang.String,java.lang.String,boolean)>($r1, $r2, $z1);

        r0 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElement(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r3, $z0);

        return r0;
    }
    public org.htmlcleaner.TagNode findElementByName(java.lang.String, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;
        org.htmlcleaner.conditional.TagNodeNameCondition $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = new org.htmlcleaner.conditional.TagNodeNameCondition;

        specialinvoke $r2.<org.htmlcleaner.conditional.TagNodeNameCondition: void <init>(java.lang.String)>($r1);

        r0 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElement(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r2, $z0);

        return r0;
    }
    public org.htmlcleaner.TagNode findElementHavingAttribute(java.lang.String, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;
        org.htmlcleaner.conditional.TagNodeAttExistsCondition $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = new org.htmlcleaner.conditional.TagNodeAttExistsCondition;

        specialinvoke $r2.<org.htmlcleaner.conditional.TagNodeAttExistsCondition: void <init>(java.lang.String)>($r1);

        r0 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElement(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r2, $z0);

        return r0;
    }
    public java.util.List getAllChildren()
    {
        org.htmlcleaner.TagNode r0;
        java.util.List r1;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        return r1;
    }
    public org.htmlcleaner.TagNode[] getAllElements(boolean)
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;
        org.htmlcleaner.TagNode[] $r1;
        org.htmlcleaner.conditional.TagAllCondition $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 := @parameter0: boolean;

        $r2 = new org.htmlcleaner.conditional.TagAllCondition;

        specialinvoke $r2.<org.htmlcleaner.conditional.TagAllCondition: void <init>()>();

        $r1 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElements(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r2, $z0);

        return $r1;
    }
    public java.util.List getAllElementsList(boolean)
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;
        java.util.List $r1;
        org.htmlcleaner.conditional.TagAllCondition $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 := @parameter0: boolean;

        $r2 = new org.htmlcleaner.conditional.TagAllCondition;

        specialinvoke $r2.<org.htmlcleaner.conditional.TagAllCondition: void <init>()>();

        $r1 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.List getElementList(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r2, $z0);

        return $r1;
    }
    public java.lang.String getAttributeByName(java.lang.String)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.Map getAttributesInLowerCase()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r3;

        return $r1;

     label2:
        return null;
    }
    public java.util.Map getAttributes()
    {
        org.htmlcleaner.TagNode r0;
        java.util.LinkedHashMap $r1;
        java.util.Map $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 = new java.util.LinkedHashMap;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r2);

        return $r1;
    }
    public java.util.Map getAttributesInLowerCase()
    {
        org.htmlcleaner.TagNode r0;
        java.util.Map $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 = specialinvoke r0.<org.htmlcleaner.TagNode: java.util.Map attributesToLowerCase()>();

        return $r1;
    }
    public int getChildIndex(org.htmlcleaner.HtmlNode)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.HtmlNode $r1;
        int i0;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.HtmlNode;

        i0 = 0;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r4 != $r1 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }
    public java.util.List getChildTagList()
    {
        org.htmlcleaner.TagNode r0;
        java.util.ArrayList r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label1;

        r0 = (org.htmlcleaner.TagNode) $r4;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label1;

     label2:
        return r1;
    }
    public org.htmlcleaner.TagNode[] getChildTags()
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.TagNode[] r1;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r2 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.List getChildTagList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r1 = newarray (org.htmlcleaner.TagNode)[$i0];

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        r0 = (org.htmlcleaner.TagNode) $r3;

        r1[$i0] = r0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public java.util.List getChildren()
    {
        org.htmlcleaner.TagNode r0;
        java.util.List $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.List getChildTagList()>();

        return $r1;
    }
    public org.htmlcleaner.DoctypeToken getDocType()
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.DoctypeToken r1;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken docType>;

        return r1;
    }
    public java.util.List getElementList(org.htmlcleaner.conditional.ITagNodeCondition, boolean)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.conditional.ITagNodeCondition $r1;
        boolean $z0;
        java.util.List $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.conditional.ITagNodeCondition;

        $z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<org.htmlcleaner.TagNode: java.util.List findMatchingTagNodes(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r1, $z0);

        return $r2;
    }
    public java.util.List getElementListByAttValue(java.lang.String, java.lang.String, boolean, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;
        java.util.List $r3;
        org.htmlcleaner.conditional.TagNodeAttValueCondition $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r4 = new org.htmlcleaner.conditional.TagNodeAttValueCondition;

        specialinvoke $r4.<org.htmlcleaner.conditional.TagNodeAttValueCondition: void <init>(java.lang.String,java.lang.String,boolean)>($r1, $r2, $z1);

        $r3 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.List getElementList(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r4, $z0);

        return $r3;
    }
    public java.util.List getElementListByName(java.lang.String, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.List $r2;
        org.htmlcleaner.conditional.TagNodeNameCondition $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r3 = new org.htmlcleaner.conditional.TagNodeNameCondition;

        specialinvoke $r3.<org.htmlcleaner.conditional.TagNodeNameCondition: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.List getElementList(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r3, $z0);

        return $r2;
    }
    public java.util.List getElementListHavingAttribute(java.lang.String, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.List $r2;
        org.htmlcleaner.conditional.TagNodeAttExistsCondition $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r3 = new org.htmlcleaner.conditional.TagNodeAttExistsCondition;

        specialinvoke $r3.<org.htmlcleaner.conditional.TagNodeAttExistsCondition: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.List getElementList(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r3, $z0);

        return $r2;
    }
    public org.htmlcleaner.TagNode[] getElementsByAttValue(java.lang.String, java.lang.String, boolean, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;
        org.htmlcleaner.TagNode[] $r3;
        org.htmlcleaner.conditional.TagNodeAttValueCondition $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r4 = new org.htmlcleaner.conditional.TagNodeAttValueCondition;

        specialinvoke $r4.<org.htmlcleaner.conditional.TagNodeAttValueCondition: void <init>(java.lang.String,java.lang.String,boolean)>($r1, $r2, $z1);

        $r3 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElements(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r4, $z0);

        return $r3;
    }
    public org.htmlcleaner.TagNode[] getElementsByName(java.lang.String, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;
        org.htmlcleaner.TagNode[] $r2;
        org.htmlcleaner.conditional.TagNodeNameCondition $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r3 = new org.htmlcleaner.conditional.TagNodeNameCondition;

        specialinvoke $r3.<org.htmlcleaner.conditional.TagNodeNameCondition: void <init>(java.lang.String)>($r1);

        $r2 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElements(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r3, $z0);

        return $r2;
    }
    public org.htmlcleaner.TagNode[] getElementsHavingAttribute(java.lang.String, boolean)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;
        org.htmlcleaner.TagNode[] $r2;
        org.htmlcleaner.conditional.TagNodeAttExistsCondition $r3;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r3 = new org.htmlcleaner.conditional.TagNodeAttExistsCondition;

        specialinvoke $r3.<org.htmlcleaner.conditional.TagNodeAttExistsCondition: void <init>(java.lang.String)>($r1);

        $r2 = specialinvoke r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElements(org.htmlcleaner.conditional.ITagNodeCondition,boolean)>($r3, $z0);

        return $r2;
    }
    java.util.List getItemsToMove()
    {
        org.htmlcleaner.TagNode r0;
        java.util.List r1;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = r0.<org.htmlcleaner.TagNode: java.util.List itemsToMove>;

        return r1;
    }
    public java.lang.String getName()
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 = r0.<org.htmlcleaner.TagNode: boolean isForeignMarkup>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.htmlcleaner.TagNode: java.lang.String name>;

        return $r1;

     label1:
        $r1 = r0.<org.htmlcleaner.TagNode: java.lang.String name>;

        if $r1 != null goto label2;

        return null;

     label2:
        $r1 = r0.<org.htmlcleaner.TagNode: java.lang.String name>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        return $r1;
    }
    public java.util.Map getNamespaceDeclarations()
    {
        org.htmlcleaner.TagNode r0;
        java.util.Map r1;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = r0.<org.htmlcleaner.TagNode: java.util.Map nsDeclarations>;

        return r1;
    }
    java.lang.String getNamespaceURIOnPath(java.lang.String)
    {
        org.htmlcleaner.TagNode r0, $r9;
        java.lang.String $r1, r7, $r8;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map nsDeclarations>;

        if $r2 == null goto label3;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map nsDeclarations>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r5;

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r8 = "";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        if $r1 != null goto label1;

     label2:
        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1 = (java.lang.String) $r5;

        return $r1;

     label3:
        $r9 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        if $r9 == null goto label4;

        r0 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        $r1 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.lang.String getNamespaceURIOnPath(java.lang.String)>($r1);

        return $r1;

     label4:
        return null;
    }
    public org.htmlcleaner.TagNode getParent()
    {
        org.htmlcleaner.TagNode r0;

        r0 := @this: org.htmlcleaner.TagNode;

        r0 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        return r0;
    }
    public java.lang.CharSequence getText()
    {
        org.htmlcleaner.TagNode r0;
        java.lang.StringBuilder r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.htmlcleaner.ContentNode r5;
        java.lang.String $r6;
        java.lang.CharSequence $r7;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.htmlcleaner.ContentNode;

        if $z0 == 0 goto label2;

        r5 = (org.htmlcleaner.ContentNode) $r4;

        $r6 = virtualinvoke r5.<org.htmlcleaner.ContentNode: java.lang.String getContent()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label1;

     label2:
        $z0 = $r4 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label1;

        r0 = (org.htmlcleaner.TagNode) $r4;

        $r7 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r7);

        goto label1;

     label3:
        return r1;
    }
    public boolean hasAttribute(java.lang.String)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1, r6;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z0 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }
    public boolean hasChildren()
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;
        java.util.List $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void insertChild(int, org.htmlcleaner.HtmlNode)
    {
        org.htmlcleaner.TagNode r0;
        int $i0;
        org.htmlcleaner.HtmlNode $r1;
        java.util.List $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.htmlcleaner.HtmlNode;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        return;
    }
    public void insertChildAfter(org.htmlcleaner.HtmlNode, org.htmlcleaner.HtmlNode)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.HtmlNode $r1, $r2;
        int $i0;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.HtmlNode;

        $r2 := @parameter1: org.htmlcleaner.HtmlNode;

        $i0 = virtualinvoke r0.<org.htmlcleaner.TagNode: int getChildIndex(org.htmlcleaner.HtmlNode)>($r1);

        if $i0 < 0 goto label1;

        $i0 = $i0 + 1;

        virtualinvoke r0.<org.htmlcleaner.TagNode: void insertChild(int,org.htmlcleaner.HtmlNode)>($i0, $r2);

     label1:
        return;
    }
    public void insertChildBefore(org.htmlcleaner.HtmlNode, org.htmlcleaner.HtmlNode)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.HtmlNode $r1, $r2;
        int $i0;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.HtmlNode;

        $r2 := @parameter1: org.htmlcleaner.HtmlNode;

        $i0 = virtualinvoke r0.<org.htmlcleaner.TagNode: int getChildIndex(org.htmlcleaner.HtmlNode)>($r1);

        if $i0 < 0 goto label1;

        virtualinvoke r0.<org.htmlcleaner.TagNode: void insertChild(int,org.htmlcleaner.HtmlNode)>($i0, $r2);

     label1:
        return;
    }
    public boolean isAutoGenerated()
    {
        org.htmlcleaner.TagNode r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagNode;

        z0 = r0.<org.htmlcleaner.TagNode: boolean autoGenerated>;

        return z0;
    }
    public boolean isCopy()
    {
        org.htmlcleaner.TagNode r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagNode;

        z0 = r0.<org.htmlcleaner.TagNode: boolean isCopy>;

        return z0;
    }
    public boolean isEmpty()
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.htmlcleaner.ContentNode r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 = virtualinvoke r0.<org.htmlcleaner.TagNode: boolean isPruned()>();

        if $z0 != 0 goto label4;

        $r1 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r3 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label2;

        r0 = (org.htmlcleaner.TagNode) $r3;

        $z0 = virtualinvoke r0.<org.htmlcleaner.TagNode: boolean isPruned()>();

        if $z0 != 0 goto label1;

        return 0;

     label2:
        $z0 = $r3 instanceof org.htmlcleaner.ContentNode;

        if $z0 == 0 goto label3;

        r4 = (org.htmlcleaner.ContentNode) $r3;

        $z0 = virtualinvoke r4.<org.htmlcleaner.ContentNode: boolean isBlank()>();

        if $z0 != 0 goto label1;

        return 0;

     label3:
        $z0 = $r3 instanceof org.htmlcleaner.CommentNode;

        if $z0 == 0 goto label5;

        return 0;

     label4:
        return 1;

     label5:
        return 0;
    }
    public boolean isForeignMarkup()
    {
        org.htmlcleaner.TagNode r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagNode;

        z0 = r0.<org.htmlcleaner.TagNode: boolean isForeignMarkup>;

        return z0;
    }
    boolean isFormed()
    {
        org.htmlcleaner.TagNode r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagNode;

        z0 = r0.<org.htmlcleaner.TagNode: boolean isFormed>;

        return z0;
    }
    public boolean isPruned()
    {
        org.htmlcleaner.TagNode r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagNode;

        z0 = r0.<org.htmlcleaner.TagNode: boolean pruned>;

        return z0;
    }
    public boolean isTrimAttributeValues()
    {
        org.htmlcleaner.TagNode r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagNode;

        z0 = r0.<org.htmlcleaner.TagNode: boolean isTrimAttributeValues>;

        return z0;
    }
    public org.htmlcleaner.TagNode makeCopy()
    {
        org.htmlcleaner.TagNode r0, r1;
        java.lang.String $r2;
        java.util.Map $r3, $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 = new org.htmlcleaner.TagNode;

        $r2 = r0.<org.htmlcleaner.TagNode: java.lang.String name>;

        specialinvoke r1.<org.htmlcleaner.TagNode: void <init>(java.lang.String,boolean)>($r2, 1);

        $r3 = r1.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        $r4 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4);

        return r1;
    }
    public void removeAllChildren()
    {
        org.htmlcleaner.TagNode r0;
        java.util.List $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }
    public void removeAttribute(java.lang.String)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        java.util.Map $r4;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = "";

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label1:
        return;
    }
    public boolean removeChild(java.lang.Object)
    {
        org.htmlcleaner.TagNode r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.List $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean removeFromTree()
    {
        org.htmlcleaner.TagNode r0, $r1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        if $r1 == null goto label1;

        $r1 = r0.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode parent>;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean removeChild(java.lang.Object)>(r0);

        return $z0;

     label1:
        return 0;
    }
    public void serialize(org.htmlcleaner.Serializer, java.io.Writer) throws java.io.IOException
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.Serializer $r1;
        java.io.Writer $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.Serializer;

        $r2 := @parameter1: java.io.Writer;

        virtualinvoke $r1.<org.htmlcleaner.Serializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>(r0, $r2);

        return;
    }
    public void setAttributes(java.util.Map)
    {
        org.htmlcleaner.TagNode r0;
        java.util.Map r1, $r10;
        java.util.LinkedHashMap r2;
        boolean $z0;
        java.util.Set $r3;
        java.util.Iterator $r4, $r11;
        java.lang.Object $r5;
        java.lang.String r6, r8, r9, r12;
        java.lang.Thread $r7;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 := @parameter0: java.util.Map;

        $z0 = r0.<org.htmlcleaner.TagNode: boolean foreignMarkupFlagSet>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.htmlcleaner.TagNode: void replaceAttributes(java.util.Map)>(r1);

        return;

     label1:
        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r7.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.htmlcleaner.TagNode: void handleInterruption()>();

        return;

     label3:
        r8 = r6;

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r9 = (java.lang.String) $r5;

        $z0 = r0.<org.htmlcleaner.TagNode: boolean foreignMarkupFlagSet>;

        if $z0 != 0 goto label5;

        $r10 = r0.<org.htmlcleaner.TagNode: java.util.Map attributes>;

        $r3 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $r11 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r5;

        $z0 = virtualinvoke r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z0 == 0 goto label4;

        r8 = r12;

        goto label4;

     label5:
        virtualinvoke r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9);

        goto label2;

     label6:
        specialinvoke r0.<org.htmlcleaner.TagNode: void replaceAttributes(java.util.Map)>(r2);

        return;
    }
    public void setAutoGenerated(boolean)
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagNode: boolean autoGenerated> = $z0;

        return;
    }
    public void setChildren(java.util.List)
    {
        org.htmlcleaner.TagNode r0;
        java.util.List r1, $r2;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r2 = r0.<org.htmlcleaner.TagNode: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }
    public void setDocType(org.htmlcleaner.DoctypeToken)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.DoctypeToken $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.DoctypeToken;

        r0.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken docType> = $r1;

        return;
    }
    public void setForeignMarkup(boolean)
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;
        java.util.Map $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagNode: boolean foreignMarkupFlagSet> = 1;

        r0.<org.htmlcleaner.TagNode: boolean isForeignMarkup> = $z0;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.htmlcleaner.TagNode: java.util.Map getAttributesInLowerCase()>();

        specialinvoke r0.<org.htmlcleaner.TagNode: void replaceAttributes(java.util.Map)>($r1);

     label1:
        return;
    }
    void setFormed()
    {
        org.htmlcleaner.TagNode r0;

        r0 := @this: org.htmlcleaner.TagNode;

        virtualinvoke r0.<org.htmlcleaner.TagNode: void setFormed(boolean)>(1);

        return;
    }
    void setFormed(boolean)
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagNode: boolean isFormed> = $z0;

        return;
    }
    void setItemsToMove(java.util.List)
    {
        org.htmlcleaner.TagNode r0;
        java.util.List r1;

        r0 := @this: org.htmlcleaner.TagNode;

        r1 := @parameter0: java.util.List;

        r0.<org.htmlcleaner.TagNode: java.util.List itemsToMove> = r1;

        return;
    }
    public void setPruned(boolean)
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagNode: boolean pruned> = $z0;

        return;
    }
    public void setTrimAttributeValues(boolean)
    {
        org.htmlcleaner.TagNode r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagNode;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagNode: boolean isTrimAttributeValues> = $z0;

        return;
    }
    public void traverse(org.htmlcleaner.TagNodeVisitor)
    {
        org.htmlcleaner.TagNode r0;
        org.htmlcleaner.TagNodeVisitor $r1;

        r0 := @this: org.htmlcleaner.TagNode;

        $r1 := @parameter0: org.htmlcleaner.TagNodeVisitor;

        specialinvoke r0.<org.htmlcleaner.TagNode: boolean traverseInternally(org.htmlcleaner.TagNodeVisitor)>($r1);

        return;
    }
