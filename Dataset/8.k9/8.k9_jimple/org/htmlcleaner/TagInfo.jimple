org.htmlcleaner.TagInfo extends java.lang.Object
private org.htmlcleaner.BelongsTo belongsTo
private java.util.Set childTags
private org.htmlcleaner.CloseTag closeTag
private org.htmlcleaner.ContentType contentType
private java.util.Set continueAfterTags
private java.util.Set copyTags
private boolean deprecated
private org.htmlcleaner.Display display
private java.util.Set fatalTags
private java.util.Set higherTags
private boolean ignorePermitted
private java.util.Set mustCloseTags
private java.lang.String name
private java.util.Set permittedTags
private java.util.Set requiredParentTags
private boolean unique
    public void <init>(java.lang.String, org.htmlcleaner.ContentType, org.htmlcleaner.BelongsTo, boolean, boolean, boolean, org.htmlcleaner.CloseTag, org.htmlcleaner.Display)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        org.htmlcleaner.ContentType $r2;
        org.htmlcleaner.BelongsTo $r3, $r7;
        boolean $z0, $z1, $z2;
        org.htmlcleaner.CloseTag $r4;
        org.htmlcleaner.Display $r5;
        java.util.HashSet $r6;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.htmlcleaner.ContentType;

        $r3 := @parameter2: org.htmlcleaner.BelongsTo;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $z2 := @parameter5: boolean;

        $r4 := @parameter6: org.htmlcleaner.CloseTag;

        $r5 := @parameter7: org.htmlcleaner.Display;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set mustCloseTags> = $r6;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set higherTags> = $r6;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set childTags> = $r6;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set permittedTags> = $r6;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set copyTags> = $r6;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set continueAfterTags> = $r6;

        $r7 = <org.htmlcleaner.BelongsTo: org.htmlcleaner.BelongsTo BODY>;

        r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.BelongsTo belongsTo> = $r7;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set requiredParentTags> = $r6;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.TagInfo: java.util.Set fatalTags> = $r6;

        r0.<org.htmlcleaner.TagInfo: java.lang.String name> = $r1;

        r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType> = $r2;

        r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.BelongsTo belongsTo> = $r3;

        r0.<org.htmlcleaner.TagInfo: boolean deprecated> = $z0;

        r0.<org.htmlcleaner.TagInfo: boolean unique> = $z1;

        r0.<org.htmlcleaner.TagInfo: boolean ignorePermitted> = $z2;

        r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.CloseTag closeTag> = $r4;

        r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.Display display> = $r5;

        return;
    }
    boolean allowsAnything()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.ContentType $r1, $r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r2 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType all>;

        $r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType>;

        if $r2 != $r1 goto label1;

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set childTags>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean allowsBody()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.ContentType $r1, $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r2 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType none>;

        $r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean allowsItem(org.htmlcleaner.BaseToken)
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.BaseToken r1;
        org.htmlcleaner.ContentType $r2, $r3;
        boolean $z0;
        org.htmlcleaner.TagToken r4;
        java.lang.String $r5, $r6;
        int[] $r7;
        int $i0;
        java.util.Set $r8;
        org.htmlcleaner.ContentNode r9;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 := @parameter0: org.htmlcleaner.BaseToken;

        $r2 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType>;

        $r3 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType none>;

        if $r2 == $r3 goto label1;

        $z0 = r1 instanceof org.htmlcleaner.TagToken;

        if $z0 == 0 goto label1;

        r4 = (org.htmlcleaner.TagToken) r1;

        $r5 = virtualinvoke r4.<org.htmlcleaner.TagToken: java.lang.String getName()>();

        $r6 = "script";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r7 = <org.htmlcleaner.TagInfo$1: int[] $SwitchMap$org$htmlcleaner$ContentType>;

        $r2 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType>;

        $i0 = virtualinvoke $r2.<org.htmlcleaner.ContentType: int ordinal()>();

        $i0 = $r7[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        $r8 = r0.<org.htmlcleaner.TagInfo: java.util.Set childTags>;

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $z0 = r1 instanceof org.htmlcleaner.TagToken;

        if $z0 == 0 goto label8;

        $r8 = r0.<org.htmlcleaner.TagInfo: java.util.Set childTags>;

        r4 = (org.htmlcleaner.TagToken) r1;

        $r5 = virtualinvoke r4.<org.htmlcleaner.TagToken: java.lang.String getName()>();

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        return $z0;

     label4:
        $r8 = r0.<org.htmlcleaner.TagInfo: java.util.Set permittedTags>;

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        $z0 = r1 instanceof org.htmlcleaner.TagToken;

        if $z0 == 0 goto label8;

        $r8 = r0.<org.htmlcleaner.TagInfo: java.util.Set permittedTags>;

        r4 = (org.htmlcleaner.TagToken) r1;

        $r5 = virtualinvoke r4.<org.htmlcleaner.TagToken: java.lang.String getName()>();

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label8;

        return 0;

     label5:
        $z0 = r1 instanceof org.htmlcleaner.TagToken;

        if $z0 == 0 goto label8;

        return 0;

     label6:
        $z0 = r1 instanceof org.htmlcleaner.ContentNode;

        if $z0 == 0 goto label7;

        r9 = (org.htmlcleaner.ContentNode) r1;

        $z0 = virtualinvoke r9.<org.htmlcleaner.ContentNode: boolean isBlank()>();

        return $z0;

     label7:
        $z0 = r1 instanceof org.htmlcleaner.TagToken;

        if $z0 != 0 goto label2;

     label8:
        return 1;
    }
    public void defineAllowedChildrenTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set childTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public void defineCloseBeforeCopyInsideTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set copyTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set mustCloseTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public void defineCloseBeforeTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set mustCloseTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public void defineCloseInsideCopyAfterTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set continueAfterTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public void defineFatalTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set fatalTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set higherTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public void defineForbiddenTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set permittedTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public void defineHigherLevelTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set higherTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public void defineRequiredEnclosingTags(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.StringTokenizer r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.StringTokenizer;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set requiredParentTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<org.htmlcleaner.TagInfo: java.util.Set higherTags>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }
    public org.htmlcleaner.BelongsTo getBelongsTo()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.BelongsTo r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.BelongsTo belongsTo>;

        return r1;
    }
    public java.util.Set getChildTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set childTags>;

        return r1;
    }
    public org.htmlcleaner.ContentType getContentType()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.ContentType r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType>;

        return r1;
    }
    public java.util.Set getContinueAfterTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set continueAfterTags>;

        return r1;
    }
    public java.util.Set getCopyTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set copyTags>;

        return r1;
    }
    public org.htmlcleaner.Display getDisplay()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.Display r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.Display display>;

        return r1;
    }
    public java.util.Set getFatalTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set fatalTags>;

        return r1;
    }
    public java.util.Set getHigherTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set higherTags>;

        return r1;
    }
    public java.util.Set getMustCloseTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set mustCloseTags>;

        return r1;
    }
    public java.lang.String getName()
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.lang.String name>;

        return r1;
    }
    public java.util.Set getPermittedTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set permittedTags>;

        return r1;
    }
    public java.util.Set getRequiredParentTags()
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set requiredParentTags>;

        return r1;
    }
    boolean hasCopyTags()
    {
        org.htmlcleaner.TagInfo r0;
        boolean $z0;
        java.util.Set $r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set copyTags>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean hasPermittedTags()
    {
        org.htmlcleaner.TagInfo r0;
        boolean $z0;
        java.util.Set $r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 = r0.<org.htmlcleaner.TagInfo: java.util.Set permittedTags>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean isContinueAfter(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.TagInfo: java.util.Set continueAfterTags>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    boolean isCopy(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.TagInfo: java.util.Set copyTags>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean isDeprecated()
    {
        org.htmlcleaner.TagInfo r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagInfo;

        z0 = r0.<org.htmlcleaner.TagInfo: boolean deprecated>;

        return z0;
    }
    public boolean isEmptyTag()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.ContentType $r1, $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r2 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType none>;

        $r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isFatalTag(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1, r5;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.TagInfo: java.util.Set fatalTags>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    boolean isHeadAndBodyTag()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.BelongsTo $r1, $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.BelongsTo belongsTo>;

        $r2 = <org.htmlcleaner.BelongsTo: org.htmlcleaner.BelongsTo HEAD>;

        if $r1 == $r2 goto label1;

        $r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.BelongsTo belongsTo>;

        $r2 = <org.htmlcleaner.BelongsTo: org.htmlcleaner.BelongsTo HEAD_AND_BODY>;

        if $r1 != $r2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    boolean isHeadTag()
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.BelongsTo $r1, $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r2 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.BelongsTo belongsTo>;

        $r1 = <org.htmlcleaner.BelongsTo: org.htmlcleaner.BelongsTo HEAD>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean isHigher(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.TagInfo: java.util.Set higherTags>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean isIgnorePermitted()
    {
        org.htmlcleaner.TagInfo r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagInfo;

        z0 = r0.<org.htmlcleaner.TagInfo: boolean ignorePermitted>;

        return z0;
    }
    public boolean isMinimizedTagPermitted()
    {
        org.htmlcleaner.TagInfo r0;
        boolean $z0;
        org.htmlcleaner.CloseTag $r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 = r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.CloseTag closeTag>;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.CloseTag: boolean isMinimizedTagPermitted()>();

        return $z0;
    }
    boolean isMustCloseTag(org.htmlcleaner.TagInfo)
    {
        org.htmlcleaner.TagInfo r0, $r1;
        java.util.Set $r2;
        java.lang.String $r3;
        boolean $z0;
        org.htmlcleaner.ContentType $r4, $r5;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: org.htmlcleaner.TagInfo;

        if $r1 == null goto label2;

        $r2 = r0.<org.htmlcleaner.TagInfo: java.util.Set mustCloseTags>;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: java.lang.String getName()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = $r1.<org.htmlcleaner.TagInfo: org.htmlcleaner.ContentType contentType>;

        $r5 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType text>;

        if $r4 != $r5 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isUnique()
    {
        org.htmlcleaner.TagInfo r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagInfo;

        z0 = r0.<org.htmlcleaner.TagInfo: boolean unique>;

        return z0;
    }
    public void setBelongsTo(org.htmlcleaner.BelongsTo)
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.BelongsTo $r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: org.htmlcleaner.BelongsTo;

        r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.BelongsTo belongsTo> = $r1;

        return;
    }
    public void setChildTags(java.util.Set)
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 := @parameter0: java.util.Set;

        r0.<org.htmlcleaner.TagInfo: java.util.Set childTags> = r1;

        return;
    }
    public void setContinueAfterTags(java.util.Set)
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 := @parameter0: java.util.Set;

        r0.<org.htmlcleaner.TagInfo: java.util.Set continueAfterTags> = r1;

        return;
    }
    public void setCopyTags(java.util.Set)
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 := @parameter0: java.util.Set;

        r0.<org.htmlcleaner.TagInfo: java.util.Set copyTags> = r1;

        return;
    }
    public void setDeprecated(boolean)
    {
        org.htmlcleaner.TagInfo r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagInfo;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagInfo: boolean deprecated> = $z0;

        return;
    }
    public void setDisplay(org.htmlcleaner.Display)
    {
        org.htmlcleaner.TagInfo r0;
        org.htmlcleaner.Display $r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: org.htmlcleaner.Display;

        r0.<org.htmlcleaner.TagInfo: org.htmlcleaner.Display display> = $r1;

        return;
    }
    public void setFatalTag(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.TagInfo: java.util.Set fatalTags>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void setHigherTags(java.util.Set)
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 := @parameter0: java.util.Set;

        r0.<org.htmlcleaner.TagInfo: java.util.Set higherTags> = r1;

        return;
    }
    public void setIgnorePermitted(boolean)
    {
        org.htmlcleaner.TagInfo r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagInfo;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagInfo: boolean ignorePermitted> = $z0;

        return;
    }
    public void setMustCloseTags(java.util.Set)
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 := @parameter0: java.util.Set;

        r0.<org.htmlcleaner.TagInfo: java.util.Set mustCloseTags> = r1;

        return;
    }
    public void setName(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.TagInfo: java.lang.String name> = $r1;

        return;
    }
    public void setPermittedTags(java.util.Set)
    {
        org.htmlcleaner.TagInfo r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.TagInfo;

        r1 := @parameter0: java.util.Set;

        r0.<org.htmlcleaner.TagInfo: java.util.Set permittedTags> = r1;

        return;
    }
    public void setRequiredParent(java.lang.String)
    {
        org.htmlcleaner.TagInfo r0;
        java.lang.String $r1;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.TagInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.TagInfo: java.util.Set requiredParentTags>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void setUnique(boolean)
    {
        org.htmlcleaner.TagInfo r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.TagInfo;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.TagInfo: boolean unique> = $z0;

        return;
    }
