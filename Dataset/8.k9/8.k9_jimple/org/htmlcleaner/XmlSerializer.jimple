org.htmlcleaner.XmlSerializer extends org.htmlcleaner.Serializer
public static final java.lang.String XMLNS_NAMESPACE
private boolean creatingHtmlDom
    protected void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<org.htmlcleaner.Serializer: void <init>(org.htmlcleaner.CleanerProperties)>($r1);

        return;
    }
    protected boolean dontEscape(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.CleanerProperties $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = r0.<org.htmlcleaner.XmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: boolean isUseCdataFor(java.lang.String)>($r3);

        return $z0;
    }
    protected java.lang.String escapeXml(java.lang.String)
    {
        org.htmlcleaner.XmlSerializer r0;
        java.lang.String $r1;
        org.htmlcleaner.CleanerProperties $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.XmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean isCreatingHtmlDom()>();

        $r1 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>($r1, $r2, $z0);

        return $r1;
    }
    public java.lang.String getXmlAsString(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = specialinvoke r0.<org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode)>($r1);

        return $r2;
    }
    public java.lang.String getXmlAsString(org.htmlcleaner.TagNode, java.lang.String)
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,java.lang.String)>($r1, $r2);

        return $r2;
    }
    public boolean isCreatingHtmlDom()
    {
        org.htmlcleaner.XmlSerializer r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        z0 = r0.<org.htmlcleaner.XmlSerializer: boolean creatingHtmlDom>;

        return z0;
    }
    protected boolean isForbiddenAttribute(org.htmlcleaner.TagNode, java.lang.String, java.lang.String)
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2, $r3;
        org.htmlcleaner.CleanerProperties $r4;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.htmlcleaner.XmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke $r4.<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>();

        if $z0 != 0 goto label2;

        $r3 = "xmlns";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    protected boolean isForbiddenTag(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        if $r2 != null goto label1;

        return 1;

     label1:
        return 0;
    }
    protected boolean isHeadOrBody(java.lang.String)
    {
        org.htmlcleaner.XmlSerializer r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: java.lang.String;

        $r2 = "head";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "body";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    protected boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.CleanerProperties $r2;
        org.htmlcleaner.ITagInfoProvider $r3;
        java.lang.String $r4;
        org.htmlcleaner.TagInfo $r5;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = r0.<org.htmlcleaner.XmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $r3 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>();

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r5 = interfaceinvoke $r3.<org.htmlcleaner.ITagInfoProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>($r4);

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        if $r5 == null goto label1;

        $z0 = virtualinvoke $r5.<org.htmlcleaner.TagInfo: boolean isMinimizedTagPermitted()>();

        if $z0 == 0 goto label3;

     label1:
        $r2 = r0.<org.htmlcleaner.XmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: boolean isUseEmptyElementTags()>();

        if $z0 != 0 goto label2;

        if $r5 == null goto label3;

        $z0 = virtualinvoke $r5.<org.htmlcleaner.TagInfo: boolean isEmptyTag()>();

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    protected void serializeAttribute(org.htmlcleaner.TagNode, java.io.Writer, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean isForbiddenAttribute(org.htmlcleaner.TagNode,java.lang.String,java.lang.String)>($r1, $r3, $r4);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r3 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

     label1:
        return;
    }
    protected void serializeCData(org.htmlcleaner.CData, org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.CData $r1;
        org.htmlcleaner.TagNode $r2;
        java.io.Writer $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.CData;

        $r2 := @parameter1: org.htmlcleaner.TagNode;

        $r3 := @parameter2: java.io.Writer;

        $z0 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>($r2);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r1.<org.htmlcleaner.CData: java.lang.String getContentWithoutStartAndEndTokens()>();

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r4);

        return;

     label1:
        $r4 = virtualinvoke $r1.<org.htmlcleaner.CData: java.lang.String getContentWithStartAndEndTokens()>();

        $r4 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>($r4);

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r4);

        return;
    }
    protected void serializeContentToken(org.htmlcleaner.ContentNode, org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.ContentNode $r1;
        org.htmlcleaner.TagNode $r2;
        java.io.Writer $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.ContentNode;

        $r2 := @parameter1: org.htmlcleaner.TagNode;

        $r3 := @parameter2: java.io.Writer;

        $z0 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>($r2);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r1.<org.htmlcleaner.ContentNode: java.lang.String getContent()>();

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r4);

        return;

     label1:
        $r4 = virtualinvoke $r1.<org.htmlcleaner.ContentNode: java.lang.String getContent()>();

        $r4 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>($r4);

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r4);

        return;
    }
    protected void serializeEndTag(org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>($r1, $r2, 1);

        return;
    }
    protected void serializeEndTag(org.htmlcleaner.TagNode, java.io.Writer, boolean) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r5, $r6;
        java.lang.CharSequence $r4;
        int $i0;
        char $c1;
        java.lang.StringBuilder $r7;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean isForbiddenTag(org.htmlcleaner.TagNode)>($r1);

        if $z1 != 0 goto label3;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $z1 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>($r1);

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("/*]]>*/");

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r6 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i0);

        if $c1 == 10 goto label1;

        if $c1 == 13 goto label1;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

     label1:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("/*]]>*/");

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

     label3:
        return;
    }
    protected void serializeOpenTag(org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>($r1, $r2, 1);

        return;
    }
    protected void serializeOpenTag(org.htmlcleaner.TagNode, java.io.Writer, boolean) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        boolean $z0, $z1;
        java.lang.String $r3, r11;
        java.util.Map $r4;
        org.htmlcleaner.CleanerProperties $r5;
        java.lang.StringBuilder $r6;
        java.util.Set $r7;
        java.util.Iterator $r8;
        java.lang.Object $r9;
        java.util.Map$Entry r10;
        java.lang.CharSequence $r12;
        char $c0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean isForbiddenTag(org.htmlcleaner.TagNode)>($r1);

        if $z1 != 0 goto label6;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r5 = r0.<org.htmlcleaner.XmlSerializer: org.htmlcleaner.CleanerProperties props>;

        $z1 = virtualinvoke $r5.<org.htmlcleaner.CleanerProperties: boolean isAddNewlineToHeadAndBody()>();

        if $z1 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean isHeadOrBody(java.lang.String)>($r3);

        if $z1 == 0 goto label1;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        $r7 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r9 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r9;

        $r9 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (java.lang.String) $r9;

        virtualinvoke r0.<org.htmlcleaner.XmlSerializer: void serializeAttribute(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String,java.lang.String)>($r1, $r2, $r3, r11);

        goto label2;

     label3:
        $z1 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>($r1);

        if $z1 == 0 goto label4;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(" />");

        if $z0 == 0 goto label6;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

        return;

     label4:
        $z0 = virtualinvoke r0.<org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>($r1);

        if $z0 == 0 goto label5;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(">");

        $r12 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r3 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("/*<![CDATA[*/");

        if $z0 != 0 goto label6;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("/*<![CDATA[*/");

        $r12 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r3 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label6;

        $r12 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r3 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

        $c0 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        if $c0 == 10 goto label6;

        if $c0 == 13 goto label6;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

        return;

     label5:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(">");

     label6:
        return;
    }
    public void setCreatingHtmlDom(boolean)
    {
        org.htmlcleaner.XmlSerializer r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.XmlSerializer: boolean creatingHtmlDom> = $z0;

        return;
    }
    public void writeXml(org.htmlcleaner.TagNode, java.io.Writer, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        java.lang.String $r3;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.Serializer: void write(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>($r1, $r2, $r3);

        return;
    }
    public void writeXmlToFile(org.htmlcleaner.TagNode, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String)>($r1, $r2);

        return;
    }
    public void writeXmlToFile(org.htmlcleaner.TagNode, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        return;
    }
    public void writeXmlToStream(org.htmlcleaner.TagNode, java.io.OutputStream) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.OutputStream $r2;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream)>($r1, $r2);

        return;
    }
    public void writeXmlToStream(org.htmlcleaner.TagNode, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.XmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.OutputStream $r2;
        java.lang.String $r3;

        r0 := @this: org.htmlcleaner.XmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r1, $r2, $r3);

        return;
    }
