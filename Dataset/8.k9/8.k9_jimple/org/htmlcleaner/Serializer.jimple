org.htmlcleaner.Serializer extends java.lang.Object
protected org.htmlcleaner.CleanerProperties props
    protected void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props> = $r1;

        return;
    }
    public java.lang.String getAsString(java.lang.String)
    {
        org.htmlcleaner.Serializer r0;
        java.lang.String $r1;
        org.htmlcleaner.HtmlCleaner r2;
        org.htmlcleaner.CleanerProperties $r3;
        org.htmlcleaner.TagNode $r4;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.htmlcleaner.HtmlCleaner;

        $r3 = r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props>;

        specialinvoke r2.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.CleanerProperties)>($r3);

        $r4 = virtualinvoke r2.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.lang.String)>($r1);

        $r3 = r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props>;

        $r1 = virtualinvoke $r3.<org.htmlcleaner.CleanerProperties: java.lang.String getCharset()>();

        $r1 = virtualinvoke r0.<org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,java.lang.String)>($r4, $r1);

        return $r1;
    }
    public java.lang.String getAsString(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = virtualinvoke r0.<org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,boolean)>($r1, 0);

        return $r2;
    }
    public java.lang.String getAsString(org.htmlcleaner.TagNode, java.lang.String)
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,java.lang.String,boolean)>($r1, $r2, 0);

        return $r2;
    }
    public java.lang.String getAsString(org.htmlcleaner.TagNode, java.lang.String, boolean)
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;
        boolean $z0;
        java.io.IOException r3;
        java.io.StringWriter r4;
        java.lang.StringBuffer $r5;
        org.htmlcleaner.HtmlCleanerException $r6;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        r4 = new java.io.StringWriter;

        specialinvoke r4.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.htmlcleaner.Serializer: void write(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String,boolean)>($r1, r4, $r2, $z0);

     label2:
        $r5 = virtualinvoke r4.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label3:
        r3 := @caughtexception;

        $r6 = new org.htmlcleaner.HtmlCleanerException;

        specialinvoke $r6.<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public java.lang.String getAsString(org.htmlcleaner.TagNode, boolean)
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        boolean $z0;
        org.htmlcleaner.CleanerProperties $r2;
        java.lang.String $r3;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props>;

        $r3 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: java.lang.String getCharset()>();

        $r3 = virtualinvoke r0.<org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,java.lang.String,boolean)>($r1, $r3, $z0);

        return $r3;
    }
    protected boolean isScriptOrStyle(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r3 = "script";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r3 = "style";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
protected abstract void serialize(org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException { 
// no body
} 
    public void write(org.htmlcleaner.TagNode, java.io.Writer, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        java.lang.String $r3;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.htmlcleaner.Serializer: void write(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String,boolean)>($r1, $r2, $r3, 0);

        return;
    }
    public void write(org.htmlcleaner.TagNode, java.io.Writer, java.lang.String, boolean) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        java.io.Writer $r1;
        java.lang.String $r2, r7;
        boolean $z0;
        org.htmlcleaner.Serializer$HeadlessTagNode r3;
        java.io.BufferedWriter r4;
        org.htmlcleaner.TagNode r5;
        org.htmlcleaner.CleanerProperties $r6;
        java.lang.StringBuilder $r8;
        org.htmlcleaner.DoctypeToken $r9;

        r0 := @this: org.htmlcleaner.Serializer;

        r5 := @parameter0: org.htmlcleaner.TagNode;

        $r1 := @parameter1: java.io.Writer;

        $r2 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        if $z0 == 0 goto label1;

        r3 = new org.htmlcleaner.Serializer$HeadlessTagNode;

        specialinvoke r3.<org.htmlcleaner.Serializer$HeadlessTagNode: void <init>(org.htmlcleaner.Serializer,org.htmlcleaner.TagNode,org.htmlcleaner.Serializer$1)>(r0, r5, null);

        r5 = r3;

     label1:
        r4 = new java.io.BufferedWriter;

        specialinvoke r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        $r6 = r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke $r6.<org.htmlcleaner.CleanerProperties: boolean isOmitXmlDeclaration()>();

        if $z0 != 0 goto label3;

        r7 = "<?xml version=\"1.0\"";

        if $r2 == null goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=\"1.0\"");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encoding=\"");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?>");

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>($r2);

     label3:
        $r6 = r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke $r6.<org.htmlcleaner.CleanerProperties: boolean isOmitDoctypeDeclaration()>();

        if $z0 != 0 goto label4;

        $r9 = virtualinvoke r5.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>();

        if $r9 == null goto label4;

        virtualinvoke $r9.<org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.Serializer,java.io.Writer)>(r0, r4);

     label4:
        virtualinvoke r0.<org.htmlcleaner.Serializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>(r5, r4);

        virtualinvoke r4.<java.io.Writer: void flush()>();

        virtualinvoke r4.<java.io.Writer: void close()>();

        return;
    }
    public void writeToFile(org.htmlcleaner.TagNode, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String,boolean)>($r1, $r2, 0);

        return;
    }
    public void writeToFile(org.htmlcleaner.TagNode, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String,java.lang.String,boolean)>($r1, $r2, $r3, 0);

        return;
    }
    public void writeToFile(org.htmlcleaner.TagNode, java.lang.String, java.lang.String, boolean) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.io.FileOutputStream $r4;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.lang.String)>($r2);

        virtualinvoke r0.<org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String,boolean)>($r1, $r4, $r3, $z0);

        return;
    }
    public void writeToFile(org.htmlcleaner.TagNode, java.lang.String, boolean) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        org.htmlcleaner.CleanerProperties $r4;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r4 = r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props>;

        $r3 = virtualinvoke $r4.<org.htmlcleaner.CleanerProperties: java.lang.String getCharset()>();

        virtualinvoke r0.<org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String,java.lang.String,boolean)>($r1, $r2, $r3, $z0);

        return;
    }
    public void writeToStream(org.htmlcleaner.TagNode, java.io.OutputStream) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.OutputStream $r2;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.OutputStream;

        virtualinvoke r0.<org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,boolean)>($r1, $r2, 0);

        return;
    }
    public void writeToStream(org.htmlcleaner.TagNode, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.OutputStream $r2;
        java.lang.String $r3;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String,boolean)>($r1, $r2, $r3, 0);

        return;
    }
    public void writeToStream(org.htmlcleaner.TagNode, java.io.OutputStream, java.lang.String, boolean) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.OutputStream $r2;
        java.lang.String $r3;
        boolean $z0;
        java.io.OutputStreamWriter $r4;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $r4 = new java.io.OutputStreamWriter;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r2, $r3);

        virtualinvoke r0.<org.htmlcleaner.Serializer: void write(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String,boolean)>($r1, $r4, $r3, $z0);

        return;
    }
    public void writeToStream(org.htmlcleaner.TagNode, java.io.OutputStream, boolean) throws java.io.IOException
    {
        org.htmlcleaner.Serializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.OutputStream $r2;
        boolean $z0;
        java.lang.String $r3;
        org.htmlcleaner.CleanerProperties $r4;

        r0 := @this: org.htmlcleaner.Serializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.OutputStream;

        $z0 := @parameter2: boolean;

        $r4 = r0.<org.htmlcleaner.Serializer: org.htmlcleaner.CleanerProperties props>;

        $r3 = virtualinvoke $r4.<org.htmlcleaner.CleanerProperties: java.lang.String getCharset()>();

        virtualinvoke r0.<org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String,boolean)>($r1, $r2, $r3, $z0);

        return;
    }
