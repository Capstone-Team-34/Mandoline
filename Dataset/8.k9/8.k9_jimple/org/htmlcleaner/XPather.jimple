org.htmlcleaner.XPather extends java.lang.Object
private static final int C0
private static final int C9
private static final int CD
private static final int CM
private static final int CP
private static final int CS
private java.lang.String[] tokenArray
    public void <init>(java.lang.String)
    {
        org.htmlcleaner.XPather r0;
        java.lang.String $r1;
        int i0, i1;
        java.util.StringTokenizer r2;
        java.lang.String[] $r3;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = new java.util.StringTokenizer;

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>($r1, "/()[]\"\'=<>", 1);

        i0 = virtualinvoke r2.<java.util.StringTokenizer: int countTokens()>();

        $r3 = newarray (java.lang.String)[i0];

        r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray> = $r3;

        i1 = 0;

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r1 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private java.util.Collection evaluateAgainst(java.util.Collection, int, int, boolean, int, int, boolean, java.util.Collection) throws org.htmlcleaner.XPatherException
    {
        org.htmlcleaner.XPather r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;
        java.util.Collection $r1, r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5;
        org.htmlcleaner.XPatherException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Boolean $r8;
        java.lang.Integer $r9;
        java.lang.Double $r10;

        r0 := @this: org.htmlcleaner.XPather;

        r2 := @parameter0: java.util.Collection;

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $z1 := @parameter6: boolean;

        $r1 := @parameter7: java.util.Collection;

        if $i3 < 0 goto label22;

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $i4 = lengthof $r3;

        if $i0 >= $i4 goto label22;

        if $i3 > $i0 goto label22;

        $r4 = "";

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r5 = $r3[$i3];

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label01;

        $i3 = $i3 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, $z0, $i1, $i2, $z1, $r1);

        return r2;

     label01:
        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("(", $i3);

        if $z2 == 0 goto label04;

        $i4 = specialinvoke r0.<org.htmlcleaner.XPather: int findClosingIndex(int,int)>($i3, $i0);

        if $i4 <= 0 goto label02;

        $i3 = $i3 + 1;

        $i5 = $i4 + -1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i5, 0, $i1, $i2, $z1, $r1);

        $i3 = $i4 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, 0, $i1, $i2, $z1, $r1);

        return r2;

     label02:
        specialinvoke r0.<org.htmlcleaner.XPather: void throwStandardException()>();

     label03:
        $r6 = new org.htmlcleaner.XPatherException;

        specialinvoke $r6.<org.htmlcleaner.XPatherException: void <init>()>();

        throw $r6;

     label04:
        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("[", $i3);

        if $z2 == 0 goto label06;

        $i4 = specialinvoke r0.<org.htmlcleaner.XPather: int findClosingIndex(int,int)>($i3, $i0);

        if $i4 <= 0 goto label05;

        if r2 == null goto label05;

        $i3 = $i3 + 1;

        $i5 = $i4 + -1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>(r2, $i3, $i5);

        $i3 = $i4 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, 0, $i1, $i2, $z1, $r1);

        return r2;

     label05:
        specialinvoke r0.<org.htmlcleaner.XPather: void throwStandardException()>();

        goto label03;

     label06:
        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("\"", $i3);

        if $z2 != 0 goto label07;

        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("\'", $i3);

        if $z2 == 0 goto label09;

     label07:
        $i4 = specialinvoke r0.<org.htmlcleaner.XPather: int findClosingIndex(int,int)>($i3, $i0);

        if $i4 <= $i3 goto label08;

        $i3 = $i3 + 1;

        $i5 = $i4 + -1;

        $r4 = specialinvoke r0.<org.htmlcleaner.XPather: java.lang.String flatten(int,int)>($i3, $i5);

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r4);

        $i3 = $i4 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, 0, $i1, $i2, $z1, $r1);

        return r2;

     label08:
        specialinvoke r0.<org.htmlcleaner.XPather: void throwStandardException()>();

        goto label03;

     label09:
        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("=", $i3);

        if $z2 != 0 goto label10;

        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("<", $i3);

        if $z2 != 0 goto label10;

        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>(">", $i3);

        if $z2 == 0 goto label14;

     label10:
        if $z1 == 0 goto label14;

        $i4 = $i3 + 1;

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("=", $i4);

        if $z0 == 0 goto label13;

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("<", $i3);

        if $z0 != 0 goto label11;

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>(">", $i3);

        if $z0 == 0 goto label13;

     label11:
        $i4 = $i3 + 2;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r1, $i4, $i0, 0, $i1, $i2, $z1, $r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r4 = $r3[$i3];

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $i3 = $i3 + 1;

        $r4 = $r3[$i3];

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>(r2, $r1, $r4);

     label12:
        $r8 = new java.lang.Boolean;

        specialinvoke $r8.<java.lang.Boolean: void <init>(boolean)>($z0);

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r8);

        return r2;

     label13:
        $i4 = $i3 + 1;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r1, $i4, $i0, 0, $i1, $i2, $z1, $r1);

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r4 = $r3[$i3];

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>(r2, $r1, $r4);

        goto label12;

     label14:
        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("/", $i3);

        if $z2 == 0 goto label18;

        $i1 = $i3 + 1;

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("/", $i1);

        if $z0 == 0 goto label15;

        $i3 = $i3 + 1;

     label15:
        if $i3 >= $i0 goto label17;

        $i1 = specialinvoke r0.<org.htmlcleaner.XPather: int findClosingIndex(int,int)>($i3, $i0);

        $i1 = $i1 + -1;

        if $i1 > $i3 goto label16;

        $i1 = $i0;

     label16:
        $i3 = $i3 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i1, $z0, 1, $i2, $z1, $r1);

        $i3 = $i1 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, 0, 1, $i2, $z1, $r1);

        return r2;

     label17:
        specialinvoke r0.<org.htmlcleaner.XPather: void throwStandardException()>();

        goto label03;

     label18:
        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isFunctionCall(int,int)>($i3, $i0);

        if $z2 == 0 goto label19;

        $i4 = $i3 + 1;

        $i4 = specialinvoke r0.<org.htmlcleaner.XPather: int findClosingIndex(int,int)>($i4, $i0);

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>(r2, $i3, $i0, $i1, $i2, $z1);

        $i3 = $i4 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, 0, 1, $i2, $z1, $r1);

        return r2;

     label19:
        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r4 = $r3[$i3];

        $z2 = staticinvoke <org.htmlcleaner.XPather: boolean isValidInteger(java.lang.String)>($r4);

        if $z2 == 0 goto label20;

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r4 = $r3[$i3];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r4);

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r9);

        $i3 = $i3 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, 0, $i1, $i2, $z1, $r1);

        return r2;

     label20:
        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r4 = $r3[$i3];

        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isValidDouble(java.lang.String)>($r4);

        if $z2 == 0 goto label21;

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r4 = $r3[$i3];

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r4);

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r10);

        $i3 = $i3 + 1;

        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>(r2, $i3, $i0, 0, $i1, $i2, $z1, $r1);

        return r2;

     label21:
        r2 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>(r2, $i3, $i0, $z0, $z1);

     label22:
        return r2;
    }
    private java.util.Collection evaluateFunction(java.util.Collection, int, int, int, int, boolean) throws org.htmlcleaner.XPatherException
    {
        org.htmlcleaner.XPather r0;
        java.util.Collection $r1, $r11;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7;
        boolean $z0, $z1;
        java.util.ArrayList r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r7;
        java.util.Iterator $r5, $r12;
        java.lang.Object $r6;
        java.lang.Integer $r8;
        org.htmlcleaner.TagNode r9;
        java.lang.CharSequence $r10;
        org.htmlcleaner.XPatherException $r13;
        java.lang.StringBuilder $r14;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $z0 := @parameter5: boolean;

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r4 = $r3[$i0];

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $i4 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $r5 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        i5 = 0;

     label01:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        i5 = i5 + 1;

        $r7 = "last";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label04;

        if $z0 == 0 goto label03;

        $i6 = $i3;

     label02:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label01;

     label03:
        $i6 = $i4;

        goto label02;

     label04:
        $r7 = "position";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label07;

        if $z0 == 0 goto label06;

        $i6 = $i2;

     label05:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label01;

     label06:
        $i6 = i5;

        goto label05;

     label07:
        $r7 = "text";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label09;

        $z1 = $r6 instanceof org.htmlcleaner.TagNode;

        if $z1 == 0 goto label08;

        r9 = (org.htmlcleaner.TagNode) $r6;

        $r10 = virtualinvoke r9.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label01;

     label08:
        $z1 = $r6 instanceof java.lang.String;

        if $z1 == 0 goto label01;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label01;

     label09:
        $r7 = "count";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label10;

        $i6 = $i0 + 2;

        $i7 = $i1 + -1;

        $r11 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r1, $i6, $i7, 0, $i2, 0, $z0, null);

        $i6 = interfaceinvoke $r11.<java.util.Collection: int size()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label01;

     label10:
        $r7 = "data";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label13;

        $i6 = $i0 + 2;

        $i7 = $i1 + -1;

        $r11 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r1, $i6, $i7, 0, $i2, 0, $z0, null);

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label01;

        $r6 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r6 instanceof org.htmlcleaner.TagNode;

        if $z1 == 0 goto label12;

        r9 = (org.htmlcleaner.TagNode) $r6;

        $r10 = virtualinvoke r9.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label11;

     label12:
        $z1 = $r6 instanceof java.lang.String;

        if $z1 == 0 goto label11;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label11;

     label13:
        $r13 = new org.htmlcleaner.XPatherException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown function ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.htmlcleaner.XPatherException: void <init>(java.lang.String)>($r4);

        throw $r13;

     label14:
        return r2;
    }
    private boolean evaluateLogic(java.util.Collection, java.util.Collection, java.lang.String)
    {
        org.htmlcleaner.XPather r0;
        java.util.Collection $r1, $r2;
        java.lang.String $r3, $r8, $r9;
        int $i0;
        java.util.Iterator $r4;
        java.lang.Object $r5, $r6;
        boolean $z0;
        java.lang.Number r7;
        double $d0, $d1;
        byte $b1;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: java.lang.String;

        if $r1 == null goto label01;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i0 == 0 goto label01;

        if $r2 == null goto label01;

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        if $i0 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r5 instanceof java.lang.Number;

        if $z0 == 0 goto label07;

        $z0 = $r6 instanceof java.lang.Number;

        if $z0 == 0 goto label07;

        r7 = (java.lang.Number) $r5;

        $d0 = virtualinvoke r7.<java.lang.Number: double doubleValue()>();

        r7 = (java.lang.Number) $r6;

        $d1 = virtualinvoke r7.<java.lang.Number: double doubleValue()>();

        $r8 = "=";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label03;

        $b1 = $d0 cmpl $d1;

        if $b1 == 0 goto label13;

        return 0;

     label03:
        $r8 = "<";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label04;

        $b1 = $d0 cmpg $d1;

        if $b1 < 0 goto label13;

        return 0;

     label04:
        $r8 = ">";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label05;

        $b1 = $d0 cmpl $d1;

        if $b1 > 0 goto label13;

        return 0;

     label05:
        $r8 = "<=";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label06;

        $b1 = $d0 cmpg $d1;

        if $b1 <= 0 goto label13;

        return 0;

     label06:
        $r8 = ">=";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label12;

        $b1 = $d0 cmpl $d1;

        if $b1 >= 0 goto label13;

        return 0;

     label07:
        $r8 = specialinvoke r0.<org.htmlcleaner.XPather: java.lang.String toText(java.lang.Object)>($r5);

        $r9 = specialinvoke r0.<org.htmlcleaner.XPather: java.lang.String toText(java.lang.Object)>($r6);

        $i0 = virtualinvoke $r8.<java.lang.String: int compareTo(java.lang.String)>($r9);

        $r8 = "=";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label08;

        if $i0 == 0 goto label13;

        return 0;

     label08:
        $r8 = "<";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label09;

        if $i0 < 0 goto label13;

        return 0;

     label09:
        $r8 = ">";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label10;

        if $i0 > 0 goto label13;

        return 0;

     label10:
        $r8 = "<=";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label11;

        if $i0 <= 0 goto label13;

        return 0;

     label11:
        $r8 = ">=";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label12;

        if $i0 >= 0 goto label13;

     label12:
        return 0;

     label13:
        return 1;
    }
    private java.util.Collection filterByCondition(java.util.Collection, int, int) throws org.htmlcleaner.XPatherException
    {
        org.htmlcleaner.XPather r0;
        java.util.Collection $r1, $r6;
        int $i0, $i1, i2, $i3, $i4;
        java.util.ArrayList r2, r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.lang.Boolean r8;
        java.lang.Integer r9;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        i2 = 0;

        $i3 = interfaceinvoke $r1.<java.util.Collection: int size()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        i2 = i2 + 1;

        r2 = new java.util.ArrayList;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r5);

        $r6 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r5);

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r1, $i0, $i1, 0, i2, $i3, 1, $r6);

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i4 < 1 goto label1;

        $r7 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $z0 = $r7 instanceof java.lang.Boolean;

        if $z0 == 0 goto label2;

        r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        $z0 = $r7 instanceof java.lang.Integer;

        if $z0 == 0 goto label3;

        r9 = (java.lang.Integer) $r7;

        $i4 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        if $i4 != i2 goto label1;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label3:
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label4:
        return r3;
    }
    private int findClosingIndex(int, int)
    {
        org.htmlcleaner.XPather r0;
        int $i0, $i1, i2, i3, i4;
        java.lang.String r1, $r3;
        java.lang.String[] $r2;
        boolean $z0, z1, $z2;

        r0 := @this: org.htmlcleaner.XPather;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= $i1 goto label24;

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        r1 = $r2[$i0];

        $r3 = "\"";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label03;

        $i0 = $i0 + 1;

     label01:
        if $i0 > $i1 goto label24;

        r1 = "\"";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label02;

        return $i0;

     label02:
        $i0 = $i0 + 1;

        goto label01;

     label03:
        $r3 = "\'";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label05;

        $i0 = $i0 + 1;

     label04:
        if $i0 > $i1 goto label24;

        r1 = "\'";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label25;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        $r3 = "(";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label06;

        $r3 = "[";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label06;

        $r3 = "/";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label24;

     label06:
        $z0 = 1;

        z1 = 1;

        $r3 = "(";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label13;

        i2 = 1;

     label07:
        $r3 = "[";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label14;

        i3 = 1;

     label08:
        $r3 = "/";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label15;

        i4 = 1;

     label09:
        $i0 = $i0 + 1;

     label10:
        if $i0 > $i1 goto label24;

        r1 = "\"";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label17;

        if $z0 != 0 goto label16;

        $z0 = 1;

     label11:
        if $z0 == 0 goto label12;

        if z1 == 0 goto label12;

        if i2 != 0 goto label12;

        if i3 != 0 goto label12;

        if i4 == 0 goto label25;

     label12:
        $i0 = $i0 + 1;

        goto label10;

     label13:
        i2 = 0;

        goto label07;

     label14:
        i3 = 0;

        goto label08;

     label15:
        i4 = 0;

        goto label09;

     label16:
        $z0 = 0;

        goto label11;

     label17:
        r1 = "\'";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label19;

        if z1 != 0 goto label18;

        z1 = 1;

        goto label11;

     label18:
        z1 = 0;

        goto label11;

     label19:
        r1 = "(";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label20;

        if $z0 == 0 goto label20;

        if z1 == 0 goto label20;

        i2 = i2 + 1;

        goto label11;

     label20:
        r1 = ")";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label21;

        if $z0 == 0 goto label21;

        if z1 == 0 goto label21;

        i2 = i2 + -1;

        goto label11;

     label21:
        r1 = "[";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label22;

        if $z0 == 0 goto label22;

        if z1 == 0 goto label22;

        i3 = i3 + 1;

        goto label11;

     label22:
        r1 = "]";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label23;

        if $z0 == 0 goto label23;

        if z1 == 0 goto label23;

        i3 = i3 + -1;

        goto label11;

     label23:
        r1 = "/";

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label11;

        if $z0 == 0 goto label11;

        if z1 == 0 goto label11;

        if i2 != 0 goto label11;

        if i3 != 0 goto label11;

        i4 = i4 + -1;

        goto label11;

     label24:
        return -1;

     label25:
        return $i0;
    }
    private java.lang.String flatten(int, int)
    {
        org.htmlcleaner.XPather r0;
        int $i0, $i1;
        java.lang.StringBuffer r1;
        java.lang.String $r2;
        java.lang.String[] $r3;

        r0 := @this: org.htmlcleaner.XPather;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 > $i1 goto label3;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

     label1:
        if $i0 > $i1 goto label2;

        $r3 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r2 = $r3[$i0];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label3:
        return "";
    }
    private java.util.Collection getElementsByName(java.util.Collection, int, int, boolean, boolean) throws org.htmlcleaner.XPatherException
    {
        org.htmlcleaner.XPather r0;
        java.util.Collection $r1, r5;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String[] $r2;
        java.lang.String $r3, $r10;
        java.util.ArrayList r4, $r16;
        java.util.Iterator $r6, $r14;
        java.lang.Object $r7;
        org.htmlcleaner.TagNode r8, $r15;
        java.util.List $r9;
        java.util.Map $r11;
        java.util.LinkedHashSet r12, r13, $r17;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $z2 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isAtt(java.lang.String)>($r3);

        if $z2 == 0 goto label08;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        if $z0 == 0 goto label02;

        r12 = new java.util.LinkedHashSet;

        r5 = r12;

        specialinvoke r12.<java.util.LinkedHashSet: void <init>()>();

        $r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r7 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label01;

        r8 = (org.htmlcleaner.TagNode) $r7;

        $r9 = virtualinvoke r8.<org.htmlcleaner.TagNode: java.util.List getAllElementsList(boolean)>(1);

        interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>($r9);

        goto label01;

     label02:
        r5 = $r1;

     label03:
        $r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r7 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label06;

        r8 = (org.htmlcleaner.TagNode) $r7;

        $r10 = "*";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label05;

        $r11 = virtualinvoke r8.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r1 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        $i2 = $i0 + 1;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r1, $i2, $i1, 0, 1, 1, $z1, null);

        interfaceinvoke $r16.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        goto label04;

     label05:
        $r10 = virtualinvoke r8.<org.htmlcleaner.TagNode: java.lang.String getAttributeByName(java.lang.String)>($r3);

        if $r10 == null goto label04;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r10);

        $i2 = $i0 + 1;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r1, $i2, $i1, 0, 1, 1, $z1, null);

        interfaceinvoke $r16.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        goto label04;

     label06:
        specialinvoke r0.<org.htmlcleaner.XPather: void throwStandardException()>();

        goto label04;

     label07:
        return $r16;

     label08:
        r13 = new java.util.LinkedHashSet;

        r12 = r13;

        specialinvoke r13.<java.util.LinkedHashSet: void <init>()>();

        $r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $i2 = 0;

     label09:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label21;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $z2 = $r7 instanceof org.htmlcleaner.TagNode;

        if $z2 == 0 goto label20;

        r8 = (org.htmlcleaner.TagNode) $r7;

        $i2 = $i2 + 1;

        $r10 = ".";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        $r10 = "..";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        $r10 = "*";

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label15;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>(r8);

     label10:
        $r17 = new java.util.LinkedHashSet;

        specialinvoke $r17.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r1);

        $i3 = $i0 + 1;

        $i4 = virtualinvoke $r17.<java.util.LinkedHashSet: int size()>();

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r17, $i3, $i1, 0, $i2, $i4, $z1, null);

        if $z0 == 0 goto label19;

        $r9 = virtualinvoke r8.<org.htmlcleaner.TagNode: java.util.List getChildTagList()>();

        if $z2 != 0 goto label11;

        if $z3 != 0 goto label11;

        if $z4 == 0 goto label12;

     label11:
        interfaceinvoke r12.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

     label12:
        $r14 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z5 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        $r7 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.htmlcleaner.TagNode) $r7;

        r5 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>(r8);

        r5 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>(r5, $i0, $i1, $z0, $z1);

        if $z2 != 0 goto label14;

        if $z3 != 0 goto label14;

        if $z4 != 0 goto label14;

        $z5 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r8);

        if $z5 == 0 goto label14;

        interfaceinvoke r12.<java.util.Collection: boolean add(java.lang.Object)>(r8);

     label14:
        interfaceinvoke r12.<java.util.Collection: boolean addAll(java.util.Collection)>(r5);

        goto label13;

     label15:
        if $z3 == 0 goto label17;

        $r15 = virtualinvoke r8.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>();

        if $r15 == null goto label16;

        $r1 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r15);

        goto label10;

     label16:
        r4 = new java.util.ArrayList;

        $r1 = r4;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        goto label10;

     label17:
        if $z4 == 0 goto label18;

        $r1 = virtualinvoke r8.<org.htmlcleaner.TagNode: java.util.List getChildTagList()>();

        goto label10;

     label18:
        $r1 = virtualinvoke r8.<org.htmlcleaner.TagNode: java.util.List getElementListByName(java.lang.String,boolean)>($r3, 0);

        goto label10;

     label19:
        interfaceinvoke r12.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        goto label09;

     label20:
        specialinvoke r0.<org.htmlcleaner.XPather: void throwStandardException()>();

        goto label09;

     label21:
        return r12;
    }
    private boolean isAtt(java.lang.String)
    {
        org.htmlcleaner.XPather r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("@");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean isFunctionCall(int, int)
    {
        org.htmlcleaner.XPather r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XPather;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r2 = $r1[$i0];

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $i2 = $i0 + 1;

        $z0 = specialinvoke r0.<org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>("(", $i2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i2 = $i0 + 1;

        $i1 = specialinvoke r0.<org.htmlcleaner.XPather: int findClosingIndex(int,int)>($i2, $i1);

        $i0 = $i0 + 1;

        if $i1 <= $i0 goto label2;

        return 1;

     label2:
        return 0;
    }
    private boolean isIdentifier(java.lang.String)
    {
        org.htmlcleaner.XPather r0;
        java.lang.String $r1;
        int $i0, $i2;
        char $c1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z0 == 0 goto label4;

        $i0 = 1;

     label2:
        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i2 goto label4;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        if $c1 == 95 goto label3;

        if $c1 == 45 goto label3;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 == 0 goto label4;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 0;
    }
    private boolean isToken(java.lang.String, int)
    {
        org.htmlcleaner.XPather r0;
        java.lang.String $r1, $r3;
        int $i0, i1;
        java.lang.String[] $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        i1 = lengthof $r2;

        if $i0 < 0 goto label1;

        if $i0 >= i1 goto label1;

        $r2 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $r3 = $r2[$i0];

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean isValidDouble(java.lang.String)
    {
        org.htmlcleaner.XPather r0;
        java.lang.String $r1;
        int $i0, i1;
        char $c2;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        i1 = 1;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        if $c2 == 43 goto label1;

        if $c2 == 45 goto label1;

        if $c2 == 32 goto label1;

        if $c2 < 48 goto label4;

        if $c2 > 57 goto label4;

     label1:
        if i1 >= $i0 goto label3;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i1);

        if $c2 == 46 goto label2;

        if $c2 < 48 goto label4;

        if $c2 <= 57 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }
    private static boolean isValidInteger(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        i1 = 1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c2 == 43 goto label1;

        if $c2 == 45 goto label1;

        if $c2 < 48 goto label4;

        if $c2 > 57 goto label4;

     label1:
        if i1 >= $i0 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        if $c2 < 48 goto label4;

        if $c2 <= 57 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }
    private java.util.Collection singleton(java.lang.Object)
    {
        org.htmlcleaner.XPather r0;
        java.lang.Object $r1;
        java.util.ArrayList r2;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: java.lang.Object;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return r2;
    }
    private void throwStandardException() throws org.htmlcleaner.XPatherException
    {
        org.htmlcleaner.XPather r0;
        org.htmlcleaner.XPatherException $r1;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 = new org.htmlcleaner.XPatherException;

        specialinvoke $r1.<org.htmlcleaner.XPatherException: void <init>()>();

        throw $r1;
    }
    private java.lang.String toText(java.lang.Object)
    {
        org.htmlcleaner.XPather r0;
        java.lang.Object r1;
        boolean $z0;
        org.htmlcleaner.TagNode r2;
        java.lang.CharSequence $r3;
        java.lang.String $r4;

        r0 := @this: org.htmlcleaner.XPather;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return "";

     label1:
        $z0 = r1 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label2;

        r2 = (org.htmlcleaner.TagNode) r1;

        $r3 = virtualinvoke r2.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        return $r4;

     label2:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        return $r4;
    }
    public java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode) throws org.htmlcleaner.XPatherException
    {
        org.htmlcleaner.XPather r0;
        org.htmlcleaner.TagNode $r1;
        int $i0, i1;
        java.lang.Object[] r2;
        org.htmlcleaner.XPatherException $r3;
        java.util.Collection $r4;
        java.lang.String[] $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: org.htmlcleaner.XPather;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        if $r1 != null goto label1;

        $r3 = new org.htmlcleaner.XPatherException;

        specialinvoke $r3.<org.htmlcleaner.XPatherException: void <init>(java.lang.String)>("Cannot evaluate XPath expression against null value!");

        throw $r3;

     label1:
        $r4 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>($r1);

        $r5 = r0.<org.htmlcleaner.XPather: java.lang.String[] tokenArray>;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

        $r4 = specialinvoke r0.<org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>($r4, 0, $i0, 0, 1, 0, 0, null);

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        r2 = newarray (java.lang.Object)[$i0];

        $r6 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        i1 = 0;

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r2[i1] = $r7;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }
