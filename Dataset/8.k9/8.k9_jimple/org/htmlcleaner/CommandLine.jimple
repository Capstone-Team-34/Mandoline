org.htmlcleaner.CommandLine extends java.lang.Object
private static final java.lang.String OMITXMLDECL
private static final java.lang.String className
private static final java.util.logging.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/htmlcleaner/CommandLine;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <org.htmlcleaner.CommandLine: java.lang.String className> = $r1;

        $r1 = <org.htmlcleaner.CommandLine: java.lang.String className>;

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.htmlcleaner.CommandLine: java.util.logging.Logger logger> = $r2;

        return;
    }
    public void <init>()
    {
        org.htmlcleaner.CommandLine r0;

        r0 := @this: org.htmlcleaner.CommandLine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.lang.String getArgValue(java.lang.String[], java.lang.String, java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String $r1, $r2, r3, $r4, $r5;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r3 = $r0[$i1];

        $i2 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(61);

        if $i2 < 0 goto label2;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $i2 = $i2 + 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i2);

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r2;
    }
    private static boolean getSwitchArgument(java.lang.String[], java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String $r1, r2, $r3, $r4;
        int $i0, $i1, $i2;
        boolean z0, $z1;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.String;

        z0 = 0;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        r2 = $r0[$i1];

        $i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        if $i2 < 0 goto label3;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i2 = $i2 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i2);

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z1 == 0 goto label2;

        z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>(r2);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        z0 = 1;

        goto label2;

     label4:
        return z0;
    }
    public static void main(java.lang.String[]) throws java.io.IOException, org.htmlcleaner.XPatherException
    {
        java.lang.String[] $r0;
        java.lang.String r1, $r4, r6, $r7, r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        java.io.InputStream $r5;
        boolean $z0;
        java.lang.StringBuilder $r8, $r47;
        int $i0, $i1, $i2;
        java.io.PrintStream $r9;
        org.htmlcleaner.HtmlCleaner r37, $r50;
        org.htmlcleaner.CleanerProperties $r38;
        java.util.logging.Logger $r39;
        org.htmlcleaner.Html4TagProvider $r40;
        org.htmlcleaner.Html5TagProvider $r41;
        long $l3, $l4;
        org.htmlcleaner.TagNode $r42;
        java.lang.Object[] $r43;
        java.lang.Object $r44;
        java.io.OutputStream r45;
        java.util.Scanner $r46;
        java.io.File $r48;
        org.htmlcleaner.ConfigFileTagProvider $r49;
        org.htmlcleaner.audit.HtmlModificationListenerLogger $r51;
        java.util.TreeMap $r52;
        java.net.URL $r53;
        org.htmlcleaner.CompactXmlSerializer $r54;
        java.io.FileOutputStream $r55;
        org.htmlcleaner.BrowserCompactXmlSerializer $r56;
        org.htmlcleaner.PrettyXmlSerializer $r57;
        org.htmlcleaner.SimpleHtmlSerializer $r58;
        org.htmlcleaner.PrettyHtmlSerializer $r59;
        org.htmlcleaner.CompactHtmlSerializer $r60;
        org.htmlcleaner.SimpleXmlSerializer $r61;

        $r0 := @parameter0: java.lang.String[];

        $r4 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "src", "");

        $r46 = new java.util.Scanner;

        $r5 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r46.<java.util.Scanner: void <init>(java.io.InputStream)>($r5);

        r6 = "";

        $r7 = "";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label03;

     label01:
        $z0 = virtualinvoke $r46.<java.util.Scanner: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r7 = virtualinvoke $r46.<java.util.Scanner: java.lang.String nextLine()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label01;

     label02:
        $i0 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("");

        if $i0 == 0 goto label33;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Output:");

     label03:
        $r7 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "incharset", "");

        r10 = $r7;

        $r11 = "";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label04;

        r10 = "UTF-8";

     label04:
        $r11 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "outcharset", "");

        $r7 = $r11;

        $r12 = "";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label05;

        $r7 = "UTF-8";

     label05:
        $r13 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "htmlver", "");

        $r12 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "dest", "");

        $r11 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "outputtype", "");

        $r14 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "advancedxmlescape", "");

        $r15 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "usecdata", "");

        $r16 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "usecdatafor", "");

        $r17 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "specialentities", "");

        $r18 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "unicodechars", "");

        $r19 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "omitunknowntags", "");

        $r20 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "treatunknowntagsascontent", "");

        $r21 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "omitdeprtags", "");

        $r22 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "treatdeprtagsascontent", "");

        $r23 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "omitcomments", "");

        $r24 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "omitxmldecl", "");

        $r25 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "omitdoctypedecl", "");

        $r26 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "omithtmlenvelope", "");

        $r27 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "useemptyelementtags", "");

        $r28 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "allowmultiwordattributes", "");

        $r29 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "allowhtmlinsideattributes", "");

        $r30 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "ignoreqe", "");

        $r31 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "namespacesaware", "");

        $r32 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "hyphenreplacement", "");

        $r33 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "prunetags", "");

        r1 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "booleanatts", "");

        $r34 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "nodebyxpath", "");

        $r35 = staticinvoke <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String,java.lang.String)>($r0, "taginfofile", "");

        $r36 = "";

        $z0 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z0 != 0 goto label34;

        $r50 = new org.htmlcleaner.HtmlCleaner;

        r37 = $r50;

        $r49 = new org.htmlcleaner.ConfigFileTagProvider;

        $r48 = new java.io.File;

        specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>($r35);

        specialinvoke $r49.<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>($r48);

        specialinvoke $r50.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider)>($r49);

     label06:
        $r38 = virtualinvoke r37.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties getProperties()>();

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean getSwitchArgument(java.lang.String[],java.lang.String)>($r0, "quiet");

        if $z0 != 0 goto label07;

        $r51 = new org.htmlcleaner.audit.HtmlModificationListenerLogger;

        $r39 = <org.htmlcleaner.CommandLine: java.util.logging.Logger logger>;

        specialinvoke $r51.<org.htmlcleaner.audit.HtmlModificationListenerLogger: void <init>(java.util.logging.Logger)>($r39);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void addHtmlModificationListener(org.htmlcleaner.audit.HtmlModificationListener)>($r51);

     label07:
        $r13 = "";

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z0 != 0 goto label08;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r19);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setOmitUnknownTags(boolean)>($z0);

     label08:
        $r19 = "";

        $z0 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z0 != 0 goto label09;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r20);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setTreatUnknownTagsAsContent(boolean)>($z0);

     label09:
        $r20 = "";

        $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z0 != 0 goto label10;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r21);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setOmitDeprecatedTags(boolean)>($z0);

     label10:
        $r21 = "";

        $z0 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z0 != 0 goto label11;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r22);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setTreatDeprecatedTagsAsContent(boolean)>($z0);

     label11:
        $r22 = "";

        $z0 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label12;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r14);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setAdvancedXmlEscape(boolean)>($z0);

     label12:
        $r14 = "";

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 != 0 goto label13;

        $r14 = "";

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 == 0 goto label13;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r15);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setUseCdataForScriptAndStyle(boolean)>($z0);

     label13:
        $r15 = "";

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 != 0 goto label14;

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setUseCdataFor(java.lang.String)>($r16);

     label14:
        $r16 = "";

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z0 != 0 goto label15;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r17);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setTranslateSpecialEntities(boolean)>($z0);

     label15:
        $r17 = "";

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z0 != 0 goto label16;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r18);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setRecognizeUnicodeChars(boolean)>($z0);

     label16:
        $r18 = "";

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z0 != 0 goto label17;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r23);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setOmitComments(boolean)>($z0);

     label17:
        $r23 = "";

        $z0 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z0 != 0 goto label18;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r24);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setOmitXmlDeclaration(boolean)>($z0);

     label18:
        $r24 = "";

        $z0 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z0 != 0 goto label19;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r25);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setOmitDoctypeDeclaration(boolean)>($z0);

     label19:
        $r25 = "";

        $z0 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z0 != 0 goto label20;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r26);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setOmitHtmlEnvelope(boolean)>($z0);

     label20:
        $r26 = "";

        $z0 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if $z0 != 0 goto label21;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r27);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setUseEmptyElementTags(boolean)>($z0);

     label21:
        $r27 = "";

        $z0 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z0 != 0 goto label22;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r28);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setAllowMultiWordAttributes(boolean)>($z0);

     label22:
        $r28 = "";

        $z0 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z0 != 0 goto label23;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r29);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setAllowHtmlInsideAttributes(boolean)>($z0);

     label23:
        $r29 = "";

        $z0 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z0 != 0 goto label24;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r30);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setIgnoreQuestAndExclam(boolean)>($z0);

     label24:
        $r30 = "";

        $z0 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z0 != 0 goto label25;

        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>($r31);

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setNamespacesAware(boolean)>($z0);

     label25:
        $r31 = "";

        $z0 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r32);

        if $z0 != 0 goto label26;

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setHyphenReplacementInComment(java.lang.String)>($r32);

     label26:
        $r32 = "";

        $z0 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z0 != 0 goto label27;

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setPruneTags(java.lang.String)>($r33);

     label27:
        $r33 = "";

        $z0 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label28;

        virtualinvoke $r38.<org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>(r1);

     label28:
        $r52 = new java.util.TreeMap;

        specialinvoke $r52.<java.util.TreeMap: void <init>()>();

        $i0 = lengthof $r0;

        $i1 = 0;

     label29:
        if $i1 >= $i0 goto label38;

        r1 = $r0[$i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("t:");

        if $z0 == 0 goto label32;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 2 goto label32;

        $r33 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(2);

        $i2 = virtualinvoke $r33.<java.lang.String: int indexOf(int)>(61);

        if $i2 > 0 goto label36;

        r1 = $r33;

     label30:
        if $i2 > 0 goto label37;

        $r33 = null;

     label31:
        interfaceinvoke $r52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r33);

     label32:
        $i1 = $i1 + 1;

        goto label29;

     label33:
        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Usage: java -jar htmlcleanerXX.jar src=<url | file> [htmlver=4] [incharset=<charset>] [dest=<file>] [outcharset=<charset>] [taginfofile=<file>] [options...]");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Alternative: java -jar htmlcleanerXX.jar (reads the input from console)");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("where options include:");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    outputtype=simple* | compact | browser-compact | pretty");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    advancedxmlescape=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    usecdata=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    usecdatafor=<string value> [script,style]");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    specialentities=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    unicodechars=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    omitunknowntags=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    treatunknowntagsascontent=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    omitdeprtags=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    treatdeprtagsascontent=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    omitcomments=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    omitxmldecl=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    omitdoctypedecl=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    omithtmlenvelope=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    useemptyelementtags=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    allowmultiwordattributes=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    allowhtmlinsideattributes=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    ignoreqe=true | false*");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    namespacesaware=true* | false");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    hyphenreplacement=<string value> [=]");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    prunetags=<string value> []");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    booleanatts=self* | empty | true");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    nodebyxpath=<xpath expression>");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    t:<sourcetagX>[=<desttag>[,<preserveatts>]]");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    t:<sourcetagX>.<destattrY>[=<template>]");

        staticinvoke <java.lang.System: void exit(int)>(1);

        goto label03;

     label34:
        $i0 = virtualinvoke $r13.<java.lang.String: int compareTo(java.lang.String)>("4");

        if $i0 != 0 goto label35;

        $r50 = new org.htmlcleaner.HtmlCleaner;

        r37 = $r50;

        $r40 = <org.htmlcleaner.Html4TagProvider: org.htmlcleaner.Html4TagProvider INSTANCE>;

        specialinvoke $r50.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider)>($r40);

        goto label06;

     label35:
        $r50 = new org.htmlcleaner.HtmlCleaner;

        r37 = $r50;

        $r41 = <org.htmlcleaner.Html5TagProvider: org.htmlcleaner.Html5TagProvider INSTANCE>;

        specialinvoke $r50.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider)>($r41);

        goto label06;

     label36:
        r1 = virtualinvoke $r33.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        goto label30;

     label37:
        $i2 = $i2 + 1;

        $r33 = virtualinvoke $r33.<java.lang.String: java.lang.String substring(int)>($i2);

        goto label31;

     label38:
        virtualinvoke r37.<org.htmlcleaner.HtmlCleaner: void initCleanerTransformations(java.util.Map)>($r52);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

        if $z0 != 0 goto label39;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        if $z0 == 0 goto label47;

     label39:
        $r53 = new java.net.URL;

        specialinvoke $r53.<java.net.URL: void <init>(java.lang.String)>(r1);

        $r42 = virtualinvoke r37.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>($r53, r10);

     label40:
        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r34);

        if $z0 != 0 goto label43;

        $r43 = virtualinvoke $r42.<org.htmlcleaner.TagNode: java.lang.Object[] evaluateXPath(java.lang.String)>($r34);

        $i0 = 0;

     label41:
        $i1 = lengthof $r43;

        if $i0 >= $i1 goto label42;

        $r44 = $r43[$i0];

        $z0 = $r44 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label49;

        $r44 = $r43[$i0];

        $r42 = (org.htmlcleaner.TagNode) $r44;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Node successfully found by XPath.");

     label42:
        $i1 = lengthof $r43;

        if $i0 != $i1 goto label43;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Node not found by XPath expression - whole html tree is going to be serialized!");

     label43:
        if $r12 == null goto label44;

        $r4 = "";

        r6 = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label50;

     label44:
        r45 = <java.lang.System: java.io.PrintStream out>;

     label45:
        $r4 = "compact";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label51;

        $r54 = new org.htmlcleaner.CompactXmlSerializer;

        specialinvoke $r54.<org.htmlcleaner.CompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r38);

        virtualinvoke $r54.<org.htmlcleaner.CompactXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r42, r45, $r7);

     label46:
        $z0 = staticinvoke <org.htmlcleaner.CommandLine: boolean getSwitchArgument(java.lang.String[],java.lang.String)>($r0, "quiet");

        if $z0 != 0 goto label57;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished successfully in ");

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l4 - $l3;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r7);

        return;

     label47:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label48;

        $r48 = new java.io.File;

        specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>($r4);

        $r42 = virtualinvoke r37.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>($r48, r10);

        goto label40;

     label48:
        $r42 = virtualinvoke r37.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.lang.String)>(r6);

        goto label40;

     label49:
        $i0 = $i0 + 1;

        goto label41;

     label50:
        $r55 = new java.io.FileOutputStream;

        r45 = $r55;

        specialinvoke $r55.<java.io.FileOutputStream: void <init>(java.lang.String)>($r12);

        goto label45;

     label51:
        $r4 = "browser-compact";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label52;

        $r56 = new org.htmlcleaner.BrowserCompactXmlSerializer;

        specialinvoke $r56.<org.htmlcleaner.BrowserCompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r38);

        virtualinvoke $r56.<org.htmlcleaner.BrowserCompactXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r42, r45, $r7);

        goto label46;

     label52:
        $r4 = "pretty";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label53;

        $r57 = new org.htmlcleaner.PrettyXmlSerializer;

        specialinvoke $r57.<org.htmlcleaner.PrettyXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r38);

        virtualinvoke $r57.<org.htmlcleaner.PrettyXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r42, r45, $r7);

        goto label46;

     label53:
        $r4 = "htmlsimple";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label54;

        $r58 = new org.htmlcleaner.SimpleHtmlSerializer;

        specialinvoke $r58.<org.htmlcleaner.SimpleHtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r38);

        virtualinvoke $r58.<org.htmlcleaner.SimpleHtmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r42, r45, $r7);

        goto label46;

     label54:
        $r4 = "htmlpretty";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label55;

        $r59 = new org.htmlcleaner.PrettyHtmlSerializer;

        specialinvoke $r59.<org.htmlcleaner.PrettyHtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r38);

        virtualinvoke $r59.<org.htmlcleaner.PrettyHtmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r42, r45, $r7);

        goto label46;

     label55:
        $r4 = "htmlcompact";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label56;

        $r60 = new org.htmlcleaner.CompactHtmlSerializer;

        specialinvoke $r60.<org.htmlcleaner.CompactHtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r38);

        virtualinvoke $r60.<org.htmlcleaner.CompactHtmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r42, r45, $r7);

        goto label46;

     label56:
        $r61 = new org.htmlcleaner.SimpleXmlSerializer;

        specialinvoke $r61.<org.htmlcleaner.SimpleXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r38);

        virtualinvoke $r61.<org.htmlcleaner.SimpleXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r42, r45, $r7);

        goto label46;

     label57:
        return;
    }
    private static boolean toBoolean(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label2;

        $r1 = "on";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "true";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "yes";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
