org.htmlcleaner.CompactHtmlSerializer extends org.htmlcleaner.HtmlSerializer
private int openPreTags
    public void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.CompactHtmlSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.CompactHtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<org.htmlcleaner.HtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r1);

        r0.<org.htmlcleaner.CompactHtmlSerializer: int openPreTags> = 0;

        return;
    }
    protected void serialize(org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException
    {
        org.htmlcleaner.CompactHtmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        int $i0;
        java.util.List $r5;
        java.util.ListIterator $r6;
        java.lang.Object $r7;
        char $c1;
        org.htmlcleaner.CommentNode r8;
        org.htmlcleaner.BaseToken r9;

        r0 := @this: org.htmlcleaner.CompactHtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $r3 = "pre";

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label01;

        $i0 = r0.<org.htmlcleaner.CompactHtmlSerializer: int openPreTags>;

        $i0 = $i0 + 1;

        r0.<org.htmlcleaner.CompactHtmlSerializer: int openPreTags> = $i0;

     label01:
        virtualinvoke r0.<org.htmlcleaner.CompactHtmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>($r1, $r2, 0);

        $r5 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        $z1 = virtualinvoke r0.<org.htmlcleaner.CompactHtmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>($r1);

        if $z1 != 0 goto label16;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.ListIterator listIterator()>();

     label02:
        $z1 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r7 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        $z1 = $r7 instanceof org.htmlcleaner.ContentNode;

        if $z1 == 0 goto label13;

        $r3 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $i0 = r0.<org.htmlcleaner.CompactHtmlSerializer: int openPreTags>;

        if $i0 <= 0 goto label03;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        goto label02;

     label03:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label10;

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 == 0 goto label10;

        $z1 = 1;

     label04:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 1 goto label11;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i0);

        $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z2 == 0 goto label11;

        $z2 = 1;

     label05:
        $z3 = virtualinvoke r0.<org.htmlcleaner.CompactHtmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>($r1);

        if $z3 == 0 goto label12;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

     label06:
        if $z1 == 0 goto label07;

        virtualinvoke $r2.<java.io.Writer: void write(int)>(32);

     label07:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label08;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        if $z2 == 0 goto label08;

        virtualinvoke $r2.<java.io.Writer: void write(int)>(32);

     label08:
        $z1 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r7 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        $z1 = staticinvoke <org.htmlcleaner.Utils: boolean isWhitespaceString(java.lang.Object)>($r7);

        if $z1 != 0 goto label09;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

     label09:
        interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object previous()>();

        goto label02;

     label10:
        $z1 = 0;

        goto label04;

     label11:
        $z2 = 0;

        goto label05;

     label12:
        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke r0.<org.htmlcleaner.CompactHtmlSerializer: java.lang.String escapeText(java.lang.String)>($r3);

        goto label06;

     label13:
        $z1 = $r7 instanceof org.htmlcleaner.CommentNode;

        if $z1 == 0 goto label14;

        r8 = (org.htmlcleaner.CommentNode) $r7;

        $r3 = virtualinvoke r8.<org.htmlcleaner.CommentNode: java.lang.String getCommentedContent()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        goto label02;

     label14:
        $z1 = $r7 instanceof org.htmlcleaner.BaseToken;

        if $z1 == 0 goto label02;

        r9 = (org.htmlcleaner.BaseToken) $r7;

        interfaceinvoke r9.<org.htmlcleaner.BaseToken: void serialize(org.htmlcleaner.Serializer,java.io.Writer)>(r0, $r2);

        goto label02;

     label15:
        virtualinvoke r0.<org.htmlcleaner.CompactHtmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>($r1, $r2, 0);

        if $z0 == 0 goto label16;

        $i0 = r0.<org.htmlcleaner.CompactHtmlSerializer: int openPreTags>;

        $i0 = $i0 + -1;

        r0.<org.htmlcleaner.CompactHtmlSerializer: int openPreTags> = $i0;

     label16:
        return;
    }
