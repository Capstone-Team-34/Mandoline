org.htmlcleaner.conditional.TagNodeEmptyContentCondition extends java.lang.Object implements org.htmlcleaner.conditional.ITagNodeCondition
private static final java.lang.String ID_ATTRIBUTE_NAME
private static final java.util.Set unsafeBlockElements
private org.htmlcleaner.ITagInfoProvider tagInfoProvider
    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.Set $r1;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <org.htmlcleaner.conditional.TagNodeEmptyContentCondition: java.util.Set unsafeBlockElements> = $r0;

        $r1 = <org.htmlcleaner.conditional.TagNodeEmptyContentCondition: java.util.Set unsafeBlockElements>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("td");

        $r1 = <org.htmlcleaner.conditional.TagNodeEmptyContentCondition: java.util.Set unsafeBlockElements>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("th");

        return;
    }
    public void <init>(org.htmlcleaner.ITagInfoProvider)
    {
        org.htmlcleaner.conditional.TagNodeEmptyContentCondition r0;
        org.htmlcleaner.ITagInfoProvider $r1;

        r0 := @this: org.htmlcleaner.conditional.TagNodeEmptyContentCondition;

        $r1 := @parameter0: org.htmlcleaner.ITagInfoProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.htmlcleaner.conditional.TagNodeEmptyContentCondition: org.htmlcleaner.ITagInfoProvider tagInfoProvider> = $r1;

        return;
    }
    private boolean hasIdAttributeSet(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.conditional.TagNodeEmptyContentCondition r0;
        org.htmlcleaner.TagNode $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.htmlcleaner.conditional.TagNodeEmptyContentCondition;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("id");

        $z0 = staticinvoke <org.htmlcleaner.Utils: boolean isEmptyString(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean satisfy(org.htmlcleaner.TagNode, boolean)
    {
        org.htmlcleaner.conditional.TagNodeEmptyContentCondition r0;
        org.htmlcleaner.TagNode $r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        org.htmlcleaner.ITagInfoProvider $r3;
        org.htmlcleaner.TagInfo $r4;
        org.htmlcleaner.Display $r5, $r6;
        java.util.Set $r7;
        java.lang.CharSequence $r8;
        java.util.List $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        org.htmlcleaner.ContentNode r12;

        r0 := @this: org.htmlcleaner.conditional.TagNodeEmptyContentCondition;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r3 = r0.<org.htmlcleaner.conditional.TagNodeEmptyContentCondition: org.htmlcleaner.ITagInfoProvider tagInfoProvider>;

        $r4 = interfaceinvoke $r3.<org.htmlcleaner.ITagInfoProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>($r2);

        if $r4 == null goto label5;

        $z1 = specialinvoke r0.<org.htmlcleaner.conditional.TagNodeEmptyContentCondition: boolean hasIdAttributeSet(org.htmlcleaner.TagNode)>($r1);

        if $z1 != 0 goto label5;

        $r5 = <org.htmlcleaner.Display: org.htmlcleaner.Display none>;

        $r6 = virtualinvoke $r4.<org.htmlcleaner.TagInfo: org.htmlcleaner.Display getDisplay()>();

        if $r5 == $r6 goto label5;

        $z1 = virtualinvoke $r4.<org.htmlcleaner.TagInfo: boolean isEmptyTag()>();

        if $z1 != 0 goto label5;

        if $z0 != 0 goto label1;

        $r7 = <org.htmlcleaner.conditional.TagNodeEmptyContentCondition: java.util.Set unsafeBlockElements>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label5;

     label1:
        $r8 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.CharSequence getText()>();

        $z0 = staticinvoke <org.htmlcleaner.Utils: boolean isEmptyString(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r9 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r11 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label4;

        $r1 = (org.htmlcleaner.TagNode) $r11;

        $z0 = specialinvoke r0.<org.htmlcleaner.conditional.TagNodeEmptyContentCondition: boolean satisfy(org.htmlcleaner.TagNode,boolean)>($r1, 1);

        if $z0 != 0 goto label3;

        return 0;

     label4:
        $z0 = $r11 instanceof org.htmlcleaner.ContentNode;

        if $z0 == 0 goto label5;

        r12 = (org.htmlcleaner.ContentNode) $r11;

        $z0 = virtualinvoke r12.<org.htmlcleaner.ContentNode: boolean isBlank()>();

        if $z0 != 0 goto label3;

     label5:
        return 0;

     label6:
        return 1;
    }
    public boolean satisfy(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.conditional.TagNodeEmptyContentCondition r0;
        org.htmlcleaner.TagNode $r1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.conditional.TagNodeEmptyContentCondition;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $z0 = specialinvoke r0.<org.htmlcleaner.conditional.TagNodeEmptyContentCondition: boolean satisfy(org.htmlcleaner.TagNode,boolean)>($r1, 0);

        return $z0;
    }
