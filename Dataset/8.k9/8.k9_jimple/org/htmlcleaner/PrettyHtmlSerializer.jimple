org.htmlcleaner.PrettyHtmlSerializer extends org.htmlcleaner.HtmlSerializer
private static final java.lang.String DEFAULT_INDENTATION_STRING
private java.lang.String indentString
private java.util.List indents
    public void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.PrettyHtmlSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.PrettyHtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties,java.lang.String)>($r1, "\t");

        return;
    }
    public void <init>(org.htmlcleaner.CleanerProperties, java.lang.String)
    {
        org.htmlcleaner.PrettyHtmlSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.htmlcleaner.PrettyHtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.HtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r1);

        r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String indentString> = "\t";

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.PrettyHtmlSerializer: java.util.List indents> = $r3;

        r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String indentString> = $r2;

        return;
    }
    private java.lang.String getIndent(int)
    {
        org.htmlcleaner.PrettyHtmlSerializer r0;
        int $i0, $i1, $i2;
        java.util.List $r1;
        java.lang.String r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.htmlcleaner.PrettyHtmlSerializer;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<org.htmlcleaner.PrettyHtmlSerializer: java.util.List indents>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 > $i0 goto label6;

        if $i1 != 0 goto label4;

        r2 = null;

     label2:
        if $i1 > $i0 goto label6;

        if r2 != null goto label5;

        r2 = "";

     label3:
        $r1 = r0.<org.htmlcleaner.PrettyHtmlSerializer: java.util.List indents>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r1 = r0.<org.htmlcleaner.PrettyHtmlSerializer: java.util.List indents>;

        $i2 = $i1 + -1;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        r2 = (java.lang.String) $r3;

        goto label2;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String indentString>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label6:
        $r1 = r0.<org.htmlcleaner.PrettyHtmlSerializer: java.util.List indents>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r2 = (java.lang.String) $r3;

     label7:
        exitmonitor r0;

        return r2;

     label8:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label7 with label8;
    }
    private java.lang.String getIndentedText(java.lang.String, int)
    {
        org.htmlcleaner.PrettyHtmlSerializer r0;
        java.lang.String $r1, $r4, $r5;
        int $i0;
        java.lang.StringBuilder r2, $r6;
        java.util.StringTokenizer r3;
        boolean $z0;

        r0 := @this: org.htmlcleaner.PrettyHtmlSerializer;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r4 = specialinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String getIndent(int)>($i0);

        r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        r3 = new java.util.StringTokenizer;

        specialinvoke r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, "\n\r");

     label1:
        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r5 = "";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label1;

     label2:
        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    private java.lang.String getSingleLineOfChildren(java.util.List)
    {
        org.htmlcleaner.PrettyHtmlSerializer r0;
        java.util.List r1;
        java.lang.StringBuilder r2;
        java.util.Iterator $r3;
        boolean z0, $z1;
        java.lang.Object $r4;
        java.lang.String $r5, r6;
        int $i0;

        r0 := @this: org.htmlcleaner.PrettyHtmlSerializer;

        r1 := @parameter0: java.util.List;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        z0 = 1;

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof org.htmlcleaner.ContentNode;

        if $z1 != 0 goto label2;

        return null;

     label2:
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        r6 = $r5;

        if z0 == 0 goto label3;

        r6 = staticinvoke <org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>($r5);

     label3:
        z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if z0 != 0 goto label4;

        r6 = staticinvoke <org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>(r6);

     label4:
        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("\n");

        if $i0 >= 0 goto label6;

        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("\r");

        if $i0 >= 0 goto label6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        z0 = 0;

        goto label1;

     label5:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label6:
        return null;
    }
    protected void serialize(org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException
    {
        org.htmlcleaner.PrettyHtmlSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.io.Writer $r2;

        r0 := @this: org.htmlcleaner.PrettyHtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: void serializePrettyHtml(org.htmlcleaner.TagNode,java.io.Writer,int,boolean,boolean)>($r1, $r2, 0, 0, 1);

        return;
    }
    protected void serializePrettyHtml(org.htmlcleaner.TagNode, java.io.Writer, int, boolean, boolean) throws java.io.IOException
    {
        org.htmlcleaner.PrettyHtmlSerializer r0;
        org.htmlcleaner.TagNode $r1, $r9;
        java.io.Writer $r2;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r3;
        java.lang.String $r4, r5, $r6, $r10;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        char $c2;
        org.htmlcleaner.CommentNode r11;

        r0 := @this: org.htmlcleaner.PrettyHtmlSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.io.Writer;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $z2 = staticinvoke <org.htmlcleaner.Utils: boolean isEmptyString(java.lang.Object)>($r4);

        if $z2 == 0 goto label10;

        r5 = "";

     label01:
        if $z0 != 0 goto label03;

        if $z1 != 0 goto label02;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

     label02:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r5);

     label03:
        virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>($r1, $r2, 1);

        if $z0 != 0 goto label04;

        $r6 = "pre";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label11;

     label04:
        $z0 = 1;

     label05:
        $z1 = 0;

        $z3 = virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>($r1);

        if $z3 != 0 goto label34;

        $r4 = specialinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String getSingleLineOfChildren(java.util.List)>($r3);

        $z3 = virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>($r1);

        if $z0 != 0 goto label13;

        if $r4 == null goto label13;

        $z2 = virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>($r1);

        if $z2 != 0 goto label12;

        $r6 = virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String escapeText(java.lang.String)>($r4);

     label06:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r6);

     label07:
        if $r4 != null goto label09;

        if $z0 != 0 goto label09;

        if $z1 != 0 goto label08;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

     label08:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(r5);

     label09:
        virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>($r1, $r2, 0);

        return;

     label10:
        r5 = specialinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String getIndent(int)>($i0);

        goto label01;

     label11:
        $z0 = 0;

        goto label05;

     label12:
        $r6 = $r4;

        goto label06;

     label13:
        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label07;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $z4 = $r8 instanceof org.htmlcleaner.TagNode;

        if $z4 == 0 goto label17;

        $r9 = (org.htmlcleaner.TagNode) $r8;

        if $z2 == 0 goto label16;

        $i1 = $i0;

     label15:
        virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: void serializePrettyHtml(org.htmlcleaner.TagNode,java.io.Writer,int,boolean,boolean)>($r9, $r2, $i1, $z0, $z1);

        $z1 = 0;

        goto label14;

     label16:
        $i1 = $i0 + 1;

        goto label15;

     label17:
        $z4 = $r8 instanceof org.htmlcleaner.ContentNode;

        if $z4 == 0 goto label28;

        if $z3 == 0 goto label20;

        $r6 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

     label18:
        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 <= 0 goto label14;

        if $z3 != 0 goto label19;

        if $z0 == 0 goto label21;

     label19:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r6);

        goto label14;

     label20:
        $r6 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String escapeText(java.lang.String)>($r6);

        goto label18;

     label21:
        $c2 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        $z4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z4 == 0 goto label26;

        if $z1 != 0 goto label22;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

        $z1 = 0;

     label22:
        $r10 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 <= 0 goto label25;

        $r6 = staticinvoke <org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>($r6);

        if $z2 == 0 goto label24;

        $i1 = $i0;

     label23:
        $r6 = specialinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>($r6, $i1);

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r6);

        goto label14;

     label24:
        $i1 = $i0 + 1;

        goto label23;

     label25:
        $z1 = 1;

        goto label14;

     label26:
        $r10 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 <= 0 goto label27;

        $r6 = staticinvoke <org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>($r6);

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r6);

     label27:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label14;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

        $z1 = 1;

        goto label14;

     label28:
        $z4 = $r8 instanceof org.htmlcleaner.CommentNode;

        if $z4 == 0 goto label14;

        if $z1 != 0 goto label29;

        if $z0 != 0 goto label29;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

        $z1 = 0;

     label29:
        r11 = (org.htmlcleaner.CommentNode) $r8;

        $r6 = virtualinvoke r11.<org.htmlcleaner.CommentNode: java.lang.String getCommentedContent()>();

        $r10 = $r6;

        if $z3 == 0 goto label31;

     label30:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r10);

        goto label14;

     label31:
        if $z2 == 0 goto label33;

        $i1 = $i0;

     label32:
        $r10 = specialinvoke r0.<org.htmlcleaner.PrettyHtmlSerializer: java.lang.String getIndentedText(java.lang.String,int)>($r6, $i1);

        goto label30;

     label33:
        $i1 = $i0 + 1;

        goto label32;

     label34:
        return;
    }
