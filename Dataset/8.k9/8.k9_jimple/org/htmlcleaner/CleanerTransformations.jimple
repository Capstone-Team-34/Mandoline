org.htmlcleaner.CleanerTransformations extends java.lang.Object
private org.htmlcleaner.TagTransformation globalTransformations
private java.util.Map mappings
    public void <init>()
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.util.HashMap $r1;
        org.htmlcleaner.TagTransformation $r2;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.htmlcleaner.CleanerTransformations: java.util.Map mappings> = $r1;

        $r2 = new org.htmlcleaner.TagTransformation;

        specialinvoke $r2.<org.htmlcleaner.TagTransformation: void <init>()>();

        r0.<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation globalTransformations> = $r2;

        return;
    }
    public void <init>(java.util.Map)
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.util.Map $r1;
        java.util.HashMap $r2;
        org.htmlcleaner.TagTransformation $r3;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.htmlcleaner.CleanerTransformations: java.util.Map mappings> = $r2;

        $r3 = new org.htmlcleaner.TagTransformation;

        specialinvoke $r3.<org.htmlcleaner.TagTransformation: void <init>()>();

        r0.<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation globalTransformations> = $r3;

        virtualinvoke r0.<org.htmlcleaner.CleanerTransformations: void updateTagTransformations(java.util.Map)>($r1);

        return;
    }
    public void addGlobalTransformation(org.htmlcleaner.AttributeTransformation)
    {
        org.htmlcleaner.CleanerTransformations r0;
        org.htmlcleaner.AttributeTransformation $r1;
        org.htmlcleaner.TagTransformation $r2;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: org.htmlcleaner.AttributeTransformation;

        $r2 = r0.<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation globalTransformations>;

        virtualinvoke $r2.<org.htmlcleaner.TagTransformation: void addAttributePatternTransformation(org.htmlcleaner.AttributeTransformation)>($r1);

        return;
    }
    public void addTransformation(org.htmlcleaner.TagTransformation)
    {
        org.htmlcleaner.CleanerTransformations r0;
        org.htmlcleaner.TagTransformation $r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: org.htmlcleaner.TagTransformation;

        if $r1 == null goto label1;

        $r2 = r0.<org.htmlcleaner.CleanerTransformations: java.util.Map mappings>;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagTransformation: java.lang.String getSourceTag()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

     label1:
        return;
    }
    public void clear()
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.util.Map $r1;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 = r0.<org.htmlcleaner.CleanerTransformations: java.util.Map mappings>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }
    public java.lang.String getTagName(java.lang.String)
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.lang.String $r1;
        boolean $z0;
        org.htmlcleaner.TagTransformation $r2;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.htmlcleaner.CleanerTransformations: boolean hasTransformationForTag(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<org.htmlcleaner.TagTransformation: java.lang.String getDestTag()>();

     label1:
        return $r1;
    }
    public org.htmlcleaner.TagTransformation getTransformation(java.lang.String)
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.htmlcleaner.TagTransformation $r4;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = r0.<org.htmlcleaner.CleanerTransformations: java.util.Map mappings>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.htmlcleaner.TagTransformation) $r3;

        return $r4;

     label1:
        return null;
    }
    public boolean hasTransformationForTag(java.lang.String)
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.lang.String $r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = r0.<org.htmlcleaner.CleanerTransformations: java.util.Map mappings>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.util.Map transformAttributes(java.lang.String, java.util.Map)
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.lang.String $r1;
        java.util.Map r2;
        org.htmlcleaner.TagTransformation $r3;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 = virtualinvoke r0.<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>($r1);

        if $r3 == null goto label2;

        r2 = virtualinvoke $r3.<org.htmlcleaner.TagTransformation: java.util.Map applyTagTransformations(java.util.Map)>(r2);

     label1:
        $r3 = r0.<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation globalTransformations>;

        r2 = virtualinvoke $r3.<org.htmlcleaner.TagTransformation: java.util.Map applyTagTransformations(java.util.Map)>(r2);

        return r2;

     label2:
        goto label1;
    }
    public void updateTagTransformations(java.lang.String, java.lang.String)
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.lang.String $r1, $r2, r4, $r6;
        org.htmlcleaner.TagTransformation r3;
        int $i0;
        boolean z0;
        java.lang.String[] $r5;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        if $i0 > 0 goto label5;

        r4 = null;

        z0 = 1;

        if $r2 == null goto label3;

        $r5 = staticinvoke <org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>($r2, ",;");

        $i0 = lengthof $r5;

        if $i0 <= 0 goto label1;

        r4 = $r5[0];

     label1:
        $i0 = lengthof $r5;

        if $i0 <= 1 goto label3;

        $r2 = "true";

        $r6 = $r5[1];

        z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if z0 != 0 goto label2;

        $r2 = "yes";

        $r6 = $r5[1];

        z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if z0 != 0 goto label2;

        $r2 = "1";

        $r6 = $r5[1];

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if z0 == 0 goto label4;

     label2:
        z0 = 1;

     label3:
        r3 = new org.htmlcleaner.TagTransformation;

        specialinvoke r3.<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>($r1, r4, z0);

        virtualinvoke r0.<org.htmlcleaner.CleanerTransformations: void addTransformation(org.htmlcleaner.TagTransformation)>(r3);

        return;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r5 = staticinvoke <org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>($r1, ".");

        $r1 = $r5[0];

        r3 = virtualinvoke r0.<org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>($r1);

        if r3 == null goto label6;

        $r1 = $r5[1];

        virtualinvoke r3.<org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String,java.lang.String)>($r1, $r2);

     label6:
        return;
    }
    public void updateTagTransformations(java.util.Map)
    {
        org.htmlcleaner.CleanerTransformations r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry r5;
        java.lang.String r6, r7;

        r0 := @this: org.htmlcleaner.CleanerTransformations;

        $r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.lang.String) $r4;

        virtualinvoke r0.<org.htmlcleaner.CleanerTransformations: void updateTagTransformations(java.lang.String,java.lang.String)>(r6, r7);

        goto label1;

     label2:
        return;
    }
