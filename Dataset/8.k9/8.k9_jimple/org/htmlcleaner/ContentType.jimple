org.htmlcleaner.ContentType extends java.lang.Enum
private static final org.htmlcleaner.ContentType[] $VALUES
public static final enum org.htmlcleaner.ContentType all
public static final enum org.htmlcleaner.ContentType none
public static final enum org.htmlcleaner.ContentType text
private final java.lang.String dbCode
    static void <clinit>()
    {
        org.htmlcleaner.ContentType $r0;
        org.htmlcleaner.ContentType[] $r1;

        $r0 = new org.htmlcleaner.ContentType;

        specialinvoke $r0.<org.htmlcleaner.ContentType: void <init>(java.lang.String,int,java.lang.String)>("all", 0, "all");

        <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType all> = $r0;

        $r0 = new org.htmlcleaner.ContentType;

        specialinvoke $r0.<org.htmlcleaner.ContentType: void <init>(java.lang.String,int,java.lang.String)>("none", 1, "none");

        <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType none> = $r0;

        $r0 = new org.htmlcleaner.ContentType;

        specialinvoke $r0.<org.htmlcleaner.ContentType: void <init>(java.lang.String,int,java.lang.String)>("text", 2, "text");

        <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType text> = $r0;

        $r1 = newarray (org.htmlcleaner.ContentType)[3];

        $r0 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType all>;

        $r1[0] = $r0;

        $r0 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType none>;

        $r1[1] = $r0;

        $r0 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType text>;

        $r1[2] = $r0;

        <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int, java.lang.String)
    {
        org.htmlcleaner.ContentType r0;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @this: org.htmlcleaner.ContentType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<org.htmlcleaner.ContentType: java.lang.String dbCode> = $r2;

        return;
    }
    public static org.htmlcleaner.ContentType toValue(java.lang.Object)
    {
        java.lang.Object $r0;
        org.htmlcleaner.ContentType r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.String $r2, $r4;
        org.htmlcleaner.ContentType[] $r3;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof org.htmlcleaner.ContentType;

        if $z0 == 0 goto label1;

        r1 = (org.htmlcleaner.ContentType) $r0;

        return r1;

     label1:
        if $r0 == null goto label5;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r3 = staticinvoke <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType[] values()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        r1 = $r3[$i1];

        $r4 = virtualinvoke r1.<org.htmlcleaner.ContentType: java.lang.String getDbCode()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke r1.<org.htmlcleaner.ContentType: java.lang.String name()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label4;

     label3:
        return r1;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        return null;
    }
    public static org.htmlcleaner.ContentType valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        org.htmlcleaner.ContentType $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/htmlcleaner/ContentType;", $r0);

        $r2 = (org.htmlcleaner.ContentType) $r1;

        return $r2;
    }
    public static org.htmlcleaner.ContentType[] values()
    {
        java.lang.Object $r0;
        org.htmlcleaner.ContentType[] $r1;

        $r1 = <org.htmlcleaner.ContentType: org.htmlcleaner.ContentType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.htmlcleaner.ContentType[]) $r0;

        return $r1;
    }
    public java.lang.String getDbCode()
    {
        org.htmlcleaner.ContentType r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.ContentType;

        r1 = r0.<org.htmlcleaner.ContentType: java.lang.String dbCode>;

        return r1;
    }
