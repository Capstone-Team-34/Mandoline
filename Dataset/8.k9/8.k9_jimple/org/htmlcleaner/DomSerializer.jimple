org.htmlcleaner.DomSerializer extends java.lang.Object
protected boolean escapeXml
protected org.htmlcleaner.CleanerProperties props
    public void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.DomSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.DomSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<org.htmlcleaner.DomSerializer: void <init>(org.htmlcleaner.CleanerProperties,boolean)>($r1, 1);

        return;
    }
    public void <init>(org.htmlcleaner.CleanerProperties, boolean)
    {
        org.htmlcleaner.DomSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.DomSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.htmlcleaner.DomSerializer: boolean escapeXml> = 1;

        r0.<org.htmlcleaner.DomSerializer: org.htmlcleaner.CleanerProperties props> = $r1;

        r0.<org.htmlcleaner.DomSerializer: boolean escapeXml> = $z0;

        return;
    }
    private void createSubnodes(org.w3c.dom.Document, org.w3c.dom.Element, java.util.List)
    {
        org.htmlcleaner.DomSerializer r0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Element $r2, $r16;
        java.util.List r3;
        java.util.Iterator $r4, $r19;
        boolean $z0, $z1;
        java.lang.Object $r5;
        org.htmlcleaner.CommentNode r6;
        java.lang.String $r7, r13;
        org.w3c.dom.Comment $r8;
        org.htmlcleaner.CleanerProperties $r9;
        org.htmlcleaner.CData r10;
        org.w3c.dom.CDATASection $r11;
        org.htmlcleaner.ContentNode r12;
        org.w3c.dom.Text $r14;
        org.htmlcleaner.TagNode r15;
        java.util.Map $r17;
        java.util.Set $r18;
        java.util.Map$Entry r20;

        r0 := @this: org.htmlcleaner.DomSerializer;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: java.util.List;

        if r3 == null goto label12;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r5 instanceof org.htmlcleaner.CommentNode;

        if $z0 == 0 goto label02;

        r6 = (org.htmlcleaner.CommentNode) $r5;

        $r7 = virtualinvoke r6.<org.htmlcleaner.CommentNode: java.lang.String getContent()>();

        $r8 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Comment createComment(java.lang.String)>($r7);

        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        goto label01;

     label02:
        $z0 = $r5 instanceof org.htmlcleaner.CData;

        if $z0 == 0 goto label03;

        $r9 = r0.<org.htmlcleaner.DomSerializer: org.htmlcleaner.CleanerProperties props>;

        $r7 = interfaceinvoke $r2.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r9.<org.htmlcleaner.CleanerProperties: boolean isUseCdataFor(java.lang.String)>($r7);

        if $z0 == 0 goto label01;

        r10 = (org.htmlcleaner.CData) $r5;

        $r7 = virtualinvoke r0.<org.htmlcleaner.DomSerializer: java.lang.String outputCData(org.htmlcleaner.CData)>(r10);

        $r11 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r7);

        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

        goto label01;

     label03:
        $z0 = $r5 instanceof org.htmlcleaner.ContentNode;

        if $z0 == 0 goto label07;

        r12 = (org.htmlcleaner.ContentNode) $r5;

        $r7 = virtualinvoke r12.<org.htmlcleaner.ContentNode: java.lang.String getContent()>();

        r13 = $r7;

        $z0 = virtualinvoke r0.<org.htmlcleaner.DomSerializer: boolean dontEscape(org.w3c.dom.Element)>($r2);

        $z1 = r0.<org.htmlcleaner.DomSerializer: boolean escapeXml>;

        if $z1 == 0 goto label04;

        if $z0 != 0 goto label04;

        $r9 = r0.<org.htmlcleaner.DomSerializer: org.htmlcleaner.CleanerProperties props>;

        r13 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>($r7, $r9, 1);

     label04:
        if $z0 == 0 goto label06;

        $r14 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>(r13);

     label05:
        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

        goto label01;

     label06:
        $r14 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r13);

        goto label05;

     label07:
        $z0 = $r5 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label11;

        r15 = (org.htmlcleaner.TagNode) $r5;

        $r7 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r16 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>($r7);

        $r17 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set entrySet()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r5;

        $r5 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (java.lang.String) $r5;

        $z0 = r0.<org.htmlcleaner.DomSerializer: boolean escapeXml>;

        if $z0 == 0 goto label09;

        $r9 = r0.<org.htmlcleaner.DomSerializer: org.htmlcleaner.CleanerProperties props>;

        r13 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>(r13, $r9, 1);

     label09:
        interfaceinvoke $r16.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>($r7, r13);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("id");

        if $z0 == 0 goto label08;

        interfaceinvoke $r16.<org.w3c.dom.Element: void setIdAttribute(java.lang.String,boolean)>($r7, 1);

        goto label08;

     label10:
        r3 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        specialinvoke r0.<org.htmlcleaner.DomSerializer: void createSubnodes(org.w3c.dom.Document,org.w3c.dom.Element,java.util.List)>($r1, $r16, r3);

        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r16);

        goto label01;

     label11:
        $z0 = $r5 instanceof java.util.List;

        if $z0 == 0 goto label01;

        r3 = (java.util.List) $r5;

        specialinvoke r0.<org.htmlcleaner.DomSerializer: void createSubnodes(org.w3c.dom.Document,org.w3c.dom.Element,java.util.List)>($r1, $r2, r3);

        goto label01;

     label12:
        return;
    }
    public org.w3c.dom.Document createDOM(org.htmlcleaner.TagNode) throws javax.xml.parsers.ParserConfigurationException
    {
        org.htmlcleaner.DomSerializer r0;
        org.htmlcleaner.TagNode $r1;
        javax.xml.parsers.DocumentBuilderFactory $r2;
        javax.xml.parsers.DocumentBuilder $r3;
        org.w3c.dom.DOMImplementation $r4;
        org.htmlcleaner.DoctypeToken $r5;
        java.lang.String $r6, r7, $r8, $r9;
        org.w3c.dom.DocumentType $r10;
        boolean $z0;
        org.w3c.dom.Document $r11, $r19;
        java.util.Map $r12;
        java.util.Set $r13;
        java.util.Iterator $r14;
        java.lang.Object $r15;
        java.util.Map$Entry r16;
        org.htmlcleaner.CleanerProperties $r17;
        org.w3c.dom.Element $r18;
        java.util.List $r20;

        r0 := @this: org.htmlcleaner.DomSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r3 = virtualinvoke $r2.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r4 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        $r5 = virtualinvoke $r1.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>();

        if $r5 == null goto label6;

        $r5 = virtualinvoke $r1.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>();

        $r6 = virtualinvoke $r5.<org.htmlcleaner.DoctypeToken: java.lang.String getPart1()>();

        r7 = $r6;

        $r5 = virtualinvoke $r1.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>();

        $r8 = virtualinvoke $r5.<org.htmlcleaner.DoctypeToken: java.lang.String getPublicId()>();

        $r5 = virtualinvoke $r1.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>();

        $r9 = virtualinvoke $r5.<org.htmlcleaner.DoctypeToken: java.lang.String getSystemId()>();

        if $r6 != null goto label1;

        r7 = "html";

     label1:
        $r10 = interfaceinvoke $r4.<org.w3c.dom.DOMImplementation: org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)>(r7, $r8, $r9);

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("HTML");

        if $z0 == 0 goto label2;

        r7 = "html";

     label2:
        $r6 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getNamespaceURIOnPath(java.lang.String)>("");

        $r11 = interfaceinvoke $r4.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>($r6, r7, $r10);

     label3:
        $r12 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r15;

        $r15 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r15;

        $r15 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.lang.String) $r15;

        $z0 = r0.<org.htmlcleaner.DomSerializer: boolean escapeXml>;

        if $z0 == 0 goto label5;

        $r17 = r0.<org.htmlcleaner.DomSerializer: org.htmlcleaner.CleanerProperties props>;

        $r6 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>($r6, $r17, 1);

     label5:
        $r18 = interfaceinvoke $r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        interfaceinvoke $r18.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>(r7, $r6);

        $z0 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("id");

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke $r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        interfaceinvoke $r18.<org.w3c.dom.Element: void setIdAttribute(java.lang.String,boolean)>(r7, 1);

        goto label4;

     label6:
        $r19 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        $r11 = $r19;

        r7 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r18 = interfaceinvoke $r19.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>(r7);

        interfaceinvoke $r19.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r18);

        goto label3;

     label7:
        $r18 = interfaceinvoke $r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r20 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        specialinvoke r0.<org.htmlcleaner.DomSerializer: void createSubnodes(org.w3c.dom.Document,org.w3c.dom.Element,java.util.List)>($r11, $r18, $r20);

        return $r11;
    }
    protected boolean dontEscape(org.w3c.dom.Element)
    {
        org.htmlcleaner.DomSerializer r0;
        org.w3c.dom.Element $r1;
        org.htmlcleaner.CleanerProperties $r2;
        java.lang.String $r3;
        boolean $z0;
        int $i0;

        r0 := @this: org.htmlcleaner.DomSerializer;

        $r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.htmlcleaner.DomSerializer: org.htmlcleaner.CleanerProperties props>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: boolean isUseCdataFor(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r1.<org.w3c.dom.Element: boolean hasChildNodes()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getTextContent()>();

        if $r3 == null goto label1;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getTextContent()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    protected boolean isScriptOrStyle(org.w3c.dom.Element)
    {
        org.htmlcleaner.DomSerializer r0;
        org.w3c.dom.Element $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.htmlcleaner.DomSerializer;

        $r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r3 = "script";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r3 = "style";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    protected java.lang.String outputCData(org.htmlcleaner.CData)
    {
        org.htmlcleaner.DomSerializer r0;
        org.htmlcleaner.CData $r1;
        java.lang.String $r2;

        r0 := @this: org.htmlcleaner.DomSerializer;

        $r1 := @parameter0: org.htmlcleaner.CData;

        $r2 = virtualinvoke $r1.<org.htmlcleaner.CData: java.lang.String getContentWithoutStartAndEndTokens()>();

        return $r2;
    }
