org.htmlcleaner.HtmlCleaner$OpenTags extends java.lang.Object
private org.htmlcleaner.HtmlCleaner$TagPos last
private java.util.List list
private java.util.Set set
final org.htmlcleaner.HtmlCleaner this$0
    void <init>(org.htmlcleaner.HtmlCleaner)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        org.htmlcleaner.HtmlCleaner $r1;
        java.util.ArrayList $r2;
        java.util.HashSet $r3;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter0: org.htmlcleaner.HtmlCleaner;

        r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.Set set> = $r3;

        return;
    }
    static boolean access$1100(org.htmlcleaner.HtmlCleaner$OpenTags)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        boolean $z0;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $z0 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: boolean isEmpty()>();

        return $z0;
    }
    static boolean access$1200(org.htmlcleaner.HtmlCleaner$OpenTags, java.util.Set)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        java.util.Set $r1;
        boolean $z0;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter1: java.util.Set;

        $z0 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: boolean someAlreadyOpen(java.util.Set)>($r1);

        return $z0;
    }
    static boolean access$1300(org.htmlcleaner.HtmlCleaner$OpenTags, java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagEncountered(java.lang.String)>($r1);

        return $z0;
    }
    static void access$1400(org.htmlcleaner.HtmlCleaner$OpenTags, java.lang.String, int)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: void addTag(java.lang.String,int)>($r1, $i0);

        return;
    }
    static void access$1500(org.htmlcleaner.HtmlCleaner$OpenTags, java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>($r1);

        return;
    }
    static org.htmlcleaner.HtmlCleaner$TagPos access$1600(org.htmlcleaner.HtmlCleaner$OpenTags)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        org.htmlcleaner.HtmlCleaner$TagPos $r1;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findFirstTagPos()>();

        return $r1;
    }
    static boolean access$500(org.htmlcleaner.HtmlCleaner$OpenTags, java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagExists(java.lang.String)>($r1);

        return $z0;
    }
    static org.htmlcleaner.HtmlCleaner$TagPos access$600(org.htmlcleaner.HtmlCleaner$OpenTags, java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        java.lang.String $r1;
        org.htmlcleaner.HtmlCleaner$TagPos $r2;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>($r1);

        return $r2;
    }
    static java.util.List access$700(org.htmlcleaner.HtmlCleaner$OpenTags)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        java.util.List r1;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        r1 = $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        return r1;
    }
    static org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        org.htmlcleaner.HtmlCleaner$TagPos $r1;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos getLastTagPos()>();

        return $r1;
    }
    static org.htmlcleaner.HtmlCleaner$TagPos access$900(org.htmlcleaner.HtmlCleaner$OpenTags)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags $r0;
        org.htmlcleaner.HtmlCleaner$TagPos $r1;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 = specialinvoke $r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>();

        return $r1;
    }
    private void addTag(java.lang.String, int)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        java.lang.String $r1;
        int $i0;
        org.htmlcleaner.HtmlCleaner$TagPos $r2;
        org.htmlcleaner.HtmlCleaner $r3;
        java.util.List $r4;
        java.util.Set $r5;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new org.htmlcleaner.HtmlCleaner$TagPos;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner this$0>;

        specialinvoke $r2.<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>($r3, $i0, $r1);

        r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos last> = $r2;

        $r4 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos last>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r5 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.Set set>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }
    private org.htmlcleaner.HtmlCleaner$TagPos findFirstTagPos()
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        java.util.List $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.htmlcleaner.HtmlCleaner$TagPos $r3;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.htmlcleaner.HtmlCleaner$TagPos) $r2;

        return $r3;
    }
    private org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        java.lang.String $r1, $r11;
        java.util.List $r2, $r3;
        int $i0;
        java.util.ListIterator $r4;
        org.htmlcleaner.HtmlCleaner $r5;
        org.htmlcleaner.ITagInfoProvider $r6;
        org.htmlcleaner.TagInfo $r7;
        boolean $z0;
        java.lang.Thread $r8;
        java.lang.Object $r9;
        org.htmlcleaner.HtmlCleaner$TagPos r10;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label3;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        $r5 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner this$0>;

        $r6 = virtualinvoke $r5.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>();

        $r7 = interfaceinvoke $r6.<org.htmlcleaner.ITagInfoProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>($r1);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label3;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r8.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner this$0>;

        staticinvoke <org.htmlcleaner.HtmlCleaner: void access$300(org.htmlcleaner.HtmlCleaner)>($r5);

        return null;

     label2:
        $r9 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object previous()>();

        r10 = (org.htmlcleaner.HtmlCleaner$TagPos) $r9;

        $r11 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$000(org.htmlcleaner.HtmlCleaner$TagPos)>(r10);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label4;

        if $r7 == null goto label1;

        $r11 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$000(org.htmlcleaner.HtmlCleaner$TagPos)>(r10);

        $z0 = virtualinvoke $r7.<org.htmlcleaner.TagInfo: boolean isFatalTag(java.lang.String)>($r11);

        if $z0 == 0 goto label1;

     label3:
        return null;

     label4:
        return r10;
    }
    private org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        org.htmlcleaner.HtmlCleaner$TagPos r1, r2;
        boolean $z0;
        java.util.List $r3, $r4;
        int $i0;
        java.util.ListIterator $r5;
        java.lang.Thread $r6;
        org.htmlcleaner.HtmlCleaner $r7;
        java.lang.Object $r8;
        org.htmlcleaner.TagInfo $r9;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        r1 = null;

        r2 = null;

        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner$OpenTags: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $r4 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r5.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label5;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r6.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner this$0>;

        staticinvoke <org.htmlcleaner.HtmlCleaner: void access$300(org.htmlcleaner.HtmlCleaner)>($r7);

        return null;

     label2:
        $r8 = interfaceinvoke $r5.<java.util.ListIterator: java.lang.Object previous()>();

        r1 = (org.htmlcleaner.HtmlCleaner$TagPos) $r8;

        $r9 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$400(org.htmlcleaner.HtmlCleaner$TagPos)>(r1);

        if $r9 == null goto label3;

        $r9 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$400(org.htmlcleaner.HtmlCleaner$TagPos)>(r1);

        $z0 = virtualinvoke $r9.<org.htmlcleaner.TagInfo: boolean allowsAnything()>();

        if $z0 == 0 goto label4;

     label3:
        if r2 == null goto label4;

        return r2;

     label4:
        r2 = r1;

        goto label1;

     label5:
        return r1;
    }
    private org.htmlcleaner.HtmlCleaner$TagPos getLastTagPos()
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        org.htmlcleaner.HtmlCleaner$TagPos r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        r1 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos last>;

        return r1;
    }
    private boolean isEmpty()
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        boolean $z0;
        java.util.List $r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }
    private void removeTag(java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        java.lang.String $r1, $r9;
        java.util.List $r2, $r3;
        int $i0;
        java.util.ListIterator $r4;
        boolean $z0;
        java.lang.Thread $r5;
        org.htmlcleaner.HtmlCleaner $r6;
        org.htmlcleaner.HtmlCleaner$TagPos $r7;
        java.lang.Object $r8;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label2;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r5.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label4;

        $r6 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner this$0>;

        staticinvoke <org.htmlcleaner.HtmlCleaner: void access$300(org.htmlcleaner.HtmlCleaner)>($r6);

     label2:
        $r2 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r7 = null;

     label3:
        r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos last> = $r7;

        return;

     label4:
        $r8 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object previous()>();

        $r7 = (org.htmlcleaner.HtmlCleaner$TagPos) $r8;

        $r9 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$000(org.htmlcleaner.HtmlCleaner$TagPos)>($r7);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        interfaceinvoke $r4.<java.util.ListIterator: void remove()>();

        goto label2;

     label5:
        $r2 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r8 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r7 = (org.htmlcleaner.HtmlCleaner$TagPos) $r8;

        goto label3;
    }
    private boolean someAlreadyOpen(java.util.Set)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        java.util.Set r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.htmlcleaner.HtmlCleaner$TagPos r5;
        java.lang.String $r6;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List list>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.htmlcleaner.HtmlCleaner$TagPos) $r4;

        $r6 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$000(org.htmlcleaner.HtmlCleaner$TagPos)>(r5);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    private boolean tagEncountered(java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner$OpenTags: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    private boolean tagExists(java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner$OpenTags r0;
        java.lang.String $r1;
        org.htmlcleaner.HtmlCleaner$TagPos $r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner$OpenTags;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }
