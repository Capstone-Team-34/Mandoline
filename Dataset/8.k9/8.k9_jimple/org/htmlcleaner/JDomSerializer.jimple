org.htmlcleaner.JDomSerializer extends java.lang.Object
protected boolean escapeXml
private org.jdom2.DefaultJDOMFactory factory
protected org.htmlcleaner.CleanerProperties props
    public void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.JDomSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.JDomSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<org.htmlcleaner.JDomSerializer: void <init>(org.htmlcleaner.CleanerProperties,boolean)>($r1, 1);

        return;
    }
    public void <init>(org.htmlcleaner.CleanerProperties, boolean)
    {
        org.htmlcleaner.JDomSerializer r0;
        org.htmlcleaner.CleanerProperties $r1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.JDomSerializer;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.htmlcleaner.JDomSerializer: boolean escapeXml> = 1;

        r0.<org.htmlcleaner.JDomSerializer: org.htmlcleaner.CleanerProperties props> = $r1;

        r0.<org.htmlcleaner.JDomSerializer: boolean escapeXml> = $z0;

        return;
    }
    private org.jdom2.Element createElement(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.JDomSerializer r0;
        org.htmlcleaner.TagNode $r1;
        java.lang.String $r2, r3, $r5, r7;
        org.htmlcleaner.CleanerProperties $r4;
        boolean $z0;
        java.util.Map $r6;
        java.lang.Object $r8;
        org.jdom2.Namespace $r9;
        org.jdom2.DefaultJDOMFactory $r10;
        org.jdom2.Element $r11;

        r0 := @this: org.htmlcleaner.JDomSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        r3 = $r2;

        $r4 = r0.<org.htmlcleaner.JDomSerializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke $r4.<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>();

        $r5 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlNSPrefix(java.lang.String)>($r2);

        $r6 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getNamespaceDeclarations()>();

        r7 = null;

        if $r5 == null goto label06;

        r3 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlName(java.lang.String)>($r2);

        if $z0 == 0 goto label03;

        if $r6 == null goto label01;

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.String) $r8;

     label01:
        if r7 != null goto label02;

        r7 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getNamespaceURIOnPath(java.lang.String)>($r5);

     label02:
        if r7 != null goto label03;

        r7 = $r5;

     label03:
        if $z0 == 0 goto label09;

        if r7 == null goto label09;

        if $r5 != null goto label08;

        $r9 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String)>(r7);

     label04:
        $r10 = r0.<org.htmlcleaner.JDomSerializer: org.jdom2.DefaultJDOMFactory factory>;

        $r11 = virtualinvoke $r10.<org.jdom2.DefaultJDOMFactory: org.jdom2.Element element(java.lang.String,org.jdom2.Namespace)>(r3, $r9);

     label05:
        if $z0 == 0 goto label10;

        specialinvoke r0.<org.htmlcleaner.JDomSerializer: void defineNamespaceDeclarations(org.htmlcleaner.TagNode,org.jdom2.Element)>($r1, $r11);

        return $r11;

     label06:
        if $z0 == 0 goto label03;

        if $r6 == null goto label07;

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("");

        r7 = (java.lang.String) $r8;

     label07:
        if r7 != null goto label03;

        r7 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getNamespaceURIOnPath(java.lang.String)>($r5);

        goto label03;

     label08:
        $r9 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r5, r7);

        goto label04;

     label09:
        $r10 = r0.<org.htmlcleaner.JDomSerializer: org.jdom2.DefaultJDOMFactory factory>;

        $r11 = virtualinvoke $r10.<org.jdom2.DefaultJDOMFactory: org.jdom2.Element element(java.lang.String)>(r3);

        goto label05;

     label10:
        return $r11;
    }
    private void createSubnodes(org.jdom2.Element, java.util.List)
    {
        org.htmlcleaner.JDomSerializer r0;
        org.jdom2.Element $r1, $r15;
        java.util.List r2;
        java.util.Iterator $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.htmlcleaner.CommentNode r5;
        org.jdom2.DefaultJDOMFactory $r6;
        java.lang.String $r7, $r9, r10;
        org.jdom2.Comment $r8;
        org.htmlcleaner.CleanerProperties $r11;
        org.htmlcleaner.CData r12;
        org.jdom2.Text r13;
        org.htmlcleaner.TagNode r14;

        r0 := @this: org.htmlcleaner.JDomSerializer;

        $r1 := @parameter0: org.jdom2.Element;

        r2 := @parameter1: java.util.List;

        if r2 == null goto label9;

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.htmlcleaner.CommentNode;

        if $z0 == 0 goto label2;

        r5 = (org.htmlcleaner.CommentNode) $r4;

        $r6 = r0.<org.htmlcleaner.JDomSerializer: org.jdom2.DefaultJDOMFactory factory>;

        $r7 = virtualinvoke r5.<org.htmlcleaner.CommentNode: java.lang.String getContent()>();

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<org.jdom2.DefaultJDOMFactory: org.jdom2.Comment comment(java.lang.String)>($r7);

        virtualinvoke $r1.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r8);

        goto label1;

     label2:
        $z0 = $r4 instanceof org.htmlcleaner.ContentNode;

        if $z0 == 0 goto label7;

        $r7 = virtualinvoke $r1.<org.jdom2.Element: java.lang.String getName()>();

        $r9 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        r10 = $r9;

        $r11 = r0.<org.htmlcleaner.JDomSerializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: boolean isUseCdataFor(java.lang.String)>($r7);

        $z1 = r0.<org.htmlcleaner.JDomSerializer: boolean escapeXml>;

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label3;

        $r11 = r0.<org.htmlcleaner.JDomSerializer: org.htmlcleaner.CleanerProperties props>;

        r10 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>($r9, $r11, 1);

     label3:
        if $z0 == 0 goto label4;

        $z1 = $r4 instanceof org.htmlcleaner.CData;

        if $z1 == 0 goto label4;

        r12 = (org.htmlcleaner.CData) $r4;

        r10 = virtualinvoke r12.<org.htmlcleaner.CData: java.lang.String getContentWithoutStartAndEndTokens()>();

     label4:
        if $z0 == 0 goto label6;

        $r6 = r0.<org.htmlcleaner.JDomSerializer: org.jdom2.DefaultJDOMFactory factory>;

        r13 = virtualinvoke $r6.<org.jdom2.DefaultJDOMFactory: org.jdom2.CDATA cdata(java.lang.String)>(r10);

     label5:
        virtualinvoke $r1.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>(r13);

        goto label1;

     label6:
        $r6 = r0.<org.htmlcleaner.JDomSerializer: org.jdom2.DefaultJDOMFactory factory>;

        r13 = virtualinvoke $r6.<org.jdom2.DefaultJDOMFactory: org.jdom2.Text text(java.lang.String)>(r10);

        goto label5;

     label7:
        $z0 = $r4 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label8;

        r14 = (org.htmlcleaner.TagNode) $r4;

        $r15 = specialinvoke r0.<org.htmlcleaner.JDomSerializer: org.jdom2.Element createElement(org.htmlcleaner.TagNode)>(r14);

        specialinvoke r0.<org.htmlcleaner.JDomSerializer: void setAttributes(org.htmlcleaner.TagNode,org.jdom2.Element)>(r14, $r15);

        r2 = virtualinvoke r14.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        specialinvoke r0.<org.htmlcleaner.JDomSerializer: void createSubnodes(org.jdom2.Element,java.util.List)>($r15, r2);

        virtualinvoke $r1.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r15);

        goto label1;

     label8:
        $z0 = $r4 instanceof java.util.List;

        if $z0 == 0 goto label1;

        r2 = (java.util.List) $r4;

        specialinvoke r0.<org.htmlcleaner.JDomSerializer: void createSubnodes(org.jdom2.Element,java.util.List)>($r1, r2);

        goto label1;

     label9:
        return;
    }
    private void defineNamespaceDeclarations(org.htmlcleaner.TagNode, org.jdom2.Element)
    {
        org.htmlcleaner.JDomSerializer r0;
        org.htmlcleaner.TagNode $r1;
        org.jdom2.Element $r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.String r8, r9, $r10;
        org.jdom2.Namespace $r11;

        r0 := @this: org.htmlcleaner.JDomSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: org.jdom2.Element;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getNamespaceDeclarations()>();

        if $r3 == null goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r6;

        if r8 == null goto label2;

        $r10 = "";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label4;

     label2:
        $r11 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String)>(r9);

     label3:
        virtualinvoke $r2.<org.jdom2.Element: boolean addNamespaceDeclaration(org.jdom2.Namespace)>($r11);

        goto label1;

     label4:
        $r11 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>(r8, r9);

        goto label3;

     label5:
        return;
    }
    private void setAttributes(org.htmlcleaner.TagNode, org.jdom2.Element)
    {
        org.htmlcleaner.JDomSerializer r0;
        org.htmlcleaner.TagNode $r1;
        org.jdom2.Element $r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.String r8, r9, $r11, $r13, r14;
        org.htmlcleaner.CleanerProperties $r10;
        org.jdom2.Namespace r12;

        r0 := @this: org.htmlcleaner.JDomSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: org.jdom2.Element;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r6;

        $z0 = r0.<org.htmlcleaner.JDomSerializer: boolean escapeXml>;

        if $z0 == 0 goto label2;

        $r10 = r0.<org.htmlcleaner.JDomSerializer: org.htmlcleaner.CleanerProperties props>;

        r9 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>(r9, $r10, 1);

     label2:
        $r11 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlNSPrefix(java.lang.String)>(r8);

        r12 = null;

        if $r11 == null goto label4;

        r8 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getXmlName(java.lang.String)>(r8);

        $r10 = r0.<org.htmlcleaner.JDomSerializer: org.htmlcleaner.CleanerProperties props>;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>();

        if $z0 == 0 goto label4;

        $r13 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getNamespaceURIOnPath(java.lang.String)>($r11);

        r14 = $r13;

        if $r13 != null goto label3;

        r14 = $r11;

     label3:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("xml");

        if $z0 != 0 goto label4;

        r12 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r11, r14);

     label4:
        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 != 0 goto label1;

        if r12 != null goto label5;

        virtualinvoke $r2.<org.jdom2.Element: org.jdom2.Element setAttribute(java.lang.String,java.lang.String)>(r8, r9);

        goto label1;

     label5:
        virtualinvoke $r2.<org.jdom2.Element: org.jdom2.Element setAttribute(java.lang.String,java.lang.String,org.jdom2.Namespace)>(r8, r9, r12);

        goto label1;

     label6:
        return;
    }
    public org.jdom2.Document createJDom(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.JDomSerializer r0;
        org.htmlcleaner.TagNode $r1;
        org.jdom2.DefaultJDOMFactory $r2;
        java.lang.String $r3;
        org.jdom2.Element $r4;
        org.jdom2.Document $r5;
        java.util.List $r6;

        r0 := @this: org.htmlcleaner.JDomSerializer;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 = new org.jdom2.DefaultJDOMFactory;

        specialinvoke $r2.<org.jdom2.DefaultJDOMFactory: void <init>()>();

        r0.<org.htmlcleaner.JDomSerializer: org.jdom2.DefaultJDOMFactory factory> = $r2;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = specialinvoke r0.<org.htmlcleaner.JDomSerializer: org.jdom2.Element createElement(org.htmlcleaner.TagNode)>($r1);

        $r2 = r0.<org.htmlcleaner.JDomSerializer: org.jdom2.DefaultJDOMFactory factory>;

        $r5 = virtualinvoke $r2.<org.jdom2.DefaultJDOMFactory: org.jdom2.Document document(org.jdom2.Element)>($r4);

        specialinvoke r0.<org.htmlcleaner.JDomSerializer: void setAttributes(org.htmlcleaner.TagNode,org.jdom2.Element)>($r1, $r4);

        $r6 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        specialinvoke r0.<org.htmlcleaner.JDomSerializer: void createSubnodes(org.jdom2.Element,java.util.List)>($r4, $r6);

        return $r5;
    }
