org.htmlcleaner.TagTransformation extends java.lang.Object
public static java.lang.String VAR_END
public static java.lang.String VAR_START
private java.util.List attributePatternTransformations
private java.util.Map attributeTransformations
private java.lang.String destTag
private boolean preserveSourceAttributes
private java.lang.String sourceTag
    static void <clinit>()
    {
        <org.htmlcleaner.TagTransformation: java.lang.String VAR_START> = "${";

        <org.htmlcleaner.TagTransformation: java.lang.String VAR_END> = "}";

        return;
    }
    public void <init>()
    {
        org.htmlcleaner.TagTransformation r0;
        java.util.LinkedHashMap $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.htmlcleaner.TagTransformation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.htmlcleaner.TagTransformation: java.util.Map attributeTransformations> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations> = $r2;

        r0.<org.htmlcleaner.TagTransformation: boolean preserveSourceAttributes> = 1;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.htmlcleaner.TagTransformation r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String)>($r1, null);

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.htmlcleaner.TagTransformation r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>($r1, $r2, 1);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, boolean)
    {
        org.htmlcleaner.TagTransformation r0;
        java.lang.String $r1, r2, $r5;
        boolean $z0, $z1;
        java.util.LinkedHashMap $r3;
        java.util.ArrayList $r4;

        r0 := @this: org.htmlcleaner.TagTransformation;

        r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.htmlcleaner.TagTransformation: java.util.Map attributeTransformations> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations> = $r4;

        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<org.htmlcleaner.TagTransformation: java.lang.String sourceTag> = $r5;

        if $r1 != null goto label2;

        r0.<org.htmlcleaner.TagTransformation: java.lang.String destTag> = null;

     label1:
        r0.<org.htmlcleaner.TagTransformation: boolean preserveSourceAttributes> = $z0;

        return;

     label2:
        $z1 = staticinvoke <org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>($r1);

        if $z1 == 0 goto label3;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

     label3:
        r0.<org.htmlcleaner.TagTransformation: java.lang.String destTag> = r2;

        goto label1;
    }
    public void addAttributePatternTransformation(java.util.regex.Pattern, java.lang.String)
    {
        org.htmlcleaner.TagTransformation r0;
        java.util.regex.Pattern $r1;
        java.lang.String $r2;
        java.util.List $r3;
        org.htmlcleaner.AttributeTransformationPatternImpl $r4;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 := @parameter0: java.util.regex.Pattern;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations>;

        $r4 = new org.htmlcleaner.AttributeTransformationPatternImpl;

        specialinvoke $r4.<org.htmlcleaner.AttributeTransformationPatternImpl: void <init>(java.util.regex.Pattern,java.util.regex.Pattern,java.lang.String)>($r1, null, $r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }
    public void addAttributePatternTransformation(java.util.regex.Pattern, java.util.regex.Pattern, java.lang.String)
    {
        org.htmlcleaner.TagTransformation r0;
        java.util.regex.Pattern $r1, $r2;
        java.lang.String $r3;
        org.htmlcleaner.AttributeTransformationPatternImpl $r4;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 := @parameter0: java.util.regex.Pattern;

        $r2 := @parameter1: java.util.regex.Pattern;

        $r3 := @parameter2: java.lang.String;

        $r4 = new org.htmlcleaner.AttributeTransformationPatternImpl;

        specialinvoke $r4.<org.htmlcleaner.AttributeTransformationPatternImpl: void <init>(java.util.regex.Pattern,java.util.regex.Pattern,java.lang.String)>($r1, $r2, $r3);

        virtualinvoke r0.<org.htmlcleaner.TagTransformation: void addAttributePatternTransformation(org.htmlcleaner.AttributeTransformation)>($r4);

        return;
    }
    public void addAttributePatternTransformation(org.htmlcleaner.AttributeTransformation)
    {
        org.htmlcleaner.TagTransformation r0;
        org.htmlcleaner.AttributeTransformation $r1;
        java.util.List $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 := @parameter0: org.htmlcleaner.AttributeTransformation;

        $r2 = r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations>;

        if $r2 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations> = $r3;

     label1:
        $r2 = r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void addAttributeTransformation(java.lang.String)
    {
        org.htmlcleaner.TagTransformation r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String,java.lang.String)>($r1, null);

        return;
    }
    public void addAttributeTransformation(java.lang.String, java.lang.String)
    {
        org.htmlcleaner.TagTransformation r0;
        java.lang.String $r1, $r2;
        java.util.Map $r3;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.htmlcleaner.TagTransformation: java.util.Map attributeTransformations>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public java.util.Map applyTagTransformations(java.util.Map)
    {
        org.htmlcleaner.TagTransformation r0;
        java.util.Map r1, $r3;
        boolean $z0, $z1;
        java.util.LinkedHashMap r2;
        java.util.Set $r4;
        java.util.Iterator $r5, $r12;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.String r8, r9;
        java.util.List $r10;
        org.htmlcleaner.AttributeTransformation r11;

        r0 := @this: org.htmlcleaner.TagTransformation;

        r1 := @parameter0: java.util.Map;

        $z0 = virtualinvoke r0.<org.htmlcleaner.TagTransformation: boolean isPreserveSourceAttributes()>();

        $z1 = virtualinvoke r0.<org.htmlcleaner.TagTransformation: boolean hasAttributeTransformations()>();

        if $z1 != 0 goto label01;

        if $z0 != 0 goto label11;

     label01:
        if $z0 == 0 goto label04;

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r1);

     label02:
        if $z1 == 0 goto label10;

        $r3 = virtualinvoke r0.<org.htmlcleaner.TagTransformation: java.util.Map getAttributeTransformations()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r6;

        if r9 != null goto label05;

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8);

        goto label03;

     label04:
        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        goto label02;

     label05:
        r9 = virtualinvoke r0.<org.htmlcleaner.TagTransformation: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>(r9, r1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9);

        goto label03;

     label06:
        $r10 = r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations>;

        $r5 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.htmlcleaner.AttributeTransformation) $r6;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r6;

        $z0 = interfaceinvoke r11.<org.htmlcleaner.AttributeTransformation: boolean satisfy(java.lang.String,java.lang.String)>(r8, r9);

        if $z0 == 0 goto label08;

        r9 = interfaceinvoke r11.<org.htmlcleaner.AttributeTransformation: java.lang.String getTemplate()>();

        if r9 != null goto label09;

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8);

        goto label08;

     label09:
        r9 = virtualinvoke r0.<org.htmlcleaner.TagTransformation: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>(r9, r1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9);

        goto label08;

     label10:
        return r2;

     label11:
        return r1;
    }
    public java.lang.String evaluateTemplate(java.lang.String, java.util.Map)
    {
        org.htmlcleaner.TagTransformation r0;
        java.util.Map r1;
        java.lang.StringBuffer r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String r3, $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: org.htmlcleaner.TagTransformation;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        if r3 != null goto label1;

        return r3;

     label1:
        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = <org.htmlcleaner.TagTransformation: java.lang.String VAR_START>;

        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>($r4);

        $i1 = -1;

     label2:
        if $i0 < 0 goto label8;

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 >= $i2 goto label8;

        $i1 = $i1 + 1;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = <org.htmlcleaner.TagTransformation: java.lang.String VAR_END>;

        $i2 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String,int)>($r4, $i0);

        $i1 = $i2;

        if $i2 <= $i0 goto label5;

        $r4 = <org.htmlcleaner.TagTransformation: java.lang.String VAR_START>;

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i3 = $i3 + $i0;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        if r1 == null goto label6;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r4 = (java.lang.String) $r5;

     label3:
        if $r4 != null goto label7;

        $r4 = "";

     label4:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label5:
        $r4 = <org.htmlcleaner.TagTransformation: java.lang.String VAR_START>;

        $r6 = <org.htmlcleaner.TagTransformation: java.lang.String VAR_END>;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i2 = $i3 + $i2;

        $i0 = $i0 + 1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0);

        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String,int)>($r4, $i0);

        goto label2;

     label6:
        $r4 = "";

        goto label3;

     label7:
        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        goto label4;

     label8:
        $i1 = $i1 + 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        r3 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return r3;
    }
    java.util.Map getAttributeTransformations()
    {
        org.htmlcleaner.TagTransformation r0;
        java.util.Map r1;

        r0 := @this: org.htmlcleaner.TagTransformation;

        r1 = r0.<org.htmlcleaner.TagTransformation: java.util.Map attributeTransformations>;

        return r1;
    }
    java.lang.String getDestTag()
    {
        org.htmlcleaner.TagTransformation r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.TagTransformation;

        r1 = r0.<org.htmlcleaner.TagTransformation: java.lang.String destTag>;

        return r1;
    }
    java.lang.String getSourceTag()
    {
        org.htmlcleaner.TagTransformation r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.TagTransformation;

        r1 = r0.<org.htmlcleaner.TagTransformation: java.lang.String sourceTag>;

        return r1;
    }
    boolean hasAttributeTransformations()
    {
        org.htmlcleaner.TagTransformation r0;
        java.util.Map $r1;
        java.util.List $r2;

        r0 := @this: org.htmlcleaner.TagTransformation;

        $r1 = r0.<org.htmlcleaner.TagTransformation: java.util.Map attributeTransformations>;

        if $r1 != null goto label1;

        $r2 = r0.<org.htmlcleaner.TagTransformation: java.util.List attributePatternTransformations>;

        if $r2 == null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    boolean isPreserveSourceAttributes()
    {
        org.htmlcleaner.TagTransformation r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.TagTransformation;

        z0 = r0.<org.htmlcleaner.TagTransformation: boolean preserveSourceAttributes>;

        return z0;
    }
