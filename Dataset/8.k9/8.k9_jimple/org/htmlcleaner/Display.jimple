org.htmlcleaner.Display extends java.lang.Enum
private static final org.htmlcleaner.Display[] $VALUES
public static final enum org.htmlcleaner.Display any
public static final enum org.htmlcleaner.Display block
public static final enum org.htmlcleaner.Display inline
public static final enum org.htmlcleaner.Display none
private boolean afterTagLineBreakNeeded
private boolean leadingAndEndWhitespacesAllowed
    static void <clinit>()
    {
        org.htmlcleaner.Display $r0;
        org.htmlcleaner.Display[] $r1;

        $r0 = new org.htmlcleaner.Display;

        specialinvoke $r0.<org.htmlcleaner.Display: void <init>(java.lang.String,int,boolean,boolean)>("block", 0, 1, 0);

        <org.htmlcleaner.Display: org.htmlcleaner.Display block> = $r0;

        $r0 = new org.htmlcleaner.Display;

        specialinvoke $r0.<org.htmlcleaner.Display: void <init>(java.lang.String,int,boolean,boolean)>("inline", 1, 0, 1);

        <org.htmlcleaner.Display: org.htmlcleaner.Display inline> = $r0;

        $r0 = new org.htmlcleaner.Display;

        specialinvoke $r0.<org.htmlcleaner.Display: void <init>(java.lang.String,int,boolean,boolean)>("any", 2, 1, 0);

        <org.htmlcleaner.Display: org.htmlcleaner.Display any> = $r0;

        $r0 = new org.htmlcleaner.Display;

        specialinvoke $r0.<org.htmlcleaner.Display: void <init>(java.lang.String,int,boolean,boolean)>("none", 3, 1, 0);

        <org.htmlcleaner.Display: org.htmlcleaner.Display none> = $r0;

        $r1 = newarray (org.htmlcleaner.Display)[4];

        $r0 = <org.htmlcleaner.Display: org.htmlcleaner.Display block>;

        $r1[0] = $r0;

        $r0 = <org.htmlcleaner.Display: org.htmlcleaner.Display inline>;

        $r1[1] = $r0;

        $r0 = <org.htmlcleaner.Display: org.htmlcleaner.Display any>;

        $r1[2] = $r0;

        $r0 = <org.htmlcleaner.Display: org.htmlcleaner.Display none>;

        $r1[3] = $r0;

        <org.htmlcleaner.Display: org.htmlcleaner.Display[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int, boolean, boolean)
    {
        org.htmlcleaner.Display r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.htmlcleaner.Display;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<org.htmlcleaner.Display: boolean afterTagLineBreakNeeded> = $z0;

        r0.<org.htmlcleaner.Display: boolean leadingAndEndWhitespacesAllowed> = $z1;

        return;
    }
    public static org.htmlcleaner.Display valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        org.htmlcleaner.Display $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/htmlcleaner/Display;", $r0);

        $r2 = (org.htmlcleaner.Display) $r1;

        return $r2;
    }
    public static org.htmlcleaner.Display[] values()
    {
        java.lang.Object $r0;
        org.htmlcleaner.Display[] $r1;

        $r1 = <org.htmlcleaner.Display: org.htmlcleaner.Display[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.htmlcleaner.Display[]) $r0;

        return $r1;
    }
    public boolean isAfterTagLineBreakNeeded()
    {
        org.htmlcleaner.Display r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.Display;

        z0 = r0.<org.htmlcleaner.Display: boolean afterTagLineBreakNeeded>;

        return z0;
    }
    public boolean isLeadingAndEndWhitespacesAllowed()
    {
        org.htmlcleaner.Display r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.Display;

        z0 = r0.<org.htmlcleaner.Display: boolean leadingAndEndWhitespacesAllowed>;

        return z0;
    }
