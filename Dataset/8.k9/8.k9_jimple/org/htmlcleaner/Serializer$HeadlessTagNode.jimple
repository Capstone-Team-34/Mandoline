org.htmlcleaner.Serializer$HeadlessTagNode extends org.htmlcleaner.TagNode
final org.htmlcleaner.Serializer this$0
    private void <init>(org.htmlcleaner.Serializer, org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.Serializer$HeadlessTagNode r0;
        org.htmlcleaner.Serializer $r1;
        org.htmlcleaner.TagNode $r2;
        java.util.Map $r3, $r4;
        java.util.List $r5;
        org.htmlcleaner.DoctypeToken $r6;

        r0 := @this: org.htmlcleaner.Serializer$HeadlessTagNode;

        $r1 := @parameter0: org.htmlcleaner.Serializer;

        $r2 := @parameter1: org.htmlcleaner.TagNode;

        r0.<org.htmlcleaner.Serializer$HeadlessTagNode: org.htmlcleaner.Serializer this$0> = $r1;

        specialinvoke r0.<org.htmlcleaner.TagNode: void <init>(java.lang.String)>("");

        $r3 = virtualinvoke r0.<org.htmlcleaner.Serializer$HeadlessTagNode: java.util.Map getAttributes()>();

        $r4 = virtualinvoke $r2.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4);

        $r5 = virtualinvoke $r2.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        virtualinvoke r0.<org.htmlcleaner.Serializer$HeadlessTagNode: void addChildren(java.util.List)>($r5);

        $r6 = virtualinvoke $r2.<org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>();

        virtualinvoke r0.<org.htmlcleaner.Serializer$HeadlessTagNode: void setDocType(org.htmlcleaner.DoctypeToken)>($r6);

        $r3 = virtualinvoke r0.<org.htmlcleaner.Serializer$HeadlessTagNode: java.util.Map getNamespaceDeclarations()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r2.<org.htmlcleaner.TagNode: java.util.Map getNamespaceDeclarations()>();

        if $r4 == null goto label1;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4);

     label1:
        return;
    }
    void <init>(org.htmlcleaner.Serializer, org.htmlcleaner.TagNode, org.htmlcleaner.Serializer$1)
    {
        org.htmlcleaner.Serializer$HeadlessTagNode r0;
        org.htmlcleaner.Serializer $r1;
        org.htmlcleaner.TagNode $r2;
        org.htmlcleaner.Serializer$1 $r3;

        r0 := @this: org.htmlcleaner.Serializer$HeadlessTagNode;

        $r1 := @parameter0: org.htmlcleaner.Serializer;

        $r2 := @parameter1: org.htmlcleaner.TagNode;

        $r3 := @parameter2: org.htmlcleaner.Serializer$1;

        specialinvoke r0.<org.htmlcleaner.Serializer$HeadlessTagNode: void <init>(org.htmlcleaner.Serializer,org.htmlcleaner.TagNode)>($r1, $r2);

        return;
    }
