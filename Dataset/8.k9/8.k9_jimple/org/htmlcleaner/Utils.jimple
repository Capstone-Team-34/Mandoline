org.htmlcleaner.Utils extends java.lang.Object
private static final java.util.regex.Pattern ASCII_CHAR
public static java.util.regex.Pattern DECIMAL
public static java.util.regex.Pattern HEX_RELAXED
public static java.util.regex.Pattern HEX_STRICT
private static java.lang.String ampNcr
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Print}");

        <org.htmlcleaner.Utils: java.util.regex.Pattern ASCII_CHAR> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^([x|X][\\p{XDigit}]+)(;?)");

        <org.htmlcleaner.Utils: java.util.regex.Pattern HEX_STRICT> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^0*([x|X][\\p{XDigit}]+)(;?)");

        <org.htmlcleaner.Utils: java.util.regex.Pattern HEX_RELAXED> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^([\\p{Digit}]+)(;?)");

        <org.htmlcleaner.Utils: java.util.regex.Pattern DECIMAL> = $r0;

        return;
    }
    public void <init>()
    {
        org.htmlcleaner.Utils r0;

        r0 := @this: org.htmlcleaner.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static int convertToUnicode(java.lang.String, boolean, boolean, boolean, java.lang.StringBuilder, int)
    {
        java.lang.String $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r1, r3, $r9;
        int $i0, $i1, $i2;
        java.lang.NumberFormatException r2;
        char[] $r4;
        org.htmlcleaner.SpecialEntities $r5;
        org.htmlcleaner.SpecialEntity $r6;
        char $c3;
        java.util.regex.Pattern $r7;
        java.util.regex.Matcher $r8;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        $r1 := @parameter4: java.lang.StringBuilder;

        $i0 := @parameter5: int;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $i0 = staticinvoke <org.htmlcleaner.Utils: int extractCharCode(java.lang.String,int,boolean,java.lang.StringBuilder)>($r0, $i0, 1, r3);

        $i1 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label40;

     label01:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, 1);

        $z3 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("x");

     label02:
        if $z3 == 0 goto label11;

     label03:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String substring(int)>(1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

     label04:
        $i1 = $i2;

     label05:
        $r4 = staticinvoke <java.lang.Character: char[] toChars(int)>($i2);

     label06:
        $r5 = <org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntities INSTANCE>;

     label07:
        $r6 = virtualinvoke $r5.<org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntity getSpecialEntityByUnicode(int)>($i1);

     label08:
        $i1 = lengthof $r4;

        if $i1 != 1 goto label15;

        $c3 = $r4[0];

        if $c3 != 0 goto label15;

     label09:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

     label10:
        return $i0;

     label11:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label12:
        $i1 = $i2;

     label13:
        $r4 = staticinvoke <java.lang.Character: char[] toChars(int)>($i2);

     label14:
        goto label06;

     label15:
        if $r6 == null goto label30;

     label16:
        $z4 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: boolean isHtmlSpecialEntity()>();

     label17:
        if $z4 == 0 goto label18;

        if $z1 != 0 goto label30;

     label18:
        if $z0 == 0 goto label23;

     label19:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getHtmlString()>();

     label20:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label21:
        return $i0;

     label22:
        r2 := @caughtexception;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;#");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        return $i0;

     label23:
        if $z2 == 0 goto label28;

        if $z3 == 0 goto label26;

     label24:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getHexNCR()>();

     label25:
        goto label20;

     label26:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getDecimalNCR()>();

     label27:
        goto label20;

     label28:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getEscapedXmlString()>();

     label29:
        goto label20;

     label30:
        if $z1 == 0 goto label33;

     label31:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label32:
        return $i0;

     label33:
        $r7 = <org.htmlcleaner.Utils: java.util.regex.Pattern ASCII_CHAR>;

        $r0 = new java.lang.String;

     label34:
        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r4);

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

     label35:
        if $z0 == 0 goto label38;

     label36:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label37:
        return $i0;

     label38:
        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r3);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

     label39:
        return $i0;

     label40:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        return $i0;

        catch java.lang.NumberFormatException from label01 to label02 with label22;
        catch java.lang.NumberFormatException from label03 to label04 with label22;
        catch java.lang.NumberFormatException from label05 to label06 with label22;
        catch java.lang.NumberFormatException from label07 to label08 with label22;
        catch java.lang.NumberFormatException from label09 to label10 with label22;
        catch java.lang.NumberFormatException from label11 to label12 with label22;
        catch java.lang.NumberFormatException from label13 to label14 with label22;
        catch java.lang.NumberFormatException from label16 to label17 with label22;
        catch java.lang.NumberFormatException from label19 to label20 with label22;
        catch java.lang.NumberFormatException from label20 to label21 with label22;
        catch java.lang.NumberFormatException from label24 to label25 with label22;
        catch java.lang.NumberFormatException from label26 to label27 with label22;
        catch java.lang.NumberFormatException from label28 to label29 with label22;
        catch java.lang.NumberFormatException from label31 to label32 with label22;
        catch java.lang.NumberFormatException from label34 to label35 with label22;
        catch java.lang.NumberFormatException from label36 to label37 with label22;
        catch java.lang.NumberFormatException from label38 to label39 with label22;
    }
    private static int convert_To_Entity_Name(java.lang.String, boolean, boolean, boolean, java.lang.StringBuilder, int)
    {
        java.lang.String $r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r1, r3, $r9;
        int $i0, $i1, $i2;
        java.lang.NumberFormatException r2;
        char[] $r4;
        org.htmlcleaner.SpecialEntities $r5;
        org.htmlcleaner.SpecialEntity $r6;
        char $c3;
        java.util.regex.Pattern $r7;
        java.util.regex.Matcher $r8;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        $r1 := @parameter4: java.lang.StringBuilder;

        $i0 := @parameter5: int;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $i0 = staticinvoke <org.htmlcleaner.Utils: int extractCharCode(java.lang.String,int,boolean,java.lang.StringBuilder)>($r0, $i0, 1, r3);

        $i1 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label45;

     label01:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, 1);

        $z3 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("x");

     label02:
        if $z3 == 0 goto label11;

     label03:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String substring(int)>(1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

     label04:
        $i1 = $i2;

     label05:
        $r4 = staticinvoke <java.lang.Character: char[] toChars(int)>($i2);

     label06:
        $r5 = <org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntities INSTANCE>;

     label07:
        $r6 = virtualinvoke $r5.<org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntity getSpecialEntityByUnicode(int)>($i1);

     label08:
        $i1 = lengthof $r4;

        if $i1 != 1 goto label15;

        $c3 = $r4[0];

        if $c3 != 0 goto label15;

     label09:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

     label10:
        return $i0;

     label11:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label12:
        $i1 = $i2;

     label13:
        $r4 = staticinvoke <java.lang.Character: char[] toChars(int)>($i2);

     label14:
        goto label06;

     label15:
        if $r6 == null goto label35;

     label16:
        $z1 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: boolean isHtmlSpecialEntity()>();

     label17:
        if $z1 == 0 goto label24;

        if $z0 == 0 goto label22;

     label18:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getHtmlString()>();

     label19:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label20:
        return $i0;

     label21:
        r2 := @caughtexception;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;#");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        return $i0;

     label22:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getEscapedValue()>();

     label23:
        goto label19;

     label24:
        if $z0 == 0 goto label28;

     label25:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getHtmlString()>();

     label26:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label27:
        return $i0;

     label28:
        if $z2 == 0 goto label33;

        if $z3 == 0 goto label31;

     label29:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getHexNCR()>();

     label30:
        goto label26;

     label31:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getDecimalNCR()>();

     label32:
        goto label26;

     label33:
        $r0 = virtualinvoke $r6.<org.htmlcleaner.SpecialEntity: java.lang.String getHtmlString()>();

     label34:
        goto label26;

     label35:
        if $z1 == 0 goto label38;

     label36:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label37:
        return $i0;

     label38:
        $r7 = <org.htmlcleaner.Utils: java.util.regex.Pattern ASCII_CHAR>;

        $r0 = new java.lang.String;

     label39:
        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r4);

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

     label40:
        if $z0 == 0 goto label43;

     label41:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label42:
        return $i0;

     label43:
        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r3);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

     label44:
        return $i0;

     label45:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        return $i0;

        catch java.lang.NumberFormatException from label01 to label02 with label21;
        catch java.lang.NumberFormatException from label03 to label04 with label21;
        catch java.lang.NumberFormatException from label05 to label06 with label21;
        catch java.lang.NumberFormatException from label07 to label08 with label21;
        catch java.lang.NumberFormatException from label09 to label10 with label21;
        catch java.lang.NumberFormatException from label11 to label12 with label21;
        catch java.lang.NumberFormatException from label13 to label14 with label21;
        catch java.lang.NumberFormatException from label16 to label17 with label21;
        catch java.lang.NumberFormatException from label18 to label19 with label21;
        catch java.lang.NumberFormatException from label19 to label20 with label21;
        catch java.lang.NumberFormatException from label22 to label23 with label21;
        catch java.lang.NumberFormatException from label25 to label26 with label21;
        catch java.lang.NumberFormatException from label26 to label27 with label21;
        catch java.lang.NumberFormatException from label29 to label30 with label21;
        catch java.lang.NumberFormatException from label31 to label32 with label21;
        catch java.lang.NumberFormatException from label33 to label34 with label21;
        catch java.lang.NumberFormatException from label36 to label37 with label21;
        catch java.lang.NumberFormatException from label39 to label40 with label21;
        catch java.lang.NumberFormatException from label41 to label42 with label21;
        catch java.lang.NumberFormatException from label43 to label44 with label21;
    }
    public static java.lang.String escapeHtml(java.lang.String, org.htmlcleaner.CleanerProperties)
    {
        java.lang.String $r0;
        org.htmlcleaner.CleanerProperties $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.htmlcleaner.CleanerProperties;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isAdvancedXmlEscape()>();

        $z1 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isRecognizeUnicodeChars()>();

        $z2 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isTranslateSpecialEntities()>();

        $z3 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isTransResCharsToNCR()>();

        $z4 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isTransSpecialEntitiesToNCR()>();

        $r0 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>($r0, $z0, $z1, $z2, 0, $z3, $z4, 1);

        return $r0;
    }
    public static java.lang.String escapeXml(java.lang.String, org.htmlcleaner.CleanerProperties, boolean)
    {
        java.lang.String $r0;
        org.htmlcleaner.CleanerProperties $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isAdvancedXmlEscape()>();

        $z2 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isRecognizeUnicodeChars()>();

        $z3 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isTranslateSpecialEntities()>();

        $z4 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isTransResCharsToNCR()>();

        $z5 = virtualinvoke $r1.<org.htmlcleaner.CleanerProperties: boolean isTransSpecialEntitiesToNCR()>();

        $r0 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>($r0, $z1, $z2, $z3, $z0, $z4, $z5, 0);

        return $r0;
    }
    public static java.lang.String escapeXml(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        java.lang.String $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        $z3 := @parameter4: boolean;

        $z4 := @parameter5: boolean;

        $z5 := @parameter6: boolean;

        $r0 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>($r0, $z0, $z1, $z2, $z3, $z4, $z5, 0);

        return $r0;
    }
    public static java.lang.String escapeXml(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        java.lang.String $r0, $r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder r1;
        int $i0, i1, $i3;
        char $c2;
        org.htmlcleaner.SpecialEntities $r2;
        org.htmlcleaner.SpecialEntity $r4;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        $z3 := @parameter4: boolean;

        $z4 := @parameter5: boolean;

        $z5 := @parameter6: boolean;

        $z6 := @parameter7: boolean;

        if $r0 == null goto label34;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        i1 = 0;

     label01:
        if i1 >= $i0 goto label33;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        if $c2 != 38 goto label25;

        if $z0 != 0 goto label02;

        if $z1 == 0 goto label04;

     label02:
        $i3 = $i0 + -1;

        if i1 >= $i3 goto label04;

        $i3 = i1 + 1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c2 != 35 goto label04;

        i1 = i1 + 2;

        i1 = staticinvoke <org.htmlcleaner.Utils: int convertToUnicode(java.lang.String,boolean,boolean,boolean,java.lang.StringBuilder,int)>($r0, $z3, $z1, $z5, r1, i1);

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        if $z2 != 0 goto label05;

        if $z0 == 0 goto label17;

     label05:
        $r2 = <org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntities INSTANCE>;

        $i3 = $i0 - i1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(10, $i3);

        $i3 = $i3 + i1;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i1, $i3);

        $r4 = virtualinvoke $r2.<org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntity getSpecialEntity(java.lang.String)>($r3);

        if $r4 == null goto label17;

        if $z2 == 0 goto label08;

        $z7 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: boolean isHtmlSpecialEntity()>();

        if $z7 == 0 goto label08;

        if $z1 == 0 goto label07;

        $i3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: int intValue()>();

        $c2 = (char) $i3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label06:
        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getKey()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = $i3 + 1;

        i1 = i1 + $i3;

        goto label03;

     label07:
        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getDecimalNCR()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label06;

     label08:
        if $z0 == 0 goto label14;

        if $z4 == 0 goto label10;

        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getDecimalNCR()>();

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getKey()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = $i3 + 1;

        i1 = i1 + $i3;

        goto label03;

     label10:
        if $z6 != 0 goto label11;

        if $z3 == 0 goto label13;

     label11:
        $z7 = 1;

     label12:
        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getEscaped(boolean)>($z7);

        goto label09;

     label13:
        $z7 = 0;

        goto label12;

     label14:
        if $z4 == 0 goto label16;

        $r3 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getAmpNcr()>();

     label15:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label03;

     label16:
        $r3 = "&amp;";

        goto label15;

     label17:
        if $z6 == 0 goto label22;

        $r2 = <org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntities INSTANCE>;

        $i3 = $i0 - i1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(10, $i3);

        $i3 = $i3 + i1;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i1, $i3);

        $r4 = virtualinvoke $r2.<org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntity getSpecialEntity(java.lang.String)>($r3);

        if $r4 == null goto label18;

        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getEscapedValue()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getKey()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = $i3 + 1;

        i1 = i1 + $i3;

        goto label03;

     label18:
        $i3 = $i0 + -1;

        if i1 >= $i3 goto label19;

        $i3 = i1 + 1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c2 != 35 goto label19;

        i1 = i1 + 2;

        i1 = staticinvoke <org.htmlcleaner.Utils: int convert_To_Entity_Name(java.lang.String,boolean,boolean,boolean,java.lang.StringBuilder,int)>($r0, 0, 0, 0, r1, i1);

        goto label03;

     label19:
        if $z4 == 0 goto label21;

        $r3 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getAmpNcr()>();

     label20:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label03;

     label21:
        $r3 = "&amp;";

        goto label20;

     label22:
        if $z4 == 0 goto label24;

        $r3 = staticinvoke <org.htmlcleaner.Utils: java.lang.String getAmpNcr()>();

     label23:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label03;

     label24:
        $r3 = "&amp;";

        goto label23;

     label25:
        $r2 = <org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntities INSTANCE>;

        $r4 = virtualinvoke $r2.<org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntity getSpecialEntityByUnicode(int)>($c2);

        if $r4 == null goto label32;

        if $z6 == 0 goto label29;

        $r3 = "apos";

        $r5 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getKey()>();

        $z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z7 == 0 goto label26;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label03;

     label26:
        if $z3 == 0 goto label28;

        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getHtmlString()>();

     label27:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label03;

     label28:
        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getEscapedValue()>();

        goto label27;

     label29:
        if $z4 == 0 goto label31;

        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getDecimalNCR()>();

     label30:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label03;

     label31:
        $r3 = virtualinvoke $r4.<org.htmlcleaner.SpecialEntity: java.lang.String getEscaped(boolean)>($z3);

        goto label30;

     label32:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label03;

     label33:
        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label34:
        return null;
    }
    private static int extractCharCode(java.lang.String, int, boolean, java.lang.StringBuilder)
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4, $r5;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 := @parameter3: java.lang.StringBuilder;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i2 = $i0 + 15;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        if $z0 == 0 goto label3;

        $r3 = <org.htmlcleaner.Utils: java.util.regex.Pattern HEX_RELAXED>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

     label1:
        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label2;

        $r3 = <org.htmlcleaner.Utils: java.util.regex.Pattern DECIMAL>;

        $r5 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $r4 = $r5;

        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

     label2:
        $i1 = virtualinvoke $r4.<java.util.regex.Matcher: int end()>();

        $i1 = $i1 + -1;

        $i0 = $i0 + $i1;

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        return $i0;

     label3:
        $r3 = <org.htmlcleaner.Utils: java.util.regex.Pattern HEX_STRICT>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        goto label1;

     label4:
        return $i0;
    }
    private static java.lang.String getAmpNcr()
    {
        java.lang.String $r0;
        org.htmlcleaner.SpecialEntities $r1;
        org.htmlcleaner.SpecialEntity $r2;

        $r0 = <org.htmlcleaner.Utils: java.lang.String ampNcr>;

        if $r0 != null goto label1;

        $r1 = <org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntities INSTANCE>;

        $r2 = virtualinvoke $r1.<org.htmlcleaner.SpecialEntities: org.htmlcleaner.SpecialEntity getSpecialEntityByUnicode(int)>(38);

        $r0 = virtualinvoke $r2.<org.htmlcleaner.SpecialEntity: java.lang.String getDecimalNCR()>();

        <org.htmlcleaner.Utils: java.lang.String ampNcr> = $r0;

     label1:
        $r0 = <org.htmlcleaner.Utils: java.lang.String ampNcr>;

        return $r0;
    }
    public static java.lang.String getXmlNSPrefix(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;

     label1:
        return null;
    }
    public static java.lang.String getXmlName(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label1;

        $i0 = $i0 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        return $r0;
    }
    public static boolean isEmptyString(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $r1 = staticinvoke <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>($r1, 1, 0, 0, 0, 0, 0, 0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(160, 32);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }
    public static boolean isIdentifierHelperChar(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if 58 == $c0 goto label1;

        if 46 == $c0 goto label1;

        if 45 == $c0 goto label1;

        if 95 != $c0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    static boolean isValidInt(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        java.lang.NumberFormatException r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

     label1:
        staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, $i0);

     label2:
        return 1;

     label3:
        r1 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    static boolean isValidXmlChar(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 < 32 goto label1;

        if $c0 <= 55295 goto label3;

     label1:
        if $c0 == 9 goto label3;

        if $c0 == 10 goto label3;

        if $c0 == 13 goto label3;

        if $c0 < 57344 goto label2;

        if $c0 <= 65533 goto label3;

     label2:
        if $c0 < 65536 goto label4;

        if $c0 > 1114111 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }
    public static boolean isValidXmlIdentifier(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label6;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        if i1 >= $i0 goto label5;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        if i1 != 0 goto label3;

        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierStart(char)>($c2);

        if $z0 == 0 goto label6;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierStart(char)>($c2);

        if $z0 != 0 goto label4;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 != 0 goto label4;

        $z0 = staticinvoke <org.htmlcleaner.Utils: boolean isIdentifierHelperChar(char)>($c2);

        if $z0 == 0 goto label6;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return 1;

     label6:
        return 0;
    }
    public static boolean isWhitespaceString(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        if $r1 == null goto label1;

        $r2 = "";

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static java.lang.String ltrim(java.lang.String)
    {
        java.lang.String $r0;
        int i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        i0 = 0;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

     label2:
        if i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i0);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label3;

        i0 = i0 + 1;

        goto label2;

     label3:
        if i0 < $i1 goto label4;

        return "";

     label4:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(i0);

        return $r0;
    }
    static java.lang.CharSequence readUrl(java.net.URL, java.lang.String) throws java.io.IOException
    {
        java.net.URL $r0;
        java.lang.String $r1;
        java.lang.StringBuilder r2;
        char[] r3;
        java.io.InputStreamReader r4;
        java.io.InputStream $r5;
        int $i0;
        java.lang.Throwable $r6;

        $r0 := @parameter0: java.net.URL;

        $r1 := @parameter1: java.lang.String;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>(1024);

        $r5 = virtualinvoke $r0.<java.net.URL: java.io.InputStream openStream()>();

     label1:
        r4 = new java.io.InputStreamReader;

        specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, $r1);

        r3 = newarray (char)[1024];

     label2:
        $i0 = virtualinvoke r4.<java.io.InputStreamReader: int read(char[])>(r3);

     label3:
        if $i0 < 0 goto label5;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r3, 0, $i0);

     label5:
        if $i0 > 0 goto label2;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return r2;

     label6:
        $r6 := @caughtexception;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public static java.lang.String rtrim(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

     label2:
        if $i0 <= 0 goto label3;

        $i1 = $i0 + -1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label3;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        if $i0 > 0 goto label4;

        return "";

     label4:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;
    }
    public static java.lang.String[] tokenize(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int i0, i1;
        java.util.StringTokenizer r2;
        java.lang.String[] r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        r3 = newarray (java.lang.String)[0];

        return r3;

     label1:
        r2 = new java.util.StringTokenizer;

        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r0, $r1);

        i0 = virtualinvoke r2.<java.util.StringTokenizer: int countTokens()>();

        r3 = newarray (java.lang.String)[i0];

        i1 = 0;

     label2:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r0 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r3[i1] = $r0;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r3;
    }
