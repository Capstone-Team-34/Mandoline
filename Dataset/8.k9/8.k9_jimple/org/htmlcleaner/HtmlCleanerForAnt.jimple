org.htmlcleaner.HtmlCleanerForAnt extends org.apache.tools.ant.Task
private boolean advancedxmlescape
private boolean allowhtmlinsideattributes
private boolean allowmultiwordattributes
private java.lang.String booleanatts
private java.lang.String dest
private java.lang.String hyphenreplacement
private boolean ignoreqe
private java.lang.String incharset
private boolean namespacesaware
private java.lang.String nodebyxpath
private boolean omitcomments
private boolean omitdeprtags
private boolean omitdoctypedecl
private boolean omithtmlenvelope
private boolean omitunknowntags
private boolean omitxmldecl
private java.lang.String outcharset
private java.lang.String outputtype
private java.lang.String prunetags
private boolean specialentities
private java.lang.String src
private java.lang.String taginfofile
private java.lang.String text
private java.lang.String transform
private boolean treatdeprtagsascontent
private boolean treatunknowntagsascontent
private boolean unicodechars
private boolean usecdata
private java.lang.String usecdatafor
private boolean useemptyelementtags
    public void <init>()
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        specialinvoke r0.<org.apache.tools.ant.Task: void <init>()>();

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String incharset> = "UTF-8";

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outcharset> = "UTF-8";

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String taginfofile> = null;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outputtype> = "simple";

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean advancedxmlescape> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean usecdata> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String usecdatafor> = "script,style";

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean specialentities> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean unicodechars> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitunknowntags> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean treatunknowntagsascontent> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitdeprtags> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean treatdeprtagsascontent> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitcomments> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitxmldecl> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitdoctypedecl> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omithtmlenvelope> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean useemptyelementtags> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean allowmultiwordattributes> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean allowhtmlinsideattributes> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean ignoreqe> = 0;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean namespacesaware> = 1;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String hyphenreplacement> = "=";

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String prunetags> = "";

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String booleanatts> = "self";

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String nodebyxpath> = null;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String transform> = null;

        return;
    }
    public void addText(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String text> = $r1;

        return;
    }
    public void execute() throws org.apache.tools.ant.BuildException
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.Object r1;
        java.lang.String r2, $r4;
        java.util.TreeMap r3, $r24;
        org.htmlcleaner.HtmlCleaner r5, $r22;
        java.io.File $r6, $r20;
        org.htmlcleaner.CleanerProperties $r7;
        boolean $z0;
        java.lang.String[] $r8;
        int $i0, $i1, $i2;
        java.net.URL $r9, $r25;
        org.htmlcleaner.TagNode $r10;
        java.lang.Object[] $r11;
        java.io.OutputStream r12;
        org.htmlcleaner.CompactXmlSerializer $r13, $r26;
        java.io.IOException r14, r15;
        org.htmlcleaner.BrowserCompactXmlSerializer $r16, $r28;
        org.htmlcleaner.XPatherException r17;
        org.htmlcleaner.PrettyXmlSerializer $r18, $r29;
        org.htmlcleaner.SimpleXmlSerializer $r19, $r30;
        org.htmlcleaner.ConfigFileTagProvider $r21;
        org.apache.tools.ant.BuildException $r23;
        java.io.FileOutputStream $r27;
        java.lang.Throwable $r31;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String taginfofile>;

        if $r4 == null goto label02;

        $r22 = new org.htmlcleaner.HtmlCleaner;

        r5 = $r22;

        $r21 = new org.htmlcleaner.ConfigFileTagProvider;

        $r20 = new java.io.File;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String taginfofile>;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>($r4);

        specialinvoke $r21.<org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>($r20);

        specialinvoke $r22.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider)>($r21);

     label01:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String text>;

        if $r4 != null goto label03;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src>;

        if $r4 != null goto label03;

        $r23 = new org.apache.tools.ant.BuildException;

        specialinvoke $r23.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>("Eather attribute \'src\' or text body containing HTML must be specified!");

        $r31 = (java.lang.Throwable) $r23;

        throw $r31;

     label02:
        $r22 = new org.htmlcleaner.HtmlCleaner;

        r5 = $r22;

        specialinvoke $r22.<org.htmlcleaner.HtmlCleaner: void <init>()>();

        goto label01;

     label03:
        $r7 = virtualinvoke r5.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties getProperties()>();

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean advancedxmlescape>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setAdvancedXmlEscape(boolean)>($z0);

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String usecdatafor>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setUseCdataFor(java.lang.String)>($r4);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean usecdata>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setUseCdataForScriptAndStyle(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean specialentities>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setTranslateSpecialEntities(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean unicodechars>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setRecognizeUnicodeChars(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitunknowntags>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setOmitUnknownTags(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean treatunknowntagsascontent>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setTreatUnknownTagsAsContent(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitdeprtags>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setOmitDeprecatedTags(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean treatdeprtagsascontent>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setTreatDeprecatedTagsAsContent(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitcomments>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setOmitComments(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitxmldecl>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setOmitXmlDeclaration(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitdoctypedecl>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setOmitDoctypeDeclaration(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omithtmlenvelope>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setOmitHtmlEnvelope(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean useemptyelementtags>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setUseEmptyElementTags(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean allowmultiwordattributes>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setAllowMultiWordAttributes(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean allowhtmlinsideattributes>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setAllowHtmlInsideAttributes(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean ignoreqe>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setIgnoreQuestAndExclam(boolean)>($z0);

        $z0 = r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean namespacesaware>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setNamespacesAware(boolean)>($z0);

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String hyphenreplacement>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setHyphenReplacementInComment(java.lang.String)>($r4);

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String prunetags>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setPruneTags(java.lang.String)>($r4);

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String booleanatts>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>($r4);

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String transform>;

        $z0 = staticinvoke <org.htmlcleaner.Utils: boolean isEmptyString(java.lang.Object)>($r4);

        if $z0 != 0 goto label10;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String transform>;

        $r8 = staticinvoke <org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>($r4, "|");

        $r24 = new java.util.TreeMap;

        r3 = $r24;

        specialinvoke $r24.<java.util.TreeMap: void <init>()>();

        $i0 = lengthof $r8;

        $i1 = 0;

     label04:
        if $i1 >= $i0 goto label09;

        r2 = $r8[$i1];

        $i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        if $i2 > 0 goto label07;

        $r4 = r2;

     label05:
        if $i2 > 0 goto label08;

        r2 = null;

     label06:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        $i1 = $i1 + 1;

        goto label04;

     label07:
        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        goto label05;

     label08:
        $i2 = $i2 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i2);

        goto label06;

     label09:
        virtualinvoke r5.<org.htmlcleaner.HtmlCleaner: void initCleanerTransformations(java.util.Map)>(r3);

     label10:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src>;

        if $r4 == null goto label34;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src>;

     label11:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

     label12:
        if $z0 != 0 goto label15;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src>;

     label13:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

     label14:
        if $z0 == 0 goto label34;

     label15:
        $r25 = new java.net.URL;

        $r9 = $r25;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src>;

     label16:
        specialinvoke $r25.<java.net.URL: void <init>(java.lang.String)>($r4);

     label17:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String incharset>;

     label18:
        $r10 = virtualinvoke r5.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>($r9, $r4);

     label19:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String nodebyxpath>;

        if $r4 == null goto label23;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String nodebyxpath>;

     label20:
        $r11 = virtualinvoke $r10.<org.htmlcleaner.TagNode: java.lang.Object[] evaluateXPath(java.lang.String)>($r4);

     label21:
        $i0 = lengthof $r11;

        $i1 = 0;

     label22:
        if $i1 >= $i0 goto label23;

        r1 = $r11[$i1];

        $z0 = r1 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label47;

        $r10 = (org.htmlcleaner.TagNode) r1;

     label23:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String dest>;

        if $r4 == null goto label26;

        $r4 = "";

        r2 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String dest>;

     label24:
        r2 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

     label25:
        if $z0 == 0 goto label48;

     label26:
        r12 = <java.lang.System: java.io.PrintStream out>;

     label27:
        $r4 = "compact";

        r2 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outputtype>;

     label28:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

     label29:
        if $z0 == 0 goto label51;

        $r26 = new org.htmlcleaner.CompactXmlSerializer;

        $r13 = $r26;

     label30:
        specialinvoke $r26.<org.htmlcleaner.CompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r7);

     label31:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outcharset>;

     label32:
        virtualinvoke $r13.<org.htmlcleaner.CompactXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r10, r12, $r4);

     label33:
        return;

     label34:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src>;

        if $r4 == null goto label39;

        $r20 = new java.io.File;

        $r6 = $r20;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src>;

     label35:
        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>($r4);

     label36:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String incharset>;

     label37:
        $r10 = virtualinvoke r5.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>($r6, $r4);

     label38:
        goto label19;

     label39:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String text>;

     label40:
        $r10 = virtualinvoke r5.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.lang.String)>($r4);

     label41:
        goto label19;

     label42:
        r14 := @caughtexception;

        $r23 = new org.apache.tools.ant.BuildException;

     label43:
        specialinvoke $r23.<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>(r14);

     label44:
        $r31 = (java.lang.Throwable) $r23;

     label45:
        throw $r31;

     label46:
        r15 := @caughtexception;

        $r23 = new org.apache.tools.ant.BuildException;

        specialinvoke $r23.<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>(r15);

        $r31 = (java.lang.Throwable) $r23;

        throw $r31;

     label47:
        $i1 = $i1 + 1;

        goto label22;

     label48:
        $r27 = new java.io.FileOutputStream;

        r12 = $r27;

        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String dest>;

     label49:
        specialinvoke $r27.<java.io.FileOutputStream: void <init>(java.lang.String)>($r4);

     label50:
        goto label27;

     label51:
        $r4 = "browser-compact";

        r2 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outputtype>;

     label52:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

     label53:
        if $z0 == 0 goto label59;

        $r28 = new org.htmlcleaner.BrowserCompactXmlSerializer;

        $r16 = $r28;

     label54:
        specialinvoke $r28.<org.htmlcleaner.BrowserCompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r7);

     label55:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outcharset>;

     label56:
        virtualinvoke $r16.<org.htmlcleaner.BrowserCompactXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r10, r12, $r4);

     label57:
        return;

     label58:
        r17 := @caughtexception;

        $r23 = new org.apache.tools.ant.BuildException;

        specialinvoke $r23.<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>(r17);

        $r31 = (java.lang.Throwable) $r23;

        throw $r31;

     label59:
        $r4 = "pretty";

        r2 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outputtype>;

     label60:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

     label61:
        if $z0 == 0 goto label66;

        $r29 = new org.htmlcleaner.PrettyXmlSerializer;

        $r18 = $r29;

     label62:
        specialinvoke $r29.<org.htmlcleaner.PrettyXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r7);

     label63:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outcharset>;

     label64:
        virtualinvoke $r18.<org.htmlcleaner.PrettyXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r10, r12, $r4);

     label65:
        return;

     label66:
        $r30 = new org.htmlcleaner.SimpleXmlSerializer;

        $r19 = $r30;

     label67:
        specialinvoke $r30.<org.htmlcleaner.SimpleXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r7);

     label68:
        $r4 = r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outcharset>;

     label69:
        virtualinvoke $r19.<org.htmlcleaner.SimpleXmlSerializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>($r10, r12, $r4);

     label70:
        return;

        catch java.io.IOException from label11 to label12 with label42;
        catch java.io.IOException from label13 to label14 with label42;
        catch java.io.IOException from label16 to label17 with label42;
        catch java.io.IOException from label18 to label19 with label42;
        catch org.htmlcleaner.XPatherException from label11 to label12 with label58;
        catch org.htmlcleaner.XPatherException from label13 to label14 with label58;
        catch org.htmlcleaner.XPatherException from label16 to label17 with label58;
        catch org.htmlcleaner.XPatherException from label18 to label19 with label58;
        catch java.io.IOException from label20 to label21 with label46;
        catch java.io.IOException from label24 to label25 with label46;
        catch java.io.IOException from label28 to label29 with label46;
        catch java.io.IOException from label30 to label31 with label46;
        catch java.io.IOException from label32 to label33 with label46;
        catch org.htmlcleaner.XPatherException from label20 to label21 with label58;
        catch org.htmlcleaner.XPatherException from label24 to label25 with label58;
        catch org.htmlcleaner.XPatherException from label28 to label29 with label58;
        catch org.htmlcleaner.XPatherException from label30 to label31 with label58;
        catch org.htmlcleaner.XPatherException from label32 to label33 with label58;
        catch java.io.IOException from label35 to label36 with label42;
        catch java.io.IOException from label37 to label38 with label42;
        catch java.io.IOException from label40 to label41 with label42;
        catch org.htmlcleaner.XPatherException from label35 to label36 with label58;
        catch org.htmlcleaner.XPatherException from label37 to label38 with label58;
        catch org.htmlcleaner.XPatherException from label40 to label41 with label58;
        catch java.io.IOException from label43 to label44 with label46;
        catch java.io.IOException from label45 to label46 with label46;
        catch org.htmlcleaner.XPatherException from label43 to label44 with label58;
        catch org.htmlcleaner.XPatherException from label45 to label46 with label58;
        catch java.io.IOException from label49 to label50 with label46;
        catch java.io.IOException from label52 to label53 with label46;
        catch java.io.IOException from label54 to label55 with label46;
        catch java.io.IOException from label56 to label57 with label46;
        catch org.htmlcleaner.XPatherException from label49 to label50 with label58;
        catch org.htmlcleaner.XPatherException from label52 to label53 with label58;
        catch org.htmlcleaner.XPatherException from label54 to label55 with label58;
        catch org.htmlcleaner.XPatherException from label56 to label57 with label58;
        catch java.io.IOException from label60 to label61 with label46;
        catch java.io.IOException from label62 to label63 with label46;
        catch java.io.IOException from label64 to label65 with label46;
        catch java.io.IOException from label67 to label68 with label46;
        catch java.io.IOException from label69 to label70 with label46;
        catch org.htmlcleaner.XPatherException from label60 to label61 with label58;
        catch org.htmlcleaner.XPatherException from label62 to label63 with label58;
        catch org.htmlcleaner.XPatherException from label64 to label65 with label58;
        catch org.htmlcleaner.XPatherException from label67 to label68 with label58;
        catch org.htmlcleaner.XPatherException from label69 to label70 with label58;
    }
    public void setAdvancedxmlescape(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean advancedxmlescape> = $z0;

        return;
    }
    public void setAllowhtmlinsideattributes(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean allowhtmlinsideattributes> = $z0;

        return;
    }
    public void setAllowmultiwordattributes(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean allowmultiwordattributes> = $z0;

        return;
    }
    public void setBooleanatts(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String booleanatts> = $r1;

        return;
    }
    public void setDest(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String dest> = $r1;

        return;
    }
    public void setHyphenreplacement(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String hyphenreplacement> = $r1;

        return;
    }
    public void setIgnoreqe(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean ignoreqe> = $z0;

        return;
    }
    public void setIncharset(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String incharset> = $r1;

        return;
    }
    public void setNamespacesaware(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean namespacesaware> = $z0;

        return;
    }
    public void setNodebyxpath(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String nodebyxpath> = $r1;

        return;
    }
    public void setOmitcomments(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitcomments> = $z0;

        return;
    }
    public void setOmitdeprtags(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitdeprtags> = $z0;

        return;
    }
    public void setOmitdoctypedecl(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitdoctypedecl> = $z0;

        return;
    }
    public void setOmithtmlenvelope(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omithtmlenvelope> = $z0;

        return;
    }
    public void setOmitunknowntags(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitunknowntags> = $z0;

        return;
    }
    public void setOmitxmldecl(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean omitxmldecl> = $z0;

        return;
    }
    public void setOutcharset(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outcharset> = $r1;

        return;
    }
    public void setOutputtype(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String outputtype> = $r1;

        return;
    }
    public void setPrunetags(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String prunetags> = $r1;

        return;
    }
    public void setSpecialentities(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean specialentities> = $z0;

        return;
    }
    public void setSrc(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String src> = $r1;

        return;
    }
    public void setTaginfofile(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String taginfofile> = $r1;

        return;
    }
    public void setText(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String text> = $r1;

        return;
    }
    public void setTransform(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String transform> = $r1;

        return;
    }
    public void setTreatdeprtagsascontent(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean treatdeprtagsascontent> = $z0;

        return;
    }
    public void setTreatunknowntagsascontent(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean treatunknowntagsascontent> = $z0;

        return;
    }
    public void setUnicodechars(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean unicodechars> = $z0;

        return;
    }
    public void setUsecdata(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean usecdata> = $z0;

        return;
    }
    public void setUsecdatafor(java.lang.String)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: java.lang.String usecdatafor> = $r1;

        return;
    }
    public void setUseemptyelementtags(boolean)
    {
        org.htmlcleaner.HtmlCleanerForAnt r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleanerForAnt;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.HtmlCleanerForAnt: boolean useemptyelementtags> = $z0;

        return;
    }
