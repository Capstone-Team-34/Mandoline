org.htmlcleaner.HtmlCleaner extends java.lang.Object
public static int HTML_4
public static int HTML_5
private static final java.lang.String MARKER_ATTRIBUTE
private org.htmlcleaner.CleanerProperties properties
private org.htmlcleaner.CleanerTransformations transformations
    static void <clinit>()
    {
        <org.htmlcleaner.HtmlCleaner: int HTML_4> = 4;

        <org.htmlcleaner.HtmlCleaner: int HTML_5> = 5;

        return;
    }
    public void <init>()
    {
        org.htmlcleaner.HtmlCleaner r0;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>(null, null);

        return;
    }
    public void <init>(org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanerProperties $r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>(null, $r1);

        return;
    }
    public void <init>(org.htmlcleaner.ITagInfoProvider)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.ITagInfoProvider $r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.ITagInfoProvider;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>($r1, null);

        return;
    }
    public void <init>(org.htmlcleaner.ITagInfoProvider, org.htmlcleaner.CleanerProperties)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.ITagInfoProvider r1, $r3;
        org.htmlcleaner.CleanerProperties $r2;
        int $i0, $i1;
        org.htmlcleaner.Html4TagProvider $r4;
        org.htmlcleaner.Html5TagProvider $r5;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        r1 := @parameter0: org.htmlcleaner.ITagInfoProvider;

        $r2 := @parameter1: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r2 != null goto label1;

        $r2 = new org.htmlcleaner.CleanerProperties;

        specialinvoke $r2.<org.htmlcleaner.CleanerProperties: void <init>()>();

     label1:
        r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties> = $r2;

        if r1 != null goto label3;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r3 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>();

        if $r3 != null goto label3;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $i0 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: int getHtmlVersion()>();

        $i1 = <org.htmlcleaner.HtmlCleaner: int HTML_4>;

        if $i0 != $i1 goto label2;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r4 = <org.htmlcleaner.Html4TagProvider: org.htmlcleaner.Html4TagProvider INSTANCE>;

        virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: void setTagInfoProvider(org.htmlcleaner.ITagInfoProvider)>($r4);

        return;

     label2:
        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r5 = <org.htmlcleaner.Html5TagProvider: org.htmlcleaner.Html5TagProvider INSTANCE>;

        virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: void setTagInfoProvider(org.htmlcleaner.ITagInfoProvider)>($r5);

        return;

     label3:
        if r1 == null goto label5;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        if r1 != null goto label4;

        r1 = <org.htmlcleaner.Html4TagProvider: org.htmlcleaner.Html4TagProvider INSTANCE>;

     label4:
        virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: void setTagInfoProvider(org.htmlcleaner.ITagInfoProvider)>(r1);

     label5:
        return;
    }
    static void access$300(org.htmlcleaner.HtmlCleaner)
    {
        org.htmlcleaner.HtmlCleaner $r0;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner;

        specialinvoke $r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return;
    }
    private void addAttributesToTag(org.htmlcleaner.TagNode, java.util.Map)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagNode $r1;
        java.util.Map r2, $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.String r8, r9;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        r2 := @parameter1: java.util.Map;

        if r2 == null goto label2;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r6;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);

        if $z0 != 0 goto label1;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r6;

        virtualinvoke $r1.<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>(r8, r9);

        goto label1;

     label2:
        return;
    }
    private boolean addIfNeededToPruneSet(org.htmlcleaner.TagNode, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.htmlcleaner.conditional.ITagNodeCondition r6;
        org.htmlcleaner.CleanerProperties $r7;
        org.htmlcleaner.audit.ErrorType $r8;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        $r3 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneTagSet>;

        if $r3 == null goto label2;

        $r3 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneTagSet>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.htmlcleaner.conditional.ITagNodeCondition) $r5;

        $z0 = interfaceinvoke r6.<org.htmlcleaner.conditional.ITagNodeCondition: boolean satisfy(org.htmlcleaner.TagNode)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: void addPruneNode(org.htmlcleaner.TagNode,org.htmlcleaner.CleanTimeValues)>($r1, $r2);

        $r7 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void fireConditionModification(org.htmlcleaner.conditional.ITagNodeCondition,org.htmlcleaner.TagNode)>(r6, $r1);

        return 1;

     label2:
        $r3 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set allowTagSet>;

        if $r3 == null goto label6;

        $r3 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set allowTagSet>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r3 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set allowTagSet>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.htmlcleaner.conditional.ITagNodeCondition) $r5;

        $z0 = interfaceinvoke r6.<org.htmlcleaner.conditional.ITagNodeCondition: boolean satisfy(org.htmlcleaner.TagNode)>($r1);

        if $z0 == 0 goto label3;

        return 0;

     label4:
        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean isAutoGenerated()>();

        if $z0 != 0 goto label5;

        $r7 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r8 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType NotAllowedTag>;

        virtualinvoke $r7.<org.htmlcleaner.CleanerProperties: void fireUserDefinedModification(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>(1, $r1, $r8);

     label5:
        virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: void addPruneNode(org.htmlcleaner.TagNode,org.htmlcleaner.CleanTimeValues)>($r1, $r2);

        return 1;

     label6:
        return 0;
    }
    private void addPossibleHeadCandidate(org.htmlcleaner.TagInfo, org.htmlcleaner.TagNode, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagInfo $r1;
        org.htmlcleaner.TagNode $r2;
        org.htmlcleaner.CleanTimeValues $r3;
        boolean $z0;
        java.util.Set $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagInfo;

        $r2 := @parameter1: org.htmlcleaner.TagNode;

        $r3 := @parameter2: org.htmlcleaner.CleanTimeValues;

        if $r1 == null goto label2;

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: boolean isHeadTag()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: boolean isHeadAndBodyTag()>();

        if $z0 == 0 goto label2;

        $z0 = $r3.<org.htmlcleaner.CleanTimeValues: boolean _headOpened>;

        if $z0 == 0 goto label2;

        $z0 = $r3.<org.htmlcleaner.CleanTimeValues: boolean _bodyOpened>;

        if $z0 != 0 goto label2;

     label1:
        $r4 = $r3.<org.htmlcleaner.CleanTimeValues: java.util.Set _headTags>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r2);

     label2:
        return;
    }
    private static boolean areCopiedTokensEqual(org.htmlcleaner.TagNode, org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.TagNode $r0, $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.util.Map $r4, $r5;

        $r0 := @parameter0: org.htmlcleaner.TagNode;

        $r1 := @parameter1: org.htmlcleaner.TagNode;

        $r2 = $r0.<org.htmlcleaner.TagNode: java.lang.String name>;

        $r3 = $r1.<org.htmlcleaner.TagNode: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r0.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r5 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void calculateRootNode(org.htmlcleaner.CleanTimeValues, java.util.Set)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        java.util.Set r2;
        org.htmlcleaner.TagNode $r3, $r9;
        org.htmlcleaner.CleanerProperties $r4;
        boolean $z0;
        java.util.List $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        java.util.Map $r8;
        java.lang.String $r10, $r13;
        java.lang.Thread $r11;
        java.lang.StringBuilder $r12;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        r2 := @parameter1: java.util.Set;

        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode htmlNode>;

        $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode> = $r3;

        $r4 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r4.<org.htmlcleaner.CleanerProperties: boolean isOmitHtmlEnvelope()>();

        if $z0 == 0 goto label2;

        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode bodyNode>;

        $r5 = virtualinvoke $r3.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        $r3 = new org.htmlcleaner.TagNode;

        specialinvoke $r3.<org.htmlcleaner.TagNode: void <init>(java.lang.String)>(null);

        $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode> = $r3;

        if $r5 == null goto label2;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        virtualinvoke $r3.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        $r8 = virtualinvoke $r3.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        $z0 = virtualinvoke $r3.<org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>("xmlns");

        if $z0 == 0 goto label3;

        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        $r9 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        $r10 = virtualinvoke $r9.<org.htmlcleaner.TagNode: java.lang.String getAttributeByName(java.lang.String)>("xmlns");

        virtualinvoke $r3.<org.htmlcleaner.TagNode: void addNamespaceDeclaration(java.lang.String,java.lang.String)>("", $r10);

     label3:
        $r4 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r4.<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>();

        if $z0 == 0 goto label6;

        if r2 == null goto label6;

        $r6 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r11.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label5;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return;

     label5:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.String) $r7;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r13);

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 != 0 goto label4;

        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        virtualinvoke $r3.<org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>($r13, $r10);

        goto label4;

     label6:
        return;
    }
    private void closeAll(java.util.List, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.List $r1, $r7;
        org.htmlcleaner.CleanTimeValues $r2;
        org.htmlcleaner.CleanerProperties $r3;
        org.htmlcleaner.audit.ErrorType $r4;
        org.htmlcleaner.HtmlCleaner$OpenTags $r5;
        org.htmlcleaner.HtmlCleaner$TagPos $r6, r10;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.Thread $r11;
        int $i0;
        org.htmlcleaner.TagNode $r12;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        $r5 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $r6 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$1600(org.htmlcleaner.HtmlCleaner$OpenTags)>($r5);

        $r5 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $r7 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List access$700(org.htmlcleaner.HtmlCleaner$OpenTags)>($r5);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.htmlcleaner.HtmlCleaner$TagPos) $r9;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r11.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return;

     label2:
        $r3 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>(r10);

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r12 = (org.htmlcleaner.TagNode) $r9;

        $r4 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType UnclosedTag>;

        virtualinvoke $r3.<org.htmlcleaner.CleanerProperties: void fireHtmlError(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>(1, $r12, $r4);

        goto label1;

     label3:
        if $r6 == null goto label4;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object,org.htmlcleaner.CleanTimeValues)>($r1, $r6, null, $r2);

     label4:
        return;
    }
    private java.util.List closeSnippet(java.util.List, org.htmlcleaner.HtmlCleaner$TagPos, java.lang.Object, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.List $r1;
        org.htmlcleaner.HtmlCleaner$TagPos $r2;
        java.lang.Object $r3, $r8;
        org.htmlcleaner.CleanTimeValues $r4;
        java.util.ArrayList r5;
        int $i0;
        java.util.ListIterator $r6, $r11;
        org.htmlcleaner.TagNode r7, r10;
        boolean z0, $z1;
        java.lang.Thread $r9;
        java.lang.String $r12;
        org.htmlcleaner.TagInfo $r13;
        org.htmlcleaner.HtmlCleaner$OpenTags $r14;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.htmlcleaner.HtmlCleaner$TagPos;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: org.htmlcleaner.CleanTimeValues;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r2);

        $r6 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        r7 = null;

        $r8 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        z0 = 0;

     label01:
        if $r3 != null goto label02;

        if z0 == 0 goto label03;

     label02:
        if $r3 == null goto label12;

        if $r8 == $r3 goto label12;

     label03:
        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r9.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 == 0 goto label04;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return r5;

     label04:
        $z1 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isStartToken(java.lang.Object)>($r8);

        if $z1 == 0 goto label10;

        r10 = (org.htmlcleaner.TagNode) $r8;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r10);

        $r1 = virtualinvoke r10.<org.htmlcleaner.TagNode: java.util.List getItemsToMove()>();

        if $r1 == null goto label05;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$NestingState pushNesting(org.htmlcleaner.CleanTimeValues)>($r4);

        $r11 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>(0);

        virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator,org.htmlcleaner.CleanTimeValues)>($r1, $r11, $r4);

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void closeAll(java.util.List,org.htmlcleaner.CleanTimeValues)>($r1, $r4);

        virtualinvoke r10.<org.htmlcleaner.TagNode: void setItemsToMove(java.util.List)>(null);

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$NestingState popNesting(org.htmlcleaner.CleanTimeValues)>($r4);

     label05:
        r10 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode createTagNode(org.htmlcleaner.TagNode)>(r10);

        $r12 = virtualinvoke r10.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r13 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagInfo getTagInfo(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r12, $r4);

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode,org.htmlcleaner.CleanTimeValues)>($r13, r10, $r4);

        if r7 == null goto label08;

        virtualinvoke r7.<org.htmlcleaner.TagNode: void addChildren(java.util.List)>($r1);

        virtualinvoke r7.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>(r10);

        interfaceinvoke $r6.<java.util.ListIterator: void set(java.lang.Object)>(null);

     label06:
        $r14 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r4);

        $r12 = virtualinvoke r10.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: void access$1500(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>($r14, $r12);

        r7 = r10;

     label07:
        $z1 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r8 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        goto label01;

     label08:
        if $r1 == null goto label09;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r10);

        interfaceinvoke $r6.<java.util.ListIterator: void set(java.lang.Object)>($r1);

        goto label06;

     label09:
        interfaceinvoke $r6.<java.util.ListIterator: void set(java.lang.Object)>(r10);

        goto label06;

     label10:
        if r7 == null goto label07;

        interfaceinvoke $r6.<java.util.ListIterator: void set(java.lang.Object)>(null);

        if $r8 == null goto label07;

        virtualinvoke r7.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>($r8);

        goto label07;

     label11:
        z0 = 1;

        goto label01;

     label12:
        return r5;
    }
    private void createDocumentNodes(java.util.List, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.List $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        java.util.Iterator $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.htmlcleaner.TagNode r5, $r12;
        org.htmlcleaner.ITagInfoProvider $r6;
        java.lang.String $r7, $r9;
        org.htmlcleaner.TagInfo $r8;
        java.util.Set $r10;
        java.lang.Thread $r11;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r4 == null goto label01;

        $z0 = 1;

        $z1 = $r4 instanceof org.htmlcleaner.TagNode;

        if $z1 == 0 goto label03;

        r5 = (org.htmlcleaner.TagNode) $r4;

        $r6 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>();

        $r7 = virtualinvoke r5.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r8 = interfaceinvoke $r6.<org.htmlcleaner.ITagInfoProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>($r7);

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode,org.htmlcleaner.CleanTimeValues)>($r8, r5, $r2);

     label02:
        if $z0 == 0 goto label01;

        r5 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode bodyNode>;

        virtualinvoke r5.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>($r4);

        goto label01;

     label03:
        $z1 = $r4 instanceof org.htmlcleaner.ContentNode;

        if $z1 == 0 goto label02;

        $r7 = "";

        $r9 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label04;

        $z0 = 1;

        goto label02;

     label04:
        $z0 = 0;

        goto label02;

     label05:
        $r10 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set _headTags>;

        $r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r11.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label07;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return;

     label07:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.htmlcleaner.TagNode) $r4;

        $r12 = virtualinvoke r5.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>();

        $z0 = 1;

     label08:
        if $r12 == null goto label09;

        $r10 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set _headTags>;

        $z1 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z1 == 0 goto label10;

        $z0 = 0;

     label09:
        if $z0 == 0 goto label06;

        virtualinvoke r5.<org.htmlcleaner.TagNode: boolean removeFromTree()>();

        $r12 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode headNode>;

        virtualinvoke $r12.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>(r5);

        goto label06;

     label10:
        $r12 = virtualinvoke $r12.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>();

        goto label08;

     label11:
        return;
    }
    private org.htmlcleaner.TagNode createTagNode(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagNode $r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        virtualinvoke $r1.<org.htmlcleaner.TagNode: void setFormed()>();

        return $r1;
    }
    private org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        java.util.Stack $r2;
        java.lang.Object $r3;
        org.htmlcleaner.HtmlCleaner$NestingState $r4;
        org.htmlcleaner.HtmlCleaner$ChildBreaks $r5;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        $r2 = $r1.<org.htmlcleaner.CleanTimeValues: java.util.Stack nestingStates>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r4 = (org.htmlcleaner.HtmlCleaner$NestingState) $r3;

        $r5 = virtualinvoke $r4.<org.htmlcleaner.HtmlCleaner$NestingState: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks()>();

        return $r5;
    }
    private org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        java.util.Stack $r2;
        java.lang.Object $r3;
        org.htmlcleaner.HtmlCleaner$NestingState $r4;
        org.htmlcleaner.HtmlCleaner$OpenTags $r5;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        $r2 = $r1.<org.htmlcleaner.CleanTimeValues: java.util.Stack nestingStates>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r4 = (org.htmlcleaner.HtmlCleaner$NestingState) $r3;

        $r5 = virtualinvoke $r4.<org.htmlcleaner.HtmlCleaner$NestingState: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags()>();

        return $r5;
    }
    private org.htmlcleaner.TagInfo getTagInfo(java.lang.String, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.lang.String $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        boolean $z0;
        org.htmlcleaner.ITagInfoProvider $r3;
        org.htmlcleaner.TagInfo $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isAllowedAsForeignMarkup(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r1, $r2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>();

        $r4 = interfaceinvoke $r3.<org.htmlcleaner.ITagInfoProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>($r1);

        return $r4;

     label1:
        return null;
    }
    private void handleInterruption()
    {
        org.htmlcleaner.HtmlCleaner r0;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        return;
    }
    private boolean isAllowedAsForeignMarkup(java.lang.String, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.lang.String $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        org.htmlcleaner.CleanerProperties $r3;
        boolean $z0;
        java.util.Stack $r4;
        int $i0;
        java.lang.Object $r5;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r3.<org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if $r1 == null goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Stack namespace>;

        if $r4 == null goto label3;

        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Stack namespace>;

        $i0 = virtualinvoke $r4.<java.util.Stack: int size()>();

        if $i0 == 0 goto label3;

        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Stack namespace>;

        $r5 = virtualinvoke $r4.<java.util.Stack: java.lang.Object peek()>();

        $r1 = (java.lang.String) $r5;

        if $r1 == null goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/1999/xhtml");

        if $z0 != 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    private boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.BaseToken $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        org.htmlcleaner.HtmlCleaner$OpenTags $r3;
        org.htmlcleaner.HtmlCleaner$TagPos $r4;
        org.htmlcleaner.TagInfo $r5;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.BaseToken;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        $r3 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $r4 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>($r3);

        if $r4 == null goto label1;

        $r5 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$400(org.htmlcleaner.HtmlCleaner$TagPos)>($r4);

        if $r5 == null goto label1;

        $r5 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$400(org.htmlcleaner.HtmlCleaner$TagPos)>($r4);

        $z0 = virtualinvoke $r5.<org.htmlcleaner.TagInfo: boolean allowsItem(org.htmlcleaner.BaseToken)>($r1);

        return $z0;

     label1:
        return 1;
    }
    private static boolean isCopiedTokenEqualToNextThreeCopiedTokens(org.htmlcleaner.TagNode, java.util.ListIterator)
    {
        org.htmlcleaner.TagNode $r0, $r4;
        java.util.ListIterator r1;
        int i0, i1, i2;
        boolean $z0;
        java.lang.Object $r2;
        org.htmlcleaner.BaseToken r3;

        $r0 := @parameter0: org.htmlcleaner.TagNode;

        r1 := @parameter1: java.util.ListIterator;

        i0 = 0;

        i1 = 0;

     label1:
        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        if i0 >= 3 goto label2;

        $r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        r3 = (org.htmlcleaner.BaseToken) $r2;

        i0 = i0 + 1;

        $z0 = r3 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label2;

        $r4 = (org.htmlcleaner.TagNode) r3;

        $z0 = virtualinvoke $r4.<org.htmlcleaner.TagNode: boolean isCopy()>();

        if $z0 == 0 goto label2;

        $r4 = (org.htmlcleaner.TagNode) r3;

        $z0 = staticinvoke <org.htmlcleaner.HtmlCleaner: boolean areCopiedTokensEqual(org.htmlcleaner.TagNode,org.htmlcleaner.TagNode)>($r4, $r0);

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        i2 = i2 + 1;

        goto label3;

     label4:
        if i1 != 3 goto label5;

        return 1;

     label5:
        return 0;
    }
    private boolean isFatalTagSatisfied(org.htmlcleaner.TagInfo, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagInfo $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        boolean z0, $z1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.String r6;
        org.htmlcleaner.HtmlCleaner$OpenTags $r7;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagInfo;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        z0 = 1;

        if $r1 == null goto label3;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: java.util.Set getFatalTags()>();

        z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if z0 == 0 goto label1;

        return 1;

     label1:
        z0 = 0;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: java.util.Set getFatalTags()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $z1 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$500(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>($r7, r6);

        if $z1 == 0 goto label2;

        z0 = 1;

        goto label2;

     label3:
        return z0;
    }
    private boolean isStartToken(java.lang.Object)
    {
        org.htmlcleaner.HtmlCleaner r0;
        boolean $z0;
        java.lang.Object $r1;
        org.htmlcleaner.TagNode $r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label1;

        $r2 = (org.htmlcleaner.TagNode) $r1;

        $z0 = virtualinvoke $r2.<org.htmlcleaner.TagNode: boolean isFormed()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean markNodesToPrune(java.util.List, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.List $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        boolean z0, $z1;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.util.Set $r5;
        org.htmlcleaner.TagNode r6;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        z0 = 0;

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof org.htmlcleaner.TagNode;

        if $z1 == 0 goto label1;

        $r5 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneNodeSet>;

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        r6 = (org.htmlcleaner.TagNode) $r4;

        $z1 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean addIfNeededToPruneSet(org.htmlcleaner.TagNode,org.htmlcleaner.CleanTimeValues)>(r6, $r2);

        if $z1 == 0 goto label2;

        z0 = 1;

        goto label1;

     label2:
        $z1 = virtualinvoke r6.<org.htmlcleaner.TagNode: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r1 = virtualinvoke r6.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        $z1 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean markNodesToPrune(java.util.List,org.htmlcleaner.CleanTimeValues)>($r1, $r2);

        z0 = z0 | $z1;

        goto label1;

     label3:
        return z0;
    }
    private boolean mustAddRequiredParent(org.htmlcleaner.TagInfo, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagInfo $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        boolean $z0, $z1, $z2;
        java.util.Set $r3;
        int i0, $i1;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.String r6;
        org.htmlcleaner.HtmlCleaner$OpenTags $r7;
        org.htmlcleaner.HtmlCleaner$TagPos $r8;
        java.util.List $r9, $r10;
        java.util.ListIterator $r11;
        java.lang.Thread $r12;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagInfo;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        $z0 = 1;

        if $r1 != null goto label01;

        return 0;

     label01:
        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: java.util.Set getRequiredParentTags()>();

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label14;

        i0 = -1;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: java.util.Set getFatalTags()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        if r6 == null goto label02;

        $r7 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $r8 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$600(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>($r7, r6);

        if $r8 == null goto label02;

        i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r8);

        goto label02;

     label03:
        $z1 = 1;

        $r3 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: java.util.Set getRequiredParentTags()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        if r6 == null goto label04;

        $r7 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $r8 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$600(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>($r7, r6);

        if $r8 == null goto label04;

        $i1 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r8);

        if $i1 > i0 goto label05;

        $z1 = 1;

        goto label04;

     label05:
        $z1 = 0;

        goto label04;

     label06:
        if $z1 == 0 goto label14;

        $r7 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $r9 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List access$700(org.htmlcleaner.HtmlCleaner$OpenTags)>($r7);

        $r7 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r2);

        $r10 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List access$700(org.htmlcleaner.HtmlCleaner$OpenTags)>($r7);

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r11 = interfaceinvoke $r9.<java.util.List: java.util.ListIterator listIterator(int)>($i1);

     label07:
        $z1 = interfaceinvoke $r11.<java.util.ListIterator: boolean hasPrevious()>();

        if $z1 == 0 goto label13;

        $r5 = interfaceinvoke $r11.<java.util.ListIterator: java.lang.Object previous()>();

        $r8 = (org.htmlcleaner.HtmlCleaner$TagPos) $r5;

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r12.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 == 0 goto label10;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        $i1 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r8);

        if $i1 > i0 goto label09;

     label08:
        return $z0;

     label09:
        $z0 = 0;

        goto label08;

     label10:
        r6 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$000(org.htmlcleaner.HtmlCleaner$TagPos)>($r8);

        $z1 = virtualinvoke $r1.<org.htmlcleaner.TagInfo: boolean isHigher(java.lang.String)>(r6);

        if $z1 == 0 goto label07;

        $i1 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r8);

        if $i1 > i0 goto label12;

     label11:
        return $z0;

     label12:
        $z0 = 0;

        goto label11;

     label13:
        return 1;

     label14:
        return 0;
    }
    private org.htmlcleaner.TagNode newTagNode(java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.lang.String $r1;
        org.htmlcleaner.TagNode r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.htmlcleaner.TagNode;

        specialinvoke r2.<org.htmlcleaner.TagNode: void <init>(java.lang.String)>($r1);

        return r2;
    }
    private org.htmlcleaner.HtmlCleaner$NestingState popNesting(org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        java.lang.Object $r2;
        java.util.Stack $r3;
        org.htmlcleaner.HtmlCleaner$NestingState $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        $r3 = $r1.<org.htmlcleaner.CleanTimeValues: java.util.Stack nestingStates>;

        $r2 = virtualinvoke $r3.<java.util.Stack: java.lang.Object pop()>();

        $r4 = (org.htmlcleaner.HtmlCleaner$NestingState) $r2;

        return $r4;
    }
    private org.htmlcleaner.HtmlCleaner$NestingState pushNesting(org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        org.htmlcleaner.HtmlCleaner$NestingState $r2;
        java.lang.Object $r3;
        java.util.Stack $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        $r4 = $r1.<org.htmlcleaner.CleanTimeValues: java.util.Stack nestingStates>;

        $r2 = new org.htmlcleaner.HtmlCleaner$NestingState;

        specialinvoke $r2.<org.htmlcleaner.HtmlCleaner$NestingState: void <init>(org.htmlcleaner.HtmlCleaner)>(r0);

        $r3 = virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        $r2 = (org.htmlcleaner.HtmlCleaner$NestingState) $r3;

        return $r2;
    }
    private void reopenBrokenNode(java.util.ListIterator, org.htmlcleaner.TagNode, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.ListIterator r1;
        org.htmlcleaner.TagNode $r2, $r4;
        org.htmlcleaner.CleanTimeValues $r3;
        org.htmlcleaner.HtmlCleaner$OpenTags $r5;
        java.lang.String $r6;
        int $i0;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        r1 := @parameter0: java.util.ListIterator;

        $r2 := @parameter1: org.htmlcleaner.TagNode;

        $r3 := @parameter2: org.htmlcleaner.CleanTimeValues;

        $r4 = virtualinvoke $r2.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode makeCopy()>();

        virtualinvoke $r4.<org.htmlcleaner.TagNode: void setAutoGenerated(boolean)>(1);

        virtualinvoke $r4.<org.htmlcleaner.TagNode: void removeAttribute(java.lang.String)>("id");

        interfaceinvoke r1.<java.util.ListIterator: void add(java.lang.Object)>($r4);

        $r5 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $r6 = virtualinvoke $r2.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $i0 = interfaceinvoke r1.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: void access$1400(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String,int)>($r5, $r6, $i0);

        return;
    }
    private void saveToLastOpenTag(java.util.List, java.lang.Object, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.List $r1;
        java.lang.Object $r2, $r7;
        org.htmlcleaner.CleanTimeValues $r3;
        org.htmlcleaner.HtmlCleaner$OpenTags $r4;
        org.htmlcleaner.HtmlCleaner$TagPos $r5;
        org.htmlcleaner.TagInfo $r6;
        boolean $z0;
        int $i0;
        org.htmlcleaner.TagNode r8;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.htmlcleaner.CleanTimeValues;

        $r4 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $r5 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>($r4);

        if $r5 == null goto label1;

        $r6 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$400(org.htmlcleaner.HtmlCleaner$TagPos)>($r5);

        if $r6 == null goto label1;

        $r6 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$400(org.htmlcleaner.HtmlCleaner$TagPos)>($r5);

        $z0 = virtualinvoke $r6.<org.htmlcleaner.TagInfo: boolean isIgnorePermitted()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $r5 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$900(org.htmlcleaner.HtmlCleaner$OpenTags)>($r4);

        if $r5 == null goto label2;

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r5);

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r8 = (org.htmlcleaner.TagNode) $r7;

        if r8 == null goto label2;

        virtualinvoke r8.<org.htmlcleaner.TagNode: void addItemForMoving(java.lang.Object)>($r2);

     label2:
        return;
    }
    protected void addPruneNode(org.htmlcleaner.TagNode, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        java.util.Set $r3;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        virtualinvoke $r1.<org.htmlcleaner.TagNode: void setPruned(boolean)>(1);

        $r3 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneNodeSet>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }
    public org.htmlcleaner.TagNode clean(java.io.File) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.io.File $r1;
        org.htmlcleaner.CleanerProperties $r2;
        java.lang.String $r3;
        org.htmlcleaner.TagNode $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.io.File;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r3 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: java.lang.String getCharset()>();

        $r4 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>($r1, $r3);

        return $r4;
    }
    public org.htmlcleaner.TagNode clean(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.io.File $r1;
        java.lang.String $r2;
        java.io.FileInputStream r3;
        java.io.InputStreamReader r4, r6;
        org.htmlcleaner.TagNode $r5;
        org.htmlcleaner.CleanTimeValues $r7;
        java.lang.Throwable $r8;
        java.io.IOException $r9, $r10, $r11, $r12;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.io.FileInputStream;

        specialinvoke r3.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        r6 = null;

     label01:
        r4 = new java.io.InputStreamReader;

        specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r3, $r2);

     label02:
        $r7 = new org.htmlcleaner.CleanTimeValues;

        specialinvoke $r7.<org.htmlcleaner.CleanTimeValues: void <init>()>();

        $r5 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader,org.htmlcleaner.CleanTimeValues)>(r4, $r7);

     label03:
        if r4 == null goto label05;

     label04:
        virtualinvoke r4.<java.io.Reader: void close()>();

     label05:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label06:
        return $r5;

     label07:
        $r8 := @caughtexception;

     label08:
        if r6 == null goto label10;

     label09:
        virtualinvoke r6.<java.io.Reader: void close()>();

     label10:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label11:
        throw $r8;

     label12:
        $r9 := @caughtexception;

        goto label05;

     label13:
        $r10 := @caughtexception;

        return $r5;

     label14:
        $r11 := @caughtexception;

        goto label10;

     label15:
        $r12 := @caughtexception;

        goto label11;

     label16:
        $r8 := @caughtexception;

        r6 = r4;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.io.IOException from label10 to label11 with label15;
    }
    public org.htmlcleaner.TagNode clean(java.io.InputStream) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.io.InputStream $r1;
        org.htmlcleaner.CleanerProperties $r2;
        java.lang.String $r3;
        org.htmlcleaner.TagNode $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r3 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: java.lang.String getCharset()>();

        $r4 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.InputStream,java.lang.String)>($r1, $r3);

        return $r4;
    }
    public org.htmlcleaner.TagNode clean(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.io.InputStream $r1;
        java.lang.String $r2;
        org.htmlcleaner.CleanTimeValues $r3;
        org.htmlcleaner.TagNode $r4;
        java.io.InputStreamReader $r5;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.lang.String;

        $r5 = new java.io.InputStreamReader;

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, $r2);

        $r3 = new org.htmlcleaner.CleanTimeValues;

        specialinvoke $r3.<org.htmlcleaner.CleanTimeValues: void <init>()>();

        $r4 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader,org.htmlcleaner.CleanTimeValues)>($r5, $r3);

        return $r4;
    }
    public org.htmlcleaner.TagNode clean(java.io.Reader) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.io.Reader $r1;
        org.htmlcleaner.TagNode $r2;
        org.htmlcleaner.CleanTimeValues $r3;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.io.Reader;

        $r3 = new org.htmlcleaner.CleanTimeValues;

        specialinvoke $r3.<org.htmlcleaner.CleanTimeValues: void <init>()>();

        $r2 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader,org.htmlcleaner.CleanTimeValues)>($r1, $r3);

        return $r2;
    }
    protected org.htmlcleaner.TagNode clean(java.io.Reader, org.htmlcleaner.CleanTimeValues) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.io.Reader $r1;
        org.htmlcleaner.CleanTimeValues $r2;
        org.htmlcleaner.HtmlTokenizer r3;
        java.util.Set $r4;
        java.util.HashSet $r5;
        org.htmlcleaner.CleanerProperties $r6;
        org.htmlcleaner.CleanerTransformations $r7;
        org.htmlcleaner.TagNode $r8, $r9;
        java.lang.Thread $r10;
        boolean $z0;
        java.util.List $r11;
        java.util.Iterator $r12;
        java.lang.Object $r13;
        org.htmlcleaner.DoctypeToken $r14;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: org.htmlcleaner.CleanTimeValues;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$NestingState pushNesting(org.htmlcleaner.CleanTimeValues)>($r2);

        $r2.<org.htmlcleaner.CleanTimeValues: boolean _headOpened> = 0;

        $r2.<org.htmlcleaner.CleanTimeValues: boolean _bodyOpened> = 0;

        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set _headTags>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set allTags>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

        $r5 = new java.util.HashSet;

        $r6 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r4 = virtualinvoke $r6.<org.htmlcleaner.CleanerProperties: java.util.Set getPruneTagSet()>();

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>($r4);

        $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneTagSet> = $r5;

        $r5 = new java.util.HashSet;

        $r6 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r4 = virtualinvoke $r6.<org.htmlcleaner.CleanerProperties: java.util.Set getAllowTagSet()>();

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>($r4);

        $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set allowTagSet> = $r5;

        $r6 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r7 = virtualinvoke $r6.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.CleanerTransformations getCleanerTransformations()>();

        r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerTransformations transformations> = $r7;

        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneNodeSet>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

        $r8 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode newTagNode(java.lang.String)>("html");

        $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode htmlNode> = $r8;

        $r8 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode newTagNode(java.lang.String)>("body");

        $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode bodyNode> = $r8;

        $r8 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode newTagNode(java.lang.String)>("head");

        $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode headNode> = $r8;

        $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode> = null;

        $r8 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode htmlNode>;

        $r9 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode headNode>;

        virtualinvoke $r8.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>($r9);

        $r8 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode htmlNode>;

        $r9 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode bodyNode>;

        virtualinvoke $r8.<org.htmlcleaner.TagNode: void addChild(java.lang.Object)>($r9);

        r3 = new org.htmlcleaner.HtmlTokenizer;

        specialinvoke r3.<org.htmlcleaner.HtmlTokenizer: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader,org.htmlcleaner.CleanTimeValues)>(r0, $r1, $r2);

        virtualinvoke r3.<org.htmlcleaner.HtmlTokenizer: void start()>();

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return null;

     label1:
        $r11 = virtualinvoke r3.<org.htmlcleaner.HtmlTokenizer: java.util.List getTokenList()>();

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void closeAll(java.util.List,org.htmlcleaner.CleanTimeValues)>($r11, $r2);

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return null;

     label2:
        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List,org.htmlcleaner.CleanTimeValues)>($r11, $r2);

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return null;

     label3:
        $r4 = virtualinvoke r3.<org.htmlcleaner.HtmlTokenizer: java.util.Set getNamespacePrefixes()>();

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void calculateRootNode(org.htmlcleaner.CleanTimeValues,java.util.Set)>($r2, $r4);

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label4;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return null;

     label4:
        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean markNodesToPrune(java.util.List,org.htmlcleaner.CleanTimeValues)>($r11, $r2);

        if $z0 == 0 goto label5;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label4;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return null;

     label5:
        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneNodeSet>;

        if $r4 == null goto label8;

        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneNodeSet>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        $r4 = $r2.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneNodeSet>;

        $r12 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label7;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return null;

     label7:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.htmlcleaner.TagNode) $r13;

        $r9 = virtualinvoke $r8.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>();

        if $r9 == null goto label6;

        virtualinvoke $r9.<org.htmlcleaner.TagNode: boolean removeChild(java.lang.Object)>($r8);

        goto label6;

     label8:
        $r8 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        $r14 = virtualinvoke r3.<org.htmlcleaner.HtmlTokenizer: org.htmlcleaner.DoctypeToken getDocType()>();

        virtualinvoke $r8.<org.htmlcleaner.TagNode: void setDocType(org.htmlcleaner.DoctypeToken)>($r14);

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$NestingState popNesting(org.htmlcleaner.CleanTimeValues)>($r2);

        $r8 = $r2.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode rootNode>;

        return $r8;
    }
    public org.htmlcleaner.TagNode clean(java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.lang.String $r1;
        java.io.IOException r2;
        org.htmlcleaner.CleanTimeValues $r3;
        org.htmlcleaner.TagNode $r4;
        java.io.StringReader $r5;
        org.htmlcleaner.HtmlCleanerException $r6;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.lang.String;

        $r5 = new java.io.StringReader;

     label1:
        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r1);

     label2:
        $r3 = new org.htmlcleaner.CleanTimeValues;

     label3:
        specialinvoke $r3.<org.htmlcleaner.CleanTimeValues: void <init>()>();

        $r4 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader,org.htmlcleaner.CleanTimeValues)>($r5, $r3);

     label4:
        return $r4;

     label5:
        r2 := @caughtexception;

        $r6 = new org.htmlcleaner.HtmlCleanerException;

        specialinvoke $r6.<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    public org.htmlcleaner.TagNode clean(java.net.URL) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.net.URL $r1;
        org.htmlcleaner.CleanerProperties $r2;
        java.lang.String $r3;
        org.htmlcleaner.TagNode $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.net.URL;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r3 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: java.lang.String getCharset()>();

        $r4 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>($r1, $r3);

        return $r4;
    }
    public org.htmlcleaner.TagNode clean(java.net.URL, java.lang.String) throws java.io.IOException
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.net.URL $r1;
        java.lang.String $r2;
        java.io.StringReader r3;
        java.lang.CharSequence $r4;
        org.htmlcleaner.CleanTimeValues $r5;
        org.htmlcleaner.TagNode $r6;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.net.URL;

        $r2 := @parameter1: java.lang.String;

        $r4 = staticinvoke <org.htmlcleaner.Utils: java.lang.CharSequence readUrl(java.net.URL,java.lang.String)>($r1, $r2);

        r3 = new java.io.StringReader;

        $r2 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        specialinvoke r3.<java.io.StringReader: void <init>(java.lang.String)>($r2);

        $r5 = new org.htmlcleaner.CleanTimeValues;

        specialinvoke $r5.<org.htmlcleaner.CleanTimeValues: void <init>()>();

        $r6 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader,org.htmlcleaner.CleanTimeValues)>(r3, $r5);

        return $r6;
    }
    protected java.util.Set getAllTags(org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        java.util.Set r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        r2 = $r1.<org.htmlcleaner.CleanTimeValues: java.util.Set allTags>;

        return r2;
    }
    protected java.util.Set getAllowTagSet(org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        java.util.Set r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        r2 = $r1.<org.htmlcleaner.CleanTimeValues: java.util.Set allowTagSet>;

        return r2;
    }
    public java.lang.String getInnerHtml(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.SimpleXmlSerializer $r2;
        org.htmlcleaner.CleanerProperties $r3;
        java.lang.String $r4, $r6;
        java.lang.StringBuilder $r5;
        int $i0, $i1;
        org.htmlcleaner.HtmlCleanerException $r7;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        if $r1 == null goto label2;

        $r2 = new org.htmlcleaner.SimpleXmlSerializer;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        specialinvoke $r2.<org.htmlcleaner.SimpleXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>($r3);

        $r4 = virtualinvoke $r2.<org.htmlcleaner.SimpleXmlSerializer: java.lang.String getAsString(org.htmlcleaner.TagNode)>($r1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>($r6);

        $i0 = $i0 + 1;

        $i1 = virtualinvoke $r4.<java.lang.String: int indexOf(int,int)>(62, $i0);

        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(60);

        if $i1 < 0 goto label1;

        if $i1 > $i0 goto label1;

        $i1 = $i1 + 1;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        return $r4;

     label1:
        return null;

     label2:
        $r7 = new org.htmlcleaner.HtmlCleanerException;

        specialinvoke $r7.<org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String)>("Cannot return inner html of the null node!");

        throw $r7;
    }
    public org.htmlcleaner.CleanerProperties getProperties()
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanerProperties r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        r1 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        return r1;
    }
    protected java.util.Set getPruneTagSet(org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanTimeValues $r1;
        java.util.Set r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.CleanTimeValues;

        r2 = $r1.<org.htmlcleaner.CleanTimeValues: java.util.Set pruneTagSet>;

        return r2;
    }
    public org.htmlcleaner.ITagInfoProvider getTagInfoProvider()
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.ITagInfoProvider $r1;
        org.htmlcleaner.CleanerProperties $r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r1 = virtualinvoke $r2.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>();

        return $r1;
    }
    public org.htmlcleaner.CleanerTransformations getTransformations()
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.CleanerTransformations r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        r1 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerTransformations transformations>;

        return r1;
    }
    public void initCleanerTransformations(java.util.Map)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.Map $r1;
        org.htmlcleaner.CleanerTransformations $r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.util.Map;

        $r2 = new org.htmlcleaner.CleanerTransformations;

        specialinvoke $r2.<org.htmlcleaner.CleanerTransformations: void <init>(java.util.Map)>($r1);

        r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerTransformations transformations> = $r2;

        return;
    }
    protected boolean isRemovingNodeReasonablySafe(org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagNode $r1;
        boolean $z0;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>("id");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>("name");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>("class");

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    void makeTree(java.util.List, java.util.ListIterator, org.htmlcleaner.CleanTimeValues)
    {
        org.htmlcleaner.HtmlCleaner r0;
        java.util.List $r1, $r14;
        java.util.ListIterator r2, $r21;
        org.htmlcleaner.CleanTimeValues $r3;
        java.util.ArrayList r4;
        boolean $z0;
        java.lang.Thread $r5;
        java.lang.Object $r6;
        org.htmlcleaner.BaseToken r7, r31;
        org.htmlcleaner.EndTagToken r8;
        java.lang.String $r9, $r17, $r24;
        org.htmlcleaner.TagInfo $r10, r22;
        org.htmlcleaner.CleanerProperties $r11;
        org.htmlcleaner.HtmlCleaner$OpenTags $r12;
        org.htmlcleaner.HtmlCleaner$TagPos $r13, $r19;
        int $i0, $i1;
        org.htmlcleaner.TagNode r15, $r26;
        java.util.Stack $r16;
        org.htmlcleaner.HtmlCleaner$ChildBreaks $r18;
        java.util.Iterator $r20;
        java.util.Set $r23;
        java.util.Map $r25;
        org.htmlcleaner.audit.ErrorType $r27;
        org.htmlcleaner.ProxyTagNode $r28;
        org.htmlcleaner.CommentNode $r29;
        org.htmlcleaner.ContentNode r30;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.ListIterator;

        $r3 := @parameter2: org.htmlcleaner.CleanTimeValues;

     label01:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label55;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r5.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 == 0 goto label02;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void handleInterruption()>();

        return;

     label02:
        $r6 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        r7 = (org.htmlcleaner.BaseToken) $r6;

        $z0 = r7 instanceof org.htmlcleaner.EndTagToken;

        if $z0 == 0 goto label17;

        r8 = (org.htmlcleaner.EndTagToken) r7;

        $r9 = virtualinvoke r8.<org.htmlcleaner.EndTagToken: java.lang.String getName()>();

        $r10 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagInfo getTagInfo(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r9, $r3);

        if $r10 != null goto label03;

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: boolean isOmitUnknownTags()>();

        if $z0 == 0 goto label03;

        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isAllowedAsForeignMarkup(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r9, $r3);

        if $z0 == 0 goto label04;

     label03:
        if $r10 == null goto label05;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean isDeprecated()>();

        if $z0 == 0 goto label05;

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: boolean isOmitDeprecatedTags()>();

        if $z0 == 0 goto label05;

     label04:
        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label05:
        if $r10 == null goto label06;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean allowsBody()>();

        if $z0 != 0 goto label06;

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label06:
        $r12 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $r13 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$600(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>($r12, $r9);

        if $r13 == null goto label01;

        $r14 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object,org.htmlcleaner.CleanTimeValues)>($r1, $r13, r8, $r3);

        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        if $i0 <= 0 goto label07;

        $r6 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        r15 = (org.htmlcleaner.TagNode) $r6;

        $z0 = virtualinvoke r15.<org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>("xmlns");

        if $z0 == 0 goto label07;

        $r16 = $r3.<org.htmlcleaner.CleanTimeValues: java.util.Stack namespace>;

        virtualinvoke $r16.<java.util.Stack: java.lang.Object pop()>();

     label07:
        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        $i0 = $i0 + -1;

     label08:
        if $i0 < 0 goto label10;

        $r6 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i0);

        r15 = (org.htmlcleaner.TagNode) $r6;

        if $i0 <= 0 goto label09;

        if $r10 == null goto label09;

        $r17 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean isContinueAfter(java.lang.String)>($r17);

        if $z0 == 0 goto label09;

        r15 = virtualinvoke r15.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode makeCopy()>();

        virtualinvoke r15.<org.htmlcleaner.TagNode: void setAutoGenerated(boolean)>(1);

        interfaceinvoke r2.<java.util.ListIterator: void add(java.lang.Object)>(r15);

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

     label09:
        $i0 = $i0 + -1;

        goto label08;

     label10:
        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $z0 = virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: boolean isEmpty()>();

        if $z0 != 0 goto label12;

     label11:
        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r13);

        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $i1 = virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: int getLastBreakingTagPosition()>();

        if $i0 >= $i1 goto label12;

        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: org.htmlcleaner.HtmlCleaner$TagPos pop()>();

        goto label11;

     label12:
        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $z0 = virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $r17 = virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.lang.String getLastBreakingTag()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z0 == 0 goto label01;

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r13);

        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $i1 = virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: int getLastBreakingTagPosition()>();

        if $i0 != $i1 goto label01;

        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $r16 = staticinvoke <org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack access$1000(org.htmlcleaner.HtmlCleaner$ChildBreaks)>($r18);

        $r6 = virtualinvoke $r16.<java.util.Stack: java.lang.Object peek()>();

        $r19 = (org.htmlcleaner.HtmlCleaner$TagPos) $r6;

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r19);

        $r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        if $r6 == null goto label16;

        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $r19 = virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: org.htmlcleaner.HtmlCleaner$TagPos pop()>();

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r19);

        $r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $z0 = $r6 instanceof org.htmlcleaner.TagNode;

        if $z0 == 0 goto label13;

        r15 = (org.htmlcleaner.TagNode) $r6;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void reopenBrokenNode(java.util.ListIterator,org.htmlcleaner.TagNode,org.htmlcleaner.CleanTimeValues)>(r2, r15, $r3);

        goto label12;

     label13:
        $z0 = $r6 instanceof java.util.List;

        if $z0 == 0 goto label12;

        $r14 = (java.util.List) $r6;

        $r20 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r6 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.htmlcleaner.TagNode) $r6;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r5.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 != 0 goto label55;

        interfaceinvoke r2.<java.util.ListIterator: void add(java.lang.Object)>(r15);

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        $r21 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>($i1);

        virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator,org.htmlcleaner.CleanTimeValues)>($r1, $r21, $r3);

        goto label14;

     label15:
        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, null);

        goto label12;

     label16:
        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: org.htmlcleaner.HtmlCleaner$TagPos pop()>();

        goto label12;

     label17:
        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isStartToken(java.lang.Object)>(r7);

        if $z0 == 0 goto label52;

        r15 = (org.htmlcleaner.TagNode) r7;

        $r9 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r10 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagInfo getTagInfo(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r9, $r3);

        $r12 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $z0 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1100(org.htmlcleaner.HtmlCleaner$OpenTags)>($r12);

        if $z0 == 0 goto label24;

        $r13 = null;

     label18:
        if $r13 != null goto label25;

        r22 = null;

     label19:
        $r23 = $r3.<org.htmlcleaner.CleanTimeValues: java.util.Set allTags>;

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $z0 = virtualinvoke r15.<org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>("xmlns");

        if $z0 == 0 goto label22;

        $r24 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.lang.String getAttributeByName(java.lang.String)>("xmlns");

        $r17 = $r24;

        $z0 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("https://www.w3.org/1999/xhtml");

        if $z0 != 0 goto label20;

        $z0 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("http://w3.org/1999/xhtml");

        if $z0 == 0 goto label21;

     label20:
        $r17 = "http://www.w3.org/1999/xhtml";

        $r25 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("xmlns", "http://www.w3.org/1999/xhtml");

        virtualinvoke r15.<org.htmlcleaner.TagNode: void setAttributes(java.util.Map)>($r25);

     label21:
        $r24 = "html";

        $z0 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label26;

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/TR/REC-html40");

        if $z0 == 0 goto label26;

        virtualinvoke r15.<org.htmlcleaner.TagNode: void removeAttribute(java.lang.String)>("xmlns");

     label22:
        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isAllowedAsForeignMarkup(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r9, $r3);

        if $z0 == 0 goto label28;

        virtualinvoke r15.<org.htmlcleaner.TagNode: void setForeignMarkup(boolean)>(1);

     label23:
        $r17 = "html";

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label29;

        $r26 = $r3.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode htmlNode>;

        $r25 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>($r26, $r25);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label24:
        $r12 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $r13 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>($r12);

        goto label18;

     label25:
        $r17 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$000(org.htmlcleaner.HtmlCleaner$TagPos)>($r13);

        r22 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagInfo getTagInfo(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r17, $r3);

        goto label19;

     label26:
        $r24 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r24.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label27;

        virtualinvoke r15.<org.htmlcleaner.TagNode: void removeAttribute(java.lang.String)>("xmlns");

        goto label22;

     label27:
        $r16 = $r3.<org.htmlcleaner.CleanTimeValues: java.util.Stack namespace>;

        virtualinvoke $r16.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r17);

        virtualinvoke r15.<org.htmlcleaner.TagNode: void addNamespaceDeclaration(java.lang.String,java.lang.String)>("", $r17);

        goto label22;

     label28:
        virtualinvoke r15.<org.htmlcleaner.TagNode: void setForeignMarkup(boolean)>(0);

        goto label23;

     label29:
        $r17 = "body";

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label30;

        $r3.<org.htmlcleaner.CleanTimeValues: boolean _bodyOpened> = 1;

        $r26 = $r3.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode bodyNode>;

        $r25 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>($r26, $r25);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label30:
        $r17 = "head";

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label31;

        $r3.<org.htmlcleaner.CleanTimeValues: boolean _headOpened> = 1;

        $r26 = $r3.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode headNode>;

        $r25 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.util.Map getAttributes()>();

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>($r26, $r25);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label31:
        if $r10 != null goto label32;

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: boolean isOmitUnknownTags()>();

        if $z0 == 0 goto label32;

        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isAllowedAsForeignMarkup(java.lang.String,org.htmlcleaner.CleanTimeValues)>($r9, $r3);

        if $z0 != 0 goto label32;

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r27 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType Unknown>;

        virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: void fireUglyHtml(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>(1, r15, $r27);

        goto label01;

     label32:
        if $r10 == null goto label33;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean isDeprecated()>();

        if $z0 == 0 goto label33;

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: boolean isOmitDeprecatedTags()>();

        if $z0 == 0 goto label33;

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r27 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType Deprecated>;

        virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: void fireUglyHtml(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>(1, r15, $r27);

        goto label01;

     label33:
        if $r10 != null goto label34;

        if r22 == null goto label34;

        $z0 = virtualinvoke r22.<org.htmlcleaner.TagInfo: boolean allowsAnything()>();

        if $z0 != 0 goto label34;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object,org.htmlcleaner.CleanTimeValues)>($r1, $r13, r15, $r3);

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        goto label01;

     label34:
        if $r10 == null goto label35;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean hasPermittedTags()>();

        if $z0 == 0 goto label35;

        $r12 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $r23 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: java.util.Set getPermittedTags()>();

        $z0 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1200(org.htmlcleaner.HtmlCleaner$OpenTags,java.util.Set)>($r12, $r23);

        if $z0 == 0 goto label35;

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label35:
        if $r10 == null goto label36;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean isUnique()>();

        if $z0 == 0 goto label36;

        $r12 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $z0 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1300(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>($r12, $r9);

        if $z0 == 0 goto label36;

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r27 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType UniqueTagDuplicated>;

        virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: void fireHtmlError(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>(1, r15, $r27);

        goto label01;

     label36:
        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isFatalTagSatisfied(org.htmlcleaner.TagInfo,org.htmlcleaner.CleanTimeValues)>($r10, $r3);

        if $z0 != 0 goto label37;

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r27 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType FatalTagMissing>;

        virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: void fireHtmlError(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>(1, r15, $r27);

        goto label01;

     label37:
        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo,org.htmlcleaner.CleanTimeValues)>($r10, $r3);

        if $z0 == 0 goto label39;

        $r23 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: java.util.Set getRequiredParentTags()>();

        $r20 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.String) $r6;

        $r26 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode newTagNode(java.lang.String)>($r9);

        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken,org.htmlcleaner.CleanTimeValues)>($r26, $r3);

        if $z0 == 0 goto label38;

        virtualinvoke $r26.<org.htmlcleaner.TagNode: void setAutoGenerated(boolean)>(1);

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke r2.<java.util.ListIterator: void add(java.lang.Object)>($r26);

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $r27 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType RequiredParentMissing>;

        virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: void fireHtmlError(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>(1, r15, $r27);

        goto label01;

     label38:
        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object,org.htmlcleaner.CleanTimeValues)>($r1, r7, $r3);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label39:
        if $r10 == null goto label49;

        if $r13 == null goto label49;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean isMustCloseTag(org.htmlcleaner.TagInfo)>(r22);

        if $z0 == 0 goto label49;

        $r18 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$ChildBreaks getChildBreaks(org.htmlcleaner.CleanTimeValues)>($r3);

        $r19 = new org.htmlcleaner.HtmlCleaner$TagPos;

        $i0 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        $r9 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: java.lang.String getName()>();

        specialinvoke $r19.<org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>(r0, $i0, $r9);

        virtualinvoke $r18.<org.htmlcleaner.HtmlCleaner$ChildBreaks: void addBreak(org.htmlcleaner.HtmlCleaner$TagPos,org.htmlcleaner.HtmlCleaner$TagPos)>($r13, $r19);

        $z0 = virtualinvoke r15.<org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>("id");

        if $z0 == 0 goto label42;

        $z0 = 0;

     label40:
        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r13);

        $r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r26 = (org.htmlcleaner.TagNode) $r6;

        $r27 = <org.htmlcleaner.audit.ErrorType: org.htmlcleaner.audit.ErrorType UnpermittedChild>;

        virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: void fireHtmlError(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>($z0, $r26, $r27);

        $r14 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object,org.htmlcleaner.CleanTimeValues)>($r1, $r13, r15, $r3);

        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean hasCopyTags()>();

        if $z0 == 0 goto label48;

        if $i0 <= 0 goto label48;

        $r21 = interfaceinvoke $r14.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label41:
        $z0 = interfaceinvoke $r21.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label43;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r5.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 != 0 goto label55;

        $r6 = interfaceinvoke $r21.<java.util.ListIterator: java.lang.Object previous()>();

        r15 = (org.htmlcleaner.TagNode) $r6;

        $r9 = virtualinvoke r15.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean isCopy(java.lang.String)>($r9);

        if $z0 == 0 goto label43;

        interfaceinvoke r4.<java.util.List: void add(int,java.lang.Object)>(0, r15);

        goto label41;

     label42:
        $z0 = 1;

        goto label40;

     label43:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 <= 0 goto label48;

        $r20 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label44:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label46;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r5.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 != 0 goto label55;

        $r6 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.htmlcleaner.TagNode) $r6;

        $z0 = staticinvoke <org.htmlcleaner.HtmlCleaner: boolean isCopiedTokenEqualToNextThreeCopiedTokens(org.htmlcleaner.TagNode,java.util.ListIterator)>(r15, r2);

        if $z0 != 0 goto label45;

        r15 = virtualinvoke r15.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode makeCopy()>();

        interfaceinvoke r2.<java.util.ListIterator: void add(java.lang.Object)>(r15);

        goto label44;

     label45:
        interfaceinvoke $r20.<java.util.Iterator: void remove()>();

        goto label44;

     label46:
        $i0 = 0;

     label47:
        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 >= $i1 goto label48;

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        $i0 = $i0 + 1;

        goto label47;

     label48:
        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();

        goto label01;

     label49:
        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken,org.htmlcleaner.CleanTimeValues)>(r7, $r3);

        if $z0 != 0 goto label50;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object,org.htmlcleaner.CleanTimeValues)>($r1, r7, $r3);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label50:
        if $r10 == null goto label51;

        $z0 = virtualinvoke $r10.<org.htmlcleaner.TagInfo: boolean allowsBody()>();

        if $z0 != 0 goto label51;

        r15 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode createTagNode(org.htmlcleaner.TagNode)>(r15);

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode,org.htmlcleaner.CleanTimeValues)>($r10, r15, $r3);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(r15);

        goto label01;

     label51:
        $r12 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $i0 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();

        staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: void access$1400(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String,int)>($r12, $r9, $i0);

        goto label01;

     label52:
        $z0 = $r3.<org.htmlcleaner.CleanTimeValues: boolean _headOpened>;

        if $z0 == 0 goto label53;

        $z0 = $r3.<org.htmlcleaner.CleanTimeValues: boolean _bodyOpened>;

        if $z0 != 0 goto label53;

        $r11 = r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties properties>;

        $z0 = virtualinvoke $r11.<org.htmlcleaner.CleanerProperties: boolean isKeepWhitespaceAndCommentsInHead()>();

        if $z0 == 0 goto label53;

        $z0 = r7 instanceof org.htmlcleaner.CommentNode;

        if $z0 == 0 goto label54;

        $r12 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.HtmlCleaner$OpenTags getOpenTags(org.htmlcleaner.CleanTimeValues)>($r3);

        $r13 = staticinvoke <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$800(org.htmlcleaner.HtmlCleaner$OpenTags)>($r12);

        if $r13 != null goto label53;

        $r23 = $r3.<org.htmlcleaner.CleanTimeValues: java.util.Set _headTags>;

        $r28 = new org.htmlcleaner.ProxyTagNode;

        $r29 = (org.htmlcleaner.CommentNode) r7;

        r15 = $r3.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode bodyNode>;

        specialinvoke $r28.<org.htmlcleaner.ProxyTagNode: void <init>(org.htmlcleaner.CommentNode,org.htmlcleaner.TagNode)>($r29, r15);

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>($r28);

     label53:
        $z0 = specialinvoke r0.<org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken,org.htmlcleaner.CleanTimeValues)>(r7, $r3);

        if $z0 != 0 goto label01;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,java.lang.Object,org.htmlcleaner.CleanTimeValues)>($r1, r7, $r3);

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        goto label01;

     label54:
        $z0 = r7 instanceof org.htmlcleaner.ContentNode;

        if $z0 == 0 goto label53;

        r30 = (org.htmlcleaner.ContentNode) r7;

        $z0 = virtualinvoke r30.<org.htmlcleaner.ContentNode: boolean isBlank()>();

        if $z0 == 0 goto label53;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r31 = (org.htmlcleaner.BaseToken) $r6;

        if r31 != r7 goto label53;

        $r23 = $r3.<org.htmlcleaner.CleanTimeValues: java.util.Set _headTags>;

        $r28 = new org.htmlcleaner.ProxyTagNode;

        r15 = $r3.<org.htmlcleaner.CleanTimeValues: org.htmlcleaner.TagNode bodyNode>;

        specialinvoke $r28.<org.htmlcleaner.ProxyTagNode: void <init>(org.htmlcleaner.ContentNode,org.htmlcleaner.TagNode)>(r30, r15);

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>($r28);

        goto label53;

     label55:
        return;
    }
    public void setInnerHtml(org.htmlcleaner.TagNode, java.lang.String)
    {
        org.htmlcleaner.HtmlCleaner r0;
        org.htmlcleaner.TagNode $r1, $r6;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder r3, $r5;
        java.util.List $r7;

        r0 := @this: org.htmlcleaner.HtmlCleaner;

        $r1 := @parameter0: org.htmlcleaner.TagNode;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label3;

        $r4 = virtualinvoke $r1.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" htmlcleaner_marker=\'\'>");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r1.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>();

     label1:
        if $r6 == null goto label2;

        $r2 = virtualinvoke $r6.<org.htmlcleaner.TagNode: java.lang.String getName()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r4);

        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r6.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>();

        goto label1;

     label2:
        $r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElementHavingAttribute(java.lang.String,boolean)>("htmlcleaner_marker", 1);

        if $r6 == null goto label3;

        $r7 = virtualinvoke $r6.<org.htmlcleaner.TagNode: java.util.List getAllChildren()>();

        virtualinvoke $r1.<org.htmlcleaner.TagNode: void setChildren(java.util.List)>($r7);

     label3:
        return;
    }
