org.htmlcleaner.CleanerProperties extends java.lang.Object implements org.htmlcleaner.audit.HtmlModificationListener
public static final java.lang.String BOOL_ATT_EMPTY
public static final java.lang.String BOOL_ATT_SELF
public static final java.lang.String BOOL_ATT_TRUE
public static final java.lang.String DEFAULT_CHARSET
private boolean addNewlineToHeadAndBody
private boolean advancedXmlEscape
private boolean allowHtmlInsideAttributes
private boolean allowMultiWordAttributes
private java.util.Set allowTagSet
private java.lang.String allowTags
private java.lang.String booleanAttributeValues
private java.lang.String charset
private org.htmlcleaner.CleanerTransformations cleanerTransformations
private boolean deserializeEntities
private java.util.List htmlModificationListeners
private int htmlVersion
private java.lang.String hyphenReplacementInComment
private boolean ignoreQuestAndExclam
private boolean keepWhitespaceAndCommentsInHead
private boolean namespacesAware
private boolean omitCdataOutsideScriptAndStyle
private boolean omitComments
private boolean omitDeprecatedTags
private org.htmlcleaner.OptionalOutput omitDoctypeDeclaration
private org.htmlcleaner.OptionalOutput omitHtmlEnvelope
private boolean omitUnknownTags
private org.htmlcleaner.OptionalOutput omitXmlDeclaration
private java.util.Set pruneTagSet
private java.lang.String pruneTags
private boolean recognizeUnicodeChars
private org.htmlcleaner.ITagInfoProvider tagInfoProvider
private boolean transResCharsToNCR
private boolean transSpecialEntitiesToNCR
private boolean translateSpecialEntities
private boolean treatDeprecatedTagsAsContent
private boolean treatUnknownTagsAsContent
private boolean trimAttributeValues
private java.lang.String useCdataFor
private java.util.List useCdataForList
private boolean useEmptyElementTags
    public void <init>()
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.CleanerTransformations $r1;
        java.util.HashSet $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.htmlcleaner.CleanerTransformations;

        specialinvoke $r1.<org.htmlcleaner.CleanerTransformations: void <init>()>();

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.CleanerTransformations cleanerTransformations> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.CleanerProperties: java.util.Set pruneTagSet> = $r2;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.CleanerProperties: java.util.Set allowTagSet> = $r2;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String charset> = "UTF-8";

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void reset()>();

        return;
    }
    public void <init>(org.htmlcleaner.ITagInfoProvider)
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.ITagInfoProvider $r1;
        org.htmlcleaner.CleanerTransformations $r2;
        java.util.HashSet $r3;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: org.htmlcleaner.ITagInfoProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.htmlcleaner.CleanerTransformations;

        specialinvoke $r2.<org.htmlcleaner.CleanerTransformations: void <init>()>();

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.CleanerTransformations cleanerTransformations> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.CleanerProperties: java.util.Set pruneTagSet> = $r3;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.htmlcleaner.CleanerProperties: java.util.Set allowTagSet> = $r3;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String charset> = "UTF-8";

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void reset()>();

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider tagInfoProvider> = $r1;

        return;
    }
    private void addTagNameConditions(java.util.Set, java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.util.Set r1;
        java.lang.String $r2;
        java.util.StringTokenizer r3;
        boolean $z0;
        org.htmlcleaner.conditional.TagNodeNameCondition $r4;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 := @parameter0: java.util.Set;

        $r2 := @parameter1: java.lang.String;

        if $r2 == null goto label2;

        r3 = new java.util.StringTokenizer;

        specialinvoke r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r2, ",");

     label1:
        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = new org.htmlcleaner.conditional.TagNodeNameCondition;

        $r2 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke $r4.<org.htmlcleaner.conditional.TagNodeNameCondition: void <init>(java.lang.String)>($r2);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return;
    }
    private void resetPruneTagSet()
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.conditional.TagNodeAutoGeneratedCondition $r1;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set pruneTagSet>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set pruneTagSet>;

        $r1 = <org.htmlcleaner.conditional.TagNodeAutoGeneratedCondition: org.htmlcleaner.conditional.TagNodeAutoGeneratedCondition INSTANCE>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }
    private void setAllowTagSet(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set allowTagSet>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set allowTagSet>;

        specialinvoke r0.<org.htmlcleaner.CleanerProperties: void addTagNameConditions(java.util.Set,java.lang.String)>($r2, $r1);

        return;
    }
    public void addHtmlModificationListener(org.htmlcleaner.audit.HtmlModificationListener)
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.audit.HtmlModificationListener $r1;
        java.util.List $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: org.htmlcleaner.audit.HtmlModificationListener;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.List htmlModificationListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void addPruneTagNodeCondition(org.htmlcleaner.conditional.ITagNodeCondition)
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.conditional.ITagNodeCondition $r1;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: org.htmlcleaner.conditional.ITagNodeCondition;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set pruneTagSet>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void fireConditionModification(org.htmlcleaner.conditional.ITagNodeCondition, org.htmlcleaner.TagNode)
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.conditional.ITagNodeCondition $r1;
        org.htmlcleaner.TagNode $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.htmlcleaner.audit.HtmlModificationListener r6;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: org.htmlcleaner.conditional.ITagNodeCondition;

        $r2 := @parameter1: org.htmlcleaner.TagNode;

        $r3 = r0.<org.htmlcleaner.CleanerProperties: java.util.List htmlModificationListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.htmlcleaner.audit.HtmlModificationListener) $r5;

        interfaceinvoke r6.<org.htmlcleaner.audit.HtmlModificationListener: void fireConditionModification(org.htmlcleaner.conditional.ITagNodeCondition,org.htmlcleaner.TagNode)>($r1, $r2);

        goto label1;

     label2:
        return;
    }
    public void fireHtmlError(boolean, org.htmlcleaner.TagNode, org.htmlcleaner.audit.ErrorType)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0, $z1;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.audit.ErrorType $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        org.htmlcleaner.audit.HtmlModificationListener r6;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.htmlcleaner.TagNode;

        $r2 := @parameter2: org.htmlcleaner.audit.ErrorType;

        $r3 = r0.<org.htmlcleaner.CleanerProperties: java.util.List htmlModificationListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.htmlcleaner.audit.HtmlModificationListener) $r5;

        interfaceinvoke r6.<org.htmlcleaner.audit.HtmlModificationListener: void fireHtmlError(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>($z0, $r1, $r2);

        goto label1;

     label2:
        return;
    }
    public void fireUglyHtml(boolean, org.htmlcleaner.TagNode, org.htmlcleaner.audit.ErrorType)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0, $z1;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.audit.ErrorType $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        org.htmlcleaner.audit.HtmlModificationListener r6;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.htmlcleaner.TagNode;

        $r2 := @parameter2: org.htmlcleaner.audit.ErrorType;

        $r3 = r0.<org.htmlcleaner.CleanerProperties: java.util.List htmlModificationListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.htmlcleaner.audit.HtmlModificationListener) $r5;

        interfaceinvoke r6.<org.htmlcleaner.audit.HtmlModificationListener: void fireUglyHtml(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>($z0, $r1, $r2);

        goto label1;

     label2:
        return;
    }
    public void fireUserDefinedModification(boolean, org.htmlcleaner.TagNode, org.htmlcleaner.audit.ErrorType)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0, $z1;
        org.htmlcleaner.TagNode $r1;
        org.htmlcleaner.audit.ErrorType $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        org.htmlcleaner.audit.HtmlModificationListener r6;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.htmlcleaner.TagNode;

        $r2 := @parameter2: org.htmlcleaner.audit.ErrorType;

        $r3 = r0.<org.htmlcleaner.CleanerProperties: java.util.List htmlModificationListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.htmlcleaner.audit.HtmlModificationListener) $r5;

        interfaceinvoke r6.<org.htmlcleaner.audit.HtmlModificationListener: void fireUserDefinedModification(boolean,org.htmlcleaner.TagNode,org.htmlcleaner.audit.ErrorType)>($z0, $r1, $r2);

        goto label1;

     label2:
        return;
    }
    public java.util.Set getAllowTagSet()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set allowTagSet>;

        return r1;
    }
    public java.lang.String getAllowTags()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.lang.String allowTags>;

        return r1;
    }
    public java.lang.String getBooleanAttributeValues()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.lang.String booleanAttributeValues>;

        return r1;
    }
    public java.lang.String getCharset()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.lang.String charset>;

        return r1;
    }
    public org.htmlcleaner.CleanerTransformations getCleanerTransformations()
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.CleanerTransformations r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.CleanerTransformations cleanerTransformations>;

        return r1;
    }
    public int getHtmlVersion()
    {
        org.htmlcleaner.CleanerProperties r0;
        int i0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        i0 = r0.<org.htmlcleaner.CleanerProperties: int htmlVersion>;

        return i0;
    }
    public java.lang.String getHyphenReplacementInComment()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.lang.String hyphenReplacementInComment>;

        return r1;
    }
    public java.util.Set getPruneTagSet()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.util.Set r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set pruneTagSet>;

        return r1;
    }
    public java.lang.String getPruneTags()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.lang.String pruneTags>;

        return r1;
    }
    public org.htmlcleaner.ITagInfoProvider getTagInfoProvider()
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.ITagInfoProvider r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider tagInfoProvider>;

        return r1;
    }
    public java.lang.String getUseCdataFor()
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r1 = r0.<org.htmlcleaner.CleanerProperties: java.lang.String useCdataFor>;

        return r1;
    }
    public boolean isAddNewlineToHeadAndBody()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean addNewlineToHeadAndBody>;

        return z0;
    }
    public boolean isAdvancedXmlEscape()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean advancedXmlEscape>;

        return z0;
    }
    public boolean isAllowHtmlInsideAttributes()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean allowHtmlInsideAttributes>;

        return z0;
    }
    public boolean isAllowMultiWordAttributes()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean allowMultiWordAttributes>;

        return z0;
    }
    public boolean isDeserializeEntities()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean deserializeEntities>;

        return z0;
    }
    public boolean isIgnoreQuestAndExclam()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean ignoreQuestAndExclam>;

        return z0;
    }
    public boolean isKeepWhitespaceAndCommentsInHead()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean keepWhitespaceAndCommentsInHead>;

        return z0;
    }
    public boolean isNamespacesAware()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean namespacesAware>;

        return z0;
    }
    public boolean isOmitCdataOutsideScriptAndStyle()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean omitCdataOutsideScriptAndStyle>;

        return z0;
    }
    public boolean isOmitComments()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean omitComments>;

        return z0;
    }
    public boolean isOmitDeprecatedTags()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean omitDeprecatedTags>;

        return z0;
    }
    public boolean isOmitDoctypeDeclaration()
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.OptionalOutput $r1, $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitDoctypeDeclaration>;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput omit>;

        if $r2 == $r1 goto label1;

        $z0 = virtualinvoke r0.<org.htmlcleaner.CleanerProperties: boolean isOmitHtmlEnvelope()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isOmitHtmlEnvelope()
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.OptionalOutput $r1, $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitHtmlEnvelope>;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput omit>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isOmitUnknownTags()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean omitUnknownTags>;

        return z0;
    }
    public boolean isOmitXmlDeclaration()
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.OptionalOutput $r1, $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitXmlDeclaration>;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput omit>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isRecognizeUnicodeChars()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean recognizeUnicodeChars>;

        return z0;
    }
    public boolean isTransResCharsToNCR()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean transResCharsToNCR>;

        return z0;
    }
    public boolean isTransSpecialEntitiesToNCR()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean transSpecialEntitiesToNCR>;

        return z0;
    }
    public boolean isTranslateSpecialEntities()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean translateSpecialEntities>;

        return z0;
    }
    public boolean isTreatDeprecatedTagsAsContent()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean treatDeprecatedTagsAsContent>;

        return z0;
    }
    public boolean isTreatUnknownTagsAsContent()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean treatUnknownTagsAsContent>;

        return z0;
    }
    public boolean isTrimAttributeValues()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean trimAttributeValues>;

        return z0;
    }
    public boolean isUseCdataFor(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.List useCdataForList>;

        if $r2 == null goto label1;

        if $r1 == null goto label1;

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.List useCdataForList>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        return $z0;

     label1:
        return 0;
    }
    public boolean isUseCdataForScriptAndStyle()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 = virtualinvoke r0.<org.htmlcleaner.CleanerProperties: boolean isUseCdataFor(java.lang.String)>("script");

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<org.htmlcleaner.CleanerProperties: boolean isUseCdataFor(java.lang.String)>("style");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isUseEmptyElementTags()
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        z0 = r0.<org.htmlcleaner.CleanerProperties: boolean useEmptyElementTags>;

        return z0;
    }
    public void reset()
    {
        org.htmlcleaner.CleanerProperties r0;
        int $i0, $i1;
        org.htmlcleaner.OptionalOutput $r1;
        org.htmlcleaner.CleanerTransformations $r2;
        org.htmlcleaner.Html4TagProvider $r3;
        java.util.ArrayList $r4;
        org.htmlcleaner.Html5TagProvider $r5;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        r0.<org.htmlcleaner.CleanerProperties: boolean advancedXmlEscape> = 1;

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void setUseCdataFor(java.lang.String)>("script,style");

        r0.<org.htmlcleaner.CleanerProperties: boolean translateSpecialEntities> = 1;

        r0.<org.htmlcleaner.CleanerProperties: boolean recognizeUnicodeChars> = 1;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitUnknownTags> = 0;

        r0.<org.htmlcleaner.CleanerProperties: boolean treatUnknownTagsAsContent> = 0;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitDeprecatedTags> = 0;

        r0.<org.htmlcleaner.CleanerProperties: boolean treatDeprecatedTagsAsContent> = 0;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitComments> = 0;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput alwaysOutput>;

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitXmlDeclaration> = $r1;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput alwaysOutput>;

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitDoctypeDeclaration> = $r1;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput alwaysOutput>;

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitHtmlEnvelope> = $r1;

        r0.<org.htmlcleaner.CleanerProperties: boolean useEmptyElementTags> = 1;

        r0.<org.htmlcleaner.CleanerProperties: boolean allowMultiWordAttributes> = 1;

        r0.<org.htmlcleaner.CleanerProperties: boolean allowHtmlInsideAttributes> = 0;

        r0.<org.htmlcleaner.CleanerProperties: boolean ignoreQuestAndExclam> = 1;

        r0.<org.htmlcleaner.CleanerProperties: boolean namespacesAware> = 1;

        r0.<org.htmlcleaner.CleanerProperties: boolean addNewlineToHeadAndBody> = 1;

        r0.<org.htmlcleaner.CleanerProperties: boolean keepWhitespaceAndCommentsInHead> = 1;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String hyphenReplacementInComment> = "=";

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void setPruneTags(java.lang.String)>(null);

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void setAllowTags(java.lang.String)>(null);

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String booleanAttributeValues> = "self";

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String charset> = "UTF-8";

        $r2 = r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.CleanerTransformations cleanerTransformations>;

        virtualinvoke $r2.<org.htmlcleaner.CleanerTransformations: void clear()>();

        specialinvoke r0.<org.htmlcleaner.CleanerProperties: void resetPruneTagSet()>();

        $i0 = virtualinvoke r0.<org.htmlcleaner.CleanerProperties: int getHtmlVersion()>();

        $i1 = <org.htmlcleaner.HtmlCleaner: int HTML_4>;

        if $i0 != $i1 goto label2;

        $r3 = <org.htmlcleaner.Html4TagProvider: org.htmlcleaner.Html4TagProvider INSTANCE>;

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider tagInfoProvider> = $r3;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.htmlcleaner.CleanerProperties: java.util.List htmlModificationListeners> = $r4;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitCdataOutsideScriptAndStyle> = 0;

        r0.<org.htmlcleaner.CleanerProperties: boolean trimAttributeValues> = 1;

        return;

     label2:
        $r5 = <org.htmlcleaner.Html5TagProvider: org.htmlcleaner.Html5TagProvider INSTANCE>;

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider tagInfoProvider> = $r5;

        goto label1;
    }
    public void setAddNewlineToHeadAndBody(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean addNewlineToHeadAndBody> = $z0;

        return;
    }
    public void setAdvancedXmlEscape(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean advancedXmlEscape> = $z0;

        return;
    }
    public void setAllowHtmlInsideAttributes(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean allowHtmlInsideAttributes> = $z0;

        return;
    }
    public void setAllowMultiWordAttributes(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean allowMultiWordAttributes> = $z0;

        return;
    }
    public void setAllowTags(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String allowTags> = $r1;

        specialinvoke r0.<org.htmlcleaner.CleanerProperties: void setAllowTagSet(java.lang.String)>($r1);

        return;
    }
    public void setBooleanAttributeValues(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        $r2 = "self";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "empty";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "true";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String booleanAttributeValues> = $r1;

        return;

     label2:
        r0.<org.htmlcleaner.CleanerProperties: java.lang.String booleanAttributeValues> = "self";

        return;
    }
    public void setCharset(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String charset> = $r1;

        return;
    }
    public void setCleanerTransformations(org.htmlcleaner.CleanerTransformations)
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.CleanerTransformations $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: org.htmlcleaner.CleanerTransformations;

        if $r1 != null goto label1;

        $r1 = r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.CleanerTransformations cleanerTransformations>;

        virtualinvoke $r1.<org.htmlcleaner.CleanerTransformations: void clear()>();

        return;

     label1:
        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.CleanerTransformations cleanerTransformations> = $r1;

        return;
    }
    public void setDeserializeEntities(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean deserializeEntities> = $z0;

        return;
    }
    public void setHtmlVersion(int)
    {
        org.htmlcleaner.CleanerProperties r0;
        int $i0;
        org.htmlcleaner.Html4TagProvider $r1;
        org.htmlcleaner.Html5TagProvider $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $i0 := @parameter0: int;

        r0.<org.htmlcleaner.CleanerProperties: int htmlVersion> = $i0;

        if $i0 != 4 goto label1;

        $r1 = <org.htmlcleaner.Html4TagProvider: org.htmlcleaner.Html4TagProvider INSTANCE>;

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void setTagInfoProvider(org.htmlcleaner.ITagInfoProvider)>($r1);

        return;

     label1:
        $r2 = <org.htmlcleaner.Html5TagProvider: org.htmlcleaner.Html5TagProvider INSTANCE>;

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void setTagInfoProvider(org.htmlcleaner.ITagInfoProvider)>($r2);

        return;
    }
    public void setHyphenReplacementInComment(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String hyphenReplacementInComment> = $r1;

        return;
    }
    public void setIgnoreQuestAndExclam(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean ignoreQuestAndExclam> = $z0;

        return;
    }
    public void setKeepWhitespaceAndCommentsInHead(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean keepWhitespaceAndCommentsInHead> = $z0;

        return;
    }
    public void setNamespacesAware(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean namespacesAware> = $z0;

        return;
    }
    public void setOmitCdataOutsideScriptAndStyle(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitCdataOutsideScriptAndStyle> = $z0;

        return;
    }
    public void setOmitComments(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitComments> = $z0;

        return;
    }
    public void setOmitDeprecatedTags(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitDeprecatedTags> = $z0;

        return;
    }
    public void setOmitDoctypeDeclaration(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;
        org.htmlcleaner.OptionalOutput $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput omit>;

     label1:
        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitDoctypeDeclaration> = $r1;

        return;

     label2:
        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput alwaysOutput>;

        goto label1;
    }
    public void setOmitHtmlEnvelope(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;
        org.htmlcleaner.OptionalOutput $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput omit>;

     label1:
        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitHtmlEnvelope> = $r1;

        return;

     label2:
        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput alwaysOutput>;

        goto label1;
    }
    public void setOmitUnknownTags(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean omitUnknownTags> = $z0;

        return;
    }
    public void setOmitXmlDeclaration(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;
        org.htmlcleaner.OptionalOutput $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput omit>;

     label1:
        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.OptionalOutput omitXmlDeclaration> = $r1;

        return;

     label2:
        $r1 = <org.htmlcleaner.OptionalOutput: org.htmlcleaner.OptionalOutput alwaysOutput>;

        goto label1;
    }
    public void setPruneTags(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1;
        java.util.Set $r2;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String pruneTags> = $r1;

        specialinvoke r0.<org.htmlcleaner.CleanerProperties: void resetPruneTagSet()>();

        $r2 = r0.<org.htmlcleaner.CleanerProperties: java.util.Set pruneTagSet>;

        specialinvoke r0.<org.htmlcleaner.CleanerProperties: void addTagNameConditions(java.util.Set,java.lang.String)>($r2, $r1);

        return;
    }
    public void setRecognizeUnicodeChars(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean recognizeUnicodeChars> = $z0;

        return;
    }
    void setTagInfoProvider(org.htmlcleaner.ITagInfoProvider)
    {
        org.htmlcleaner.CleanerProperties r0;
        org.htmlcleaner.ITagInfoProvider $r1;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: org.htmlcleaner.ITagInfoProvider;

        r0.<org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider tagInfoProvider> = $r1;

        return;
    }
    public void setTransResCharsToNCR(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean transResCharsToNCR> = $z0;

        return;
    }
    public void setTransSpecialEntitiesToNCR(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean transSpecialEntitiesToNCR> = $z0;

        return;
    }
    public void setTranslateSpecialEntities(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean translateSpecialEntities> = $z0;

        return;
    }
    public void setTreatDeprecatedTagsAsContent(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean treatDeprecatedTagsAsContent> = $z0;

        return;
    }
    public void setTreatUnknownTagsAsContent(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean treatUnknownTagsAsContent> = $z0;

        return;
    }
    public void setTrimAttributeValues(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean trimAttributeValues> = $z0;

        return;
    }
    public void setUseCdataFor(java.lang.String)
    {
        org.htmlcleaner.CleanerProperties r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        java.util.List $r3;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        r0.<org.htmlcleaner.CleanerProperties: java.lang.String useCdataFor> = $r1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        r0.<org.htmlcleaner.CleanerProperties: java.util.List useCdataForList> = $r3;

        return;

     label1:
        r0.<org.htmlcleaner.CleanerProperties: java.lang.String useCdataFor> = "";

        r0.<org.htmlcleaner.CleanerProperties: java.util.List useCdataForList> = null;

        return;
    }
    public void setUseCdataForScriptAndStyle(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void setUseCdataFor(java.lang.String)>("script,style");

        return;

     label1:
        virtualinvoke r0.<org.htmlcleaner.CleanerProperties: void setUseCdataFor(java.lang.String)>("");

        return;
    }
    public void setUseEmptyElementTags(boolean)
    {
        org.htmlcleaner.CleanerProperties r0;
        boolean $z0;

        r0 := @this: org.htmlcleaner.CleanerProperties;

        $z0 := @parameter0: boolean;

        r0.<org.htmlcleaner.CleanerProperties: boolean useEmptyElementTags> = $z0;

        return;
    }
