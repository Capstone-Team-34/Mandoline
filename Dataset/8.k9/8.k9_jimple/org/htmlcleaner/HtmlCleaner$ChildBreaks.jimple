org.htmlcleaner.HtmlCleaner$ChildBreaks extends java.lang.Object
private java.util.Stack breakingTags
private java.util.Stack closedByChildBreak
final org.htmlcleaner.HtmlCleaner this$0
    private void <init>(org.htmlcleaner.HtmlCleaner)
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks r0;
        org.htmlcleaner.HtmlCleaner $r1;
        java.util.Stack $r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        $r1 := @parameter0: org.htmlcleaner.HtmlCleaner;

        r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: org.htmlcleaner.HtmlCleaner this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack closedByChildBreak> = $r2;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack breakingTags> = $r2;

        return;
    }
    void <init>(org.htmlcleaner.HtmlCleaner, org.htmlcleaner.HtmlCleaner$1)
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks r0;
        org.htmlcleaner.HtmlCleaner $r1;
        org.htmlcleaner.HtmlCleaner$1 $r2;

        r0 := @this: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        $r1 := @parameter0: org.htmlcleaner.HtmlCleaner;

        $r2 := @parameter1: org.htmlcleaner.HtmlCleaner$1;

        specialinvoke r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: void <init>(org.htmlcleaner.HtmlCleaner)>($r1);

        return;
    }
    static java.util.Stack access$1000(org.htmlcleaner.HtmlCleaner$ChildBreaks)
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks $r0;
        java.util.Stack r1;

        $r0 := @parameter0: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        r1 = $r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack closedByChildBreak>;

        return r1;
    }
    public void addBreak(org.htmlcleaner.HtmlCleaner$TagPos, org.htmlcleaner.HtmlCleaner$TagPos)
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks r0;
        org.htmlcleaner.HtmlCleaner$TagPos $r1, $r2;
        java.util.Stack $r3;

        r0 := @this: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        $r1 := @parameter0: org.htmlcleaner.HtmlCleaner$TagPos;

        $r2 := @parameter1: org.htmlcleaner.HtmlCleaner$TagPos;

        $r3 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack closedByChildBreak>;

        virtualinvoke $r3.<java.util.Stack: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack breakingTags>;

        virtualinvoke $r3.<java.util.Stack: boolean add(java.lang.Object)>($r2);

        return;
    }
    public java.lang.String getLastBreakingTag()
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks r0;
        java.util.Stack $r1;
        java.lang.Object $r2;
        org.htmlcleaner.HtmlCleaner$TagPos $r3;
        java.lang.String $r4;

        r0 := @this: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        $r1 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack breakingTags>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>();

        $r3 = (org.htmlcleaner.HtmlCleaner$TagPos) $r2;

        $r4 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$000(org.htmlcleaner.HtmlCleaner$TagPos)>($r3);

        return $r4;
    }
    public int getLastBreakingTagPosition()
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks r0;
        java.util.Stack $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.htmlcleaner.HtmlCleaner$TagPos $r3;
        int $i0;

        r0 := @this: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        $r1 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack breakingTags>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack breakingTags>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>();

        $r3 = (org.htmlcleaner.HtmlCleaner$TagPos) $r2;

        $i0 = staticinvoke <org.htmlcleaner.HtmlCleaner$TagPos: int access$100(org.htmlcleaner.HtmlCleaner$TagPos)>($r3);

        return $i0;
    }
    public boolean isEmpty()
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks r0;
        boolean $z0;
        java.util.Stack $r1;

        r0 := @this: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        $r1 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack closedByChildBreak>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        return $z0;
    }
    public org.htmlcleaner.HtmlCleaner$TagPos pop()
    {
        org.htmlcleaner.HtmlCleaner$ChildBreaks r0;
        java.lang.Object $r1;
        java.util.Stack $r2;
        org.htmlcleaner.HtmlCleaner$TagPos $r3;

        r0 := @this: org.htmlcleaner.HtmlCleaner$ChildBreaks;

        $r2 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack breakingTags>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object pop()>();

        $r2 = r0.<org.htmlcleaner.HtmlCleaner$ChildBreaks: java.util.Stack closedByChildBreak>;

        $r1 = virtualinvoke $r2.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (org.htmlcleaner.HtmlCleaner$TagPos) $r1;

        return $r3;
    }
