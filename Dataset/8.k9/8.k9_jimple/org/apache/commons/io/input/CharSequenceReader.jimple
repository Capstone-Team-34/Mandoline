org.apache.commons.io.input.CharSequenceReader extends java.io.Reader implements java.io.Serializable
private final java.lang.CharSequence charSequence
private int idx
private int mark
    public void <init>(java.lang.CharSequence)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        java.lang.CharSequence r1;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        if r1 == null goto label2;

     label1:
        r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence> = r1;

        return;

     label2:
        r1 = "";

        goto label1;
    }
    public void close()
    {
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = 0;

        r0.<org.apache.commons.io.input.CharSequenceReader: int mark> = 0;

        return;
    }
    public void mark(int)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        int $i0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $i0 := @parameter0: int;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        r0.<org.apache.commons.io.input.CharSequenceReader: int mark> = $i0;

        return;
    }
    public boolean markSupported()
    {
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        return 1;
    }
    public int read()
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        int $i0, $i1;
        java.lang.CharSequence $r1;
        char $c2;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 < $i1 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i1 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $i0 = $i1 + 1;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = $i0;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        return $c2;
    }
    public int read(char[], int, int)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        char[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.CharSequence $r2;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        char $c6;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r2 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i3 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i2 < $i3 goto label1;

        return -1;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Character array is missing");

        throw $r3;

     label2:
        if $i1 < 0 goto label3;

        if $i0 < 0 goto label3;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label4;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array Size=");

        $i2 = lengthof $r1;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label4:
        $i2 = 0;

        $i3 = 0;

     label5:
        if $i3 >= $i1 goto label6;

        $i4 = virtualinvoke r0.<org.apache.commons.io.input.CharSequenceReader: int read()>();

        if $i4 == -1 goto label6;

        $i5 = $i0 + $i3;

        $c6 = (char) $i4;

        $r1[$i5] = $c6;

        $i2 = $i2 + 1;

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return $i2;
    }
    public void reset()
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        int $i0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int mark>;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = $i0;

        return;
    }
    public long skip(long)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        long $l0, $l4, $l5;
        int i1, i2;
        byte $b3;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.CharSequence $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $l0 := @parameter0: long;

        $b3 = $l0 cmp 0L;

        if $b3 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of characters to skip is less than zero: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        i2 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r4 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        i1 = interfaceinvoke $r4.<java.lang.CharSequence: int length()>();

        if i2 < i1 goto label2;

        return -1L;

     label2:
        $r4 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        i2 = interfaceinvoke $r4.<java.lang.CharSequence: int length()>();

        $l4 = (long) i2;

        i2 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $l5 = (long) i2;

        $l0 = $l5 + $l0;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l4, $l0);

        i2 = (int) $l0;

        i1 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        i1 = i2 - i1;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = i2;

        $l0 = (long) i1;

        return $l0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        java.lang.String $r1;
        java.lang.CharSequence $r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $r2 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
