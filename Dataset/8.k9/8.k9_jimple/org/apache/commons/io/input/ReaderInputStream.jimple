org.apache.commons.io.input.ReaderInputStream extends java.io.InputStream
private static final int DEFAULT_BUFFER_SIZE
private final java.nio.charset.CharsetEncoder encoder
private final java.nio.CharBuffer encoderIn
private final java.nio.ByteBuffer encoderOut
private boolean endOfInput
private java.nio.charset.CoderResult lastCoderResult
private final java.io.Reader reader
    public void <init>(java.io.Reader)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;
        java.nio.charset.Charset $r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset)>($r1, $r2);

        return;
    }
    public void <init>(java.io.Reader, java.lang.String)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.lang.String,int)>($r1, $r2, 1024);

        return;
    }
    public void <init>(java.io.Reader, java.lang.String, int)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;
        java.lang.String $r2;
        int $i0;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r2);

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset,int)>($r1, $r3, $i0);

        return;
    }
    public void <init>(java.io.Reader, java.nio.charset.Charset)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;
        java.nio.charset.Charset $r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset,int)>($r1, $r2, 1024);

        return;
    }
    public void <init>(java.io.Reader, java.nio.charset.Charset, int)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;
        java.nio.charset.Charset $r2;
        int $i0;
        java.nio.charset.CharsetEncoder $r3;
        java.nio.charset.CodingErrorAction $r4;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)>($r1, $r3, $i0);

        return;
    }
    public void <init>(java.io.Reader, java.nio.charset.CharsetEncoder)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;
        java.nio.charset.CharsetEncoder $r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.nio.charset.CharsetEncoder;

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)>($r1, $r2, 1024);

        return;
    }
    public void <init>(java.io.Reader, java.nio.charset.CharsetEncoder, int)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;
        java.nio.charset.CharsetEncoder $r2;
        int $i0;
        java.nio.CharBuffer $r3;
        java.nio.ByteBuffer $r4;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.nio.charset.CharsetEncoder;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader> = $r1;

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CharsetEncoder encoder> = $r2;

        $r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>($i0);

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn> = $r3;

        $r3 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        virtualinvoke $r3.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(128);

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut> = $r4;

        $r4 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }
    private void fillBuffer() throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        boolean $z0;
        java.nio.charset.CoderResult $r1;
        java.nio.CharBuffer $r2;
        int $i0, $i1;
        java.io.Reader $r3;
        char[] $r4;
        java.nio.ByteBuffer $r5;
        java.nio.charset.CharsetEncoder $r6;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $z0 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z0 != 0 goto label3;

        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult>;

        $z0 = virtualinvoke $r1.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z0 == 0 goto label3;

     label1:
        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.CharBuffer compact()>();

        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $i0 = virtualinvoke $r2.<java.nio.CharBuffer: int position()>();

        $r3 = r0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader>;

        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $r4 = virtualinvoke $r2.<java.nio.CharBuffer: char[] array()>();

        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $i1 = virtualinvoke $r2.<java.nio.CharBuffer: int remaining()>();

        $i1 = virtualinvoke $r3.<java.io.Reader: int read(char[],int,int)>($r4, $i0, $i1);

        if $i1 != -1 goto label4;

        r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput> = 1;

     label2:
        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.Buffer flip()>();

     label3:
        $r5 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        $r6 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CharsetEncoder encoder>;

        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $r5 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z0 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        $r1 = virtualinvoke $r6.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r2, $r5, $z0);

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult> = $r1;

        $r5 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;

     label4:
        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $i0 = $i0 + $i1;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i0);

        goto label2;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

        return;
    }
    public int read() throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

     label1:
        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $b0 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $i1 = $b0 & 255;

        return $i1;

     label2:
        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()>();

        $z0 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return -1;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.io.input.ReaderInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.NullPointerException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.nio.ByteBuffer $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Byte array must not be null");

        throw $r2;

     label1:
        if $i1 < 0 goto label2;

        if $i0 < 0 goto label2;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array Size=");

        $i2 = lengthof $r1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $i2 = 0;

        if $i1 != 0 goto label4;

        return 0;

     label4:
        if $i1 <= 0 goto label6;

        $r6 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z0 = virtualinvoke $r6.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label5;

        $r6 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $i3 = virtualinvoke $r6.<java.nio.ByteBuffer: int remaining()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i1);

        $r6 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r1, $i0, $i3);

        $i0 = $i0 + $i3;

        $i1 = $i1 - $i3;

        $i2 = $i2 + $i3;

        goto label4;

     label5:
        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()>();

        $z0 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z0 == 0 goto label4;

        $r6 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z0 = virtualinvoke $r6.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label4;

     label6:
        if $i2 != 0 goto label7;

        $z0 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z0 == 0 goto label7;

        return -1;

     label7:
        return $i2;
    }
