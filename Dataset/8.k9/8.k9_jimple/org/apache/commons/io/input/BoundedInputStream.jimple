org.apache.commons.io.input.BoundedInputStream extends java.io.InputStream
private final java.io.InputStream in
private long mark
private final long max
private long pos
private boolean propagateClose
    public void <init>(java.io.InputStream)
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.io.input.BoundedInputStream: void <init>(java.io.InputStream,long)>($r1, -1L);

        return;
    }
    public void <init>(java.io.InputStream, long)
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        java.io.InputStream $r1;
        long $l0;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.io.input.BoundedInputStream: long pos> = 0L;

        r0.<org.apache.commons.io.input.BoundedInputStream: long mark> = -1L;

        r0.<org.apache.commons.io.input.BoundedInputStream: boolean propagateClose> = 1;

        r0.<org.apache.commons.io.input.BoundedInputStream: long max> = $l0;

        r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in> = $r1;

        return;
    }
    public int available() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        int $i0;
        long $l1, $l3;
        byte $b2;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label1;

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l3 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b2 = $l1 cmp $l3;

        if $b2 < 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $z0 = r0.<org.apache.commons.io.input.BoundedInputStream: boolean propagateClose>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label1:
        return;
    }
    public boolean isPropagateClose()
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        boolean z0;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        z0 = r0.<org.apache.commons.io.input.BoundedInputStream: boolean propagateClose>;

        return z0;
    }
    public void mark(int)
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        int $i0;
        java.io.InputStream $r1;
        long $l1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>($i0);

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        r0.<org.apache.commons.io.input.BoundedInputStream: long mark> = $l1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean markSupported()
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $r1 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        return $z0;
    }
    public int read() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        int $i0;
        long $l1, $l3;
        byte $b2;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label1;

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l3 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b2 = $l1 cmp $l3;

        if $b2 < 0 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l1 = $l1 + 1L;

        r0.<org.apache.commons.io.input.BoundedInputStream: long pos> = $l1;

        return $i0;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.io.input.BoundedInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        byte[] $r1;
        int $i0, $i1;
        long $l2, $l4, $l5;
        byte $b3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label1;

        $l2 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l4 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b3 = $l2 cmp $l4;

        if $b3 < 0 goto label1;

        return -1;

     label1:
        $l2 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label3;

        $l2 = (long) $i1;

        $l4 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $l5 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l4 = $l4 - $l5;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l4);

     label2:
        $r2 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        $i1 = (int) $l2;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        if $i0 != -1 goto label4;

        return -1;

     label3:
        $l2 = (long) $i1;

        goto label2;

     label4:
        $l2 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l4 = (long) $i0;

        $l2 = $l2 + $l4;

        r0.<org.apache.commons.io.input.BoundedInputStream: long pos> = $l2;

        return $i0;
    }
    public void reset() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        java.io.InputStream $r1;
        long $l0;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void reset()>();

        $l0 = r0.<org.apache.commons.io.input.BoundedInputStream: long mark>;

        r0.<org.apache.commons.io.input.BoundedInputStream: long pos> = $l0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setPropagateClose(boolean)
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.io.input.BoundedInputStream: boolean propagateClose> = $z0;

        return;
    }
    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        long $l0, $l1, $l3;
        byte $b2;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $l0 := @parameter0: long;

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label2;

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long max>;

        $l3 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l1 = $l1 - $l3;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

     label1:
        $r1 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        $l0 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l0);

        $l1 = r0.<org.apache.commons.io.input.BoundedInputStream: long pos>;

        $l1 = $l1 + $l0;

        r0.<org.apache.commons.io.input.BoundedInputStream: long pos> = $l1;

        return $l0;

     label2:
        goto label1;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.input.BoundedInputStream r0;
        java.lang.String $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.io.input.BoundedInputStream;

        $r2 = r0.<org.apache.commons.io.input.BoundedInputStream: java.io.InputStream in>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
