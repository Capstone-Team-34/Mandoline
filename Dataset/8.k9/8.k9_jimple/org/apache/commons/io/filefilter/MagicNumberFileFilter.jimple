org.apache.commons.io.filefilter.MagicNumberFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
private static final long serialVersionUID
private final long byteOffset
private final byte[] magicNumbers
    public void <init>(java.lang.String)
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>($r1, 0L);

        return;
    }
    public void <init>(java.lang.String, long)
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        java.lang.String $r1;
        long $l0;
        java.lang.IllegalArgumentException $r2;
        int $i1;
        byte $b2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number cannot be null");

        throw $r2;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number must contain at least one byte");

        throw $r2;

     label2:
        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be negative");

        throw $r2;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers> = $r3;

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset> = $l0;

        return;
    }
    public void <init>(byte[])
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>($r1, 0L);

        return;
    }
    public void <init>(byte[], long)
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        byte[] $r1, $r3;
        long $l0;
        java.lang.IllegalArgumentException $r2;
        int $i1;
        byte $b2;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r1 := @parameter0: byte[];

        $l0 := @parameter1: long;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number cannot be null");

        throw $r2;

     label1:
        $i1 = lengthof $r1;

        if $i1 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number must contain at least one byte");

        throw $r2;

     label2:
        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be negative");

        throw $r2;

     label3:
        $i1 = lengthof $r1;

        $r3 = newarray (byte)[$i1];

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers> = $r3;

        $r3 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i1);

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset> = $l0;

        return;
    }
    public boolean accept(java.io.File)
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        java.io.File $r1;
        byte[] r2, $r5;
        java.io.RandomAccessFile r3, r4;
        long $l0;
        boolean $z0;
        int $i1, $i2;
        java.io.IOException $r6, $r8;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r1 := @parameter0: java.io.File;

        if $r1 == null goto label16;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label16;

        $z0 = virtualinvoke $r1.<java.io.File: boolean canRead()>();

        if $z0 == 0 goto label16;

        r4 = null;

     label01:
        r2 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        $i1 = lengthof r2;

        r2 = newarray (byte)[$i1];

        r3 = new java.io.RandomAccessFile;

     label02:
        specialinvoke r3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r1, "r");

     label03:
        $l0 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset>;

     label04:
        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>($l0);

        $i1 = virtualinvoke r3.<java.io.RandomAccessFile: int read(byte[])>(r2);

     label05:
        $r5 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        $i2 = lengthof $r5;

     label06:
        if $i1 == $i2 goto label07;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r3);

        return 0;

     label07:
        $r5 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

     label08:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, r2);

     label09:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r3);

        return $z0;

     label10:
        $r6 := @caughtexception;

     label11:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r4);

        return 0;

     label12:
        $r7 := @caughtexception;

     label13:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r4);

        throw $r7;

     label14:
        $r7 := @caughtexception;

        r4 = r3;

        goto label13;

     label15:
        $r8 := @caughtexception;

        r4 = r3;

        goto label11;

     label16:
        return 0;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label15;
        catch java.lang.Throwable from label03 to label06 with label14;
        catch java.io.IOException from label08 to label09 with label15;
        catch java.lang.Throwable from label07 to label09 with label14;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        byte[] $r3;
        long $l0;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();

        specialinvoke r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = new java.lang.String;

        $r3 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $l0 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
