org.apache.commons.io.filefilter.SizeFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
private final boolean acceptLarger
private final long size
    public void <init>(long)
    {
        org.apache.commons.io.filefilter.SizeFileFilter r0;
        long $l0;

        r0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>($l0, 1);

        return;
    }
    public void <init>(long, boolean)
    {
        org.apache.commons.io.filefilter.SizeFileFilter r0;
        long $l0;
        boolean $z0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The size must be non-negative");

        throw $r1;

     label1:
        r0.<org.apache.commons.io.filefilter.SizeFileFilter: long size> = $l0;

        r0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger> = $z0;

        return;
    }
    public boolean accept(java.io.File)
    {
        org.apache.commons.io.filefilter.SizeFileFilter r0;
        java.io.File $r1;
        long $l0, $l1;
        byte $b2;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        $r1 := @parameter0: java.io.File;

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $l0 = r0.<org.apache.commons.io.filefilter.SizeFileFilter: long size>;

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label2;

        z0 = 1;

     label1:
        $z1 = r0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger>;

        if $z1 == 0 goto label4;

        if z0 != 0 goto label3;

        return 1;

     label2:
        z0 = 0;

        goto label1;

     label3:
        return 0;

     label4:
        return z0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.filefilter.SizeFileFilter r0;
        boolean $z0;
        java.lang.String r1, $r3;
        java.lang.StringBuilder $r2;
        long $l0;

        r0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;

        $z0 = r0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger>;

        if $z0 == 0 goto label2;

        r1 = ">=";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $l0 = r0.<org.apache.commons.io.filefilter.SizeFileFilter: long size>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;

     label2:
        r1 = "<";

        goto label1;
    }
