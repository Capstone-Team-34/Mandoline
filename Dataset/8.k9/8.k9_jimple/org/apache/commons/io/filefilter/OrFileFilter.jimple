org.apache.commons.io.filefilter.OrFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements org.apache.commons.io.filefilter.ConditionalFileFilter java.io.Serializable
private final java.util.List fileFilters
    public void <init>()
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters> = $r1;

        return;
    }
    public void <init>(java.util.List)
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        java.util.List r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters> = $r2;

        return;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters> = $r2;

        return;
    }
    public void <init>(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        $r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filters must not be null");

        throw $r3;

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(2);

        r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters> = $r4;

        virtualinvoke r0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r2);

        return;
    }
    public boolean accept(java.io.File)
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        java.io.File $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.io.filefilter.IOFileFilter r5;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        $r1 := @parameter0: java.io.File;

        $r2 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.io.filefilter.IOFileFilter) $r4;

        $z0 = interfaceinvoke r5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    public boolean accept(java.io.File, java.lang.String)
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        java.io.File $r1;
        java.lang.String $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.io.filefilter.IOFileFilter r6;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.io.filefilter.IOFileFilter) $r5;

        $z0 = interfaceinvoke r6.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r1, $r2);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    public void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        $r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public java.util.List getFileFilters()
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        $r1 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r1;
    }
    public boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1;
        boolean $z0;
        java.util.List $r2;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        $r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }
    public void setFileFilters(java.util.List)
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        java.util.List r1, $r2;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r2 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.filefilter.OrFileFilter r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        java.util.List $r3;
        int i0, $i1;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.filefilter.OrFileFilter;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        if $r3 == null goto label5;

        i0 = 0;

     label1:
        $r3 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        if i0 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r3 = r0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        if $r4 != null goto label4;

        $r2 = "null";

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        i0 = i0 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
