org.apache.commons.io.filefilter.NotFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
private final org.apache.commons.io.filefilter.IOFileFilter filter
    public void <init>(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.NotFileFilter r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.io.filefilter.NotFileFilter;

        $r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filter must not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter> = $r1;

        return;
    }
    public boolean accept(java.io.File)
    {
        org.apache.commons.io.filefilter.NotFileFilter r0;
        java.io.File $r1;
        boolean $z0;
        org.apache.commons.io.filefilter.IOFileFilter $r2;

        r0 := @this: org.apache.commons.io.filefilter.NotFileFilter;

        $r1 := @parameter0: java.io.File;

        $r2 = r0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean accept(java.io.File, java.lang.String)
    {
        org.apache.commons.io.filefilter.NotFileFilter r0;
        java.io.File $r1;
        java.lang.String $r2;
        boolean $z0;
        org.apache.commons.io.filefilter.IOFileFilter $r3;

        r0 := @this: org.apache.commons.io.filefilter.NotFileFilter;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r1, $r2);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.filefilter.NotFileFilter r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.apache.commons.io.filefilter.IOFileFilter $r3;

        r0 := @this: org.apache.commons.io.filefilter.NotFileFilter;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = r0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
