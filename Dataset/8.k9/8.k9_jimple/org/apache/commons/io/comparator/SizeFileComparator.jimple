org.apache.commons.io.comparator.SizeFileComparator extends org.apache.commons.io.comparator.AbstractFileComparator implements java.io.Serializable
public static final java.util.Comparator SIZE_COMPARATOR
public static final java.util.Comparator SIZE_REVERSE
public static final java.util.Comparator SIZE_SUMDIR_COMPARATOR
public static final java.util.Comparator SIZE_SUMDIR_REVERSE
private final boolean sumDirectoryContents
    static void <clinit>()
    {
        org.apache.commons.io.comparator.SizeFileComparator $r0;
        org.apache.commons.io.comparator.ReverseComparator $r1;
        java.util.Comparator $r2;

        $r0 = new org.apache.commons.io.comparator.SizeFileComparator;

        specialinvoke $r0.<org.apache.commons.io.comparator.SizeFileComparator: void <init>()>();

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_COMPARATOR> = $r0;

        $r1 = new org.apache.commons.io.comparator.ReverseComparator;

        $r2 = <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_COMPARATOR>;

        specialinvoke $r1.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r2);

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_REVERSE> = $r1;

        $r0 = new org.apache.commons.io.comparator.SizeFileComparator;

        specialinvoke $r0.<org.apache.commons.io.comparator.SizeFileComparator: void <init>(boolean)>(1);

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_COMPARATOR> = $r0;

        $r1 = new org.apache.commons.io.comparator.ReverseComparator;

        $r2 = <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_COMPARATOR>;

        specialinvoke $r1.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r2);

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_REVERSE> = $r1;

        return;
    }
    public void <init>()
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();

        r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> = 0;

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();

        r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> = $z0;

        return;
    }
    public int compare(java.io.File, java.io.File)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.io.File $r1, $r2;
        long l0, $l1;
        boolean $z0;
        byte $b2;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label4;

        $z0 = r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        l0 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r1);

     label1:
        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label6;

        $z0 = r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

        $l1 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r2);

     label2:
        l0 = l0 - $l1;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label7;

        return -1;

     label3:
        l0 = 0L;

        goto label1;

     label4:
        l0 = virtualinvoke $r1.<java.io.File: long length()>();

        goto label1;

     label5:
        $l1 = 0L;

        goto label2;

     label6:
        $l1 = virtualinvoke $r2.<java.io.File: long length()>();

        goto label2;

     label7:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label8;

        return 1;

     label8:
        return 0;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.io.File $r3, $r4;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.io.File) $r1;

        $r4 = (java.io.File) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)>($r3, $r4);

        return $i0;
    }
    public volatile java.util.List sort(java.util.List)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        $r1 := @parameter0: java.util.List;

        $r1 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.util.List sort(java.util.List)>($r1);

        return $r1;
    }
    public volatile java.io.File[] sort(java.io.File[])
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.io.File[] $r1;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        $r1 := @parameter0: java.io.File[];

        $r1 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.io.File[] sort(java.io.File[])>($r1);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[sumDirectoryContents=");

        $z0 = r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
