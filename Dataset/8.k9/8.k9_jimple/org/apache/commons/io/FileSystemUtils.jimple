org.apache.commons.io.FileSystemUtils extends java.lang.Object
private static final java.lang.String DF
private static final int INIT_PROBLEM
private static final org.apache.commons.io.FileSystemUtils INSTANCE
private static final int OS
private static final int OTHER
private static final int POSIX_UNIX
private static final int UNIX
private static final int WINDOWS
    static void <clinit>()
    {
        java.lang.Exception r0;
        org.apache.commons.io.FileSystemUtils $r1;
        java.lang.String r2, $r3;
        java.io.IOException $r4;
        byte b0;
        java.util.Locale $r5;
        int $i1;

        $r1 = new org.apache.commons.io.FileSystemUtils;

        specialinvoke $r1.<org.apache.commons.io.FileSystemUtils: void <init>()>();

        <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE> = $r1;

        r2 = "df";

     label01:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

     label02:
        if $r3 != null goto label06;

        $r4 = new java.io.IOException;

     label03:
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("os.name not found");

        throw $r4;

     label04:
        r0 := @caughtexception;

        b0 = -1;

     label05:
        <org.apache.commons.io.FileSystemUtils: int OS> = b0;

        <org.apache.commons.io.FileSystemUtils: java.lang.String DF> = r2;

        return;

     label06:
        $r5 = <java.util.Locale: java.util.Locale ENGLISH>;

     label07:
        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r5);

        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("windows");

     label08:
        if $i1 == -1 goto label09;

        b0 = 1;

        goto label05;

     label09:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("linux");

     label10:
        if $i1 != -1 goto label23;

     label11:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("mpe/ix");

     label12:
        if $i1 != -1 goto label23;

     label13:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("freebsd");

     label14:
        if $i1 != -1 goto label23;

     label15:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("irix");

     label16:
        if $i1 != -1 goto label23;

     label17:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("digital unix");

     label18:
        if $i1 != -1 goto label23;

     label19:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("unix");

     label20:
        if $i1 != -1 goto label23;

     label21:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("mac os x");

     label22:
        if $i1 == -1 goto label24;

     label23:
        b0 = 2;

        goto label05;

     label24:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("sun os");

     label25:
        if $i1 != -1 goto label30;

     label26:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("sunos");

     label27:
        if $i1 != -1 goto label30;

     label28:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("solaris");

     label29:
        if $i1 == -1 goto label31;

     label30:
        b0 = 3;

        r2 = "/usr/xpg4/bin/df";

        goto label05;

     label31:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("hp-ux");

     label32:
        if $i1 != -1 goto label35;

     label33:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("aix");

     label34:
        if $i1 == -1 goto label36;

     label35:
        b0 = 3;

        goto label05;

     label36:
        b0 = 0;

        goto label05;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label03 to label04 with label04;
        catch java.lang.Exception from label07 to label08 with label04;
        catch java.lang.Exception from label09 to label10 with label04;
        catch java.lang.Exception from label11 to label12 with label04;
        catch java.lang.Exception from label13 to label14 with label04;
        catch java.lang.Exception from label15 to label16 with label04;
        catch java.lang.Exception from label17 to label18 with label04;
        catch java.lang.Exception from label19 to label20 with label04;
        catch java.lang.Exception from label21 to label22 with label04;
        catch java.lang.Exception from label24 to label25 with label04;
        catch java.lang.Exception from label26 to label27 with label04;
        catch java.lang.Exception from label28 to label29 with label04;
        catch java.lang.Exception from label31 to label32 with label04;
        catch java.lang.Exception from label33 to label34 with label04;
    }
    public void <init>()
    {
        org.apache.commons.io.FileSystemUtils r0;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static long freeSpace(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        int $i0;
        long $l1;
        org.apache.commons.io.FileSystemUtils $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;

        $i0 = <org.apache.commons.io.FileSystemUtils: int OS>;

        $l1 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>($r0, $i0, 0, -1L);

        return $l1;
    }
    public static long freeSpaceKb() throws java.io.IOException
    {
        long $l0;

        $l0 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>(-1L);

        return $l0;
    }
    public static long freeSpaceKb(long) throws java.io.IOException
    {
        long $l0;
        java.io.File $r0;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(".");

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $l0 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>($r1, $l0);

        return $l0;
    }
    public static long freeSpaceKb(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        long $l0;

        $r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <org.apache.commons.io.FileSystemUtils: long freeSpaceKb(java.lang.String,long)>($r0, -1L);

        return $l0;
    }
    public static long freeSpaceKb(java.lang.String, long) throws java.io.IOException
    {
        java.lang.String $r0;
        long $l0;
        int $i1;
        org.apache.commons.io.FileSystemUtils $r1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;

        $i1 = <org.apache.commons.io.FileSystemUtils: int OS>;

        $l0 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean,long)>($r0, $i1, 1, $l0);

        return $l0;
    }
    long freeSpaceOS(java.lang.String, int, boolean, long) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;
        long $l1;
        java.lang.IllegalArgumentException $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $l1 := @parameter3: long;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty");

        throw $r2;

     label1:
        lookupswitch($i0)
        {
            case 0: goto label7;
            case 1: goto label3;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label2;
        };

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Exception caught when determining operating system");

        throw $r3;

     label3:
        if $z0 == 0 goto label4;

        $l1 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,long)>($r1, $l1);

        $l1 = $l1 / 1024L;

        return $l1;

     label4:
        $l1 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String,long)>($r1, $l1);

        return $l1;

     label5:
        $l1 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>($r1, $z0, 0, $l1);

        return $l1;

     label6:
        $l1 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)>($r1, $z0, 1, $l1);

        return $l1;

     label7:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported operating system");

        throw $r3;
    }
    long freeSpaceUnix(java.lang.String, boolean, boolean, long) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String $r1, r3, $r6;
        boolean $z0, $z1;
        long $l0;
        int $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r4;
        java.lang.String[] r5;
        java.util.List $r7;
        java.io.IOException $r8;
        java.lang.Object $r9;
        java.util.StringTokenizer r10;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $l0 := @parameter3: long;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty");

        throw $r2;

     label1:
        r3 = "-";

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k");

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        if $z1 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P");

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 <= 1 goto label5;

        r5 = newarray (java.lang.String)[3];

        $r6 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        r5[0] = $r6;

        r5[1] = r3;

        r5[2] = $r1;

     label4:
        $r7 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,long)>(r5, 3, $l0);

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 >= 2 goto label6;

        $r8 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

        r3 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not return info as expected ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- response was ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label5:
        r5 = newarray (java.lang.String)[2];

        r3 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        r5[0] = r3;

        r5[1] = $r1;

        goto label4;

     label6:
        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(1);

        r3 = (java.lang.String) $r9;

        r10 = new java.util.StringTokenizer;

        specialinvoke r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, " ");

        $i1 = virtualinvoke r10.<java.util.StringTokenizer: int countTokens()>();

        if $i1 >= 4 goto label9;

        $i1 = virtualinvoke r10.<java.util.StringTokenizer: int countTokens()>();

        if $i1 != 1 goto label8;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 < 3 goto label8;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(2);

        r3 = (java.lang.String) $r9;

        r10 = new java.util.StringTokenizer;

        specialinvoke r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, " ");

     label7:
        virtualinvoke r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r3 = virtualinvoke r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l0 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>(r3, $r1);

        return $l0;

     label8:
        $r8 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

        r3 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not return data as expected ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label9:
        virtualinvoke r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label7;
    }
    long freeSpaceWindows(java.lang.String, long) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        long $l0;
        java.lang.String[] r1;
        java.lang.String $r2, $r3;
        int $i1, $i3;
        char $c2;
        java.lang.StringBuilder $r4;
        java.util.List $r5;
        java.lang.Object $r6;
        java.io.IOException $r7;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        $r2 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String,boolean)>($r2, 0);

        $r2 = $r3;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        if $c2 == 34 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r1 = newarray (java.lang.String)[3];

        r1[0] = "cmd.exe";

        r1[1] = "/C";

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dir /a /-c ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[2] = $r3;

        $r5 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,long)>(r1, 2147483647, $l0);

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = $i1 + -1;

     label2:
        if $i1 < 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (java.lang.String) $r6;

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i3 <= 0 goto label3;

        $l0 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>($r3, $r2);

        return $l0;

     label3:
        $i1 = $i1 + -1;

        goto label2;

     label4:
        $r7 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'dir /-c\' did not return any info for path \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r7;
    }
    java.lang.Process openProcess(java.lang.String[]) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String[] $r1;
        java.lang.Runtime $r2;
        java.lang.Process $r3;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        $r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r3 = virtualinvoke $r2.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>($r1);

        return $r3;
    }
    long parseBytes(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String $r1, $r2;
        java.lang.NumberFormatException r3;
        long $l0;
        byte $b1;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5;
        org.apache.commons.io.IOExceptionWithCause $r6;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label8;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

     label4:
        $r1 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

     label5:
        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not find free space in response ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r1);

     label6:
        throw $r4;

     label7:
        r3 := @caughtexception;

        $r6 = new org.apache.commons.io.IOExceptionWithCause;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'");

        $r1 = <org.apache.commons.io.FileSystemUtils: java.lang.String DF>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' did not return numeric data as expected ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for path \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.commons.io.IOExceptionWithCause: void <init>(java.lang.String,java.lang.Throwable)>($r1, r3);

        throw $r6;

     label8:
        return $l0;

        catch java.lang.NumberFormatException from label1 to label2 with label7;
        catch java.lang.NumberFormatException from label3 to label4 with label7;
        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }
    long parseDir(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String $r1, $r2;
        java.lang.StringBuilder r3;
        int i0, i1, $i2;
        char $c3;
        boolean $z0;
        java.io.IOException $r4;
        long $l4;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        i1 = 0;

        i0 = 0;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i2 + -1;

     label01:
        if $i2 < 0 goto label02;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z0 == 0 goto label04;

        i0 = $i2 + 1;

     label02:
        if $i2 < 0 goto label03;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z0 != 0 goto label05;

        if $c3 == 44 goto label05;

        if $c3 == 46 goto label05;

        i1 = $i2 + 1;

     label03:
        if $i2 >= 0 goto label06;

        $r4 = new java.io.IOException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'dir /-c\' did not return valid info for path \'");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label04:
        $i2 = $i2 + -1;

        goto label01;

     label05:
        $i2 = $i2 + -1;

        goto label02;

     label06:
        r3 = new java.lang.StringBuilder;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i0);

        specialinvoke r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        i1 = 0;

     label07:
        i0 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        if i1 >= i0 goto label10;

        $c3 = virtualinvoke r3.<java.lang.StringBuilder: char charAt(int)>(i1);

        if $c3 == 44 goto label08;

        $c3 = virtualinvoke r3.<java.lang.StringBuilder: char charAt(int)>(i1);

        if $c3 != 46 goto label09;

     label08:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(i1);

        i1 = i1 + -1;

     label09:
        i1 = i1 + 1;

        goto label07;

     label10:
        $r1 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $l4 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>($r1, $r2);

        return $l4;
    }
    java.util.List performCommand(java.lang.String[], int, long) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String[] $r1;
        int $i0, $i2;
        long $l1;
        java.io.BufferedReader r2, r8;
        java.util.ArrayList r3;
        java.lang.Process r4, $r10;
        java.io.InputStream r5, r7, $r11, $r13;
        java.io.OutputStream r6, $r12;
        java.lang.Thread $r9;
        java.io.InputStreamReader $r14;
        java.lang.String $r15;
        java.util.Locale $r16;
        java.io.IOException $r17;
        java.lang.StringBuilder $r18;
        java.util.List $r19;
        java.lang.InterruptedException r20;
        org.apache.commons.io.IOExceptionWithCause $r21;
        java.lang.Throwable $r22;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        $r1 := @parameter0: java.lang.String[];

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>(20);

        r4 = null;

        r5 = null;

        r6 = null;

        r7 = null;

        r8 = null;

     label01:
        $r9 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(long)>($l1);

        $r10 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])>($r1);

     label02:
        r4 = $r10;

     label03:
        $r11 = virtualinvoke $r10.<java.lang.Process: java.io.InputStream getInputStream()>();

     label04:
        r5 = $r11;

     label05:
        $r12 = virtualinvoke $r10.<java.lang.Process: java.io.OutputStream getOutputStream()>();

     label06:
        r6 = $r12;

     label07:
        $r13 = virtualinvoke $r10.<java.lang.Process: java.io.InputStream getErrorStream()>();

     label08:
        r7 = $r13;

     label09:
        r2 = new java.io.BufferedReader;

        $r14 = new java.io.InputStreamReader;

     label10:
        specialinvoke $r14.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r11);

        specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r14);

     label11:
        $r15 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label12:
        if $r15 == null goto label18;

     label13:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

     label14:
        if $i2 >= $i0 goto label18;

     label15:
        $r16 = <java.util.Locale: java.util.Locale ENGLISH>;

     label16:
        $r15 = virtualinvoke $r15.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r16);

        $r15 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r15 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label17:
        goto label12;

     label18:
        virtualinvoke $r10.<java.lang.Process: int waitFor()>();

        staticinvoke <org.apache.commons.io.ThreadMonitor: void stop(java.lang.Thread)>($r9);

        $i0 = virtualinvoke $r10.<java.lang.Process: int exitValue()>();

     label19:
        if $i0 == 0 goto label28;

     label20:
        $r17 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

     label21:
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line returned OS error code \'");

        $i0 = virtualinvoke $r10.<java.lang.Process: int exitValue()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for command ");

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r15);

     label22:
        throw $r17;

     label23:
        r20 := @caughtexception;

        r8 = r2;

     label24:
        $r21 = new org.apache.commons.io.IOExceptionWithCause;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line threw an InterruptedException for command ");

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.commons.io.IOExceptionWithCause: void <init>(java.lang.String,java.lang.Throwable)>($r15, r20);

        throw $r21;

     label25:
        $r22 := @caughtexception;

     label26:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r7);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r8);

        if r4 == null goto label27;

        virtualinvoke r4.<java.lang.Process: void destroy()>();

     label27:
        throw $r22;

     label28:
        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

     label29:
        if $z0 == 0 goto label34;

     label30:
        $r17 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

     label31:
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line did not return any info for command ");

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r15);

     label32:
        throw $r17;

     label33:
        $r22 := @caughtexception;

        r8 = r2;

        goto label26;

     label34:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r11);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r13);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r2);

        if $r10 == null goto label36;

        virtualinvoke $r10.<java.lang.Process: void destroy()>();

        return r3;

     label35:
        r20 := @caughtexception;

        goto label24;

     label36:
        return r3;

        catch java.lang.InterruptedException from label01 to label02 with label35;
        catch java.lang.InterruptedException from label03 to label04 with label35;
        catch java.lang.InterruptedException from label05 to label06 with label35;
        catch java.lang.InterruptedException from label07 to label08 with label35;
        catch java.lang.InterruptedException from label10 to label11 with label35;
        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label11 with label25;
        catch java.lang.InterruptedException from label11 to label12 with label23;
        catch java.lang.InterruptedException from label13 to label14 with label23;
        catch java.lang.InterruptedException from label16 to label17 with label23;
        catch java.lang.InterruptedException from label18 to label19 with label23;
        catch java.lang.InterruptedException from label21 to label22 with label23;
        catch java.lang.Throwable from label11 to label12 with label33;
        catch java.lang.Throwable from label13 to label14 with label33;
        catch java.lang.Throwable from label15 to label17 with label33;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label20 to label23 with label33;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.InterruptedException from label28 to label29 with label23;
        catch java.lang.InterruptedException from label31 to label32 with label23;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Throwable from label30 to label33 with label33;
    }
