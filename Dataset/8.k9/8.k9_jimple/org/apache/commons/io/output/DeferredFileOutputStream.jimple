org.apache.commons.io.output.DeferredFileOutputStream extends org.apache.commons.io.output.ThresholdingOutputStream
private boolean closed
private java.io.OutputStream currentOutputStream
private final java.io.File directory
private org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream
private java.io.File outputFile
private final java.lang.String prefix
private final java.lang.String suffix
    public void <init>(int, java.io.File)
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        int $i0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File)>($i0, $r1, null, null, null);

        return;
    }
    private void <init>(int, java.io.File, java.lang.String, java.lang.String, java.io.File)
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        int $i0;
        java.io.File $r1, $r4;
        java.lang.String $r2, $r3;
        org.apache.commons.io.output.ByteArrayOutputStream $r5;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int)>($i0);

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed> = 0;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile> = $r1;

        $r5 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r5.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream> = $r5;

        $r5 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = $r5;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix> = $r2;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String suffix> = $r3;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File directory> = $r4;

        return;
    }
    public void <init>(int, java.lang.String, java.lang.String, java.io.File)
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        int $i0;
        java.lang.String $r1, $r2;
        java.io.File $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File)>($i0, null, $r1, $r2, $r3);

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Temporary file prefix is missing");

        throw $r4;

     label1:
        return;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void close()>();

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed> = 1;

        return;
    }
    public byte[] getData()
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        byte[] $r1;
        org.apache.commons.io.output.ByteArrayOutputStream $r2;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $r2 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        if $r2 == null goto label1;

        $r2 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        $r1 = virtualinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r1;

     label1:
        return null;
    }
    public java.io.File getFile()
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        r1 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;

        return r1;
    }
    protected java.io.OutputStream getStream() throws java.io.IOException
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        r1 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream>;

        return r1;
    }
    public boolean isInMemory()
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $z0 = virtualinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isThresholdExceeded()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void thresholdReached() throws java.io.IOException
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        java.io.FileOutputStream r1;
        java.lang.String $r2, $r4;
        java.io.File $r3;
        org.apache.commons.io.output.ByteArrayOutputStream $r5;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $r2 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix>;

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix>;

        $r2 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String suffix>;

        $r3 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File directory>;

        $r3 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r4, $r2, $r3);

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile> = $r3;

     label1:
        r1 = new java.io.FileOutputStream;

        $r3 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;

        specialinvoke r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        $r5 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        virtualinvoke $r5.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r1);

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = r1;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream> = null;

        return;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        java.io.OutputStream $r1;
        java.io.FileInputStream r2;
        boolean $z0;
        java.io.IOException $r3;
        org.apache.commons.io.output.ByteArrayOutputStream $r4;
        java.io.File $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $z0 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Stream not closed");

        throw $r3;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        virtualinvoke $r4.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r1);

        return;

     label2:
        r2 = new java.io.FileInputStream;

        $r5 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;

        specialinvoke r2.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r2, $r1);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        return;

     label5:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
    }
