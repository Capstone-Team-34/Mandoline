org.apache.commons.io.output.ByteArrayOutputStream extends java.io.OutputStream
private static final byte[] EMPTY_BYTE_ARRAY
private final java.util.List buffers
private int count
private byte[] currentBuffer
private int currentBufferIndex
private int filledBufferSum
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(1024);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int $i0;
        java.util.ArrayList $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers> = $r1;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative initial size: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        entermonitor r0;

     label2:
        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i0);

        exitmonitor r0;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    private void needNewBuffer(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int $i0, $i1, $i2;
        java.util.List $r1;
        byte[] $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = $i2 + -1;

        if $i1 >= $i2 goto label1;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = $i0;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = $i0;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (byte[]) $r3;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r2;

        return;

     label1:
        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        if $r2 != null goto label3;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = 0;

     label2:
        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = $i1;

        $r2 = newarray (byte)[$i0];

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r2;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;

     label3:
        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i1 = lengthof $r2;

        $i1 = $i1 << 1;

        $i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $i0 = $i0 - $i2;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i2 = lengthof $r2;

        $i1 = $i1 + $i2;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = $i1;

        goto label2;
    }
    private java.io.InputStream toBufferedInputStream()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.util.ArrayList r1;
        int i0, $i1;
        org.apache.commons.io.input.ClosedInputStream $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        byte[] r6;
        java.io.ByteArrayInputStream $r7;
        java.io.SequenceInputStream $r8;
        java.util.Enumeration $r9;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        if i0 != 0 goto label1;

        $r2 = new org.apache.commons.io.input.ClosedInputStream;

        specialinvoke $r2.<org.apache.commons.io.input.ClosedInputStream: void <init>()>();

        return $r2;

     label1:
        r1 = new java.util.ArrayList;

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i1);

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (byte[]) $r5;

        $i1 = lengthof r6;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r6, 0, $i1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        i0 = i0 - $i1;

        if i0 != 0 goto label2;

     label3:
        $r8 = new java.io.SequenceInputStream;

        $r9 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>(r1);

        specialinvoke $r8.<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>($r9);

        return $r8;
    }
    public static java.io.InputStream toBufferedInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        org.apache.commons.io.output.ByteArrayOutputStream r1;

        $r0 := @parameter0: java.io.InputStream;

        r1 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: int write(java.io.InputStream)>($r0);

        $r0 = specialinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream()>();

        return $r0;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        return;
    }
    public void reset()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int $i0;
        java.lang.Object $r1;
        java.util.List $r2;
        byte[] $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = 0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = 0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = 0;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (byte[]) $r1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r3;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int size()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        entermonitor r0;

     label1:
        i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public byte[] toByteArray()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0, i1, $i2;
        byte[] r1, r5;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        entermonitor r0;

     label1:
        i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        if i0 != 0 goto label3;

        r1 = <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY>;

     label2:
        exitmonitor r0;

        return r1;

     label3:
        r1 = newarray (byte)[i0];

        i1 = 0;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (byte[]) $r4;

        $i2 = lengthof r5;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, i1, $i2);

     label5:
        i1 = i1 + $i2;

        i0 = i0 - $i2;

        if i0 != 0 goto label4;

        goto label2;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $r1 = new java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r2);

        return $r1;
    }
    public java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.lang.String $r1, $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, $r1);

        return $r2;
    }
    public int write(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.io.InputStream $r1;
        int i0, $i1, $i2, $i3;
        byte[] $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $r1 := @parameter0: java.io.InputStream;

        entermonitor r0;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $i1 = $i1 - $i2;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i2 = lengthof $r3;

        $i2 = $i2 - $i1;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, $i1, $i2);

     label2:
        if $i2 == -1 goto label5;

        i0 = i0 + $i2;

        $i1 = $i1 + $i2;

        $i3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i2 = $i3 + $i2;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = $i2;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i2 = lengthof $r2;

        if $i1 != $i2 goto label3;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i1 = lengthof $r2;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i1);

        $i1 = 0;

     label3:
        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i2 = lengthof $r3;

        $i2 = $i2 - $i1;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, $i1, $i2);

     label4:
        goto label2;

     label5:
        exitmonitor r0;

        return i0;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label4 with label6;
    }
    public void write(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int $i0, $i1, $i2;
        byte[] $r1;
        byte $b3;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $i1 = $i1 - $i2;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i2 = lengthof $r1;

        if $i1 != $i2 goto label2;

        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i1 = $i1 + 1;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i1);

        $i1 = 0;

     label2:
        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $b3 = (byte) $i0;

        $r1[$i1] = $b3;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = $i0;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public void write(byte[], int, int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        byte[] $r1, $r3;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 < 0 goto label1;

        i2 = lengthof $r1;

        if $i0 > i2 goto label1;

        if $i1 < 0 goto label1;

        i2 = $i0 + $i1;

        $i4 = lengthof $r1;

        if i2 > $i4 goto label1;

        i2 = $i0 + $i1;

        if i2 >= 0 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        if $i1 != 0 goto label3;

        return;

     label3:
        entermonitor r0;

     label4:
        i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        i2 = i2 + $i1;

        $i4 = $i1;

        $i5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $i5 = $i5 - $i3;

     label5:
        if $i4 <= 0 goto label6;

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i3 = lengthof $r3;

        $i3 = $i3 - $i5;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $i6 = $i0 + $i1;

        $i6 = $i6 - $i4;

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i6, $r3, $i5, $i3);

        $i4 = $i4 - $i3;

        if $i4 <= 0 goto label5;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i2);

        $i5 = 0;

        goto label5;

     label6:
        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = i2;

        exitmonitor r0;

     label7:
        return;

     label8:
        $r4 := @caughtexception;

        exitmonitor r0;

     label9:
        throw $r4;

        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.io.OutputStream $r1;
        int i0, $i1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        byte[] r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        entermonitor r0;

     label1:
        i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (byte[]) $r4;

        $i1 = lengthof r5;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r5, 0, $i1);

     label3:
        i0 = i0 - $i1;

        if i0 != 0 goto label2;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label5;
    }
