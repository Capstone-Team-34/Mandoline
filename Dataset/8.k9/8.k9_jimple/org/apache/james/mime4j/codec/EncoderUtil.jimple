org.apache.james.mime4j.codec.EncoderUtil extends java.lang.Object
private static final java.util.BitSet ATEXT_CHARS
private static final char BASE64_PAD
private static final byte[] BASE64_TABLE
private static final int ENCODED_WORD_MAX_LENGTH
private static final java.lang.String ENC_WORD_PREFIX
private static final java.lang.String ENC_WORD_SUFFIX
private static final int MAX_USED_CHARACTERS
private static final java.util.BitSet Q_REGULAR_CHARS
private static final java.util.BitSet Q_RESTRICTED_CHARS
private static final java.util.BitSet TOKEN_CHARS
    static void <clinit>()
    {
        byte[] $r0;
        java.util.BitSet $r1;

        $r0 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE> = $r0;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("=_?");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS> = $r1;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("=_?\"#$%&\'(),.:;<>@[\\]^`{|}~");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS> = $r1;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("()<>@,;:\\\"/[]?=");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet TOKEN_CHARS> = $r1;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("()<>@.,;:\\\"[]");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS> = $r1;

        return;
    }
    private void <init>()
    {
        org.apache.james.mime4j.codec.EncoderUtil r0;

        r0 := @this: org.apache.james.mime4j.codec.EncoderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static int bEncodedLength(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i0 = $i0 + 2;

        $i0 = $i0 / 3;

        $i0 = $i0 * 4;

        return $i0;
    }
    private static java.nio.charset.Charset determineCharset(java.lang.String)
    {
        java.lang.String $r0;
        boolean z0;
        int $i0, i1;
        char $c2;
        java.nio.charset.Charset r1;

        $r0 := @parameter0: java.lang.String;

        z0 = 1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        if $c2 <= 255 goto label2;

        r1 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset UTF_8>;

        return r1;

     label2:
        if $c2 <= 127 goto label3;

        z0 = 0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if z0 == 0 goto label5;

        r1 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;

        return r1;

     label5:
        r1 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1>;

        return r1;
    }
    private static org.apache.james.mime4j.codec.EncoderUtil$Encoding determineEncoding(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] $r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r1, $r2;
        int i0, i1, i2;
        boolean $z0;
        java.util.BitSet r3;
        byte $b3;
        org.apache.james.mime4j.codec.EncoderUtil$Encoding r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 = lengthof $r0;

        if i0 != 0 goto label1;

        r4 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding Q>;

        return r4;

     label1:
        $r2 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if $r1 != $r2 goto label5;

        r3 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

     label2:
        i0 = 0;

        i2 = 0;

     label3:
        i1 = lengthof $r0;

        if i2 >= i1 goto label6;

        $b3 = $r0[i2];

        i1 = $b3 & 255;

        if i1 == 32 goto label4;

        $z0 = virtualinvoke r3.<java.util.BitSet: boolean get(int)>(i1);

        if $z0 != 0 goto label4;

        i0 = i0 + 1;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        r3 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

        goto label2;

     label6:
        i2 = i0 * 100;

        i0 = lengthof $r0;

        i0 = i2 / i0;

        if i0 <= 30 goto label7;

        r4 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding B>;

        return r4;

     label7:
        r4 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding Q>;

        return r4;
    }
    private static byte[] encode(java.lang.String, java.nio.charset.Charset)
    {
        java.lang.String $r0;
        java.nio.charset.Charset $r1;
        byte[] r2;
        java.nio.ByteBuffer $r3;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r3 = virtualinvoke $r1.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>($r0);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        r2 = newarray (byte)[$i0];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        return r2;
    }
    public static java.lang.String encodeAddressDisplayName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isAtomPhrase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>(r0, 0);

        if $z0 == 0 goto label2;

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage WORD_ENTITY>;

        r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r0, $r1);

        return r0;

     label2:
        r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r0);

        return r0;
    }
    public static java.lang.String encodeAddressLocalPart(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isDotAtomText(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r0);

        return r0;
    }
    private static java.lang.String encodeB(java.lang.String, java.lang.String, int, java.nio.charset.Charset, byte[])
    {
        java.lang.String $r0, $r1, $r4;
        int $i0, i1, $i2;
        java.nio.charset.Charset $r2;
        byte[] $r3;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.nio.charset.Charset;

        $r3 := @parameter4: byte[];

        i1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: int bEncodedLength(byte[])>($r3);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = $i2 + i1;

        $r4 = "?=";

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        i1 = i1 + $i2;

        $i2 = 75 - $i0;

        if i1 > $i2 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(byte[])>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label1:
        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        i1 = i1 / 2;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r4, $r2);

        $r4 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>($r0, $r4, $i0, $r2, $r3);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 / 2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r1, $r2);

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>($r0, $r1, 0, $r2, $r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    public static java.lang.String encodeB(byte[])
    {
        byte[] $r0, $r3;
        int i0, i1, $i2, $i4;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        byte $b3;
        char $c5;

        $r0 := @parameter0: byte[];

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

        i0 = lengthof $r0;

     label1:
        $i2 = i0 + -2;

        if i1 >= $i2 goto label2;

        $b3 = $r0[i1];

        $i2 = $b3 & 255;

        $i2 = $i2 << 16;

        $i4 = i1 + 1;

        $b3 = $r0[$i4];

        $i4 = $b3 & 255;

        $i4 = $i4 << 8;

        $i2 = $i2 | $i4;

        $i4 = i1 + 2;

        $b3 = $r0[$i4];

        $i4 = $b3 & 255;

        $i2 = $i2 | $i4;

        $r3 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i4 = $i2 >> 18;

        $i4 = $i4 & 63;

        $b3 = $r3[$i4];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r3 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i4 = $i2 >> 12;

        $i4 = $i4 & 63;

        $b3 = $r3[$i4];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r3 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i4 = $i2 >> 6;

        $i4 = $i4 & 63;

        $b3 = $r3[$i4];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r3 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i2 = $i2 & 63;

        $b3 = $r3[$i2];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i1 = i1 + 3;

        goto label1;

     label2:
        $i2 = i0 + -2;

        if i1 != $i2 goto label4;

        $b3 = $r0[i1];

        i0 = $b3 & 255;

        i0 = i0 << 16;

        i1 = i1 + 1;

        $b3 = $r0[i1];

        i1 = $b3 & 255;

        i1 = i1 << 8;

        i1 = i0 | i1;

        $r0 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        i0 = i1 >> 18;

        i0 = i0 & 63;

        $b3 = $r0[i0];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r0 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        i0 = i1 >> 12;

        i0 = i0 & 63;

        $b3 = $r0[i0];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r0 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        i1 = i1 >> 6;

        i1 = i1 & 63;

        $b3 = $r0[i1];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

     label3:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label4:
        i0 = i0 + -1;

        if i1 != i0 goto label3;

        $b3 = $r0[i1];

        i1 = $b3 & 255;

        i1 = i1 << 16;

        $r0 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        i0 = i1 >> 18;

        i0 = i0 & 63;

        $b3 = $r0[i0];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r0 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        i1 = i1 >> 12;

        i1 = i1 & 63;

        $b3 = $r0[i1];

        $c5 = (char) $b3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        goto label3;
    }
    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        java.lang.String $r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>($r0, $r1, 0, null, null);

        return $r0;
    }
    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int)
    {
        java.lang.String $r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $i0 := @parameter2: int;

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>($r0, $r1, $i0, null, null);

        return $r0;
    }
    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int, java.nio.charset.Charset, org.apache.james.mime4j.codec.EncoderUtil$Encoding)
    {
        java.lang.String $r0, $r8;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r1;
        int $i0;
        java.nio.charset.Charset $r2;
        org.apache.james.mime4j.codec.EncoderUtil$Encoding $r3, $r6;
        java.lang.IllegalArgumentException $r4;
        byte[] $r5;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.nio.charset.Charset;

        $r3 := @parameter4: org.apache.james.mime4j.codec.EncoderUtil$Encoding;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        if $i0 < 0 goto label2;

        if $i0 <= 50 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label3:
        if $r2 != null goto label4;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.nio.charset.Charset determineCharset(java.lang.String)>($r0);

     label4:
        $r5 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        if $r3 != null goto label5;

        $r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: org.apache.james.mime4j.codec.EncoderUtil$Encoding determineEncoding(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>($r5, $r1);

     label5:
        $r6 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding B>;

        if $r3 != $r6 goto label6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r8 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?B?");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>($r8, $r0, $i0, $r2, $r5);

        return $r0;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r8 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?Q?");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>($r8, $r0, $r1, $i0, $r2, $r5);

        return $r0;
    }
    public static java.lang.String encodeHeaderParameter(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.util.Locale $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isToken(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    public static java.lang.String encodeIfNecessary(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int)
    {
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>($r1, $i0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)>($r1, $r0, $i0);

     label1:
        return $r1;
    }
    private static java.lang.String encodeQ(java.lang.String, java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int, java.nio.charset.Charset, byte[])
    {
        java.lang.String $r0, $r1, $r5;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r2;
        int $i0, i1, $i2;
        java.nio.charset.Charset $r3;
        byte[] $r4;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.nio.charset.Charset;

        $r4 := @parameter5: byte[];

        i1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: int qEncodedLength(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>($r4, $r2);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = $i2 + i1;

        $r5 = "?=";

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        i1 = i1 + $i2;

        $i2 = 75 - $i0;

        if i1 > $i2 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>($r4, $r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label1:
        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        i1 = i1 / 2;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r4 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r5, $r3);

        $r5 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>($r0, $r5, $r2, $i0, $r3, $r4);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 / 2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r4 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>($r1, $r3);

        $r0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>($r0, $r1, $r2, 0, $r3, $r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    public static java.lang.String encodeQ(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] $r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r1, $r3;
        int i0, i1, i2, $i4;
        java.lang.StringBuilder r2;
        java.util.BitSet r4;
        byte $b3;
        boolean $z0;
        char $c5;
        java.lang.String $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r3 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if $r1 != $r3 goto label4;

        r4 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

     label1:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof $r0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label7;

        $b3 = $r0[i2];

        i1 = $b3 & 255;

        if i1 != 32 goto label5;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        r4 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

        goto label1;

     label5:
        $z0 = virtualinvoke r4.<java.util.BitSet: boolean get(int)>(i1);

        if $z0 != 0 goto label6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $i4 = i1 >>> 4;

        $c5 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: char hexDigit(int)>($i4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i1 = i1 & 15;

        $c5 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: char hexDigit(int)>(i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        goto label3;

     label6:
        $c5 = (char) i1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        goto label3;

     label7:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
    public static boolean hasToBeEncoded(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, i1, $i2;
        java.lang.IllegalArgumentException $r1;
        char $c3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $r0 != null goto label01;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label01:
        if $i0 < 0 goto label02;

        if $i0 <= 50 goto label03;

     label02:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label03:
        i1 = 0;

     label04:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i1 >= $i2 goto label09;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        if $c3 == 9 goto label05;

        if $c3 != 32 goto label07;

     label05:
        $i0 = 0;

     label06:
        i1 = i1 + 1;

        goto label04;

     label07:
        $i0 = $i0 + 1;

        if $i0 <= 77 goto label08;

        return 1;

     label08:
        if $c3 < 32 goto label10;

        if $c3 < 127 goto label06;

        return 1;

     label09:
        return 0;

     label10:
        return 1;
    }
    private static char hexDigit(int)
    {
        int $i0;
        char $c1;

        $i0 := @parameter0: int;

        if $i0 >= 10 goto label1;

        $i0 = $i0 + 48;

        $c1 = (char) $i0;

        return $c1;

     label1:
        $i0 = $i0 + -10;

        $i0 = $i0 + 65;

        $c1 = (char) $i0;

        return $c1;
    }
    private static java.util.BitSet initChars(java.lang.String)
    {
        java.lang.String $r0;
        java.util.BitSet r1;
        int $i0;
        char c1;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.util.BitSet;

        specialinvoke r1.<java.util.BitSet: void <init>(int)>(128);

        c1 = 33;

     label1:
        if c1 >= 127 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c1);

        if $i0 != -1 goto label2;

        virtualinvoke r1.<java.util.BitSet: void set(int)>(c1);

     label2:
        $i0 = c1 + 1;

        c1 = (char) $i0;

        goto label1;

     label3:
        return r1;
    }
    private static boolean isAtomPhrase(java.lang.String)
    {
        java.lang.String $r0;
        boolean z0, $z1;
        int $i0, i1;
        char $c2;
        java.util.BitSet $r1;

        $r0 := @parameter0: java.lang.String;

        z0 = 0;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS>;

        $z1 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>($c2);

        if $z1 == 0 goto label3;

        z0 = 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>($c2);

        if $z1 != 0 goto label2;

        return 0;

     label4:
        return z0;
    }
    private static boolean isDotAtomText(java.lang.String)
    {
        java.lang.String $r0;
        char c0, $c3;
        int $i1, i2, $i4;
        java.util.BitSet $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        c0 = 46;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        if i2 >= $i1 goto label5;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        if $c3 != 46 goto label4;

        if c0 == 46 goto label6;

        $i4 = $i1 + -1;

        if i2 == $i4 goto label6;

     label3:
        c0 = $c3;

        i2 = i2 + 1;

        goto label2;

     label4:
        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS>;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>($c3);

        if $z0 != 0 goto label3;

        return 0;

     label5:
        return 1;

     label6:
        return 0;
    }
    public static boolean isToken(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i1;
        char $c2;
        java.util.BitSet $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet TOKEN_CHARS>;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>($c2);

        if $z0 == 0 goto label4;

        i1 = i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    private static int qEncodedLength(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] $r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r1, $r2;
        int i0, i1, i2;
        boolean $z0;
        java.util.BitSet r3;
        byte $b3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r2 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if $r1 != $r2 goto label4;

        r3 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

     label1:
        i1 = 0;

        i2 = 0;

     label2:
        i0 = lengthof $r0;

        if i2 >= i0 goto label7;

        $b3 = $r0[i2];

        i0 = $b3 & 255;

        if i0 != 32 goto label5;

        i1 = i1 + 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        r3 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

        goto label1;

     label5:
        $z0 = virtualinvoke r3.<java.util.BitSet: boolean get(int)>(i0);

        if $z0 != 0 goto label6;

        i1 = i1 + 3;

        goto label3;

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        return i1;
    }
    private static java.lang.String quote(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\\\\\"]", "\\\\$0");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
