org.apache.james.mime4j.codec.Base64OutputStream extends java.io.FilterOutputStream
static final boolean $assertionsDisabled
private static final java.util.Set BASE64_CHARS
private static final byte BASE64_PAD
static final byte[] BASE64_TABLE
private static final byte[] CRLF_SEPARATOR
private static final int DEFAULT_LINE_LENGTH
private static final int ENCODED_BUFFER_SIZE
private static final int MASK_6BITS
private boolean closed
private int data
private final byte[] encoded
private final int lineLength
private int linePosition
private final byte[] lineSeparator
private int modulus
private int position
private final byte[] singleByte
    static void <clinit>()
    {
        byte[] r0;
        byte b0;
        int i1, i2;
        java.lang.Class $r1;
        boolean $z0;
        java.util.HashSet $r2;
        java.util.Set $r3;
        java.lang.Byte $r4;

        $r1 = class "Lorg/apache/james/mime4j/codec/Base64OutputStream;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z0 = 1;

     label1:
        <org.apache.james.mime4j.codec.Base64OutputStream: boolean $assertionsDisabled> = $z0;

        r0 = newarray (byte)[2];

        r0[0] = 13;

        r0[1] = 10;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR> = r0;

        r0 = newarray (byte)[64];

        r0[0] = 65;

        r0[1] = 66;

        r0[2] = 67;

        r0[3] = 68;

        r0[4] = 69;

        r0[5] = 70;

        r0[6] = 71;

        r0[7] = 72;

        r0[8] = 73;

        r0[9] = 74;

        r0[10] = 75;

        r0[11] = 76;

        r0[12] = 77;

        r0[13] = 78;

        r0[14] = 79;

        r0[15] = 80;

        r0[16] = 81;

        r0[17] = 82;

        r0[18] = 83;

        r0[19] = 84;

        r0[20] = 85;

        r0[21] = 86;

        r0[22] = 87;

        r0[23] = 88;

        r0[24] = 89;

        r0[25] = 90;

        r0[26] = 97;

        r0[27] = 98;

        r0[28] = 99;

        r0[29] = 100;

        r0[30] = 101;

        r0[31] = 102;

        r0[32] = 103;

        r0[33] = 104;

        r0[34] = 105;

        r0[35] = 106;

        r0[36] = 107;

        r0[37] = 108;

        r0[38] = 109;

        r0[39] = 110;

        r0[40] = 111;

        r0[41] = 112;

        r0[42] = 113;

        r0[43] = 114;

        r0[44] = 115;

        r0[45] = 116;

        r0[46] = 117;

        r0[47] = 118;

        r0[48] = 119;

        r0[49] = 120;

        r0[50] = 121;

        r0[51] = 122;

        r0[52] = 48;

        r0[53] = 49;

        r0[54] = 50;

        r0[55] = 51;

        r0[56] = 52;

        r0[57] = 53;

        r0[58] = 54;

        r0[59] = 55;

        r0[60] = 56;

        r0[61] = 57;

        r0[62] = 43;

        r0[63] = 47;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE> = r0;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS> = $r2;

        r0 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        i1 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        b0 = r0[i2];

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

        i2 = i2 + 1;

        goto label2;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(61);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

        return;
    }
    public void <init>(java.io.OutputStream)
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>($r1, 76, $r2);

        return;
    }
    public void <init>(java.io.OutputStream, int)
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.io.OutputStream $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>($r1, $i0, $r2);

        return;
    }
    public void <init>(java.io.OutputStream, int, byte[])
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.io.OutputStream $r1;
        int $i0;
        byte[] $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r3 = newarray (byte)[1];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte> = $r3;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        if $i0 >= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void checkLineSeparator(byte[])>($r2);

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength> = $i0;

        $i0 = lengthof $r2;

        $r3 = newarray (byte)[$i0];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator> = $r3;

        $r3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        $r2 = newarray (byte)[2048];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded> = $r2;

        return;
    }
    private void checkLineSeparator(byte[])
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte[] $r1;
        byte b0;
        int i1, i2;
        java.lang.IllegalArgumentException $r2;
        java.util.Set $r3;
        java.lang.Byte $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        char $c3;
        java.lang.String $r6;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        i1 = lengthof $r1;

        if i1 <= 2048 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("line separator length exceeds 2048");

        throw $r2;

     label1:
        i1 = lengthof $r1;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        b0 = $r1[i2];

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line separator must not contain base64 character \'");

        i1 = b0 & 255;

        $c3 = (char) i1;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return;
    }
    private void close0() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i0 == 0 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writePad()>();

     label1:
        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i0 <= 0 goto label2;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        if $i0 <= 0 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>();

     label2:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

        return;
    }
    private void flush0() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte[] $r1;
        int $i0;
        java.io.OutputStream $r2;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: java.io.OutputStream out>;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = 0;

     label1:
        return;
    }
    private void write0(byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte[] $r1, r2, $r3;
        int $i0, $i1, i2, $i4, $i5, $i6;
        byte b3;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        if $i0 >= $i1 goto label7;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        i2 = i2 << 8;

        b3 = $r1[$i0];

        $i4 = b3 & 255;

        i2 = i2 | $i4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data> = i2;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        i2 = i2 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = i2;

        if i2 != 3 goto label6;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = 0;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if i2 <= 0 goto label4;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if i2 < $i4 goto label4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        i2 = lengthof r2;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        i2 = i2 - $i4;

        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i4 = lengthof r2;

        if i2 >= $i4 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label2:
        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        i2 = lengthof r2;

        $i4 = 0;

     label3:
        if $i4 >= i2 goto label4;

        b3 = r2[$i4];

        $r3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i5 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i6 = $i5 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i6;

        $r3[$i5] = b3;

        $i4 = $i4 + 1;

        goto label3;

     label4:
        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        i2 = lengthof r2;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        i2 = i2 - $i4;

        if i2 >= 4 goto label5;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label5:
        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i4 = i2 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i4;

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i4 = $i4 >> 18;

        $i4 = $i4 & 63;

        b3 = $r3[$i4];

        r2[i2] = b3;

        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i4 = i2 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i4;

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i4 = $i4 >> 12;

        $i4 = $i4 & 63;

        b3 = $r3[$i4];

        r2[i2] = b3;

        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i4 = i2 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i4;

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i4 = $i4 >> 6;

        $i4 = $i4 & 63;

        b3 = $r3[$i4];

        r2[i2] = b3;

        r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i4 = i2 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i4;

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i4 = $i4 & 63;

        b3 = $r3[$i4];

        r2[i2] = b3;

        i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        i2 = i2 + 4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = i2;

     label6:
        $i0 = $i0 + 1;

        goto label1;

     label7:
        return;
    }
    private void writeLineSeparator() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte[] r1, $r2;
        int i0, $i2, i3, $i4;
        byte b1;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        i0 = lengthof r1;

        $i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        i0 = i0 - $i2;

        r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i2 = lengthof r1;

        if i0 >= $i2 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label1:
        r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        b1 = r1[i3];

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i4 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i2 = $i4 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i2;

        $r2[$i4] = b1;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }
    private void writePad() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0, $i1;
        byte[] $r1, $r2;
        byte $b2;
        boolean $z0;
        java.lang.AssertionError $r3;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i0 < $i1 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>();

     label1:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i0 = $i0 - $i1;

        if $i0 >= 4 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label2:
        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i0 != 1 goto label4;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i1 = $i1 >> 2;

        $i1 = $i1 & 63;

        $b2 = $r2[$i1];

        $r1[$i0] = $b2;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i1 = $i1 << 4;

        $i1 = $i1 & 63;

        $b2 = $r2[$i1];

        $r1[$i0] = $b2;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r1[$i0] = 61;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r1[$i0] = 61;

     label3:
        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i0 = $i0 + 4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = $i0;

        return;

     label4:
        $z0 = <org.apache.james.mime4j.codec.Base64OutputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i0 == 2 goto label5;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label5:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i1 = $i1 >> 10;

        $i1 = $i1 & 63;

        $b2 = $r2[$i1];

        $r1[$i0] = $b2;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i1 = $i1 >> 4;

        $i1 = $i1 & 63;

        $b2 = $r2[$i1];

        $r1[$i0] = $b2;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i1 = $i1 << 2;

        $i1 = $i1 & 63;

        $b2 = $r2[$i1];

        $r1[$i0] = $b2;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r1[$i0] = 61;

        goto label3;
    }
    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed> = 1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void close0()>();

        return;
    }
    public void flush() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

        return;
    }
    public final void write(int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0;
        boolean $z0;
        java.io.IOException $r1;
        byte[] $r2;
        byte $b1;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 := @parameter0: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r1;

     label1:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte>;

        $b1 = (byte) $i0;

        $r2[0] = $b1;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>($r2, 0, 1);

        return;
    }
    public final void write(byte[]) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte[] $r1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.NullPointerException $r3;
        int $i0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof $r1;

        if $i0 != 0 goto label3;

        return;

     label3:
        $i0 = lengthof $r1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public final void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        if $i0 < 0 goto label3;

        if $i1 < 0 goto label3;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label4;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label4:
        if $i1 != 0 goto label5;

        return;

     label5:
        $i1 = $i0 + $i1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
