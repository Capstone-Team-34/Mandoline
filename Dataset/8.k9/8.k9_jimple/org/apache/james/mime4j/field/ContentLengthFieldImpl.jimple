org.apache.james.mime4j.field.ContentLengthFieldImpl extends org.apache.james.mime4j.field.AbstractField implements org.apache.james.mime4j.dom.field.ContentLengthField
public static final org.apache.james.mime4j.dom.FieldParser PARSER
private long contentLength
private boolean parsed
    static void <clinit>()
    {
        org.apache.james.mime4j.field.ContentLengthFieldImpl$1 $r0;

        $r0 = new org.apache.james.mime4j.field.ContentLengthFieldImpl$1;

        specialinvoke $r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl$1: void <init>()>();

        <org.apache.james.mime4j.field.ContentLengthFieldImpl: org.apache.james.mime4j.dom.FieldParser PARSER> = $r0;

        return;
    }
    void <init>(org.apache.james.mime4j.stream.Field, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        org.apache.james.mime4j.field.ContentLengthFieldImpl r0;
        org.apache.james.mime4j.stream.Field $r1;
        org.apache.james.mime4j.codec.DecodeMonitor $r2;

        r0 := @this: org.apache.james.mime4j.field.ContentLengthFieldImpl;

        $r1 := @parameter0: org.apache.james.mime4j.stream.Field;

        $r2 := @parameter1: org.apache.james.mime4j.codec.DecodeMonitor;

        specialinvoke r0.<org.apache.james.mime4j.field.AbstractField: void <init>(org.apache.james.mime4j.stream.Field,org.apache.james.mime4j.codec.DecodeMonitor)>($r1, $r2);

        r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: boolean parsed> = 0;

        return;
    }
    private void parse()
    {
        org.apache.james.mime4j.field.ContentLengthFieldImpl r0;
        java.lang.NumberFormatException r1;
        java.lang.String $r2, $r5;
        long $l0;
        byte $b1;
        org.apache.james.mime4j.codec.DecodeMonitor $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        r0 := @this: org.apache.james.mime4j.field.ContentLengthFieldImpl;

        r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: boolean parsed> = 1;

        r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: long contentLength> = -1L;

        $r2 = virtualinvoke r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: java.lang.String getBody()>();

        if $r2 == null goto label8;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

     label2:
        r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: long contentLength> = $l0;

        $l0 = r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: long contentLength>;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label8;

        r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: long contentLength> = -1L;

        $r3 = r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

     label3:
        $z0 = virtualinvoke $r3.<org.apache.james.mime4j.codec.DecodeMonitor: boolean isListening()>();

     label4:
        if $z0 == 0 goto label8;

        $r3 = r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r4 = new java.lang.StringBuilder;

     label5:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative content length: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>($r5, "ignoring Content-Length header");

     label6:
        return;

     label7:
        r1 := @caughtexception;

        $r3 = r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $z0 = virtualinvoke $r3.<org.apache.james.mime4j.codec.DecodeMonitor: boolean isListening()>();

        if $z0 == 0 goto label8;

        $r3 = r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid content length: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>($r2, "ignoring Content-Length header");

     label8:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label7;
        catch java.lang.NumberFormatException from label3 to label4 with label7;
        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }
    public long getContentLength()
    {
        org.apache.james.mime4j.field.ContentLengthFieldImpl r0;
        boolean $z0;
        long l0;

        r0 := @this: org.apache.james.mime4j.field.ContentLengthFieldImpl;

        $z0 = r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: boolean parsed>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: void parse()>();

     label1:
        l0 = r0.<org.apache.james.mime4j.field.ContentLengthFieldImpl: long contentLength>;

        return l0;
    }
