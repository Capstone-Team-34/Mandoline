org.apache.james.mime4j.util.CharsetUtil extends java.lang.Object
public static final int CR
public static final java.lang.String CRLF
public static final java.nio.charset.Charset DEFAULT_CHARSET
public static final int HT
public static final java.nio.charset.Charset ISO_8859_1
public static final int LF
public static final int SP
public static final java.nio.charset.Charset US_ASCII
public static final java.nio.charset.Charset UTF_8
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset US_ASCII> = $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1> = $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset UTF_8> = $r0;

        $r0 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset DEFAULT_CHARSET> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.james.mime4j.util.CharsetUtil r0;

        r0 := @this: org.apache.james.mime4j.util.CharsetUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean isASCII(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        $i1 = 65408 & $c0;

        if $i1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isASCII(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        int $i0, i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String may not be null");

        throw $r1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isASCII(char)>($c2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }
    public static boolean isWhitespace(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 == 32 goto label1;

        if $c0 == 9 goto label1;

        if $c0 == 13 goto label1;

        if $c0 != 10 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static boolean isWhitespace(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        int $i0, i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String may not be null");

        throw $r1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }
    public static java.nio.charset.Charset lookup(java.lang.String)
    {
        java.lang.String $r0;
        java.nio.charset.Charset $r1;
        java.nio.charset.IllegalCharsetNameException r2;
        java.nio.charset.UnsupportedCharsetException r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r0);

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        return null;

     label4:
        r3 := @caughtexception;

        return null;

        catch java.nio.charset.IllegalCharsetNameException from label1 to label2 with label3;
        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label4;
    }
