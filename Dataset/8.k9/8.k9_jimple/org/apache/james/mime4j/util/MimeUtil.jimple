org.apache.james.mime4j.util.MimeUtil extends java.lang.Object
public static final java.lang.String ENC_7BIT
public static final java.lang.String ENC_8BIT
public static final java.lang.String ENC_BASE64
public static final java.lang.String ENC_BINARY
public static final java.lang.String ENC_QUOTED_PRINTABLE
private static final java.lang.ThreadLocal RFC822_DATE_FORMAT
private static int counter
private static final java.util.Random random
    static void <clinit>()
    {
        java.util.Random $r0;
        org.apache.james.mime4j.util.MimeUtil$1 $r1;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.apache.james.mime4j.util.MimeUtil: java.util.Random random> = $r0;

        <org.apache.james.mime4j.util.MimeUtil: int counter> = 0;

        $r1 = new org.apache.james.mime4j.util.MimeUtil$1;

        specialinvoke $r1.<org.apache.james.mime4j.util.MimeUtil$1: void <init>()>();

        <org.apache.james.mime4j.util.MimeUtil: java.lang.ThreadLocal RFC822_DATE_FORMAT> = $r1;

        return;
    }
    private void <init>()
    {
        org.apache.james.mime4j.util.MimeUtil r0;

        r0 := @this: org.apache.james.mime4j.util.MimeUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String createUniqueBoundary()
    {
        java.lang.StringBuilder r0;
        int $i0;
        java.lang.String $r1;
        java.util.Random $r2;
        long $l1;

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-=Part.");

        $i0 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int nextCounterValue()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = <org.apache.james.mime4j.util.MimeUtil: java.util.Random random>;

        $l1 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = <org.apache.james.mime4j.util.MimeUtil: java.util.Random random>;

        $l1 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=-");

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    public static java.lang.String createUniqueMessageId(java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.lang.StringBuilder r1;
        int $i0;
        java.util.Random $r3;
        long $l1;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("<Mime4j.");

        $i0 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int nextCounterValue()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = <org.apache.james.mime4j.util.MimeUtil: java.util.Random random>;

        $l1 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        if $r0 == null goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    public static java.lang.String fold(java.lang.String, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        if $i2 > 76 goto label1;

        return r1;

     label1:
        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = neg $i0;

        $i2 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int indexOfWsp(java.lang.String,int)>(r1, 0);

     label2:
        if $i2 != $i1 goto label3;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;

     label3:
        $i3 = $i2 + 1;

        $i3 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int indexOfWsp(java.lang.String,int)>(r1, $i3);

        $i4 = $i3 - $i0;

        if $i4 <= 76 goto label4;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i2);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $i0 = $i2;

     label4:
        $i2 = $i3;

        goto label2;
    }
    public static java.lang.String formatDate(java.util.Date, java.util.TimeZone)
    {
        java.util.Date $r0;
        java.util.TimeZone $r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.text.DateFormat r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.util.TimeZone;

        $r2 = <org.apache.james.mime4j.util.MimeUtil: java.lang.ThreadLocal RFC822_DATE_FORMAT>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (java.text.DateFormat) $r3;

        if $r1 != null goto label2;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r4.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r1);

     label1:
        $r5 = virtualinvoke r4.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r0);

        return $r5;

     label2:
        virtualinvoke r4.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r1);

        goto label1;
    }
    private static int indexOfWsp(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

     label1:
        if $i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 == 32 goto label4;

        if $c2 != 9 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $i1;

     label4:
        return $i0;
    }
    public static boolean isBase64Encoding(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = "base64";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        return $z0;
    }
    public static boolean isMessage(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("message/rfc822");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isMultipart(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("multipart/");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isQuotedPrintableEncoded(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = "quoted-printable";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        return $z0;
    }
    public static boolean isSameMimeType(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static int nextCounterValue()
    {
        int $i0, $i1;
        java.lang.Throwable $r0;

        entermonitor class "Lorg/apache/james/mime4j/util/MimeUtil;";

     label1:
        $i1 = <org.apache.james.mime4j.util.MimeUtil: int counter>;

        $i0 = $i1 + 1;

        <org.apache.james.mime4j.util.MimeUtil: int counter> = $i0;

     label2:
        exitmonitor class "Lorg/apache/james/mime4j/util/MimeUtil;";

        return $i1;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lorg/apache/james/mime4j/util/MimeUtil;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static java.lang.String unfold(java.lang.String)
    {
        java.lang.String r0;
        int $i0, i1;
        char $c2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if $c2 == 13 goto label2;

        if $c2 != 10 goto label3;

     label2:
        r0 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: java.lang.String unfold0(java.lang.String,int)>(r0, i1);

        return r0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r0;
    }
    private static java.lang.String unfold0(java.lang.String, int)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1;
        java.lang.StringBuilder r1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        if $i0 <= 0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label1:
        $i0 = $i0 + 1;

     label2:
        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 == 13 goto label3;

        if $c2 == 10 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
