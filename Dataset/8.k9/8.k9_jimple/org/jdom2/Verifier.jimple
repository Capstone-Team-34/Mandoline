org.jdom2.Verifier extends java.lang.Object
private static final int CHARCNT
private static final byte[] CHARFLAGS
private static final int[] LENCONST
private static final byte MASKURICHAR
private static final byte MASKXMLCHARACTER
private static final byte MASKXMLCOMBINING
private static final byte MASKXMLDIGIT
private static final byte MASKXMLLETTER
private static final byte MASKXMLLETTERORDIGIT
private static final byte MASKXMLNAMECHAR
private static final byte MASKXMLSTARTCHAR
private static final byte[] VALCONST
    static void <clinit>()
    {
        byte[] $r0;
        int[] $r1;

        $r0 = newarray (byte)[622];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 0;

        $r0[3] = 1;

        $r0[4] = 0;

        $r0[5] = 1;

        $r0[6] = 65;

        $r0[7] = 1;

        $r0[8] = 65;

        $r0[9] = 73;

        $r0[10] = 65;

        $r0[11] = 89;

        $r0[12] = 65;

        $r0[13] = 1;

        $r0[14] = 65;

        $r0[15] = 1;

        $r0[16] = 65;

        $r0[17] = 79;

        $r0[18] = 1;

        $r0[19] = 77;

        $r0[20] = 1;

        $r0[21] = 79;

        $r0[22] = 1;

        $r0[23] = 65;

        $r0[24] = 1;

        $r0[25] = 9;

        $r0[26] = 1;

        $r0[27] = 15;

        $r0[28] = 1;

        $r0[29] = 15;

        $r0[30] = 1;

        $r0[31] = 15;

        $r0[32] = 1;

        $r0[33] = 15;

        $r0[34] = 1;

        $r0[35] = 15;

        $r0[36] = 1;

        $r0[37] = 15;

        $r0[38] = 1;

        $r0[39] = 15;

        $r0[40] = 1;

        $r0[41] = 15;

        $r0[42] = 1;

        $r0[43] = 15;

        $r0[44] = 1;

        $r0[45] = 15;

        $r0[46] = 1;

        $r0[47] = 15;

        $r0[48] = 1;

        $r0[49] = 15;

        $r0[50] = 1;

        $r0[51] = 9;

        $r0[52] = 1;

        $r0[53] = 41;

        $r0[54] = 1;

        $r0[55] = 41;

        $r0[56] = 1;

        $r0[57] = 15;

        $r0[58] = 9;

        $r0[59] = 15;

        $r0[60] = 1;

        $r0[61] = 15;

        $r0[62] = 1;

        $r0[63] = 15;

        $r0[64] = 1;

        $r0[65] = 15;

        $r0[66] = 1;

        $r0[67] = 15;

        $r0[68] = 1;

        $r0[69] = 15;

        $r0[70] = 1;

        $r0[71] = 15;

        $r0[72] = 1;

        $r0[73] = 15;

        $r0[74] = 1;

        $r0[75] = 15;

        $r0[76] = 1;

        $r0[77] = 15;

        $r0[78] = 1;

        $r0[79] = 15;

        $r0[80] = 1;

        $r0[81] = 15;

        $r0[82] = 1;

        $r0[83] = 15;

        $r0[84] = 1;

        $r0[85] = 15;

        $r0[86] = 1;

        $r0[87] = 41;

        $r0[88] = 1;

        $r0[89] = 15;

        $r0[90] = 1;

        $r0[91] = 15;

        $r0[92] = 1;

        $r0[93] = 15;

        $r0[94] = 1;

        $r0[95] = 15;

        $r0[96] = 1;

        $r0[97] = 15;

        $r0[98] = 1;

        $r0[99] = 15;

        $r0[100] = 1;

        $r0[101] = 15;

        $r0[102] = 1;

        $r0[103] = 15;

        $r0[104] = 1;

        $r0[105] = 15;

        $r0[106] = 1;

        $r0[107] = 41;

        $r0[108] = 1;

        $r0[109] = 41;

        $r0[110] = 1;

        $r0[111] = 41;

        $r0[112] = 1;

        $r0[113] = 41;

        $r0[114] = 1;

        $r0[115] = 41;

        $r0[116] = 1;

        $r0[117] = 41;

        $r0[118] = 1;

        $r0[119] = 15;

        $r0[120] = 1;

        $r0[121] = 15;

        $r0[122] = 1;

        $r0[123] = 15;

        $r0[124] = 1;

        $r0[125] = 9;

        $r0[126] = 15;

        $r0[127] = 41;

        $r0[128] = 1;

        $r0[129] = 25;

        $r0[130] = 1;

        $r0[131] = 41;

        $r0[132] = 15;

        $r0[133] = 1;

        $r0[134] = 15;

        $r0[135] = 1;

        $r0[136] = 15;

        $r0[137] = 1;

        $r0[138] = 15;

        $r0[139] = 1;

        $r0[140] = 15;

        $r0[141] = 41;

        $r0[142] = 15;

        $r0[143] = 41;

        $r0[144] = 1;

        $r0[145] = 41;

        $r0[146] = 1;

        $r0[147] = 25;

        $r0[148] = 1;

        $r0[149] = 41;

        $r0[150] = 1;

        $r0[151] = 15;

        $r0[152] = 1;

        $r0[153] = 41;

        $r0[154] = 15;

        $r0[155] = 41;

        $r0[156] = 1;

        $r0[157] = 41;

        $r0[158] = 1;

        $r0[159] = 15;

        $r0[160] = 41;

        $r0[161] = 1;

        $r0[162] = 25;

        $r0[163] = 1;

        $r0[164] = 41;

        $r0[165] = 1;

        $r0[166] = 15;

        $r0[167] = 1;

        $r0[168] = 15;

        $r0[169] = 1;

        $r0[170] = 15;

        $r0[171] = 1;

        $r0[172] = 15;

        $r0[173] = 1;

        $r0[174] = 15;

        $r0[175] = 1;

        $r0[176] = 15;

        $r0[177] = 1;

        $r0[178] = 41;

        $r0[179] = 1;

        $r0[180] = 41;

        $r0[181] = 1;

        $r0[182] = 41;

        $r0[183] = 1;

        $r0[184] = 41;

        $r0[185] = 1;

        $r0[186] = 41;

        $r0[187] = 1;

        $r0[188] = 15;

        $r0[189] = 1;

        $r0[190] = 15;

        $r0[191] = 41;

        $r0[192] = 1;

        $r0[193] = 25;

        $r0[194] = 15;

        $r0[195] = 1;

        $r0[196] = 41;

        $r0[197] = 1;

        $r0[198] = 15;

        $r0[199] = 1;

        $r0[200] = 15;

        $r0[201] = 1;

        $r0[202] = 15;

        $r0[203] = 1;

        $r0[204] = 15;

        $r0[205] = 1;

        $r0[206] = 15;

        $r0[207] = 1;

        $r0[208] = 15;

        $r0[209] = 1;

        $r0[210] = 15;

        $r0[211] = 1;

        $r0[212] = 41;

        $r0[213] = 1;

        $r0[214] = 41;

        $r0[215] = 1;

        $r0[216] = 41;

        $r0[217] = 1;

        $r0[218] = 41;

        $r0[219] = 1;

        $r0[220] = 15;

        $r0[221] = 1;

        $r0[222] = 15;

        $r0[223] = 1;

        $r0[224] = 25;

        $r0[225] = 41;

        $r0[226] = 15;

        $r0[227] = 1;

        $r0[228] = 41;

        $r0[229] = 1;

        $r0[230] = 15;

        $r0[231] = 1;

        $r0[232] = 15;

        $r0[233] = 1;

        $r0[234] = 15;

        $r0[235] = 1;

        $r0[236] = 15;

        $r0[237] = 1;

        $r0[238] = 15;

        $r0[239] = 1;

        $r0[240] = 15;

        $r0[241] = 1;

        $r0[242] = 15;

        $r0[243] = 1;

        $r0[244] = 41;

        $r0[245] = 15;

        $r0[246] = 41;

        $r0[247] = 1;

        $r0[248] = 41;

        $r0[249] = 1;

        $r0[250] = 41;

        $r0[251] = 1;

        $r0[252] = 15;

        $r0[253] = 1;

        $r0[254] = 25;

        $r0[255] = 1;

        $r0[256] = 41;

        $r0[257] = 1;

        $r0[258] = 15;

        $r0[259] = 1;

        $r0[260] = 15;

        $r0[261] = 1;

        $r0[262] = 15;

        $r0[263] = 1;

        $r0[264] = 15;

        $r0[265] = 1;

        $r0[266] = 15;

        $r0[267] = 1;

        $r0[268] = 15;

        $r0[269] = 1;

        $r0[270] = 41;

        $r0[271] = 15;

        $r0[272] = 41;

        $r0[273] = 1;

        $r0[274] = 41;

        $r0[275] = 1;

        $r0[276] = 41;

        $r0[277] = 1;

        $r0[278] = 41;

        $r0[279] = 1;

        $r0[280] = 15;

        $r0[281] = 1;

        $r0[282] = 15;

        $r0[283] = 1;

        $r0[284] = 25;

        $r0[285] = 1;

        $r0[286] = 41;

        $r0[287] = 1;

        $r0[288] = 15;

        $r0[289] = 1;

        $r0[290] = 15;

        $r0[291] = 1;

        $r0[292] = 15;

        $r0[293] = 1;

        $r0[294] = 15;

        $r0[295] = 1;

        $r0[296] = 15;

        $r0[297] = 1;

        $r0[298] = 15;

        $r0[299] = 1;

        $r0[300] = 15;

        $r0[301] = 1;

        $r0[302] = 15;

        $r0[303] = 1;

        $r0[304] = 15;

        $r0[305] = 1;

        $r0[306] = 15;

        $r0[307] = 1;

        $r0[308] = 41;

        $r0[309] = 1;

        $r0[310] = 41;

        $r0[311] = 1;

        $r0[312] = 41;

        $r0[313] = 1;

        $r0[314] = 41;

        $r0[315] = 1;

        $r0[316] = 25;

        $r0[317] = 1;

        $r0[318] = 41;

        $r0[319] = 1;

        $r0[320] = 15;

        $r0[321] = 1;

        $r0[322] = 15;

        $r0[323] = 1;

        $r0[324] = 15;

        $r0[325] = 1;

        $r0[326] = 15;

        $r0[327] = 1;

        $r0[328] = 15;

        $r0[329] = 1;

        $r0[330] = 41;

        $r0[331] = 1;

        $r0[332] = 41;

        $r0[333] = 1;

        $r0[334] = 41;

        $r0[335] = 1;

        $r0[336] = 41;

        $r0[337] = 1;

        $r0[338] = 15;

        $r0[339] = 1;

        $r0[340] = 25;

        $r0[341] = 1;

        $r0[342] = 41;

        $r0[343] = 1;

        $r0[344] = 15;

        $r0[345] = 1;

        $r0[346] = 15;

        $r0[347] = 1;

        $r0[348] = 15;

        $r0[349] = 1;

        $r0[350] = 15;

        $r0[351] = 1;

        $r0[352] = 15;

        $r0[353] = 1;

        $r0[354] = 41;

        $r0[355] = 1;

        $r0[356] = 41;

        $r0[357] = 1;

        $r0[358] = 41;

        $r0[359] = 1;

        $r0[360] = 41;

        $r0[361] = 1;

        $r0[362] = 15;

        $r0[363] = 1;

        $r0[364] = 15;

        $r0[365] = 1;

        $r0[366] = 25;

        $r0[367] = 1;

        $r0[368] = 41;

        $r0[369] = 1;

        $r0[370] = 15;

        $r0[371] = 1;

        $r0[372] = 15;

        $r0[373] = 1;

        $r0[374] = 15;

        $r0[375] = 1;

        $r0[376] = 15;

        $r0[377] = 1;

        $r0[378] = 41;

        $r0[379] = 1;

        $r0[380] = 41;

        $r0[381] = 1;

        $r0[382] = 41;

        $r0[383] = 1;

        $r0[384] = 41;

        $r0[385] = 1;

        $r0[386] = 15;

        $r0[387] = 1;

        $r0[388] = 25;

        $r0[389] = 1;

        $r0[390] = 15;

        $r0[391] = 1;

        $r0[392] = 15;

        $r0[393] = 41;

        $r0[394] = 15;

        $r0[395] = 41;

        $r0[396] = 1;

        $r0[397] = 15;

        $r0[398] = 9;

        $r0[399] = 41;

        $r0[400] = 1;

        $r0[401] = 25;

        $r0[402] = 1;

        $r0[403] = 15;

        $r0[404] = 1;

        $r0[405] = 15;

        $r0[406] = 1;

        $r0[407] = 15;

        $r0[408] = 1;

        $r0[409] = 15;

        $r0[410] = 1;

        $r0[411] = 15;

        $r0[412] = 1;

        $r0[413] = 15;

        $r0[414] = 1;

        $r0[415] = 15;

        $r0[416] = 1;

        $r0[417] = 15;

        $r0[418] = 1;

        $r0[419] = 15;

        $r0[420] = 1;

        $r0[421] = 15;

        $r0[422] = 1;

        $r0[423] = 15;

        $r0[424] = 1;

        $r0[425] = 15;

        $r0[426] = 1;

        $r0[427] = 15;

        $r0[428] = 41;

        $r0[429] = 15;

        $r0[430] = 41;

        $r0[431] = 1;

        $r0[432] = 41;

        $r0[433] = 15;

        $r0[434] = 1;

        $r0[435] = 15;

        $r0[436] = 1;

        $r0[437] = 9;

        $r0[438] = 1;

        $r0[439] = 41;

        $r0[440] = 1;

        $r0[441] = 25;

        $r0[442] = 1;

        $r0[443] = 41;

        $r0[444] = 1;

        $r0[445] = 25;

        $r0[446] = 1;

        $r0[447] = 41;

        $r0[448] = 1;

        $r0[449] = 41;

        $r0[450] = 1;

        $r0[451] = 41;

        $r0[452] = 1;

        $r0[453] = 41;

        $r0[454] = 15;

        $r0[455] = 1;

        $r0[456] = 15;

        $r0[457] = 1;

        $r0[458] = 41;

        $r0[459] = 1;

        $r0[460] = 41;

        $r0[461] = 1;

        $r0[462] = 41;

        $r0[463] = 1;

        $r0[464] = 41;

        $r0[465] = 1;

        $r0[466] = 41;

        $r0[467] = 1;

        $r0[468] = 41;

        $r0[469] = 1;

        $r0[470] = 41;

        $r0[471] = 1;

        $r0[472] = 15;

        $r0[473] = 1;

        $r0[474] = 15;

        $r0[475] = 1;

        $r0[476] = 15;

        $r0[477] = 1;

        $r0[478] = 15;

        $r0[479] = 1;

        $r0[480] = 15;

        $r0[481] = 1;

        $r0[482] = 15;

        $r0[483] = 1;

        $r0[484] = 15;

        $r0[485] = 1;

        $r0[486] = 15;

        $r0[487] = 1;

        $r0[488] = 15;

        $r0[489] = 1;

        $r0[490] = 15;

        $r0[491] = 1;

        $r0[492] = 15;

        $r0[493] = 1;

        $r0[494] = 15;

        $r0[495] = 1;

        $r0[496] = 15;

        $r0[497] = 1;

        $r0[498] = 15;

        $r0[499] = 1;

        $r0[500] = 15;

        $r0[501] = 1;

        $r0[502] = 15;

        $r0[503] = 1;

        $r0[504] = 15;

        $r0[505] = 1;

        $r0[506] = 15;

        $r0[507] = 1;

        $r0[508] = 15;

        $r0[509] = 1;

        $r0[510] = 15;

        $r0[511] = 1;

        $r0[512] = 15;

        $r0[513] = 1;

        $r0[514] = 15;

        $r0[515] = 1;

        $r0[516] = 15;

        $r0[517] = 1;

        $r0[518] = 15;

        $r0[519] = 1;

        $r0[520] = 15;

        $r0[521] = 1;

        $r0[522] = 15;

        $r0[523] = 1;

        $r0[524] = 15;

        $r0[525] = 1;

        $r0[526] = 15;

        $r0[527] = 1;

        $r0[528] = 15;

        $r0[529] = 1;

        $r0[530] = 15;

        $r0[531] = 1;

        $r0[532] = 15;

        $r0[533] = 1;

        $r0[534] = 15;

        $r0[535] = 1;

        $r0[536] = 15;

        $r0[537] = 1;

        $r0[538] = 15;

        $r0[539] = 1;

        $r0[540] = 15;

        $r0[541] = 1;

        $r0[542] = 15;

        $r0[543] = 1;

        $r0[544] = 15;

        $r0[545] = 1;

        $r0[546] = 15;

        $r0[547] = 1;

        $r0[548] = 15;

        $r0[549] = 1;

        $r0[550] = 15;

        $r0[551] = 1;

        $r0[552] = 15;

        $r0[553] = 1;

        $r0[554] = 15;

        $r0[555] = 1;

        $r0[556] = 15;

        $r0[557] = 1;

        $r0[558] = 15;

        $r0[559] = 1;

        $r0[560] = 15;

        $r0[561] = 1;

        $r0[562] = 15;

        $r0[563] = 1;

        $r0[564] = 15;

        $r0[565] = 1;

        $r0[566] = 15;

        $r0[567] = 1;

        $r0[568] = 15;

        $r0[569] = 1;

        $r0[570] = 15;

        $r0[571] = 1;

        $r0[572] = 15;

        $r0[573] = 1;

        $r0[574] = 15;

        $r0[575] = 1;

        $r0[576] = 15;

        $r0[577] = 1;

        $r0[578] = 15;

        $r0[579] = 1;

        $r0[580] = 15;

        $r0[581] = 1;

        $r0[582] = 41;

        $r0[583] = 1;

        $r0[584] = 41;

        $r0[585] = 1;

        $r0[586] = 15;

        $r0[587] = 1;

        $r0[588] = 15;

        $r0[589] = 1;

        $r0[590] = 15;

        $r0[591] = 1;

        $r0[592] = 15;

        $r0[593] = 1;

        $r0[594] = 9;

        $r0[595] = 1;

        $r0[596] = 15;

        $r0[597] = 1;

        $r0[598] = 15;

        $r0[599] = 41;

        $r0[600] = 1;

        $r0[601] = 9;

        $r0[602] = 1;

        $r0[603] = 15;

        $r0[604] = 1;

        $r0[605] = 41;

        $r0[606] = 1;

        $r0[607] = 9;

        $r0[608] = 1;

        $r0[609] = 15;

        $r0[610] = 1;

        $r0[611] = 9;

        $r0[612] = 1;

        $r0[613] = 15;

        $r0[614] = 1;

        $r0[615] = 15;

        $r0[616] = 1;

        $r0[617] = 15;

        $r0[618] = 1;

        $r0[619] = 0;

        $r0[620] = 1;

        $r0[621] = 0;

        <org.jdom2.Verifier: byte[] VALCONST> = $r0;

        $r1 = newarray (int)[622];

        $r1[0] = 9;

        $r1[1] = 2;

        $r1[2] = 2;

        $r1[3] = 1;

        $r1[4] = 18;

        $r1[5] = 1;

        $r1[6] = 1;

        $r1[7] = 2;

        $r1[8] = 9;

        $r1[9] = 2;

        $r1[10] = 1;

        $r1[11] = 10;

        $r1[12] = 1;

        $r1[13] = 2;

        $r1[14] = 1;

        $r1[15] = 1;

        $r1[16] = 2;

        $r1[17] = 26;

        $r1[18] = 4;

        $r1[19] = 1;

        $r1[20] = 1;

        $r1[21] = 26;

        $r1[22] = 3;

        $r1[23] = 1;

        $r1[24] = 56;

        $r1[25] = 1;

        $r1[26] = 8;

        $r1[27] = 23;

        $r1[28] = 1;

        $r1[29] = 31;

        $r1[30] = 1;

        $r1[31] = 58;

        $r1[32] = 2;

        $r1[33] = 11;

        $r1[34] = 2;

        $r1[35] = 8;

        $r1[36] = 1;

        $r1[37] = 53;

        $r1[38] = 1;

        $r1[39] = 68;

        $r1[40] = 9;

        $r1[41] = 36;

        $r1[42] = 3;

        $r1[43] = 2;

        $r1[44] = 4;

        $r1[45] = 30;

        $r1[46] = 56;

        $r1[47] = 89;

        $r1[48] = 18;

        $r1[49] = 7;

        $r1[50] = 14;

        $r1[51] = 2;

        $r1[52] = 46;

        $r1[53] = 70;

        $r1[54] = 26;

        $r1[55] = 2;

        $r1[56] = 36;

        $r1[57] = 1;

        $r1[58] = 1;

        $r1[59] = 3;

        $r1[60] = 1;

        $r1[61] = 1;

        $r1[62] = 1;

        $r1[63] = 20;

        $r1[64] = 1;

        $r1[65] = 44;

        $r1[66] = 1;

        $r1[67] = 7;

        $r1[68] = 3;

        $r1[69] = 1;

        $r1[70] = 1;

        $r1[71] = 1;

        $r1[72] = 1;

        $r1[73] = 1;

        $r1[74] = 1;

        $r1[75] = 1;

        $r1[76] = 1;

        $r1[77] = 18;

        $r1[78] = 13;

        $r1[79] = 12;

        $r1[80] = 1;

        $r1[81] = 66;

        $r1[82] = 1;

        $r1[83] = 12;

        $r1[84] = 1;

        $r1[85] = 36;

        $r1[86] = 1;

        $r1[87] = 4;

        $r1[88] = 9;

        $r1[89] = 53;

        $r1[90] = 2;

        $r1[91] = 2;

        $r1[92] = 2;

        $r1[93] = 2;

        $r1[94] = 3;

        $r1[95] = 28;

        $r1[96] = 2;

        $r1[97] = 8;

        $r1[98] = 2;

        $r1[99] = 2;

        $r1[100] = 55;

        $r1[101] = 38;

        $r1[102] = 2;

        $r1[103] = 1;

        $r1[104] = 7;

        $r1[105] = 38;

        $r1[106] = 10;

        $r1[107] = 17;

        $r1[108] = 1;

        $r1[109] = 23;

        $r1[110] = 1;

        $r1[111] = 3;

        $r1[112] = 1;

        $r1[113] = 1;

        $r1[114] = 1;

        $r1[115] = 2;

        $r1[116] = 1;

        $r1[117] = 1;

        $r1[118] = 11;

        $r1[119] = 27;

        $r1[120] = 5;

        $r1[121] = 3;

        $r1[122] = 46;

        $r1[123] = 26;

        $r1[124] = 5;

        $r1[125] = 1;

        $r1[126] = 10;

        $r1[127] = 8;

        $r1[128] = 13;

        $r1[129] = 10;

        $r1[130] = 6;

        $r1[131] = 1;

        $r1[132] = 71;

        $r1[133] = 2;

        $r1[134] = 5;

        $r1[135] = 1;

        $r1[136] = 15;

        $r1[137] = 1;

        $r1[138] = 4;

        $r1[139] = 1;

        $r1[140] = 1;

        $r1[141] = 15;

        $r1[142] = 2;

        $r1[143] = 2;

        $r1[144] = 1;

        $r1[145] = 4;

        $r1[146] = 2;

        $r1[147] = 10;

        $r1[148] = 519;

        $r1[149] = 3;

        $r1[150] = 1;

        $r1[151] = 53;

        $r1[152] = 2;

        $r1[153] = 1;

        $r1[154] = 1;

        $r1[155] = 16;

        $r1[156] = 3;

        $r1[157] = 4;

        $r1[158] = 3;

        $r1[159] = 10;

        $r1[160] = 2;

        $r1[161] = 2;

        $r1[162] = 10;

        $r1[163] = 17;

        $r1[164] = 3;

        $r1[165] = 1;

        $r1[166] = 8;

        $r1[167] = 2;

        $r1[168] = 2;

        $r1[169] = 2;

        $r1[170] = 22;

        $r1[171] = 1;

        $r1[172] = 7;

        $r1[173] = 1;

        $r1[174] = 1;

        $r1[175] = 3;

        $r1[176] = 4;

        $r1[177] = 2;

        $r1[178] = 1;

        $r1[179] = 1;

        $r1[180] = 7;

        $r1[181] = 2;

        $r1[182] = 2;

        $r1[183] = 2;

        $r1[184] = 3;

        $r1[185] = 9;

        $r1[186] = 1;

        $r1[187] = 4;

        $r1[188] = 2;

        $r1[189] = 1;

        $r1[190] = 3;

        $r1[191] = 2;

        $r1[192] = 2;

        $r1[193] = 10;

        $r1[194] = 2;

        $r1[195] = 16;

        $r1[196] = 1;

        $r1[197] = 2;

        $r1[198] = 6;

        $r1[199] = 4;

        $r1[200] = 2;

        $r1[201] = 2;

        $r1[202] = 22;

        $r1[203] = 1;

        $r1[204] = 7;

        $r1[205] = 1;

        $r1[206] = 2;

        $r1[207] = 1;

        $r1[208] = 2;

        $r1[209] = 1;

        $r1[210] = 2;

        $r1[211] = 2;

        $r1[212] = 1;

        $r1[213] = 1;

        $r1[214] = 5;

        $r1[215] = 4;

        $r1[216] = 2;

        $r1[217] = 2;

        $r1[218] = 3;

        $r1[219] = 11;

        $r1[220] = 4;

        $r1[221] = 1;

        $r1[222] = 1;

        $r1[223] = 7;

        $r1[224] = 10;

        $r1[225] = 2;

        $r1[226] = 3;

        $r1[227] = 12;

        $r1[228] = 3;

        $r1[229] = 1;

        $r1[230] = 7;

        $r1[231] = 1;

        $r1[232] = 1;

        $r1[233] = 1;

        $r1[234] = 3;

        $r1[235] = 1;

        $r1[236] = 22;

        $r1[237] = 1;

        $r1[238] = 7;

        $r1[239] = 1;

        $r1[240] = 2;

        $r1[241] = 1;

        $r1[242] = 5;

        $r1[243] = 2;

        $r1[244] = 1;

        $r1[245] = 1;

        $r1[246] = 8;

        $r1[247] = 1;

        $r1[248] = 3;

        $r1[249] = 1;

        $r1[250] = 3;

        $r1[251] = 18;

        $r1[252] = 1;

        $r1[253] = 5;

        $r1[254] = 10;

        $r1[255] = 17;

        $r1[256] = 3;

        $r1[257] = 1;

        $r1[258] = 8;

        $r1[259] = 2;

        $r1[260] = 2;

        $r1[261] = 2;

        $r1[262] = 22;

        $r1[263] = 1;

        $r1[264] = 7;

        $r1[265] = 1;

        $r1[266] = 2;

        $r1[267] = 2;

        $r1[268] = 4;

        $r1[269] = 2;

        $r1[270] = 1;

        $r1[271] = 1;

        $r1[272] = 6;

        $r1[273] = 3;

        $r1[274] = 2;

        $r1[275] = 2;

        $r1[276] = 3;

        $r1[277] = 8;

        $r1[278] = 2;

        $r1[279] = 4;

        $r1[280] = 2;

        $r1[281] = 1;

        $r1[282] = 3;

        $r1[283] = 4;

        $r1[284] = 10;

        $r1[285] = 18;

        $r1[286] = 2;

        $r1[287] = 1;

        $r1[288] = 6;

        $r1[289] = 3;

        $r1[290] = 3;

        $r1[291] = 1;

        $r1[292] = 4;

        $r1[293] = 3;

        $r1[294] = 2;

        $r1[295] = 1;

        $r1[296] = 1;

        $r1[297] = 1;

        $r1[298] = 2;

        $r1[299] = 3;

        $r1[300] = 2;

        $r1[301] = 3;

        $r1[302] = 3;

        $r1[303] = 3;

        $r1[304] = 8;

        $r1[305] = 1;

        $r1[306] = 3;

        $r1[307] = 4;

        $r1[308] = 5;

        $r1[309] = 3;

        $r1[310] = 3;

        $r1[311] = 1;

        $r1[312] = 4;

        $r1[313] = 9;

        $r1[314] = 1;

        $r1[315] = 15;

        $r1[316] = 9;

        $r1[317] = 17;

        $r1[318] = 3;

        $r1[319] = 1;

        $r1[320] = 8;

        $r1[321] = 1;

        $r1[322] = 3;

        $r1[323] = 1;

        $r1[324] = 23;

        $r1[325] = 1;

        $r1[326] = 10;

        $r1[327] = 1;

        $r1[328] = 5;

        $r1[329] = 4;

        $r1[330] = 7;

        $r1[331] = 1;

        $r1[332] = 3;

        $r1[333] = 1;

        $r1[334] = 4;

        $r1[335] = 7;

        $r1[336] = 2;

        $r1[337] = 9;

        $r1[338] = 2;

        $r1[339] = 4;

        $r1[340] = 10;

        $r1[341] = 18;

        $r1[342] = 2;

        $r1[343] = 1;

        $r1[344] = 8;

        $r1[345] = 1;

        $r1[346] = 3;

        $r1[347] = 1;

        $r1[348] = 23;

        $r1[349] = 1;

        $r1[350] = 10;

        $r1[351] = 1;

        $r1[352] = 5;

        $r1[353] = 4;

        $r1[354] = 7;

        $r1[355] = 1;

        $r1[356] = 3;

        $r1[357] = 1;

        $r1[358] = 4;

        $r1[359] = 7;

        $r1[360] = 2;

        $r1[361] = 7;

        $r1[362] = 1;

        $r1[363] = 1;

        $r1[364] = 2;

        $r1[365] = 4;

        $r1[366] = 10;

        $r1[367] = 18;

        $r1[368] = 2;

        $r1[369] = 1;

        $r1[370] = 8;

        $r1[371] = 1;

        $r1[372] = 3;

        $r1[373] = 1;

        $r1[374] = 23;

        $r1[375] = 1;

        $r1[376] = 16;

        $r1[377] = 4;

        $r1[378] = 6;

        $r1[379] = 2;

        $r1[380] = 3;

        $r1[381] = 1;

        $r1[382] = 4;

        $r1[383] = 9;

        $r1[384] = 1;

        $r1[385] = 8;

        $r1[386] = 2;

        $r1[387] = 4;

        $r1[388] = 10;

        $r1[389] = 145;

        $r1[390] = 46;

        $r1[391] = 1;

        $r1[392] = 1;

        $r1[393] = 1;

        $r1[394] = 2;

        $r1[395] = 7;

        $r1[396] = 5;

        $r1[397] = 6;

        $r1[398] = 1;

        $r1[399] = 8;

        $r1[400] = 1;

        $r1[401] = 10;

        $r1[402] = 39;

        $r1[403] = 2;

        $r1[404] = 1;

        $r1[405] = 1;

        $r1[406] = 2;

        $r1[407] = 2;

        $r1[408] = 1;

        $r1[409] = 1;

        $r1[410] = 2;

        $r1[411] = 1;

        $r1[412] = 6;

        $r1[413] = 4;

        $r1[414] = 1;

        $r1[415] = 7;

        $r1[416] = 1;

        $r1[417] = 3;

        $r1[418] = 1;

        $r1[419] = 1;

        $r1[420] = 1;

        $r1[421] = 1;

        $r1[422] = 2;

        $r1[423] = 2;

        $r1[424] = 1;

        $r1[425] = 2;

        $r1[426] = 1;

        $r1[427] = 1;

        $r1[428] = 1;

        $r1[429] = 2;

        $r1[430] = 6;

        $r1[431] = 1;

        $r1[432] = 2;

        $r1[433] = 1;

        $r1[434] = 2;

        $r1[435] = 5;

        $r1[436] = 1;

        $r1[437] = 1;

        $r1[438] = 1;

        $r1[439] = 6;

        $r1[440] = 2;

        $r1[441] = 10;

        $r1[442] = 62;

        $r1[443] = 2;

        $r1[444] = 6;

        $r1[445] = 10;

        $r1[446] = 11;

        $r1[447] = 1;

        $r1[448] = 1;

        $r1[449] = 1;

        $r1[450] = 1;

        $r1[451] = 1;

        $r1[452] = 4;

        $r1[453] = 2;

        $r1[454] = 8;

        $r1[455] = 1;

        $r1[456] = 33;

        $r1[457] = 7;

        $r1[458] = 20;

        $r1[459] = 1;

        $r1[460] = 6;

        $r1[461] = 4;

        $r1[462] = 6;

        $r1[463] = 1;

        $r1[464] = 1;

        $r1[465] = 1;

        $r1[466] = 21;

        $r1[467] = 3;

        $r1[468] = 7;

        $r1[469] = 1;

        $r1[470] = 1;

        $r1[471] = 230;

        $r1[472] = 38;

        $r1[473] = 10;

        $r1[474] = 39;

        $r1[475] = 9;

        $r1[476] = 1;

        $r1[477] = 1;

        $r1[478] = 2;

        $r1[479] = 1;

        $r1[480] = 3;

        $r1[481] = 1;

        $r1[482] = 1;

        $r1[483] = 1;

        $r1[484] = 2;

        $r1[485] = 1;

        $r1[486] = 5;

        $r1[487] = 41;

        $r1[488] = 1;

        $r1[489] = 1;

        $r1[490] = 1;

        $r1[491] = 1;

        $r1[492] = 1;

        $r1[493] = 11;

        $r1[494] = 1;

        $r1[495] = 1;

        $r1[496] = 1;

        $r1[497] = 1;

        $r1[498] = 1;

        $r1[499] = 3;

        $r1[500] = 2;

        $r1[501] = 3;

        $r1[502] = 1;

        $r1[503] = 5;

        $r1[504] = 3;

        $r1[505] = 1;

        $r1[506] = 1;

        $r1[507] = 1;

        $r1[508] = 1;

        $r1[509] = 1;

        $r1[510] = 1;

        $r1[511] = 1;

        $r1[512] = 1;

        $r1[513] = 3;

        $r1[514] = 2;

        $r1[515] = 3;

        $r1[516] = 2;

        $r1[517] = 1;

        $r1[518] = 1;

        $r1[519] = 40;

        $r1[520] = 1;

        $r1[521] = 9;

        $r1[522] = 1;

        $r1[523] = 2;

        $r1[524] = 1;

        $r1[525] = 2;

        $r1[526] = 2;

        $r1[527] = 7;

        $r1[528] = 2;

        $r1[529] = 1;

        $r1[530] = 1;

        $r1[531] = 1;

        $r1[532] = 7;

        $r1[533] = 40;

        $r1[534] = 1;

        $r1[535] = 4;

        $r1[536] = 1;

        $r1[537] = 8;

        $r1[538] = 1;

        $r1[539] = 3078;

        $r1[540] = 156;

        $r1[541] = 4;

        $r1[542] = 90;

        $r1[543] = 6;

        $r1[544] = 22;

        $r1[545] = 2;

        $r1[546] = 6;

        $r1[547] = 2;

        $r1[548] = 38;

        $r1[549] = 2;

        $r1[550] = 6;

        $r1[551] = 2;

        $r1[552] = 8;

        $r1[553] = 1;

        $r1[554] = 1;

        $r1[555] = 1;

        $r1[556] = 1;

        $r1[557] = 1;

        $r1[558] = 1;

        $r1[559] = 1;

        $r1[560] = 31;

        $r1[561] = 2;

        $r1[562] = 53;

        $r1[563] = 1;

        $r1[564] = 7;

        $r1[565] = 1;

        $r1[566] = 1;

        $r1[567] = 3;

        $r1[568] = 3;

        $r1[569] = 1;

        $r1[570] = 7;

        $r1[571] = 3;

        $r1[572] = 4;

        $r1[573] = 2;

        $r1[574] = 6;

        $r1[575] = 4;

        $r1[576] = 13;

        $r1[577] = 5;

        $r1[578] = 3;

        $r1[579] = 1;

        $r1[580] = 7;

        $r1[581] = 211;

        $r1[582] = 13;

        $r1[583] = 4;

        $r1[584] = 1;

        $r1[585] = 68;

        $r1[586] = 1;

        $r1[587] = 3;

        $r1[588] = 2;

        $r1[589] = 2;

        $r1[590] = 1;

        $r1[591] = 81;

        $r1[592] = 3;

        $r1[593] = 3714;

        $r1[594] = 1;

        $r1[595] = 1;

        $r1[596] = 1;

        $r1[597] = 25;

        $r1[598] = 9;

        $r1[599] = 6;

        $r1[600] = 1;

        $r1[601] = 5;

        $r1[602] = 11;

        $r1[603] = 84;

        $r1[604] = 4;

        $r1[605] = 2;

        $r1[606] = 2;

        $r1[607] = 2;

        $r1[608] = 2;

        $r1[609] = 90;

        $r1[610] = 1;

        $r1[611] = 3;

        $r1[612] = 6;

        $r1[613] = 40;

        $r1[614] = 7379;

        $r1[615] = 20902;

        $r1[616] = 3162;

        $r1[617] = 11172;

        $r1[618] = 92;

        $r1[619] = 2048;

        $r1[620] = 8190;

        $r1[621] = 2;

        <org.jdom2.Verifier: int[] LENCONST> = $r1;

        $r0 = staticinvoke <org.jdom2.Verifier: byte[] buildBitFlags()>();

        <org.jdom2.Verifier: byte[] CHARFLAGS> = $r0;

        return;
    }
    private void <init>()
    {
        org.jdom2.Verifier r0;

        r0 := @this: org.jdom2.Verifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static final byte[] buildBitFlags()
    {
        byte[] r0, $r1;
        byte b0;
        int i1, i2, $i3;
        int[] $r2;

        r0 = newarray (byte)[65536];

        i1 = 0;

        i2 = 0;

     label1:
        $r1 = <org.jdom2.Verifier: byte[] VALCONST>;

        $i3 = lengthof $r1;

        if i2 >= $i3 goto label4;

        $r1 = <org.jdom2.Verifier: byte[] VALCONST>;

        b0 = $r1[i2];

        $r2 = <org.jdom2.Verifier: int[] LENCONST>;

        $i3 = $r2[i2];

     label2:
        $i3 = $i3 + -1;

        if $i3 < 0 goto label3;

        r0[i1] = b0;

        i1 = i1 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r0;
    }
    public static java.lang.String checkAttributeName(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = "xmlns";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        return "An Attribute name may not be \"xmlns\"; use the Namespace class to manage namespaces";

     label1:
        $r0 = staticinvoke <org.jdom2.Verifier: java.lang.String checkJDOMName(java.lang.String)>($r0);

        return $r0;
    }
    public static java.lang.String checkCDATASection(java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom2.Verifier: java.lang.String checkCharacterData(java.lang.String)>($r0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("]]>");

        if $i0 == -1 goto label2;

        return "CDATA cannot internally contain a CDATA ending delimiter (]]>)";

     label2:
        return null;
    }
    public static java.lang.String checkCharacterData(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i1, $i4;
        byte[] $r1;
        char $c2, $c5;
        byte $b3;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return "A null is not a legal XML value";

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label9;

     label3:
        $r1 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $b3 = $r1[$c2];

        if $b3 == 0 goto label4;

        i1 = i1 + 1;

        if i1 != $i0 goto label3;

        return null;

     label4:
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isHighSurrogate(char)>($c2);

        if $z0 == 0 goto label7;

        i1 = i1 + 1;

        if i1 < $i0 goto label5;

        $r2 = newarray (java.lang.Object)[1];

        i1 = i1 + -1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r2[0] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Truncated Surrogate Pair 0x%04x????", $r2);

        return $r0;

     label5:
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isLowSurrogate(char)>($c2);

        if $z0 == 0 goto label6;

        $i4 = i1 + -1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i4);

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $i4 = staticinvoke <org.jdom2.Verifier: int decodeSurrogatePair(char,char)>($c2, $c5);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLCharacter(int)>($i4);

        if $z0 != 0 goto label8;

        $r2 = newarray (java.lang.Object)[1];

        $i0 = i1 + -1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        i1 = staticinvoke <org.jdom2.Verifier: int decodeSurrogatePair(char,char)>($c2, $c5);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0x%06x is not a legal XML character", $r2);

        return $r0;

     label6:
        $r2 = newarray (java.lang.Object)[2];

        $i0 = i1 + -1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r2[0] = $r3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r2[1] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Illegal Surrogate Pair 0x%04x%04x", $r2);

        return $r0;

     label7:
        $r2 = newarray (java.lang.Object)[1];

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r2[0] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0x%04x is not a legal XML character", $r2);

        return $r0;

     label8:
        i1 = i1 + 1;

        goto label2;

     label9:
        return null;
    }
    public static java.lang.String checkCommentData(java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom2.Verifier: java.lang.String checkCharacterData(java.lang.String)>($r0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("--");

        if $i0 == -1 goto label2;

        return "Comments cannot contain double hyphens (--)";

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("-");

        if $z0 == 0 goto label3;

        return "Comment data cannot end with a hyphen.";

     label3:
        return null;
    }
    public static java.lang.String checkElementName(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.jdom2.Verifier: java.lang.String checkJDOMName(java.lang.String)>($r0);

        return $r0;
    }
    private static final java.lang.String checkJDOMName(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i3;
        byte[] $r1;
        char $c1;
        byte $b2;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return "XML names cannot be null";

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return "XML names cannot be empty";

     label2:
        $r1 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $b2 = $r1[$c1];

        $i0 = $b2 & 4;

        if $i0 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XML name \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot begin with the character \"");

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label3:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

     label4:
        if $i0 < 1 goto label6;

        $r1 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $b2 = $r1[$c1];

        $i3 = $b2 & 8;

        $b2 = (byte) $i3;

        if $b2 != 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XML name \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot contain the character \"");

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label5:
        $i0 = $i0 + -1;

        goto label4;

     label6:
        return null;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Attribute, org.jdom2.Element)
    {
        org.jdom2.Attribute $r0;
        org.jdom2.Element $r1;
        java.lang.String $r2;

        $r0 := @parameter0: org.jdom2.Attribute;

        $r1 := @parameter1: org.jdom2.Element;

        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element,int)>($r0, $r1, -1);

        return $r2;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Attribute, org.jdom2.Element, int)
    {
        org.jdom2.Attribute $r0;
        org.jdom2.Element $r1;
        int $i0;
        org.jdom2.Namespace $r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        $r0 := @parameter0: org.jdom2.Attribute;

        $r1 := @parameter1: org.jdom2.Element;

        $i0 := @parameter2: int;

        $r2 = virtualinvoke $r0.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r3 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element,int)>($r2, $r1, $i0);

        return $r3;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Namespace, java.util.List)
    {
        org.jdom2.Namespace $r0;
        java.util.List r1;
        java.lang.String $r2;

        $r0 := @parameter0: org.jdom2.Namespace;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List,int)>($r0, r1, -1);

        return $r2;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Namespace, java.util.List, int)
    {
        org.jdom2.Namespace $r0, r7;
        java.util.List r1;
        int $i0, i1;
        java.lang.String r2, $r8;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.jdom2.Attribute r5;
        org.jdom2.Element r6;
        java.lang.StringBuilder $r9;

        $r0 := @parameter0: org.jdom2.Namespace;

        r1 := @parameter1: java.util.List;

        $i0 := @parameter2: int;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = null;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        i1 = -1;

     label2:
        if r2 != null goto label5;

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i1 = i1 + 1;

        $z0 = $r4 instanceof org.jdom2.Attribute;

        if $z0 == 0 goto label3;

        if i1 == $i0 goto label2;

        r5 = (org.jdom2.Attribute) $r4;

        r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Attribute)>($r0, r5);

        goto label2;

     label3:
        $z0 = $r4 instanceof org.jdom2.Element;

        if $z0 == 0 goto label4;

        r6 = (org.jdom2.Element) $r4;

        r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element)>($r0, r6);

        goto label2;

     label4:
        $z0 = $r4 instanceof org.jdom2.Namespace;

        if $z0 == 0 goto label2;

        r7 = (org.jdom2.Namespace) $r4;

        $r8 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Namespace)>($r0, r7);

        r2 = $r8;

        if $r8 == null goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with an additional namespace declared by the element");

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label5:
        return r2;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Namespace, org.jdom2.Attribute)
    {
        org.jdom2.Namespace $r0, $r2, $r3;
        org.jdom2.Attribute $r1;
        boolean $z0;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: org.jdom2.Namespace;

        $r1 := @parameter1: org.jdom2.Attribute;

        $r2 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke $r2.<org.jdom2.Namespace: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r4 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Namespace)>($r0, $r2);

        if $r4 == null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with an attribute namespace prefix on the element");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return null;

     label2:
        return $r4;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Namespace, org.jdom2.Element)
    {
        org.jdom2.Namespace $r0;
        org.jdom2.Element $r1;
        java.lang.String $r2;

        $r0 := @parameter0: org.jdom2.Namespace;

        $r1 := @parameter1: org.jdom2.Element;

        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element,int)>($r0, $r1, -1);

        return $r2;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Namespace, org.jdom2.Element, int)
    {
        org.jdom2.Namespace $r0, $r2;
        org.jdom2.Element $r1;
        int $i0;
        java.lang.String $r3;
        java.lang.StringBuilder $r4;
        boolean $z0;
        java.util.List $r5;

        $r0 := @parameter0: org.jdom2.Namespace;

        $r1 := @parameter1: org.jdom2.Element;

        $i0 := @parameter2: int;

        $r2 = virtualinvoke $r1.<org.jdom2.Element: org.jdom2.Namespace getNamespace()>();

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Namespace)>($r0, $r2);

        if $r3 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with the element namespace prefix");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        $z0 = virtualinvoke $r1.<org.jdom2.Element: boolean hasAdditionalNamespaces()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getAdditionalNamespaces()>();

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List)>($r0, $r5);

        if $r3 == null goto label2;

        return $r3;

     label2:
        $z0 = virtualinvoke $r1.<org.jdom2.Element: boolean hasAttributes()>();

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getAttributes()>();

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List,int)>($r0, $r5, $i0);

        if $r3 == null goto label3;

        return $r3;

     label3:
        return null;
    }
    public static java.lang.String checkNamespaceCollision(org.jdom2.Namespace, org.jdom2.Namespace)
    {
        org.jdom2.Namespace $r0, $r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: org.jdom2.Namespace;

        $r1 := @parameter1: org.jdom2.Namespace;

        $r2 = virtualinvoke $r0.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r3 = virtualinvoke $r0.<org.jdom2.Namespace: java.lang.String getURI()>();

        $r4 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r5 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The namespace prefix \"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" collides");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label1:
        return null;
    }
    public static java.lang.String checkNamespacePrefix(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        int $i0;
        char $c1;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label6;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.jdom2.Verifier: java.lang.String checkJDOMName(java.lang.String)>($r0);

        if $r1 == null goto label2;

        $r0 = staticinvoke <org.jdom2.Verifier: java.lang.String checkJDOMName(java.lang.String)>($r0);

        return $r0;

     label2:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 < 3 goto label6;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c1 == 120 goto label3;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c1 != 88 goto label6;

     label3:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        if $c1 == 109 goto label4;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        if $c1 != 77 goto label6;

     label4:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2);

        if $c1 == 108 goto label5;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2);

        if $c1 != 76 goto label6;

     label5:
        return "Namespace prefixes cannot begin with \"xml\" in any combination of case";

     label6:
        return null;
    }
    public static java.lang.String checkNamespaceURI(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        char $c0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label5;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        return null;

     label1:
        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        if $z0 == 0 goto label2;

        return "Namespace URIs cannot begin with a number";

     label2:
        if $c0 != 36 goto label3;

        return "Namespace URIs cannot begin with a dollar sign ($)";

     label3:
        if $c0 != 45 goto label4;

        return "Namespace URIs cannot begin with a hyphen (-)";

     label4:
        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c0);

        if $z0 == 0 goto label5;

        return "Namespace URIs cannot begin with white-space";

     label5:
        return null;
    }
    public static java.lang.String checkProcessingInstructionData(java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom2.Verifier: java.lang.String checkCharacterData(java.lang.String)>($r0);

        if $r1 != null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("?>");

        if $i0 < 0 goto label1;

        return "Processing instructions cannot contain the string \"?>\"";

     label1:
        return $r1;
    }
    public static java.lang.String checkProcessingInstructionTarget(java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom2.Verifier: java.lang.String checkXMLName(java.lang.String)>($r0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 == -1 goto label2;

        return "Processing instruction targets cannot contain colons";

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("xml");

        if $z0 == 0 goto label3;

        return "Processing instructions cannot have a target of \"xml\" in any combination of case. (Note that the \"<?xml ... ?>\" declaration at the beginning of a document is not a processing instruction and should not be added as one; it is written automatically during output, e.g. by XMLOutputter.)";

     label3:
        return null;
    }
    public static java.lang.String checkPublicID(java.lang.String)
    {
        java.lang.String $r0, r1;
        int i0, $i1;
        char $c2;
        boolean $z0;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        r1 = null;

        if $r0 != null goto label1;

        return null;

     label1:
        i0 = 0;

     label2:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLPublicIDCharacter(char)>($c2);

        if $z0 != 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a legal character in public IDs");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r1;

     label4:
        i0 = i0 + 1;

        goto label2;
    }
    public static java.lang.String checkSystemLiteral(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(39);

        if $i0 == -1 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(34);

        if $i0 == -1 goto label3;

        $r0 = "System literals cannot simultaneously contain both single and double quotes.";

     label2:
        return $r0;

     label3:
        $r0 = staticinvoke <org.jdom2.Verifier: java.lang.String checkCharacterData(java.lang.String)>($r0);

        goto label2;
    }
    public static java.lang.String checkURI(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringIndexOutOfBoundsException r1;
        boolean $z0;
        int i0, $i1;
        char $c2, $c3;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label14;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label01;

        return null;

     label01:
        i0 = 0;

     label02:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 >= $i1 goto label14;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isURICharacter(char)>($c2);

        if $z0 != 0 goto label04;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        if $c2 > 9 goto label03;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x0");

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URIs cannot contain ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label04:
        if $c2 != 37 goto label13;

        $i1 = i0 + 1;

     label05:
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

     label06:
        $i1 = i0 + 2;

     label07:
        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isHexDigit(char)>($c2);

     label08:
        if $z0 == 0 goto label11;

     label09:
        $z0 = staticinvoke <org.jdom2.Verifier: boolean isHexDigit(char)>($c3);

     label10:
        if $z0 != 0 goto label13;

     label11:
        return "Percent signs in URIs must be followed by exactly two hexadecimal digits.";

     label12:
        r1 := @caughtexception;

        return "Percent signs in URIs must be followed by exactly two hexadecimal digits.";

     label13:
        i0 = i0 + 1;

        goto label02;

     label14:
        return null;

        catch java.lang.StringIndexOutOfBoundsException from label05 to label06 with label12;
        catch java.lang.StringIndexOutOfBoundsException from label07 to label08 with label12;
        catch java.lang.StringIndexOutOfBoundsException from label09 to label10 with label12;
    }
    public static java.lang.String checkXMLName(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i2;
        char $c1;
        boolean $z0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return "XML names cannot be null";

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return "XML names cannot be empty";

     label2:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLNameStartCharacter(char)>($c1);

        if $z0 != 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XML names cannot begin with the character \"");

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label3:
        i2 = 1;

     label4:
        if i2 >= $i0 goto label6;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLNameCharacter(char)>($c1);

        if $z0 != 0 goto label5;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XML names cannot contain the character \"");

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        return null;
    }
    public static int decodeSurrogatePair(char, char)
    {
        char $c0, $c1;
        int $i2, $i3;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $i2 = $c0 - 55296;

        $i2 = $i2 * 1024;

        $i2 = 65536 + $i2;

        $i3 = $c1 - 56320;

        $i2 = $i2 + $i3;

        return $i2;
    }
    public static final boolean isAllXMLWhitespace(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        char $c1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c1);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
    public static boolean isHexDigit(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 < 48 goto label1;

        if $c0 > 57 goto label1;

        return 1;

     label1:
        if $c0 < 65 goto label2;

        if $c0 <= 70 goto label4;

     label2:
        if $c0 < 97 goto label3;

        if $c0 <= 102 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public static boolean isHighSurrogate(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        $i1 = $c0 >>> 10;

        if 54 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isLowSurrogate(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        $i1 = $c0 >>> 10;

        if 55 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isURICharacter(char)
    {
        char $c0;
        byte[] $r0;
        byte $b1;
        int $i2;

        $c0 := @parameter0: char;

        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$c0];

        $i2 = $b1 & 64;

        $b1 = (byte) $i2;

        if $b1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isXMLCharacter(int)
    {
        int $i0;
        byte[] $r0;
        byte $b1;

        $i0 := @parameter0: int;

        if $i0 < 65536 goto label2;

        if $i0 > 1114111 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$i0];

        $i0 = $b1 & 1;

        $b1 = (byte) $i0;

        if $b1 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }
    public static boolean isXMLCombiningChar(char)
    {
        char $c0;
        byte[] $r0;
        byte $b1;
        int $i2;

        $c0 := @parameter0: char;

        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$c0];

        $i2 = $b1 & 32;

        $b1 = (byte) $i2;

        if $b1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isXMLDigit(char)
    {
        char $c0;
        byte[] $r0;
        byte $b1;
        int $i2;

        $c0 := @parameter0: char;

        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$c0];

        $i2 = $b1 & 16;

        $b1 = (byte) $i2;

        if $b1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isXMLExtender(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 >= 182 goto label01;

        return 0;

     label01:
        if $c0 != 183 goto label02;

        return 1;

     label02:
        if $c0 != 720 goto label03;

        return 1;

     label03:
        if $c0 != 721 goto label04;

        return 1;

     label04:
        if $c0 != 903 goto label05;

        return 1;

     label05:
        if $c0 != 1600 goto label06;

        return 1;

     label06:
        if $c0 != 3654 goto label07;

        return 1;

     label07:
        if $c0 != 3782 goto label08;

        return 1;

     label08:
        if $c0 != 12293 goto label09;

        return 1;

     label09:
        if $c0 < 12337 goto label12;

        if $c0 > 12341 goto label10;

        return 1;

     label10:
        if $c0 < 12445 goto label12;

        if $c0 > 12446 goto label11;

        return 1;

     label11:
        if $c0 < 12540 goto label12;

        if $c0 > 12542 goto label12;

        return 1;

     label12:
        return 0;
    }
    public static boolean isXMLLetter(char)
    {
        char $c0;
        byte[] $r0;
        byte $b1;
        int $i2;

        $c0 := @parameter0: char;

        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$c0];

        $i2 = $b1 & 2;

        $b1 = (byte) $i2;

        if $b1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isXMLLetterOrDigit(char)
    {
        char $c0;
        byte[] $r0;
        byte $b1;
        int $i2;

        $c0 := @parameter0: char;

        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$c0];

        $i2 = $b1 & 18;

        $b1 = (byte) $i2;

        if $b1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isXMLNameCharacter(char)
    {
        char $c0;
        byte[] $r0;
        byte $b1;
        int $i2;

        $c0 := @parameter0: char;

        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$c0];

        $i2 = $b1 & 8;

        $b1 = (byte) $i2;

        if $b1 != 0 goto label1;

        if $c0 != 58 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static boolean isXMLNameStartCharacter(char)
    {
        char $c0;
        byte[] $r0;
        byte $b1;
        int $i2;

        $c0 := @parameter0: char;

        $r0 = <org.jdom2.Verifier: byte[] CHARFLAGS>;

        $b1 = $r0[$c0];

        $i2 = $b1 & 4;

        $b1 = (byte) $i2;

        if $b1 != 0 goto label1;

        if $c0 != 58 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static boolean isXMLPublicIDCharacter(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 < 97 goto label1;

        if $c0 > 122 goto label1;

        return 1;

     label1:
        if $c0 < 63 goto label2;

        if $c0 <= 90 goto label4;

     label2:
        if $c0 < 39 goto label3;

        if $c0 <= 59 goto label4;

     label3:
        if $c0 == 32 goto label4;

        if $c0 == 33 goto label4;

        if $c0 == 61 goto label4;

        if $c0 == 35 goto label4;

        if $c0 == 36 goto label4;

        if $c0 == 95 goto label4;

        if $c0 == 37 goto label4;

        if $c0 == 10 goto label4;

        if $c0 == 13 goto label4;

        if $c0 == 9 goto label4;

        return 0;

     label4:
        return 1;
    }
    public static boolean isXMLWhitespace(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 == 32 goto label1;

        if $c0 == 10 goto label1;

        if $c0 == 9 goto label1;

        if $c0 != 13 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
