org.jdom2.Element extends org.jdom2.Content implements org.jdom2.Parent
private static final int INITIAL_ARRAY_SIZE
private static final long serialVersionUID
transient java.util.List additionalNamespaces
transient org.jdom2.AttributeList attributes
transient org.jdom2.ContentList content
protected java.lang.String name
protected org.jdom2.Namespace namespace
    protected void <init>()
    {
        org.jdom2.Element r0;
        org.jdom2.Content$CType $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $r1 = <org.jdom2.Content$CType: org.jdom2.Content$CType Element>;

        specialinvoke r0.<org.jdom2.Content: void <init>(org.jdom2.Content$CType)>($r1);

        r0.<org.jdom2.Element: java.util.List additionalNamespaces> = null;

        r0.<org.jdom2.Element: org.jdom2.AttributeList attributes> = null;

        $r2 = new org.jdom2.ContentList;

        specialinvoke $r2.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r0);

        r0.<org.jdom2.Element: org.jdom2.ContentList content> = $r2;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jdom2.Element: void <init>(java.lang.String,org.jdom2.Namespace)>($r1, null);

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, $r2;
        org.jdom2.Namespace $r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>("", $r2);

        specialinvoke r0.<org.jdom2.Element: void <init>(java.lang.String,org.jdom2.Namespace)>($r1, $r3);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, $r2, $r3;
        org.jdom2.Namespace $r4;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r2, $r3);

        specialinvoke r0.<org.jdom2.Element: void <init>(java.lang.String,org.jdom2.Namespace)>($r1, $r4);

        return;
    }
    public void <init>(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.Content$CType $r3;
        org.jdom2.ContentList $r4;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r3 = <org.jdom2.Content$CType: org.jdom2.Content$CType Element>;

        specialinvoke r0.<org.jdom2.Content: void <init>(org.jdom2.Content$CType)>($r3);

        r0.<org.jdom2.Element: java.util.List additionalNamespaces> = null;

        r0.<org.jdom2.Element: org.jdom2.AttributeList attributes> = null;

        $r4 = new org.jdom2.ContentList;

        specialinvoke $r4.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r0);

        r0.<org.jdom2.Element: org.jdom2.ContentList content> = $r4;

        virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element setName(java.lang.String)>($r1);

        virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element setNamespace(org.jdom2.Namespace)>($r2);

        return;
    }
    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.jdom2.Element r0;
        java.io.ObjectInputStream $r1;
        org.jdom2.ContentList $r2;
        int $i0;
        java.lang.Object $r3;
        org.jdom2.Namespace $r4;
        org.jdom2.Attribute $r5;
        org.jdom2.Content $r6;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new org.jdom2.ContentList;

        specialinvoke $r2.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r0);

        r0.<org.jdom2.Element: org.jdom2.ContentList content> = $r2;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (org.jdom2.Namespace) $r3;

        virtualinvoke r0.<org.jdom2.Element: boolean addNamespaceDeclaration(org.jdom2.Namespace)>($r4);

        goto label1;

     label2:
        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

     label3:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label4;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r5 = (org.jdom2.Attribute) $r3;

        virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element setAttribute(org.jdom2.Attribute)>($r5);

        goto label3;

     label4:
        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

     label5:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label6;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r6 = (org.jdom2.Content) $r3;

        virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r6);

        goto label5;

     label6:
        return;
    }
    private final java.net.URI resolve(java.lang.String, java.net.URI) throws java.net.URISyntaxException
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        java.net.URI r2, $r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.net.URI;

        if $r1 != null goto label1;

        return $r3;

     label1:
        r2 = new java.net.URI;

        specialinvoke r2.<java.net.URI: void <init>(java.lang.String)>($r1);

        if $r3 != null goto label2;

        return r2;

     label2:
        $r3 = virtualinvoke r2.<java.net.URI: java.net.URI resolve(java.net.URI)>($r3);

        return $r3;
    }
    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.jdom2.Element r0;
        java.io.ObjectOutputStream $r1;
        boolean $z0;
        java.util.List $r2;
        int $i0, i1;
        java.lang.Object $r3;
        org.jdom2.AttributeList $r4;
        org.jdom2.Attribute $r5;
        org.jdom2.ContentList $r6;
        org.jdom2.Content $r7;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $z0 = virtualinvoke r0.<org.jdom2.Element: boolean hasAdditionalNamespaces()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>(0);

     label3:
        $z0 = virtualinvoke r0.<org.jdom2.Element: boolean hasAttributes()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        $i0 = virtualinvoke $r4.<org.jdom2.AttributeList: int size()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        i1 = 0;

     label4:
        if i1 >= $i0 goto label6;

        $r4 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        $r5 = virtualinvoke $r4.<org.jdom2.AttributeList: org.jdom2.Attribute get(int)>(i1);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label4;

     label5:
        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>(0);

     label6:
        $r6 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r6.<org.jdom2.ContentList: int size()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        i1 = 0;

     label7:
        if i1 >= $i0 goto label8;

        $r6 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r7 = virtualinvoke $r6.<org.jdom2.ContentList: org.jdom2.Content get(int)>(i1);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label7;

     label8:
        return;
    }
    public org.jdom2.Element addContent(int, java.util.Collection)
    {
        org.jdom2.Element r0;
        int $i0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return r0;
    }
    public org.jdom2.Element addContent(int, org.jdom2.Content)
    {
        org.jdom2.Element r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void add(int,org.jdom2.Content)>($i0, $r1);

        return r0;
    }
    public org.jdom2.Element addContent(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Text $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.jdom2.Text;

        specialinvoke $r2.<org.jdom2.Text: void <init>(java.lang.String)>($r1);

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r2);

        return r0;
    }
    public org.jdom2.Element addContent(java.util.Collection)
    {
        org.jdom2.Element r0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }
    public org.jdom2.Element addContent(org.jdom2.Content)
    {
        org.jdom2.Element r0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(int, java.util.Collection)
    {
        org.jdom2.Element r0;
        int $i0;
        java.util.Collection $r1;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element addContent(int,java.util.Collection)>($i0, $r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(int, org.jdom2.Content)
    {
        org.jdom2.Element r0;
        int $i0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element addContent(int,org.jdom2.Content)>($i0, $r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(java.util.Collection)
    {
        org.jdom2.Element r0;
        java.util.Collection $r1;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.util.Collection;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element addContent(java.util.Collection)>($r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(org.jdom2.Content)
    {
        org.jdom2.Element r0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Content;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r1);

        return r0;
    }
    public boolean addNamespaceDeclaration(org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        org.jdom2.Namespace $r1, r6;
        java.util.List $r2;
        java.util.ArrayList $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r7;
        org.jdom2.IllegalAddException $r8;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Namespace;

        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r2 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(5);

        r0.<org.jdom2.Element: java.util.List additionalNamespaces> = $r3;

     label1:
        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.jdom2.Namespace) $r5;

        if r6 != $r1 goto label2;

        return 0;

     label3:
        $r7 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element)>($r1, r0);

        if $r7 == null goto label4;

        $r8 = new org.jdom2.IllegalAddException;

        specialinvoke $r8.<org.jdom2.IllegalAddException: void <init>(org.jdom2.Element,org.jdom2.Namespace,java.lang.String)>(r0, $r1, $r7);

        throw $r8;

     label4:
        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return $z0;
    }
    public void canContainContent(org.jdom2.Content, int, boolean) throws org.jdom2.IllegalAddException
    {
        org.jdom2.Element r0;
        org.jdom2.Content $r1;
        int $i0;
        boolean $z0;
        org.jdom2.IllegalAddException $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Content;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $z0 = $r1 instanceof org.jdom2.DocType;

        if $z0 == 0 goto label1;

        $r2 = new org.jdom2.IllegalAddException;

        specialinvoke $r2.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("A DocType is not allowed except at the document level");

        throw $r2;

     label1:
        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.Element r0;

        r0 := @this: org.jdom2.Element;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element clone()>();

        return r0;
    }
    public volatile org.jdom2.CloneBase clone()
    {
        org.jdom2.Element r0;

        r0 := @this: org.jdom2.Element;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element clone()>();

        return r0;
    }
    public volatile org.jdom2.Content clone()
    {
        org.jdom2.Element r0;

        r0 := @this: org.jdom2.Element;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element clone()>();

        return r0;
    }
    public org.jdom2.Element clone()
    {
        org.jdom2.Element r0, r2;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r3;
        org.jdom2.AttributeList $r4;
        int i0, $i1;
        org.jdom2.Attribute $r5;
        java.util.List $r6;
        java.util.ArrayList $r7;

        r0 := @this: org.jdom2.Element;

        $r1 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content clone()>();

        r2 = (org.jdom2.Element) $r1;

        $r3 = new org.jdom2.ContentList;

        specialinvoke $r3.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r2);

        r2.<org.jdom2.Element: org.jdom2.ContentList content> = $r3;

        $r4 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r4 != null goto label3;

        $r4 = null;

     label1:
        r2.<org.jdom2.Element: org.jdom2.AttributeList attributes> = $r4;

        $r4 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r4 == null goto label4;

        i0 = 0;

     label2:
        $r4 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        $i1 = virtualinvoke $r4.<org.jdom2.AttributeList: int size()>();

        if i0 >= $i1 goto label4;

        $r4 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        $r5 = virtualinvoke $r4.<org.jdom2.AttributeList: org.jdom2.Attribute get(int)>(i0);

        $r4 = r2.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        $r5 = virtualinvoke $r5.<org.jdom2.Attribute: org.jdom2.Attribute clone()>();

        virtualinvoke $r4.<org.jdom2.AttributeList: boolean add(org.jdom2.Attribute)>($r5);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r4 = new org.jdom2.AttributeList;

        specialinvoke $r4.<org.jdom2.AttributeList: void <init>(org.jdom2.Element)>(r2);

        goto label1;

     label4:
        $r6 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r6 == null goto label5;

        $r7 = new java.util.ArrayList;

        $r6 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r2.<org.jdom2.Element: java.util.List additionalNamespaces> = $r7;

     label5:
        i0 = 0;

     label6:
        $r3 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $i1 = virtualinvoke $r3.<org.jdom2.ContentList: int size()>();

        if i0 >= $i1 goto label7;

        $r3 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r1 = virtualinvoke $r3.<org.jdom2.ContentList: org.jdom2.Content get(int)>(i0);

        $r3 = r2.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r1 = virtualinvoke $r1.<org.jdom2.Content: org.jdom2.Content clone()>();

        virtualinvoke $r3.<org.jdom2.ContentList: boolean add(java.lang.Object)>($r1);

        i0 = i0 + 1;

        goto label6;

     label7:
        return r2;
    }
    public java.util.List cloneContent()
    {
        org.jdom2.Element r0;
        java.util.ArrayList r1;
        int $i0, i1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.Element;

        $i0 = virtualinvoke r0.<org.jdom2.Element: int getContentSize()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Content getContent(int)>(i1);

        $r2 = virtualinvoke $r2.<org.jdom2.Content: org.jdom2.Content clone()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public boolean coalesceText(boolean)
    {
        org.jdom2.Element r0, $r11;
        boolean $z0, $z1;
        java.util.Iterator r1;
        org.jdom2.Text r2, r7;
        java.lang.Object $r3;
        org.jdom2.Content r4;
        org.jdom2.Content$CType $r5, $r6;
        java.lang.String $r8, $r9;
        org.jdom2.ContentList $r10;

        r0 := @this: org.jdom2.Element;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label3;

        r1 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.util.IteratorIterable getDescendants()>();

     label1:
        r2 = null;

        $z0 = 0;

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jdom2.Content) $r3;

        $r5 = virtualinvoke r4.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $r6 = <org.jdom2.Content$CType: org.jdom2.Content$CType Text>;

        if $r5 != $r6 goto label7;

        r7 = (org.jdom2.Text) r4;

        $r8 = "";

        $r9 = virtualinvoke r7.<org.jdom2.Text: java.lang.String getValue()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label4;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        $z0 = 1;

        goto label2;

     label3:
        $r10 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        r1 = virtualinvoke $r10.<org.jdom2.ContentList: java.util.Iterator iterator()>();

        goto label1;

     label4:
        if r2 == null goto label5;

        r0 = virtualinvoke r2.<org.jdom2.Text: org.jdom2.Element getParent()>();

        $r11 = virtualinvoke r7.<org.jdom2.Text: org.jdom2.Element getParent()>();

        if r0 == $r11 goto label6;

     label5:
        r2 = r7;

        goto label2;

     label6:
        $r8 = virtualinvoke r7.<org.jdom2.Text: java.lang.String getValue()>();

        virtualinvoke r2.<org.jdom2.Text: void append(java.lang.String)>($r8);

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        $z0 = 1;

        goto label2;

     label7:
        r2 = null;

        goto label2;

     label8:
        return $z0;
    }
    public volatile org.jdom2.Content detach()
    {
        org.jdom2.Element r0;

        r0 := @this: org.jdom2.Element;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element detach()>();

        return r0;
    }
    public org.jdom2.Element detach()
    {
        org.jdom2.Element r0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content detach()>();

        r0 = (org.jdom2.Element) $r1;

        return r0;
    }
    public java.util.List getAdditionalNamespaces()
    {
        org.jdom2.Element r0;
        java.util.List $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;

     label1:
        $r1 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r1;
    }
    public org.jdom2.Attribute getAttribute(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Attribute $r2;
        org.jdom2.Namespace $r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r2 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Attribute getAttribute(java.lang.String,org.jdom2.Namespace)>($r1, $r3);

        return $r2;
    }
    public org.jdom2.Attribute getAttribute(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.AttributeList $r3;
        org.jdom2.Attribute $r4;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r3 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.AttributeList getAttributeList()>();

        $r4 = virtualinvoke $r3.<org.jdom2.AttributeList: org.jdom2.Attribute get(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        return $r4;
    }
    org.jdom2.AttributeList getAttributeList()
    {
        org.jdom2.Element r0;
        org.jdom2.AttributeList $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r1 != null goto label1;

        $r1 = new org.jdom2.AttributeList;

        specialinvoke $r1.<org.jdom2.AttributeList: void <init>(org.jdom2.Element)>(r0);

        r0.<org.jdom2.Element: org.jdom2.AttributeList attributes> = $r1;

     label1:
        $r1 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        return $r1;
    }
    public java.lang.String getAttributeValue(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.AttributeList $r2;
        org.jdom2.Namespace $r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace)>($r1, $r3);

        return $r1;
    }
    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, r2;
        org.jdom2.AttributeList $r3;
        org.jdom2.Namespace $r4;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r3 != null goto label1;

        return r2;

     label1:
        $r4 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace,java.lang.String)>($r1, $r4, r2);

        return $r1;
    }
    public java.lang.String getAttributeValue(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.AttributeList $r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r3 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace,java.lang.String)>($r1, $r2, null);

        return $r1;
    }
    public java.lang.String getAttributeValue(java.lang.String, org.jdom2.Namespace, java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, r3;
        org.jdom2.Namespace $r2;
        org.jdom2.AttributeList $r4;
        org.jdom2.Attribute $r5;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r4 != null goto label1;

        return r3;

     label1:
        $r4 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.AttributeList getAttributeList()>();

        $r5 = virtualinvoke $r4.<org.jdom2.AttributeList: org.jdom2.Attribute get(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        if $r5 == null goto label2;

        $r1 = virtualinvoke $r5.<org.jdom2.Attribute: java.lang.String getValue()>();

        return $r1;

     label2:
        return r3;
    }
    public java.util.List getAttributes()
    {
        org.jdom2.Element r0;
        org.jdom2.AttributeList $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.AttributeList getAttributeList()>();

        return $r1;
    }
    public org.jdom2.Element getChild(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getChild(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        return r0;
    }
    public org.jdom2.Element getChild(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.filter.ElementFilter $r3;
        org.jdom2.ContentList $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r4 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r3 = new org.jdom2.filter.ElementFilter;

        specialinvoke $r3.<org.jdom2.filter.ElementFilter: void <init>(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        $r5 = virtualinvoke $r4.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>($r3);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.jdom2.Element) $r7;

        return r0;

     label1:
        return null;
    }
    public java.lang.String getChildText(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getChild(java.lang.String)>($r1);

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getText()>();

        return $r1;
    }
    public java.lang.String getChildText(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getChild(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getText()>();

        return $r1;
    }
    public java.lang.String getChildTextNormalize(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getChild(java.lang.String)>($r1);

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getTextNormalize()>();

        return $r1;
    }
    public java.lang.String getChildTextNormalize(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getChild(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getTextNormalize()>();

        return $r1;
    }
    public java.lang.String getChildTextTrim(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getChild(java.lang.String)>($r1);

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getTextTrim()>();

        return $r1;
    }
    public java.lang.String getChildTextTrim(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        r0 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getChild(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getTextTrim()>();

        return $r1;
    }
    public java.util.List getChildren()
    {
        org.jdom2.Element r0;
        org.jdom2.filter.ElementFilter $r1;
        java.util.List $r2;
        org.jdom2.ContentList $r3;

        r0 := @this: org.jdom2.Element;

        $r3 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r1 = new org.jdom2.filter.ElementFilter;

        specialinvoke $r1.<org.jdom2.filter.ElementFilter: void <init>()>();

        $r2 = virtualinvoke $r3.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>($r1);

        return $r2;
    }
    public java.util.List getChildren(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        java.util.List $r2;
        org.jdom2.Namespace $r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r2 = virtualinvoke r0.<org.jdom2.Element: java.util.List getChildren(java.lang.String,org.jdom2.Namespace)>($r1, $r3);

        return $r2;
    }
    public java.util.List getChildren(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.filter.ElementFilter $r3;
        java.util.List $r4;
        org.jdom2.ContentList $r5;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r5 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r3 = new org.jdom2.filter.ElementFilter;

        specialinvoke $r3.<org.jdom2.filter.ElementFilter: void <init>(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        $r4 = virtualinvoke $r5.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>($r3);

        return $r4;
    }
    public java.util.List getContent()
    {
        org.jdom2.Element r0;
        org.jdom2.ContentList r1;

        r0 := @this: org.jdom2.Element;

        r1 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        return r1;
    }
    public java.util.List getContent(org.jdom2.filter.Filter)
    {
        org.jdom2.Element r0;
        org.jdom2.filter.Filter r1;
        java.util.List $r2;
        org.jdom2.ContentList $r3;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $r3 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r2 = virtualinvoke $r3.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>(r1);

        return $r2;
    }
    public org.jdom2.Content getContent(int)
    {
        org.jdom2.Element r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r1 = virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content get(int)>($i0);

        return $r1;
    }
    public int getContentSize()
    {
        org.jdom2.Element r0;
        int $i0;
        org.jdom2.ContentList $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom2.ContentList: int size()>();

        return $i0;
    }
    public org.jdom2.util.IteratorIterable getDescendants()
    {
        org.jdom2.Element r0;
        org.jdom2.DescendantIterator $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = new org.jdom2.DescendantIterator;

        specialinvoke $r1.<org.jdom2.DescendantIterator: void <init>(org.jdom2.Parent)>(r0);

        return $r1;
    }
    public org.jdom2.util.IteratorIterable getDescendants(org.jdom2.filter.Filter)
    {
        org.jdom2.Element r0;
        org.jdom2.filter.Filter r1;
        org.jdom2.FilterIterator $r2;
        org.jdom2.DescendantIterator $r3;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $r2 = new org.jdom2.FilterIterator;

        $r3 = new org.jdom2.DescendantIterator;

        specialinvoke $r3.<org.jdom2.DescendantIterator: void <init>(org.jdom2.Parent)>(r0);

        specialinvoke $r2.<org.jdom2.FilterIterator: void <init>(org.jdom2.DescendantIterator,org.jdom2.filter.Filter)>($r3, r1);

        return $r2;
    }
    public java.lang.String getName()
    {
        org.jdom2.Element r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Element;

        r1 = r0.<org.jdom2.Element: java.lang.String name>;

        return r1;
    }
    public org.jdom2.Namespace getNamespace()
    {
        org.jdom2.Element r0;
        org.jdom2.Namespace r1;

        r0 := @this: org.jdom2.Element;

        r1 = r0.<org.jdom2.Element: org.jdom2.Namespace namespace>;

        return r1;
    }
    public org.jdom2.Namespace getNamespace(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.jdom2.Namespace $r3;
        java.util.List $r4;
        int i0, $i1;
        java.lang.Object $r5;
        org.jdom2.AttributeList $r6;
        java.util.Iterator $r7;
        org.jdom2.Attribute r8;
        org.jdom2.Parent $r9;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = "xml";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        return $r3;

     label2:
        $r2 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getNamespacePrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Namespace getNamespace()>();

        return $r3;

     label3:
        $r4 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r4 == null goto label5;

        i0 = 0;

     label4:
        $r4 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        $r4 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.jdom2.Namespace) $r5;

        $r2 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label9;

        i0 = i0 + 1;

        goto label4;

     label5:
        $r6 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r6 == null goto label7;

        $r6 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        $r7 = virtualinvoke $r6.<org.jdom2.AttributeList: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.jdom2.Attribute) $r5;

        $r2 = virtualinvoke r8.<org.jdom2.Attribute: java.lang.String getNamespacePrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label6;

        $r3 = virtualinvoke r8.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        return $r3;

     label7:
        $r9 = r0.<org.jdom2.Element: org.jdom2.Parent parent>;

        $z0 = $r9 instanceof org.jdom2.Element;

        if $z0 == 0 goto label8;

        $r9 = r0.<org.jdom2.Element: org.jdom2.Parent parent>;

        r0 = (org.jdom2.Element) $r9;

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Namespace getNamespace(java.lang.String)>($r1);

        return $r3;

     label8:
        return null;

     label9:
        return $r3;
    }
    public java.lang.String getNamespacePrefix()
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r2 = r0.<org.jdom2.Element: org.jdom2.Namespace namespace>;

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        return $r1;
    }
    public java.lang.String getNamespaceURI()
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r2 = r0.<org.jdom2.Element: org.jdom2.Namespace namespace>;

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        return $r1;
    }
    public java.util.List getNamespacesInScope()
    {
        org.jdom2.Element r0, $r10;
        java.util.ArrayList r1;
        java.util.TreeMap r2;
        org.jdom2.Namespace $r3;
        java.lang.String $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.jdom2.AttributeList $r8;
        org.jdom2.Attribute r9;
        int $i0;
        java.util.Collection $r11;

        r0 := @this: org.jdom2.Element;

        r2 = new java.util.TreeMap;

        specialinvoke r2.<java.util.TreeMap: void <init>()>();

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r4 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getNamespacePrefix()>();

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Namespace getNamespace()>();

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r5 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r5 == null goto label2;

        $r5 = virtualinvoke r0.<org.jdom2.Element: java.util.List getAdditionalNamespaces()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.jdom2.Namespace) $r7;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke r2.<java.util.TreeMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label1;

     label2:
        $r8 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r8 == null goto label4;

        $r5 = virtualinvoke r0.<org.jdom2.Element: java.util.List getAttributes()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdom2.Attribute) $r7;

        $r3 = virtualinvoke r9.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke r2.<java.util.TreeMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label3;

     label4:
        $r10 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getParentElement()>();

        if $r10 == null goto label6;

        $r5 = virtualinvoke $r10.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.jdom2.Namespace) $r7;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke r2.<java.util.TreeMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label5;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label5;

     label6:
        if $r10 != null goto label7;

        $z0 = virtualinvoke r2.<java.util.TreeMap: boolean containsKey(java.lang.Object)>("");

        if $z0 != 0 goto label7;

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

     label7:
        r1 = new java.util.ArrayList;

        $i0 = virtualinvoke r2.<java.util.TreeMap: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Namespace getNamespace()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getNamespacePrefix()>();

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r11 = virtualinvoke r2.<java.util.TreeMap: java.util.Collection values()>();

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r11);

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r5;
    }
    public java.util.List getNamespacesInherited()
    {
        org.jdom2.Element r0, $r3;
        java.util.ArrayList r1;
        java.util.HashMap r2;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.jdom2.Namespace r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.jdom2.Element;

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getParentElement()>();

        if $r3 != null goto label3;

        r1 = new java.util.ArrayList;

        $r4 = virtualinvoke r0.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Namespace) $r6;

        $r8 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        if r7 == $r8 goto label1;

        $r8 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        if r7 == $r8 goto label1;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r4;

     label3:
        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getParentElement()>();

        $r4 = virtualinvoke $r3.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Namespace) $r6;

        $r9 = virtualinvoke r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r7);

        goto label4;

     label5:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r0.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Namespace) $r6;

        $r9 = virtualinvoke r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r6 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        if r7 != $r6 goto label6;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        goto label6;

     label7:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r4;
    }
    public java.util.List getNamespacesIntroduced()
    {
        org.jdom2.Element r0, $r3;
        java.util.ArrayList r1;
        java.util.HashMap r2;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.jdom2.Namespace r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.jdom2.Element;

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getParentElement()>();

        if $r3 != null goto label4;

        r1 = new java.util.ArrayList;

        $r4 = virtualinvoke r0.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Namespace) $r6;

        $r8 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        if r7 == $r8 goto label2;

        $r8 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        if r7 != $r8 goto label1;

     label2:
        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r4;

     label4:
        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element getParentElement()>();

        $r4 = virtualinvoke $r3.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Namespace) $r6;

        $r9 = virtualinvoke r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r7);

        goto label5;

     label6:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r0.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Namespace) $r6;

        $r9 = virtualinvoke r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r9);

        if $z0 == 0 goto label8;

        $r9 = virtualinvoke r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r6 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        if r7 == $r6 goto label7;

     label8:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        goto label7;

     label9:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r4;
    }
    public java.lang.String getQualifiedName()
    {
        org.jdom2.Element r0;
        java.lang.String $r1, $r3;
        org.jdom2.Namespace $r2;
        boolean $z0;
        java.lang.StringBuilder $r4;

        r0 := @this: org.jdom2.Element;

        $r1 = "";

        $r2 = r0.<org.jdom2.Element: org.jdom2.Namespace namespace>;

        $r3 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getName()>();

        return $r1;

     label1:
        $r4 = new java.lang.StringBuilder;

        $r2 = r0.<org.jdom2.Element: org.jdom2.Namespace namespace>;

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r1 = r0.<org.jdom2.Element: java.lang.String name>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    public java.lang.String getText()
    {
        org.jdom2.Element r0;
        java.lang.StringBuilder r1;
        org.jdom2.ContentList $r2;
        int $i0, $i1;
        org.jdom2.Content $r3;
        boolean $z0, $z1;
        org.jdom2.Text r4;
        java.lang.String $r5;

        r0 := @this: org.jdom2.Element;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int size()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int size()>();

        if $i0 != 1 goto label3;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r3 = virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content get(int)>(0);

        $z0 = $r3 instanceof org.jdom2.Text;

        if $z0 == 0 goto label2;

        r4 = (org.jdom2.Text) $r3;

        $r5 = virtualinvoke r4.<org.jdom2.Text: java.lang.String getText()>();

        return $r5;

     label2:
        return "";

     label3:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $z0 = 0;

        $i0 = 0;

     label4:
        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $i1 = virtualinvoke $r2.<org.jdom2.ContentList: int size()>();

        if $i0 >= $i1 goto label6;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r3 = virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content get(int)>($i0);

        $z1 = $r3 instanceof org.jdom2.Text;

        if $z1 == 0 goto label5;

        r4 = (org.jdom2.Text) $r3;

        $r5 = virtualinvoke r4.<org.jdom2.Text: java.lang.String getText()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $z0 = 1;

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        if $z0 != 0 goto label7;

        return "";

     label7:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
    public java.lang.String getTextNormalize()
    {
        org.jdom2.Element r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getText()>();

        $r1 = staticinvoke <org.jdom2.Text: java.lang.String normalizeString(java.lang.String)>($r1);

        return $r1;
    }
    public java.lang.String getTextTrim()
    {
        org.jdom2.Element r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getText()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        return $r1;
    }
    public java.lang.String getValue()
    {
        org.jdom2.Element r0;
        java.lang.StringBuilder r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.jdom2.Content r5;
        java.lang.String $r6;

        r0 := @this: org.jdom2.Element;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<org.jdom2.Element: java.util.List getContent()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jdom2.Content) $r4;

        $z0 = r5 instanceof org.jdom2.Element;

        if $z0 != 0 goto label2;

        $z0 = r5 instanceof org.jdom2.Text;

        if $z0 == 0 goto label1;

     label2:
        $r6 = virtualinvoke r5.<org.jdom2.Content: java.lang.String getValue()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label1;

     label3:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
    public java.net.URI getXMLBaseURI() throws java.net.URISyntaxException
    {
        org.jdom2.Element r0, $r4;
        org.jdom2.Namespace $r1;
        org.jdom2.Parent r2;
        java.net.URI r3;
        boolean $z0;
        java.lang.String $r5;
        org.jdom2.Document $r6;

        r0 := @this: org.jdom2.Element;

        r2 = r0;

        r3 = null;

     label1:
        if r2 == null goto label5;

        $z0 = r2 instanceof org.jdom2.Element;

        if $z0 == 0 goto label3;

        $r4 = (org.jdom2.Element) r2;

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r5 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace)>("base", $r1);

        r3 = specialinvoke r0.<org.jdom2.Element: java.net.URI resolve(java.lang.String,java.net.URI)>($r5, r3);

     label2:
        if r3 == null goto label4;

        $z0 = virtualinvoke r3.<java.net.URI: boolean isAbsolute()>();

        if $z0 == 0 goto label4;

        return r3;

     label3:
        $r6 = (org.jdom2.Document) r2;

        $r5 = virtualinvoke $r6.<org.jdom2.Document: java.lang.String getBaseURI()>();

        r3 = specialinvoke r0.<org.jdom2.Element: java.net.URI resolve(java.lang.String,java.net.URI)>($r5, r3);

        goto label2;

     label4:
        r2 = interfaceinvoke r2.<org.jdom2.Parent: org.jdom2.Parent getParent()>();

        goto label1;

     label5:
        return r3;
    }
    public boolean hasAdditionalNamespaces()
    {
        org.jdom2.Element r0;
        boolean $z0;
        java.util.List $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r1 == null goto label1;

        $r1 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean hasAttributes()
    {
        org.jdom2.Element r0;
        boolean $z0;
        org.jdom2.AttributeList $r1;

        r0 := @this: org.jdom2.Element;

        $r1 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r1 == null goto label1;

        $r1 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        $z0 = virtualinvoke $r1.<org.jdom2.AttributeList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int indexOf(org.jdom2.Content)
    {
        org.jdom2.Element r0;
        org.jdom2.Content $r1;
        int $i0;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOf(java.lang.Object)>($r1);

        return $i0;
    }
    public boolean isAncestor(org.jdom2.Element)
    {
        org.jdom2.Element r0, $r1;
        org.jdom2.Parent $r2;
        boolean $z0;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 = virtualinvoke $r1.<org.jdom2.Element: org.jdom2.Parent getParent()>();

     label1:
        $z0 = $r2 instanceof org.jdom2.Element;

        if $z0 == 0 goto label3;

        if $r2 != r0 goto label2;

        return 1;

     label2:
        $r2 = interfaceinvoke $r2.<org.jdom2.Parent: org.jdom2.Parent getParent()>();

        goto label1;

     label3:
        return 0;
    }
    public boolean isRootElement()
    {
        org.jdom2.Element r0;
        org.jdom2.Parent $r1;
        boolean $z0;

        r0 := @this: org.jdom2.Element;

        $r1 = r0.<org.jdom2.Element: org.jdom2.Parent parent>;

        $z0 = $r1 instanceof org.jdom2.Document;

        return $z0;
    }
    public boolean removeAttribute(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        boolean $z0;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke r0.<org.jdom2.Element: boolean removeAttribute(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        return $z0;
    }
    public boolean removeAttribute(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.AttributeList $r3;
        boolean $z0;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r3 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r3 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.AttributeList getAttributeList()>();

        $z0 = virtualinvoke $r3.<org.jdom2.AttributeList: boolean remove(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        return $z0;
    }
    public boolean removeAttribute(org.jdom2.Attribute)
    {
        org.jdom2.Element r0;
        org.jdom2.Attribute $r1;
        org.jdom2.AttributeList $r2;
        boolean $z0;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.AttributeList getAttributeList()>();

        $z0 = virtualinvoke $r2.<org.jdom2.AttributeList: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean removeChild(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        boolean $z0;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke r0.<org.jdom2.Element: boolean removeChild(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        return $z0;
    }
    public boolean removeChild(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.filter.ElementFilter r3;
        org.jdom2.ContentList $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        r3 = new org.jdom2.filter.ElementFilter;

        specialinvoke r3.<org.jdom2.filter.ElementFilter: void <init>(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        $r4 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r5 = virtualinvoke $r4.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>(r3);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        return 1;

     label1:
        return 0;
    }
    public boolean removeChildren(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        boolean $z0;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke r0.<org.jdom2.Element: boolean removeChildren(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        return $z0;
    }
    public boolean removeChildren(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        org.jdom2.filter.ElementFilter r3;
        boolean z0, $z1;
        org.jdom2.ContentList $r4;
        java.util.List $r5;
        java.util.Iterator $r6;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        z0 = 0;

        r3 = new org.jdom2.filter.ElementFilter;

        specialinvoke r3.<org.jdom2.filter.ElementFilter: void <init>(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        $r4 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r5 = virtualinvoke $r4.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>(r3);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }
    public java.util.List removeContent()
    {
        org.jdom2.Element r0;
        java.util.ArrayList r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        r1 = new java.util.ArrayList;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void clear()>();

        return r1;
    }
    public java.util.List removeContent(org.jdom2.filter.Filter)
    {
        org.jdom2.Element r0;
        org.jdom2.filter.Filter r1;
        java.util.ArrayList r2;
        org.jdom2.ContentList $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.jdom2.Content r7;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: org.jdom2.filter.Filter;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r4 = virtualinvoke $r3.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>(r1);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Content) $r6;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return r2;
    }
    public org.jdom2.Content removeContent(int)
    {
        org.jdom2.Element r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $r1 = virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content remove(int)>($i0);

        return $r1;
    }
    public boolean removeContent(org.jdom2.Content)
    {
        org.jdom2.Element r0;
        org.jdom2.Content $r1;
        boolean $z0;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        $z0 = virtualinvoke $r2.<org.jdom2.ContentList: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }
    public void removeNamespaceDeclaration(org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        org.jdom2.Namespace $r1;
        java.util.List $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Namespace;

        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r2 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return;
    }
    public org.jdom2.Element setAttribute(java.lang.String, java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, $r2;
        org.jdom2.Attribute r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Attribute getAttribute(java.lang.String)>($r1);

        if r3 != null goto label1;

        r3 = new org.jdom2.Attribute;

        specialinvoke r3.<org.jdom2.Attribute: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element setAttribute(org.jdom2.Attribute)>(r3);

        return r0;

     label1:
        virtualinvoke r3.<org.jdom2.Attribute: org.jdom2.Attribute setValue(java.lang.String)>($r2);

        return r0;
    }
    public org.jdom2.Element setAttribute(java.lang.String, java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, $r2;
        org.jdom2.Namespace $r3;
        org.jdom2.Attribute r4;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jdom2.Namespace;

        r4 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.Attribute getAttribute(java.lang.String,org.jdom2.Namespace)>($r1, $r3);

        if r4 != null goto label1;

        r4 = new org.jdom2.Attribute;

        specialinvoke r4.<org.jdom2.Attribute: void <init>(java.lang.String,java.lang.String,org.jdom2.Namespace)>($r1, $r2, $r3);

        virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element setAttribute(org.jdom2.Attribute)>(r4);

        return r0;

     label1:
        virtualinvoke r4.<org.jdom2.Attribute: org.jdom2.Attribute setValue(java.lang.String)>($r2);

        return r0;
    }
    public org.jdom2.Element setAttribute(org.jdom2.Attribute)
    {
        org.jdom2.Element r0;
        org.jdom2.Attribute $r1;
        org.jdom2.AttributeList $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Attribute;

        $r2 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.AttributeList getAttributeList()>();

        virtualinvoke $r2.<org.jdom2.AttributeList: boolean add(org.jdom2.Attribute)>($r1);

        return r0;
    }
    public org.jdom2.Element setAttributes(java.util.Collection)
    {
        org.jdom2.Element r0;
        java.util.Collection r1;
        org.jdom2.AttributeList $r2;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<org.jdom2.Element: org.jdom2.AttributeList getAttributeList()>();

        virtualinvoke $r2.<org.jdom2.AttributeList: void clearAndSet(java.util.Collection)>(r1);

        return r0;
    }
    public org.jdom2.Element setContent(int, org.jdom2.Content)
    {
        org.jdom2.Element r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content set(int,org.jdom2.Content)>($i0, $r1);

        return r0;
    }
    public org.jdom2.Element setContent(java.util.Collection)
    {
        org.jdom2.Element r0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void clearAndSet(java.util.Collection)>(r1);

        return r0;
    }
    public org.jdom2.Element setContent(org.jdom2.Content)
    {
        org.jdom2.Element r0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void clear()>();

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public org.jdom2.Parent setContent(int, java.util.Collection)
    {
        org.jdom2.Element r0;
        int $i0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content remove(int)>($i0);

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return r0;
    }
    public org.jdom2.Element setName(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1, $r3;
        org.jdom2.IllegalNameException $r2;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkElementName(java.lang.String)>($r1);

        if $r3 == null goto label1;

        $r2 = new org.jdom2.IllegalNameException;

        specialinvoke $r2.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "element", $r3);

        throw $r2;

     label1:
        r0.<org.jdom2.Element: java.lang.String name> = $r1;

        return r0;
    }
    public org.jdom2.Element setNamespace(org.jdom2.Namespace)
    {
        org.jdom2.Element r0;
        org.jdom2.Namespace $r1;
        java.util.List $r2;
        java.lang.String $r3;
        org.jdom2.IllegalAddException $r4;
        boolean $z0;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        org.jdom2.Attribute r7;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: org.jdom2.Namespace;

        if $r1 != null goto label1;

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

     label1:
        $r2 = r0.<org.jdom2.Element: java.util.List additionalNamespaces>;

        if $r2 == null goto label2;

        $r2 = virtualinvoke r0.<org.jdom2.Element: java.util.List getAdditionalNamespaces()>();

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List)>($r1, $r2);

        if $r3 == null goto label2;

        $r4 = new org.jdom2.IllegalAddException;

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(org.jdom2.Element,org.jdom2.Namespace,java.lang.String)>(r0, $r1, $r3);

        throw $r4;

     label2:
        $z0 = virtualinvoke r0.<org.jdom2.Element: boolean hasAttributes()>();

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r0.<org.jdom2.Element: java.util.List getAttributes()>();

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Attribute) $r6;

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Attribute)>($r1, r7);

        if $r3 == null goto label3;

        $r4 = new org.jdom2.IllegalAddException;

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(org.jdom2.Element,org.jdom2.Namespace,java.lang.String)>(r0, $r1, $r3);

        throw $r4;

     label4:
        r0.<org.jdom2.Element: org.jdom2.Namespace namespace> = $r1;

        return r0;
    }
    public org.jdom2.Element setText(java.lang.String)
    {
        org.jdom2.Element r0;
        java.lang.String $r1;
        org.jdom2.ContentList $r2;
        org.jdom2.Text $r3;

        r0 := @this: org.jdom2.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void clear()>();

        if $r1 == null goto label1;

        $r3 = new org.jdom2.Text;

        specialinvoke $r3.<org.jdom2.Text: void <init>(java.lang.String)>($r1);

        virtualinvoke r0.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r3);

     label1:
        return r0;
    }
    public void sortAttributes(java.util.Comparator)
    {
        org.jdom2.Element r0;
        java.util.Comparator r1;
        org.jdom2.AttributeList $r2;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: java.util.Comparator;

        $r2 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        if $r2 == null goto label1;

        $r2 = r0.<org.jdom2.Element: org.jdom2.AttributeList attributes>;

        virtualinvoke $r2.<org.jdom2.AttributeList: void sort(java.util.Comparator)>(r1);

     label1:
        return;
    }
    public void sortChildren(java.util.Comparator)
    {
        org.jdom2.Element r0;
        java.util.Comparator r1;
        java.util.List $r2;
        org.jdom2.ContentList$FilterList $r3;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: java.util.Comparator;

        $r2 = virtualinvoke r0.<org.jdom2.Element: java.util.List getChildren()>();

        $r3 = (org.jdom2.ContentList$FilterList) $r2;

        virtualinvoke $r3.<org.jdom2.ContentList$FilterList: void sort(java.util.Comparator)>(r1);

        return;
    }
    public void sortContent(java.util.Comparator)
    {
        org.jdom2.Element r0;
        java.util.Comparator r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: java.util.Comparator;

        $r2 = r0.<org.jdom2.Element: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void sort(java.util.Comparator)>(r1);

        return;
    }
    public void sortContent(org.jdom2.filter.Filter, java.util.Comparator)
    {
        org.jdom2.Element r0;
        org.jdom2.filter.Filter r1;
        java.util.Comparator r2;
        java.util.List $r3;
        org.jdom2.ContentList$FilterList r4;

        r0 := @this: org.jdom2.Element;

        r1 := @parameter0: org.jdom2.filter.Filter;

        r2 := @parameter1: java.util.Comparator;

        $r3 = virtualinvoke r0.<org.jdom2.Element: java.util.List getContent(org.jdom2.filter.Filter)>(r1);

        r4 = (org.jdom2.ContentList$FilterList) $r3;

        virtualinvoke r4.<org.jdom2.ContentList$FilterList: void sort(java.util.Comparator)>(r2);

        return;
    }
    public java.lang.String toString()
    {
        org.jdom2.Element r0;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.jdom2.Element;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(64);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Element: <");

        $r2 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke r0.<org.jdom2.Element: java.lang.String getNamespaceURI()>();

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Namespace: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/>]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
