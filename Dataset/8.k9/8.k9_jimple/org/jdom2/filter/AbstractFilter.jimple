org.jdom2.filter.AbstractFilter extends java.lang.Object implements org.jdom2.filter.Filter
private static final long serialVersionUID
    public void <init>()
    {
        org.jdom2.filter.AbstractFilter r0;

        r0 := @this: org.jdom2.filter.AbstractFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public final org.jdom2.filter.Filter and(org.jdom2.filter.Filter)
    {
        org.jdom2.filter.AbstractFilter r0;
        org.jdom2.filter.Filter r1;
        org.jdom2.filter.AndFilter $r2;

        r0 := @this: org.jdom2.filter.AbstractFilter;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $r2 = new org.jdom2.filter.AndFilter;

        specialinvoke $r2.<org.jdom2.filter.AndFilter: void <init>(org.jdom2.filter.Filter,org.jdom2.filter.Filter)>(r1, r0);

        return $r2;
    }
    public java.util.List filter(java.util.List)
    {
        org.jdom2.filter.AbstractFilter r0;
        java.util.List r1;
        boolean $z0;
        int $i0, i1;
        java.util.ArrayList r2;
        java.lang.Object $r3;
        java.util.Iterator $r4;

        r0 := @this: org.jdom2.filter.AbstractFilter;

        r1 := @parameter0: java.util.List;

        if r1 != null goto label1;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return r1;

     label1:
        $z0 = r1 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label6;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = virtualinvoke r0.<org.jdom2.filter.AbstractFilter: java.lang.Object filter(java.lang.Object)>($r3);

        if $r3 == null goto label3;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return r1;

     label5:
        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return r1;

     label6:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(10);

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r3 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r3 = virtualinvoke r0.<org.jdom2.filter.AbstractFilter: java.lang.Object filter(java.lang.Object)>($r3);

        if $r3 == null goto label7;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label7;

     label8:
        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return r1;

     label9:
        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return r1;
    }
    public final boolean matches(java.lang.Object)
    {
        org.jdom2.filter.AbstractFilter r0;
        java.lang.Object $r1;

        r0 := @this: org.jdom2.filter.AbstractFilter;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.jdom2.filter.AbstractFilter: java.lang.Object filter(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public final org.jdom2.filter.Filter negate()
    {
        org.jdom2.filter.Filter $r0;
        org.jdom2.filter.AbstractFilter r1;
        boolean $z0;
        org.jdom2.filter.NegateFilter r2;

        r1 := @this: org.jdom2.filter.AbstractFilter;

        $z0 = r1 instanceof org.jdom2.filter.NegateFilter;

        if $z0 == 0 goto label1;

        r2 = (org.jdom2.filter.NegateFilter) r1;

        $r0 = virtualinvoke r2.<org.jdom2.filter.NegateFilter: org.jdom2.filter.Filter getBaseFilter()>();

        return $r0;

     label1:
        r2 = new org.jdom2.filter.NegateFilter;

        specialinvoke r2.<org.jdom2.filter.NegateFilter: void <init>(org.jdom2.filter.Filter)>(r1);

        return r2;
    }
    public final org.jdom2.filter.Filter or(org.jdom2.filter.Filter)
    {
        org.jdom2.filter.AbstractFilter r0;
        org.jdom2.filter.Filter r1;
        org.jdom2.filter.OrFilter $r2;

        r0 := @this: org.jdom2.filter.AbstractFilter;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $r2 = new org.jdom2.filter.OrFilter;

        specialinvoke $r2.<org.jdom2.filter.OrFilter: void <init>(org.jdom2.filter.Filter,org.jdom2.filter.Filter)>(r0, r1);

        return $r2;
    }
    public org.jdom2.filter.Filter refine(org.jdom2.filter.Filter)
    {
        org.jdom2.filter.AbstractFilter r0;
        org.jdom2.filter.Filter r1;
        org.jdom2.filter.AndFilter $r2;

        r0 := @this: org.jdom2.filter.AbstractFilter;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $r2 = new org.jdom2.filter.AndFilter;

        specialinvoke $r2.<org.jdom2.filter.AndFilter: void <init>(org.jdom2.filter.Filter,org.jdom2.filter.Filter)>(r0, r1);

        return $r2;
    }
