org.jdom2.output.Format extends java.lang.Object implements java.lang.Cloneable
private static final org.jdom2.output.EscapeStrategy Bits7EscapeStrategy
private static final org.jdom2.output.EscapeStrategy Bits8EscapeStrategy
private static final org.jdom2.output.EscapeStrategy DefaultEscapeStrategy
private static final java.lang.String STANDARD_ENCODING
private static final java.lang.String STANDARD_INDENT
private static final java.lang.String STANDARD_LINE_SEPARATOR
private static final org.jdom2.output.EscapeStrategy UTFEscapeStrategy
java.lang.String encoding
org.jdom2.output.EscapeStrategy escapeStrategy
boolean expandEmptyElements
boolean ignoreTrAXEscapingPIs
java.lang.String indent
java.lang.String lineSeparator
org.jdom2.output.Format$TextMode mode
boolean omitDeclaration
boolean omitEncoding
boolean specifiedAttributesOnly
    static void <clinit>()
    {
        java.lang.String $r0;
        org.jdom2.output.Format$EscapeStrategyUTF $r1;
        org.jdom2.output.Format$EscapeStrategy8Bits $r2;
        org.jdom2.output.Format$EscapeStrategy7Bits $r3;
        org.jdom2.output.Format$1 $r4;
        org.jdom2.output.LineSeparator $r5;

        $r1 = new org.jdom2.output.Format$EscapeStrategyUTF;

        specialinvoke $r1.<org.jdom2.output.Format$EscapeStrategyUTF: void <init>(org.jdom2.output.Format$1)>(null);

        <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy UTFEscapeStrategy> = $r1;

        $r2 = new org.jdom2.output.Format$EscapeStrategy8Bits;

        specialinvoke $r2.<org.jdom2.output.Format$EscapeStrategy8Bits: void <init>(org.jdom2.output.Format$1)>(null);

        <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy Bits8EscapeStrategy> = $r2;

        $r3 = new org.jdom2.output.Format$EscapeStrategy7Bits;

        specialinvoke $r3.<org.jdom2.output.Format$EscapeStrategy7Bits: void <init>(org.jdom2.output.Format$1)>(null);

        <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy Bits7EscapeStrategy> = $r3;

        $r4 = new org.jdom2.output.Format$1;

        specialinvoke $r4.<org.jdom2.output.Format$1: void <init>()>();

        <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy DefaultEscapeStrategy> = $r4;

        $r5 = <org.jdom2.output.LineSeparator: org.jdom2.output.LineSeparator DEFAULT>;

        $r0 = virtualinvoke $r5.<org.jdom2.output.LineSeparator: java.lang.String value()>();

        <org.jdom2.output.Format: java.lang.String STANDARD_LINE_SEPARATOR> = $r0;

        return;
    }
    private void <init>()
    {
        org.jdom2.output.Format r0;
        java.lang.String $r1;
        org.jdom2.output.Format$TextMode $r2;
        org.jdom2.output.EscapeStrategy $r3;

        r0 := @this: org.jdom2.output.Format;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.output.Format: java.lang.String indent> = null;

        $r1 = <org.jdom2.output.Format: java.lang.String STANDARD_LINE_SEPARATOR>;

        r0.<org.jdom2.output.Format: java.lang.String lineSeparator> = $r1;

        r0.<org.jdom2.output.Format: java.lang.String encoding> = "UTF-8";

        r0.<org.jdom2.output.Format: boolean omitDeclaration> = 0;

        r0.<org.jdom2.output.Format: boolean omitEncoding> = 0;

        r0.<org.jdom2.output.Format: boolean specifiedAttributesOnly> = 0;

        r0.<org.jdom2.output.Format: boolean expandEmptyElements> = 0;

        r0.<org.jdom2.output.Format: boolean ignoreTrAXEscapingPIs> = 0;

        $r2 = <org.jdom2.output.Format$TextMode: org.jdom2.output.Format$TextMode PRESERVE>;

        r0.<org.jdom2.output.Format: org.jdom2.output.Format$TextMode mode> = $r2;

        $r3 = <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy DefaultEscapeStrategy>;

        r0.<org.jdom2.output.Format: org.jdom2.output.EscapeStrategy escapeStrategy> = $r3;

        virtualinvoke r0.<org.jdom2.output.Format: org.jdom2.output.Format setEncoding(java.lang.String)>("UTF-8");

        return;
    }
    private static final org.jdom2.output.EscapeStrategy chooseStrategy(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetEncoder $r3;
        org.jdom2.output.Format$DefaultCharsetEscapeStrategy $r4;
        java.lang.Exception $r5;
        org.jdom2.output.EscapeStrategy r6;

        $r0 := @parameter0: java.lang.String;

        $r1 = "UTF-8";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label01;

        $r1 = "UTF-16";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 == 0 goto label02;

     label01:
        r6 = <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy UTFEscapeStrategy>;

        return r6;

     label02:
        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("ISO-8859-");

        if $z0 != 0 goto label03;

        $r1 = "Latin1";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 == 0 goto label04;

     label03:
        r6 = <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy Bits8EscapeStrategy>;

        return r6;

     label04:
        $r1 = "US-ASCII";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label05;

        $r1 = "ASCII";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 == 0 goto label06;

     label05:
        r6 = <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy Bits7EscapeStrategy>;

        return r6;

     label06:
        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

     label07:
        $r4 = new org.jdom2.output.Format$DefaultCharsetEscapeStrategy;

     label08:
        specialinvoke $r4.<org.jdom2.output.Format$DefaultCharsetEscapeStrategy: void <init>(java.nio.charset.CharsetEncoder)>($r3);

     label09:
        return $r4;

     label10:
        $r5 := @caughtexception;

        r6 = <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy DefaultEscapeStrategy>;

        return r6;

        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }
    public static final java.lang.String compact(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder r1;
        int $i0, i1, $i3;
        char $c2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        i1 = 0;

     label1:
        if i1 > $i0 goto label2;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c2);

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        if $i0 <= i1 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c2);

        if $z0 == 0 goto label3;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        if i1 <= $i0 goto label4;

        return "";

     label4:
        $z0 = 1;

        r1 = new java.lang.StringBuilder;

        $i3 = $i0 - i1;

        $i3 = $i3 + 1;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i3);

     label5:
        if i1 > $i0 goto label8;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z1 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c2);

        if $z1 == 0 goto label7;

        if $z0 == 0 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $z0 = 0;

     label6:
        i1 = i1 + 1;

        goto label5;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $z0 = 1;

        goto label6;

     label8:
        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    public static final java.lang.String escapeAttribute(org.jdom2.output.EscapeStrategy, java.lang.String)
    {
        org.jdom2.output.EscapeStrategy $r0;
        java.lang.StringBuilder r1;
        java.lang.String r2, $r4;
        int $i0, i1, $i3;
        char $c2, $c4;
        boolean $z0;
        org.jdom2.IllegalDataException $r3;

        $r0 := @parameter0: org.jdom2.output.EscapeStrategy;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        i1 = 0;

     label01:
        if i1 >= $i0 goto label02;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i1);

        if $c2 == 60 goto label02;

        if $c2 == 62 goto label02;

        if $c2 == 38 goto label02;

        if $c2 == 13 goto label02;

        if $c2 == 10 goto label02;

        if $c2 == 34 goto label02;

        if $c2 == 9 goto label02;

        $z0 = interfaceinvoke $r0.<org.jdom2.output.EscapeStrategy: boolean shouldEscape(char)>($c2);

        if $z0 == 0 goto label03;

     label02:
        if i1 != $i0 goto label04;

        return r2;

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        $c2 = 0;

        r1 = new java.lang.StringBuilder;

        $i3 = $i0 + 5;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r2, 0, i1);

        $i3 = i1;

     label05:
        if $i3 >= $i0 goto label19;

        i1 = $i3 + 1;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i3);

        if $c2 <= 0 goto label07;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isLowSurrogate(char)>($c4);

        if $z0 != 0 goto label06;

        $r3 = new org.jdom2.IllegalDataException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not decode surrogate pair 0x");

        r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c2);

        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / 0x");

        r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c4);

        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.jdom2.IllegalDataException: void <init>(java.lang.String)>(r2);

        throw $r3;

     label06:
        $i3 = staticinvoke <org.jdom2.Verifier: int decodeSurrogatePair(char,char)>($c2, $c4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $c2 = 0;

        $i3 = i1;

        goto label05;

     label07:
        lookupswitch($c4)
        {
            case 9: goto label15;
            case 10: goto label16;
            case 13: goto label13;
            case 34: goto label14;
            case 38: goto label12;
            case 60: goto label10;
            case 62: goto label11;
            default: goto label08;
        };

     label08:
        $z0 = interfaceinvoke $r0.<org.jdom2.output.EscapeStrategy: boolean shouldEscape(char)>($c4);

        if $z0 == 0 goto label18;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isHighSurrogate(char)>($c4);

        if $z0 == 0 goto label17;

        $c2 = $c4;

     label09:
        $i3 = i1;

        goto label05;

     label10:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label09;

     label11:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label09;

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label09;

     label13:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#xD;");

        goto label09;

     label14:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&quot;");

        goto label09;

     label15:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x9;");

        goto label09;

     label16:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#xA;");

        goto label09;

     label17:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label09;

     label18:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        goto label09;

     label19:
        if $c2 <= 0 goto label20;

        $r3 = new org.jdom2.IllegalDataException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surrogate pair 0x");

        r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c2);

        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("truncated");

        r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.jdom2.IllegalDataException: void <init>(java.lang.String)>(r2);

        throw $r3;

     label20:
        r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return r2;
    }
    public static final java.lang.String escapeText(org.jdom2.output.EscapeStrategy, java.lang.String, java.lang.String)
    {
        org.jdom2.output.EscapeStrategy $r0;
        java.lang.String $r1, r3, $r6;
        java.lang.StringBuilder r2, $r5;
        int $i0, i1, i3;
        char $c2, $c4;
        boolean $z0;
        org.jdom2.IllegalDataException $r4;

        $r0 := @parameter0: org.jdom2.output.EscapeStrategy;

        $r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        i1 = 0;

     label01:
        if i1 >= $i0 goto label02;

        $c2 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i1);

        if $c2 == 60 goto label02;

        if $c2 == 62 goto label02;

        if $c2 == 38 goto label02;

        if $c2 == 13 goto label02;

        if $c2 == 10 goto label02;

        $z0 = interfaceinvoke $r0.<org.jdom2.output.EscapeStrategy: boolean shouldEscape(char)>($c2);

        if $z0 == 0 goto label03;

     label02:
        if i1 != $i0 goto label04;

        return r3;

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        if i1 <= 0 goto label05;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r3, 0, i1);

     label05:
        $c2 = 0;

        i3 = i1;

     label06:
        if i3 >= $i0 goto label19;

        i1 = i3 + 1;

        $c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);

        if $c2 <= 0 goto label08;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isLowSurrogate(char)>($c4);

        if $z0 != 0 goto label07;

        $r4 = new org.jdom2.IllegalDataException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not decode surrogate pair 0x");

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c2);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / 0x");

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c4);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.jdom2.IllegalDataException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label07:
        i3 = staticinvoke <org.jdom2.Verifier: int decodeSurrogatePair(char,char)>($c2, $c4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $c2 = 0;

        i3 = i1;

        goto label06;

     label08:
        lookupswitch($c4)
        {
            case 10: goto label15;
            case 13: goto label14;
            case 38: goto label13;
            case 60: goto label11;
            case 62: goto label12;
            default: goto label09;
        };

     label09:
        $z0 = interfaceinvoke $r0.<org.jdom2.output.EscapeStrategy: boolean shouldEscape(char)>($c4);

        if $z0 == 0 goto label18;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isHighSurrogate(char)>($c4);

        if $z0 == 0 goto label17;

        $c2 = $c4;

     label10:
        i3 = i1;

        goto label06;

     label11:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label10;

     label12:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label10;

     label13:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label10;

     label14:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#xD;");

        goto label10;

     label15:
        if $r1 == null goto label16;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label10;

     label16:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label10;

     label17:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label10;

     label18:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        goto label10;

     label19:
        if $c2 <= 0 goto label20;

        $r4 = new org.jdom2.IllegalDataException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surrogate pair 0x");

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c2);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("truncated");

        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.jdom2.IllegalDataException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label20:
        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    public static org.jdom2.output.Format getCompactFormat()
    {
        org.jdom2.output.Format r0;
        org.jdom2.output.Format$TextMode $r1;

        r0 = new org.jdom2.output.Format;

        specialinvoke r0.<org.jdom2.output.Format: void <init>()>();

        $r1 = <org.jdom2.output.Format$TextMode: org.jdom2.output.Format$TextMode NORMALIZE>;

        virtualinvoke r0.<org.jdom2.output.Format: org.jdom2.output.Format setTextMode(org.jdom2.output.Format$TextMode)>($r1);

        return r0;
    }
    public static org.jdom2.output.Format getPrettyFormat()
    {
        org.jdom2.output.Format r0;
        org.jdom2.output.Format$TextMode $r1;

        r0 = new org.jdom2.output.Format;

        specialinvoke r0.<org.jdom2.output.Format: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.Format: org.jdom2.output.Format setIndent(java.lang.String)>("  ");

        $r1 = <org.jdom2.output.Format$TextMode: org.jdom2.output.Format$TextMode TRIM>;

        virtualinvoke r0.<org.jdom2.output.Format: org.jdom2.output.Format setTextMode(org.jdom2.output.Format$TextMode)>($r1);

        return r0;
    }
    public static org.jdom2.output.Format getRawFormat()
    {
        org.jdom2.output.Format $r0;

        $r0 = new org.jdom2.output.Format;

        specialinvoke $r0.<org.jdom2.output.Format: void <init>()>();

        return $r0;
    }
    public static final java.lang.String trimBoth(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = $i0 + -1;

     label1:
        if i1 <= 0 goto label2;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c2);

        if $z0 == 0 goto label2;

        i1 = i1 + -1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        if $i0 > i1 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c2);

        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        if $i0 <= i1 goto label5;

        return "";

     label5:
        i1 = i1 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, i1);

        return $r0;
    }
    public static final java.lang.String trimLeft(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c2);

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        if i1 < $i0 goto label3;

        return "";

     label3:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(i1);

        return $r0;
    }
    public static final java.lang.String trimRight(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        char $c1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c1);

        if $z0 == 0 goto label2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        if $i0 >= 0 goto label3;

        return "";

     label3:
        $i0 = $i0 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.output.Format r0;

        r0 := @this: org.jdom2.output.Format;

        r0 = virtualinvoke r0.<org.jdom2.output.Format: org.jdom2.output.Format clone()>();

        return r0;
    }
    public org.jdom2.output.Format clone()
    {
        org.jdom2.output.Format r0;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: org.jdom2.output.Format;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        r0 = (org.jdom2.output.Format) $r1;

        return r0;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }
    public java.lang.String getEncoding()
    {
        org.jdom2.output.Format r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.output.Format;

        r1 = r0.<org.jdom2.output.Format: java.lang.String encoding>;

        return r1;
    }
    public org.jdom2.output.EscapeStrategy getEscapeStrategy()
    {
        org.jdom2.output.Format r0;
        org.jdom2.output.EscapeStrategy r1;

        r0 := @this: org.jdom2.output.Format;

        r1 = r0.<org.jdom2.output.Format: org.jdom2.output.EscapeStrategy escapeStrategy>;

        return r1;
    }
    public boolean getExpandEmptyElements()
    {
        org.jdom2.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom2.output.Format;

        z0 = r0.<org.jdom2.output.Format: boolean expandEmptyElements>;

        return z0;
    }
    public boolean getIgnoreTrAXEscapingPIs()
    {
        org.jdom2.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom2.output.Format;

        z0 = r0.<org.jdom2.output.Format: boolean ignoreTrAXEscapingPIs>;

        return z0;
    }
    public java.lang.String getIndent()
    {
        org.jdom2.output.Format r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.output.Format;

        r1 = r0.<org.jdom2.output.Format: java.lang.String indent>;

        return r1;
    }
    public java.lang.String getLineSeparator()
    {
        org.jdom2.output.Format r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.output.Format;

        r1 = r0.<org.jdom2.output.Format: java.lang.String lineSeparator>;

        return r1;
    }
    public boolean getOmitDeclaration()
    {
        org.jdom2.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom2.output.Format;

        z0 = r0.<org.jdom2.output.Format: boolean omitDeclaration>;

        return z0;
    }
    public boolean getOmitEncoding()
    {
        org.jdom2.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom2.output.Format;

        z0 = r0.<org.jdom2.output.Format: boolean omitEncoding>;

        return z0;
    }
    public org.jdom2.output.Format$TextMode getTextMode()
    {
        org.jdom2.output.Format r0;
        org.jdom2.output.Format$TextMode r1;

        r0 := @this: org.jdom2.output.Format;

        r1 = r0.<org.jdom2.output.Format: org.jdom2.output.Format$TextMode mode>;

        return r1;
    }
    public boolean isSpecifiedAttributesOnly()
    {
        org.jdom2.output.Format r0;
        boolean z0;

        r0 := @this: org.jdom2.output.Format;

        z0 = r0.<org.jdom2.output.Format: boolean specifiedAttributesOnly>;

        return z0;
    }
    public org.jdom2.output.Format setEncoding(java.lang.String)
    {
        org.jdom2.output.Format r0;
        java.lang.String $r1;
        org.jdom2.output.EscapeStrategy $r2;

        r0 := @this: org.jdom2.output.Format;

        $r1 := @parameter0: java.lang.String;

        r0.<org.jdom2.output.Format: java.lang.String encoding> = $r1;

        $r2 = staticinvoke <org.jdom2.output.Format: org.jdom2.output.EscapeStrategy chooseStrategy(java.lang.String)>($r1);

        r0.<org.jdom2.output.Format: org.jdom2.output.EscapeStrategy escapeStrategy> = $r2;

        return r0;
    }
    public org.jdom2.output.Format setEscapeStrategy(org.jdom2.output.EscapeStrategy)
    {
        org.jdom2.output.Format r0;
        org.jdom2.output.EscapeStrategy $r1;

        r0 := @this: org.jdom2.output.Format;

        $r1 := @parameter0: org.jdom2.output.EscapeStrategy;

        r0.<org.jdom2.output.Format: org.jdom2.output.EscapeStrategy escapeStrategy> = $r1;

        return r0;
    }
    public org.jdom2.output.Format setExpandEmptyElements(boolean)
    {
        org.jdom2.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom2.output.Format;

        $z0 := @parameter0: boolean;

        r0.<org.jdom2.output.Format: boolean expandEmptyElements> = $z0;

        return r0;
    }
    public void setIgnoreTrAXEscapingPIs(boolean)
    {
        org.jdom2.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom2.output.Format;

        $z0 := @parameter0: boolean;

        r0.<org.jdom2.output.Format: boolean ignoreTrAXEscapingPIs> = $z0;

        return;
    }
    public org.jdom2.output.Format setIndent(java.lang.String)
    {
        org.jdom2.output.Format r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.output.Format;

        $r1 := @parameter0: java.lang.String;

        r0.<org.jdom2.output.Format: java.lang.String indent> = $r1;

        return r0;
    }
    public org.jdom2.output.Format setLineSeparator(java.lang.String)
    {
        org.jdom2.output.Format r0;
        boolean $z0;
        java.lang.String $r1, $r2;

        r0 := @this: org.jdom2.output.Format;

        $r1 := @parameter0: java.lang.String;

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r1 = null;

     label1:
        r0.<org.jdom2.output.Format: java.lang.String lineSeparator> = $r1;

        return r0;
    }
    public org.jdom2.output.Format setLineSeparator(org.jdom2.output.LineSeparator)
    {
        org.jdom2.output.Format r0;
        org.jdom2.output.LineSeparator $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.output.Format;

        $r1 := @parameter0: org.jdom2.output.LineSeparator;

        if $r1 != null goto label2;

        $r2 = <org.jdom2.output.Format: java.lang.String STANDARD_LINE_SEPARATOR>;

     label1:
        r0 = virtualinvoke r0.<org.jdom2.output.Format: org.jdom2.output.Format setLineSeparator(java.lang.String)>($r2);

        return r0;

     label2:
        $r2 = virtualinvoke $r1.<org.jdom2.output.LineSeparator: java.lang.String value()>();

        goto label1;
    }
    public org.jdom2.output.Format setOmitDeclaration(boolean)
    {
        org.jdom2.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom2.output.Format;

        $z0 := @parameter0: boolean;

        r0.<org.jdom2.output.Format: boolean omitDeclaration> = $z0;

        return r0;
    }
    public org.jdom2.output.Format setOmitEncoding(boolean)
    {
        org.jdom2.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom2.output.Format;

        $z0 := @parameter0: boolean;

        r0.<org.jdom2.output.Format: boolean omitEncoding> = $z0;

        return r0;
    }
    public void setSpecifiedAttributesOnly(boolean)
    {
        org.jdom2.output.Format r0;
        boolean $z0;

        r0 := @this: org.jdom2.output.Format;

        $z0 := @parameter0: boolean;

        r0.<org.jdom2.output.Format: boolean specifiedAttributesOnly> = $z0;

        return;
    }
    public org.jdom2.output.Format setTextMode(org.jdom2.output.Format$TextMode)
    {
        org.jdom2.output.Format r0;
        org.jdom2.output.Format$TextMode $r1;

        r0 := @this: org.jdom2.output.Format;

        $r1 := @parameter0: org.jdom2.output.Format$TextMode;

        r0.<org.jdom2.output.Format: org.jdom2.output.Format$TextMode mode> = $r1;

        return r0;
    }
