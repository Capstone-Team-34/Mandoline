org.jdom2.output.XMLOutputter extends java.lang.Object implements java.lang.Cloneable
private static final org.jdom2.output.XMLOutputter$DefaultXMLProcessor DEFAULTPROCESSOR
private org.jdom2.output.Format myFormat
private org.jdom2.output.support.XMLOutputProcessor myProcessor
    static void <clinit>()
    {
        org.jdom2.output.XMLOutputter$DefaultXMLProcessor $r0;

        $r0 = new org.jdom2.output.XMLOutputter$DefaultXMLProcessor;

        specialinvoke $r0.<org.jdom2.output.XMLOutputter$DefaultXMLProcessor: void <init>(org.jdom2.output.XMLOutputter$1)>(null);

        <org.jdom2.output.XMLOutputter: org.jdom2.output.XMLOutputter$DefaultXMLProcessor DEFAULTPROCESSOR> = $r0;

        return;
    }
    public void <init>()
    {
        org.jdom2.output.XMLOutputter r0;

        r0 := @this: org.jdom2.output.XMLOutputter;

        specialinvoke r0.<org.jdom2.output.XMLOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.XMLOutputProcessor)>(null, null);

        return;
    }
    public void <init>(org.jdom2.output.Format)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.output.Format $r1;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.output.Format;

        specialinvoke r0.<org.jdom2.output.XMLOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.XMLOutputProcessor)>($r1, null);

        return;
    }
    public void <init>(org.jdom2.output.Format, org.jdom2.output.support.XMLOutputProcessor)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.output.Format $r1;
        org.jdom2.output.support.XMLOutputProcessor r2;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.output.Format;

        r2 := @parameter1: org.jdom2.output.support.XMLOutputProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat> = null;

        r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor> = null;

        if $r1 != null goto label3;

        $r1 = staticinvoke <org.jdom2.output.Format: org.jdom2.output.Format getRawFormat()>();

     label1:
        r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat> = $r1;

        if r2 != null goto label2;

        r2 = <org.jdom2.output.XMLOutputter: org.jdom2.output.XMLOutputter$DefaultXMLProcessor DEFAULTPROCESSOR>;

     label2:
        r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor> = r2;

        return;

     label3:
        $r1 = virtualinvoke $r1.<org.jdom2.output.Format: org.jdom2.output.Format clone()>();

        goto label1;
    }
    public void <init>(org.jdom2.output.XMLOutputter)
    {
        org.jdom2.output.XMLOutputter r0, $r1;
        org.jdom2.output.Format $r2;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.output.XMLOutputter;

        $r2 = $r1.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        specialinvoke r0.<org.jdom2.output.XMLOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.XMLOutputProcessor)>($r2, null);

        return;
    }
    public void <init>(org.jdom2.output.support.XMLOutputProcessor)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.output.support.XMLOutputProcessor $r1;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.output.support.XMLOutputProcessor;

        specialinvoke r0.<org.jdom2.output.XMLOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.XMLOutputProcessor)>(null, $r1);

        return;
    }
    private static final java.io.Writer makeWriter(java.io.OutputStream, org.jdom2.output.Format) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream $r0;
        org.jdom2.output.Format $r1;
        java.io.BufferedWriter $r2;
        java.io.OutputStreamWriter $r3;
        java.io.BufferedOutputStream $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: org.jdom2.output.Format;

        $r2 = new java.io.BufferedWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.BufferedOutputStream;

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r5 = virtualinvoke $r1.<org.jdom2.output.Format: java.lang.String getEncoding()>();

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r4, $r5);

        specialinvoke $r2.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3);

        return $r2;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.output.XMLOutputter r0;

        r0 := @this: org.jdom2.output.XMLOutputter;

        r0 = virtualinvoke r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.XMLOutputter clone()>();

        return r0;
    }
    public org.jdom2.output.XMLOutputter clone()
    {
        org.jdom2.output.XMLOutputter r0;
        java.lang.CloneNotSupportedException r1;
        java.lang.Object $r2;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        r0 = (org.jdom2.output.XMLOutputter) $r2;

        return r0;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke r1.<java.lang.CloneNotSupportedException: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }
    public java.lang.String escapeAttributeEntities(java.lang.String)
    {
        org.jdom2.output.XMLOutputter r0;
        java.lang.String $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.output.XMLOutputter$DefaultXMLProcessor $r3;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: java.lang.String;

        $r3 = <org.jdom2.output.XMLOutputter: org.jdom2.output.XMLOutputter$DefaultXMLProcessor DEFAULTPROCESSOR>;

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r1 = virtualinvoke $r3.<org.jdom2.output.XMLOutputter$DefaultXMLProcessor: java.lang.String escapeAttributeEntities(java.lang.String,org.jdom2.output.Format)>($r1, $r2);

        return $r1;
    }
    public java.lang.String escapeElementEntities(java.lang.String)
    {
        org.jdom2.output.XMLOutputter r0;
        java.lang.String $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.output.XMLOutputter$DefaultXMLProcessor $r3;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: java.lang.String;

        $r3 = <org.jdom2.output.XMLOutputter: org.jdom2.output.XMLOutputter$DefaultXMLProcessor DEFAULTPROCESSOR>;

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r1 = virtualinvoke $r3.<org.jdom2.output.XMLOutputter$DefaultXMLProcessor: java.lang.String escapeElementEntities(java.lang.String,org.jdom2.output.Format)>($r1, $r2);

        return $r1;
    }
    public org.jdom2.output.Format getFormat()
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.output.Format r1;

        r0 := @this: org.jdom2.output.XMLOutputter;

        r1 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        return r1;
    }
    public org.jdom2.output.support.XMLOutputProcessor getXMLOutputProcessor()
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.output.support.XMLOutputProcessor r1;

        r0 := @this: org.jdom2.output.XMLOutputter;

        r1 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        return r1;
    }
    public final void output(java.util.List, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        java.util.List r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(java.util.List,java.io.Writer)>(r1, $r3);

        return;
    }
    public final void output(java.util.List, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        java.util.List r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,java.util.List)>($r2, $r4, r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void output(org.jdom2.CDATA, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.CDATA $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.CDATA;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.CDATA,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.CDATA, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.CDATA $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.CDATA;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.CDATA)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void output(org.jdom2.Comment, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Comment $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Comment;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Comment,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.Comment, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Comment $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Comment;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Comment)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void output(org.jdom2.DocType, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.DocType $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.DocType;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.DocType,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.DocType, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.DocType $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.DocType;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.DocType)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void output(org.jdom2.Document, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Document $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Document;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Document,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.Document, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Document $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Document;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Document)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void output(org.jdom2.Element, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Element $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Element,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.Element, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Element $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Element)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public void output(org.jdom2.EntityRef, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.EntityRef $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.EntityRef;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.EntityRef,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.EntityRef, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.EntityRef $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.EntityRef;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.EntityRef)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void output(org.jdom2.ProcessingInstruction, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.ProcessingInstruction $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.ProcessingInstruction;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.ProcessingInstruction,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.ProcessingInstruction, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.ProcessingInstruction $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.ProcessingInstruction;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void output(org.jdom2.Text, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Text $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Text;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Text,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void output(org.jdom2.Text, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Text $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Text;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Text)>($r2, $r4, $r1);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final void outputElementContent(org.jdom2.Element, java.io.OutputStream) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Element $r1;
        java.io.OutputStream $r2;
        java.io.Writer $r3;
        org.jdom2.output.Format $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: java.io.OutputStream;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = staticinvoke <org.jdom2.output.XMLOutputter: java.io.Writer makeWriter(java.io.OutputStream,org.jdom2.output.Format)>($r2, $r4);

        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void outputElementContent(org.jdom2.Element,java.io.Writer)>($r1, $r3);

        return;
    }
    public final void outputElementContent(org.jdom2.Element, java.io.Writer) throws java.io.IOException
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Element $r1;
        java.io.Writer $r2;
        org.jdom2.output.support.XMLOutputProcessor $r3;
        org.jdom2.output.Format $r4;
        java.util.List $r5;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: java.io.Writer;

        $r3 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r5 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getContent()>();

        interfaceinvoke $r3.<org.jdom2.output.support.XMLOutputProcessor: void process(java.io.Writer,org.jdom2.output.Format,java.util.List)>($r2, $r4, $r5);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }
    public final java.lang.String outputElementContentString(org.jdom2.Element)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Element $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void outputElementContent(org.jdom2.Element,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(java.util.List)
    {
        org.jdom2.output.XMLOutputter r0;
        java.util.List r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        r1 := @parameter0: java.util.List;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(java.util.List,java.io.Writer)>(r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.CDATA)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.CDATA $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.CDATA;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.CDATA,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.Comment)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Comment $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Comment;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Comment,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.DocType)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.DocType $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.DocType;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.DocType,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.Document)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Document $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Document;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Document,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.Element)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Element $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Element,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.EntityRef)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.EntityRef $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.EntityRef;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.EntityRef,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.ProcessingInstruction)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.ProcessingInstruction $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.ProcessingInstruction;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.ProcessingInstruction,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public final java.lang.String outputString(org.jdom2.Text)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.Text $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.Text;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.jdom2.output.XMLOutputter: void output(org.jdom2.Text,java.io.Writer)>($r1, r2);

     label2:
        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void setFormat(org.jdom2.output.Format)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.output.Format $r1;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.output.Format;

        $r1 = virtualinvoke $r1.<org.jdom2.output.Format: org.jdom2.output.Format clone()>();

        r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat> = $r1;

        return;
    }
    public void setXMLOutputProcessor(org.jdom2.output.support.XMLOutputProcessor)
    {
        org.jdom2.output.XMLOutputter r0;
        org.jdom2.output.support.XMLOutputProcessor $r1;

        r0 := @this: org.jdom2.output.XMLOutputter;

        $r1 := @parameter0: org.jdom2.output.support.XMLOutputProcessor;

        r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.support.XMLOutputProcessor myProcessor> = $r1;

        return;
    }
    public java.lang.String toString()
    {
        org.jdom2.output.XMLOutputter r0;
        java.lang.StringBuilder r1, $r5;
        char c0;
        int i1, i2;
        org.jdom2.output.Format $r2;
        boolean $z0;
        java.lang.String $r3;
        char[] $r4;
        org.jdom2.output.Format$TextMode $r6;

        r0 := @this: org.jdom2.output.XMLOutputter;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XMLOutputter[omitDeclaration = ");

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $z0 = $r2.<org.jdom2.output.Format: boolean omitDeclaration>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoding = ");

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = $r2.<org.jdom2.output.Format: java.lang.String encoding>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("omitEncoding = ");

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $z0 = $r2.<org.jdom2.output.Format: boolean omitEncoding>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("indent = \'");

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = $r2.<org.jdom2.output.Format: java.lang.String indent>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expandEmptyElements = ");

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $z0 = $r2.<org.jdom2.output.Format: boolean expandEmptyElements>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineSeparator = \'");

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r3 = $r2.<org.jdom2.output.Format: java.lang.String lineSeparator>;

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        i1 = lengthof $r4;

        i2 = 0;

     label1:
        if i2 >= i1 goto label7;

        c0 = $r4[i2];

        lookupswitch(c0)
        {
            case 9: goto label6;
            case 10: goto label5;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label4;
            default: goto label2;
        };

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\r");

        goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

        goto label3;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\t");

        goto label3;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("textMode = ");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.jdom2.output.XMLOutputter: org.jdom2.output.Format myFormat>;

        $r6 = $r2.<org.jdom2.output.Format: org.jdom2.output.Format$TextMode mode>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
