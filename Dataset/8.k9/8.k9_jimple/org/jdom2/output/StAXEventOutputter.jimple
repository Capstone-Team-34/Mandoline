org.jdom2.output.StAXEventOutputter extends java.lang.Object implements java.lang.Cloneable
private static final javax.xml.stream.XMLEventFactory DEFAULTEVENTFACTORY
private static final org.jdom2.output.StAXEventOutputter$DefaultStAXEventProcessor DEFAULTPROCESSOR
private javax.xml.stream.XMLEventFactory myEventFactory
private org.jdom2.output.Format myFormat
private org.jdom2.output.support.StAXEventProcessor myProcessor
    static void <clinit>()
    {
        javax.xml.stream.XMLEventFactory $r0;
        org.jdom2.output.StAXEventOutputter$DefaultStAXEventProcessor $r1;

        $r1 = new org.jdom2.output.StAXEventOutputter$DefaultStAXEventProcessor;

        specialinvoke $r1.<org.jdom2.output.StAXEventOutputter$DefaultStAXEventProcessor: void <init>(org.jdom2.output.StAXEventOutputter$1)>(null);

        <org.jdom2.output.StAXEventOutputter: org.jdom2.output.StAXEventOutputter$DefaultStAXEventProcessor DEFAULTPROCESSOR> = $r1;

        $r0 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        <org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory DEFAULTEVENTFACTORY> = $r0;

        return;
    }
    public void <init>()
    {
        org.jdom2.output.StAXEventOutputter r0;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        specialinvoke r0.<org.jdom2.output.StAXEventOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.StAXEventProcessor,javax.xml.stream.XMLEventFactory)>(null, null, null);

        return;
    }
    public void <init>(javax.xml.stream.XMLEventFactory)
    {
        org.jdom2.output.StAXEventOutputter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: javax.xml.stream.XMLEventFactory;

        specialinvoke r0.<org.jdom2.output.StAXEventOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.StAXEventProcessor,javax.xml.stream.XMLEventFactory)>(null, null, $r1);

        return;
    }
    public void <init>(org.jdom2.output.Format)
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.output.Format $r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.output.Format;

        specialinvoke r0.<org.jdom2.output.StAXEventOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.StAXEventProcessor,javax.xml.stream.XMLEventFactory)>($r1, null, null);

        return;
    }
    public void <init>(org.jdom2.output.Format, org.jdom2.output.support.StAXEventProcessor, javax.xml.stream.XMLEventFactory)
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.output.Format $r1;
        org.jdom2.output.support.StAXEventProcessor r2;
        javax.xml.stream.XMLEventFactory r3;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.output.Format;

        r2 := @parameter1: org.jdom2.output.support.StAXEventProcessor;

        r3 := @parameter2: javax.xml.stream.XMLEventFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat> = null;

        r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor> = null;

        r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory> = null;

        if $r1 != null goto label4;

        $r1 = staticinvoke <org.jdom2.output.Format: org.jdom2.output.Format getRawFormat()>();

     label1:
        r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat> = $r1;

        if r2 != null goto label2;

        r2 = <org.jdom2.output.StAXEventOutputter: org.jdom2.output.StAXEventOutputter$DefaultStAXEventProcessor DEFAULTPROCESSOR>;

     label2:
        r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor> = r2;

        if r3 != null goto label3;

        r3 = <org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory DEFAULTEVENTFACTORY>;

     label3:
        r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory> = r3;

        return;

     label4:
        $r1 = virtualinvoke $r1.<org.jdom2.output.Format: org.jdom2.output.Format clone()>();

        goto label1;
    }
    public void <init>(org.jdom2.output.support.StAXEventProcessor)
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.output.support.StAXEventProcessor $r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.output.support.StAXEventProcessor;

        specialinvoke r0.<org.jdom2.output.StAXEventOutputter: void <init>(org.jdom2.output.Format,org.jdom2.output.support.StAXEventProcessor,javax.xml.stream.XMLEventFactory)>(null, $r1, null);

        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.output.StAXEventOutputter r0;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        r0 = virtualinvoke r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.StAXEventOutputter clone()>();

        return r0;
    }
    public org.jdom2.output.StAXEventOutputter clone()
    {
        org.jdom2.output.StAXEventOutputter r0;
        java.lang.CloneNotSupportedException r1;
        java.lang.Object $r2;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        r0 = (org.jdom2.output.StAXEventOutputter) $r2;

        return r0;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke r1.<java.lang.CloneNotSupportedException: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }
    public javax.xml.stream.XMLEventFactory getEventFactory()
    {
        org.jdom2.output.StAXEventOutputter r0;
        javax.xml.stream.XMLEventFactory r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        r1 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        return r1;
    }
    public org.jdom2.output.Format getFormat()
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.output.Format r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        r1 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        return r1;
    }
    public org.jdom2.output.support.StAXEventProcessor getStAXStream()
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.output.support.StAXEventProcessor r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        r1 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        return r1;
    }
    public final void output(java.util.List, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        java.util.List r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,java.util.List)>($r2, $r4, $r5, r1);

        return;
    }
    public final void output(org.jdom2.CDATA, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.CDATA $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.CDATA;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.CDATA)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void output(org.jdom2.Comment, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.Comment $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.Comment;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Comment)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void output(org.jdom2.DocType, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.DocType $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.DocType;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.DocType)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void output(org.jdom2.Document, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.Document $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.Document;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Document)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void output(org.jdom2.Element, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.Element $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Element)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void output(org.jdom2.EntityRef, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.EntityRef $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.EntityRef;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.EntityRef)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void output(org.jdom2.ProcessingInstruction, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.ProcessingInstruction $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.ProcessingInstruction;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.ProcessingInstruction)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void output(org.jdom2.Text, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.Text $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.Text;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Text)>($r2, $r4, $r5, $r1);

        return;
    }
    public final void outputElementContent(org.jdom2.Element, javax.xml.stream.util.XMLEventConsumer) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.Element $r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.jdom2.output.support.StAXEventProcessor $r3;
        org.jdom2.output.Format $r4;
        javax.xml.stream.XMLEventFactory $r5;
        java.util.List $r6;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: javax.xml.stream.util.XMLEventConsumer;

        $r3 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor>;

        $r4 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r5 = r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory>;

        $r6 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getContent()>();

        interfaceinvoke $r3.<org.jdom2.output.support.StAXEventProcessor: void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,java.util.List)>($r2, $r4, $r5, $r6);

        return;
    }
    public void setEventFactory(javax.xml.stream.XMLEventFactory)
    {
        org.jdom2.output.StAXEventOutputter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: javax.xml.stream.XMLEventFactory;

        r0.<org.jdom2.output.StAXEventOutputter: javax.xml.stream.XMLEventFactory myEventFactory> = $r1;

        return;
    }
    public void setFormat(org.jdom2.output.Format)
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.output.Format $r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.output.Format;

        $r1 = virtualinvoke $r1.<org.jdom2.output.Format: org.jdom2.output.Format clone()>();

        r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat> = $r1;

        return;
    }
    public void setStAXEventProcessor(org.jdom2.output.support.StAXEventProcessor)
    {
        org.jdom2.output.StAXEventOutputter r0;
        org.jdom2.output.support.StAXEventProcessor $r1;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        $r1 := @parameter0: org.jdom2.output.support.StAXEventProcessor;

        r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.support.StAXEventProcessor myProcessor> = $r1;

        return;
    }
    public java.lang.String toString()
    {
        org.jdom2.output.StAXEventOutputter r0;
        java.lang.StringBuilder r1, $r5;
        char c0;
        int i1, i2;
        org.jdom2.output.Format $r2;
        boolean $z0;
        java.lang.String $r3;
        char[] $r4;
        org.jdom2.output.Format$TextMode $r6;

        r0 := @this: org.jdom2.output.StAXEventOutputter;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StAXStreamOutputter[omitDeclaration = ");

        $r2 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $z0 = $r2.<org.jdom2.output.Format: boolean omitDeclaration>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoding = ");

        $r2 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r3 = $r2.<org.jdom2.output.Format: java.lang.String encoding>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("omitEncoding = ");

        $r2 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $z0 = $r2.<org.jdom2.output.Format: boolean omitEncoding>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("indent = \'");

        $r2 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r3 = $r2.<org.jdom2.output.Format: java.lang.String indent>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expandEmptyElements = ");

        $r2 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $z0 = $r2.<org.jdom2.output.Format: boolean expandEmptyElements>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineSeparator = \'");

        $r2 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r3 = $r2.<org.jdom2.output.Format: java.lang.String lineSeparator>;

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        i1 = lengthof $r4;

        i2 = 0;

     label1:
        if i2 >= i1 goto label7;

        c0 = $r4[i2];

        lookupswitch(c0)
        {
            case 9: goto label6;
            case 10: goto label5;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label4;
            default: goto label2;
        };

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\r");

        goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

        goto label3;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\t");

        goto label3;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("textMode = ");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.jdom2.output.StAXEventOutputter: org.jdom2.output.Format myFormat>;

        $r6 = $r2.<org.jdom2.output.Format: org.jdom2.output.Format$TextMode mode>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
