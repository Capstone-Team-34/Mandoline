org.jdom2.output.support.AbstractXMLOutputProcessor extends org.jdom2.output.support.AbstractOutputProcessor implements org.jdom2.output.support.XMLOutputProcessor
protected static final java.lang.String CDATAPOST
protected static final java.lang.String CDATAPRE
    public void <init>()
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        specialinvoke r0.<org.jdom2.output.support.AbstractOutputProcessor: void <init>()>();

        return;
    }
    protected void attributeEscapedEntitiesFilter(java.io.Writer, org.jdom2.output.support.FormatStack, java.lang.String) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        java.lang.String $r3;
        boolean $z0;
        org.jdom2.output.EscapeStrategy $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean getEscapeOutput()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r3);

        return;

     label1:
        $r4 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.EscapeStrategy getEscapeStrategy()>();

        $r3 = staticinvoke <org.jdom2.output.Format: java.lang.String escapeAttribute(org.jdom2.output.EscapeStrategy,java.lang.String)>($r4, $r3);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r3);

        return;
    }
    protected void printAttribute(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.Attribute) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Attribute $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Attribute;

        $z0 = virtualinvoke $r3.<org.jdom2.Attribute: boolean isSpecified()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isSpecifiedAttributesOnly()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " ");

        $r4 = virtualinvoke $r3.<org.jdom2.Attribute: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "=");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "\"");

        $r4 = virtualinvoke $r3.<org.jdom2.Attribute: java.lang.String getValue()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void attributeEscapedEntitiesFilter(java.io.Writer,org.jdom2.output.support.FormatStack,java.lang.String)>($r1, $r2, $r4);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "\"");

        return;
    }
    protected void printCDATA(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.CDATA) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.CDATA $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.CDATA;

        $r4 = virtualinvoke $r3.<org.jdom2.CDATA: java.lang.String getText()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textCDATA(java.io.Writer,java.lang.String)>($r1, $r4);

        return;
    }
    protected void printComment(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.Comment) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Comment $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Comment;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "<!--");

        $r4 = virtualinvoke $r3.<org.jdom2.Comment: java.lang.String getText()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "-->");

        return;
    }
    protected void printContent(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.output.support.Walker) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.output.support.Walker $r4;
        boolean $z0;
        org.jdom2.Content $r5;
        java.lang.String $r6;
        int[] $r7;
        org.jdom2.Content$CType $r8;
        int $i0;
        org.jdom2.Comment r9;
        org.jdom2.CDATA r10;
        org.jdom2.DocType r11;
        org.jdom2.Element r12;
        org.jdom2.EntityRef r13;
        org.jdom2.ProcessingInstruction r14;
        org.jdom2.Text r15;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.output.support.Walker;

     label01:
        $z0 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r5 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: org.jdom2.Content next()>();

        if $r5 != null goto label03;

        $r6 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: java.lang.String text()>();

        $z0 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: boolean isCDATA()>();

        if $z0 == 0 goto label02;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textCDATA(java.io.Writer,java.lang.String)>($r1, $r6);

        goto label01;

     label02:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, $r6);

        goto label01;

     label03:
        $r7 = <org.jdom2.output.support.AbstractXMLOutputProcessor$1: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r8 = virtualinvoke $r5.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i0 = virtualinvoke $r8.<org.jdom2.Content$CType: int ordinal()>();

        $i0 = $r7[$i0];

        lookupswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label06;
            case 7: goto label09;
            default: goto label04;
        };

     label04:
        goto label01;

     label05:
        r9 = (org.jdom2.Comment) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printComment(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r2, r9);

        goto label01;

     label06:
        r10 = (org.jdom2.CDATA) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printCDATA(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.CDATA)>($r1, $r2, r10);

        goto label01;

     label07:
        r11 = (org.jdom2.DocType) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printDocType(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r2, r11);

        goto label01;

     label08:
        r12 = (org.jdom2.Element) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printElement(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r2, $r3, r12);

        goto label01;

     label09:
        r13 = (org.jdom2.EntityRef) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printEntityRef(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.EntityRef)>($r1, $r2, r13);

        goto label01;

     label10:
        r14 = (org.jdom2.ProcessingInstruction) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printProcessingInstruction(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, $r2, r14);

        goto label01;

     label11:
        r15 = (org.jdom2.Text) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printText(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, r15);

        goto label01;

     label12:
        return;
    }
    protected void printDeclaration(java.io.Writer, org.jdom2.output.support.FormatStack) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isOmitDeclaration()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isOmitEncoding()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "<?xml version=\"1.0\"?>");

     label2:
        $r3 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r3);

        return;

     label3:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "<?xml version=\"1.0\"");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " encoding=\"");

        $r3 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getEncoding()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r3);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "\"?>");

        goto label2;
    }
    protected void printDocType(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.DocType) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.DocType $r3;
        java.lang.String $r4, $r5, $r6, $r7;
        boolean z0;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.DocType;

        $r4 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getPublicID()>();

        $r5 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getSystemID()>();

        $r6 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getInternalSubset()>();

        z0 = 0;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "<!DOCTYPE ");

        $r7 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getElementName()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r7);

        if $r4 == null goto label1;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " PUBLIC \"");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "\"");

        z0 = 1;

     label1:
        if $r5 == null goto label3;

        if z0 != 0 goto label2;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " SYSTEM");

     label2:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " \"");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r5);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "\"");

     label3:
        if $r6 == null goto label4;

        z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if z0 != 0 goto label4;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " [");

        $r4 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

        $r4 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getInternalSubset()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "]");

     label4:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, ">");

        return;
    }
    protected void printDocument(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.Document) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.Document $r4;
        boolean $z0;
        java.util.List $r5;
        int $i0, i1;
        org.jdom2.Content $r6;
        org.jdom2.output.support.Walker $r7;
        java.lang.String $r8;
        int[] $r9;
        org.jdom2.Content$CType $r10;
        org.jdom2.Comment r11;
        org.jdom2.DocType r12;
        org.jdom2.Element r13;
        org.jdom2.ProcessingInstruction r14;
        org.jdom2.Text r15;
        java.util.ArrayList $r16;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.Document;

        $z0 = virtualinvoke $r4.<org.jdom2.Document: boolean hasRootElement()>();

        if $z0 == 0 goto label03;

        $r5 = virtualinvoke $r4.<org.jdom2.Document: java.util.List getContent()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        $i0 = virtualinvoke $r4.<org.jdom2.Document: int getContentSize()>();

        i1 = 0;

     label02:
        if i1 >= $i0 goto label04;

        $r6 = virtualinvoke $r4.<org.jdom2.Document: org.jdom2.Content getContent(int)>(i1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label02;

     label03:
        $r16 = new java.util.ArrayList;

        $r5 = $r16;

        $i0 = virtualinvoke $r4.<org.jdom2.Document: int getContentSize()>();

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i0);

        goto label01;

     label04:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printDeclaration(java.io.Writer,org.jdom2.output.support.FormatStack)>($r1, $r2);

        $r7 = virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>($r2, $r5, 1);

        $z0 = interfaceinvoke $r7.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label14;

     label05:
        $z0 = interfaceinvoke $r7.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke $r7.<org.jdom2.output.support.Walker: org.jdom2.Content next()>();

        if $r6 != null goto label06;

        $r8 = interfaceinvoke $r7.<org.jdom2.output.support.Walker: java.lang.String text()>();

        if $r8 == null goto label05;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isAllXMLWhitespace(java.lang.String)>($r8);

        if $z0 == 0 goto label05;

        $z0 = interfaceinvoke $r7.<org.jdom2.output.support.Walker: boolean isCDATA()>();

        if $z0 != 0 goto label05;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r8);

        goto label05;

     label06:
        $r9 = <org.jdom2.output.support.AbstractXMLOutputProcessor$1: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r10 = virtualinvoke $r6.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i0 = virtualinvoke $r10.<org.jdom2.Content$CType: int ordinal()>();

        $i0 = $r9[$i0];

        lookupswitch($i0)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            case 5: goto label12;
            default: goto label07;
        };

     label07:
        goto label05;

     label08:
        r11 = (org.jdom2.Comment) $r6;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printComment(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r2, r11);

        goto label05;

     label09:
        r12 = (org.jdom2.DocType) $r6;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printDocType(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r2, r12);

        goto label05;

     label10:
        r13 = (org.jdom2.Element) $r6;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printElement(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r2, $r3, r13);

        goto label05;

     label11:
        r14 = (org.jdom2.ProcessingInstruction) $r6;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printProcessingInstruction(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, $r2, r14);

        goto label05;

     label12:
        r15 = (org.jdom2.Text) $r6;

        $r8 = virtualinvoke r15.<org.jdom2.Text: java.lang.String getText()>();

        if $r8 == null goto label05;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isAllXMLWhitespace(java.lang.String)>($r8);

        if $z0 == 0 goto label05;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r8);

        goto label05;

     label13:
        $r8 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        if $r8 == null goto label14;

        $r8 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r8);

     label14:
        return;
    }
    protected void printElement(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.Element) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.Element $r4;
        org.jdom2.Namespace $r5;
        java.util.List $r6, $r12;
        java.lang.String $r7, $r14;
        java.lang.Iterable $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.Throwable $r11, $r17;
        org.jdom2.Attribute r13;
        org.jdom2.output.Format$TextMode $r15;
        org.jdom2.output.support.Walker $r16;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.Element;

        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void push(org.jdom2.Element)>($r4);

     label01:
        $r6 = virtualinvoke $r4.<org.jdom2.Element: java.util.List getContent()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "<");

        $r7 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r7);

        $r8 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.lang.Iterable addedForward()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label07;

     label04:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.jdom2.Namespace) $r10;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printNamespace(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.Namespace)>($r1, $r2, $r5);

     label05:
        goto label02;

     label06:
        $r11 := @caughtexception;

        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void pop()>();

        throw $r11;

     label07:
        $z0 = virtualinvoke $r4.<org.jdom2.Element: boolean hasAttributes()>();

     label08:
        if $z0 == 0 goto label14;

     label09:
        $r12 = virtualinvoke $r4.<org.jdom2.Element: java.util.List getAttributes()>();

        $r9 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label11:
        if $z0 == 0 goto label14;

     label12:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.jdom2.Attribute) $r10;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printAttribute(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.Attribute)>($r1, $r2, r13);

     label13:
        goto label10;

     label14:
        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

     label15:
        if $z0 == 0 goto label22;

     label16:
        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isExpandEmptyElements()>();

     label17:
        if $z0 == 0 goto label20;

     label18:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "></");

        $r7 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r7);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, ">");

     label19:
        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void pop()>();

        return;

     label20:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " />");

     label21:
        goto label19;

     label22:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void push()>();

     label23:
        $r5 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r7 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace)>("space", $r5);

     label24:
        $r14 = "default";

     label25:
        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label26:
        if $z0 == 0 goto label35;

     label27:
        $r15 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.Format$TextMode getDefaultMode()>();

        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void setTextMode(org.jdom2.output.Format$TextMode)>($r15);

     label28:
        $r16 = virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>($r2, $r6, 1);

        $z0 = interfaceinvoke $r16.<org.jdom2.output.support.Walker: boolean hasNext()>();

     label29:
        if $z0 != 0 goto label44;

     label30:
        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isExpandEmptyElements()>();

     label31:
        if $z0 == 0 goto label42;

     label32:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "></");

        $r7 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r7);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, ">");

     label33:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

     label34:
        goto label19;

     label35:
        $r14 = "preserve";

     label36:
        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label37:
        if $z0 == 0 goto label28;

     label38:
        $r15 = <org.jdom2.output.Format$TextMode: org.jdom2.output.Format$TextMode PRESERVE>;

        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void setTextMode(org.jdom2.output.Format$TextMode)>($r15);

     label39:
        goto label28;

     label40:
        $r17 := @caughtexception;

     label41:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

        throw $r17;

     label42:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " />");

     label43:
        goto label33;

     label44:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, ">");

        $z0 = interfaceinvoke $r16.<org.jdom2.output.support.Walker: boolean isAllText()>();

     label45:
        if $z0 != 0 goto label47;

     label46:
        $r7 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadBetween()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, $r7);

     label47:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printContent(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, $r2, $r3, $r16);

        $z0 = interfaceinvoke $r16.<org.jdom2.output.support.Walker: boolean isAllText()>();

     label48:
        if $z0 != 0 goto label50;

     label49:
        $r7 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadLast()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, $r7);

     label50:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "</");

        $r7 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r7);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, ">");

     label51:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

     label52:
        goto label19;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label11 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label18 to label19 with label06;
        catch java.lang.Throwable from label20 to label21 with label06;
        catch java.lang.Throwable from label22 to label23 with label06;
        catch java.lang.Throwable from label23 to label24 with label40;
        catch java.lang.Throwable from label25 to label26 with label40;
        catch java.lang.Throwable from label27 to label29 with label40;
        catch java.lang.Throwable from label30 to label31 with label40;
        catch java.lang.Throwable from label32 to label33 with label40;
        catch java.lang.Throwable from label33 to label34 with label06;
        catch java.lang.Throwable from label36 to label37 with label40;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label41 to label42 with label06;
        catch java.lang.Throwable from label42 to label43 with label40;
        catch java.lang.Throwable from label44 to label45 with label40;
        catch java.lang.Throwable from label46 to label48 with label40;
        catch java.lang.Throwable from label49 to label51 with label40;
        catch java.lang.Throwable from label51 to label52 with label06;
    }
    protected void printEntityRef(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.EntityRef) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.EntityRef $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.EntityRef;

        $r4 = virtualinvoke $r3.<org.jdom2.EntityRef: java.lang.String getName()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textEntityRef(java.io.Writer,java.lang.String)>($r1, $r4);

        return;
    }
    protected void printNamespace(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.Namespace) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Namespace $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Namespace;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r5 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getURI()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " xmlns");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, ":");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

     label1:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "=\"");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void attributeEscapedEntitiesFilter(java.io.Writer,org.jdom2.output.support.FormatStack,java.lang.String)>($r1, $r2, $r5);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "\"");

        return;
    }
    protected void printProcessingInstruction(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.ProcessingInstruction) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.ProcessingInstruction $r3;
        java.lang.String $r4, $r5, $r6;
        boolean z0, $z1;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.ProcessingInstruction;

        $r4 = virtualinvoke $r3.<org.jdom2.ProcessingInstruction: java.lang.String getTarget()>();

        z0 = 0;

        $z1 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isIgnoreTrAXEscapingPIs()>();

        if $z1 != 0 goto label1;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.transform.disable-output-escaping");

        if $z1 == 0 goto label2;

        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void setEscapeOutput(boolean)>(0);

        z0 = 1;

     label1:
        if z0 != 0 goto label4;

        $r5 = virtualinvoke $r3.<org.jdom2.ProcessingInstruction: java.lang.String getData()>();

        $r6 = "";

        z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if z0 != 0 goto label3;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "<?");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, " ");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r5);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "?>");

        return;

     label2:
        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.transform.enable-output-escaping");

        if $z1 == 0 goto label1;

        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void setEscapeOutput(boolean)>(1);

        z0 = 1;

        goto label1;

     label3:
        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "<?");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r4);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, "?>");

     label4:
        return;
    }
    protected void printText(java.io.Writer, org.jdom2.output.support.FormatStack, org.jdom2.Text) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Text $r3;
        boolean $z0;
        org.jdom2.output.EscapeStrategy $r4;
        java.lang.String $r5, $r6;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Text;

        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean getEscapeOutput()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.EscapeStrategy getEscapeStrategy()>();

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        $r6 = virtualinvoke $r3.<org.jdom2.Text: java.lang.String getText()>();

        $r5 = staticinvoke <org.jdom2.output.Format: java.lang.String escapeText(org.jdom2.output.EscapeStrategy,java.lang.String,java.lang.String)>($r4, $r5, $r6);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, $r5);

        return;

     label1:
        $r5 = virtualinvoke $r3.<org.jdom2.Text: java.lang.String getText()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, $r5);

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, java.util.List) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        java.util.List r3;
        org.jdom2.output.support.FormatStack r4;
        org.jdom2.output.support.Walker $r5;
        org.jdom2.util.NamespaceStack $r6;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        r3 := @parameter2: java.util.List;

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r5 = virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, r3, 1);

        $r6 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r6.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printContent(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r6, $r5);

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.CDATA) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.CDATA $r3;
        org.jdom2.output.support.FormatStack r4;
        java.util.List $r5;
        org.jdom2.output.support.Walker $r6;
        boolean $z0;
        org.jdom2.util.NamespaceStack $r7;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.CDATA;

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r6 = virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, $r5, 1);

        $z0 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r7.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printContent(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r7, $r6);

     label1:
        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.Comment) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Comment $r3;
        org.jdom2.output.support.FormatStack $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Comment;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printComment(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r4, $r3);

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.DocType) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.DocType $r3;
        org.jdom2.output.support.FormatStack $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.DocType;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printDocType(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r4, $r3);

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.Document) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Document $r3;
        org.jdom2.output.support.FormatStack $r4;
        org.jdom2.util.NamespaceStack $r5;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Document;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r5 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r5.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printDocument(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Document)>($r1, $r4, $r5, $r3);

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.Element) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Element $r3;
        org.jdom2.output.support.FormatStack $r4;
        org.jdom2.util.NamespaceStack $r5;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Element;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r5 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r5.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printElement(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r4, $r5, $r3);

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.EntityRef) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.EntityRef $r3;
        org.jdom2.output.support.FormatStack $r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.EntityRef;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printEntityRef(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.EntityRef)>($r1, $r4, $r3);

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.ProcessingInstruction) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.ProcessingInstruction $r3;
        org.jdom2.output.support.FormatStack r4;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.ProcessingInstruction;

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r4.<org.jdom2.output.support.FormatStack: void setIgnoreTrAXEscapingPIs(boolean)>(1);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printProcessingInstruction(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, r4, $r3);

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void process(java.io.Writer, org.jdom2.output.Format, org.jdom2.Text) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Text $r3;
        org.jdom2.output.support.FormatStack r4;
        java.util.List $r5;
        org.jdom2.output.support.Walker $r6;
        boolean $z0;
        org.jdom2.util.NamespaceStack $r7;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Text;

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r6 = virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, $r5, 1);

        $z0 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r7.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void printContent(java.io.Writer,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r7, $r6);

     label1:
        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    protected void textCDATA(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, "<![CDATA[");

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, "]]>");

        return;
    }
    protected void textEntityRef(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,char)>($r1, 38);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void textRaw(java.io.Writer,char)>($r1, 59);

        return;
    }
    protected void textRaw(java.io.Writer, char) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        char $c0;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $c0 := @parameter1: char;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,char)>($r1, $c0);

        return;
    }
    protected void textRaw(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.jdom2.output.support.AbstractXMLOutputProcessor: void write(java.io.Writer,java.lang.String)>($r1, $r2);

        return;
    }
    protected void write(java.io.Writer, char) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        char $c0;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $c0 := @parameter1: char;

        virtualinvoke $r1.<java.io.Writer: void write(int)>($c0);

        return;
    }
    protected void write(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        org.jdom2.output.support.AbstractXMLOutputProcessor r0;
        java.io.Writer $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.output.support.AbstractXMLOutputProcessor;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.lang.String;

        if $r2 != null goto label1;

        return;

     label1:
        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }
