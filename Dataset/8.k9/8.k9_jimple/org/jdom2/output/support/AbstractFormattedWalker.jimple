org.jdom2.output.support.AbstractFormattedWalker extends java.lang.Object implements org.jdom2.output.support.Walker
private static final org.jdom2.CDATA CDATATOKEN
private static final java.util.Iterator EMPTYIT
private final boolean alltext
private final boolean allwhite
private final java.util.Iterator content
private final java.lang.String endofline
private final org.jdom2.output.EscapeStrategy escape
private final org.jdom2.output.support.FormatStack fstack
private boolean hasnext
private final org.jdom2.output.support.AbstractFormattedWalker$MultiText holdingmt
private final java.lang.StringBuilder mtbuffer
private org.jdom2.Content[] mtdata
private boolean mtgottext
private int mtpos
private boolean mtpostpad
private int mtsize
private org.jdom2.Content[] mtsource
private int mtsourcesize
private java.lang.String[] mttext
private java.lang.Boolean mtwasescape
private org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext
private final java.lang.String newlineindent
private org.jdom2.Content pending
private org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt
    static void <clinit>()
    {
        org.jdom2.CDATA $r0;
        org.jdom2.output.support.AbstractFormattedWalker$1 $r1;

        $r0 = new org.jdom2.CDATA;

        specialinvoke $r0.<org.jdom2.CDATA: void <init>(java.lang.String)>("");

        <org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.CDATA CDATATOKEN> = $r0;

        $r1 = new org.jdom2.output.support.AbstractFormattedWalker$1;

        specialinvoke $r1.<org.jdom2.output.support.AbstractFormattedWalker$1: void <init>()>();

        <org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator EMPTYIT> = $r1;

        return;
    }
    public void <init>(java.util.List, org.jdom2.output.support.FormatStack, boolean)
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        java.util.List r1;
        org.jdom2.output.support.FormatStack $r2;
        boolean $z0, $z1, $z2, $z3;
        org.jdom2.output.support.AbstractFormattedWalker$MultiText $r3;
        java.lang.StringBuilder $r4;
        org.jdom2.Content[] $r5;
        java.lang.String[] $r6;
        java.util.Iterator $r7;
        org.jdom2.output.EscapeStrategy $r8;
        java.lang.String $r9;
        org.jdom2.Content $r10;
        java.lang.Object $r11;
        int $i0;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $z0 := @parameter2: boolean;

        $z1 = 0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending> = null;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = 1;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext> = null;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = null;

        $r3 = new org.jdom2.output.support.AbstractFormattedWalker$MultiText;

        specialinvoke $r3.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void <init>(org.jdom2.output.support.AbstractFormattedWalker,org.jdom2.output.support.AbstractFormattedWalker$1)>(r0, null);

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText holdingmt> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.StringBuilder mtbuffer> = $r4;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean mtgottext> = 0;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize> = 0;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize> = 0;

        $r5 = newarray (org.jdom2.Content)[8];

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtsource> = $r5;

        $r5 = newarray (org.jdom2.Content)[8];

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtdata> = $r5;

        $r6 = newarray (java.lang.String)[8];

        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String[] mttext> = $r6;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos> = -1;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.FormatStack fstack> = $r2;

        $z2 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label06;

        $r7 = <org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator EMPTYIT>;

     label01:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator content> = $r7;

        if $z0 == 0 goto label07;

        $r8 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.EscapeStrategy getEscapeStrategy()>();

     label02:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.EscapeStrategy escape> = $r8;

        $r9 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadBetween()>();

        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent> = $r9;

        $r9 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLevelEOL()>();

        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String endofline> = $r9;

        $r7 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator content>;

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label08;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean alltext> = 1;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean allwhite> = 1;

     label03:
        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        if $r3 != null goto label04;

        $r10 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r10 == null goto label05;

     label04:
        $z1 = 1;

     label05:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = $z1;

        return;

     label06:
        $r7 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        goto label01;

     label07:
        $r8 = null;

        goto label02;

     label08:
        $z0 = 0;

        $z2 = 0;

        $r7 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator content>;

        $r11 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.jdom2.Content) $r11;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending> = $r10;

        $r10 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        $z3 = specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean isTextLike(org.jdom2.Content)>($r10);

        if $z3 == 0 goto label10;

        $r3 = specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText buildMultiText(boolean)>(1);

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = $r3;

        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize>;

        virtualinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: void analyzeMultiText(org.jdom2.output.support.AbstractFormattedWalker$MultiText,int,int)>($r3, 0, $i0);

        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        virtualinvoke $r3.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void done()>();

        $r10 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r10 != null goto label09;

        $z0 = 1;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        if $i0 != 0 goto label11;

        $z2 = 1;

     label09:
        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        if $i0 != 0 goto label10;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = null;

     label10:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean alltext> = $z0;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean allwhite> = $z2;

        goto label03;

     label11:
        $z2 = 0;

        goto label09;
    }
    static int access$000(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        int i0;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        i0 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        return i0;
    }
    static int access$008(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        int $i0, $i1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        $i0 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        $i1 = $i0 + 1;

        $r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize> = $i1;

        return $i0;
    }
    static org.jdom2.Content[] access$100(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        org.jdom2.Content[] r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        r1 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtdata>;

        return r1;
    }
    static java.lang.String access$1000(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        java.lang.String r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        r1 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent>;

        return r1;
    }
    static org.jdom2.Content[] access$102(org.jdom2.output.support.AbstractFormattedWalker, org.jdom2.Content[])
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        org.jdom2.Content[] $r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        $r1 := @parameter1: org.jdom2.Content[];

        $r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtdata> = $r1;

        return $r1;
    }
    static java.lang.String[] access$200(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        java.lang.String[] r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        r1 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String[] mttext>;

        return r1;
    }
    static java.lang.String[] access$202(org.jdom2.output.support.AbstractFormattedWalker, java.lang.String[])
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        $r1 := @parameter1: java.lang.String[];

        $r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String[] mttext> = $r1;

        return $r1;
    }
    static java.lang.StringBuilder access$300(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        java.lang.StringBuilder r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        r1 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.StringBuilder mtbuffer>;

        return r1;
    }
    static boolean access$400(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        boolean z0;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        z0 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean mtgottext>;

        return z0;
    }
    static boolean access$402(org.jdom2.output.support.AbstractFormattedWalker, boolean)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        boolean $z0;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        $z0 := @parameter1: boolean;

        $r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean mtgottext> = $z0;

        return $z0;
    }
    static org.jdom2.output.EscapeStrategy access$500(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        org.jdom2.output.EscapeStrategy r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        r1 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.EscapeStrategy escape>;

        return r1;
    }
    static org.jdom2.output.support.FormatStack access$600(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        org.jdom2.output.support.FormatStack r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        r1 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.FormatStack fstack>;

        return r1;
    }
    static java.lang.String access$700(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        java.lang.String r1;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        r1 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String endofline>;

        return r1;
    }
    static org.jdom2.CDATA access$800()
    {
        org.jdom2.CDATA r0;

        r0 = <org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.CDATA CDATATOKEN>;

        return r0;
    }
    static boolean access$900(org.jdom2.output.support.AbstractFormattedWalker)
    {
        org.jdom2.output.support.AbstractFormattedWalker $r0;
        boolean z0;

        $r0 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker;

        z0 = $r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean mtpostpad>;

        return z0;
    }
    private final org.jdom2.output.support.AbstractFormattedWalker$MultiText buildMultiText(boolean)
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        boolean $z0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        int $i0, $i1;
        org.jdom2.Content[] $r3, $r4;
        java.lang.Object[] $r5;
        org.jdom2.Content $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.jdom2.output.support.FormatStack $r9;
        java.lang.Boolean $r10;
        org.jdom2.output.support.AbstractFormattedWalker$MultiText r11;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        $z0 := @parameter0: boolean;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.StringBuilder mtbuffer>;

        $r1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label1:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize> = 0;

     label2:
        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize>;

        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtsource>;

        $i1 = lengthof $r3;

        if $i0 < $i1 goto label3;

        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtsource>;

        $r4 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtsource>;

        $i0 = lengthof $r4;

        $i0 = $i0 * 2;

        $r5 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r3 = (org.jdom2.Content[]) $r5;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtsource> = $r3;

     label3:
        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtsource>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize>;

        $i1 = $i0 + 1;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize> = $i1;

        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        $r3[$i0] = $r6;

        $r7 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator content>;

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator content>;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.jdom2.Content) $r8;

     label4:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending> = $r6;

        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r6 == null goto label5;

        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        $z0 = specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean isTextLike(org.jdom2.Content)>($r6);

        if $z0 != 0 goto label2;

     label5:
        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r6 == null goto label8;

        $z0 = 1;

     label6:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean mtpostpad> = $z0;

        $r9 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.FormatStack fstack>;

        $z0 = virtualinvoke $r9.<org.jdom2.output.support.FormatStack: boolean getEscapeOutput()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.Boolean mtwasescape> = $r10;

        r11 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText holdingmt>;

        return r11;

     label7:
        $r6 = null;

        goto label4;

     label8:
        $z0 = 0;

        goto label6;
    }
    private final boolean isTextLike(org.jdom2.Content)
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        org.jdom2.Content $r1;
        int[] $r2;
        org.jdom2.Content$CType $r3;
        int $i0;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = <org.jdom2.output.support.AbstractFormattedWalker$2: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r3 = virtualinvoke $r1.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i0 = virtualinvoke $r3.<org.jdom2.Content$CType: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    private void resetMultiText()
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        java.lang.StringBuilder $r1;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize> = 0;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos> = -1;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize> = 0;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean mtgottext> = 0;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean mtpostpad> = 0;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.Boolean mtwasescape> = null;

        $r1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.StringBuilder mtbuffer>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        return;
    }
protected abstract void analyzeMultiText(org.jdom2.output.support.AbstractFormattedWalker$MultiText, int, int) { 
// no body
} 
    protected final org.jdom2.Content get(int)
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        int $i0;
        org.jdom2.Content[] $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        $i0 := @parameter0: int;

        $r1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtsource>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public final boolean hasNext()
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        boolean z0;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        z0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext>;

        return z0;
    }
    public final boolean isAllText()
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        boolean z0;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        z0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean alltext>;

        return z0;
    }
    public final boolean isAllWhitespace()
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        boolean z0;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        z0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean allwhite>;

        return z0;
    }
    public final boolean isCDATA()
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        org.jdom2.output.support.AbstractFormattedWalker$MultiText $r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;
        org.jdom2.Content[] $r4;
        org.jdom2.Content $r5;
        org.jdom2.CDATA $r6;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        $r1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext>;

        if $r1 == null goto label2;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $i1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        if $i0 < $i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String[] mttext>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $r3 = $r2[$i0];

        if $r3 == null goto label2;

        $r4 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtdata>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $r5 = $r4[$i0];

        $r6 = <org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.CDATA CDATATOKEN>;

        if $r5 != $r6 goto label2;

        return 1;

     label2:
        return 0;
    }
    public final org.jdom2.Content next()
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        boolean $z0, $z1, $z2;
        java.util.NoSuchElementException $r1;
        org.jdom2.output.support.AbstractFormattedWalker$MultiText $r2;
        int $i0, $i1;
        java.lang.Boolean $r3;
        org.jdom2.output.support.FormatStack $r4;
        java.lang.String[] $r5;
        java.lang.String $r6;
        org.jdom2.Content[] $r7;
        org.jdom2.Content r8, $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        $z0 = 1;

        $z1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext>;

        if $z1 != 0 goto label01;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Cannot walk off end of Content");

        throw $r1;

     label01:
        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext>;

        if $r2 == null goto label02;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $i0 = $i0 + 1;

        $i1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        if $i0 < $i1 goto label02;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext> = null;

        specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: void resetMultiText()>();

     label02:
        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        if $r2 == null goto label04;

        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.Boolean mtwasescape>;

        if $r3 == null goto label03;

        $r4 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.FormatStack fstack>;

        $z1 = virtualinvoke $r4.<org.jdom2.output.support.FormatStack: boolean getEscapeOutput()>();

        $r3 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.Boolean mtwasescape>;

        $z2 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == $z2 goto label03;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize> = 0;

        $r4 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.FormatStack fstack>;

        $z1 = virtualinvoke $r4.<org.jdom2.output.support.FormatStack: boolean getEscapeOutput()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.Boolean mtwasescape> = $r3;

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize>;

        virtualinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: void analyzeMultiText(org.jdom2.output.support.AbstractFormattedWalker$MultiText,int,int)>($r2, 0, $i0);

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        virtualinvoke $r2.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void done()>();

     label03:
        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext> = $r2;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = null;

     label04:
        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext>;

        if $r2 == null goto label10;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos> = $i0;

        $r5 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String[] mttext>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $r6 = $r5[$i0];

        if $r6 != null goto label08;

        $r7 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content[] mtdata>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        r8 = $r7[$i0];

     label05:
        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $i0 = $i0 + 1;

        $i1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        if $i0 < $i1 goto label06;

        $r9 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r9 == null goto label09;

     label06:
        $z0 = 1;

     label07:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = $z0;

        return r8;

     label08:
        r8 = null;

        goto label05;

     label09:
        $z0 = 0;

        goto label07;

     label10:
        r8 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        $r10 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator content>;

        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r10 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.util.Iterator content>;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.jdom2.Content) $r11;

     label11:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending> = $r9;

        $r9 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r9 != null goto label14;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = 0;

     label12:
        return r8;

     label13:
        $r9 = null;

        goto label11;

     label14:
        $r9 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        $z1 = specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean isTextLike(org.jdom2.Content)>($r9);

        if $z1 == 0 goto label19;

        $r2 = specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText buildMultiText(boolean)>(0);

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = $r2;

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsourcesize>;

        virtualinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: void analyzeMultiText(org.jdom2.output.support.AbstractFormattedWalker$MultiText,int,int)>($r2, 0, $i0);

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        virtualinvoke $r2.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void done()>();

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        if $i0 <= 0 goto label15;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = 1;

        goto label12;

     label15:
        $r9 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r9 == null goto label16;

        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent>;

        if $r6 == null goto label16;

        specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: void resetMultiText()>();

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText holdingmt>;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = $r2;

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent>;

        staticinvoke <org.jdom2.output.support.AbstractFormattedWalker$MultiText: void access$1200(org.jdom2.output.support.AbstractFormattedWalker$MultiText,java.lang.String)>($r2, $r6);

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        virtualinvoke $r2.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void done()>();

        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = 1;

        goto label12;

     label16:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = null;

        $r9 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.Content pending>;

        if $r9 == null goto label18;

     label17:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = $z0;

        goto label12;

     label18:
        $z0 = 0;

        goto label17;

     label19:
        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent>;

        if $r6 == null goto label20;

        specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: void resetMultiText()>();

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText holdingmt>;

        r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt> = $r2;

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        $r6 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String newlineindent>;

        staticinvoke <org.jdom2.output.support.AbstractFormattedWalker$MultiText: void access$1200(org.jdom2.output.support.AbstractFormattedWalker$MultiText,java.lang.String)>($r2, $r6);

        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText pendingmt>;

        virtualinvoke $r2.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void done()>();

     label20:
        r0.<org.jdom2.output.support.AbstractFormattedWalker: boolean hasnext> = 1;

        goto label12;
    }
    public final java.lang.String text()
    {
        org.jdom2.output.support.AbstractFormattedWalker r0;
        org.jdom2.output.support.AbstractFormattedWalker$MultiText $r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.jdom2.output.support.AbstractFormattedWalker;

        $r1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: org.jdom2.output.support.AbstractFormattedWalker$MultiText multitext>;

        if $r1 == null goto label1;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $i1 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtsize>;

        if $i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<org.jdom2.output.support.AbstractFormattedWalker: java.lang.String[] mttext>;

        $i0 = r0.<org.jdom2.output.support.AbstractFormattedWalker: int mtpos>;

        $r3 = $r2[$i0];

        return $r3;
    }
