org.jdom2.output.support.WalkerPRESERVE extends java.lang.Object implements org.jdom2.output.support.Walker
private static final java.util.Iterator EMPTYIT
private final boolean alltext
private final java.util.Iterator iter
    static void <clinit>()
    {
        org.jdom2.output.support.WalkerPRESERVE$1 $r0;

        $r0 = new org.jdom2.output.support.WalkerPRESERVE$1;

        specialinvoke $r0.<org.jdom2.output.support.WalkerPRESERVE$1: void <init>()>();

        <org.jdom2.output.support.WalkerPRESERVE: java.util.Iterator EMPTYIT> = $r0;

        return;
    }
    public void <init>(java.util.List)
    {
        org.jdom2.output.support.WalkerPRESERVE r0;
        java.util.List r1;
        boolean $z0;
        java.util.Iterator $r2;

        r0 := @this: org.jdom2.output.support.WalkerPRESERVE;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r0.<org.jdom2.output.support.WalkerPRESERVE: boolean alltext> = 1;

        $r2 = <org.jdom2.output.support.WalkerPRESERVE: java.util.Iterator EMPTYIT>;

        r0.<org.jdom2.output.support.WalkerPRESERVE: java.util.Iterator iter> = $r2;

        return;

     label1:
        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        r0.<org.jdom2.output.support.WalkerPRESERVE: java.util.Iterator iter> = $r2;

        r0.<org.jdom2.output.support.WalkerPRESERVE: boolean alltext> = 0;

        return;
    }
    public boolean hasNext()
    {
        org.jdom2.output.support.WalkerPRESERVE r0;
        boolean $z0;
        java.util.Iterator $r1;

        r0 := @this: org.jdom2.output.support.WalkerPRESERVE;

        $r1 = r0.<org.jdom2.output.support.WalkerPRESERVE: java.util.Iterator iter>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }
    public boolean isAllText()
    {
        org.jdom2.output.support.WalkerPRESERVE r0;
        boolean z0;

        r0 := @this: org.jdom2.output.support.WalkerPRESERVE;

        z0 = r0.<org.jdom2.output.support.WalkerPRESERVE: boolean alltext>;

        return z0;
    }
    public boolean isAllWhitespace()
    {
        org.jdom2.output.support.WalkerPRESERVE r0;
        boolean z0;

        r0 := @this: org.jdom2.output.support.WalkerPRESERVE;

        z0 = r0.<org.jdom2.output.support.WalkerPRESERVE: boolean alltext>;

        return z0;
    }
    public boolean isCDATA()
    {
        org.jdom2.output.support.WalkerPRESERVE r0;

        r0 := @this: org.jdom2.output.support.WalkerPRESERVE;

        return 0;
    }
    public org.jdom2.Content next()
    {
        org.jdom2.output.support.WalkerPRESERVE r0;
        java.lang.Object $r1;
        java.util.Iterator $r2;
        org.jdom2.Content $r3;

        r0 := @this: org.jdom2.output.support.WalkerPRESERVE;

        $r2 = r0.<org.jdom2.output.support.WalkerPRESERVE: java.util.Iterator iter>;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.jdom2.Content) $r1;

        return $r3;
    }
    public java.lang.String text()
    {
        org.jdom2.output.support.WalkerPRESERVE r0;

        r0 := @this: org.jdom2.output.support.WalkerPRESERVE;

        return null;
    }
