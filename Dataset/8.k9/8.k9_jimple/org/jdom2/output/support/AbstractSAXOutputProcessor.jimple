org.jdom2.output.support.AbstractSAXOutputProcessor extends org.jdom2.output.support.AbstractOutputProcessor implements org.jdom2.output.support.SAXOutputProcessor
    public void <init>()
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        specialinvoke r0.<org.jdom2.output.support.AbstractOutputProcessor: void <init>()>();

        return;
    }
    private org.xml.sax.XMLReader createDTDParser(org.jdom2.output.support.SAXTarget) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.xml.sax.XMLReader $r2;
        org.xml.sax.DTDHandler $r3;
        org.xml.sax.EntityResolver $r4;
        org.xml.sax.ext.LexicalHandler $r5;
        org.xml.sax.ext.DeclHandler $r6;
        org.xml.sax.helpers.DefaultHandler $r7;
        java.lang.Exception r8;
        org.xml.sax.SAXException $r9, $r10, r11, $r12;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

     label01:
        $r2 = virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: org.xml.sax.XMLReader createParser()>();

     label02:
        $r3 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.DTDHandler getDTDHandler()>();

        if $r3 == null goto label03;

        $r3 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.DTDHandler getDTDHandler()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setDTDHandler(org.xml.sax.DTDHandler)>($r3);

     label03:
        $r4 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.EntityResolver getEntityResolver()>();

        if $r4 == null goto label04;

        $r4 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.EntityResolver getEntityResolver()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>($r4);

     label04:
        $r5 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r5 == null goto label06;

     label05:
        $r5 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>("http://xml.org/sax/properties/lexical-handler", $r5);

     label06:
        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.DeclHandler getDeclHandler()>();

        if $r6 == null goto label08;

     label07:
        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.DeclHandler getDeclHandler()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>("http://xml.org/sax/properties/declaration-handler", $r6);

     label08:
        $r7 = new org.xml.sax.helpers.DefaultHandler;

        specialinvoke $r7.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)>($r7);

        return $r2;

     label09:
        r8 := @caughtexception;

        $r9 = new org.xml.sax.SAXException;

        specialinvoke $r9.<org.xml.sax.SAXException: void <init>(java.lang.String,java.lang.Exception)>("Error in SAX parser allocation", r8);

        throw $r9;

     label10:
        $r9 := @caughtexception;

     label11:
        $r5 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>("http://xml.org/sax/handlers/LexicalHandler", $r5);

     label12:
        goto label06;

     label13:
        $r10 := @caughtexception;

        goto label06;

     label14:
        r11 := @caughtexception;

     label15:
        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.DeclHandler getDeclHandler()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>("http://xml.org/sax/handlers/DeclHandler", $r6);

     label16:
        goto label08;

     label17:
        $r12 := @caughtexception;

        goto label08;

        catch java.lang.Exception from label01 to label02 with label09;
        catch org.xml.sax.SAXException from label05 to label06 with label10;
        catch org.xml.sax.SAXException from label07 to label08 with label14;
        catch org.xml.sax.SAXException from label11 to label12 with label13;
        catch org.xml.sax.SAXException from label15 to label16 with label17;
    }
    private static java.lang.String getAttributeTypeName(org.jdom2.AttributeType)
    {
        org.jdom2.AttributeType $r0;
        int[] $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @parameter0: org.jdom2.AttributeType;

        $r1 = <org.jdom2.output.support.AbstractSAXOutputProcessor$1: int[] $SwitchMap$org$jdom2$AttributeType>;

        $i0 = virtualinvoke $r0.<org.jdom2.AttributeType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = virtualinvoke $r0.<org.jdom2.AttributeType: java.lang.String name()>();

        return $r2;

     label2:
        return "CDATA";
    }
    private static void locate(org.jdom2.output.support.SAXTarget)
    {
        org.jdom2.output.support.SAXTarget $r0;
        org.xml.sax.ContentHandler $r1;
        org.jdom2.output.support.SAXTarget$SAXLocator $r2;

        $r0 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r1 = virtualinvoke $r0.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $r2 = virtualinvoke $r0.<org.jdom2.output.support.SAXTarget: org.jdom2.output.support.SAXTarget$SAXLocator getLocator()>();

        interfaceinvoke $r1.<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>($r2);

        return;
    }
    protected org.xml.sax.XMLReader createParser() throws java.lang.Exception
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.xml.sax.XMLReader r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        java.lang.IllegalAccessException $r7;
        java.lang.NoSuchMethodException $r8;
        java.lang.reflect.InvocationTargetException $r9;
        java.lang.ClassNotFoundException $r10;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        r1 = null;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("javax.xml.parsers.SAXParserFactory");

     label02:
        $r3 = newarray (java.lang.Class)[0];

     label03:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newInstance", $r3);

     label04:
        $r5 = newarray (java.lang.Object)[0];

     label05:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label06:
        $r3 = newarray (java.lang.Class)[0];

     label07:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newSAXParser", $r3);

     label08:
        $r5 = newarray (java.lang.Object)[0];

     label09:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

        $r2 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

     label10:
        $r3 = newarray (java.lang.Class)[0];

     label11:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getXMLReader", $r3);

     label12:
        $r5 = newarray (java.lang.Object)[0];

     label13:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

     label14:
        r1 = (org.xml.sax.XMLReader) $r6;

     label15:
        if r1 != null goto label20;

        r1 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader(java.lang.String)>("org.apache.xerces.parsers.SAXParser");

        return r1;

     label16:
        $r7 := @caughtexception;

        goto label15;

     label17:
        $r8 := @caughtexception;

        goto label15;

     label18:
        $r9 := @caughtexception;

        goto label15;

     label19:
        $r10 := @caughtexception;

        goto label15;

     label20:
        return r1;

        catch java.lang.ClassNotFoundException from label01 to label02 with label19;
        catch java.lang.ClassNotFoundException from label03 to label04 with label19;
        catch java.lang.ClassNotFoundException from label05 to label06 with label19;
        catch java.lang.ClassNotFoundException from label07 to label08 with label19;
        catch java.lang.ClassNotFoundException from label09 to label10 with label19;
        catch java.lang.ClassNotFoundException from label11 to label12 with label19;
        catch java.lang.ClassNotFoundException from label13 to label14 with label19;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label18;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label18;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label18;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label18;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label18;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label18;
        catch java.lang.reflect.InvocationTargetException from label13 to label14 with label18;
        catch java.lang.NoSuchMethodException from label01 to label02 with label17;
        catch java.lang.NoSuchMethodException from label03 to label04 with label17;
        catch java.lang.NoSuchMethodException from label05 to label06 with label17;
        catch java.lang.NoSuchMethodException from label07 to label08 with label17;
        catch java.lang.NoSuchMethodException from label09 to label10 with label17;
        catch java.lang.NoSuchMethodException from label11 to label12 with label17;
        catch java.lang.NoSuchMethodException from label13 to label14 with label17;
        catch java.lang.IllegalAccessException from label01 to label02 with label16;
        catch java.lang.IllegalAccessException from label03 to label04 with label16;
        catch java.lang.IllegalAccessException from label05 to label06 with label16;
        catch java.lang.IllegalAccessException from label07 to label08 with label16;
        catch java.lang.IllegalAccessException from label09 to label10 with label16;
        catch java.lang.IllegalAccessException from label11 to label12 with label16;
        catch java.lang.IllegalAccessException from label13 to label14 with label16;
    }
    protected void printCDATA(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.CDATA) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.CDATA $r3;
        org.xml.sax.ext.LexicalHandler $r4;
        java.lang.String $r5;
        char[] $r6;
        org.xml.sax.ContentHandler $r7;
        int $i0;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.CDATA;

        $r4 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r5 = virtualinvoke $r3.<org.jdom2.CDATA: java.lang.String getText()>();

        $r6 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

        if $r4 == null goto label1;

        interfaceinvoke $r4.<org.xml.sax.ext.LexicalHandler: void startCDATA()>();

        $r7 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $i0 = lengthof $r6;

        interfaceinvoke $r7.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r6, 0, $i0);

        interfaceinvoke $r4.<org.xml.sax.ext.LexicalHandler: void endCDATA()>();

        return;

     label1:
        $r7 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $i0 = lengthof $r6;

        interfaceinvoke $r7.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r6, 0, $i0);

        return;
    }
    protected void printComment(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.Comment) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Comment $r3;
        int $i0;
        org.xml.sax.ext.LexicalHandler $r4;
        java.lang.String $r5;
        char[] $r6;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Comment;

        $r4 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r3.<org.jdom2.Comment: java.lang.String getText()>();

        $r6 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

        $r4 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $i0 = lengthof $r6;

        interfaceinvoke $r4.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r6, 0, $i0);

     label1:
        return;
    }
    protected void printContent(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.output.support.Walker) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.output.support.Walker $r4;
        boolean $z0;
        org.jdom2.Content $r5;
        java.lang.String $r6;
        org.jdom2.CDATA $r7;
        org.jdom2.Text $r8;
        int[] $r9;
        org.jdom2.Content$CType $r10;
        int $i0;
        org.jdom2.Comment r11;
        org.jdom2.Element r12;
        org.jdom2.EntityRef r13;
        org.jdom2.ProcessingInstruction r14;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.output.support.Walker;

     label01:
        $z0 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r5 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: org.jdom2.Content next()>();

        if $r5 != null goto label03;

        $r6 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: java.lang.String text()>();

        $z0 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: boolean isCDATA()>();

        if $z0 == 0 goto label02;

        $r7 = new org.jdom2.CDATA;

        specialinvoke $r7.<org.jdom2.CDATA: void <init>(java.lang.String)>($r6);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printCDATA(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.CDATA)>($r1, $r2, $r7);

        goto label01;

     label02:
        $r8 = new org.jdom2.Text;

        specialinvoke $r8.<org.jdom2.Text: void <init>(java.lang.String)>($r6);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printText(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r8);

        goto label01;

     label03:
        $r9 = <org.jdom2.output.support.AbstractSAXOutputProcessor$1: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r10 = virtualinvoke $r5.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i0 = virtualinvoke $r10.<org.jdom2.Content$CType: int ordinal()>();

        $i0 = $r9[$i0];

        lookupswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label01;
            case 3: goto label07;
            case 4: goto label09;
            case 5: goto label06;
            case 6: goto label08;
            case 7: goto label10;
            default: goto label04;
        };

     label04:
        goto label01;

     label05:
        r11 = (org.jdom2.Comment) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printComment(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r2, r11);

        goto label01;

     label06:
        $r7 = (org.jdom2.CDATA) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printCDATA(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.CDATA)>($r1, $r2, $r7);

        goto label01;

     label07:
        r12 = (org.jdom2.Element) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printElement(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r2, $r3, r12);

        goto label01;

     label08:
        r13 = (org.jdom2.EntityRef) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printEntityRef(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.EntityRef)>($r1, $r2, r13);

        goto label01;

     label09:
        r14 = (org.jdom2.ProcessingInstruction) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printProcessingInstruction(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, $r2, r14);

        goto label01;

     label10:
        $r8 = (org.jdom2.Text) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printText(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r8);

        goto label01;

     label11:
        return;
    }
    protected void printDocType(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.DocType) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.DocType $r3;
        java.io.IOException r4;
        java.io.StringReader $r5;
        org.xml.sax.DTDHandler $r6;
        org.xml.sax.ext.DeclHandler $r7;
        org.jdom2.output.XMLOutputter $r8;
        java.lang.String $r9;
        org.xml.sax.XMLReader $r10;
        org.xml.sax.InputSource $r11;
        org.xml.sax.SAXException $r12;
        org.xml.sax.SAXParseException $r13;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.DocType;

        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.DTDHandler getDTDHandler()>();

        $r7 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ext.DeclHandler getDeclHandler()>();

        if $r3 == null goto label8;

        if $r6 != null goto label1;

        if $r7 == null goto label8;

     label1:
        $r8 = new org.jdom2.output.XMLOutputter;

        specialinvoke $r8.<org.jdom2.output.XMLOutputter: void <init>()>();

        $r9 = virtualinvoke $r8.<org.jdom2.output.XMLOutputter: java.lang.String outputString(org.jdom2.DocType)>($r3);

     label2:
        $r10 = specialinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: org.xml.sax.XMLReader createDTDParser(org.jdom2.output.support.SAXTarget)>($r1);

     label3:
        $r11 = new org.xml.sax.InputSource;

        $r5 = new java.io.StringReader;

     label4:
        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r9);

        specialinvoke $r11.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r5);

        interfaceinvoke $r10.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r11);

     label5:
        return;

     label6:
        r4 := @caughtexception;

        $r12 = new org.xml.sax.SAXException;

        specialinvoke $r12.<org.xml.sax.SAXException: void <init>(java.lang.String,java.lang.Exception)>("DTD parsing error", r4);

        throw $r12;

     label7:
        $r13 := @caughtexception;

     label8:
        return;

        catch org.xml.sax.SAXParseException from label2 to label3 with label7;
        catch org.xml.sax.SAXParseException from label4 to label5 with label7;
        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }
    protected void printDocument(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.Document) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.Document $r4;
        org.xml.sax.ContentHandler $r5;
        boolean $z0;
        org.jdom2.DocType $r6;
        int $i0, i1, $i2;
        org.jdom2.Content $r7;
        org.jdom2.output.support.SAXTarget$SAXLocator $r8;
        int[] $r9;
        org.jdom2.Content$CType $r10;
        org.jdom2.Comment r11;
        org.jdom2.Element r12;
        org.jdom2.ProcessingInstruction r13;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.Document;

        if $r4 != null goto label1;

        return;

     label1:
        $r5 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startDocument()>();

        $z0 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: boolean isReportDTDEvents()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke $r4.<org.jdom2.Document: org.jdom2.DocType getDocType()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printDocType(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r2, $r6);

     label2:
        $i0 = virtualinvoke $r4.<org.jdom2.Document: int getContentSize()>();

        if $i0 <= 0 goto label8;

        i1 = 0;

     label3:
        if i1 >= $i0 goto label8;

        $r7 = virtualinvoke $r4.<org.jdom2.Document: org.jdom2.Content getContent(int)>(i1);

        $r8 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.jdom2.output.support.SAXTarget$SAXLocator getLocator()>();

        virtualinvoke $r8.<org.jdom2.output.support.SAXTarget$SAXLocator: void setNode(java.lang.Object)>($r7);

        $r9 = <org.jdom2.output.support.AbstractSAXOutputProcessor$1: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r10 = virtualinvoke $r7.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i2 = virtualinvoke $r10.<org.jdom2.Content$CType: int ordinal()>();

        $i2 = $r9[$i2];

        lookupswitch($i2)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label4;
        };

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        r11 = (org.jdom2.Comment) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printComment(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r2, r11);

        goto label4;

     label6:
        r12 = (org.jdom2.Element) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printElement(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r2, $r3, r12);

        goto label4;

     label7:
        r13 = (org.jdom2.ProcessingInstruction) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printProcessingInstruction(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, $r2, r13);

        goto label4;

     label8:
        $r5 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void endDocument()>();

        return;
    }
    protected void printElement(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.Element) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.Element $r4;
        org.xml.sax.helpers.AttributesImpl r5;
        org.xml.sax.ContentHandler $r6, $r26;
        org.jdom2.output.support.SAXTarget$SAXLocator $r7;
        java.lang.Object $r8, $r11;
        java.lang.Iterable $r9;
        java.util.Iterator $r10;
        boolean $z0;
        org.jdom2.Namespace r12;
        java.lang.String $r13, $r14, $r19, $r21, $r22;
        java.lang.Throwable $r15, $r27;
        java.lang.StringBuilder $r16;
        java.util.List $r17;
        org.jdom2.Attribute r18;
        org.jdom2.AttributeType $r20;
        org.jdom2.output.Format$TextMode $r23;
        org.jdom2.output.support.Walker $r24;
        org.jdom2.Text $r25;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.Element;

        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $r7 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.jdom2.output.support.SAXTarget$SAXLocator getLocator()>();

        $r8 = virtualinvoke $r7.<org.jdom2.output.support.SAXTarget$SAXLocator: java.lang.Object getNode()>();

        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void push(org.jdom2.Element)>($r4);

     label01:
        $r7 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.jdom2.output.support.SAXTarget$SAXLocator getLocator()>();

        virtualinvoke $r7.<org.jdom2.output.support.SAXTarget$SAXLocator: void setNode(java.lang.Object)>($r4);

        r5 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke r5.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        $r9 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.lang.Iterable addedForward()>();

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label13;

     label04:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.jdom2.Namespace) $r11;

        $r13 = virtualinvoke r12.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r14 = virtualinvoke r12.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>($r13, $r14);

        $z0 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: boolean isDeclareNamespaces()>();

     label05:
        if $z0 == 0 goto label02;

     label06:
        $r13 = virtualinvoke r12.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("");

     label07:
        if $z0 == 0 goto label11;

     label08:
        $r13 = virtualinvoke r12.<org.jdom2.Namespace: java.lang.String getURI()>();

        virtualinvoke r5.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "", "xmlns", "CDATA", $r13);

     label09:
        goto label02;

     label10:
        $r15 := @caughtexception;

        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void pop()>();

        $r7 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.jdom2.output.support.SAXTarget$SAXLocator getLocator()>();

        virtualinvoke $r7.<org.jdom2.output.support.SAXTarget$SAXLocator: void setNode(java.lang.Object)>($r8);

        throw $r15;

     label11:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r13 = virtualinvoke r12.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke r12.<org.jdom2.Namespace: java.lang.String getURI()>();

        virtualinvoke r5.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "", $r13, "CDATA", $r14);

     label12:
        goto label02;

     label13:
        $z0 = virtualinvoke $r4.<org.jdom2.Element: boolean hasAttributes()>();

     label14:
        if $z0 == 0 goto label24;

     label15:
        $r17 = virtualinvoke $r4.<org.jdom2.Element: java.util.List getAttributes()>();

        $r10 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label17:
        if $z0 == 0 goto label24;

     label18:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.jdom2.Attribute) $r11;

        $z0 = virtualinvoke r18.<org.jdom2.Attribute: boolean isSpecified()>();

     label19:
        if $z0 != 0 goto label22;

     label20:
        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isSpecifiedAttributesOnly()>();

     label21:
        if $z0 != 0 goto label16;

     label22:
        $r13 = virtualinvoke r18.<org.jdom2.Attribute: java.lang.String getNamespaceURI()>();

        $r14 = virtualinvoke r18.<org.jdom2.Attribute: java.lang.String getName()>();

        $r19 = virtualinvoke r18.<org.jdom2.Attribute: java.lang.String getQualifiedName()>();

        $r20 = virtualinvoke r18.<org.jdom2.Attribute: org.jdom2.AttributeType getAttributeType()>();

        $r21 = staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: java.lang.String getAttributeTypeName(org.jdom2.AttributeType)>($r20);

        $r22 = virtualinvoke r18.<org.jdom2.Attribute: java.lang.String getValue()>();

        virtualinvoke r5.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r13, $r14, $r19, $r21, $r22);

     label23:
        goto label16;

     label24:
        $r13 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getNamespaceURI()>();

        $r14 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getName()>();

        $r19 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>($r13, $r14, $r19, r5);

        $r17 = virtualinvoke $r4.<org.jdom2.Element: java.util.List getContent()>();

        $z0 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

     label25:
        if $z0 != 0 goto label46;

     label26:
        $r23 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.Format$TextMode getTextMode()>();

     label27:
        r12 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r13 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace)>("space", r12);

     label28:
        $r14 = "default";

     label29:
        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

     label30:
        if $z0 == 0 goto label51;

     label31:
        $r23 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.Format$TextMode getDefaultMode()>();

     label32:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void push()>();

     label33:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void setTextMode(org.jdom2.output.Format$TextMode)>($r23);

        $r24 = virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>($r2, $r17, 0);

        $z0 = interfaceinvoke $r24.<org.jdom2.output.support.Walker: boolean hasNext()>();

     label34:
        if $z0 == 0 goto label45;

     label35:
        $z0 = interfaceinvoke $r24.<org.jdom2.output.support.Walker: boolean isAllText()>();

     label36:
        if $z0 != 0 goto label40;

     label37:
        $r13 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadBetween()>();

     label38:
        if $r13 == null goto label40;

     label39:
        $r13 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadBetween()>();

        $r25 = new org.jdom2.Text;

        specialinvoke $r25.<org.jdom2.Text: void <init>(java.lang.String)>($r13);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printText(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r25);

     label40:
        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printContent(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, $r2, $r3, $r24);

        $z0 = interfaceinvoke $r24.<org.jdom2.output.support.Walker: boolean isAllText()>();

     label41:
        if $z0 != 0 goto label45;

     label42:
        $r13 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadLast()>();

     label43:
        if $r13 == null goto label45;

     label44:
        $r13 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadLast()>();

        $r25 = new org.jdom2.Text;

        specialinvoke $r25.<org.jdom2.Text: void <init>(java.lang.String)>($r13);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printText(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r25);

     label45:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

     label46:
        $r26 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $r13 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getNamespaceURI()>();

        $r14 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getName()>();

        $r19 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        interfaceinvoke $r26.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r13, $r14, $r19);

        $r9 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.lang.Iterable addedReverse()>();

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label47:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label48:
        if $z0 == 0 goto label58;

     label49:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.jdom2.Namespace) $r11;

        $r13 = virtualinvoke r12.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>($r13);

     label50:
        goto label47;

     label51:
        $r14 = "preserve";

     label52:
        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

     label53:
        if $z0 == 0 goto label32;

     label54:
        $r23 = <org.jdom2.output.Format$TextMode: org.jdom2.output.Format$TextMode PRESERVE>;

     label55:
        goto label32;

     label56:
        $r27 := @caughtexception;

     label57:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

        throw $r27;

     label58:
        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void pop()>();

        $r7 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.jdom2.output.support.SAXTarget$SAXLocator getLocator()>();

        virtualinvoke $r7.<org.jdom2.output.support.SAXTarget$SAXLocator: void setNode(java.lang.Object)>($r8);

        return;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label15 to label17 with label10;
        catch java.lang.Throwable from label18 to label19 with label10;
        catch java.lang.Throwable from label20 to label21 with label10;
        catch java.lang.Throwable from label22 to label23 with label10;
        catch java.lang.Throwable from label24 to label25 with label10;
        catch java.lang.Throwable from label26 to label27 with label10;
        catch java.lang.Throwable from label27 to label28 with label10;
        catch java.lang.Throwable from label29 to label30 with label10;
        catch java.lang.Throwable from label31 to label32 with label10;
        catch java.lang.Throwable from label32 to label33 with label10;
        catch java.lang.Throwable from label33 to label34 with label56;
        catch java.lang.Throwable from label35 to label36 with label56;
        catch java.lang.Throwable from label37 to label38 with label56;
        catch java.lang.Throwable from label39 to label41 with label56;
        catch java.lang.Throwable from label42 to label43 with label56;
        catch java.lang.Throwable from label44 to label45 with label56;
        catch java.lang.Throwable from label45 to label48 with label10;
        catch java.lang.Throwable from label49 to label50 with label10;
        catch java.lang.Throwable from label52 to label53 with label10;
        catch java.lang.Throwable from label54 to label55 with label10;
        catch java.lang.Throwable from label57 to label58 with label10;
    }
    protected void printEntityRef(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.EntityRef) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.EntityRef $r3;
        org.xml.sax.ContentHandler $r4;
        java.lang.String $r5;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.EntityRef;

        $r4 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $r5 = virtualinvoke $r3.<org.jdom2.EntityRef: java.lang.String getName()>();

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void skippedEntity(java.lang.String)>($r5);

        return;
    }
    protected void printProcessingInstruction(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.ProcessingInstruction) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.ProcessingInstruction $r3;
        org.xml.sax.ContentHandler $r4;
        java.lang.String $r5, $r6;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.ProcessingInstruction;

        $r4 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $r5 = virtualinvoke $r3.<org.jdom2.ProcessingInstruction: java.lang.String getTarget()>();

        $r6 = virtualinvoke $r3.<org.jdom2.ProcessingInstruction: java.lang.String getData()>();

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>($r5, $r6);

        return;
    }
    protected void printText(org.jdom2.output.support.SAXTarget, org.jdom2.output.support.FormatStack, org.jdom2.Text) throws org.xml.sax.SAXException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Text $r3;
        int $i0;
        java.lang.String $r4;
        char[] $r5;
        org.xml.sax.ContentHandler $r6;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Text;

        $r4 = virtualinvoke $r3.<org.jdom2.Text: java.lang.String getText()>();

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        $i0 = lengthof $r5;

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r5, 0, $i0);

        return;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, java.util.List) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        java.util.List r3;
        org.jdom2.output.support.FormatStack r4;
        org.xml.sax.SAXException r5;
        org.jdom2.output.support.Walker $r6;
        org.jdom2.util.NamespaceStack $r7;
        org.jdom2.JDOMException $r8;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        r3 := @parameter2: java.util.List;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

     label2:
        r4 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r6 = virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, r3, 0);

     label4:
        $r7 = new org.jdom2.util.NamespaceStack;

     label5:
        specialinvoke $r7.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printContent(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r7, $r6);

     label6:
        return;

     label7:
        r5 := @caughtexception;

        $r8 = new org.jdom2.JDOMException;

        specialinvoke $r8.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the List: ", r5);

        throw $r8;

        catch org.xml.sax.SAXException from label1 to label2 with label7;
        catch org.xml.sax.SAXException from label3 to label4 with label7;
        catch org.xml.sax.SAXException from label5 to label6 with label7;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.CDATA) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.CDATA $r3;
        org.jdom2.output.support.FormatStack r4;
        org.xml.sax.SAXException r5;
        java.util.List $r6;
        org.jdom2.output.support.Walker $r7;
        org.jdom2.util.NamespaceStack $r8;
        org.jdom2.JDOMException $r9;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.CDATA;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

     label2:
        r4 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r7 = virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, $r6, 0);

     label4:
        $r8 = new org.jdom2.util.NamespaceStack;

     label5:
        specialinvoke $r8.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printContent(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r8, $r7);

     label6:
        return;

     label7:
        r5 := @caughtexception;

        $r9 = new org.jdom2.JDOMException;

        specialinvoke $r9.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the CDATA: ", r5);

        throw $r9;

        catch org.xml.sax.SAXException from label1 to label2 with label7;
        catch org.xml.sax.SAXException from label3 to label4 with label7;
        catch org.xml.sax.SAXException from label5 to label6 with label7;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.Comment) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Comment $r3;
        org.xml.sax.SAXException r4;
        org.jdom2.output.support.FormatStack $r5;
        org.jdom2.JDOMException $r6;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Comment;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

     label2:
        $r5 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke $r5.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printComment(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r5, $r3);

     label4:
        return;

     label5:
        r4 := @caughtexception;

        $r6 = new org.jdom2.JDOMException;

        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the Comment: ", r4);

        throw $r6;

        catch org.xml.sax.SAXException from label1 to label2 with label5;
        catch org.xml.sax.SAXException from label3 to label4 with label5;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.DocType) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.DocType $r3;
        org.xml.sax.SAXException r4;
        org.jdom2.output.support.FormatStack $r5;
        org.jdom2.JDOMException $r6;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.DocType;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

     label2:
        $r5 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke $r5.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printDocType(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r5, $r3);

     label4:
        return;

     label5:
        r4 := @caughtexception;

        $r6 = new org.jdom2.JDOMException;

        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the DocType: ", r4);

        throw $r6;

        catch org.xml.sax.SAXException from label1 to label2 with label5;
        catch org.xml.sax.SAXException from label3 to label4 with label5;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.Document) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Document $r3;
        org.xml.sax.SAXException r4;
        org.jdom2.output.support.FormatStack $r5;
        org.jdom2.util.NamespaceStack $r6;
        org.jdom2.JDOMException $r7;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Document;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

     label2:
        $r5 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke $r5.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

     label4:
        $r6 = new org.jdom2.util.NamespaceStack;

     label5:
        specialinvoke $r6.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printDocument(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Document)>($r1, $r5, $r6, $r3);

     label6:
        return;

     label7:
        r4 := @caughtexception;

        $r7 = new org.jdom2.JDOMException;

        specialinvoke $r7.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the Document: ", r4);

        throw $r7;

        catch org.xml.sax.SAXException from label1 to label2 with label7;
        catch org.xml.sax.SAXException from label3 to label4 with label7;
        catch org.xml.sax.SAXException from label5 to label6 with label7;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.Element) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Element $r3;
        org.xml.sax.SAXException r4;
        org.jdom2.output.support.FormatStack $r5;
        org.jdom2.util.NamespaceStack $r6;
        org.jdom2.JDOMException $r7;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Element;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

     label2:
        $r5 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke $r5.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

     label4:
        $r6 = new org.jdom2.util.NamespaceStack;

     label5:
        specialinvoke $r6.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printElement(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r5, $r6, $r3);

     label6:
        return;

     label7:
        r4 := @caughtexception;

        $r7 = new org.jdom2.JDOMException;

        specialinvoke $r7.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the Element: ", r4);

        throw $r7;

        catch org.xml.sax.SAXException from label1 to label2 with label7;
        catch org.xml.sax.SAXException from label3 to label4 with label7;
        catch org.xml.sax.SAXException from label5 to label6 with label7;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.EntityRef) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.EntityRef $r3;
        org.xml.sax.SAXException r4;
        org.jdom2.output.support.FormatStack $r5;
        org.jdom2.JDOMException $r6;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.EntityRef;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

     label2:
        $r5 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke $r5.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printEntityRef(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.EntityRef)>($r1, $r5, $r3);

     label4:
        return;

     label5:
        r4 := @caughtexception;

        $r6 = new org.jdom2.JDOMException;

        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the EntityRef: ", r4);

        throw $r6;

        catch org.xml.sax.SAXException from label1 to label2 with label5;
        catch org.xml.sax.SAXException from label3 to label4 with label5;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.ProcessingInstruction) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.ProcessingInstruction $r3;
        org.xml.sax.SAXException r4;
        org.jdom2.output.support.FormatStack $r5;
        org.jdom2.JDOMException $r6;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.ProcessingInstruction;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

     label2:
        $r5 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke $r5.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printProcessingInstruction(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, $r5, $r3);

     label4:
        return;

     label5:
        r4 := @caughtexception;

        $r6 = new org.jdom2.JDOMException;

        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the ProcessingInstruction: ", r4);

        throw $r6;

        catch org.xml.sax.SAXException from label1 to label2 with label5;
        catch org.xml.sax.SAXException from label3 to label4 with label5;
    }
    public void process(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.Text) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Text $r3;
        org.jdom2.output.support.FormatStack r4;
        org.xml.sax.SAXException r5;
        java.util.List $r6;
        org.jdom2.output.support.Walker $r7;
        org.jdom2.util.NamespaceStack $r8;
        org.jdom2.JDOMException $r9;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Text;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

     label2:
        r4 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r7 = virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, $r6, 0);

     label4:
        $r8 = new org.jdom2.util.NamespaceStack;

     label5:
        specialinvoke $r8.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printContent(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r8, $r7);

     label6:
        return;

     label7:
        r5 := @caughtexception;

        $r9 = new org.jdom2.JDOMException;

        specialinvoke $r9.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the Text: ", r5);

        throw $r9;

        catch org.xml.sax.SAXException from label1 to label2 with label7;
        catch org.xml.sax.SAXException from label3 to label4 with label7;
        catch org.xml.sax.SAXException from label5 to label6 with label7;
    }
    public void processAsDocument(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, java.util.List) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        java.util.List r3;
        org.jdom2.output.support.FormatStack r4;
        org.xml.sax.SAXException r5;
        int $i0;
        org.xml.sax.ContentHandler $r6;
        boolean $z0;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.jdom2.Content r9;
        org.jdom2.DocType r10;
        org.jdom2.output.support.Walker $r11;
        org.jdom2.util.NamespaceStack $r12;
        org.jdom2.JDOMException $r13;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        r3 := @parameter2: java.util.List;

        if r3 == null goto label18;

     label01:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

     label02:
        if $i0 != 0 goto label03;

        return;

     label03:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void startDocument()>();

     label04:
        r4 = new org.jdom2.output.support.FormatStack;

     label05:
        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $z0 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: boolean isReportDTDEvents()>();

     label06:
        if $z0 == 0 goto label13;

     label07:
        $r7 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label09:
        if $z0 == 0 goto label13;

     label10:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label11:
        r9 = (org.jdom2.Content) $r8;

        $z0 = r9 instanceof org.jdom2.DocType;

        if $z0 == 0 goto label08;

        r10 = (org.jdom2.DocType) r9;

     label12:
        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printDocType(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, r4, r10);

     label13:
        $r11 = virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, r3, 0);

     label14:
        $r12 = new org.jdom2.util.NamespaceStack;

     label15:
        specialinvoke $r12.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printContent(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r12, $r11);

        $r6 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void endDocument()>();

     label16:
        return;

     label17:
        r5 := @caughtexception;

        $r13 = new org.jdom2.JDOMException;

        specialinvoke $r13.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the List: ", r5);

        throw $r13;

     label18:
        return;

        catch org.xml.sax.SAXException from label01 to label02 with label17;
        catch org.xml.sax.SAXException from label03 to label04 with label17;
        catch org.xml.sax.SAXException from label05 to label06 with label17;
        catch org.xml.sax.SAXException from label07 to label09 with label17;
        catch org.xml.sax.SAXException from label10 to label11 with label17;
        catch org.xml.sax.SAXException from label12 to label14 with label17;
        catch org.xml.sax.SAXException from label15 to label16 with label17;
    }
    public void processAsDocument(org.jdom2.output.support.SAXTarget, org.jdom2.output.Format, org.jdom2.Element) throws org.jdom2.JDOMException
    {
        org.jdom2.output.support.AbstractSAXOutputProcessor r0;
        org.jdom2.output.support.SAXTarget $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Element $r3;
        org.xml.sax.SAXException r4;
        org.xml.sax.ContentHandler $r5;
        org.jdom2.output.support.FormatStack $r6;
        org.jdom2.util.NamespaceStack $r7;
        org.jdom2.JDOMException $r8;

        r0 := @this: org.jdom2.output.support.AbstractSAXOutputProcessor;

        $r1 := @parameter0: org.jdom2.output.support.SAXTarget;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Element;

        if $r3 != null goto label1;

        return;

     label1:
        staticinvoke <org.jdom2.output.support.AbstractSAXOutputProcessor: void locate(org.jdom2.output.support.SAXTarget)>($r1);

        $r5 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startDocument()>();

     label2:
        $r6 = new org.jdom2.output.support.FormatStack;

     label3:
        specialinvoke $r6.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

     label4:
        $r7 = new org.jdom2.util.NamespaceStack;

     label5:
        specialinvoke $r7.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractSAXOutputProcessor: void printElement(org.jdom2.output.support.SAXTarget,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r6, $r7, $r3);

        $r5 = virtualinvoke $r1.<org.jdom2.output.support.SAXTarget: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void endDocument()>();

     label6:
        return;

     label7:
        r4 := @caughtexception;

        $r8 = new org.jdom2.JDOMException;

        specialinvoke $r8.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Encountered a SAX exception processing the Element: ", r4);

        throw $r8;

        catch org.xml.sax.SAXException from label1 to label2 with label7;
        catch org.xml.sax.SAXException from label3 to label4 with label7;
        catch org.xml.sax.SAXException from label5 to label6 with label7;
    }
