org.jdom2.output.support.AbstractStAXStreamProcessor extends org.jdom2.output.support.AbstractOutputProcessor implements org.jdom2.output.support.StAXStreamProcessor
    public void <init>()
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        specialinvoke r0.<org.jdom2.output.support.AbstractOutputProcessor: void <init>()>();

        return;
    }
    protected void printAttribute(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.Attribute) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Attribute $r3;
        boolean $z0;
        org.jdom2.Namespace $r4, $r5;
        java.lang.String $r6, $r7, $r8, $r9;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Attribute;

        $z0 = virtualinvoke $r3.<org.jdom2.Attribute: boolean isSpecified()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isSpecifiedAttributesOnly()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = virtualinvoke $r3.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r5 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        if $r4 != $r5 goto label2;

        $r6 = virtualinvoke $r3.<org.jdom2.Attribute: java.lang.String getName()>();

        $r7 = virtualinvoke $r3.<org.jdom2.Attribute: java.lang.String getValue()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>($r6, $r7);

        return;

     label2:
        $r6 = virtualinvoke $r4.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r7 = virtualinvoke $r4.<org.jdom2.Namespace: java.lang.String getURI()>();

        $r8 = virtualinvoke $r3.<org.jdom2.Attribute: java.lang.String getName()>();

        $r9 = virtualinvoke $r3.<org.jdom2.Attribute: java.lang.String getValue()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, $r7, $r8, $r9);

        return;
    }
    protected void printCDATA(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.CDATA) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.CDATA $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.CDATA;

        $r4 = virtualinvoke $r3.<org.jdom2.CDATA: java.lang.String getText()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCData(java.lang.String)>($r4);

        return;
    }
    protected void printComment(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.Comment) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Comment $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Comment;

        $r4 = virtualinvoke $r3.<org.jdom2.Comment: java.lang.String getText()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeComment(java.lang.String)>($r4);

        return;
    }
    protected void printContent(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.output.support.Walker) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.output.support.Walker $r4;
        boolean $z0;
        org.jdom2.Content $r5;
        org.jdom2.CDATA $r6;
        java.lang.String $r7;
        org.jdom2.Text $r8;
        int[] $r9;
        org.jdom2.Content$CType $r10;
        int $i0;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12;
        org.jdom2.Comment r13;
        org.jdom2.Element r14;
        org.jdom2.EntityRef r15;
        org.jdom2.ProcessingInstruction r16;
        org.jdom2.DocType r17;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.output.support.Walker;

     label01:
        $z0 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r5 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: org.jdom2.Content next()>();

        if $r5 != null goto label03;

        $z0 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: boolean isCDATA()>();

        if $z0 == 0 goto label02;

        $r6 = new org.jdom2.CDATA;

        $r7 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: java.lang.String text()>();

        specialinvoke $r6.<org.jdom2.CDATA: void <init>(java.lang.String)>($r7);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printCDATA(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.CDATA)>($r1, $r2, $r6);

        goto label01;

     label02:
        $r8 = new org.jdom2.Text;

        $r7 = interfaceinvoke $r4.<org.jdom2.output.support.Walker: java.lang.String text()>();

        specialinvoke $r8.<org.jdom2.Text: void <init>(java.lang.String)>($r7);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printText(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r8);

        goto label01;

     label03:
        $r9 = <org.jdom2.output.support.AbstractStAXStreamProcessor$1: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r10 = virtualinvoke $r5.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i0 = virtualinvoke $r10.<org.jdom2.Content$CType: int ordinal()>();

        $i0 = $r9[$i0];

        lookupswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label11;
            case 3: goto label07;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label05;
            case 7: goto label08;
            default: goto label04;
        };

     label04:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Content ");

        $r10 = virtualinvoke $r5.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label05:
        $r6 = (org.jdom2.CDATA) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printCDATA(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.CDATA)>($r1, $r2, $r6);

        goto label01;

     label06:
        r13 = (org.jdom2.Comment) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printComment(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r2, r13);

        goto label01;

     label07:
        r14 = (org.jdom2.Element) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printElement(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r2, $r3, r14);

        goto label01;

     label08:
        r15 = (org.jdom2.EntityRef) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printEntityRef(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.EntityRef)>($r1, $r2, r15);

        goto label01;

     label09:
        r16 = (org.jdom2.ProcessingInstruction) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printProcessingInstruction(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, $r2, r16);

        goto label01;

     label10:
        $r8 = (org.jdom2.Text) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printText(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r8);

        goto label01;

     label11:
        r17 = (org.jdom2.DocType) $r5;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printDocType(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r2, r17);

        goto label01;

     label12:
        return;
    }
    protected void printDocType(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.DocType) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.DocType $r3;
        java.io.StringWriter r4;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean z0;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.DocType;

        $r5 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getPublicID()>();

        $r6 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getSystemID()>();

        $r7 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getInternalSubset()>();

        z0 = 0;

        r4 = new java.io.StringWriter;

        specialinvoke r4.<java.io.StringWriter: void <init>()>();

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>("<!DOCTYPE ");

        $r8 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getElementName()>();

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>($r8);

        if $r5 == null goto label1;

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>(" PUBLIC \"");

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>($r5);

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>("\"");

        z0 = 1;

     label1:
        if $r6 == null goto label3;

        if z0 != 0 goto label2;

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>(" SYSTEM");

     label2:
        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>(" \"");

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>($r6);

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>("\"");

     label3:
        if $r7 == null goto label4;

        z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if z0 != 0 goto label4;

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>(" [");

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<org.jdom2.DocType: java.lang.String getInternalSubset()>();

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>($r5);

        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>("]");

     label4:
        virtualinvoke r4.<java.io.StringWriter: void write(java.lang.String)>(">");

        $r5 = virtualinvoke r4.<java.io.StringWriter: java.lang.String toString()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeDTD(java.lang.String)>($r5);

        return;
    }
    protected void printDocument(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.Document) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.Document $r4;
        boolean $z0;
        java.lang.String $r5;
        java.util.List $r6;
        int $i0, i1;
        org.jdom2.Content $r7;
        org.jdom2.output.support.Walker $r8;
        int[] $r9;
        org.jdom2.Content$CType $r10;
        org.jdom2.Comment r11;
        org.jdom2.DocType r12;
        org.jdom2.Element r13;
        org.jdom2.ProcessingInstruction r14;
        org.jdom2.Text r15;
        java.util.ArrayList $r16;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.Document;

        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isOmitDeclaration()>();

        if $z0 == 0 goto label04;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartDocument()>();

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        if $r5 == null goto label01;

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r5);

     label01:
        $z0 = virtualinvoke $r4.<org.jdom2.Document: boolean hasRootElement()>();

        if $z0 == 0 goto label06;

        $r6 = virtualinvoke $r4.<org.jdom2.Document: java.util.List getContent()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label07;

        $i0 = virtualinvoke $r4.<org.jdom2.Document: int getContentSize()>();

        i1 = 0;

     label03:
        if i1 >= $i0 goto label07;

        $r7 = virtualinvoke $r4.<org.jdom2.Document: org.jdom2.Content getContent(int)>(i1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label03;

     label04:
        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isOmitEncoding()>();

        if $z0 == 0 goto label05;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartDocument(java.lang.String)>("1.0");

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        if $r5 == null goto label01;

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r5);

        goto label01;

     label05:
        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getEncoding()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartDocument(java.lang.String,java.lang.String)>($r5, "1.0");

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        if $r5 == null goto label01;

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r5);

        goto label01;

     label06:
        $r16 = new java.util.ArrayList;

        $r6 = $r16;

        $i0 = virtualinvoke $r4.<org.jdom2.Document: int getContentSize()>();

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i0);

        goto label02;

     label07:
        $r8 = virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>($r2, $r6, 0);

        $z0 = interfaceinvoke $r8.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label17;

     label08:
        $z0 = interfaceinvoke $r8.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r7 = interfaceinvoke $r8.<org.jdom2.output.support.Walker: org.jdom2.Content next()>();

        if $r7 != null goto label09;

        $r5 = interfaceinvoke $r8.<org.jdom2.output.support.Walker: java.lang.String text()>();

        if $r5 == null goto label08;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isAllXMLWhitespace(java.lang.String)>($r5);

        if $z0 == 0 goto label08;

        $z0 = interfaceinvoke $r8.<org.jdom2.output.support.Walker: boolean isCDATA()>();

        if $z0 != 0 goto label08;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r5);

        goto label08;

     label09:
        $r9 = <org.jdom2.output.support.AbstractStAXStreamProcessor$1: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r10 = virtualinvoke $r7.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i0 = virtualinvoke $r10.<org.jdom2.Content$CType: int ordinal()>();

        $i0 = $r9[$i0];

        lookupswitch($i0)
        {
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label14;
            case 5: goto label15;
            default: goto label10;
        };

     label10:
        goto label08;

     label11:
        r11 = (org.jdom2.Comment) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printComment(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r2, r11);

        goto label08;

     label12:
        r12 = (org.jdom2.DocType) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printDocType(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r2, r12);

        goto label08;

     label13:
        r13 = (org.jdom2.Element) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printElement(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r2, $r3, r13);

        goto label08;

     label14:
        r14 = (org.jdom2.ProcessingInstruction) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printProcessingInstruction(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, $r2, r14);

        goto label08;

     label15:
        r15 = (org.jdom2.Text) $r7;

        $r5 = virtualinvoke r15.<org.jdom2.Text: java.lang.String getText()>();

        if $r5 == null goto label08;

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isAllXMLWhitespace(java.lang.String)>($r5);

        if $z0 == 0 goto label08;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r5);

        goto label08;

     label16:
        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        if $r5 == null goto label17;

        $r5 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getLineSeparator()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r5);

     label17:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

        return;
    }
    protected void printElement(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.util.NamespaceStack, org.jdom2.Element) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.util.NamespaceStack $r3;
        org.jdom2.Element $r4;
        java.util.ArrayList r5;
        java.lang.Iterable $r6;
        java.util.Iterator $r7, $r13;
        boolean $z0;
        java.lang.Object $r8;
        org.jdom2.Namespace r9;
        java.lang.String $r10, $r11, $r18;
        java.lang.Throwable $r12, $r19, $r22;
        java.util.List $r14;
        org.jdom2.output.Format$TextMode $r15;
        org.jdom2.output.support.Walker r16, $r17;
        org.jdom2.Attribute r20;
        org.jdom2.Text $r21;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.util.NamespaceStack;

        $r4 := @parameter3: org.jdom2.Element;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void push(org.jdom2.Element)>($r4);

     label01:
        $r6 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.lang.Iterable addedForward()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label15;

     label04:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdom2.Namespace) $r8;

        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label05:
        $r10 = "";

     label06:
        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

     label07:
        if $z0 == 0 goto label13;

     label08:
        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>($r10);

     label09:
        goto label02;

     label10:
        $r12 := @caughtexception;

        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void pop()>();

        $r7 = virtualinvoke r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label88;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.String) $r8;

        $r13 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r8 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdom2.Namespace) $r8;

        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label12;

        $r10 = "";

        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label89;

        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>($r10);

        goto label11;

     label13:
        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>($r10, $r11);

     label14:
        goto label02;

     label15:
        $r14 = virtualinvoke $r4.<org.jdom2.Element: java.util.List getContent()>();

        $r15 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.Format$TextMode getTextMode()>();

     label16:
        r16 = null;

     label17:
        $z0 = interfaceinvoke $r14.<java.util.List: boolean isEmpty()>();

     label18:
        if $z0 != 0 goto label30;

     label19:
        r9 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r10 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace)>("space", r9);

     label20:
        $r11 = "default";

     label21:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

     label22:
        if $z0 == 0 goto label41;

     label23:
        $r15 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: org.jdom2.output.Format$TextMode getDefaultMode()>();

     label24:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void push()>();

     label25:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void setTextMode(org.jdom2.output.Format$TextMode)>($r15);

        $r17 = virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>($r2, $r14, 0);

     label26:
        r16 = $r17;

     label27:
        $z0 = interfaceinvoke $r17.<org.jdom2.output.support.Walker: boolean hasNext()>();

     label28:
        if $z0 != 0 goto label29;

        r16 = null;

     label29:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

     label30:
        if r16 != null goto label33;

     label31:
        $z0 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: boolean isExpandEmptyElements()>();

     label32:
        if $z0 == 0 goto label48;

     label33:
        $z0 = 1;

     label34:
        r9 = virtualinvoke $r4.<org.jdom2.Element: org.jdom2.Namespace getNamespace()>();

     label35:
        if $z0 == 0 goto label76;

     label36:
        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r11 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getName()>();

        $r18 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>($r10, $r11, $r18);

        $r6 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.lang.Iterable addedForward()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label37:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label38:
        if $z0 == 0 goto label49;

     label39:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdom2.Namespace) $r8;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printNamespace(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Namespace)>($r1, $r2, r9);

     label40:
        goto label37;

     label41:
        $r11 = "preserve";

     label42:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

     label43:
        if $z0 == 0 goto label24;

     label44:
        $r15 = <org.jdom2.output.Format$TextMode: org.jdom2.output.Format$TextMode PRESERVE>;

     label45:
        goto label24;

     label46:
        $r19 := @caughtexception;

     label47:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

        throw $r19;

     label48:
        $z0 = 0;

        goto label34;

     label49:
        $z0 = virtualinvoke $r4.<org.jdom2.Element: boolean hasAttributes()>();

     label50:
        if $z0 == 0 goto label56;

     label51:
        $r14 = virtualinvoke $r4.<org.jdom2.Element: java.util.List getAttributes()>();

        $r7 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label52:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label53:
        if $z0 == 0 goto label56;

     label54:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.jdom2.Attribute) $r8;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printAttribute(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Attribute)>($r1, $r2, r20);

     label55:
        goto label52;

     label56:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>("");

     label57:
        if r16 == null goto label70;

     label58:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void push()>();

     label59:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void setTextMode(org.jdom2.output.Format$TextMode)>($r15);

        $z0 = interfaceinvoke r16.<org.jdom2.output.support.Walker: boolean isAllText()>();

     label60:
        if $z0 != 0 goto label64;

     label61:
        $r10 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadBetween()>();

     label62:
        if $r10 == null goto label64;

     label63:
        $r10 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadBetween()>();

        $r21 = new org.jdom2.Text;

        specialinvoke $r21.<org.jdom2.Text: void <init>(java.lang.String)>($r10);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printText(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r21);

     label64:
        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printContent(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, $r2, $r3, r16);

        $z0 = interfaceinvoke r16.<org.jdom2.output.support.Walker: boolean isAllText()>();

     label65:
        if $z0 != 0 goto label69;

     label66:
        $r10 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadLast()>();

     label67:
        if $r10 == null goto label69;

     label68:
        $r10 = virtualinvoke $r2.<org.jdom2.output.support.FormatStack: java.lang.String getPadLast()>();

        $r21 = new org.jdom2.Text;

        specialinvoke $r21.<org.jdom2.Text: void <init>(java.lang.String)>($r10);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printText(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, $r2, $r21);

     label69:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

     label70:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

     label71:
        virtualinvoke $r3.<org.jdom2.util.NamespaceStack: void pop()>();

        $r7 = virtualinvoke r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label72:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label91;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.String) $r8;

        $r13 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.util.Iterator iterator()>();

     label73:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label72;

        $r8 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdom2.Namespace) $r8;

        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label73;

        $r10 = "";

        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label90;

        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>($r10);

        goto label72;

     label74:
        $r22 := @caughtexception;

     label75:
        virtualinvoke $r2.<org.jdom2.output.support.FormatStack: void pop()>();

        throw $r22;

     label76:
        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r11 = virtualinvoke $r4.<org.jdom2.Element: java.lang.String getName()>();

        $r18 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)>($r10, $r11, $r18);

        $r6 = virtualinvoke $r3.<org.jdom2.util.NamespaceStack: java.lang.Iterable addedForward()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label77:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label78:
        if $z0 == 0 goto label81;

     label79:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdom2.Namespace) $r8;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printNamespace(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Namespace)>($r1, $r2, r9);

     label80:
        goto label77;

     label81:
        $r14 = virtualinvoke $r4.<org.jdom2.Element: java.util.List getAttributes()>();

        $r7 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label82:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label83:
        if $z0 == 0 goto label86;

     label84:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.jdom2.Attribute) $r8;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printAttribute(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Attribute)>($r1, $r2, r20);

     label85:
        goto label82;

     label86:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>("");

     label87:
        goto label71;

     label88:
        throw $r12;

     label89:
        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>($r10, $r11);

        goto label11;

     label90:
        $r10 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r11 = virtualinvoke r9.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>($r10, $r11);

        goto label72;

     label91:
        return;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label15 to label16 with label10;
        catch java.lang.Throwable from label17 to label18 with label10;
        catch java.lang.Throwable from label19 to label20 with label10;
        catch java.lang.Throwable from label21 to label22 with label10;
        catch java.lang.Throwable from label23 to label24 with label10;
        catch java.lang.Throwable from label24 to label25 with label10;
        catch java.lang.Throwable from label25 to label26 with label46;
        catch java.lang.Throwable from label27 to label28 with label46;
        catch java.lang.Throwable from label29 to label30 with label10;
        catch java.lang.Throwable from label31 to label32 with label10;
        catch java.lang.Throwable from label34 to label35 with label10;
        catch java.lang.Throwable from label36 to label38 with label10;
        catch java.lang.Throwable from label39 to label40 with label10;
        catch java.lang.Throwable from label42 to label43 with label10;
        catch java.lang.Throwable from label44 to label45 with label10;
        catch java.lang.Throwable from label47 to label48 with label10;
        catch java.lang.Throwable from label49 to label50 with label10;
        catch java.lang.Throwable from label51 to label53 with label10;
        catch java.lang.Throwable from label54 to label55 with label10;
        catch java.lang.Throwable from label56 to label57 with label10;
        catch java.lang.Throwable from label58 to label59 with label10;
        catch java.lang.Throwable from label59 to label60 with label74;
        catch java.lang.Throwable from label61 to label62 with label74;
        catch java.lang.Throwable from label63 to label65 with label74;
        catch java.lang.Throwable from label66 to label67 with label74;
        catch java.lang.Throwable from label68 to label69 with label74;
        catch java.lang.Throwable from label69 to label71 with label10;
        catch java.lang.Throwable from label75 to label78 with label10;
        catch java.lang.Throwable from label79 to label80 with label10;
        catch java.lang.Throwable from label81 to label83 with label10;
        catch java.lang.Throwable from label84 to label85 with label10;
        catch java.lang.Throwable from label86 to label87 with label10;
    }
    protected void printEntityRef(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.EntityRef) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.EntityRef $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.EntityRef;

        $r4 = virtualinvoke $r3.<org.jdom2.EntityRef: java.lang.String getName()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeEntityRef(java.lang.String)>($r4);

        return;
    }
    protected void printNamespace(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.Namespace) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Namespace $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Namespace;

        $r4 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r5 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r4, $r5);

        return;
    }
    protected void printProcessingInstruction(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.ProcessingInstruction) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.ProcessingInstruction $r3;
        java.lang.String $r4, $r5, $r6;
        int $i0;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.ProcessingInstruction;

        $r4 = virtualinvoke $r3.<org.jdom2.ProcessingInstruction: java.lang.String getTarget()>();

        $r5 = virtualinvoke $r3.<org.jdom2.ProcessingInstruction: java.lang.String getData()>();

        if $r5 == null goto label1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeProcessingInstruction(java.lang.String,java.lang.String)>($r4, $r5);

        return;

     label1:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeProcessingInstruction(java.lang.String)>($r4);

        return;
    }
    protected void printText(javax.xml.stream.XMLStreamWriter, org.jdom2.output.support.FormatStack, org.jdom2.Text) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.support.FormatStack $r2;
        org.jdom2.Text $r3;
        java.lang.String $r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $r3 := @parameter2: org.jdom2.Text;

        $r4 = virtualinvoke $r3.<org.jdom2.Text: java.lang.String getText()>();

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r4);

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, java.util.List) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        java.util.List r3;
        org.jdom2.output.support.FormatStack r4;
        org.jdom2.output.support.Walker $r5;
        org.jdom2.util.NamespaceStack $r6;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        r3 := @parameter2: java.util.List;

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r5 = virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, r3, 0);

        $r6 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r6.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printContent(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.output.support.Walker)>($r1, r4, $r6, $r5);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.CDATA) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.CDATA $r3;
        org.jdom2.output.support.FormatStack r4;
        java.util.List $r5;
        org.jdom2.output.support.Walker $r6;
        boolean $z0;
        org.jdom2.Content $r7;
        java.lang.String $r8;
        org.jdom2.Content$CType $r9, $r10;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.CDATA;

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r6 = virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, $r5, 0);

        $z0 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: org.jdom2.Content next()>();

        if $r7 != null goto label2;

        $r3 = new org.jdom2.CDATA;

        $r8 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: java.lang.String text()>();

        specialinvoke $r3.<org.jdom2.CDATA: void <init>(java.lang.String)>($r8);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printCDATA(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.CDATA)>($r1, r4, $r3);

     label1:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;

     label2:
        $r9 = virtualinvoke $r7.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $r10 = <org.jdom2.Content$CType: org.jdom2.Content$CType CDATA>;

        if $r9 != $r10 goto label1;

        $r3 = (org.jdom2.CDATA) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printCDATA(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.CDATA)>($r1, r4, $r3);

        goto label1;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.Comment) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Comment $r3;
        org.jdom2.output.support.FormatStack $r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Comment;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printComment(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Comment)>($r1, $r4, $r3);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.DocType) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.DocType $r3;
        org.jdom2.output.support.FormatStack $r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.DocType;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printDocType(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.DocType)>($r1, $r4, $r3);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.Document) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Document $r3;
        org.jdom2.output.support.FormatStack $r4;
        org.jdom2.util.NamespaceStack $r5;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Document;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r5 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r5.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printDocument(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Document)>($r1, $r4, $r5, $r3);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.Element) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Element $r3;
        org.jdom2.output.support.FormatStack $r4;
        org.jdom2.util.NamespaceStack $r5;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Element;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r5 = new org.jdom2.util.NamespaceStack;

        specialinvoke $r5.<org.jdom2.util.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printElement(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.util.NamespaceStack,org.jdom2.Element)>($r1, $r4, $r5, $r3);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.EntityRef) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.EntityRef $r3;
        org.jdom2.output.support.FormatStack $r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.EntityRef;

        $r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke $r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printEntityRef(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.EntityRef)>($r1, $r4, $r3);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.ProcessingInstruction) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.ProcessingInstruction $r3;
        org.jdom2.output.support.FormatStack r4;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.ProcessingInstruction;

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        virtualinvoke r4.<org.jdom2.output.support.FormatStack: void setIgnoreTrAXEscapingPIs(boolean)>(1);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printProcessingInstruction(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.ProcessingInstruction)>($r1, r4, $r3);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;
    }
    public void process(javax.xml.stream.XMLStreamWriter, org.jdom2.output.Format, org.jdom2.Text) throws javax.xml.stream.XMLStreamException
    {
        org.jdom2.output.support.AbstractStAXStreamProcessor r0;
        javax.xml.stream.XMLStreamWriter $r1;
        org.jdom2.output.Format $r2;
        org.jdom2.Text $r3;
        org.jdom2.output.support.FormatStack r4;
        java.util.List $r5;
        org.jdom2.output.support.Walker $r6;
        boolean $z0;
        org.jdom2.Content $r7;
        java.lang.String $r8;
        org.jdom2.Content$CType $r9, $r10;

        r0 := @this: org.jdom2.output.support.AbstractStAXStreamProcessor;

        $r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r2 := @parameter1: org.jdom2.output.Format;

        $r3 := @parameter2: org.jdom2.Text;

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r4 = new org.jdom2.output.support.FormatStack;

        specialinvoke r4.<org.jdom2.output.support.FormatStack: void <init>(org.jdom2.output.Format)>($r2);

        $r6 = virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: org.jdom2.output.support.Walker buildWalker(org.jdom2.output.support.FormatStack,java.util.List,boolean)>(r4, $r5, 0);

        $z0 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: org.jdom2.Content next()>();

        if $r7 != null goto label2;

        $r3 = new org.jdom2.Text;

        $r8 = interfaceinvoke $r6.<org.jdom2.output.support.Walker: java.lang.String text()>();

        specialinvoke $r3.<org.jdom2.Text: void <init>(java.lang.String)>($r8);

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printText(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, r4, $r3);

     label1:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

        return;

     label2:
        $r9 = virtualinvoke $r7.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $r10 = <org.jdom2.Content$CType: org.jdom2.Content$CType Text>;

        if $r9 != $r10 goto label1;

        $r3 = (org.jdom2.Text) $r7;

        virtualinvoke r0.<org.jdom2.output.support.AbstractStAXStreamProcessor: void printText(javax.xml.stream.XMLStreamWriter,org.jdom2.output.support.FormatStack,org.jdom2.Text)>($r1, r4, $r3);

        goto label1;
    }
