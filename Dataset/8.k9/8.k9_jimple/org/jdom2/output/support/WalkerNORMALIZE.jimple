org.jdom2.output.support.WalkerNORMALIZE extends org.jdom2.output.support.AbstractFormattedWalker
    public void <init>(java.util.List, org.jdom2.output.support.FormatStack, boolean)
    {
        org.jdom2.output.support.WalkerNORMALIZE r0;
        java.util.List r1;
        org.jdom2.output.support.FormatStack $r2;
        boolean $z0;

        r0 := @this: org.jdom2.output.support.WalkerNORMALIZE;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.jdom2.output.support.FormatStack;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<org.jdom2.output.support.AbstractFormattedWalker: void <init>(java.util.List,org.jdom2.output.support.FormatStack,boolean)>(r1, $r2, $z0);

        return;
    }
    private boolean isSpaceFirst(java.lang.String)
    {
        org.jdom2.output.support.WalkerNORMALIZE r0;
        java.lang.String $r1;
        int $i0;
        char $c1;
        boolean $z0;

        r0 := @this: org.jdom2.output.support.WalkerNORMALIZE;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c1);

        return $z0;

     label1:
        return 0;
    }
    private boolean isSpaceLast(java.lang.String)
    {
        org.jdom2.output.support.WalkerNORMALIZE r0;
        java.lang.String $r1;
        int $i0;
        char $c1;
        boolean $z0;

        r0 := @this: org.jdom2.output.support.WalkerNORMALIZE;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void analyzeMultiText(org.jdom2.output.support.AbstractFormattedWalker$MultiText, int, int)
    {
        org.jdom2.output.support.WalkerNORMALIZE r0;
        org.jdom2.output.support.AbstractFormattedWalker$MultiText $r1;
        int $i0, $i1, i2, $i3;
        boolean z0, z1, $z2;
        org.jdom2.Content $r2;
        int[] $r3;
        org.jdom2.Content$CType $r4;
        org.jdom2.output.support.AbstractFormattedWalker$Trim $r5;
        java.lang.String $r6;

        r0 := @this: org.jdom2.output.support.WalkerNORMALIZE;

        $r1 := @parameter0: org.jdom2.output.support.AbstractFormattedWalker$MultiText;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        z0 = 0;

        z1 = 0;

        i2 = 0;

     label01:
        if i2 >= $i1 goto label13;

        $i3 = $i0 + i2;

        $r2 = virtualinvoke r0.<org.jdom2.output.support.WalkerNORMALIZE: org.jdom2.Content get(int)>($i3);

        $r3 = <org.jdom2.output.support.WalkerNORMALIZE$1: int[] $SwitchMap$org$jdom2$Content$CType>;

        $r4 = virtualinvoke $r2.<org.jdom2.Content: org.jdom2.Content$CType getCType()>();

        $i3 = virtualinvoke $r4.<org.jdom2.Content$CType: int ordinal()>();

        $i3 = $r3[$i3];

        lookupswitch($i3)
        {
            case 1: goto label05;
            case 2: goto label09;
            default: goto label02;
        };

     label02:
        if z1 == 0 goto label03;

        if z0 == 0 goto label03;

        $r5 = <org.jdom2.output.support.AbstractFormattedWalker$Trim: org.jdom2.output.support.AbstractFormattedWalker$Trim NONE>;

        virtualinvoke $r1.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void appendText(org.jdom2.output.support.AbstractFormattedWalker$Trim,java.lang.String)>($r5, " ");

     label03:
        virtualinvoke $r1.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void appendRaw(org.jdom2.Content)>($r2);

        z1 = 1;

        z0 = 0;

     label04:
        i2 = i2 + 1;

        goto label01;

     label05:
        $r6 = virtualinvoke $r2.<org.jdom2.Content: java.lang.String getValue()>();

        $z2 = staticinvoke <org.jdom2.Verifier: boolean isAllXMLWhitespace(java.lang.String)>($r6);

        if $z2 == 0 goto label06;

        if z1 == 0 goto label04;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i3 <= 0 goto label04;

        z0 = 1;

        goto label04;

     label06:
        if z1 == 0 goto label08;

        if z0 != 0 goto label07;

        z1 = specialinvoke r0.<org.jdom2.output.support.WalkerNORMALIZE: boolean isSpaceFirst(java.lang.String)>($r6);

        if z1 == 0 goto label08;

     label07:
        $r5 = <org.jdom2.output.support.AbstractFormattedWalker$Trim: org.jdom2.output.support.AbstractFormattedWalker$Trim NONE>;

        virtualinvoke $r1.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void appendText(org.jdom2.output.support.AbstractFormattedWalker$Trim,java.lang.String)>($r5, " ");

     label08:
        $r5 = <org.jdom2.output.support.AbstractFormattedWalker$Trim: org.jdom2.output.support.AbstractFormattedWalker$Trim COMPACT>;

        virtualinvoke $r1.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void appendText(org.jdom2.output.support.AbstractFormattedWalker$Trim,java.lang.String)>($r5, $r6);

        z1 = 1;

        z0 = specialinvoke r0.<org.jdom2.output.support.WalkerNORMALIZE: boolean isSpaceLast(java.lang.String)>($r6);

        goto label04;

     label09:
        $r6 = virtualinvoke $r2.<org.jdom2.Content: java.lang.String getValue()>();

        $z2 = staticinvoke <org.jdom2.Verifier: boolean isAllXMLWhitespace(java.lang.String)>($r6);

        if $z2 == 0 goto label10;

        if z1 == 0 goto label04;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i3 <= 0 goto label04;

        z0 = 1;

        goto label04;

     label10:
        if z1 == 0 goto label12;

        if z0 != 0 goto label11;

        z1 = specialinvoke r0.<org.jdom2.output.support.WalkerNORMALIZE: boolean isSpaceFirst(java.lang.String)>($r6);

        if z1 == 0 goto label12;

     label11:
        $r5 = <org.jdom2.output.support.AbstractFormattedWalker$Trim: org.jdom2.output.support.AbstractFormattedWalker$Trim NONE>;

        virtualinvoke $r1.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void appendText(org.jdom2.output.support.AbstractFormattedWalker$Trim,java.lang.String)>($r5, " ");

     label12:
        $r5 = <org.jdom2.output.support.AbstractFormattedWalker$Trim: org.jdom2.output.support.AbstractFormattedWalker$Trim COMPACT>;

        virtualinvoke $r1.<org.jdom2.output.support.AbstractFormattedWalker$MultiText: void appendCDATA(org.jdom2.output.support.AbstractFormattedWalker$Trim,java.lang.String)>($r5, $r6);

        z1 = 1;

        z0 = specialinvoke r0.<org.jdom2.output.support.WalkerNORMALIZE: boolean isSpaceLast(java.lang.String)>($r6);

        goto label04;

     label13:
        return;
    }
