org.jdom2.CloneBase extends java.lang.Object implements java.lang.Cloneable
    protected void <init>()
    {
        org.jdom2.CloneBase r0;

        r0 := @this: org.jdom2.CloneBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.CloneBase r0;

        r0 := @this: org.jdom2.CloneBase;

        r0 = virtualinvoke r0.<org.jdom2.CloneBase: org.jdom2.CloneBase clone()>();

        return r0;
    }
    protected org.jdom2.CloneBase clone()
    {
        org.jdom2.CloneBase r0, $r3;
        java.lang.CloneNotSupportedException r1;
        java.lang.Object $r2;
        java.lang.IllegalStateException $r4;
        java.lang.Object[] $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: org.jdom2.CloneBase;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        $r3 = (org.jdom2.CloneBase) $r2;

        return $r3;

     label3:
        r1 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to clone class %s which should always support it.", $r5);

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r1);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }
