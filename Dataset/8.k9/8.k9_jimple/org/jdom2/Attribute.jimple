org.jdom2.Attribute extends org.jdom2.CloneBase implements org.jdom2.NamespaceAware java.io.Serializable java.lang.Cloneable
public static final org.jdom2.AttributeType CDATA_TYPE
public static final org.jdom2.AttributeType ENTITIES_TYPE
public static final org.jdom2.AttributeType ENTITY_TYPE
public static final org.jdom2.AttributeType ENUMERATED_TYPE
public static final org.jdom2.AttributeType IDREFS_TYPE
public static final org.jdom2.AttributeType IDREF_TYPE
public static final org.jdom2.AttributeType ID_TYPE
public static final org.jdom2.AttributeType NMTOKENS_TYPE
public static final org.jdom2.AttributeType NMTOKEN_TYPE
public static final org.jdom2.AttributeType NOTATION_TYPE
public static final org.jdom2.AttributeType UNDECLARED_TYPE
private static final long serialVersionUID
protected java.lang.String name
protected org.jdom2.Namespace namespace
protected transient org.jdom2.Element parent
protected boolean specified
protected org.jdom2.AttributeType type
protected java.lang.String value
    static void <clinit>()
    {
        org.jdom2.AttributeType $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType UNDECLARED>;

        <org.jdom2.Attribute: org.jdom2.AttributeType UNDECLARED_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType CDATA>;

        <org.jdom2.Attribute: org.jdom2.AttributeType CDATA_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType ID>;

        <org.jdom2.Attribute: org.jdom2.AttributeType ID_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType IDREF>;

        <org.jdom2.Attribute: org.jdom2.AttributeType IDREF_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType IDREFS>;

        <org.jdom2.Attribute: org.jdom2.AttributeType IDREFS_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType ENTITY>;

        <org.jdom2.Attribute: org.jdom2.AttributeType ENTITY_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType ENTITIES>;

        <org.jdom2.Attribute: org.jdom2.AttributeType ENTITIES_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType NMTOKEN>;

        <org.jdom2.Attribute: org.jdom2.AttributeType NMTOKEN_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType NMTOKENS>;

        <org.jdom2.Attribute: org.jdom2.AttributeType NMTOKENS_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType NOTATION>;

        <org.jdom2.Attribute: org.jdom2.AttributeType NOTATION_TYPE> = $r0;

        $r0 = <org.jdom2.AttributeType: org.jdom2.AttributeType ENUMERATION>;

        <org.jdom2.Attribute: org.jdom2.AttributeType ENUMERATED_TYPE> = $r0;

        return;
    }
    protected void <init>()
    {
        org.jdom2.Attribute r0;
        org.jdom2.AttributeType $r1;

        r0 := @this: org.jdom2.Attribute;

        specialinvoke r0.<org.jdom2.CloneBase: void <init>()>();

        $r1 = <org.jdom2.AttributeType: org.jdom2.AttributeType UNDECLARED>;

        r0.<org.jdom2.Attribute: org.jdom2.AttributeType type> = $r1;

        r0.<org.jdom2.Attribute: boolean specified> = 1;

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        org.jdom2.AttributeType $r3;
        org.jdom2.Namespace $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <org.jdom2.AttributeType: org.jdom2.AttributeType UNDECLARED>;

        $r4 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        specialinvoke r0.<org.jdom2.Attribute: void <init>(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)>($r1, $r2, $r3, $r4);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, int)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        int $i0;
        org.jdom2.Namespace $r3;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        specialinvoke r0.<org.jdom2.Attribute: void <init>(java.lang.String,java.lang.String,int,org.jdom2.Namespace)>($r1, $r2, $i0, $r3);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, int, org.jdom2.Namespace)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        int $i0;
        org.jdom2.Namespace $r3;
        org.jdom2.AttributeType $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: org.jdom2.Namespace;

        $r4 = staticinvoke <org.jdom2.AttributeType: org.jdom2.AttributeType byIndex(int)>($i0);

        specialinvoke r0.<org.jdom2.Attribute: void <init>(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)>($r1, $r2, $r4, $r3);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, org.jdom2.AttributeType)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        org.jdom2.AttributeType $r3;
        org.jdom2.Namespace $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jdom2.AttributeType;

        $r4 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        specialinvoke r0.<org.jdom2.Attribute: void <init>(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)>($r1, $r2, $r3, $r4);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, org.jdom2.AttributeType, org.jdom2.Namespace)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        org.jdom2.AttributeType $r3, $r5;
        org.jdom2.Namespace $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jdom2.AttributeType;

        $r4 := @parameter3: org.jdom2.Namespace;

        specialinvoke r0.<org.jdom2.CloneBase: void <init>()>();

        $r5 = <org.jdom2.AttributeType: org.jdom2.AttributeType UNDECLARED>;

        r0.<org.jdom2.Attribute: org.jdom2.AttributeType type> = $r5;

        r0.<org.jdom2.Attribute: boolean specified> = 1;

        virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Attribute setName(java.lang.String)>($r1);

        virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Attribute setValue(java.lang.String)>($r2);

        virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Attribute setAttributeType(org.jdom2.AttributeType)>($r3);

        virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Attribute setNamespace(org.jdom2.Namespace)>($r4);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        org.jdom2.Namespace $r3;
        org.jdom2.AttributeType $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jdom2.Namespace;

        $r4 = <org.jdom2.AttributeType: org.jdom2.AttributeType UNDECLARED>;

        specialinvoke r0.<org.jdom2.Attribute: void <init>(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)>($r1, $r2, $r4, $r3);

        return;
    }
    private static final java.util.List orderFirst(org.jdom2.Namespace, java.util.List)
    {
        org.jdom2.Namespace $r0, r6;
        java.util.ArrayList r1;
        java.util.TreeMap r2;
        java.util.List r3;
        java.lang.Object $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.String $r7;
        int $i0;
        java.util.Collection $r8;

        $r0 := @parameter0: org.jdom2.Namespace;

        r3 := @parameter1: java.util.List;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        if $r4 != $r0 goto label1;

        return r3;

     label1:
        r2 = new java.util.TreeMap;

        specialinvoke r2.<java.util.TreeMap: void <init>()>();

        $r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.jdom2.Namespace) $r4;

        if r6 == $r0 goto label2;

        $r7 = virtualinvoke r6.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r6);

        goto label2;

     label3:
        r1 = new java.util.ArrayList;

        $i0 = virtualinvoke r2.<java.util.TreeMap: int size()>();

        $i0 = $i0 + 1;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        $r8 = virtualinvoke r2.<java.util.TreeMap: java.util.Collection values()>();

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r8);

        r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return r3;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.Attribute r0;

        r0 := @this: org.jdom2.Attribute;

        r0 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Attribute clone()>();

        return r0;
    }
    public org.jdom2.Attribute clone()
    {
        org.jdom2.Attribute r0;
        org.jdom2.CloneBase $r1;

        r0 := @this: org.jdom2.Attribute;

        $r1 = specialinvoke r0.<org.jdom2.CloneBase: org.jdom2.CloneBase clone()>();

        r0 = (org.jdom2.Attribute) $r1;

        r0.<org.jdom2.Attribute: org.jdom2.Element parent> = null;

        return r0;
    }
    public volatile org.jdom2.CloneBase clone()
    {
        org.jdom2.Attribute r0;

        r0 := @this: org.jdom2.Attribute;

        r0 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Attribute clone()>();

        return r0;
    }
    public org.jdom2.Attribute detach()
    {
        org.jdom2.Attribute r0;
        org.jdom2.Element $r1;

        r0 := @this: org.jdom2.Attribute;

        $r1 = r0.<org.jdom2.Attribute: org.jdom2.Element parent>;

        if $r1 == null goto label1;

        $r1 = r0.<org.jdom2.Attribute: org.jdom2.Element parent>;

        virtualinvoke $r1.<org.jdom2.Element: boolean removeAttribute(org.jdom2.Attribute)>(r0);

     label1:
        return r0;
    }
    public org.jdom2.AttributeType getAttributeType()
    {
        org.jdom2.Attribute r0;
        org.jdom2.AttributeType r1;

        r0 := @this: org.jdom2.Attribute;

        r1 = r0.<org.jdom2.Attribute: org.jdom2.AttributeType type>;

        return r1;
    }
    public boolean getBooleanValue() throws org.jdom2.DataConversionException
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1;
        boolean $z0;
        org.jdom2.DataConversionException $r2;

        r0 := @this: org.jdom2.Attribute;

        $r1 = r0.<org.jdom2.Attribute: java.lang.String value>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("on");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("1");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("yes");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("off");

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("0");

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no");

        if $z0 == 0 goto label4;

     label3:
        return 0;

     label4:
        $r2 = new org.jdom2.DataConversionException;

        $r1 = r0.<org.jdom2.Attribute: java.lang.String name>;

        specialinvoke $r2.<org.jdom2.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r1, "boolean");

        throw $r2;
    }
    public org.jdom2.Document getDocument()
    {
        org.jdom2.Attribute r0;
        org.jdom2.Document $r1;
        org.jdom2.Element $r2;

        r0 := @this: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Attribute: org.jdom2.Element parent>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.jdom2.Attribute: org.jdom2.Element parent>;

        $r1 = virtualinvoke $r2.<org.jdom2.Element: org.jdom2.Document getDocument()>();

        return $r1;
    }
    public double getDoubleValue() throws org.jdom2.DataConversionException
    {
        org.jdom2.Attribute r0;
        java.lang.NumberFormatException r1;
        java.lang.String $r2, $r4;
        java.lang.Double $r3;
        double $d0;
        boolean $z0;
        org.jdom2.DataConversionException $r5;

        r0 := @this: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String value>;

     label1:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

     label2:
        return $d0;

     label3:
        r1 := @caughtexception;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String value>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r4 = "INF";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        return #Infinity;

     label4:
        $r4 = "-INF";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return #-Infinity;

     label5:
        $r5 = new org.jdom2.DataConversionException;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String name>;

        specialinvoke $r5.<org.jdom2.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r2, "double");

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public float getFloatValue() throws org.jdom2.DataConversionException
    {
        org.jdom2.Attribute r0;
        java.lang.NumberFormatException r1;
        java.lang.String $r2;
        java.lang.Float $r3;
        float $f0;
        org.jdom2.DataConversionException $r4;

        r0 := @this: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String value>;

     label1:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

     label2:
        return $f0;

     label3:
        r1 := @caughtexception;

        $r4 = new org.jdom2.DataConversionException;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String name>;

        specialinvoke $r4.<org.jdom2.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r2, "float");

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public int getIntValue() throws org.jdom2.DataConversionException
    {
        org.jdom2.Attribute r0;
        java.lang.NumberFormatException r1;
        java.lang.String $r2;
        int $i0;
        org.jdom2.DataConversionException $r3;

        r0 := @this: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String value>;

     label1:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label2:
        return $i0;

     label3:
        r1 := @caughtexception;

        $r3 = new org.jdom2.DataConversionException;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String name>;

        specialinvoke $r3.<org.jdom2.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r2, "int");

        throw $r3;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public long getLongValue() throws org.jdom2.DataConversionException
    {
        org.jdom2.Attribute r0;
        java.lang.NumberFormatException r1;
        java.lang.String $r2;
        long $l0;
        org.jdom2.DataConversionException $r3;

        r0 := @this: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String value>;

     label1:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

        $r3 = new org.jdom2.DataConversionException;

        $r2 = r0.<org.jdom2.Attribute: java.lang.String name>;

        specialinvoke $r3.<org.jdom2.DataConversionException: void <init>(java.lang.String,java.lang.String)>($r2, "long");

        throw $r3;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public java.lang.String getName()
    {
        org.jdom2.Attribute r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Attribute;

        r1 = r0.<org.jdom2.Attribute: java.lang.String name>;

        return r1;
    }
    public org.jdom2.Namespace getNamespace()
    {
        org.jdom2.Attribute r0;
        org.jdom2.Namespace r1;

        r0 := @this: org.jdom2.Attribute;

        r1 = r0.<org.jdom2.Attribute: org.jdom2.Namespace namespace>;

        return r1;
    }
    public java.lang.String getNamespacePrefix()
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Attribute: org.jdom2.Namespace namespace>;

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        return $r1;
    }
    public java.lang.String getNamespaceURI()
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.Attribute: org.jdom2.Namespace namespace>;

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        return $r1;
    }
    public java.util.List getNamespacesInScope()
    {
        org.jdom2.Attribute r0;
        java.util.ArrayList r1;
        org.jdom2.Element $r2;
        org.jdom2.Namespace $r3;
        java.util.List $r4;

        r0 := @this: org.jdom2.Attribute;

        $r2 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        if $r2 != null goto label1;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>(3);

        $r3 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r4;

     label1:
        $r3 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r2 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        $r4 = virtualinvoke $r2.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r4 = staticinvoke <org.jdom2.Attribute: java.util.List orderFirst(org.jdom2.Namespace,java.util.List)>($r3, $r4);

        return $r4;
    }
    public java.util.List getNamespacesInherited()
    {
        org.jdom2.Attribute r0;
        org.jdom2.Element $r1;
        org.jdom2.Namespace $r2;
        java.util.List $r3;

        r0 := @this: org.jdom2.Attribute;

        $r1 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        if $r1 != null goto label1;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r1 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        $r3 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r3 = staticinvoke <org.jdom2.Attribute: java.util.List orderFirst(org.jdom2.Namespace,java.util.List)>($r2, $r3);

        return $r3;
    }
    public java.util.List getNamespacesIntroduced()
    {
        org.jdom2.Attribute r0;
        org.jdom2.Element $r1;
        org.jdom2.Namespace $r2;
        java.util.List $r3;

        r0 := @this: org.jdom2.Attribute;

        $r1 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        return $r3;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;
    }
    public org.jdom2.Element getParent()
    {
        org.jdom2.Attribute r0;
        org.jdom2.Element r1;

        r0 := @this: org.jdom2.Attribute;

        r1 = r0.<org.jdom2.Attribute: org.jdom2.Element parent>;

        return r1;
    }
    public java.lang.String getQualifiedName()
    {
        org.jdom2.Attribute r0;
        org.jdom2.Namespace $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 = r0.<org.jdom2.Attribute: org.jdom2.Namespace namespace>;

        $r2 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdom2.Attribute: java.lang.String getName()>();

        return $r2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r2 = virtualinvoke r0.<org.jdom2.Attribute: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public java.lang.String getValue()
    {
        org.jdom2.Attribute r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Attribute;

        r1 = r0.<org.jdom2.Attribute: java.lang.String value>;

        return r1;
    }
    public boolean isSpecified()
    {
        org.jdom2.Attribute r0;
        boolean z0;

        r0 := @this: org.jdom2.Attribute;

        z0 = r0.<org.jdom2.Attribute: boolean specified>;

        return z0;
    }
    public org.jdom2.Attribute setAttributeType(int)
    {
        org.jdom2.Attribute r0;
        int $i0;
        org.jdom2.AttributeType $r1;

        r0 := @this: org.jdom2.Attribute;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.jdom2.AttributeType: org.jdom2.AttributeType byIndex(int)>($i0);

        virtualinvoke r0.<org.jdom2.Attribute: org.jdom2.Attribute setAttributeType(org.jdom2.AttributeType)>($r1);

        return r0;
    }
    public org.jdom2.Attribute setAttributeType(org.jdom2.AttributeType)
    {
        org.jdom2.Attribute r0;
        org.jdom2.AttributeType $r1;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: org.jdom2.AttributeType;

        if $r1 != null goto label1;

        $r1 = <org.jdom2.AttributeType: org.jdom2.AttributeType UNDECLARED>;

     label1:
        r0.<org.jdom2.Attribute: org.jdom2.AttributeType type> = $r1;

        r0.<org.jdom2.Attribute: boolean specified> = 1;

        return r0;
    }
    public org.jdom2.Attribute setName(java.lang.String)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        org.jdom2.IllegalNameException $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can not set a null name for an Attribute.");

        throw $r3;

     label1:
        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkAttributeName(java.lang.String)>($r1);

        if $r2 == null goto label2;

        $r4 = new org.jdom2.IllegalNameException;

        specialinvoke $r4.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "attribute", $r2);

        throw $r4;

     label2:
        r0.<org.jdom2.Attribute: java.lang.String name> = $r1;

        r0.<org.jdom2.Attribute: boolean specified> = 1;

        return r0;
    }
    public org.jdom2.Attribute setNamespace(org.jdom2.Namespace)
    {
        org.jdom2.Attribute r0;
        org.jdom2.Namespace $r1, $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        org.jdom2.IllegalNameException $r5;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: org.jdom2.Namespace;

        if $r1 != null goto label1;

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

     label1:
        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        if $r1 == $r2 goto label2;

        $r3 = "";

        $r4 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = new org.jdom2.IllegalNameException;

        specialinvoke $r5.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "attribute namespace", "An attribute namespace without a prefix can only be the NO_NAMESPACE namespace");

        throw $r5;

     label2:
        r0.<org.jdom2.Attribute: org.jdom2.Namespace namespace> = $r1;

        r0.<org.jdom2.Attribute: boolean specified> = 1;

        return r0;
    }
    protected org.jdom2.Attribute setParent(org.jdom2.Element)
    {
        org.jdom2.Attribute r0;
        org.jdom2.Element $r1;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: org.jdom2.Element;

        r0.<org.jdom2.Attribute: org.jdom2.Element parent> = $r1;

        return r0;
    }
    public void setSpecified(boolean)
    {
        org.jdom2.Attribute r0;
        boolean $z0;

        r0 := @this: org.jdom2.Attribute;

        $z0 := @parameter0: boolean;

        r0.<org.jdom2.Attribute: boolean specified> = $z0;

        return;
    }
    public org.jdom2.Attribute setValue(java.lang.String)
    {
        org.jdom2.Attribute r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        org.jdom2.IllegalDataException $r4;

        r0 := @this: org.jdom2.Attribute;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can not set a null value for an Attribute");

        throw $r3;

     label1:
        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkCharacterData(java.lang.String)>($r1);

        if $r2 == null goto label2;

        $r4 = new org.jdom2.IllegalDataException;

        specialinvoke $r4.<org.jdom2.IllegalDataException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "attribute", $r2);

        throw $r4;

     label2:
        r0.<org.jdom2.Attribute: java.lang.String value> = $r1;

        r0.<org.jdom2.Attribute: boolean specified> = 1;

        return r0;
    }
    public java.lang.String toString()
    {
        org.jdom2.Attribute r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.Attribute;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Attribute: ");

        $r2 = virtualinvoke r0.<org.jdom2.Attribute: java.lang.String getQualifiedName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r2 = r0.<org.jdom2.Attribute: java.lang.String value>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
