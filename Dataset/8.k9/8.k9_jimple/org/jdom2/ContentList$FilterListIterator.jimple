org.jdom2.ContentList$FilterListIterator extends java.lang.Object implements java.util.ListIterator
private boolean canremove
private boolean canset
private int cursor
private int expectedmod
private final org.jdom2.ContentList$FilterList filterlist
private boolean forward
final org.jdom2.ContentList this$0
    void <init>(org.jdom2.ContentList, org.jdom2.ContentList$FilterList, int)
    {
        org.jdom2.ContentList$FilterListIterator r0;
        org.jdom2.ContentList $r1;
        org.jdom2.ContentList$FilterList r2;
        int $i0, $i1, $i2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $r1 := @parameter0: org.jdom2.ContentList;

        r2 := @parameter1: org.jdom2.ContentList$FilterList;

        $i0 := @parameter2: int;

        r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.ContentList$FilterListIterator: boolean forward> = 0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canremove> = 0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canset> = 0;

        r0.<org.jdom2.ContentList$FilterListIterator: int expectedmod> = -1;

        r0.<org.jdom2.ContentList$FilterListIterator: int cursor> = -1;

        r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist> = r2;

        $i1 = staticinvoke <org.jdom2.ContentList: int access$100(org.jdom2.ContentList)>($r1);

        r0.<org.jdom2.ContentList$FilterListIterator: int expectedmod> = $i1;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean forward> = 0;

        if $i0 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i0 = virtualinvoke r2.<org.jdom2.ContentList$FilterList: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i1 = staticinvoke <org.jdom2.ContentList$FilterList: int access$800(org.jdom2.ContentList$FilterList,int)>(r2, $i0);

        $i2 = staticinvoke <org.jdom2.ContentList: int access$200(org.jdom2.ContentList)>($r1);

        if $i1 != $i2 goto label2;

        r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i1 = virtualinvoke r2.<org.jdom2.ContentList$FilterList: int size()>();

        if $i0 <= $i1 goto label2;

        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i0 = virtualinvoke r2.<org.jdom2.ContentList$FilterList: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        r0.<org.jdom2.ContentList$FilterListIterator: int cursor> = $i0;

        return;
    }
    private void checkConcurrent()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        int $i0, $i1;
        org.jdom2.ContentList $r1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $i1 = r0.<org.jdom2.ContentList$FilterListIterator: int expectedmod>;

        $r1 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList this$0>;

        $i0 = staticinvoke <org.jdom2.ContentList: int access$100(org.jdom2.ContentList)>($r1);

        if $i1 == $i0 goto label1;

        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>(java.lang.String)>("The ContentList supporting the FilterList this iterator is processing has been modified by something other than this Iterator.");

        throw $r2;

     label1:
        return;
    }
    public volatile void add(java.lang.Object)
    {
        org.jdom2.ContentList$FilterListIterator r0;
        java.lang.Object $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.jdom2.Content) $r1;

        virtualinvoke r0.<org.jdom2.ContentList$FilterListIterator: void add(org.jdom2.Content)>($r2);

        return;
    }
    public void add(org.jdom2.Content)
    {
        org.jdom2.ContentList$FilterListIterator r0;
        org.jdom2.Content $r1;
        int $i0, i1;
        boolean $z0;
        org.jdom2.ContentList$FilterList $r2;
        org.jdom2.ContentList $r3;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $r1 := @parameter0: org.jdom2.Content;

        specialinvoke r0.<org.jdom2.ContentList$FilterListIterator: void checkConcurrent()>();

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean forward>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        i1 = $i0 + 1;

     label1:
        $r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        virtualinvoke $r2.<org.jdom2.ContentList$FilterList: void add(int,org.jdom2.Content)>(i1, $r1);

        $r3 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList this$0>;

        $i0 = staticinvoke <org.jdom2.ContentList: int access$100(org.jdom2.ContentList)>($r3);

        r0.<org.jdom2.ContentList$FilterListIterator: int expectedmod> = $i0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canset> = 0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canremove> = 0;

        r0.<org.jdom2.ContentList$FilterListIterator: int cursor> = i1;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean forward> = 1;

        return;

     label2:
        i1 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        goto label1;
    }
    public boolean hasNext()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        org.jdom2.ContentList$FilterList $r1;
        boolean $z0;
        int $i0, $i1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $r1 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean forward>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        $i0 = $i0 + 1;

     label1:
        $i0 = staticinvoke <org.jdom2.ContentList$FilterList: int access$800(org.jdom2.ContentList$FilterList,int)>($r1, $i0);

        $r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList this$0>;

        $i1 = staticinvoke <org.jdom2.ContentList: int access$200(org.jdom2.ContentList)>($r2);

        if $i0 >= $i1 goto label3;

        return 1;

     label2:
        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        goto label1;

     label3:
        return 0;
    }
    public boolean hasPrevious()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean forward>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

     label1:
        if $i0 < 0 goto label3;

        return 1;

     label2:
        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        $i0 = $i0 + -1;

        goto label1;

     label3:
        return 0;
    }
    public volatile java.lang.Object next()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $r1 = virtualinvoke r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.Content next()>();

        return $r1;
    }
    public org.jdom2.Content next()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        boolean $z0;
        int $i0, $i1, $i2;
        org.jdom2.ContentList$FilterList $r1;
        org.jdom2.ContentList $r2;
        java.util.NoSuchElementException $r3;
        org.jdom2.Content $r4;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        specialinvoke r0.<org.jdom2.ContentList$FilterListIterator: void checkConcurrent()>();

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean forward>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        $i0 = $i0 + 1;

     label1:
        $r1 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i1 = staticinvoke <org.jdom2.ContentList$FilterList: int access$800(org.jdom2.ContentList$FilterList,int)>($r1, $i0);

        $r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList this$0>;

        $i2 = staticinvoke <org.jdom2.ContentList: int access$200(org.jdom2.ContentList)>($r2);

        if $i1 < $i2 goto label3;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("next() is beyond the end of the Iterator");

        throw $r3;

     label2:
        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        goto label1;

     label3:
        r0.<org.jdom2.ContentList$FilterListIterator: int cursor> = $i0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean forward> = 1;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canremove> = 1;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canset> = 1;

        $r1 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        $r4 = virtualinvoke $r1.<org.jdom2.ContentList$FilterList: org.jdom2.Content get(int)>($i0);

        return $r4;
    }
    public int nextIndex()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean forward>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        $i0 = $i0 + 1;

        return $i0;

     label1:
        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        return $i0;
    }
    public volatile java.lang.Object previous()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $r1 = virtualinvoke r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.Content previous()>();

        return $r1;
    }
    public org.jdom2.Content previous()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        org.jdom2.Content $r1;
        boolean $z0;
        int i0;
        java.util.NoSuchElementException $r2;
        org.jdom2.ContentList$FilterList $r3;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        specialinvoke r0.<org.jdom2.ContentList$FilterListIterator: void checkConcurrent()>();

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean forward>;

        if $z0 == 0 goto label2;

        i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

     label1:
        if i0 >= 0 goto label3;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("previous() is beyond the beginning of the Iterator");

        throw $r2;

     label2:
        i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        i0 = i0 + -1;

        goto label1;

     label3:
        r0.<org.jdom2.ContentList$FilterListIterator: int cursor> = i0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean forward> = 0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canremove> = 1;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canset> = 1;

        $r3 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        $r1 = virtualinvoke $r3.<org.jdom2.ContentList$FilterList: org.jdom2.Content get(int)>(i0);

        return $r1;
    }
    public int previousIndex()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean forward>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        return $i0;

     label1:
        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        $i0 = $i0 + -1;

        return $i0;
    }
    public void remove()
    {
        org.jdom2.ContentList$FilterListIterator r0;
        int $i0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        org.jdom2.ContentList$FilterList $r2;
        org.jdom2.ContentList $r3;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        specialinvoke r0.<org.jdom2.ContentList$FilterListIterator: void checkConcurrent()>();

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean canremove>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not remove an element unless either next() or previous() has been called since the last remove()");

        throw $r1;

     label1:
        $r2 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        virtualinvoke $r2.<org.jdom2.ContentList$FilterList: org.jdom2.Content remove(int)>($i0);

        r0.<org.jdom2.ContentList$FilterListIterator: boolean forward> = 0;

        $r3 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList this$0>;

        $i0 = staticinvoke <org.jdom2.ContentList: int access$100(org.jdom2.ContentList)>($r3);

        r0.<org.jdom2.ContentList$FilterListIterator: int expectedmod> = $i0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canremove> = 0;

        r0.<org.jdom2.ContentList$FilterListIterator: boolean canset> = 0;

        return;
    }
    public volatile void set(java.lang.Object)
    {
        org.jdom2.ContentList$FilterListIterator r0;
        java.lang.Object $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.jdom2.Content) $r1;

        virtualinvoke r0.<org.jdom2.ContentList$FilterListIterator: void set(org.jdom2.Content)>($r2);

        return;
    }
    public void set(org.jdom2.Content)
    {
        org.jdom2.ContentList$FilterListIterator r0;
        org.jdom2.Content r1;
        int $i0;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        org.jdom2.ContentList$FilterList $r3;
        org.jdom2.ContentList $r4;

        r0 := @this: org.jdom2.ContentList$FilterListIterator;

        r1 := @parameter0: org.jdom2.Content;

        specialinvoke r0.<org.jdom2.ContentList$FilterListIterator: void checkConcurrent()>();

        $z0 = r0.<org.jdom2.ContentList$FilterListIterator: boolean canset>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not set an element unless either next() or previous() has been called since the last remove() or set()");

        throw $r2;

     label1:
        $r3 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList$FilterList filterlist>;

        $i0 = r0.<org.jdom2.ContentList$FilterListIterator: int cursor>;

        virtualinvoke $r3.<org.jdom2.ContentList$FilterList: org.jdom2.Content set(int,org.jdom2.Content)>($i0, r1);

        $r4 = r0.<org.jdom2.ContentList$FilterListIterator: org.jdom2.ContentList this$0>;

        $i0 = staticinvoke <org.jdom2.ContentList: int access$100(org.jdom2.ContentList)>($r4);

        r0.<org.jdom2.ContentList$FilterListIterator: int expectedmod> = $i0;

        return;
    }
