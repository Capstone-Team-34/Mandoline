org.jdom2.AttributeList extends java.util.AbstractList implements java.util.RandomAccess
private static final int INITIAL_ARRAY_SIZE
private org.jdom2.Attribute[] attributeData
private final org.jdom2.Element parent
private int size
    void <init>(org.jdom2.Element)
    {
        org.jdom2.AttributeList r0;
        org.jdom2.Element $r1;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: org.jdom2.Element;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<org.jdom2.AttributeList: org.jdom2.Element parent> = $r1;

        return;
    }
    static int access$100(org.jdom2.AttributeList)
    {
        org.jdom2.AttributeList $r0;
        int i0;

        $r0 := @parameter0: org.jdom2.AttributeList;

        i0 = $r0.<org.jdom2.AttributeList: int modCount>;

        return i0;
    }
    static int access$200(org.jdom2.AttributeList)
    {
        org.jdom2.AttributeList $r0;
        int i0;

        $r0 := @parameter0: org.jdom2.AttributeList;

        i0 = $r0.<org.jdom2.AttributeList: int size>;

        return i0;
    }
    static int access$300(org.jdom2.AttributeList)
    {
        org.jdom2.AttributeList $r0;
        int i0;

        $r0 := @parameter0: org.jdom2.AttributeList;

        i0 = $r0.<org.jdom2.AttributeList: int modCount>;

        return i0;
    }
    static org.jdom2.Attribute[] access$400(org.jdom2.AttributeList)
    {
        org.jdom2.AttributeList $r0;
        org.jdom2.Attribute[] r1;

        $r0 := @parameter0: org.jdom2.AttributeList;

        r1 = $r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        return r1;
    }
    static int access$500(org.jdom2.AttributeList)
    {
        org.jdom2.AttributeList $r0;
        int i0;

        $r0 := @parameter0: org.jdom2.AttributeList;

        i0 = $r0.<org.jdom2.AttributeList: int modCount>;

        return i0;
    }
    static int access$600(org.jdom2.AttributeList)
    {
        org.jdom2.AttributeList $r0;
        int i0;

        $r0 := @parameter0: org.jdom2.AttributeList;

        i0 = $r0.<org.jdom2.AttributeList: int modCount>;

        return i0;
    }
    private final int binarySearch(int[], int, int, java.util.Comparator)
    {
        org.jdom2.AttributeList r0;
        int[] $r1;
        int $i0, $i1, i2, $i3;
        java.util.Comparator r2;
        org.jdom2.Attribute r3, $r5;
        org.jdom2.Attribute[] $r4;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 := @parameter3: java.util.Comparator;

        i2 = 0;

        $i0 = $i0 + -1;

        $r4 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        r3 = $r4[$i1];

     label1:
        if i2 > $i0 goto label6;

        $i1 = i2 + $i0;

        $i1 = $i1 >>> 1;

        $r4 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i3 = $r1[$i1];

        $r5 = $r4[$i3];

        $i3 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r5);

        if $i3 != 0 goto label4;

     label2:
        if $i3 != 0 goto label3;

        if $i1 >= $i0 goto label3;

        $r4 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        i2 = $i1 + 1;

        i2 = $r1[i2];

        $r5 = $r4[i2];

        i2 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r5);

        if i2 != 0 goto label3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i1 + 1;

        return $i0;

     label4:
        if $i3 >= 0 goto label5;

        $i0 = $i1 + -1;

        goto label1;

     label5:
        i2 = $i1 + 1;

        goto label1;

     label6:
        return i2;
    }
    private void ensureCapacity(int)
    {
        org.jdom2.AttributeList r0;
        int $i0, $i1;
        org.jdom2.Attribute[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        $r1 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        if $r1 != null goto label1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 4);

        $r1 = newarray (org.jdom2.Attribute)[$i0];

        r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData> = $r1;

        return;

     label1:
        $r1 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label2;

        $r1 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i0 = $i0 + 4;

        $i0 = $i0 >>> 1;

        $i0 = $i0 << 1;

        $r2 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (org.jdom2.Attribute[]) $r2;

        r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData> = $r1;

     label2:
        return;
    }
    private int indexOfDuplicate(org.jdom2.Attribute)
    {
        org.jdom2.AttributeList r0;
        org.jdom2.Attribute $r1;
        java.lang.String $r2;
        org.jdom2.Namespace $r3;
        int $i0;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: org.jdom2.Attribute;

        $r2 = virtualinvoke $r1.<org.jdom2.Attribute: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int indexOf(java.lang.String,org.jdom2.Namespace)>($r2, $r3);

        return $i0;
    }
    private void sortInPlace(int[])
    {
        org.jdom2.AttributeList r0;
        int[] $r1, $r4;
        org.jdom2.Attribute[] r2, $r5;
        org.jdom2.Attribute $r3;
        int $i0, $i1;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        $r4 = staticinvoke <org.jdom2.internal.ArrayCopy: int[] copyOf(int[],int)>($r1, $i0);

        staticinvoke <java.util.Arrays: void sort(int[])>($r4);

        $i0 = lengthof $r4;

        r2 = newarray (org.jdom2.Attribute)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label2;

        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i1 = $r1[$i0];

        $r3 = $r5[$i1];

        r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i1 = $r4[$i0];

        $r3 = r2[$i0];

        $r5[$i1] = $r3;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }
    public volatile void add(int, java.lang.Object)
    {
        org.jdom2.AttributeList r0;
        int $i0;
        java.lang.Object $r1;
        org.jdom2.Attribute $r2;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = (org.jdom2.Attribute) $r1;

        virtualinvoke r0.<org.jdom2.AttributeList: void add(int,org.jdom2.Attribute)>($i0, $r2);

        return;
    }
    public void add(int, org.jdom2.Attribute)
    {
        org.jdom2.AttributeList r0;
        int $i0, $i1, $i2;
        org.jdom2.Attribute $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.jdom2.Element $r5;
        org.jdom2.IllegalAddException $r6;
        org.jdom2.Attribute[] $r7, $r8;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Attribute;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        if $r5 == null goto label3;

        $r6 = new org.jdom2.IllegalAddException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The attribute already has an existing parent \"");

        $r5 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        $r4 = virtualinvoke $r5.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label3:
        $i1 = specialinvoke r0.<org.jdom2.AttributeList: int indexOfDuplicate(org.jdom2.Attribute)>($r1);

        if $i1 < 0 goto label4;

        $r6 = new org.jdom2.IllegalAddException;

        specialinvoke $r6.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("Cannot add duplicate attribute");

        throw $r6;

     label4:
        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        $r4 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element)>($r1, $r5);

        if $r4 == null goto label5;

        $r6 = new org.jdom2.IllegalAddException;

        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        specialinvoke $r6.<org.jdom2.IllegalAddException: void <init>(org.jdom2.Element,org.jdom2.Attribute,java.lang.String)>($r5, $r1, $r4);

        throw $r6;

     label5:
        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>($r5);

        $i1 = r0.<org.jdom2.AttributeList: int size>;

        $i1 = $i1 + 1;

        specialinvoke r0.<org.jdom2.AttributeList: void ensureCapacity(int)>($i1);

        $i1 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 != $i1 goto label7;

        $r7 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i1 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int size> = $i1;

        $r7[$i0] = $r1;

     label6:
        $i0 = r0.<org.jdom2.AttributeList: int modCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int modCount> = $i0;

        return;

     label7:
        $r7 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $r8 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i1 = $i0 + 1;

        $i2 = r0.<org.jdom2.AttributeList: int size>;

        $i2 = $i2 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i0, $r8, $i1, $i2);

        $r7 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $r7[$i0] = $r1;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int size> = $i0;

        goto label6;
    }
    public volatile boolean add(java.lang.Object)
    {
        org.jdom2.AttributeList r0;
        boolean $z0;
        java.lang.Object $r1;
        org.jdom2.Attribute $r2;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.jdom2.Attribute) $r1;

        $z0 = virtualinvoke r0.<org.jdom2.AttributeList: boolean add(org.jdom2.Attribute)>($r2);

        return $z0;
    }
    public boolean add(org.jdom2.Attribute)
    {
        org.jdom2.AttributeList r0;
        org.jdom2.Attribute $r1, r2;
        org.jdom2.Element $r3, $r7;
        org.jdom2.IllegalAddException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        int $i0, $i1;
        org.jdom2.Attribute[] $r8;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: org.jdom2.Attribute;

        $r3 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        if $r3 == null goto label1;

        $r4 = new org.jdom2.IllegalAddException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The attribute already has an existing parent \"");

        $r3 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        $r6 = virtualinvoke $r3.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $r3 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        $r6 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element)>($r1, $r3);

        if $r6 == null goto label2;

        $r4 = new org.jdom2.IllegalAddException;

        $r3 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        $r7 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        $r6 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element)>($r1, $r7);

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(org.jdom2.Element,org.jdom2.Attribute,java.lang.String)>($r3, $r1, $r6);

        throw $r4;

     label2:
        $i0 = specialinvoke r0.<org.jdom2.AttributeList: int indexOfDuplicate(org.jdom2.Attribute)>($r1);

        if $i0 >= 0 goto label4;

        $r3 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>($r3);

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i0 = $i0 + 1;

        specialinvoke r0.<org.jdom2.AttributeList: void ensureCapacity(int)>($i0);

        $r8 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i1 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int size> = $i1;

        $r8[$i0] = $r1;

        $i0 = r0.<org.jdom2.AttributeList: int modCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int modCount> = $i0;

     label3:
        return 1;

     label4:
        $r8 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        r2 = $r8[$i0];

        virtualinvoke r2.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>(null);

        $r8 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $r8[$i0] = $r1;

        $r3 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>($r3);

        goto label3;
    }
    public boolean addAll(int, java.util.Collection)
    {
        org.jdom2.AttributeList r0;
        int $i0, i1, $i2, $i3;
        java.util.Collection r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.NullPointerException $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        org.jdom2.Attribute $r8;
        boolean $z0;
        java.lang.Throwable $r9;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        if $i0 < 0 goto label01;

        i1 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 <= i1 goto label02;

     label01:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label02:
        if r1 != null goto label03;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can not add a null Collection to AttributeList");

        throw $r5;

     label03:
        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if i1 != 0 goto label04;

        return 0;

     label04:
        if i1 != 1 goto label05;

        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.jdom2.Attribute) $r7;

        virtualinvoke r0.<org.jdom2.AttributeList: void add(int,org.jdom2.Attribute)>($i0, $r8);

        return 1;

     label05:
        $i2 = virtualinvoke r0.<org.jdom2.AttributeList: int size()>();

        i1 = $i2 + i1;

        specialinvoke r0.<org.jdom2.AttributeList: void ensureCapacity(int)>(i1);

        i1 = r0.<org.jdom2.AttributeList: int modCount>;

        $i2 = 0;

     label06:
        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label08:
        if $z0 == 0 goto label13;

     label09:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.jdom2.Attribute) $r7;

     label10:
        $i3 = $i0 + $i2;

     label11:
        virtualinvoke r0.<org.jdom2.AttributeList: void add(int,org.jdom2.Attribute)>($i3, $r8);

     label12:
        $i2 = $i2 + 1;

        goto label07;

     label13:
        goto label14;

     label14:
        return 1;

     label15:
        $r9 := @caughtexception;

     label16:
        $i2 = $i2 + -1;

        if $i2 < 0 goto label17;

        $i3 = $i0 + $i2;

        virtualinvoke r0.<org.jdom2.AttributeList: org.jdom2.Attribute remove(int)>($i3);

        goto label16;

     label17:
        r0.<org.jdom2.AttributeList: int modCount> = i1;

        throw $r9;

        catch java.lang.Throwable from label06 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
    }
    public boolean addAll(java.util.Collection)
    {
        org.jdom2.AttributeList r0;
        java.util.Collection r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.jdom2.AttributeList;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int size()>();

        $z0 = virtualinvoke r0.<org.jdom2.AttributeList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return $z0;
    }
    public void clear()
    {
        org.jdom2.AttributeList r0;
        org.jdom2.Attribute[] $r1;
        int $i0;
        org.jdom2.Attribute $r2;

        r0 := @this: org.jdom2.AttributeList;

        $r1 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        if $r1 == null goto label2;

     label1:
        $i0 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 <= 0 goto label2;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i0 = $i0 + -1;

        r0.<org.jdom2.AttributeList: int size> = $i0;

        $r1 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $r2 = $r1[$i0];

        virtualinvoke $r2.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>(null);

        $r1 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $r1[$i0] = null;

        goto label1;

     label2:
        $i0 = r0.<org.jdom2.AttributeList: int modCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int modCount> = $i0;

        return;
    }
    void clearAndSet(java.util.Collection)
    {
        org.jdom2.AttributeList r0;
        java.util.Collection r1;
        org.jdom2.Attribute[] r2;
        int i0, i1, $i2, $i3;
        boolean $z0;
        org.jdom2.Attribute $r3;
        org.jdom2.Element $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.jdom2.AttributeList;

        r1 := @parameter0: java.util.Collection;

        if r1 == null goto label01;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        virtualinvoke r0.<org.jdom2.AttributeList: void clear()>();

        return;

     label02:
        r2 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        i1 = r0.<org.jdom2.AttributeList: int size>;

        i0 = r0.<org.jdom2.AttributeList: int modCount>;

     label03:
        $i2 = r0.<org.jdom2.AttributeList: int size>;

        if $i2 <= 0 goto label04;

        $i2 = r0.<org.jdom2.AttributeList: int size>;

        $i2 = $i2 + -1;

        r0.<org.jdom2.AttributeList: int size> = $i2;

        $r3 = r2[$i2];

        virtualinvoke $r3.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>(null);

        goto label03;

     label04:
        r0.<org.jdom2.AttributeList: int size> = 0;

        r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData> = null;

     label05:
        virtualinvoke r0.<org.jdom2.AttributeList: boolean addAll(int,java.util.Collection)>(0, r1);

     label06:
        goto label10;

     label07:
        $r5 := @caughtexception;

        r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData> = r2;

     label08:
        $i2 = r0.<org.jdom2.AttributeList: int size>;

        if $i2 >= i1 goto label09;

        r2 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i3 = r0.<org.jdom2.AttributeList: int size>;

        $i2 = $i3 + 1;

        r0.<org.jdom2.AttributeList: int size> = $i2;

        $r3 = r2[$i3];

        $r4 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        virtualinvoke $r3.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>($r4);

        goto label08;

     label09:
        r0.<org.jdom2.AttributeList: int modCount> = i0;

        throw $r5;

     label10:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
    }
    public volatile java.lang.Object get(int)
    {
        org.jdom2.AttributeList r0;
        int $i0;
        org.jdom2.Attribute $r1;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdom2.AttributeList: org.jdom2.Attribute get(int)>($i0);

        return $r1;
    }
    public org.jdom2.Attribute get(int)
    {
        org.jdom2.AttributeList r0;
        int $i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        org.jdom2.Attribute[] $r4;
        org.jdom2.Attribute $r5;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int size()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $r5 = $r4[$i0];

        return $r5;
    }
    org.jdom2.Attribute get(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.AttributeList r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        int $i0;
        org.jdom2.Attribute[] $r3;
        org.jdom2.Attribute $r4;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int indexOf(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $r4 = $r3[$i0];

        return $r4;
    }
    int indexOf(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.AttributeList r0;
        java.lang.String $r1, $r5, $r6;
        org.jdom2.Namespace $r2;
        org.jdom2.Attribute r3;
        org.jdom2.Attribute[] $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r4 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        if $r4 == null goto label4;

        if $r2 != null goto label1;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int indexOf(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        return $i0;

     label1:
        $r5 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        $i0 = 0;

     label2:
        $i1 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 >= $i1 goto label4;

        $r4 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        r3 = $r4[$i0];

        $r6 = virtualinvoke r3.<org.jdom2.Attribute: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r3.<org.jdom2.Attribute: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return -1;

     label5:
        return $i0;
    }
    public boolean isEmpty()
    {
        org.jdom2.AttributeList r0;
        int $i0;

        r0 := @this: org.jdom2.AttributeList;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.util.Iterator iterator()
    {
        org.jdom2.AttributeList r0;
        org.jdom2.AttributeList$ALIterator $r1;

        r0 := @this: org.jdom2.AttributeList;

        $r1 = new org.jdom2.AttributeList$ALIterator;

        specialinvoke $r1.<org.jdom2.AttributeList$ALIterator: void <init>(org.jdom2.AttributeList,org.jdom2.AttributeList$1)>(r0, null);

        return $r1;
    }
    public volatile java.lang.Object remove(int)
    {
        org.jdom2.AttributeList r0;
        int $i0;
        org.jdom2.Attribute $r1;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdom2.AttributeList: org.jdom2.Attribute remove(int)>($i0);

        return $r1;
    }
    public org.jdom2.Attribute remove(int)
    {
        org.jdom2.AttributeList r0;
        int $i0, $i1, $i2;
        org.jdom2.Attribute r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.jdom2.Attribute[] $r5, $r6;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        r1 = $r5[$i0];

        virtualinvoke r1.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>(null);

        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i1 = $i0 + 1;

        $r6 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i2 = r0.<org.jdom2.AttributeList: int size>;

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i1, $r6, $i0, $i2);

        $r5 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i0 = $i0 + -1;

        r0.<org.jdom2.AttributeList: int size> = $i0;

        $r5[$i0] = null;

        $i0 = r0.<org.jdom2.AttributeList: int modCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int modCount> = $i0;

        return r1;
    }
    boolean remove(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.AttributeList r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;
        int $i0;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int indexOf(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<org.jdom2.AttributeList: org.jdom2.Attribute remove(int)>($i0);

        return 1;
    }
    public volatile java.lang.Object set(int, java.lang.Object)
    {
        org.jdom2.AttributeList r0;
        int $i0;
        org.jdom2.Attribute $r1;
        java.lang.Object $r2;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        $r2 := @parameter1: java.lang.Object;

        $r1 = (org.jdom2.Attribute) $r2;

        $r1 = virtualinvoke r0.<org.jdom2.AttributeList: org.jdom2.Attribute set(int,org.jdom2.Attribute)>($i0, $r1);

        return $r1;
    }
    public org.jdom2.Attribute set(int, org.jdom2.Attribute)
    {
        org.jdom2.AttributeList r0;
        int $i0, $i1;
        org.jdom2.Attribute $r1, r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.jdom2.Element $r6;
        org.jdom2.IllegalAddException $r7;
        org.jdom2.Attribute[] $r8;

        r0 := @this: org.jdom2.AttributeList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Attribute;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.jdom2.AttributeList: int size>;

        if $i0 < $i1 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        $i0 = virtualinvoke r0.<org.jdom2.AttributeList: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r6 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        if $r6 == null goto label3;

        $r7 = new org.jdom2.IllegalAddException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The attribute already has an existing parent \"");

        $r6 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Element getParent()>();

        $r5 = virtualinvoke $r6.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label3:
        $i1 = specialinvoke r0.<org.jdom2.AttributeList: int indexOfDuplicate(org.jdom2.Attribute)>($r1);

        if $i1 < 0 goto label4;

        if $i1 == $i0 goto label4;

        $r7 = new org.jdom2.IllegalAddException;

        specialinvoke $r7.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("Cannot set duplicate attribute");

        throw $r7;

     label4:
        $r6 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        $r5 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element,int)>($r1, $r6, $i0);

        if $r5 == null goto label5;

        $r7 = new org.jdom2.IllegalAddException;

        $r6 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        specialinvoke $r7.<org.jdom2.IllegalAddException: void <init>(org.jdom2.Element,org.jdom2.Attribute,java.lang.String)>($r6, $r1, $r5);

        throw $r7;

     label5:
        $r8 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        r2 = $r8[$i0];

        virtualinvoke r2.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>(null);

        $r8 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $r8[$i0] = $r1;

        $r6 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Attribute setParent(org.jdom2.Element)>($r6);

        return r2;
    }
    public int size()
    {
        org.jdom2.AttributeList r0;
        int i0;

        r0 := @this: org.jdom2.AttributeList;

        i0 = r0.<org.jdom2.AttributeList: int size>;

        return i0;
    }
    void sort(java.util.Comparator)
    {
        org.jdom2.AttributeList r0;
        java.util.Comparator r1;
        int[] r2;
        int i0, $i1, $i2, $i3, i4;

        r0 := @this: org.jdom2.AttributeList;

        r1 := @parameter0: java.util.Comparator;

        i0 = r0.<org.jdom2.AttributeList: int size>;

        r2 = newarray (int)[i0];

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $i3 = specialinvoke r0.<org.jdom2.AttributeList: int binarySearch(int[],int,int,java.util.Comparator)>(r2, i4, i4, r1);

        if $i3 >= i4 goto label2;

        $i1 = $i3 + 1;

        $i2 = i4 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i3, r2, $i1, $i2);

     label2:
        r2[$i3] = i4;

        i4 = i4 + 1;

        goto label1;

     label3:
        specialinvoke r0.<org.jdom2.AttributeList: void sortInPlace(int[])>(r2);

        return;
    }
    public java.lang.String toString()
    {
        org.jdom2.AttributeList r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.AttributeList;

        $r1 = specialinvoke r0.<java.util.AbstractList: java.lang.String toString()>();

        return $r1;
    }
    final void uncheckedAddAttribute(org.jdom2.Attribute)
    {
        org.jdom2.AttributeList r0;
        org.jdom2.Attribute $r1;
        int $i0, $i1;
        org.jdom2.Element $r2;
        org.jdom2.Attribute[] $r3;

        r0 := @this: org.jdom2.AttributeList;

        $r1 := @parameter0: org.jdom2.Attribute;

        $r2 = r0.<org.jdom2.AttributeList: org.jdom2.Element parent>;

        $r1.<org.jdom2.Attribute: org.jdom2.Element parent> = $r2;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i0 = $i0 + 1;

        specialinvoke r0.<org.jdom2.AttributeList: void ensureCapacity(int)>($i0);

        $r3 = r0.<org.jdom2.AttributeList: org.jdom2.Attribute[] attributeData>;

        $i0 = r0.<org.jdom2.AttributeList: int size>;

        $i1 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int size> = $i1;

        $r3[$i0] = $r1;

        $i0 = r0.<org.jdom2.AttributeList: int modCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.AttributeList: int modCount> = $i0;

        return;
    }
