org.jdom2.ProcessingInstruction extends org.jdom2.Content
private static final long serialVersionUID
protected transient java.util.Map mapData
protected java.lang.String rawData
protected java.lang.String target
    protected void <init>()
    {
        org.jdom2.ProcessingInstruction r0;
        org.jdom2.Content$CType $r1;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 = <org.jdom2.Content$CType: org.jdom2.Content$CType ProcessingInstruction>;

        specialinvoke r0.<org.jdom2.Content: void <init>(org.jdom2.Content$CType)>($r1);

        r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData> = null;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jdom2.ProcessingInstruction: void <init>(java.lang.String,java.lang.String)>($r1, "");

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1, $r2;
        org.jdom2.Content$CType $r3;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <org.jdom2.Content$CType: org.jdom2.Content$CType ProcessingInstruction>;

        specialinvoke r0.<org.jdom2.Content: void <init>(org.jdom2.Content$CType)>($r3);

        r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData> = null;

        virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction setTarget(java.lang.String)>($r1);

        virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction setData(java.lang.String)>($r2);

        return;
    }
    public void <init>(java.lang.String, java.util.Map)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1;
        java.util.Map r2;
        org.jdom2.Content$CType $r3;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 = <org.jdom2.Content$CType: org.jdom2.Content$CType ProcessingInstruction>;

        specialinvoke r0.<org.jdom2.Content: void <init>(org.jdom2.Content$CType)>($r3);

        r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData> = null;

        virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction setTarget(java.lang.String)>($r1);

        virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction setData(java.util.Map)>(r2);

        return;
    }
    private static int[] extractQuotedString(java.lang.String)
    {
        java.lang.String $r0;
        boolean z0;
        char c0, $c4;
        int i1, i2, $i3;
        int[] $r1;

        $r0 := @parameter0: java.lang.String;

        z0 = 0;

        c0 = 34;

        i1 = 0;

        i2 = 0;

     label1:
        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i2 >= $i3 goto label5;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        if $c4 == 34 goto label2;

        if $c4 != 39 goto label3;

     label2:
        if z0 != 0 goto label4;

        c0 = $c4;

        z0 = 1;

        i1 = i2 + 1;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        if c0 != $c4 goto label3;

        $r1 = newarray (int)[2];

        $r1[0] = i1;

        $r1[1] = i2;

        return $r1;

     label5:
        return null;
    }
    private java.util.Map parseData(java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1, $r3, r4;
        java.util.LinkedHashMap r2;
        boolean $z0;
        int i0, i2, $i3;
        char $c1, $c4;
        int[] $r5;
        java.util.Map $r6;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label7;

        $r3 = "";

        r4 = "";

        i0 = 0;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        i2 = 1;

     label2:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i2 >= $i3 goto label4;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        if $c4 != 61 goto label5;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i2);

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        i0 = i2 + 1;

        r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        $r5 = staticinvoke <org.jdom2.ProcessingInstruction: int[] extractQuotedString(java.lang.String)>(r4);

        if $r5 != null goto label3;

        $r6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r6;

     label3:
        i0 = $r5[0];

        i0 = i0 + i2;

        i0 = i0 + 1;

        $i3 = $r5[1];

        $i3 = $i3 + i2;

        $i3 = $i3 + 1;

        r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i3);

        i0 = $r5[1];

        i0 = i0 + 1;

        i2 = i2 + i0;

     label4:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i2);

        i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i2 <= 0 goto label1;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r4);

        goto label1;

     label5:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label6;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c4);

        if $z0 != 0 goto label6;

        i0 = i2;

     label6:
        $c1 = $c4;

        i2 = i2 + 1;

        goto label2;

     label7:
        return r2;
    }
    private static final java.lang.String toString(java.util.Map)
    {
        java.util.Map r0;
        java.lang.StringBuilder r1, $r7;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry r5;
        java.lang.String $r6;
        int $i0;

        r0 := @parameter0: java.util.Map;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r4;

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.lang.String) $r4;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ");

        goto label1;

     label2:
        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -1;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>($i0);

     label3:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.ProcessingInstruction r0;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r0 = virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction clone()>();

        return r0;
    }
    public volatile org.jdom2.CloneBase clone()
    {
        org.jdom2.ProcessingInstruction r0;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r0 = virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction clone()>();

        return r0;
    }
    public volatile org.jdom2.Content clone()
    {
        org.jdom2.ProcessingInstruction r0;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r0 = virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction clone()>();

        return r0;
    }
    public org.jdom2.ProcessingInstruction clone()
    {
        org.jdom2.ProcessingInstruction r0, r2;
        org.jdom2.Content $r1;
        java.lang.String $r3;
        java.util.Map $r4;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content clone()>();

        r2 = (org.jdom2.ProcessingInstruction) $r1;

        $r3 = r0.<org.jdom2.ProcessingInstruction: java.lang.String rawData>;

        $r4 = specialinvoke r0.<org.jdom2.ProcessingInstruction: java.util.Map parseData(java.lang.String)>($r3);

        r2.<org.jdom2.ProcessingInstruction: java.util.Map mapData> = $r4;

        return r2;
    }
    public volatile org.jdom2.Content detach()
    {
        org.jdom2.ProcessingInstruction r0;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r0 = virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction detach()>();

        return r0;
    }
    public org.jdom2.ProcessingInstruction detach()
    {
        org.jdom2.ProcessingInstruction r0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content detach()>();

        r0 = (org.jdom2.ProcessingInstruction) $r1;

        return r0;
    }
    public java.lang.String getData()
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r1 = r0.<org.jdom2.ProcessingInstruction: java.lang.String rawData>;

        return r1;
    }
    public java.util.List getPseudoAttributeNames()
    {
        org.jdom2.ProcessingInstruction r0;
        java.util.ArrayList $r1;
        java.util.Set $r2;
        java.util.Map $r3;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 = new java.util.ArrayList;

        $r3 = r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }
    public java.lang.String getPseudoAttributeValue(java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.Map $r3;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r2;

        return $r1;
    }
    public java.lang.String getTarget()
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r1 = r0.<org.jdom2.ProcessingInstruction: java.lang.String target>;

        return r1;
    }
    public java.lang.String getValue()
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r1 = r0.<org.jdom2.ProcessingInstruction: java.lang.String rawData>;

        return r1;
    }
    public boolean removePseudoAttribute(java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        if $r3 == null goto label1;

        $r2 = r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData>;

        $r1 = staticinvoke <org.jdom2.ProcessingInstruction: java.lang.String toString(java.util.Map)>($r2);

        r0.<org.jdom2.ProcessingInstruction: java.lang.String rawData> = $r1;

        return 1;

     label1:
        return 0;
    }
    public org.jdom2.ProcessingInstruction setData(java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1, $r2;
        org.jdom2.IllegalDataException $r3;
        java.util.Map $r4;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkProcessingInstructionData(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $r3 = new org.jdom2.IllegalDataException;

        specialinvoke $r3.<org.jdom2.IllegalDataException: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        throw $r3;

     label1:
        r0.<org.jdom2.ProcessingInstruction: java.lang.String rawData> = $r1;

        $r4 = specialinvoke r0.<org.jdom2.ProcessingInstruction: java.util.Map parseData(java.lang.String)>($r1);

        r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData> = $r4;

        return r0;
    }
    public org.jdom2.ProcessingInstruction setData(java.util.Map)
    {
        org.jdom2.ProcessingInstruction r0;
        java.util.Map r1;
        java.lang.String $r2, $r3;
        org.jdom2.IllegalDataException $r4;
        java.util.LinkedHashMap $r5;

        r0 := @this: org.jdom2.ProcessingInstruction;

        r1 := @parameter0: java.util.Map;

        $r2 = staticinvoke <org.jdom2.ProcessingInstruction: java.lang.String toString(java.util.Map)>(r1);

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkProcessingInstructionData(java.lang.String)>($r2);

        if $r3 == null goto label1;

        $r4 = new org.jdom2.IllegalDataException;

        specialinvoke $r4.<org.jdom2.IllegalDataException: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        throw $r4;

     label1:
        r0.<org.jdom2.ProcessingInstruction: java.lang.String rawData> = $r2;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r1);

        r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData> = $r5;

        return r0;
    }
    protected volatile org.jdom2.Content setParent(org.jdom2.Parent)
    {
        org.jdom2.ProcessingInstruction r0;
        org.jdom2.Parent $r1;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: org.jdom2.Parent;

        r0 = virtualinvoke r0.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction setParent(org.jdom2.Parent)>($r1);

        return r0;
    }
    protected org.jdom2.ProcessingInstruction setParent(org.jdom2.Parent)
    {
        org.jdom2.ProcessingInstruction r0;
        org.jdom2.Parent $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: org.jdom2.Parent;

        $r2 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content setParent(org.jdom2.Parent)>($r1);

        r0 = (org.jdom2.ProcessingInstruction) $r2;

        return r0;
    }
    public org.jdom2.ProcessingInstruction setPseudoAttribute(java.lang.String, java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1, $r2, $r3;
        org.jdom2.IllegalDataException $r4;
        java.util.Map $r5;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkProcessingInstructionData(java.lang.String)>($r1);

        if $r3 == null goto label1;

        $r4 = new org.jdom2.IllegalDataException;

        specialinvoke $r4.<org.jdom2.IllegalDataException: void <init>(java.lang.String,java.lang.String)>($r1, $r3);

        throw $r4;

     label1:
        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkProcessingInstructionData(java.lang.String)>($r2);

        if $r3 == null goto label2;

        $r4 = new org.jdom2.IllegalDataException;

        specialinvoke $r4.<org.jdom2.IllegalDataException: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        throw $r4;

     label2:
        $r5 = r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r5 = r0.<org.jdom2.ProcessingInstruction: java.util.Map mapData>;

        $r1 = staticinvoke <org.jdom2.ProcessingInstruction: java.lang.String toString(java.util.Map)>($r5);

        r0.<org.jdom2.ProcessingInstruction: java.lang.String rawData> = $r1;

        return r0;
    }
    public org.jdom2.ProcessingInstruction setTarget(java.lang.String)
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.String $r1, $r3;
        org.jdom2.IllegalTargetException $r2;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <org.jdom2.Verifier: java.lang.String checkProcessingInstructionTarget(java.lang.String)>($r1);

        if $r3 == null goto label1;

        $r2 = new org.jdom2.IllegalTargetException;

        specialinvoke $r2.<org.jdom2.IllegalTargetException: void <init>(java.lang.String,java.lang.String)>($r1, $r3);

        throw $r2;

     label1:
        r0.<org.jdom2.ProcessingInstruction: java.lang.String target> = $r1;

        return r0;
    }
    public java.lang.String toString()
    {
        org.jdom2.ProcessingInstruction r0;
        java.lang.StringBuilder $r1;
        org.jdom2.output.XMLOutputter $r2;
        java.lang.String $r3;

        r0 := @this: org.jdom2.ProcessingInstruction;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ProcessingInstruction: ");

        $r2 = new org.jdom2.output.XMLOutputter;

        specialinvoke $r2.<org.jdom2.output.XMLOutputter: void <init>()>();

        $r3 = virtualinvoke $r2.<org.jdom2.output.XMLOutputter: java.lang.String outputString(org.jdom2.ProcessingInstruction)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
