org.jdom2.transform.XSLTransformer extends java.lang.Object
private org.jdom2.JDOMFactory factory
private javax.xml.transform.Templates templates
    public void <init>(java.io.File) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        java.io.File $r1;
        javax.xml.transform.stream.StreamSource $r2;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: java.io.File;

        $r2 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r2.<javax.xml.transform.stream.StreamSource: void <init>(java.io.File)>($r1);

        specialinvoke r0.<org.jdom2.transform.XSLTransformer: void <init>(javax.xml.transform.Source)>($r2);

        return;
    }
    public void <init>(java.io.InputStream) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        java.io.InputStream $r1;
        javax.xml.transform.stream.StreamSource $r2;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r2.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r1);

        specialinvoke r0.<org.jdom2.transform.XSLTransformer: void <init>(javax.xml.transform.Source)>($r2);

        return;
    }
    public void <init>(java.io.Reader) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        java.io.Reader $r1;
        javax.xml.transform.stream.StreamSource $r2;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: java.io.Reader;

        $r2 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r2.<javax.xml.transform.stream.StreamSource: void <init>(java.io.Reader)>($r1);

        specialinvoke r0.<org.jdom2.transform.XSLTransformer: void <init>(javax.xml.transform.Source)>($r2);

        return;
    }
    public void <init>(java.lang.String) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        java.lang.String $r1;
        javax.xml.transform.stream.StreamSource $r2;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: java.lang.String;

        $r2 = new javax.xml.transform.stream.StreamSource;

        specialinvoke $r2.<javax.xml.transform.stream.StreamSource: void <init>(java.lang.String)>($r1);

        specialinvoke r0.<org.jdom2.transform.XSLTransformer: void <init>(javax.xml.transform.Source)>($r2);

        return;
    }
    private void <init>(javax.xml.transform.Source) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        javax.xml.transform.Source $r1;
        javax.xml.transform.TransformerException r2;
        javax.xml.transform.TransformerFactory $r3;
        javax.xml.transform.Templates $r4;
        org.jdom2.transform.XSLTransformException $r5;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: javax.xml.transform.Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.transform.XSLTransformer: org.jdom2.JDOMFactory factory> = null;

     label1:
        $r3 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $r4 = virtualinvoke $r3.<javax.xml.transform.TransformerFactory: javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)>($r1);

     label2:
        r0.<org.jdom2.transform.XSLTransformer: javax.xml.transform.Templates templates> = $r4;

        return;

     label3:
        r2 := @caughtexception;

        $r5 = new org.jdom2.transform.XSLTransformException;

        specialinvoke $r5.<org.jdom2.transform.XSLTransformException: void <init>(java.lang.String,java.lang.Exception)>("Could not construct XSLTransformer", r2);

        throw $r5;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }
    public void <init>(org.jdom2.Document) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        org.jdom2.Document $r1;
        org.jdom2.transform.JDOMSource $r2;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: org.jdom2.Document;

        $r2 = new org.jdom2.transform.JDOMSource;

        specialinvoke $r2.<org.jdom2.transform.JDOMSource: void <init>(org.jdom2.Document)>($r1);

        specialinvoke r0.<org.jdom2.transform.XSLTransformer: void <init>(javax.xml.transform.Source)>($r2);

        return;
    }
    public org.jdom2.JDOMFactory getFactory()
    {
        org.jdom2.transform.XSLTransformer r0;
        org.jdom2.JDOMFactory r1;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        r1 = r0.<org.jdom2.transform.XSLTransformer: org.jdom2.JDOMFactory factory>;

        return r1;
    }
    public void setFactory(org.jdom2.JDOMFactory)
    {
        org.jdom2.transform.XSLTransformer r0;
        org.jdom2.JDOMFactory $r1;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: org.jdom2.JDOMFactory;

        r0.<org.jdom2.transform.XSLTransformer: org.jdom2.JDOMFactory factory> = $r1;

        return;
    }
    public java.util.List transform(java.util.List) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        java.util.List r1;
        javax.xml.transform.TransformerException r2;
        org.jdom2.transform.JDOMResult r3;
        org.jdom2.transform.JDOMSource r4;
        org.jdom2.JDOMFactory $r5;
        javax.xml.transform.Templates $r6;
        javax.xml.transform.Transformer $r7;
        org.jdom2.transform.XSLTransformException $r8;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        r1 := @parameter0: java.util.List;

        r4 = new org.jdom2.transform.JDOMSource;

        specialinvoke r4.<org.jdom2.transform.JDOMSource: void <init>(java.util.List)>(r1);

        r3 = new org.jdom2.transform.JDOMResult;

        specialinvoke r3.<org.jdom2.transform.JDOMResult: void <init>()>();

        $r5 = r0.<org.jdom2.transform.XSLTransformer: org.jdom2.JDOMFactory factory>;

        virtualinvoke r3.<org.jdom2.transform.JDOMResult: void setFactory(org.jdom2.JDOMFactory)>($r5);

        $r6 = r0.<org.jdom2.transform.XSLTransformer: javax.xml.transform.Templates templates>;

     label1:
        $r7 = interfaceinvoke $r6.<javax.xml.transform.Templates: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $r7.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r4, r3);

        r1 = virtualinvoke r3.<org.jdom2.transform.JDOMResult: java.util.List getResult()>();

     label2:
        return r1;

     label3:
        r2 := @caughtexception;

        $r8 = new org.jdom2.transform.XSLTransformException;

        specialinvoke $r8.<org.jdom2.transform.XSLTransformException: void <init>(java.lang.String,java.lang.Exception)>("Could not perform transformation", r2);

        throw $r8;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }
    public org.jdom2.Document transform(org.jdom2.Document) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        org.jdom2.Document $r1;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: org.jdom2.Document;

        $r1 = virtualinvoke r0.<org.jdom2.transform.XSLTransformer: org.jdom2.Document transform(org.jdom2.Document,org.xml.sax.EntityResolver)>($r1, null);

        return $r1;
    }
    public org.jdom2.Document transform(org.jdom2.Document, org.xml.sax.EntityResolver) throws org.jdom2.transform.XSLTransformException
    {
        org.jdom2.transform.XSLTransformer r0;
        org.jdom2.Document $r1;
        org.xml.sax.EntityResolver $r2;
        javax.xml.transform.TransformerException r3;
        org.jdom2.transform.JDOMResult r4;
        org.jdom2.transform.JDOMSource r5;
        org.jdom2.JDOMFactory $r6;
        javax.xml.transform.Templates $r7;
        javax.xml.transform.Transformer $r8;
        org.jdom2.transform.XSLTransformException $r9;

        r0 := @this: org.jdom2.transform.XSLTransformer;

        $r1 := @parameter0: org.jdom2.Document;

        $r2 := @parameter1: org.xml.sax.EntityResolver;

        r5 = new org.jdom2.transform.JDOMSource;

        specialinvoke r5.<org.jdom2.transform.JDOMSource: void <init>(org.jdom2.Document,org.xml.sax.EntityResolver)>($r1, $r2);

        r4 = new org.jdom2.transform.JDOMResult;

        specialinvoke r4.<org.jdom2.transform.JDOMResult: void <init>()>();

        $r6 = r0.<org.jdom2.transform.XSLTransformer: org.jdom2.JDOMFactory factory>;

        virtualinvoke r4.<org.jdom2.transform.JDOMResult: void setFactory(org.jdom2.JDOMFactory)>($r6);

        $r7 = r0.<org.jdom2.transform.XSLTransformer: javax.xml.transform.Templates templates>;

     label1:
        $r8 = interfaceinvoke $r7.<javax.xml.transform.Templates: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $r8.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r5, r4);

        $r1 = virtualinvoke r4.<org.jdom2.transform.JDOMResult: org.jdom2.Document getDocument()>();

     label2:
        return $r1;

     label3:
        r3 := @caughtexception;

        $r9 = new org.jdom2.transform.XSLTransformException;

        specialinvoke $r9.<org.jdom2.transform.XSLTransformException: void <init>(java.lang.String,java.lang.Exception)>("Could not perform transformation", r3);

        throw $r9;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }
