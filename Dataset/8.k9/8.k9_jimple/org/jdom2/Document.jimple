org.jdom2.Document extends org.jdom2.CloneBase implements org.jdom2.Parent
private static final long serialVersionUID
protected java.lang.String baseURI
transient org.jdom2.ContentList content
private transient java.util.HashMap propertyMap
    public void <init>()
    {
        org.jdom2.Document r0;
        org.jdom2.ContentList $r1;

        r0 := @this: org.jdom2.Document;

        specialinvoke r0.<org.jdom2.CloneBase: void <init>()>();

        $r1 = new org.jdom2.ContentList;

        specialinvoke $r1.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r0);

        r0.<org.jdom2.Document: org.jdom2.ContentList content> = $r1;

        r0.<org.jdom2.Document: java.lang.String baseURI> = null;

        r0.<org.jdom2.Document: java.util.HashMap propertyMap> = null;

        return;
    }
    public void <init>(java.util.List)
    {
        org.jdom2.Document r0;
        java.util.List r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.jdom2.CloneBase: void <init>()>();

        $r2 = new org.jdom2.ContentList;

        specialinvoke $r2.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r0);

        r0.<org.jdom2.Document: org.jdom2.ContentList content> = $r2;

        r0.<org.jdom2.Document: java.lang.String baseURI> = null;

        r0.<org.jdom2.Document: java.util.HashMap propertyMap> = null;

        virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document setContent(java.util.Collection)>(r1);

        return;
    }
    public void <init>(org.jdom2.Element)
    {
        org.jdom2.Document r0;
        org.jdom2.Element $r1;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Element;

        specialinvoke r0.<org.jdom2.Document: void <init>(org.jdom2.Element,org.jdom2.DocType,java.lang.String)>($r1, null, null);

        return;
    }
    public void <init>(org.jdom2.Element, org.jdom2.DocType)
    {
        org.jdom2.Document r0;
        org.jdom2.Element $r1;
        org.jdom2.DocType $r2;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: org.jdom2.DocType;

        specialinvoke r0.<org.jdom2.Document: void <init>(org.jdom2.Element,org.jdom2.DocType,java.lang.String)>($r1, $r2, null);

        return;
    }
    public void <init>(org.jdom2.Element, org.jdom2.DocType, java.lang.String)
    {
        org.jdom2.Document r0;
        org.jdom2.Element $r1;
        org.jdom2.DocType $r2;
        java.lang.String $r3;
        org.jdom2.ContentList $r4;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 := @parameter1: org.jdom2.DocType;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.jdom2.CloneBase: void <init>()>();

        $r4 = new org.jdom2.ContentList;

        specialinvoke $r4.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r0);

        r0.<org.jdom2.Document: org.jdom2.ContentList content> = $r4;

        r0.<org.jdom2.Document: java.lang.String baseURI> = null;

        r0.<org.jdom2.Document: java.util.HashMap propertyMap> = null;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document setRootElement(org.jdom2.Element)>($r1);

     label1:
        if $r2 == null goto label2;

        virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document setDocType(org.jdom2.DocType)>($r2);

     label2:
        if $r3 == null goto label3;

        virtualinvoke r0.<org.jdom2.Document: void setBaseURI(java.lang.String)>($r3);

     label3:
        return;
    }
    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.jdom2.Document r0;
        java.io.ObjectInputStream $r1;
        org.jdom2.ContentList $r2;
        int $i0;
        java.lang.Object $r3;
        org.jdom2.Content $r4;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new org.jdom2.ContentList;

        specialinvoke $r2.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r0);

        r0.<org.jdom2.Document: org.jdom2.ContentList content> = $r2;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (org.jdom2.Content) $r3;

        virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document addContent(org.jdom2.Content)>($r4);

        goto label1;

     label2:
        return;
    }
    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.jdom2.Document r0;
        java.io.ObjectOutputStream $r1;
        org.jdom2.ContentList $r2;
        int $i0, i1;
        org.jdom2.Content $r3;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int size()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Content getContent(int)>(i1);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public org.jdom2.Document addContent(int, java.util.Collection)
    {
        org.jdom2.Document r0;
        int $i0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return r0;
    }
    public org.jdom2.Document addContent(int, org.jdom2.Content)
    {
        org.jdom2.Document r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void add(int,org.jdom2.Content)>($i0, $r1);

        return r0;
    }
    public org.jdom2.Document addContent(java.util.Collection)
    {
        org.jdom2.Document r0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }
    public org.jdom2.Document addContent(org.jdom2.Content)
    {
        org.jdom2.Document r0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(int, java.util.Collection)
    {
        org.jdom2.Document r0;
        int $i0;
        java.util.Collection $r1;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        r0 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document addContent(int,java.util.Collection)>($i0, $r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(int, org.jdom2.Content)
    {
        org.jdom2.Document r0;
        int $i0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        r0 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document addContent(int,org.jdom2.Content)>($i0, $r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(java.util.Collection)
    {
        org.jdom2.Document r0;
        java.util.Collection $r1;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: java.util.Collection;

        r0 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document addContent(java.util.Collection)>($r1);

        return r0;
    }
    public volatile org.jdom2.Parent addContent(org.jdom2.Content)
    {
        org.jdom2.Document r0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Content;

        r0 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document addContent(org.jdom2.Content)>($r1);

        return r0;
    }
    public void canContainContent(org.jdom2.Content, int, boolean)
    {
        org.jdom2.Document r0;
        org.jdom2.Content $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        org.jdom2.ContentList $r2;
        org.jdom2.IllegalAddException $r3;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Content;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $z1 = $r1 instanceof org.jdom2.Element;

        if $z1 == 0 goto label3;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i1 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOfFirstElement()>();

        if $z0 == 0 goto label1;

        if $i1 != $i0 goto label1;

        return;

     label1:
        if $i1 < 0 goto label2;

        $r3 = new org.jdom2.IllegalAddException;

        specialinvoke $r3.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("Cannot add a second root element, only one is allowed");

        throw $r3;

     label2:
        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i1 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOfDocType()>();

        if $i1 < $i0 goto label3;

        $r3 = new org.jdom2.IllegalAddException;

        specialinvoke $r3.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("A root element cannot be added before the DocType");

        throw $r3;

     label3:
        $z1 = $r1 instanceof org.jdom2.DocType;

        if $z1 == 0 goto label6;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i1 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOfDocType()>();

        if $z0 == 0 goto label4;

        if $i1 == $i0 goto label9;

     label4:
        if $i1 < 0 goto label5;

        $r3 = new org.jdom2.IllegalAddException;

        specialinvoke $r3.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("Cannot add a second doctype, only one is allowed");

        throw $r3;

     label5:
        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i1 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOfFirstElement()>();

        if $i1 == -1 goto label6;

        if $i1 >= $i0 goto label6;

        $r3 = new org.jdom2.IllegalAddException;

        specialinvoke $r3.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("A DocType cannot be added after the root element");

        throw $r3;

     label6:
        $z0 = $r1 instanceof org.jdom2.CDATA;

        if $z0 == 0 goto label7;

        $r3 = new org.jdom2.IllegalAddException;

        specialinvoke $r3.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("A CDATA is not allowed at the document root");

        throw $r3;

     label7:
        $z0 = $r1 instanceof org.jdom2.Text;

        if $z0 == 0 goto label8;

        $r3 = new org.jdom2.IllegalAddException;

        specialinvoke $r3.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("A Text is not allowed at the document root");

        throw $r3;

     label8:
        $z0 = $r1 instanceof org.jdom2.EntityRef;

        if $z0 == 0 goto label9;

        $r3 = new org.jdom2.IllegalAddException;

        specialinvoke $r3.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("An EntityRef is not allowed at the document root");

        throw $r3;

     label9:
        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.Document r0;

        r0 := @this: org.jdom2.Document;

        r0 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document clone()>();

        return r0;
    }
    public volatile org.jdom2.CloneBase clone()
    {
        org.jdom2.Document r0;

        r0 := @this: org.jdom2.Document;

        r0 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Document clone()>();

        return r0;
    }
    public org.jdom2.Document clone()
    {
        org.jdom2.Document r0, r2;
        org.jdom2.CloneBase $r1;
        org.jdom2.ContentList $r3;
        int i0, $i1;
        org.jdom2.Content $r4;
        boolean $z0;
        org.jdom2.Element r5;
        org.jdom2.Comment r6;
        org.jdom2.ProcessingInstruction r7;
        org.jdom2.DocType r8;

        r0 := @this: org.jdom2.Document;

        $r1 = specialinvoke r0.<org.jdom2.CloneBase: org.jdom2.CloneBase clone()>();

        r2 = (org.jdom2.Document) $r1;

        $r3 = new org.jdom2.ContentList;

        specialinvoke $r3.<org.jdom2.ContentList: void <init>(org.jdom2.Parent)>(r2);

        r2.<org.jdom2.Document: org.jdom2.ContentList content> = $r3;

        i0 = 0;

     label1:
        $r3 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i1 = virtualinvoke $r3.<org.jdom2.ContentList: int size()>();

        if i0 >= $i1 goto label6;

        $r3 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $r4 = virtualinvoke $r3.<org.jdom2.ContentList: org.jdom2.Content get(int)>(i0);

        $z0 = $r4 instanceof org.jdom2.Element;

        if $z0 == 0 goto label3;

        r5 = (org.jdom2.Element) $r4;

        r5 = virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element clone()>();

        $r3 = r2.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r3.<org.jdom2.ContentList: boolean add(java.lang.Object)>(r5);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $z0 = $r4 instanceof org.jdom2.Comment;

        if $z0 == 0 goto label4;

        r6 = (org.jdom2.Comment) $r4;

        r6 = virtualinvoke r6.<org.jdom2.Comment: org.jdom2.Comment clone()>();

        $r3 = r2.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r3.<org.jdom2.ContentList: boolean add(java.lang.Object)>(r6);

        goto label2;

     label4:
        $z0 = $r4 instanceof org.jdom2.ProcessingInstruction;

        if $z0 == 0 goto label5;

        r7 = (org.jdom2.ProcessingInstruction) $r4;

        r7 = virtualinvoke r7.<org.jdom2.ProcessingInstruction: org.jdom2.ProcessingInstruction clone()>();

        $r3 = r2.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r3.<org.jdom2.ContentList: boolean add(java.lang.Object)>(r7);

        goto label2;

     label5:
        $z0 = $r4 instanceof org.jdom2.DocType;

        if $z0 == 0 goto label2;

        r8 = (org.jdom2.DocType) $r4;

        r8 = virtualinvoke r8.<org.jdom2.DocType: org.jdom2.DocType clone()>();

        $r3 = r2.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r3.<org.jdom2.ContentList: boolean add(java.lang.Object)>(r8);

        goto label2;

     label6:
        return r2;
    }
    public java.util.List cloneContent()
    {
        org.jdom2.Document r0;
        java.util.ArrayList r1;
        int $i0, i1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.Document;

        $i0 = virtualinvoke r0.<org.jdom2.Document: int getContentSize()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Content getContent(int)>(i1);

        $r2 = virtualinvoke $r2.<org.jdom2.Content: org.jdom2.Content clone()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public org.jdom2.Element detachRootElement()
    {
        org.jdom2.Document r0;
        org.jdom2.ContentList $r1;
        int $i0;
        org.jdom2.Content $r2;
        org.jdom2.Element $r3;

        r0 := @this: org.jdom2.Document;

        $r1 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom2.ContentList: int indexOfFirstElement()>();

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Content removeContent(int)>($i0);

        $r3 = (org.jdom2.Element) $r2;

        return $r3;
    }
    public final boolean equals(java.lang.Object)
    {
        org.jdom2.Document r0;
        java.lang.Object $r1;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public final java.lang.String getBaseURI()
    {
        org.jdom2.Document r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Document;

        r1 = r0.<org.jdom2.Document: java.lang.String baseURI>;

        return r1;
    }
    public java.util.List getContent()
    {
        org.jdom2.Document r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        org.jdom2.ContentList r2;

        r0 := @this: org.jdom2.Document;

        $z0 = virtualinvoke r0.<org.jdom2.Document: boolean hasRootElement()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Root element not set");

        throw $r1;

     label1:
        r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        return r2;
    }
    public java.util.List getContent(org.jdom2.filter.Filter)
    {
        org.jdom2.Document r0;
        org.jdom2.filter.Filter r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        org.jdom2.ContentList $r3;
        java.util.List $r4;

        r0 := @this: org.jdom2.Document;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $z0 = virtualinvoke r0.<org.jdom2.Document: boolean hasRootElement()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Root element not set");

        throw $r2;

     label1:
        $r3 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $r4 = virtualinvoke $r3.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>(r1);

        return $r4;
    }
    public org.jdom2.Content getContent(int)
    {
        org.jdom2.Document r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $r1 = virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content get(int)>($i0);

        return $r1;
    }
    public int getContentSize()
    {
        org.jdom2.Document r0;
        int $i0;
        org.jdom2.ContentList $r1;

        r0 := @this: org.jdom2.Document;

        $r1 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom2.ContentList: int size()>();

        return $i0;
    }
    public org.jdom2.util.IteratorIterable getDescendants()
    {
        org.jdom2.Document r0;
        org.jdom2.DescendantIterator $r1;

        r0 := @this: org.jdom2.Document;

        $r1 = new org.jdom2.DescendantIterator;

        specialinvoke $r1.<org.jdom2.DescendantIterator: void <init>(org.jdom2.Parent)>(r0);

        return $r1;
    }
    public org.jdom2.util.IteratorIterable getDescendants(org.jdom2.filter.Filter)
    {
        org.jdom2.Document r0;
        org.jdom2.filter.Filter r1;
        org.jdom2.FilterIterator $r2;
        org.jdom2.DescendantIterator $r3;

        r0 := @this: org.jdom2.Document;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $r2 = new org.jdom2.FilterIterator;

        $r3 = new org.jdom2.DescendantIterator;

        specialinvoke $r3.<org.jdom2.DescendantIterator: void <init>(org.jdom2.Parent)>(r0);

        specialinvoke $r2.<org.jdom2.FilterIterator: void <init>(org.jdom2.DescendantIterator,org.jdom2.filter.Filter)>($r3, r1);

        return $r2;
    }
    public org.jdom2.DocType getDocType()
    {
        org.jdom2.Document r0;
        org.jdom2.ContentList $r1;
        int $i0;
        org.jdom2.Content $r2;
        org.jdom2.DocType $r3;

        r0 := @this: org.jdom2.Document;

        $r1 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom2.ContentList: int indexOfDocType()>();

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $r2 = virtualinvoke $r1.<org.jdom2.ContentList: org.jdom2.Content get(int)>($i0);

        $r3 = (org.jdom2.DocType) $r2;

        return $r3;
    }
    public org.jdom2.Document getDocument()
    {
        org.jdom2.Document r0;

        r0 := @this: org.jdom2.Document;

        return r0;
    }
    public java.util.List getNamespacesInScope()
    {
        org.jdom2.Document r0;
        org.jdom2.Namespace[] $r1;
        org.jdom2.Namespace $r2;
        java.util.List $r3;

        r0 := @this: org.jdom2.Document;

        $r1 = newarray (org.jdom2.Namespace)[2];

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r1[0] = $r2;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r1[1] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r3;
    }
    public java.util.List getNamespacesInherited()
    {
        org.jdom2.Document r0;
        java.util.List $r1;

        r0 := @this: org.jdom2.Document;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }
    public java.util.List getNamespacesIntroduced()
    {
        org.jdom2.Document r0;
        org.jdom2.Namespace[] $r1;
        org.jdom2.Namespace $r2;
        java.util.List $r3;

        r0 := @this: org.jdom2.Document;

        $r1 = newarray (org.jdom2.Namespace)[2];

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r1[0] = $r2;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r1[1] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r3;
    }
    public org.jdom2.Parent getParent()
    {
        org.jdom2.Document r0;

        r0 := @this: org.jdom2.Document;

        return null;
    }
    public java.lang.Object getProperty(java.lang.String)
    {
        org.jdom2.Document r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.jdom2.Document: java.util.HashMap propertyMap>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.jdom2.Document: java.util.HashMap propertyMap>;

        $r2 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        return $r2;
    }
    public org.jdom2.Element getRootElement()
    {
        org.jdom2.Document r0;
        org.jdom2.ContentList $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        org.jdom2.Content $r3;
        org.jdom2.Element $r4;

        r0 := @this: org.jdom2.Document;

        $r1 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom2.ContentList: int indexOfFirstElement()>();

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Root element not set");

        throw $r2;

     label1:
        $r1 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $r3 = virtualinvoke $r1.<org.jdom2.ContentList: org.jdom2.Content get(int)>($i0);

        $r4 = (org.jdom2.Element) $r3;

        return $r4;
    }
    public boolean hasRootElement()
    {
        org.jdom2.Document r0;
        int $i0;
        org.jdom2.ContentList $r1;

        r0 := @this: org.jdom2.Document;

        $r1 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r1.<org.jdom2.ContentList: int indexOfFirstElement()>();

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        return 1;
    }
    public final int hashCode()
    {
        org.jdom2.Document r0;
        int $i0;

        r0 := @this: org.jdom2.Document;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }
    public int indexOf(org.jdom2.Content)
    {
        org.jdom2.Document r0;
        org.jdom2.Content $r1;
        int $i0;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOf(java.lang.Object)>($r1);

        return $i0;
    }
    public java.util.List removeContent()
    {
        org.jdom2.Document r0;
        java.util.ArrayList r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        r1 = new java.util.ArrayList;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void clear()>();

        return r1;
    }
    public java.util.List removeContent(org.jdom2.filter.Filter)
    {
        org.jdom2.Document r0;
        org.jdom2.filter.Filter r1;
        java.util.ArrayList r2;
        org.jdom2.ContentList $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.jdom2.Content r7;

        r0 := @this: org.jdom2.Document;

        r1 := @parameter0: org.jdom2.filter.Filter;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $r4 = virtualinvoke $r3.<org.jdom2.ContentList: java.util.List getView(org.jdom2.filter.Filter)>(r1);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jdom2.Content) $r6;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return r2;
    }
    public org.jdom2.Content removeContent(int)
    {
        org.jdom2.Document r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $r1 = virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content remove(int)>($i0);

        return $r1;
    }
    public boolean removeContent(org.jdom2.Content)
    {
        org.jdom2.Document r0;
        org.jdom2.Content $r1;
        boolean $z0;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $z0 = virtualinvoke $r2.<org.jdom2.ContentList: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }
    public final void setBaseURI(java.lang.String)
    {
        org.jdom2.Document r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: java.lang.String;

        r0.<org.jdom2.Document: java.lang.String baseURI> = $r1;

        return;
    }
    public org.jdom2.Document setContent(int, java.util.Collection)
    {
        org.jdom2.Document r0;
        int $i0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content remove(int)>($i0);

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return r0;
    }
    public org.jdom2.Document setContent(int, org.jdom2.Content)
    {
        org.jdom2.Document r0;
        int $i0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content set(int,org.jdom2.Content)>($i0, $r1);

        return r0;
    }
    public org.jdom2.Document setContent(java.util.Collection)
    {
        org.jdom2.Document r0;
        java.util.Collection r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void clearAndSet(java.util.Collection)>(r1);

        return r0;
    }
    public org.jdom2.Document setContent(org.jdom2.Content)
    {
        org.jdom2.Document r0;
        org.jdom2.Content $r1;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void clear()>();

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public org.jdom2.Document setDocType(org.jdom2.DocType)
    {
        org.jdom2.Document r0, $r3;
        org.jdom2.DocType $r1;
        org.jdom2.ContentList $r2;
        int $i0;
        org.jdom2.IllegalAddException $r4;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.DocType;

        if $r1 != null goto label1;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOfDocType()>();

        if $i0 < 0 goto label4;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content remove(int)>($i0);

        return r0;

     label1:
        $r3 = virtualinvoke $r1.<org.jdom2.DocType: org.jdom2.Document getParent()>();

        if $r3 == null goto label2;

        $r4 = new org.jdom2.IllegalAddException;

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(org.jdom2.DocType,java.lang.String)>($r1, "The DocType already is attached to a document");

        throw $r4;

     label2:
        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOfDocType()>();

        if $i0 >= 0 goto label3;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: void add(int,org.jdom2.Content)>(0, $r1);

        return r0;

     label3:
        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content set(int,org.jdom2.Content)>($i0, $r1);

     label4:
        return r0;
    }
    public void setProperty(java.lang.String, java.lang.Object)
    {
        org.jdom2.Document r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.jdom2.Document: java.util.HashMap propertyMap>;

        if $r3 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.jdom2.Document: java.util.HashMap propertyMap> = $r3;

     label1:
        $r3 = r0.<org.jdom2.Document: java.util.HashMap propertyMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public org.jdom2.Document setRootElement(org.jdom2.Element)
    {
        org.jdom2.Document r0;
        org.jdom2.Element $r1;
        int $i0;
        org.jdom2.ContentList $r2;

        r0 := @this: org.jdom2.Document;

        $r1 := @parameter0: org.jdom2.Element;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        $i0 = virtualinvoke $r2.<org.jdom2.ContentList: int indexOfFirstElement()>();

        if $i0 >= 0 goto label1;

        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: boolean add(java.lang.Object)>($r1);

        return r0;

     label1:
        $r2 = r0.<org.jdom2.Document: org.jdom2.ContentList content>;

        virtualinvoke $r2.<org.jdom2.ContentList: org.jdom2.Content set(int,org.jdom2.Content)>($i0, $r1);

        return r0;
    }
    public java.lang.String toString()
    {
        org.jdom2.Document r0;
        java.lang.StringBuilder $r1, $r4;
        org.jdom2.DocType $r2;
        java.lang.String $r3;
        boolean $z0;
        org.jdom2.Element $r5;

        r0 := @this: org.jdom2.Document;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Document: ");

        $r2 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.DocType getDocType()>();

        if $r2 == null goto label4;

        $r3 = virtualinvoke $r2.<org.jdom2.DocType: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label1:
        $z0 = virtualinvoke r0.<org.jdom2.Document: boolean hasRootElement()>();

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r0.<org.jdom2.Document: org.jdom2.Element getRootElement()>();

     label2:
        if $r5 == null goto label6;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Root is ");

        $r3 = virtualinvoke $r5.<org.jdom2.Element: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" No DOCTYPE declaration, ");

        goto label1;

     label5:
        $r5 = null;

        goto label2;

     label6:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" No root element");

        goto label3;
    }
