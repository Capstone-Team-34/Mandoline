org.jdom2.StringBin extends java.lang.Object
private static final int DEFAULTCAP
private static final int GROW
private static final int MAXBUCKET
private java.lang.String[][] buckets
private int[] lengths
private int mask
    public void <init>()
    {
        org.jdom2.StringBin r0;

        r0 := @this: org.jdom2.StringBin;

        specialinvoke r0.<org.jdom2.StringBin: void <init>(int)>(1023);

        return;
    }
    public void <init>(int)
    {
        org.jdom2.StringBin r0;
        int $i0, i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.String[][] $r2;
        int[] $r3;

        r0 := @this: org.jdom2.StringBin;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.StringBin: int mask> = 0;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not have a negative capacity");

        throw $r1;

     label1:
        $i0 = $i0 + -1;

        if $i0 >= 1023 goto label2;

        $i0 = 1023;

     label2:
        $i0 = $i0 / 3;

        i1 = 0;

     label3:
        if $i0 == 0 goto label4;

        $i0 = $i0 >>> 1;

        i1 = i1 + 1;

        goto label3;

     label4:
        $i0 = 1 << i1;

        $i0 = $i0 + -1;

        r0.<org.jdom2.StringBin: int mask> = $i0;

        $i0 = r0.<org.jdom2.StringBin: int mask>;

        $i0 = $i0 + 1;

        $r2 = newarray (java.lang.String[])[$i0];

        r0.<org.jdom2.StringBin: java.lang.String[][] buckets> = $r2;

        $r2 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $i0 = lengthof $r2;

        $r3 = newarray (int)[$i0];

        r0.<org.jdom2.StringBin: int[] lengths> = $r3;

        return;
    }
    private static final java.lang.String compact(java.lang.String)
    {
        java.lang.String $r0, $r1;
        char[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r2);

        return $r1;
    }
    private final int locate(int, java.lang.String, java.lang.String[], int)
    {
        org.jdom2.StringBin r0;
        int $i0, $i1, i2, i3, $i4;
        java.lang.String $r1, $r3;
        java.lang.String[] $r2;

        r0 := @this: org.jdom2.StringBin;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $i1 := @parameter3: int;

        i2 = 0;

        i3 = $i1 + -1;

     label01:
        if i2 > i3 goto label11;

        $i1 = i2 + i3;

        $i1 = $i1 >>> 1;

        $r3 = $r2[$i1];

        $i4 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        if $i4 <= $i0 goto label02;

        i3 = $i1 + -1;

        goto label01;

     label02:
        $r3 = $r2[$i1];

        $i4 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        if $i4 >= $i0 goto label03;

        i2 = $i1 + 1;

        goto label01;

     label03:
        $r3 = $r2[$i1];

        $i4 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i4 != 0 goto label04;

        return $i1;

     label04:
        if $i4 >= 0 goto label08;

     label05:
        $i1 = $i1 + -1;

        if $i1 < i2 goto label07;

        $r3 = $r2[$i1];

        i3 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        if i3 != $i0 goto label07;

        $r3 = $r2[$i1];

        i3 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if i3 != 0 goto label06;

        return $i1;

     label06:
        if i3 <= 0 goto label05;

        $i0 = $i1 + 1;

        $i0 = neg $i0;

        $i0 = $i0 + -1;

        return $i0;

     label07:
        $i0 = $i1 + 1;

        $i0 = neg $i0;

        $i0 = $i0 + -1;

        return $i0;

     label08:
        $i1 = $i1 + 1;

        if $i1 > i3 goto label10;

        $r3 = $r2[$i1];

        i2 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        if i2 != $i0 goto label10;

        $r3 = $r2[$i1];

        i2 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if i2 != 0 goto label09;

        return $i1;

     label09:
        if i2 >= 0 goto label08;

        $i0 = neg $i1;

        $i0 = $i0 + -1;

        return $i0;

     label10:
        $i0 = neg $i1;

        $i0 = $i0 + -1;

        return $i0;

     label11:
        $i0 = neg i2;

        $i0 = $i0 + -1;

        return $i0;
    }
    private void rehash()
    {
        org.jdom2.StringBin r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.String[] r1, $r6;
        java.lang.String[][] r2, $r4, $r7;
        java.lang.String r3;
        int[] $r5;
        java.lang.Object[] $r8;

        r0 := @this: org.jdom2.StringBin;

        r2 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        i0 = r0.<org.jdom2.StringBin: int mask>;

        i0 = i0 + 1;

        i0 = i0 << 2;

        i0 = i0 + -1;

        r0.<org.jdom2.StringBin: int mask> = i0;

        i0 = r0.<org.jdom2.StringBin: int mask>;

        i0 = i0 + 1;

        $r4 = newarray (java.lang.String[])[i0];

        r0.<org.jdom2.StringBin: java.lang.String[][] buckets> = $r4;

        $r4 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        i0 = lengthof $r4;

        $r5 = newarray (int)[i0];

        r0.<org.jdom2.StringBin: int[] lengths> = $r5;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label8;

        r1 = r2[i2];

        if r1 != null goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        i1 = lengthof r1;

        i3 = 0;

     label4:
        if i3 >= i1 goto label2;

        r3 = r1[i3];

        if r3 == null goto label2;

        $i4 = virtualinvoke r3.<java.lang.String: int hashCode()>();

        $i5 = $i4 >>> 16;

        $i4 = $i5 ^ $i4;

        $i5 = r0.<org.jdom2.StringBin: int mask>;

        $i4 = $i4 & $i5;

        $r5 = r0.<org.jdom2.StringBin: int[] lengths>;

        $i5 = $r5[$i4];

        if $i5 != 0 goto label6;

        $r4 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $i5 = lengthof r1;

        $i5 = $i5 + 4;

        $i5 = $i5 / 4;

        $r6 = newarray (java.lang.String)[$i5];

        $r4[$i4] = $r6;

        $r4 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r6 = $r4[$i4];

        $r6[0] = r3;

     label5:
        $r5 = r0.<org.jdom2.StringBin: int[] lengths>;

        $i5 = $r5[$i4];

        $i5 = $i5 + 1;

        $r5[$i4] = $i5;

        i3 = i3 + 1;

        goto label4;

     label6:
        $r4 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r6 = $r4[$i4];

        $i6 = lengthof $r6;

        if $i6 != $i5 goto label7;

        $r4 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r7 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r6 = $r7[$i4];

        $r5 = r0.<org.jdom2.StringBin: int[] lengths>;

        $i6 = $r5[$i4];

        $i6 = $i6 + 4;

        $r8 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r6, $i6);

        $r6 = (java.lang.String[]) $r8;

        $r4[$i4] = $r6;

     label7:
        $r4 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r6 = $r4[$i4];

        $r6[$i5] = r3;

        goto label5;

     label8:
        return;
    }
    public java.lang.String reuse(java.lang.String)
    {
        org.jdom2.StringBin r0;
        java.lang.String $r1;
        int i0, i1, i2, $i3;
        int[] $r2;
        java.lang.String[][] $r3;
        java.lang.String[] $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.jdom2.StringBin;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        i0 = i1 >>> 16;

        i0 = i0 ^ i1;

        i2 = r0.<org.jdom2.StringBin: int mask>;

        i0 = i0 & i2;

        $r2 = r0.<org.jdom2.StringBin: int[] lengths>;

        i2 = $r2[i0];

        if i2 != 0 goto label2;

        $r1 = staticinvoke <org.jdom2.StringBin: java.lang.String compact(java.lang.String)>($r1);

        $r3 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r4 = newarray (java.lang.String)[4];

        $r3[i0] = $r4;

        $r3 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r4 = $r3[i0];

        $r4[0] = $r1;

        $r2 = r0.<org.jdom2.StringBin: int[] lengths>;

        $r2[i0] = 1;

        return $r1;

     label2:
        $r3 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r4 = $r3[i0];

        i1 = specialinvoke r0.<org.jdom2.StringBin: int locate(int,java.lang.String,java.lang.String[],int)>(i1, $r1, $r4, i2);

        i1 = neg i1;

        i1 = i1 + -1;

        if i1 >= 0 goto label3;

        i0 = neg i1;

        i0 = i0 + -1;

        $r1 = $r4[i0];

        return $r1;

     label3:
        if i2 < 64 goto label4;

        specialinvoke r0.<org.jdom2.StringBin: void rehash()>();

        $r1 = virtualinvoke r0.<org.jdom2.StringBin: java.lang.String reuse(java.lang.String)>($r1);

        return $r1;

     label4:
        $i3 = lengthof $r4;

        if i2 != $i3 goto label5;

        $i3 = i2 + 4;

        $r5 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i3);

        $r4 = (java.lang.String[]) $r5;

        $r3 = r0.<org.jdom2.StringBin: java.lang.String[][] buckets>;

        $r3[i0] = $r4;

     label5:
        $i3 = i1 + 1;

        i2 = i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i1, $r4, $i3, i2);

        $r1 = staticinvoke <org.jdom2.StringBin: java.lang.String compact(java.lang.String)>($r1);

        $r4[i1] = $r1;

        $r2 = r0.<org.jdom2.StringBin: int[] lengths>;

        i2 = $r2[i0];

        i2 = i2 + 1;

        $r2[i0] = i2;

        return $r1;
    }
    public int size()
    {
        org.jdom2.StringBin r0;
        int[] r1;
        int i0, i1, i2, i3;

        r0 := @this: org.jdom2.StringBin;

        i2 = 0;

        r1 = r0.<org.jdom2.StringBin: int[] lengths>;

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        i0 = r1[i3];

        i2 = i2 + i0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }
