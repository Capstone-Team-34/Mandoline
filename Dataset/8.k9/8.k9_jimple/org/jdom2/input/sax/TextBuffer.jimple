org.jdom2.input.sax.TextBuffer extends java.lang.Object
private char[] array
private int arraySize
    void <init>()
    {
        org.jdom2.input.sax.TextBuffer r0;
        char[] $r1;

        r0 := @this: org.jdom2.input.sax.TextBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[1024];

        r0.<org.jdom2.input.sax.TextBuffer: char[] array> = $r1;

        r0.<org.jdom2.input.sax.TextBuffer: int arraySize> = 0;

        return;
    }
    void append(char[], int, int)
    {
        org.jdom2.input.sax.TextBuffer r0;
        char[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.jdom2.input.sax.TextBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = r0.<org.jdom2.input.sax.TextBuffer: int arraySize>;

        $i2 = $i2 + $i1;

        $r2 = r0.<org.jdom2.input.sax.TextBuffer: char[] array>;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label1;

        $r2 = r0.<org.jdom2.input.sax.TextBuffer: char[] array>;

        $i2 = r0.<org.jdom2.input.sax.TextBuffer: int arraySize>;

        $i2 = $i2 + $i1;

        $r3 = r0.<org.jdom2.input.sax.TextBuffer: char[] array>;

        $i3 = lengthof $r3;

        $i3 = $i3 >> 2;

        $i2 = $i2 + $i3;

        $r2 = staticinvoke <org.jdom2.internal.ArrayCopy: char[] copyOf(char[],int)>($r2, $i2);

        r0.<org.jdom2.input.sax.TextBuffer: char[] array> = $r2;

     label1:
        $r2 = r0.<org.jdom2.input.sax.TextBuffer: char[] array>;

        $i2 = r0.<org.jdom2.input.sax.TextBuffer: int arraySize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, $i2, $i1);

        $i0 = r0.<org.jdom2.input.sax.TextBuffer: int arraySize>;

        $i0 = $i0 + $i1;

        r0.<org.jdom2.input.sax.TextBuffer: int arraySize> = $i0;

        return;
    }
    void clear()
    {
        org.jdom2.input.sax.TextBuffer r0;

        r0 := @this: org.jdom2.input.sax.TextBuffer;

        r0.<org.jdom2.input.sax.TextBuffer: int arraySize> = 0;

        return;
    }
    boolean isAllWhitespace()
    {
        org.jdom2.input.sax.TextBuffer r0;
        boolean $z0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.jdom2.input.sax.TextBuffer;

        i0 = r0.<org.jdom2.input.sax.TextBuffer: int arraySize>;

     label1:
        i0 = i0 + -1;

        if i0 < 0 goto label2;

        $r1 = r0.<org.jdom2.input.sax.TextBuffer: char[] array>;

        $c1 = $r1[i0];

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isXMLWhitespace(char)>($c1);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
    public java.lang.String toString()
    {
        org.jdom2.input.sax.TextBuffer r0;
        int $i0;
        java.lang.String $r1;
        char[] $r2;

        r0 := @this: org.jdom2.input.sax.TextBuffer;

        $i0 = r0.<org.jdom2.input.sax.TextBuffer: int arraySize>;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = r0.<org.jdom2.input.sax.TextBuffer: char[] array>;

        $i0 = r0.<org.jdom2.input.sax.TextBuffer: int arraySize>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r2, 0, $i0);

        return $r1;
    }
