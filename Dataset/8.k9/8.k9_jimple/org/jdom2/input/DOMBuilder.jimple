org.jdom2.input.DOMBuilder extends java.lang.Object
private org.jdom2.JDOMFactory factory
    public void <init>()
    {
        org.jdom2.input.DOMBuilder r0;
        org.jdom2.DefaultJDOMFactory $r1;

        r0 := @this: org.jdom2.input.DOMBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.jdom2.DefaultJDOMFactory;

        specialinvoke $r1.<org.jdom2.DefaultJDOMFactory: void <init>()>();

        r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory> = $r1;

        return;
    }
    private void buildTree(org.w3c.dom.Node, org.jdom2.Document, org.jdom2.Element, boolean)
    {
        org.jdom2.input.DOMBuilder r0;
        org.jdom2.Document $r1;
        org.jdom2.Element $r2, $r11;
        boolean $z0;
        java.util.HashMap r3;
        org.w3c.dom.Node r4, $r13;
        short $s0;
        org.w3c.dom.NodeList $r5;
        int i1, $i2, $i3;
        java.lang.String $r6, r7, r8, r15, $r16;
        org.jdom2.Namespace r9, r21;
        org.jdom2.JDOMFactory $r10;
        org.w3c.dom.NamedNodeMap $r12;
        org.w3c.dom.Attr r14;
        org.jdom2.Attribute $r17;
        java.util.List $r18;
        java.util.Iterator $r19;
        java.lang.Object $r20;
        java.lang.StringBuilder $r22;
        org.w3c.dom.Text r23;
        org.jdom2.Text $r24;
        org.w3c.dom.CDATASection r25;
        org.jdom2.CDATA $r26;
        org.w3c.dom.ProcessingInstruction r27;
        org.jdom2.ProcessingInstruction $r28;
        org.w3c.dom.Comment r29;
        org.jdom2.Comment $r30;
        org.w3c.dom.EntityReference r31;
        org.jdom2.EntityRef $r32;
        org.w3c.dom.DocumentType r33;
        org.jdom2.DocType $r34;

        r0 := @this: org.jdom2.input.DOMBuilder;

        r4 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: org.jdom2.Document;

        $r2 := @parameter2: org.jdom2.Element;

        $z0 := @parameter3: boolean;

        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        lookupswitch($s0)
        {
            case 1: goto label04;
            case 2: goto label01;
            case 3: goto label31;
            case 4: goto label32;
            case 5: goto label37;
            case 6: goto label01;
            case 7: goto label33;
            case 8: goto label35;
            case 9: goto label02;
            case 10: goto label38;
            default: goto label01;
        };

     label01:
        return;

     label02:
        $r5 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

        $i2 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

     label03:
        if i1 >= $i2 goto label39;

        r4 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        specialinvoke r0.<org.jdom2.input.DOMBuilder: void buildTree(org.w3c.dom.Node,org.jdom2.Document,org.jdom2.Element,boolean)>(r4, $r1, $r2, 1);

        i1 = i1 + 1;

        goto label03;

     label04:
        $r6 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r7 = "";

        r8 = $r6;

        i1 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(58);

        if i1 < 0 goto label05;

        r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        i1 = i1 + 1;

        r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(i1);

     label05:
        $r6 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r6 != null goto label12;

        if $r2 != null goto label11;

        r9 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

     label06:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r11 = interfaceinvoke $r10.<org.jdom2.JDOMFactory: org.jdom2.Element element(java.lang.String,org.jdom2.Namespace)>(r8, r9);

        if $z0 == 0 goto label13;

        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void setRoot(org.jdom2.Document,org.jdom2.Element)>($r1, $r11);

     label07:
        $r12 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = interfaceinvoke $r12.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $i2 = 0;

     label08:
        if $i2 >= i1 goto label15;

        $r13 = interfaceinvoke $r12.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>($i2);

        r14 = (org.w3c.dom.Attr) $r13;

        r8 = interfaceinvoke r14.<org.w3c.dom.Attr: java.lang.String getName()>();

        $z0 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z0 == 0 goto label10;

        $r6 = "";

        $i3 = virtualinvoke r8.<java.lang.String: int indexOf(int)>(58);

        if $i3 < 0 goto label09;

        $i3 = $i3 + 1;

        $r6 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i3);

     label09:
        r8 = interfaceinvoke r14.<org.w3c.dom.Attr: java.lang.String getValue()>();

        r9 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r6, r8);

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label14;

        virtualinvoke $r11.<org.jdom2.Element: org.jdom2.Element setNamespace(org.jdom2.Namespace)>(r9);

     label10:
        $i2 = $i2 + 1;

        goto label08;

     label11:
        r9 = virtualinvoke $r2.<org.jdom2.Element: org.jdom2.Namespace getNamespace(java.lang.String)>(r7);

        goto label06;

     label12:
        r9 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>(r7, $r6);

        goto label06;

     label13:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r2, $r11);

        goto label07;

     label14:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addNamespaceDeclaration(org.jdom2.Element,org.jdom2.Namespace)>($r11, r9);

        goto label10;

     label15:
        $i2 = 0;

     label16:
        if $i2 >= i1 goto label28;

        $r13 = interfaceinvoke $r12.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>($i2);

        r14 = (org.w3c.dom.Attr) $r13;

        $r6 = interfaceinvoke r14.<org.w3c.dom.Attr: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z0 != 0 goto label20;

        r15 = "";

        r7 = $r6;

        $i3 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(58);

        if $i3 < 0 goto label17;

        r15 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $i3 = $i3 + 1;

        r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i3);

     label17:
        $r6 = interfaceinvoke r14.<org.w3c.dom.Attr: java.lang.String getValue()>();

        r9 = null;

        r8 = interfaceinvoke r14.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        if r8 == null goto label18;

        $r16 = "";

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label21;

     label18:
        r9 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

     label19:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r17 = interfaceinvoke $r10.<org.jdom2.JDOMFactory: org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.Namespace)>(r7, $r6, r9);

        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void setAttribute(org.jdom2.Element,org.jdom2.Attribute)>($r11, $r17);

     label20:
        $i2 = $i2 + 1;

        goto label16;

     label21:
        $i3 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i3 <= 0 goto label22;

        r9 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>(r15, r8);

        goto label19;

     label22:
        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $r18 = virtualinvoke $r11.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label24;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.jdom2.Namespace) $r20;

        r15 = virtualinvoke r21.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $i3 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i3 <= 0 goto label26;

        r15 = virtualinvoke r21.<org.jdom2.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label26;

        r9 = r21;

     label24:
        if r9 != null goto label19;

        $i3 = 0;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attns");

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        r15 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label25:
        $z0 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r15);

        if $z0 == 0 goto label27;

        $i3 = $i3 + 1;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attns");

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r15 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label25;

     label26:
        r15 = virtualinvoke r21.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r21);

        goto label23;

     label27:
        r9 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>(r15, r8);

        goto label19;

     label28:
        $r5 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        if $r5 == null goto label39;

        i1 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        $i2 = 0;

     label29:
        if $i2 >= i1 goto label39;

        r4 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i2);

        if r4 == null goto label30;

        specialinvoke r0.<org.jdom2.input.DOMBuilder: void buildTree(org.w3c.dom.Node,org.jdom2.Document,org.jdom2.Element,boolean)>(r4, $r1, $r11, 0);

     label30:
        $i2 = $i2 + 1;

        goto label29;

     label31:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r23 = (org.w3c.dom.Text) r4;

        $r24 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.Text build(org.w3c.dom.Text)>(r23);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r2, $r24);

        return;

     label32:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r25 = (org.w3c.dom.CDATASection) r4;

        $r26 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.CDATA build(org.w3c.dom.CDATASection)>(r25);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r2, $r26);

        return;

     label33:
        if $z0 == 0 goto label34;

        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r27 = (org.w3c.dom.ProcessingInstruction) r4;

        $r28 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.ProcessingInstruction build(org.w3c.dom.ProcessingInstruction)>(r27);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r1, $r28);

        return;

     label34:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r27 = (org.w3c.dom.ProcessingInstruction) r4;

        $r28 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.ProcessingInstruction build(org.w3c.dom.ProcessingInstruction)>(r27);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r2, $r28);

        return;

     label35:
        if $z0 == 0 goto label36;

        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r29 = (org.w3c.dom.Comment) r4;

        $r30 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.Comment build(org.w3c.dom.Comment)>(r29);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r1, $r30);

        return;

     label36:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r29 = (org.w3c.dom.Comment) r4;

        $r30 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.Comment build(org.w3c.dom.Comment)>(r29);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r2, $r30);

        return;

     label37:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r31 = (org.w3c.dom.EntityReference) r4;

        $r32 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.EntityRef build(org.w3c.dom.EntityReference)>(r31);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r2, $r32);

        return;

     label38:
        $r10 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        r33 = (org.w3c.dom.DocumentType) r4;

        $r34 = virtualinvoke r0.<org.jdom2.input.DOMBuilder: org.jdom2.DocType build(org.w3c.dom.DocumentType)>(r33);

        interfaceinvoke $r10.<org.jdom2.JDOMFactory: void addContent(org.jdom2.Parent,org.jdom2.Content)>($r1, $r34);

     label39:
        return;
    }
    public org.jdom2.CDATA build(org.w3c.dom.CDATASection)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.CDATASection $r1;
        org.jdom2.JDOMFactory $r2;
        java.lang.String $r3;
        org.jdom2.CDATA $r4;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.CDATASection;

        $r2 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.CDATASection: java.lang.String getNodeValue()>();

        $r4 = interfaceinvoke $r2.<org.jdom2.JDOMFactory: org.jdom2.CDATA cdata(java.lang.String)>($r3);

        return $r4;
    }
    public org.jdom2.Comment build(org.w3c.dom.Comment)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.Comment $r1;
        org.jdom2.JDOMFactory $r2;
        java.lang.String $r3;
        org.jdom2.Comment $r4;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.Comment;

        $r2 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Comment: java.lang.String getNodeValue()>();

        $r4 = interfaceinvoke $r2.<org.jdom2.JDOMFactory: org.jdom2.Comment comment(java.lang.String)>($r3);

        return $r4;
    }
    public org.jdom2.DocType build(org.w3c.dom.DocumentType)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.DocumentType $r1;
        org.jdom2.JDOMFactory $r2;
        java.lang.String $r3, $r4, $r5, $r6;
        org.jdom2.DocType $r7;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.DocumentType;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        $r4 = interfaceinvoke $r1.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        $r5 = interfaceinvoke $r1.<org.w3c.dom.DocumentType: java.lang.String getInternalSubset()>();

        $r2 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r6 = interfaceinvoke $r1.<org.w3c.dom.DocumentType: java.lang.String getName()>();

        $r7 = interfaceinvoke $r2.<org.jdom2.JDOMFactory: org.jdom2.DocType docType(java.lang.String)>($r6);

        virtualinvoke $r7.<org.jdom2.DocType: org.jdom2.DocType setPublicID(java.lang.String)>($r3);

        virtualinvoke $r7.<org.jdom2.DocType: org.jdom2.DocType setSystemID(java.lang.String)>($r4);

        virtualinvoke $r7.<org.jdom2.DocType: void setInternalSubset(java.lang.String)>($r5);

        return $r7;
    }
    public org.jdom2.Document build(org.w3c.dom.Document)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.Document $r1;
        org.jdom2.Document $r2;
        org.jdom2.JDOMFactory $r3;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r3 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r2 = interfaceinvoke $r3.<org.jdom2.JDOMFactory: org.jdom2.Document document(org.jdom2.Element)>(null);

        specialinvoke r0.<org.jdom2.input.DOMBuilder: void buildTree(org.w3c.dom.Node,org.jdom2.Document,org.jdom2.Element,boolean)>($r1, $r2, null, 1);

        return $r2;
    }
    public org.jdom2.Element build(org.w3c.dom.Element)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.Element $r1;
        org.jdom2.JDOMFactory $r2;
        org.jdom2.Document $r3;
        org.jdom2.Element $r4;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r3 = interfaceinvoke $r2.<org.jdom2.JDOMFactory: org.jdom2.Document document(org.jdom2.Element)>(null);

        specialinvoke r0.<org.jdom2.input.DOMBuilder: void buildTree(org.w3c.dom.Node,org.jdom2.Document,org.jdom2.Element,boolean)>($r1, $r3, null, 1);

        $r4 = virtualinvoke $r3.<org.jdom2.Document: org.jdom2.Element getRootElement()>();

        return $r4;
    }
    public org.jdom2.EntityRef build(org.w3c.dom.EntityReference)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.EntityReference $r1;
        org.jdom2.JDOMFactory $r2;
        java.lang.String $r3;
        org.jdom2.EntityRef $r4;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.EntityReference;

        $r2 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.EntityReference: java.lang.String getNodeName()>();

        $r4 = interfaceinvoke $r2.<org.jdom2.JDOMFactory: org.jdom2.EntityRef entityRef(java.lang.String)>($r3);

        return $r4;
    }
    public org.jdom2.ProcessingInstruction build(org.w3c.dom.ProcessingInstruction)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.ProcessingInstruction $r1;
        org.jdom2.JDOMFactory $r2;
        java.lang.String $r3, $r4;
        org.jdom2.ProcessingInstruction $r5;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.ProcessingInstruction;

        $r2 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.ProcessingInstruction: java.lang.String getTarget()>();

        $r4 = interfaceinvoke $r1.<org.w3c.dom.ProcessingInstruction: java.lang.String getData()>();

        $r5 = interfaceinvoke $r2.<org.jdom2.JDOMFactory: org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)>($r3, $r4);

        return $r5;
    }
    public org.jdom2.Text build(org.w3c.dom.Text)
    {
        org.jdom2.input.DOMBuilder r0;
        org.w3c.dom.Text $r1;
        org.jdom2.JDOMFactory $r2;
        java.lang.String $r3;
        org.jdom2.Text $r4;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.w3c.dom.Text;

        $r2 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Text: java.lang.String getNodeValue()>();

        $r4 = interfaceinvoke $r2.<org.jdom2.JDOMFactory: org.jdom2.Text text(java.lang.String)>($r3);

        return $r4;
    }
    public org.jdom2.JDOMFactory getFactory()
    {
        org.jdom2.input.DOMBuilder r0;
        org.jdom2.JDOMFactory r1;

        r0 := @this: org.jdom2.input.DOMBuilder;

        r1 = r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory>;

        return r1;
    }
    public void setFactory(org.jdom2.JDOMFactory)
    {
        org.jdom2.input.DOMBuilder r0;
        org.jdom2.JDOMFactory $r1;

        r0 := @this: org.jdom2.input.DOMBuilder;

        $r1 := @parameter0: org.jdom2.JDOMFactory;

        r0.<org.jdom2.input.DOMBuilder: org.jdom2.JDOMFactory factory> = $r1;

        return;
    }
