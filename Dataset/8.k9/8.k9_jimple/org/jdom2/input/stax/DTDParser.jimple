org.jdom2.input.stax.DTDParser extends java.lang.Object
private static final java.lang.String metapattern
private static final java.util.regex.Pattern pattern
    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.regex.Pattern $r1;

        $r0 = staticinvoke <org.jdom2.input.stax.DTDParser: java.util.HashMap populatePatterns()>();

        $r1 = staticinvoke <org.jdom2.input.stax.DTDParser: java.util.regex.Pattern buildPattern(java.util.HashMap,java.lang.String)>($r0, " os <!DOCTYPE ms ( name )( ms ((SYSTEM ms  id )|(PUBLIC ms  id ( ms  id )?)))?( os \\[( internal )\\])? os > os ");

        <org.jdom2.input.stax.DTDParser: java.util.regex.Pattern pattern> = $r1;

        return;
    }
    private void <init>()
    {
        org.jdom2.input.stax.DTDParser r0;

        r0 := @this: org.jdom2.input.stax.DTDParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static final java.util.regex.Pattern buildPattern(java.util.HashMap, java.lang.String)
    {
        java.util.HashMap r0;
        java.lang.String $r1, $r5, $r7;
        java.lang.StringBuilder r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        int i0, $i1;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.HashMap;

        $r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(" (\\w+) ");

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

     label1:
        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r6 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r5 = (java.lang.String) $r6;

        $i1 = virtualinvoke $r4.<java.util.regex.Matcher: int start()>();

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = virtualinvoke $r4.<java.util.regex.Matcher: int end()>();

        goto label1;

     label2:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r1, 32);

        return $r3;
    }
    private static java.lang.String formatInternal(java.lang.String)
    {
        java.lang.String $r0;
        char c0, c2;
        int i1, i3, $i4;
        java.lang.StringBuilder r1;
        boolean z0, $z1;
        char[] $r2;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.lang.StringBuilder;

        i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(i1);

        c2 = 32;

        z0 = 1;

        $r2 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        i1 = lengthof $r2;

        i3 = 0;

     label01:
        if i3 >= i1 goto label12;

        c0 = $r2[i3];

        if c2 != 32 goto label10;

        $z1 = staticinvoke <org.jdom2.input.stax.DTDParser: boolean isWhite(char)>(c0);

        if $z1 == 0 goto label03;

        if z0 != 0 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        z0 = 1;

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        if c0 == 39 goto label04;

        if c0 != 34 goto label07;

     label04:
        c2 = c0;

     label05:
        if c0 != 62 goto label09;

        if z0 == 0 goto label08;

        $i4 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i4 = $i4 + -1;

        virtualinvoke r1.<java.lang.StringBuilder: void setCharAt(int,char)>($i4, c0);

     label06:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        z0 = 1;

        goto label02;

     label07:
        if c0 != 60 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        goto label05;

     label08:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label06;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        z0 = 0;

        goto label02;

     label10:
        if c0 != c2 goto label11;

        c2 = 32;

     label11:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label02;

     label12:
        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    private static final transient java.lang.String getGroup(java.util.regex.Matcher, int[])
    {
        java.util.regex.Matcher $r0;
        int[] $r1;
        int i0, i1, i2;
        java.lang.String $r2;

        $r0 := @parameter0: java.util.regex.Matcher;

        $r1 := @parameter1: int[];

        i1 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        i0 = $r1[i2];

        $r2 = virtualinvoke $r0.<java.util.regex.Matcher: java.lang.String group(int)>(i0);

        if $r2 == null goto label2;

        return $r2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }
    private static final boolean isWhite(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 == 32 goto label1;

        if $c0 == 9 goto label1;

        if $c0 == 10 goto label1;

        if $c0 != 13 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static org.jdom2.DocType parse(java.lang.String, org.jdom2.JDOMFactory) throws org.jdom2.JDOMException
    {
        java.lang.String $r0, $r7, $r8, $r9;
        org.jdom2.JDOMFactory $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        org.jdom2.JDOMException $r4;
        java.lang.StringBuilder $r5;
        int[] $r6;
        org.jdom2.DocType $r10;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.jdom2.JDOMFactory;

        $r2 = <org.jdom2.input.stax.DTDParser: java.util.regex.Pattern pattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $r4 = new org.jdom2.JDOMException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Doctype input does not appear to be valid: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label1:
        $r0 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r6 = newarray (int)[4];

        $r6[0] = 7;

        $r6[1] = 9;

        $r6[2] = 19;

        $r6[3] = 21;

        $r7 = staticinvoke <org.jdom2.input.stax.DTDParser: java.lang.String getGroup(java.util.regex.Matcher,int[])>($r3, $r6);

        $r6 = newarray (int)[2];

        $r6[0] = 13;

        $r6[1] = 15;

        $r8 = staticinvoke <org.jdom2.input.stax.DTDParser: java.lang.String getGroup(java.util.regex.Matcher,int[])>($r3, $r6);

        $r6 = newarray (int)[1];

        $r6[0] = 23;

        $r9 = staticinvoke <org.jdom2.input.stax.DTDParser: java.lang.String getGroup(java.util.regex.Matcher,int[])>($r3, $r6);

        if $r8 == null goto label3;

        $r10 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.DocType docType(java.lang.String,java.lang.String,java.lang.String)>($r0, $r8, $r7);

     label2:
        if $r9 == null goto label5;

        $r0 = staticinvoke <org.jdom2.input.stax.DTDParser: java.lang.String formatInternal(java.lang.String)>($r9);

        virtualinvoke $r10.<org.jdom2.DocType: void setInternalSubset(java.lang.String)>($r0);

        return $r10;

     label3:
        if $r7 == null goto label4;

        $r10 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.DocType docType(java.lang.String,java.lang.String)>($r0, $r7);

        goto label2;

     label4:
        $r10 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.DocType docType(java.lang.String)>($r0);

        goto label2;

     label5:
        return $r10;
    }
    private static final java.util.HashMap populatePatterns()
    {
        java.util.HashMap r0;

        r0 = new java.util.HashMap;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", "[^ \\n\\r\\t\\[>]+");

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("ms", "[ \\n\\r\\t]+");

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("os", "[ \\n\\r\\t]*");

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("id", "((\'([^\']*)\')|(\"([^\"]*)\"))");

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("internal", ".*");

        return r0;
    }
