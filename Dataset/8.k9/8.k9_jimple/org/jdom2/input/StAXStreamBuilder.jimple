org.jdom2.input.StAXStreamBuilder extends java.lang.Object
private org.jdom2.JDOMFactory builderfactory
    public void <init>()
    {
        org.jdom2.input.StAXStreamBuilder r0;
        org.jdom2.DefaultJDOMFactory $r1;

        r0 := @this: org.jdom2.input.StAXStreamBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.jdom2.DefaultJDOMFactory;

        specialinvoke $r1.<org.jdom2.DefaultJDOMFactory: void <init>()>();

        r0.<org.jdom2.input.StAXStreamBuilder: org.jdom2.JDOMFactory builderfactory> = $r1;

        return;
    }
    private static final org.jdom2.Document process(org.jdom2.JDOMFactory, javax.xml.stream.XMLStreamReader) throws org.jdom2.JDOMException
    {
        org.jdom2.JDOMFactory $r0;
        javax.xml.stream.XMLStreamReader $r1;
        java.lang.Throwable r2;
        int $i0, i1;
        org.jdom2.JDOMException $r3;
        org.jdom2.Document $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r11;
        javax.xml.stream.Location $r7;
        boolean $z0;
        org.jdom2.DocType $r8;
        org.jdom2.Element $r9;
        org.jdom2.Comment $r10;
        org.jdom2.ProcessingInstruction $r12;

        $r0 := @parameter0: org.jdom2.JDOMFactory;

        $r1 := @parameter1: javax.xml.stream.XMLStreamReader;

     label01:
        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

     label02:
        i1 = $i0;

        if 7 == $i0 goto label06;

        $r3 = new org.jdom2.JDOMException;

     label03:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("JDOM requires that XMLStreamReaders are at their beginning when being processed.");

     label04:
        throw $r3;

     label05:
        r2 := @caughtexception;

        $r3 = new org.jdom2.JDOMException;

        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to process XMLStream. See Cause.", r2);

        throw $r3;

     label06:
        $r4 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Document document(org.jdom2.Element)>(null);

     label07:
        if i1 == 8 goto label40;

        lookupswitch(i1)
        {
            case 1: goto label18;
            case 2: goto label20;
            case 3: goto label35;
            case 4: goto label29;
            case 5: goto label33;
            case 6: goto label12;
            case 7: goto label11;
            case 8: goto label08;
            case 9: goto label23;
            case 10: goto label08;
            case 11: goto label16;
            case 12: goto label26;
            default: goto label08;
        };

     label08:
        $r3 = new org.jdom2.JDOMException;

        $r5 = new java.lang.StringBuilder;

     label09:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected XMLStream event ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r6);

     label10:
        throw $r3;

     label11:
        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r6 = interfaceinvoke $r7.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        virtualinvoke $r4.<org.jdom2.Document: void setBaseURI(java.lang.String)>($r6);

        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getCharacterEncodingScheme()>();

        virtualinvoke $r4.<org.jdom2.Document: void setProperty(java.lang.String,java.lang.Object)>("ENCODING_SCHEME", $r6);

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isStandalone()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        virtualinvoke $r4.<org.jdom2.Document: void setProperty(java.lang.String,java.lang.Object)>("STANDALONE", $r6);

        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getEncoding()>();

        virtualinvoke $r4.<org.jdom2.Document: void setProperty(java.lang.String,java.lang.Object)>("ENCODING", $r6);

     label12:
        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

     label13:
        if $z0 == 0 goto label37;

     label14:
        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label15:
        i1 = $i0;

        goto label07;

     label16:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r8 = staticinvoke <org.jdom2.input.stax.DTDParser: org.jdom2.DocType parse(java.lang.String,org.jdom2.JDOMFactory)>($r6, $r0);

        virtualinvoke $r4.<org.jdom2.Document: org.jdom2.Document setDocType(org.jdom2.DocType)>($r8);

     label17:
        goto label12;

     label18:
        $r9 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Element processElementFragment(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r0, $r1);

        virtualinvoke $r4.<org.jdom2.Document: org.jdom2.Document setRootElement(org.jdom2.Element)>($r9);

     label19:
        goto label12;

     label20:
        $r3 = new org.jdom2.JDOMException;

     label21:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Unexpected XMLStream event at Document level: END_ELEMENT");

     label22:
        throw $r3;

     label23:
        $r3 = new org.jdom2.JDOMException;

     label24:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Unexpected XMLStream event at Document level: ENTITY_REFERENCE");

     label25:
        throw $r3;

     label26:
        $r3 = new org.jdom2.JDOMException;

     label27:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Unexpected XMLStream event at Document level: CDATA");

     label28:
        throw $r3;

     label29:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $z0 = staticinvoke <org.jdom2.Verifier: boolean isAllXMLWhitespace(java.lang.String)>($r6);

     label30:
        if $z0 != 0 goto label12;

        $r3 = new org.jdom2.JDOMException;

        $r5 = new java.lang.StringBuilder;

     label31:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected XMLStream event at Document level: CHARACTERS (");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r6);

     label32:
        throw $r3;

     label33:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r10 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Comment comment(java.lang.String)>($r6);

        virtualinvoke $r4.<org.jdom2.Document: org.jdom2.Document addContent(org.jdom2.Content)>($r10);

     label34:
        goto label12;

     label35:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r11 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        $r12 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)>($r6, $r11);

        virtualinvoke $r4.<org.jdom2.Document: org.jdom2.Document addContent(org.jdom2.Content)>($r12);

     label36:
        goto label12;

     label37:
        $r3 = new org.jdom2.JDOMException;

     label38:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Unexpected end-of-XMLStreamReader");

     label39:
        throw $r3;

     label40:
        return $r4;

        catch javax.xml.stream.XMLStreamException from label01 to label02 with label05;
        catch javax.xml.stream.XMLStreamException from label03 to label04 with label05;
        catch javax.xml.stream.XMLStreamException from label06 to label07 with label05;
        catch javax.xml.stream.XMLStreamException from label09 to label10 with label05;
        catch javax.xml.stream.XMLStreamException from label11 to label13 with label05;
        catch javax.xml.stream.XMLStreamException from label14 to label15 with label05;
        catch javax.xml.stream.XMLStreamException from label16 to label17 with label05;
        catch javax.xml.stream.XMLStreamException from label18 to label19 with label05;
        catch javax.xml.stream.XMLStreamException from label21 to label22 with label05;
        catch javax.xml.stream.XMLStreamException from label24 to label25 with label05;
        catch javax.xml.stream.XMLStreamException from label27 to label28 with label05;
        catch javax.xml.stream.XMLStreamException from label29 to label30 with label05;
        catch javax.xml.stream.XMLStreamException from label31 to label32 with label05;
        catch javax.xml.stream.XMLStreamException from label33 to label34 with label05;
        catch javax.xml.stream.XMLStreamException from label35 to label36 with label05;
        catch javax.xml.stream.XMLStreamException from label38 to label39 with label05;
    }
    private static final org.jdom2.Element processElement(org.jdom2.JDOMFactory, javax.xml.stream.XMLStreamReader)
    {
        org.jdom2.JDOMFactory $r0;
        javax.xml.stream.XMLStreamReader $r1;
        java.lang.String $r2, $r3, $r4, $r8;
        org.jdom2.Namespace $r5;
        org.jdom2.Element $r6;
        int i0, $i1;
        org.jdom2.AttributeType $r7;
        org.jdom2.Attribute $r9;

        $r0 := @parameter0: org.jdom2.JDOMFactory;

        $r1 := @parameter1: javax.xml.stream.XMLStreamReader;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r3 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        $r4 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $r5 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r3, $r4);

        $r6 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Element element(java.lang.String,org.jdom2.Namespace)>($r2, $r5);

        i0 = 0;

        $i1 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

     label1:
        if i0 >= $i1 goto label2;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i0);

        $r3 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i0);

        $r4 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeType(int)>(i0);

        $r7 = staticinvoke <org.jdom2.AttributeType: org.jdom2.AttributeType getAttributeType(java.lang.String)>($r4);

        $r4 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributePrefix(int)>(i0);

        $r8 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i0);

        $r5 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r4, $r8);

        $r9 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)>($r2, $r3, $r7, $r5);

        interfaceinvoke $r0.<org.jdom2.JDOMFactory: void setAttribute(org.jdom2.Element,org.jdom2.Attribute)>($r6, $r9);

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

        $i1 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

     label3:
        if i0 >= $i1 goto label4;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i0);

        $r3 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(int)>(i0);

        $r5 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke $r6.<org.jdom2.Element: boolean addNamespaceDeclaration(org.jdom2.Namespace)>($r5);

        i0 = i0 + 1;

        goto label3;

     label4:
        return $r6;
    }
    private static final org.jdom2.Element processElementFragment(org.jdom2.JDOMFactory, javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException, org.jdom2.JDOMException
    {
        org.jdom2.JDOMFactory $r0;
        javax.xml.stream.XMLStreamReader $r1;
        int $i0, $i1;
        org.jdom2.JDOMException $r2;
        org.jdom2.Element $r3, r4, $r7;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r12;
        org.jdom2.CDATA $r8;
        org.jdom2.Text $r9;
        org.jdom2.Comment $r10;
        org.jdom2.EntityRef $r11;
        org.jdom2.ProcessingInstruction $r13;

        $r0 := @parameter0: org.jdom2.JDOMFactory;

        $r1 := @parameter1: javax.xml.stream.XMLStreamReader;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 1 == $i0 goto label01;

        $r2 = new org.jdom2.JDOMException;

        specialinvoke $r2.<org.jdom2.JDOMException: void <init>(java.lang.String)>("JDOM requires that the XMLStreamReader is at the START_ELEMENT state when retrieving an Element Fragment.");

        throw $r2;

     label01:
        $r3 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Element processElement(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r0, $r1);

        r4 = $r3;

        $i0 = 1;

     label02:
        if $i0 <= 0 goto label11;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $i1 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

        lookupswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label10;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label07;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label09;
            case 10: goto label03;
            case 11: goto label03;
            case 12: goto label06;
            default: goto label03;
        };

     label03:
        $r2 = new org.jdom2.JDOMException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected XMLStream event ");

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label04:
        $r7 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Element processElement(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r0, $r1);

        virtualinvoke r4.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r7);

        r4 = $r7;

        $i0 = $i0 + 1;

        goto label02;

     label05:
        r4 = virtualinvoke r4.<org.jdom2.Element: org.jdom2.Element getParentElement()>();

        $i0 = $i0 + -1;

        goto label02;

     label06:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r8 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.CDATA cdata(java.lang.String)>($r6);

        virtualinvoke r4.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r8);

        goto label02;

     label07:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r9 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Text text(java.lang.String)>($r6);

        virtualinvoke r4.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r9);

        goto label02;

     label08:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r10 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Comment comment(java.lang.String)>($r6);

        virtualinvoke r4.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r10);

        goto label02;

     label09:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r11 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.EntityRef entityRef(java.lang.String)>($r6);

        virtualinvoke r4.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r11);

        goto label02;

     label10:
        $r6 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r12 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        $r13 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)>($r6, $r12);

        virtualinvoke r4.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r13);

        goto label02;

     label11:
        return $r3;
    }
    private static final org.jdom2.Content processFragment(org.jdom2.JDOMFactory, javax.xml.stream.XMLStreamReader) throws org.jdom2.JDOMException
    {
        org.jdom2.JDOMFactory $r0;
        javax.xml.stream.XMLStreamReader $r1;
        java.lang.Throwable r2;
        int $i0;
        org.jdom2.JDOMException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r12;
        org.jdom2.Element $r6;
        org.jdom2.DocType $r7;
        org.jdom2.CDATA $r8;
        org.jdom2.Text $r9;
        org.jdom2.Comment $r10;
        org.jdom2.EntityRef $r11;
        org.jdom2.ProcessingInstruction $r13;

        $r0 := @parameter0: org.jdom2.JDOMFactory;

        $r1 := @parameter1: javax.xml.stream.XMLStreamReader;

     label01:
        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

     label02:
        lookupswitch($i0)
        {
            case 1: goto label16;
            case 2: goto label13;
            case 3: goto label28;
            case 4: goto label22;
            case 5: goto label24;
            case 6: goto label22;
            case 7: goto label07;
            case 8: goto label10;
            case 9: goto label26;
            case 10: goto label03;
            case 11: goto label18;
            case 12: goto label20;
            default: goto label03;
        };

     label03:
        $r3 = new org.jdom2.JDOMException;

        $r4 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected XMLStream event ");

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r5);

     label05:
        throw $r3;

     label06:
        r2 := @caughtexception;

        $r3 = new org.jdom2.JDOMException;

        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to process XMLStream. See Cause.", r2);

        throw $r3;

     label07:
        $r3 = new org.jdom2.JDOMException;

     label08:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Illegal state for XMLStreamReader. Cannot get XML Fragment for state START_DOCUMENT");

     label09:
        throw $r3;

     label10:
        $r3 = new org.jdom2.JDOMException;

     label11:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Illegal state for XMLStreamReader. Cannot get XML Fragment for state END_DOCUMENT");

     label12:
        throw $r3;

     label13:
        $r3 = new org.jdom2.JDOMException;

     label14:
        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Illegal state for XMLStreamReader. Cannot get XML Fragment for state END_ELEMENT");

     label15:
        throw $r3;

     label16:
        $r6 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Element processElementFragment(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r0, $r1);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label17:
        return $r6;

     label18:
        $r5 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r7 = staticinvoke <org.jdom2.input.stax.DTDParser: org.jdom2.DocType parse(java.lang.String,org.jdom2.JDOMFactory)>($r5, $r0);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label19:
        return $r7;

     label20:
        $r5 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r8 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.CDATA cdata(java.lang.String)>($r5);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label21:
        return $r8;

     label22:
        $r5 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r9 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Text text(java.lang.String)>($r5);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label23:
        return $r9;

     label24:
        $r5 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r10 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Comment comment(java.lang.String)>($r5);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label25:
        return $r10;

     label26:
        $r5 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r11 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.EntityRef entityRef(java.lang.String)>($r5);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label27:
        return $r11;

     label28:
        $r5 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r12 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        $r13 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)>($r5, $r12);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label29:
        return $r13;

        catch javax.xml.stream.XMLStreamException from label01 to label02 with label06;
        catch javax.xml.stream.XMLStreamException from label04 to label05 with label06;
        catch javax.xml.stream.XMLStreamException from label08 to label09 with label06;
        catch javax.xml.stream.XMLStreamException from label11 to label12 with label06;
        catch javax.xml.stream.XMLStreamException from label14 to label15 with label06;
        catch javax.xml.stream.XMLStreamException from label16 to label17 with label06;
        catch javax.xml.stream.XMLStreamException from label18 to label19 with label06;
        catch javax.xml.stream.XMLStreamException from label20 to label21 with label06;
        catch javax.xml.stream.XMLStreamException from label22 to label23 with label06;
        catch javax.xml.stream.XMLStreamException from label24 to label25 with label06;
        catch javax.xml.stream.XMLStreamException from label26 to label27 with label06;
        catch javax.xml.stream.XMLStreamException from label28 to label29 with label06;
    }
    private java.util.List processFragments(org.jdom2.JDOMFactory, javax.xml.stream.XMLStreamReader, org.jdom2.input.stax.StAXFilter) throws org.jdom2.JDOMException
    {
        org.jdom2.input.StAXStreamBuilder r0;
        org.jdom2.JDOMFactory $r1;
        javax.xml.stream.XMLStreamReader $r2;
        org.jdom2.input.stax.StAXFilter $r3;
        int i0, $i1, $i2;
        java.lang.Throwable r4;
        java.util.ArrayList r5;
        org.jdom2.JDOMException $r6;
        boolean $z0;
        java.lang.StringBuilder $r7;
        java.lang.String $r8, $r10, $r11;
        javax.xml.namespace.QName $r9;
        org.jdom2.Namespace $r12;
        org.jdom2.Element $r13;
        org.jdom2.DocType $r14;
        org.jdom2.CDATA $r15;
        org.jdom2.Text $r16;
        org.jdom2.Comment $r17;
        org.jdom2.EntityRef $r18;
        org.jdom2.ProcessingInstruction $r19;

        r0 := @this: org.jdom2.input.StAXStreamBuilder;

        $r1 := @parameter0: org.jdom2.JDOMFactory;

        $r2 := @parameter1: javax.xml.stream.XMLStreamReader;

        $r3 := @parameter2: org.jdom2.input.stax.StAXFilter;

        $i1 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 7 == $i1 goto label01;

        $r6 = new org.jdom2.JDOMException;

        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String)>("JDOM requires that XMLStreamReaders are at their beginning when being processed.");

        throw $r6;

     label01:
        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        $i1 = 0;

     label02:
        $z0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label54;

     label04:
        i0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int next()>();

     label05:
        if i0 == 8 goto label54;

        lookupswitch(i0)
        {
            case 1: goto label19;
            case 2: goto label16;
            case 3: goto label50;
            case 4: goto label38;
            case 5: goto label42;
            case 6: goto label38;
            case 7: goto label10;
            case 8: goto label13;
            case 9: goto label46;
            case 10: goto label06;
            case 11: goto label30;
            case 12: goto label34;
            default: goto label06;
        };

     label06:
        $r6 = new org.jdom2.JDOMException;

        $r7 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected XMLStream event ");

        $i1 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r8);

     label08:
        throw $r6;

     label09:
        r4 := @caughtexception;

        $r6 = new org.jdom2.JDOMException;

        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to process fragments from XMLStreamReader.", r4);

        throw $r6;

     label10:
        $r6 = new org.jdom2.JDOMException;

     label11:
        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Illegal state for XMLStreamReader. Cannot get XML Fragment for state START_DOCUMENT");

     label12:
        throw $r6;

     label13:
        $r6 = new org.jdom2.JDOMException;

     label14:
        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Illegal state for XMLStreamReader. Cannot get XML Fragment for state END_DOCUMENT");

     label15:
        throw $r6;

     label16:
        $r6 = new org.jdom2.JDOMException;

     label17:
        specialinvoke $r6.<org.jdom2.JDOMException: void <init>(java.lang.String)>("Illegal state for XMLStreamReader. Cannot get XML Fragment for state END_ELEMENT");

     label18:
        throw $r6;

     label19:
        $r9 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        $r8 = virtualinvoke $r9.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r10 = virtualinvoke $r9.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r11 = virtualinvoke $r9.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r12 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r10, $r11);

        $z0 = interfaceinvoke $r3.<org.jdom2.input.stax.StAXFilter: boolean includeElement(int,java.lang.String,org.jdom2.Namespace)>($i1, $r8, $r12);

     label20:
        if $z0 == 0 goto label23;

     label21:
        $r13 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Element processPrunableElement(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader,int,org.jdom2.input.stax.StAXFilter)>($r1, $r2, $i1, $r3);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r13);

     label22:
        goto label02;

     label23:
        i0 = $i1;

        $i1 = $i1 + 1;

     label24:
        if $i1 <= i0 goto label02;

     label25:
        $z0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

     label26:
        if $z0 == 0 goto label02;

     label27:
        $i2 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int next()>();

     label28:
        if $i2 != 1 goto label29;

        $i1 = $i1 + 1;

        goto label24;

     label29:
        if $i2 != 2 goto label24;

        $i1 = $i1 + -1;

        goto label24;

     label30:
        $z0 = interfaceinvoke $r3.<org.jdom2.input.stax.StAXFilter: boolean includeDocType()>();

     label31:
        if $z0 == 0 goto label02;

     label32:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r14 = staticinvoke <org.jdom2.input.stax.DTDParser: org.jdom2.DocType parse(java.lang.String,org.jdom2.JDOMFactory)>($r8, $r1);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r14);

     label33:
        goto label02;

     label34:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r8 = interfaceinvoke $r3.<org.jdom2.input.stax.StAXFilter: java.lang.String includeCDATA(int,java.lang.String)>($i1, $r8);

     label35:
        if $r8 == null goto label02;

     label36:
        $r15 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.CDATA cdata(java.lang.String)>($r8);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r15);

     label37:
        goto label02;

     label38:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r8 = interfaceinvoke $r3.<org.jdom2.input.stax.StAXFilter: java.lang.String includeText(int,java.lang.String)>($i1, $r8);

     label39:
        if $r8 == null goto label02;

     label40:
        $r16 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.Text text(java.lang.String)>($r8);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r16);

     label41:
        goto label02;

     label42:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r8 = interfaceinvoke $r3.<org.jdom2.input.stax.StAXFilter: java.lang.String includeComment(int,java.lang.String)>($i1, $r8);

     label43:
        if $r8 == null goto label02;

     label44:
        $r17 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.Comment comment(java.lang.String)>($r8);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r17);

     label45:
        goto label02;

     label46:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z0 = interfaceinvoke $r3.<org.jdom2.input.stax.StAXFilter: boolean includeEntityRef(int,java.lang.String)>($i1, $r8);

     label47:
        if $z0 == 0 goto label02;

     label48:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r18 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.EntityRef entityRef(java.lang.String)>($r8);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r18);

     label49:
        goto label02;

     label50:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $z0 = interfaceinvoke $r3.<org.jdom2.input.stax.StAXFilter: boolean includeProcessingInstruction(int,java.lang.String)>($i1, $r8);

     label51:
        if $z0 == 0 goto label02;

     label52:
        $r8 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r10 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        $r19 = interfaceinvoke $r1.<org.jdom2.JDOMFactory: org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)>($r8, $r10);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r19);

     label53:
        goto label02;

     label54:
        return r5;

        catch javax.xml.stream.XMLStreamException from label02 to label03 with label09;
        catch javax.xml.stream.XMLStreamException from label04 to label05 with label09;
        catch javax.xml.stream.XMLStreamException from label07 to label08 with label09;
        catch javax.xml.stream.XMLStreamException from label11 to label12 with label09;
        catch javax.xml.stream.XMLStreamException from label14 to label15 with label09;
        catch javax.xml.stream.XMLStreamException from label17 to label18 with label09;
        catch javax.xml.stream.XMLStreamException from label19 to label20 with label09;
        catch javax.xml.stream.XMLStreamException from label21 to label22 with label09;
        catch javax.xml.stream.XMLStreamException from label25 to label26 with label09;
        catch javax.xml.stream.XMLStreamException from label27 to label28 with label09;
        catch javax.xml.stream.XMLStreamException from label30 to label31 with label09;
        catch javax.xml.stream.XMLStreamException from label32 to label33 with label09;
        catch javax.xml.stream.XMLStreamException from label34 to label35 with label09;
        catch javax.xml.stream.XMLStreamException from label36 to label37 with label09;
        catch javax.xml.stream.XMLStreamException from label38 to label39 with label09;
        catch javax.xml.stream.XMLStreamException from label40 to label41 with label09;
        catch javax.xml.stream.XMLStreamException from label42 to label43 with label09;
        catch javax.xml.stream.XMLStreamException from label44 to label45 with label09;
        catch javax.xml.stream.XMLStreamException from label46 to label47 with label09;
        catch javax.xml.stream.XMLStreamException from label48 to label49 with label09;
        catch javax.xml.stream.XMLStreamException from label50 to label51 with label09;
        catch javax.xml.stream.XMLStreamException from label52 to label53 with label09;
    }
    private static final org.jdom2.Element processPrunableElement(org.jdom2.JDOMFactory, javax.xml.stream.XMLStreamReader, int, org.jdom2.input.stax.StAXFilter) throws javax.xml.stream.XMLStreamException, org.jdom2.JDOMException
    {
        org.jdom2.JDOMFactory $r0;
        javax.xml.stream.XMLStreamReader $r1;
        int $i0, i1, $i2, $i3;
        org.jdom2.input.stax.StAXFilter $r2;
        org.jdom2.JDOMException $r3;
        org.jdom2.Element $r4, r5, $r12;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.lang.String $r7, $r9, $r10;
        javax.xml.namespace.QName $r8;
        org.jdom2.Namespace $r11;
        org.jdom2.CDATA $r13;
        org.jdom2.Text $r14;
        org.jdom2.Comment $r15;
        org.jdom2.EntityRef $r16;
        org.jdom2.ProcessingInstruction $r17;

        $r0 := @parameter0: org.jdom2.JDOMFactory;

        $r1 := @parameter1: javax.xml.stream.XMLStreamReader;

        $i0 := @parameter2: int;

        $r2 := @parameter3: org.jdom2.input.stax.StAXFilter;

        $i2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 1 == $i2 goto label01;

        $r3 = new org.jdom2.JDOMException;

        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>("JDOM requires that the XMLStreamReader is at the START_ELEMENT state when retrieving an Element Fragment.");

        throw $r3;

     label01:
        $r4 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Element processElement(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r0, $r1);

        r5 = $r4;

        $i2 = $i0 + 1;

     label02:
        if $i2 <= $i0 goto label14;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label14;

        i1 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

        lookupswitch(i1)
        {
            case 1: goto label04;
            case 2: goto label08;
            case 3: goto label13;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label10;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label12;
            case 10: goto label03;
            case 11: goto label03;
            case 12: goto label09;
            default: goto label03;
        };

     label03:
        $r3 = new org.jdom2.JDOMException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected XMLStream event ");

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label04:
        $r8 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        $r7 = virtualinvoke $r8.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r9 = virtualinvoke $r8.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r10 = virtualinvoke $r8.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r11 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r9, $r10);

        $z0 = interfaceinvoke $r2.<org.jdom2.input.stax.StAXFilter: boolean pruneElement(int,java.lang.String,org.jdom2.Namespace)>($i2, $r7, $r11);

        if $z0 != 0 goto label05;

        $r12 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Element processElement(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r0, $r1);

        virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r12);

        r5 = $r12;

        $i2 = $i2 + 1;

        goto label02;

     label05:
        i1 = $i2;

        $i2 = $i2 + 1;

     label06:
        if $i2 <= i1 goto label02;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $i3 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

        if $i3 == 8 goto label02;

        if $i3 != 1 goto label07;

        $i2 = $i2 + 1;

        goto label06;

     label07:
        if $i3 != 2 goto label06;

        $i2 = $i2 + -1;

        goto label06;

     label08:
        r5 = virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element getParentElement()>();

        $i2 = $i2 + -1;

        goto label02;

     label09:
        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r7 = interfaceinvoke $r2.<org.jdom2.input.stax.StAXFilter: java.lang.String pruneCDATA(int,java.lang.String)>($i2, $r7);

        if $r7 == null goto label02;

        $r13 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.CDATA cdata(java.lang.String)>($r7);

        virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r13);

        goto label02;

     label10:
        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r7 = interfaceinvoke $r2.<org.jdom2.input.stax.StAXFilter: java.lang.String pruneText(int,java.lang.String)>($i2, $r7);

        if $r7 == null goto label02;

        $r14 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Text text(java.lang.String)>($r7);

        virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r14);

        goto label02;

     label11:
        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r7 = interfaceinvoke $r2.<org.jdom2.input.stax.StAXFilter: java.lang.String pruneComment(int,java.lang.String)>($i2, $r7);

        if $r7 == null goto label02;

        $r15 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.Comment comment(java.lang.String)>($r7);

        virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r15);

        goto label02;

     label12:
        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $z0 = interfaceinvoke $r2.<org.jdom2.input.stax.StAXFilter: boolean pruneEntityRef(int,java.lang.String)>($i2, $r7);

        if $z0 != 0 goto label02;

        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r16 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.EntityRef entityRef(java.lang.String)>($r7);

        virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r16);

        goto label02;

     label13:
        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $z0 = interfaceinvoke $r2.<org.jdom2.input.stax.StAXFilter: boolean pruneProcessingInstruction(int,java.lang.String)>($i2, $r7);

        if $z0 != 0 goto label02;

        $r7 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r9 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        $r17 = interfaceinvoke $r0.<org.jdom2.JDOMFactory: org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)>($r7, $r9);

        virtualinvoke r5.<org.jdom2.Element: org.jdom2.Element addContent(org.jdom2.Content)>($r17);

        goto label02;

     label14:
        return $r4;
    }
    public org.jdom2.Document build(javax.xml.stream.XMLStreamReader) throws org.jdom2.JDOMException
    {
        org.jdom2.input.StAXStreamBuilder r0;
        javax.xml.stream.XMLStreamReader $r1;
        org.jdom2.Document $r2;
        org.jdom2.JDOMFactory $r3;

        r0 := @this: org.jdom2.input.StAXStreamBuilder;

        $r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r3 = r0.<org.jdom2.input.StAXStreamBuilder: org.jdom2.JDOMFactory builderfactory>;

        $r2 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Document process(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r3, $r1);

        return $r2;
    }
    public java.util.List buildFragments(javax.xml.stream.XMLStreamReader, org.jdom2.input.stax.StAXFilter) throws org.jdom2.JDOMException
    {
        org.jdom2.input.StAXStreamBuilder r0;
        javax.xml.stream.XMLStreamReader $r1;
        org.jdom2.input.stax.StAXFilter $r2;
        java.util.List $r3;
        org.jdom2.JDOMFactory $r4;

        r0 := @this: org.jdom2.input.StAXStreamBuilder;

        $r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r2 := @parameter1: org.jdom2.input.stax.StAXFilter;

        $r4 = r0.<org.jdom2.input.StAXStreamBuilder: org.jdom2.JDOMFactory builderfactory>;

        $r3 = specialinvoke r0.<org.jdom2.input.StAXStreamBuilder: java.util.List processFragments(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader,org.jdom2.input.stax.StAXFilter)>($r4, $r1, $r2);

        return $r3;
    }
    public org.jdom2.Content fragment(javax.xml.stream.XMLStreamReader) throws org.jdom2.JDOMException
    {
        org.jdom2.input.StAXStreamBuilder r0;
        javax.xml.stream.XMLStreamReader $r1;
        org.jdom2.Content $r2;
        org.jdom2.JDOMFactory $r3;

        r0 := @this: org.jdom2.input.StAXStreamBuilder;

        $r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r3 = r0.<org.jdom2.input.StAXStreamBuilder: org.jdom2.JDOMFactory builderfactory>;

        $r2 = staticinvoke <org.jdom2.input.StAXStreamBuilder: org.jdom2.Content processFragment(org.jdom2.JDOMFactory,javax.xml.stream.XMLStreamReader)>($r3, $r1);

        return $r2;
    }
    public org.jdom2.JDOMFactory getFactory()
    {
        org.jdom2.input.StAXStreamBuilder r0;
        org.jdom2.JDOMFactory r1;

        r0 := @this: org.jdom2.input.StAXStreamBuilder;

        r1 = r0.<org.jdom2.input.StAXStreamBuilder: org.jdom2.JDOMFactory builderfactory>;

        return r1;
    }
    public void setFactory(org.jdom2.JDOMFactory)
    {
        org.jdom2.input.StAXStreamBuilder r0;
        org.jdom2.JDOMFactory $r1;

        r0 := @this: org.jdom2.input.StAXStreamBuilder;

        $r1 := @parameter0: org.jdom2.JDOMFactory;

        r0.<org.jdom2.input.StAXStreamBuilder: org.jdom2.JDOMFactory builderfactory> = $r1;

        return;
    }
