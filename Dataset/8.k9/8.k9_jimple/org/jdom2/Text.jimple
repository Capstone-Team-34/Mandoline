org.jdom2.Text extends org.jdom2.Content
static final java.lang.String EMPTY_STRING
private static final long serialVersionUID
protected java.lang.String value
    protected void <init>()
    {
        org.jdom2.Text r0;
        org.jdom2.Content$CType $r1;

        r0 := @this: org.jdom2.Text;

        $r1 = <org.jdom2.Content$CType: org.jdom2.Content$CType Text>;

        specialinvoke r0.<org.jdom2.Text: void <init>(org.jdom2.Content$CType)>($r1);

        return;
    }
    public void <init>(java.lang.String)
    {
        org.jdom2.Text r0;
        java.lang.String $r1;
        org.jdom2.Content$CType $r2;

        r0 := @this: org.jdom2.Text;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.jdom2.Content$CType: org.jdom2.Content$CType Text>;

        specialinvoke r0.<org.jdom2.Text: void <init>(org.jdom2.Content$CType)>($r2);

        virtualinvoke r0.<org.jdom2.Text: org.jdom2.Text setText(java.lang.String)>($r1);

        return;
    }
    protected void <init>(org.jdom2.Content$CType)
    {
        org.jdom2.Text r0;
        org.jdom2.Content$CType $r1;

        r0 := @this: org.jdom2.Text;

        $r1 := @parameter0: org.jdom2.Content$CType;

        specialinvoke r0.<org.jdom2.Content: void <init>(org.jdom2.Content$CType)>($r1);

        return;
    }
    public static java.lang.String normalizeString(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return "";

     label1:
        $r0 = staticinvoke <org.jdom2.output.Format: java.lang.String compact(java.lang.String)>($r0);

        return $r0;
    }
    public void append(java.lang.String)
    {
        org.jdom2.Text r0;
        java.lang.String $r1, $r2;
        org.jdom2.IllegalDataException $r3;
        int $i0;
        java.lang.StringBuilder $r4;

        r0 := @this: org.jdom2.Text;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkCharacterData(java.lang.String)>($r1);

        if $r2 == null goto label2;

        $r3 = new org.jdom2.IllegalDataException;

        specialinvoke $r3.<org.jdom2.IllegalDataException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "character content", $r2);

        throw $r3;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.jdom2.Text: java.lang.String value>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.jdom2.Text: java.lang.String value> = $r1;

     label3:
        return;
    }
    public void append(org.jdom2.Text)
    {
        org.jdom2.Text r0, $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.jdom2.Text;

        $r1 := @parameter0: org.jdom2.Text;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.jdom2.Text: java.lang.String value>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<org.jdom2.Text: java.lang.String getText()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.jdom2.Text: java.lang.String value> = $r3;

        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.Text r0;

        r0 := @this: org.jdom2.Text;

        r0 = virtualinvoke r0.<org.jdom2.Text: org.jdom2.Text clone()>();

        return r0;
    }
    public volatile org.jdom2.CloneBase clone()
    {
        org.jdom2.Text r0;

        r0 := @this: org.jdom2.Text;

        r0 = virtualinvoke r0.<org.jdom2.Text: org.jdom2.Text clone()>();

        return r0;
    }
    public volatile org.jdom2.Content clone()
    {
        org.jdom2.Text r0;

        r0 := @this: org.jdom2.Text;

        r0 = virtualinvoke r0.<org.jdom2.Text: org.jdom2.Text clone()>();

        return r0;
    }
    public org.jdom2.Text clone()
    {
        org.jdom2.Text r0, r3;
        java.lang.String $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.Text;

        $r2 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content clone()>();

        r3 = (org.jdom2.Text) $r2;

        $r1 = r0.<org.jdom2.Text: java.lang.String value>;

        r3.<org.jdom2.Text: java.lang.String value> = $r1;

        return r3;
    }
    public volatile org.jdom2.Content detach()
    {
        org.jdom2.Text r0;

        r0 := @this: org.jdom2.Text;

        r0 = virtualinvoke r0.<org.jdom2.Text: org.jdom2.Text detach()>();

        return r0;
    }
    public org.jdom2.Text detach()
    {
        org.jdom2.Text r0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.Text;

        $r1 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content detach()>();

        r0 = (org.jdom2.Text) $r1;

        return r0;
    }
    public org.jdom2.Element getParent()
    {
        org.jdom2.Text r0;
        org.jdom2.Parent $r1;
        org.jdom2.Element $r2;

        r0 := @this: org.jdom2.Text;

        $r1 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Parent getParent()>();

        $r2 = (org.jdom2.Element) $r1;

        return $r2;
    }
    public volatile org.jdom2.Parent getParent()
    {
        org.jdom2.Text r0;
        org.jdom2.Element $r1;

        r0 := @this: org.jdom2.Text;

        $r1 = virtualinvoke r0.<org.jdom2.Text: org.jdom2.Element getParent()>();

        return $r1;
    }
    public java.lang.String getText()
    {
        org.jdom2.Text r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Text;

        r1 = r0.<org.jdom2.Text: java.lang.String value>;

        return r1;
    }
    public java.lang.String getTextNormalize()
    {
        org.jdom2.Text r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Text;

        $r1 = virtualinvoke r0.<org.jdom2.Text: java.lang.String getText()>();

        $r1 = staticinvoke <org.jdom2.Text: java.lang.String normalizeString(java.lang.String)>($r1);

        return $r1;
    }
    public java.lang.String getTextTrim()
    {
        org.jdom2.Text r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Text;

        $r1 = virtualinvoke r0.<org.jdom2.Text: java.lang.String getText()>();

        $r1 = staticinvoke <org.jdom2.output.Format: java.lang.String trimBoth(java.lang.String)>($r1);

        return $r1;
    }
    public java.lang.String getValue()
    {
        org.jdom2.Text r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Text;

        r1 = r0.<org.jdom2.Text: java.lang.String value>;

        return r1;
    }
    protected volatile org.jdom2.Content setParent(org.jdom2.Parent)
    {
        org.jdom2.Text r0;
        org.jdom2.Parent $r1;

        r0 := @this: org.jdom2.Text;

        $r1 := @parameter0: org.jdom2.Parent;

        r0 = virtualinvoke r0.<org.jdom2.Text: org.jdom2.Text setParent(org.jdom2.Parent)>($r1);

        return r0;
    }
    protected org.jdom2.Text setParent(org.jdom2.Parent)
    {
        org.jdom2.Text r0;
        org.jdom2.Parent $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.Text;

        $r1 := @parameter0: org.jdom2.Parent;

        $r2 = specialinvoke r0.<org.jdom2.Content: org.jdom2.Content setParent(org.jdom2.Parent)>($r1);

        r0 = (org.jdom2.Text) $r2;

        return r0;
    }
    public org.jdom2.Text setText(java.lang.String)
    {
        org.jdom2.Text r0;
        java.lang.String $r1, $r2;
        org.jdom2.IllegalDataException $r3;

        r0 := @this: org.jdom2.Text;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        r0.<org.jdom2.Text: java.lang.String value> = "";

        return r0;

     label1:
        $r2 = staticinvoke <org.jdom2.Verifier: java.lang.String checkCharacterData(java.lang.String)>($r1);

        if $r2 == null goto label2;

        $r3 = new org.jdom2.IllegalDataException;

        specialinvoke $r3.<org.jdom2.IllegalDataException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "character content", $r2);

        throw $r3;

     label2:
        r0.<org.jdom2.Text: java.lang.String value> = $r1;

        return r0;
    }
    public java.lang.String toString()
    {
        org.jdom2.Text r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.Text;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(64);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Text: ");

        $r2 = virtualinvoke r0.<org.jdom2.Text: java.lang.String getText()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
