org.jdom2.ContentList extends java.util.AbstractList implements java.util.RandomAccess
private static final int INITIAL_ARRAY_SIZE
private transient int dataModiCount
private org.jdom2.Content[] elementData
private final org.jdom2.Parent parent
private int size
private transient int sizeModCount
    void <init>(org.jdom2.Parent)
    {
        org.jdom2.ContentList r0;
        org.jdom2.Parent $r1;

        r0 := @this: org.jdom2.ContentList;

        $r1 := @parameter0: org.jdom2.Parent;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData> = null;

        r0.<org.jdom2.ContentList: int sizeModCount> = -2147483648;

        r0.<org.jdom2.ContentList: int dataModiCount> = -2147483648;

        r0.<org.jdom2.ContentList: org.jdom2.Parent parent> = $r1;

        return;
    }
    static int access$100(org.jdom2.ContentList)
    {
        org.jdom2.ContentList $r0;
        int $i0;

        $r0 := @parameter0: org.jdom2.ContentList;

        $i0 = specialinvoke $r0.<org.jdom2.ContentList: int getModCount()>();

        return $i0;
    }
    static int access$200(org.jdom2.ContentList)
    {
        org.jdom2.ContentList $r0;
        int i0;

        $r0 := @parameter0: org.jdom2.ContentList;

        i0 = $r0.<org.jdom2.ContentList: int size>;

        return i0;
    }
    static org.jdom2.Content[] access$300(org.jdom2.ContentList)
    {
        org.jdom2.ContentList $r0;
        org.jdom2.Content[] r1;

        $r0 := @parameter0: org.jdom2.ContentList;

        r1 = $r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        return r1;
    }
    static void access$400(org.jdom2.ContentList, int, boolean)
    {
        org.jdom2.ContentList $r0;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: org.jdom2.ContentList;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<org.jdom2.ContentList: void checkIndex(int,boolean)>($i0, $z0);

        return;
    }
    static int access$500(org.jdom2.ContentList)
    {
        org.jdom2.ContentList $r0;
        int $i0;

        $r0 := @parameter0: org.jdom2.ContentList;

        $i0 = specialinvoke $r0.<org.jdom2.ContentList: int getDataModCount()>();

        return $i0;
    }
    static void access$600(org.jdom2.ContentList, int, int)
    {
        org.jdom2.ContentList $r0;
        int $i0, $i1;

        $r0 := @parameter0: org.jdom2.ContentList;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<org.jdom2.ContentList: void setModCount(int,int)>($i0, $i1);

        return;
    }
    static void access$700(org.jdom2.ContentList, int[])
    {
        org.jdom2.ContentList $r0;
        int[] $r1;

        $r0 := @parameter0: org.jdom2.ContentList;

        $r1 := @parameter1: int[];

        specialinvoke $r0.<org.jdom2.ContentList: void sortInPlace(int[])>($r1);

        return;
    }
    private final int binarySearch(int[], int, int, java.util.Comparator)
    {
        org.jdom2.ContentList r0;
        int[] $r1;
        int $i0, $i1, i2, $i3;
        java.util.Comparator r2;
        org.jdom2.Content r3, $r5;
        org.jdom2.Content[] $r4;

        r0 := @this: org.jdom2.ContentList;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 := @parameter3: java.util.Comparator;

        i2 = 0;

        $i0 = $i0 + -1;

        $r4 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        r3 = $r4[$i1];

     label1:
        if i2 > $i0 goto label6;

        $i1 = i2 + $i0;

        $i1 = $i1 >>> 1;

        $r4 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i3 = $r1[$i1];

        $r5 = $r4[$i3];

        $i3 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r5);

        if $i3 != 0 goto label4;

     label2:
        if $i3 != 0 goto label3;

        if $i1 >= $i0 goto label3;

        $r4 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        i2 = $i1 + 1;

        i2 = $r1[i2];

        $r5 = $r4[i2];

        i2 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r5);

        if i2 != 0 goto label3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i1 + 1;

        return $i0;

     label4:
        if $i3 >= 0 goto label5;

        $i0 = $i1 + -1;

        goto label1;

     label5:
        i2 = $i1 + 1;

        goto label1;

     label6:
        return i2;
    }
    private final void checkIndex(int, boolean)
    {
        org.jdom2.ContentList r0;
        int $i0, $i1;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label3;

        $i1 = r0.<org.jdom2.ContentList: int size>;

        $i1 = $i1 + -1;

     label1:
        if $i0 < 0 goto label2;

        if $i0 <= $i1 goto label4;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Size: ");

        $i0 = r0.<org.jdom2.ContentList: int size>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $i1 = r0.<org.jdom2.ContentList: int size>;

        goto label1;

     label4:
        return;
    }
    private final void checkPreConditions(org.jdom2.Content, int, boolean)
    {
        org.jdom2.ContentList r0;
        int $i0;
        boolean $z0;
        org.jdom2.Content r1;
        java.lang.NullPointerException $r2;
        org.jdom2.Parent $r3;
        org.jdom2.IllegalAddException $r4;
        org.jdom2.Element r5, $r8;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.jdom2.ContentList;

        r1 := @parameter0: org.jdom2.Content;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot add null object");

        throw $r2;

     label1:
        specialinvoke r0.<org.jdom2.ContentList: void checkIndex(int,boolean)>($i0, $z0);

        $r3 = virtualinvoke r1.<org.jdom2.Content: org.jdom2.Parent getParent()>();

        if $r3 == null goto label3;

        $r3 = virtualinvoke r1.<org.jdom2.Content: org.jdom2.Parent getParent()>();

        $z0 = $r3 instanceof org.jdom2.Document;

        if $z0 == 0 goto label2;

        $r4 = new org.jdom2.IllegalAddException;

        r5 = (org.jdom2.Element) r1;

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(org.jdom2.Element,java.lang.String)>(r5, "The Content already has an existing parent document");

        throw $r4;

     label2:
        $r4 = new org.jdom2.IllegalAddException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Content already has an existing parent \"");

        r5 = (org.jdom2.Element) $r3;

        $r7 = virtualinvoke r5.<org.jdom2.Element: java.lang.String getQualifiedName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label3:
        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        if r1 != $r3 goto label4;

        $r4 = new org.jdom2.IllegalAddException;

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("The Element cannot be added to itself");

        throw $r4;

     label4:
        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        $z0 = $r3 instanceof org.jdom2.Element;

        if $z0 == 0 goto label5;

        $z0 = r1 instanceof org.jdom2.Element;

        if $z0 == 0 goto label5;

        r5 = (org.jdom2.Element) r1;

        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        $r8 = (org.jdom2.Element) $r3;

        $z0 = virtualinvoke r5.<org.jdom2.Element: boolean isAncestor(org.jdom2.Element)>($r8);

        if $z0 == 0 goto label5;

        $r4 = new org.jdom2.IllegalAddException;

        specialinvoke $r4.<org.jdom2.IllegalAddException: void <init>(java.lang.String)>("The Element cannot be added as a descendent of itself");

        throw $r4;

     label5:
        return;
    }
    private final int getDataModCount()
    {
        org.jdom2.ContentList r0;
        int i0;

        r0 := @this: org.jdom2.ContentList;

        i0 = r0.<org.jdom2.ContentList: int dataModiCount>;

        return i0;
    }
    private final int getModCount()
    {
        org.jdom2.ContentList r0;
        int i0;

        r0 := @this: org.jdom2.ContentList;

        i0 = r0.<org.jdom2.ContentList: int sizeModCount>;

        return i0;
    }
    private final void incDataModOnly()
    {
        org.jdom2.ContentList r0;
        int $i0;

        r0 := @this: org.jdom2.ContentList;

        $i0 = r0.<org.jdom2.ContentList: int dataModiCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.ContentList: int dataModiCount> = $i0;

        return;
    }
    private final void incModCount()
    {
        org.jdom2.ContentList r0;
        int $i0;

        r0 := @this: org.jdom2.ContentList;

        $i0 = r0.<org.jdom2.ContentList: int dataModiCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.ContentList: int dataModiCount> = $i0;

        $i0 = r0.<org.jdom2.ContentList: int sizeModCount>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.ContentList: int sizeModCount> = $i0;

        return;
    }
    private static void removeParent(org.jdom2.Content)
    {
        org.jdom2.Content $r0;

        $r0 := @parameter0: org.jdom2.Content;

        virtualinvoke $r0.<org.jdom2.Content: org.jdom2.Content setParent(org.jdom2.Parent)>(null);

        return;
    }
    private final void setModCount(int, int)
    {
        org.jdom2.ContentList r0;
        int $i0, $i1;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<org.jdom2.ContentList: int sizeModCount> = $i0;

        r0.<org.jdom2.ContentList: int dataModiCount> = $i1;

        return;
    }
    private void sortInPlace(int[])
    {
        org.jdom2.ContentList r0;
        int[] $r1, $r4;
        org.jdom2.Content[] r2, $r5;
        org.jdom2.Content $r3;
        int $i0, $i1;

        r0 := @this: org.jdom2.ContentList;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        $r4 = staticinvoke <org.jdom2.internal.ArrayCopy: int[] copyOf(int[],int)>($r1, $i0);

        staticinvoke <java.util.Arrays: void sort(int[])>($r4);

        $i0 = lengthof $r4;

        r2 = newarray (org.jdom2.Content)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label2;

        $r5 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i1 = $r1[$i0];

        $r3 = $r5[$i1];

        r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r5 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i1 = $r4[$i0];

        $r3 = r2[$i0];

        $r5[$i1] = $r3;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }
    public volatile void add(int, java.lang.Object)
    {
        org.jdom2.ContentList r0;
        int $i0;
        java.lang.Object $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = (org.jdom2.Content) $r1;

        virtualinvoke r0.<org.jdom2.ContentList: void add(int,org.jdom2.Content)>($i0, $r2);

        return;
    }
    public void add(int, org.jdom2.Content)
    {
        org.jdom2.ContentList r0;
        int $i0, $i1, $i2;
        org.jdom2.Content $r1;
        org.jdom2.Parent $r2;
        org.jdom2.Content[] $r3, $r4;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        specialinvoke r0.<org.jdom2.ContentList: void checkPreConditions(org.jdom2.Content,int,boolean)>($r1, $i0, 0);

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        interfaceinvoke $r2.<org.jdom2.Parent: void canContainContent(org.jdom2.Content,int,boolean)>($r1, $i0, 0);

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        virtualinvoke $r1.<org.jdom2.Content: org.jdom2.Content setParent(org.jdom2.Parent)>($r2);

        $i1 = r0.<org.jdom2.ContentList: int size>;

        $i1 = $i1 + 1;

        virtualinvoke r0.<org.jdom2.ContentList: void ensureCapacity(int)>($i1);

        $i1 = r0.<org.jdom2.ContentList: int size>;

        if $i0 != $i1 goto label2;

        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i0 = r0.<org.jdom2.ContentList: int size>;

        $i1 = $i0 + 1;

        r0.<org.jdom2.ContentList: int size> = $i1;

        $r3[$i0] = $r1;

     label1:
        specialinvoke r0.<org.jdom2.ContentList: void incModCount()>();

        return;

     label2:
        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $r4 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i1 = $i0 + 1;

        $i2 = r0.<org.jdom2.ContentList: int size>;

        $i2 = $i2 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i0, $r4, $i1, $i2);

        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $r3[$i0] = $r1;

        $i0 = r0.<org.jdom2.ContentList: int size>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.ContentList: int size> = $i0;

        goto label1;
    }
    public boolean addAll(int, java.util.Collection)
    {
        org.jdom2.ContentList r0;
        int $i0, $i1, $i2, i3, $i4;
        java.util.Collection r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        org.jdom2.Content $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        if r1 != null goto label01;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can not add a null collection to the ContentList");

        throw $r2;

     label01:
        specialinvoke r0.<org.jdom2.ContentList: void checkIndex(int,boolean)>($i0, 0);

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        return 0;

     label02:
        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i1 != 1 goto label03;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.jdom2.Content) $r4;

        virtualinvoke r0.<org.jdom2.ContentList: void add(int,org.jdom2.Content)>($i0, $r5);

        return 1;

     label03:
        $i2 = virtualinvoke r0.<org.jdom2.ContentList: int size()>();

        $i1 = $i2 + $i1;

        virtualinvoke r0.<org.jdom2.ContentList: void ensureCapacity(int)>($i1);

        $i1 = specialinvoke r0.<org.jdom2.ContentList: int getModCount()>();

        $i2 = specialinvoke r0.<org.jdom2.ContentList: int getDataModCount()>();

        i3 = 0;

     label04:
        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

     label06:
        if $z0 == 0 goto label11;

     label07:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.jdom2.Content) $r4;

     label08:
        $i4 = $i0 + i3;

     label09:
        virtualinvoke r0.<org.jdom2.ContentList: void add(int,org.jdom2.Content)>($i4, $r5);

     label10:
        i3 = i3 + 1;

        goto label05;

     label11:
        goto label12;

     label12:
        return 1;

     label13:
        $r6 := @caughtexception;

     label14:
        i3 = i3 + -1;

        if i3 < 0 goto label15;

        $i4 = $i0 + i3;

        virtualinvoke r0.<org.jdom2.ContentList: org.jdom2.Content remove(int)>($i4);

        goto label14;

     label15:
        specialinvoke r0.<org.jdom2.ContentList: void setModCount(int,int)>($i1, $i2);

        throw $r6;

        catch java.lang.Throwable from label04 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
    }
    public boolean addAll(java.util.Collection)
    {
        org.jdom2.ContentList r0;
        java.util.Collection r1;
        boolean $z0;
        int $i0;

        r0 := @this: org.jdom2.ContentList;

        r1 := @parameter0: java.util.Collection;

        $i0 = r0.<org.jdom2.ContentList: int size>;

        $z0 = virtualinvoke r0.<org.jdom2.ContentList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return $z0;
    }
    public void clear()
    {
        org.jdom2.ContentList r0;
        org.jdom2.Content r1;
        org.jdom2.Content[] $r2;
        int i0, $i1;

        r0 := @this: org.jdom2.ContentList;

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        if $r2 == null goto label3;

        i0 = 0;

     label1:
        $i1 = r0.<org.jdom2.ContentList: int size>;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        r1 = $r2[i0];

        staticinvoke <org.jdom2.ContentList: void removeParent(org.jdom2.Content)>(r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData> = null;

        r0.<org.jdom2.ContentList: int size> = 0;

     label3:
        specialinvoke r0.<org.jdom2.ContentList: void incModCount()>();

        return;
    }
    void clearAndSet(java.util.Collection)
    {
        org.jdom2.ContentList r0;
        java.util.Collection r1;
        org.jdom2.Content[] r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        org.jdom2.Content $r3;
        org.jdom2.Parent $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.jdom2.ContentList;

        r1 := @parameter0: java.util.Collection;

        if r1 == null goto label01;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        virtualinvoke r0.<org.jdom2.ContentList: void clear()>();

        return;

     label02:
        r2 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        i0 = r0.<org.jdom2.ContentList: int size>;

        $i2 = specialinvoke r0.<org.jdom2.ContentList: int getModCount()>();

        $i3 = specialinvoke r0.<org.jdom2.ContentList: int getDataModCount()>();

     label03:
        $i1 = r0.<org.jdom2.ContentList: int size>;

        if $i1 <= 0 goto label04;

        $i1 = r0.<org.jdom2.ContentList: int size>;

        $i1 = $i1 + -1;

        r0.<org.jdom2.ContentList: int size> = $i1;

        $r3 = r2[$i1];

        virtualinvoke $r3.<org.jdom2.Content: org.jdom2.Content setParent(org.jdom2.Parent)>(null);

        goto label03;

     label04:
        r0.<org.jdom2.ContentList: int size> = 0;

        r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData> = null;

     label05:
        virtualinvoke r0.<org.jdom2.ContentList: boolean addAll(int,java.util.Collection)>(0, r1);

     label06:
        goto label10;

     label07:
        $r5 := @caughtexception;

        r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData> = r2;

     label08:
        $i1 = r0.<org.jdom2.ContentList: int size>;

        if $i1 >= i0 goto label09;

        r2 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i4 = r0.<org.jdom2.ContentList: int size>;

        $i1 = $i4 + 1;

        r0.<org.jdom2.ContentList: int size> = $i1;

        $r3 = r2[$i4];

        $r4 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        virtualinvoke $r3.<org.jdom2.Content: org.jdom2.Content setParent(org.jdom2.Parent)>($r4);

        goto label08;

     label09:
        specialinvoke r0.<org.jdom2.ContentList: void setModCount(int,int)>($i2, $i3);

        throw $r5;

     label10:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
    }
    void ensureCapacity(int)
    {
        org.jdom2.ContentList r0;
        int i0, i1;
        org.jdom2.Content[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.jdom2.ContentList;

        i1 := @parameter0: int;

        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        if $r1 != null goto label1;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 4);

        $r1 = newarray (org.jdom2.Content)[i1];

        r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData> = $r1;

        return;

     label1:
        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        i0 = lengthof $r1;

        if i1 < i0 goto label4;

        i0 = r0.<org.jdom2.ContentList: int size>;

        i0 = i0 * 3;

        i0 = i0 / 2;

        i0 = i0 + 1;

        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        if i0 >= i1 goto label3;

     label2:
        $r2 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, i1);

        $r1 = (org.jdom2.Content[]) $r2;

        r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData> = $r1;

        return;

     label3:
        i1 = i0;

        goto label2;

     label4:
        return;
    }
    public volatile java.lang.Object get(int)
    {
        org.jdom2.ContentList r0;
        int $i0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdom2.ContentList: org.jdom2.Content get(int)>($i0);

        return $r1;
    }
    public org.jdom2.Content get(int)
    {
        org.jdom2.ContentList r0;
        int $i0;
        org.jdom2.Content[] $r1;
        org.jdom2.Content $r2;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.jdom2.ContentList: void checkIndex(int,boolean)>($i0, 1);

        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $r2 = $r1[$i0];

        return $r2;
    }
    java.util.List getView(org.jdom2.filter.Filter)
    {
        org.jdom2.ContentList r0;
        org.jdom2.filter.Filter r1;
        org.jdom2.ContentList$FilterList $r2;

        r0 := @this: org.jdom2.ContentList;

        r1 := @parameter0: org.jdom2.filter.Filter;

        $r2 = new org.jdom2.ContentList$FilterList;

        specialinvoke $r2.<org.jdom2.ContentList$FilterList: void <init>(org.jdom2.ContentList,org.jdom2.filter.Filter)>(r0, r1);

        return $r2;
    }
    int indexOfDocType()
    {
        org.jdom2.ContentList r0;
        org.jdom2.Content[] $r1;
        int i0, $i1;
        org.jdom2.Content $r2;
        boolean $z0;

        r0 := @this: org.jdom2.ContentList;

        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        if $r1 == null goto label3;

        i0 = 0;

     label1:
        $i1 = r0.<org.jdom2.ContentList: int size>;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $r2 = $r1[i0];

        $z0 = $r2 instanceof org.jdom2.DocType;

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }
    int indexOfFirstElement()
    {
        org.jdom2.ContentList r0;
        org.jdom2.Content[] $r1;
        int i0, $i1;
        org.jdom2.Content $r2;
        boolean $z0;

        r0 := @this: org.jdom2.ContentList;

        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        if $r1 == null goto label3;

        i0 = 0;

     label1:
        $i1 = r0.<org.jdom2.ContentList: int size>;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $r2 = $r1[i0];

        $z0 = $r2 instanceof org.jdom2.Element;

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }
    public java.util.Iterator iterator()
    {
        org.jdom2.ContentList r0;
        org.jdom2.ContentList$CLIterator $r1;

        r0 := @this: org.jdom2.ContentList;

        $r1 = new org.jdom2.ContentList$CLIterator;

        specialinvoke $r1.<org.jdom2.ContentList$CLIterator: void <init>(org.jdom2.ContentList,org.jdom2.ContentList$1)>(r0, null);

        return $r1;
    }
    public java.util.ListIterator listIterator()
    {
        org.jdom2.ContentList r0;
        org.jdom2.ContentList$CLListIterator $r1;

        r0 := @this: org.jdom2.ContentList;

        $r1 = new org.jdom2.ContentList$CLListIterator;

        specialinvoke $r1.<org.jdom2.ContentList$CLListIterator: void <init>(org.jdom2.ContentList,int)>(r0, 0);

        return $r1;
    }
    public java.util.ListIterator listIterator(int)
    {
        org.jdom2.ContentList r0;
        int $i0;
        org.jdom2.ContentList$CLListIterator $r1;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $r1 = new org.jdom2.ContentList$CLListIterator;

        specialinvoke $r1.<org.jdom2.ContentList$CLListIterator: void <init>(org.jdom2.ContentList,int)>(r0, $i0);

        return $r1;
    }
    public volatile java.lang.Object remove(int)
    {
        org.jdom2.ContentList r0;
        int $i0;
        org.jdom2.Content $r1;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdom2.ContentList: org.jdom2.Content remove(int)>($i0);

        return $r1;
    }
    public org.jdom2.Content remove(int)
    {
        org.jdom2.ContentList r0;
        int $i0, $i1, $i2;
        org.jdom2.Content r1;
        org.jdom2.Content[] $r2, $r3;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.jdom2.ContentList: void checkIndex(int,boolean)>($i0, 1);

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        r1 = $r2[$i0];

        staticinvoke <org.jdom2.ContentList: void removeParent(org.jdom2.Content)>(r1);

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i1 = $i0 + 1;

        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i2 = r0.<org.jdom2.ContentList: int size>;

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, $i0, $i2);

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i0 = r0.<org.jdom2.ContentList: int size>;

        $i0 = $i0 + -1;

        r0.<org.jdom2.ContentList: int size> = $i0;

        $r2[$i0] = null;

        specialinvoke r0.<org.jdom2.ContentList: void incModCount()>();

        return r1;
    }
    public volatile java.lang.Object set(int, java.lang.Object)
    {
        org.jdom2.ContentList r0;
        int $i0;
        org.jdom2.Content $r1;
        java.lang.Object $r2;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $r2 := @parameter1: java.lang.Object;

        $r1 = (org.jdom2.Content) $r2;

        $r1 = virtualinvoke r0.<org.jdom2.ContentList: org.jdom2.Content set(int,org.jdom2.Content)>($i0, $r1);

        return $r1;
    }
    public org.jdom2.Content set(int, org.jdom2.Content)
    {
        org.jdom2.ContentList r0;
        int $i0;
        org.jdom2.Content $r1, r2;
        org.jdom2.Parent $r3;
        org.jdom2.Content[] $r4;

        r0 := @this: org.jdom2.ContentList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jdom2.Content;

        specialinvoke r0.<org.jdom2.ContentList: void checkPreConditions(org.jdom2.Content,int,boolean)>($r1, $i0, 1);

        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        interfaceinvoke $r3.<org.jdom2.Parent: void canContainContent(org.jdom2.Content,int,boolean)>($r1, $i0, 1);

        $r4 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        r2 = $r4[$i0];

        staticinvoke <org.jdom2.ContentList: void removeParent(org.jdom2.Content)>(r2);

        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        virtualinvoke $r1.<org.jdom2.Content: org.jdom2.Content setParent(org.jdom2.Parent)>($r3);

        $r4 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $r4[$i0] = $r1;

        specialinvoke r0.<org.jdom2.ContentList: void incDataModOnly()>();

        return r2;
    }
    public int size()
    {
        org.jdom2.ContentList r0;
        int i0;

        r0 := @this: org.jdom2.ContentList;

        i0 = r0.<org.jdom2.ContentList: int size>;

        return i0;
    }
    final void sort(java.util.Comparator)
    {
        org.jdom2.ContentList r0;
        java.util.Comparator r1;
        int[] r2;
        int i0, $i1, $i2, $i3, i4;

        r0 := @this: org.jdom2.ContentList;

        r1 := @parameter0: java.util.Comparator;

        i0 = r0.<org.jdom2.ContentList: int size>;

        r2 = newarray (int)[i0];

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $i3 = specialinvoke r0.<org.jdom2.ContentList: int binarySearch(int[],int,int,java.util.Comparator)>(r2, i4, i4, r1);

        if $i3 >= i4 goto label2;

        $i1 = $i3 + 1;

        $i2 = i4 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i3, r2, $i1, $i2);

     label2:
        r2[$i3] = i4;

        i4 = i4 + 1;

        goto label1;

     label3:
        specialinvoke r0.<org.jdom2.ContentList: void sortInPlace(int[])>(r2);

        return;
    }
    public java.lang.String toString()
    {
        org.jdom2.ContentList r0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.ContentList;

        $r1 = specialinvoke r0.<java.util.AbstractList: java.lang.String toString()>();

        return $r1;
    }
    final void uncheckedAddContent(org.jdom2.Content)
    {
        org.jdom2.ContentList r0;
        org.jdom2.Content $r1;
        int $i0, $i1;
        org.jdom2.Parent $r2;
        org.jdom2.Content[] $r3;

        r0 := @this: org.jdom2.ContentList;

        $r1 := @parameter0: org.jdom2.Content;

        $r2 = r0.<org.jdom2.ContentList: org.jdom2.Parent parent>;

        $r1.<org.jdom2.Content: org.jdom2.Parent parent> = $r2;

        $i0 = r0.<org.jdom2.ContentList: int size>;

        $i0 = $i0 + 1;

        virtualinvoke r0.<org.jdom2.ContentList: void ensureCapacity(int)>($i0);

        $r3 = r0.<org.jdom2.ContentList: org.jdom2.Content[] elementData>;

        $i0 = r0.<org.jdom2.ContentList: int size>;

        $i1 = $i0 + 1;

        r0.<org.jdom2.ContentList: int size> = $i1;

        $r3[$i0] = $r1;

        specialinvoke r0.<org.jdom2.ContentList: void incModCount()>();

        return;
    }
