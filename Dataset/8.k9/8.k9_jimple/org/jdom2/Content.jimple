org.jdom2.Content extends org.jdom2.CloneBase implements java.io.Serializable org.jdom2.NamespaceAware
private static final long serialVersionUID
protected final org.jdom2.Content$CType ctype
protected transient org.jdom2.Parent parent
    protected void <init>(org.jdom2.Content$CType)
    {
        org.jdom2.Content r0;
        org.jdom2.Content$CType $r1;

        r0 := @this: org.jdom2.Content;

        $r1 := @parameter0: org.jdom2.Content$CType;

        specialinvoke r0.<org.jdom2.CloneBase: void <init>()>();

        r0.<org.jdom2.Content: org.jdom2.Parent parent> = null;

        r0.<org.jdom2.Content: org.jdom2.Content$CType ctype> = $r1;

        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.Content r0;

        r0 := @this: org.jdom2.Content;

        r0 = virtualinvoke r0.<org.jdom2.Content: org.jdom2.Content clone()>();

        return r0;
    }
    public volatile org.jdom2.CloneBase clone()
    {
        org.jdom2.Content r0;

        r0 := @this: org.jdom2.Content;

        r0 = virtualinvoke r0.<org.jdom2.Content: org.jdom2.Content clone()>();

        return r0;
    }
    public org.jdom2.Content clone()
    {
        org.jdom2.Content r0;
        org.jdom2.CloneBase $r1;

        r0 := @this: org.jdom2.Content;

        $r1 = specialinvoke r0.<org.jdom2.CloneBase: org.jdom2.CloneBase clone()>();

        r0 = (org.jdom2.Content) $r1;

        r0.<org.jdom2.Content: org.jdom2.Parent parent> = null;

        return r0;
    }
    public org.jdom2.Content detach()
    {
        org.jdom2.Content r0;
        org.jdom2.Parent $r1;

        r0 := @this: org.jdom2.Content;

        $r1 = r0.<org.jdom2.Content: org.jdom2.Parent parent>;

        if $r1 == null goto label1;

        $r1 = r0.<org.jdom2.Content: org.jdom2.Parent parent>;

        interfaceinvoke $r1.<org.jdom2.Parent: boolean removeContent(org.jdom2.Content)>(r0);

     label1:
        return r0;
    }
    public final boolean equals(java.lang.Object)
    {
        org.jdom2.Content r0;
        java.lang.Object $r1;

        r0 := @this: org.jdom2.Content;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public final org.jdom2.Content$CType getCType()
    {
        org.jdom2.Content r0;
        org.jdom2.Content$CType r1;

        r0 := @this: org.jdom2.Content;

        r1 = r0.<org.jdom2.Content: org.jdom2.Content$CType ctype>;

        return r1;
    }
    public org.jdom2.Document getDocument()
    {
        org.jdom2.Content r0;
        org.jdom2.Document $r1;
        org.jdom2.Parent $r2;

        r0 := @this: org.jdom2.Content;

        $r2 = r0.<org.jdom2.Content: org.jdom2.Parent parent>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.jdom2.Content: org.jdom2.Parent parent>;

        $r1 = interfaceinvoke $r2.<org.jdom2.Parent: org.jdom2.Document getDocument()>();

        return $r1;
    }
    public java.util.List getNamespacesInScope()
    {
        org.jdom2.Content r0;
        org.jdom2.Element $r1;
        org.jdom2.Namespace $r2;
        java.util.List $r3;

        r0 := @this: org.jdom2.Content;

        $r1 = virtualinvoke r0.<org.jdom2.Content: org.jdom2.Element getParentElement()>();

        if $r1 != null goto label1;

        $r2 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        return $r3;

     label1:
        $r3 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getNamespacesInScope()>();

        return $r3;
    }
    public java.util.List getNamespacesInherited()
    {
        org.jdom2.Content r0;
        java.util.List $r1;

        r0 := @this: org.jdom2.Content;

        $r1 = virtualinvoke r0.<org.jdom2.Content: java.util.List getNamespacesInScope()>();

        return $r1;
    }
    public java.util.List getNamespacesIntroduced()
    {
        org.jdom2.Content r0;
        java.util.List $r1;

        r0 := @this: org.jdom2.Content;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }
    public org.jdom2.Parent getParent()
    {
        org.jdom2.Content r0;
        org.jdom2.Parent r1;

        r0 := @this: org.jdom2.Content;

        r1 = r0.<org.jdom2.Content: org.jdom2.Parent parent>;

        return r1;
    }
    public final org.jdom2.Element getParentElement()
    {
        org.jdom2.Content r0;
        org.jdom2.Parent $r1;
        boolean $z0;
        org.jdom2.Element $r2;

        r0 := @this: org.jdom2.Content;

        $r1 = virtualinvoke r0.<org.jdom2.Content: org.jdom2.Parent getParent()>();

        $z0 = $r1 instanceof org.jdom2.Element;

        if $z0 == 0 goto label2;

     label1:
        $r2 = (org.jdom2.Element) $r1;

        return $r2;

     label2:
        $r1 = null;

        goto label1;
    }
public abstract java.lang.String getValue() { 
// no body
} 
    public final int hashCode()
    {
        org.jdom2.Content r0;
        int $i0;

        r0 := @this: org.jdom2.Content;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }
    protected org.jdom2.Content setParent(org.jdom2.Parent)
    {
        org.jdom2.Content r0;
        org.jdom2.Parent $r1;

        r0 := @this: org.jdom2.Content;

        $r1 := @parameter0: org.jdom2.Parent;

        r0.<org.jdom2.Content: org.jdom2.Parent parent> = $r1;

        return r0;
    }
