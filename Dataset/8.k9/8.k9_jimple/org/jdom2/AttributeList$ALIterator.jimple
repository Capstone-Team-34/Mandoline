org.jdom2.AttributeList$ALIterator extends java.lang.Object implements java.util.Iterator
private boolean canremove
private int cursor
private int expect
final org.jdom2.AttributeList this$0
    private void <init>(org.jdom2.AttributeList)
    {
        org.jdom2.AttributeList$ALIterator r0;
        org.jdom2.AttributeList $r1;
        int $i0;

        r0 := @this: org.jdom2.AttributeList$ALIterator;

        $r1 := @parameter0: org.jdom2.AttributeList;

        r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.AttributeList$ALIterator: int expect> = -1;

        r0.<org.jdom2.AttributeList$ALIterator: int cursor> = 0;

        r0.<org.jdom2.AttributeList$ALIterator: boolean canremove> = 0;

        $i0 = staticinvoke <org.jdom2.AttributeList: int access$100(org.jdom2.AttributeList)>($r1);

        r0.<org.jdom2.AttributeList$ALIterator: int expect> = $i0;

        return;
    }
    void <init>(org.jdom2.AttributeList, org.jdom2.AttributeList$1)
    {
        org.jdom2.AttributeList$ALIterator r0;
        org.jdom2.AttributeList $r1;
        org.jdom2.AttributeList$1 $r2;

        r0 := @this: org.jdom2.AttributeList$ALIterator;

        $r1 := @parameter0: org.jdom2.AttributeList;

        $r2 := @parameter1: org.jdom2.AttributeList$1;

        specialinvoke r0.<org.jdom2.AttributeList$ALIterator: void <init>(org.jdom2.AttributeList)>($r1);

        return;
    }
    public boolean hasNext()
    {
        org.jdom2.AttributeList$ALIterator r0;
        int $i0, $i1;
        org.jdom2.AttributeList $r1;

        r0 := @this: org.jdom2.AttributeList$ALIterator;

        $i1 = r0.<org.jdom2.AttributeList$ALIterator: int cursor>;

        $r1 = r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0>;

        $i0 = staticinvoke <org.jdom2.AttributeList: int access$200(org.jdom2.AttributeList)>($r1);

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public volatile java.lang.Object next()
    {
        org.jdom2.AttributeList$ALIterator r0;
        org.jdom2.Attribute $r1;

        r0 := @this: org.jdom2.AttributeList$ALIterator;

        $r1 = virtualinvoke r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.Attribute next()>();

        return $r1;
    }
    public org.jdom2.Attribute next()
    {
        org.jdom2.AttributeList$ALIterator r0;
        int $i0, $i1;
        org.jdom2.AttributeList $r1;
        java.util.ConcurrentModificationException $r2;
        java.util.NoSuchElementException $r3;
        org.jdom2.Attribute[] $r4;
        org.jdom2.Attribute $r5;

        r0 := @this: org.jdom2.AttributeList$ALIterator;

        $r1 = r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0>;

        $i0 = staticinvoke <org.jdom2.AttributeList: int access$300(org.jdom2.AttributeList)>($r1);

        $i1 = r0.<org.jdom2.AttributeList$ALIterator: int expect>;

        if $i0 == $i1 goto label1;

        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>(java.lang.String)>("ContentList was modified outside of this Iterator");

        throw $r2;

     label1:
        $i0 = r0.<org.jdom2.AttributeList$ALIterator: int cursor>;

        $r1 = r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0>;

        $i1 = staticinvoke <org.jdom2.AttributeList: int access$200(org.jdom2.AttributeList)>($r1);

        if $i0 < $i1 goto label2;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Iterated beyond the end of the ContentList.");

        throw $r3;

     label2:
        r0.<org.jdom2.AttributeList$ALIterator: boolean canremove> = 1;

        $r1 = r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0>;

        $r4 = staticinvoke <org.jdom2.AttributeList: org.jdom2.Attribute[] access$400(org.jdom2.AttributeList)>($r1);

        $i1 = r0.<org.jdom2.AttributeList$ALIterator: int cursor>;

        $i0 = $i1 + 1;

        r0.<org.jdom2.AttributeList$ALIterator: int cursor> = $i0;

        $r5 = $r4[$i1];

        return $r5;
    }
    public void remove()
    {
        org.jdom2.AttributeList$ALIterator r0;
        org.jdom2.AttributeList $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.jdom2.AttributeList$ALIterator;

        $r1 = r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0>;

        $i0 = staticinvoke <org.jdom2.AttributeList: int access$500(org.jdom2.AttributeList)>($r1);

        $i1 = r0.<org.jdom2.AttributeList$ALIterator: int expect>;

        if $i0 == $i1 goto label1;

        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>(java.lang.String)>("ContentList was modified outside of this Iterator");

        throw $r2;

     label1:
        $z0 = r0.<org.jdom2.AttributeList$ALIterator: boolean canremove>;

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can only remove() content after a call to next()");

        throw $r3;

     label2:
        $r1 = r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0>;

        $i0 = r0.<org.jdom2.AttributeList$ALIterator: int cursor>;

        $i0 = $i0 + -1;

        r0.<org.jdom2.AttributeList$ALIterator: int cursor> = $i0;

        virtualinvoke $r1.<org.jdom2.AttributeList: org.jdom2.Attribute remove(int)>($i0);

        $r1 = r0.<org.jdom2.AttributeList$ALIterator: org.jdom2.AttributeList this$0>;

        $i0 = staticinvoke <org.jdom2.AttributeList: int access$600(org.jdom2.AttributeList)>($r1);

        r0.<org.jdom2.AttributeList$ALIterator: int expect> = $i0;

        r0.<org.jdom2.AttributeList$ALIterator: boolean canremove> = 0;

        return;
    }
