org.jdom2.adapters.AbstractDOMAdapter extends java.lang.Object implements org.jdom2.adapters.DOMAdapter
    public void <init>()
    {
        org.jdom2.adapters.AbstractDOMAdapter r0;

        r0 := @this: org.jdom2.adapters.AbstractDOMAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.w3c.dom.Document createDocument(org.jdom2.DocType) throws org.jdom2.JDOMException
    {
        org.jdom2.adapters.AbstractDOMAdapter r0;
        org.jdom2.DocType $r1;
        org.w3c.dom.Document $r2;
        org.w3c.dom.DOMImplementation $r3;
        java.lang.String $r4, $r5, $r6;
        org.w3c.dom.DocumentType $r7;
        org.w3c.dom.Element $r8;

        r0 := @this: org.jdom2.adapters.AbstractDOMAdapter;

        $r1 := @parameter0: org.jdom2.DocType;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.jdom2.adapters.AbstractDOMAdapter: org.w3c.dom.Document createDocument()>();

        return $r2;

     label1:
        $r2 = virtualinvoke r0.<org.jdom2.adapters.AbstractDOMAdapter: org.w3c.dom.Document createDocument()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>();

        $r4 = virtualinvoke $r1.<org.jdom2.DocType: java.lang.String getElementName()>();

        $r5 = virtualinvoke $r1.<org.jdom2.DocType: java.lang.String getPublicID()>();

        $r6 = virtualinvoke $r1.<org.jdom2.DocType: java.lang.String getSystemID()>();

        $r7 = interfaceinvoke $r3.<org.w3c.dom.DOMImplementation: org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6);

        $r4 = virtualinvoke $r1.<org.jdom2.DocType: java.lang.String getInternalSubset()>();

        virtualinvoke r0.<org.jdom2.adapters.AbstractDOMAdapter: void setInternalSubset(org.w3c.dom.DocumentType,java.lang.String)>($r7, $r4);

        $r4 = virtualinvoke $r1.<org.jdom2.DocType: java.lang.String getElementName()>();

        $r2 = interfaceinvoke $r3.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>("http://temporary", $r4, $r7);

        $r8 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        if $r8 == null goto label2;

        interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r8);

     label2:
        return $r2;
    }
    protected void setInternalSubset(org.w3c.dom.DocumentType, java.lang.String)
    {
        org.jdom2.adapters.AbstractDOMAdapter r0;
        org.w3c.dom.DocumentType $r1;
        java.lang.String $r2;
        java.lang.Class $r3;
        java.lang.Class[] $r4;
        java.lang.reflect.Method $r5;
        java.lang.Object[] $r6;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.NoSuchMethodException $r8;
        java.lang.SecurityException $r9;
        java.lang.IllegalAccessException $r10;

        r0 := @this: org.jdom2.adapters.AbstractDOMAdapter;

        $r1 := @parameter0: org.w3c.dom.DocumentType;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label11;

        if $r2 != null goto label01;

        return;

     label01:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljava/lang/String;";

     label03:
        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setInternalSubset", $r4);

     label04:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r2;

     label05:
        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r6);

     label06:
        return;

     label07:
        $r7 := @caughtexception;

        return;

     label08:
        $r8 := @caughtexception;

        return;

     label09:
        $r9 := @caughtexception;

        return;

     label10:
        $r10 := @caughtexception;

     label11:
        return;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label07;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label07;
        catch java.lang.IllegalAccessException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label03 to label04 with label10;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.SecurityException from label01 to label02 with label09;
        catch java.lang.SecurityException from label03 to label04 with label09;
        catch java.lang.SecurityException from label05 to label06 with label09;
        catch java.lang.NoSuchMethodException from label01 to label02 with label08;
        catch java.lang.NoSuchMethodException from label03 to label04 with label08;
        catch java.lang.NoSuchMethodException from label05 to label06 with label08;
    }
