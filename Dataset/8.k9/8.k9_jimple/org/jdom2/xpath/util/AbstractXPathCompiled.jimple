org.jdom2.xpath.util.AbstractXPathCompiled extends java.lang.Object implements org.jdom2.xpath.XPathExpression
private static final org.jdom2.xpath.util.AbstractXPathCompiled$NamespaceComparator NSSORT
private final org.jdom2.filter.Filter xfilter
private final java.util.Map xnamespaces
private final java.lang.String xquery
private java.util.Map xvariables
    static void <clinit>()
    {
        org.jdom2.xpath.util.AbstractXPathCompiled$NamespaceComparator $r0;

        $r0 = new org.jdom2.xpath.util.AbstractXPathCompiled$NamespaceComparator;

        specialinvoke $r0.<org.jdom2.xpath.util.AbstractXPathCompiled$NamespaceComparator: void <init>(org.jdom2.xpath.util.AbstractXPathCompiled$1)>(null);

        <org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.xpath.util.AbstractXPathCompiled$NamespaceComparator NSSORT> = $r0;

        return;
    }
    public void <init>(java.lang.String, org.jdom2.filter.Filter, java.util.Map, org.jdom2.Namespace[])
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.String $r1, $r8, r16, r17, $r18;
        org.jdom2.filter.Filter r2;
        java.util.Map r3, $r6;
        org.jdom2.Namespace[] $r4;
        int i0, i1;
        java.util.HashMap $r5, $r19;
        org.jdom2.Namespace $r7, r10, $r11;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12, $r21;
        java.util.Set $r13;
        java.util.Iterator $r14;
        boolean $z0;
        java.util.Map$Entry r15;
        java.lang.NullPointerException $r20;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom2.filter.Filter;

        r3 := @parameter2: java.util.Map;

        $r4 := @parameter3: org.jdom2.Namespace[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces> = $r19;

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables> = $r19;

        if $r1 != null goto label01;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null query");

        throw $r20;

     label01:
        if r2 != null goto label02;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null filter");

        throw $r20;

     label02:
        $r6 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces>;

        $r7 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r8 = virtualinvoke $r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r7 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $r4 == null goto label07;

        i0 = lengthof $r4;

        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

        $r7 = $r4[i1];

        if $r7 != null goto label04;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null namespace");

        throw $r20;

     label04:
        $r6 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces>;

        $r8 = virtualinvoke $r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        r10 = (org.jdom2.Namespace) $r9;

        if r10 == null goto label06;

        if r10 == $r7 goto label06;

        $r11 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        if r10 != $r11 goto label05;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The default (no prefix) Namespace URI for XPath queries is always \'\' and it cannot be redefined to \'");

        $r1 = virtualinvoke $r7.<org.jdom2.Namespace: java.lang.String getURI()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r22;

     label05:
        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A Namespace with the prefix \'");

        $r1 = virtualinvoke $r7.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has already been declared.");

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r22;

     label06:
        i1 = i1 + 1;

        goto label03;

     label07:
        if r3 == null goto label18;

        $r13 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r9 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r9;

        $r9 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r9;

        if $r8 != null goto label09;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("Variable with a null name");

        throw $r20;

     label09:
        i0 = virtualinvoke $r8.<java.lang.String: int indexOf(int)>(58);

        if i0 >= 0 goto label12;

        r16 = "";

     label10:
        if i0 >= 0 goto label13;

        r17 = $r8;

     label11:
        $r18 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespacePrefix(java.lang.String)>(r16);

        if $r18 == null goto label14;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prefix \'");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for variable ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is illegal: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r22;

     label12:
        r16 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        goto label10;

     label13:
        i0 = i0 + 1;

        r17 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(i0);

        goto label11;

     label14:
        $r18 = staticinvoke <org.jdom2.Verifier: java.lang.String checkXMLName(java.lang.String)>(r17);

        if $r18 == null goto label15;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable name \'");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for variable ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is illegal: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r22;

     label15:
        r3 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces>;

        $r9 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);

        $r7 = (org.jdom2.Namespace) $r9;

        if $r7 != null goto label16;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prefix \'");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for variable ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has not been assigned a Namespace.");

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r22;

     label16:
        r3 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables>;

        $r8 = virtualinvoke $r7.<org.jdom2.Namespace: java.lang.String getURI()>();

        $r9 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r3 = (java.util.Map) $r9;

        if r3 != null goto label17;

        $r5 = new java.util.HashMap;

        r3 = $r5;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables>;

        $r8 = virtualinvoke $r7.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r5);

     label17:
        $r9 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r9);

        if $r9 == null goto label08;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable with name ");

        $r9 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r9;

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has already been defined.");

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r22;

     label18:
        r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.String xquery> = $r1;

        r0.<org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.filter.Filter xfilter> = r2;

        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        org.jdom2.xpath.XPathExpression $r1;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.xpath.XPathExpression clone()>();

        return $r1;
    }
    public org.jdom2.xpath.XPathExpression clone()
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0, r5;
        java.util.HashMap r1, r3;
        java.lang.CloneNotSupportedException r2;
        java.lang.Object $r4, $r12;
        java.util.Map $r6;
        java.util.Set $r7;
        java.util.Iterator $r8, $r10;
        boolean $z0;
        java.util.Map$Entry r9, r11;
        java.lang.IllegalStateException $r13;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

     label1:
        $r4 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        r5 = (org.jdom2.xpath.util.AbstractXPathCompiled) $r4;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $r6 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r4;

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.util.Map) $r4;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r12);

        goto label4;

     label5:
        r2 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Should never be getting a CloneNotSupportedException!", r2);

        throw $r13;

     label6:
        $r4 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        goto label3;

     label7:
        r5.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables> = r3;

        return r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
    }
    public org.jdom2.xpath.XPathDiagnostic diagnose(java.lang.Object, boolean)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.util.List $r3;
        org.jdom2.xpath.util.XPathDiagnosticImpl $r4;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.Object evaluateRawFirst(java.lang.Object)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

     label1:
        $r4 = new org.jdom2.xpath.util.XPathDiagnosticImpl;

        specialinvoke $r4.<org.jdom2.xpath.util.XPathDiagnosticImpl: void <init>(java.lang.Object,org.jdom2.xpath.XPathExpression,java.util.List,boolean)>($r1, r0, $r3, $z0);

        return $r4;

     label2:
        $r3 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.List evaluateRawAll(java.lang.Object)>($r1);

        goto label1;
    }
    public java.util.List evaluate(java.lang.Object)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.Object $r1;
        org.jdom2.filter.Filter $r2;
        java.util.List $r3;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.filter.Filter xfilter>;

        $r3 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.List evaluateRawAll(java.lang.Object)>($r1);

        $r3 = interfaceinvoke $r2.<org.jdom2.filter.Filter: java.util.List filter(java.util.List)>($r3);

        return $r3;
    }
    public java.lang.Object evaluateFirst(java.lang.Object)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.Object $r1;
        org.jdom2.filter.Filter $r2;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.Object evaluateRawFirst(java.lang.Object)>($r1);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.filter.Filter xfilter>;

        $r1 = interfaceinvoke $r2.<org.jdom2.filter.Filter: java.lang.Object filter(java.lang.Object)>($r1);

        return $r1;
    }
protected abstract java.util.List evaluateRawAll(java.lang.Object) { 
// no body
} 
protected abstract java.lang.Object evaluateRawFirst(java.lang.Object) { 
// no body
} 
    public final java.lang.String getExpression()
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        r1 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.String xquery>;

        return r1;
    }
    public final org.jdom2.filter.Filter getFilter()
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        org.jdom2.filter.Filter r1;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        r1 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.filter.Filter xfilter>;

        return r1;
    }
    public final org.jdom2.Namespace getNamespace(java.lang.String)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.jdom2.Namespace r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (org.jdom2.Namespace) $r3;

        if r4 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Namespace with prefix \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has not been declared.");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label1:
        return r4;
    }
    public org.jdom2.Namespace[] getNamespaces()
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        int $i0;
        org.jdom2.Namespace[] $r3;
        java.lang.Object[] $r4;
        org.jdom2.xpath.util.AbstractXPathCompiled$NamespaceComparator $r5;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r1 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r3 = newarray (org.jdom2.Namespace)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (org.jdom2.Namespace[]) $r4;

        $r5 = <org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.xpath.util.AbstractXPathCompiled$NamespaceComparator NSSORT>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r3, $r5);

        return $r3;
    }
    public java.lang.Object getVariable(java.lang.String)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.String $r1, $r3;
        java.lang.NullPointerException $r2;
        int $i0, $i1;
        org.jdom2.Namespace $r4;
        java.lang.Object $r5;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot get variable value for null qname");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label2;

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.Namespace getNamespace(java.lang.String)>($r1);

        $r5 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.Object getVariable(java.lang.String,org.jdom2.Namespace)>($r3, $r4);

        return $r5;

     label2:
        $r4 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r5 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.Object getVariable(java.lang.String,org.jdom2.Namespace)>($r1, $r4);

        return $r5;
    }
    public final java.lang.Object getVariable(java.lang.String, org.jdom2.Namespace)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.String $r1, $r4;
        org.jdom2.Namespace $r2;
        java.util.Map $r3;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        boolean $z0;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r3 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables>;

        if $r2 != null goto label2;

        $r4 = "";

     label1:
        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r3 = (java.util.Map) $r5;

        if $r3 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable with name \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in namespace \'");

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has not been declared.");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label2:
        $r4 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        goto label1;

     label3:
        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r5 != null goto label5;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable with name \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in namespace \'");

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has not been declared.");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label4:
        return null;

     label5:
        return $r5;
    }
    public java.lang.Object setVariable(java.lang.String, java.lang.Object)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.String $r1, $r4;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;
        int $i0, $i1;
        org.jdom2.Namespace $r5;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot get variable value for null qname");

        throw $r3;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label2;

        $i1 = $i0 + 1;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r5 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: org.jdom2.Namespace getNamespace(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.Object setVariable(java.lang.String,org.jdom2.Namespace,java.lang.Object)>($r4, $r5, $r2);

        return $r2;

     label2:
        $r5 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r2 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.Object setVariable(java.lang.String,org.jdom2.Namespace,java.lang.Object)>($r1, $r5, $r2);

        return $r2;
    }
    public java.lang.Object setVariable(java.lang.String, org.jdom2.Namespace, java.lang.Object)
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.lang.String $r1, $r6;
        org.jdom2.Namespace $r2;
        java.lang.Object $r3, $r4, $r7;
        java.util.Map $r5;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jdom2.Namespace;

        $r3 := @parameter2: java.lang.Object;

        $r4 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.Object getVariable(java.lang.String,org.jdom2.Namespace)>($r1, $r2);

        $r5 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables>;

        $r6 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r5 = (java.util.Map) $r7;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        return $r4;
    }
    public java.lang.String toString()
    {
        org.jdom2.xpath.util.AbstractXPathCompiled r0;
        java.util.Map $r1;
        int $i0, i1, $i2;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;

        r0 := @this: org.jdom2.xpath.util.AbstractXPathCompiled;

        $r1 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xnamespaces>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        i1 = 0;

        $r1 = r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.util.Map xvariables>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.util.Map) $r4;

        $i2 = interfaceinvoke $r1.<java.util.Map: int size()>();

        i1 = i1 + $i2;

        goto label1;

     label2:
        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[1] = $r6;

        $r7 = virtualinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: java.lang.String getExpression()>();

        $r5[2] = $r7;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[XPathExpression: %d namespaces and %d variables for query %s]", $r5);

        return $r7;
    }
