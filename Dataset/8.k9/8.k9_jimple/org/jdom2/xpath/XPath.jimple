org.jdom2.xpath.XPath extends java.lang.Object implements java.io.Serializable
private static final java.lang.String DEFAULT_XPATH_CLASS
public static final java.lang.String JDOM_OBJECT_MODEL_URI
private static final java.lang.String XPATH_CLASS_PROPERTY
private static java.lang.reflect.Constructor constructor
private static final long serialVersionUID
    static void <clinit>()
    {
        <org.jdom2.xpath.XPath: java.lang.reflect.Constructor constructor> = null;

        return;
    }
    public void <init>()
    {
        org.jdom2.xpath.XPath r0;

        r0 := @this: org.jdom2.xpath.XPath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.jdom2.xpath.XPath newInstance(java.lang.String) throws org.jdom2.JDOMException
    {
        java.lang.String $r0, $r4;
        java.lang.reflect.InvocationTargetException r1;
        java.lang.Exception r2;
        java.lang.reflect.Constructor $r3;
        java.lang.Class $r5, $r6;
        boolean $z0;
        org.jdom2.JDOMException $r7;
        java.lang.StringBuilder $r8;
        java.lang.SecurityException r9;
        java.lang.Object[] $r10;
        java.lang.Object $r11;
        org.jdom2.xpath.XPath $r12;
        java.lang.Throwable $r13;

        $r0 := @parameter0: java.lang.String;

        $r3 = <org.jdom2.xpath.XPath: java.lang.reflect.Constructor constructor>;

        if $r3 != null goto label11;

     label01:
        $r4 = staticinvoke <org.jdom2.internal.SystemProperty: java.lang.String get(java.lang.String,java.lang.String)>("org.jdom2.xpath.class", "org.jdom2.xpath.jaxen.JDOMXPath");

     label02:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

     label03:
        $r6 = class "Lorg/jdom2/xpath/XPath;";

     label04:
        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

     label05:
        if $z0 != 0 goto label10;

        $r7 = new org.jdom2.JDOMException;

        $r8 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create a JDOMXPath from class \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r0);

     label07:
        throw $r7;

     label08:
        $r7 := @caughtexception;

        throw $r7;

     label09:
        r9 := @caughtexception;

        $r4 = "org.jdom2.xpath.jaxen.JDOMXPath";

        goto label02;

     label10:
        staticinvoke <org.jdom2.xpath.XPath: void setXPathClass(java.lang.Class)>($r5);

     label11:
        $r3 = <org.jdom2.xpath.XPath: java.lang.reflect.Constructor constructor>;

     label12:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r0;

     label13:
        $r11 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r10);

     label14:
        $r12 = (org.jdom2.xpath.XPath) $r11;

     label15:
        return $r12;

     label16:
        r1 := @caughtexception;

        $r13 = virtualinvoke r1.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r13 instanceof org.jdom2.JDOMException;

        if $z0 == 0 goto label18;

        $r7 = (org.jdom2.JDOMException) $r13;

     label17:
        throw $r7;

     label18:
        $r7 = new org.jdom2.JDOMException;

        $r0 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r7.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r13);

        goto label17;

     label19:
        r2 := @caughtexception;

        $r7 = new org.jdom2.JDOMException;

        $r0 = virtualinvoke r2.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r7.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>($r0, r2);

        throw $r7;

        catch java.lang.SecurityException from label01 to label02 with label09;
        catch org.jdom2.JDOMException from label01 to label02 with label08;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label16;
        catch java.lang.Exception from label01 to label02 with label19;
        catch org.jdom2.JDOMException from label02 to label03 with label08;
        catch org.jdom2.JDOMException from label04 to label05 with label08;
        catch org.jdom2.JDOMException from label06 to label08 with label08;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label16;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label16;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label16;
        catch java.lang.Exception from label02 to label03 with label19;
        catch java.lang.Exception from label04 to label05 with label19;
        catch java.lang.Exception from label06 to label08 with label19;
        catch org.jdom2.JDOMException from label10 to label11 with label08;
        catch org.jdom2.JDOMException from label13 to label14 with label08;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label16;
        catch java.lang.reflect.InvocationTargetException from label13 to label14 with label16;
        catch java.lang.Exception from label10 to label11 with label19;
        catch java.lang.Exception from label12 to label15 with label19;
    }
    public static java.util.List selectNodes(java.lang.Object, java.lang.String) throws org.jdom2.JDOMException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        org.jdom2.xpath.XPath $r2;
        java.util.List $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.jdom2.xpath.XPath: org.jdom2.xpath.XPath newInstance(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<org.jdom2.xpath.XPath: java.util.List selectNodes(java.lang.Object)>($r0);

        return $r3;
    }
    public static java.lang.Object selectSingleNode(java.lang.Object, java.lang.String) throws org.jdom2.JDOMException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        org.jdom2.xpath.XPath $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.jdom2.xpath.XPath: org.jdom2.xpath.XPath newInstance(java.lang.String)>($r1);

        $r0 = virtualinvoke $r2.<org.jdom2.xpath.XPath: java.lang.Object selectSingleNode(java.lang.Object)>($r0);

        return $r0;
    }
    public static void setXPathClass(java.lang.Class) throws org.jdom2.JDOMException
    {
        java.lang.Class r0, $r4;
        org.jdom2.JDOMException r1;
        java.lang.Exception r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        int $i0;
        java.lang.Class[] $r5;
        java.lang.reflect.Constructor $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("aClass");

        throw $r3;

     label01:
        $r4 = class "Lorg/jdom2/xpath/XPath;";

     label02:
        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

     label03:
        if $z0 == 0 goto label09;

     label04:
        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label05:
        if $z0 != 0 goto label09;

     label06:
        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/lang/String;";

     label07:
        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

     label08:
        <org.jdom2.xpath.XPath: java.lang.reflect.Constructor constructor> = $r6;

        return;

     label09:
        r1 = new org.jdom2.JDOMException;

        $r7 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a concrete JDOM XPath implementation");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<org.jdom2.JDOMException: void <init>(java.lang.String)>($r8);

        throw r1;

     label11:
        r1 := @caughtexception;

        throw r1;

     label12:
        r2 := @caughtexception;

        r1 = new org.jdom2.JDOMException;

        $r8 = virtualinvoke r2.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke r1.<org.jdom2.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r2);

        throw r1;

        catch org.jdom2.JDOMException from label02 to label03 with label11;
        catch org.jdom2.JDOMException from label04 to label05 with label11;
        catch org.jdom2.JDOMException from label07 to label08 with label11;
        catch org.jdom2.JDOMException from label10 to label11 with label11;
        catch java.lang.Exception from label02 to label03 with label12;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label06 to label08 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }
    public void addNamespace(java.lang.String, java.lang.String)
    {
        org.jdom2.xpath.XPath r0;
        java.lang.String $r1, $r2;
        org.jdom2.Namespace $r3;

        r0 := @this: org.jdom2.xpath.XPath;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.jdom2.xpath.XPath: void addNamespace(org.jdom2.Namespace)>($r3);

        return;
    }
public abstract void addNamespace(org.jdom2.Namespace) { 
// no body
} 
public abstract java.lang.String getXPath() { 
// no body
} 
public abstract java.lang.Number numberValueOf(java.lang.Object) throws org.jdom2.JDOMException { 
// no body
} 
public abstract java.util.List selectNodes(java.lang.Object) throws org.jdom2.JDOMException { 
// no body
} 
public abstract java.lang.Object selectSingleNode(java.lang.Object) throws org.jdom2.JDOMException { 
// no body
} 
public abstract void setVariable(java.lang.String, java.lang.Object) { 
// no body
} 
public abstract java.lang.String valueOf(java.lang.Object) throws org.jdom2.JDOMException { 
// no body
} 
    protected final java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        org.jdom2.xpath.XPath r0;
        org.jdom2.xpath.XPath$XPathString $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.xpath.XPath;

        $r1 = new org.jdom2.xpath.XPath$XPathString;

        $r2 = virtualinvoke r0.<org.jdom2.xpath.XPath: java.lang.String getXPath()>();

        specialinvoke $r1.<org.jdom2.xpath.XPath$XPathString: void <init>(java.lang.String)>($r2);

        return $r1;
    }
