org.jdom2.xpath.jaxen.JaxenCompiled extends org.jdom2.xpath.util.AbstractXPathCompiled implements org.jaxen.NamespaceContext org.jaxen.VariableContext
private final org.jdom2.xpath.jaxen.JDOM2Navigator navigator
private final org.jaxen.XPath xPath
    public void <init>(java.lang.String, org.jdom2.filter.Filter, java.util.Map, org.jdom2.Namespace[])
    {
        org.jdom2.xpath.jaxen.JaxenCompiled r0;
        java.lang.String $r1;
        org.jdom2.filter.Filter r2;
        java.util.Map r3;
        org.jdom2.Namespace[] $r4;
        java.lang.Throwable r5;
        org.jdom2.xpath.jaxen.JDOM2Navigator $r6, $r9;
        org.jaxen.XPath $r7;
        java.lang.StringBuilder $r8, $r11;
        org.jaxen.BaseXPath $r10;
        java.lang.IllegalArgumentException $r12;
        org.jaxen.Navigator $r13;

        r0 := @this: org.jdom2.xpath.jaxen.JaxenCompiled;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom2.filter.Filter;

        r3 := @parameter2: java.util.Map;

        $r4 := @parameter3: org.jdom2.Namespace[];

        specialinvoke r0.<org.jdom2.xpath.util.AbstractXPathCompiled: void <init>(java.lang.String,org.jdom2.filter.Filter,java.util.Map,org.jdom2.Namespace[])>($r1, r2, r3, $r4);

        $r9 = new org.jdom2.xpath.jaxen.JDOM2Navigator;

        specialinvoke $r9.<org.jdom2.xpath.jaxen.JDOM2Navigator: void <init>()>();

        r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jdom2.xpath.jaxen.JDOM2Navigator navigator> = $r9;

        $r10 = new org.jaxen.BaseXPath;

        $r6 = r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jdom2.xpath.jaxen.JDOM2Navigator navigator>;

        $r13 = (org.jaxen.Navigator) $r6;

     label1:
        specialinvoke $r10.<org.jaxen.BaseXPath: void <init>(java.lang.String,org.jaxen.Navigator)>($r1, $r13);

     label2:
        $r7 = (org.jaxen.XPath) $r10;

        r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jaxen.XPath xPath> = $r7;

        $r7 = r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jaxen.XPath xPath>;

        interfaceinvoke $r7.<org.jaxen.XPath: void setNamespaceContext(org.jaxen.NamespaceContext)>(r0);

        $r7 = r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jaxen.XPath xPath>;

        interfaceinvoke $r7.<org.jaxen.XPath: void setVariableContext(org.jaxen.VariableContext)>(r0);

        return;

     label3:
        r5 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to compile \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. See Cause.");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r5);

        throw $r12;

        catch org.jaxen.JaxenException from label1 to label2 with label3;
    }
    private static final java.util.List unWrap(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1;
        int $i0;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.List;

        r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = staticinvoke <org.jdom2.xpath.jaxen.JaxenCompiled: java.lang.Object unWrapNS(java.lang.Object)>($r3);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return r1;
    }
    private static final java.lang.Object unWrapNS(java.lang.Object)
    {
        boolean $z0;
        org.jdom2.Namespace $r0;
        java.lang.Object $r1;
        org.jdom2.xpath.jaxen.NamespaceContainer $r2;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.jdom2.xpath.jaxen.NamespaceContainer;

        if $z0 == 0 goto label1;

        $r2 = (org.jdom2.xpath.jaxen.NamespaceContainer) $r1;

        $r0 = virtualinvoke $r2.<org.jdom2.xpath.jaxen.NamespaceContainer: org.jdom2.Namespace getNamespace()>();

        return $r0;

     label1:
        return $r1;
    }
    protected java.util.List evaluateRawAll(java.lang.Object)
    {
        org.jdom2.xpath.jaxen.JaxenCompiled r0;
        java.lang.Object $r1;
        java.lang.Throwable r2;
        org.jaxen.XPath $r3;
        java.util.List $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.jdom2.xpath.jaxen.JaxenCompiled;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jaxen.XPath xPath>;

     label1:
        $r4 = interfaceinvoke $r3.<org.jaxen.XPath: java.util.List selectNodes(java.lang.Object)>($r1);

        $r4 = staticinvoke <org.jdom2.xpath.jaxen.JaxenCompiled: java.util.List unWrap(java.util.List)>($r4);

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to evaluate expression. See cause", r2);

        throw $r5;

        catch org.jaxen.JaxenException from label1 to label2 with label3;
    }
    protected java.lang.Object evaluateRawFirst(java.lang.Object)
    {
        org.jdom2.xpath.jaxen.JaxenCompiled r0;
        java.lang.Object $r1;
        java.lang.Throwable r2;
        org.jaxen.XPath $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.jdom2.xpath.jaxen.JaxenCompiled;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jaxen.XPath xPath>;

     label1:
        $r1 = interfaceinvoke $r3.<org.jaxen.XPath: java.lang.Object selectSingleNode(java.lang.Object)>($r1);

        $r1 = staticinvoke <org.jdom2.xpath.jaxen.JaxenCompiled: java.lang.Object unWrapNS(java.lang.Object)>($r1);

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to evaluate expression. See cause", r2);

        throw $r4;

        catch org.jaxen.JaxenException from label1 to label2 with label3;
    }
    public java.lang.Object getVariableValue(java.lang.String, java.lang.String, java.lang.String) throws org.jaxen.UnresolvableException
    {
        org.jdom2.xpath.jaxen.JaxenCompiled r0;
        java.lang.String $r1, $r3, $r4, $r5;
        java.lang.IllegalArgumentException r2;
        boolean $z0;
        org.jdom2.Namespace $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9;
        org.jaxen.UnresolvableException $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.jdom2.xpath.jaxen.JaxenCompiled;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        if $r3 != null goto label1;

        $r3 = "";

     label1:
        if $r4 != null goto label2;

        $r4 = "";

     label2:
        $r5 = "";

     label3:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r3);

     label4:
        if $z0 == 0 goto label7;

     label5:
        $r6 = virtualinvoke r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jdom2.Namespace getNamespace(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<org.jdom2.Namespace: java.lang.String getURI()>();

     label6:
        $r3 = $r4;

     label7:
        $r6 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String)>($r3);

        $r7 = virtualinvoke r0.<org.jdom2.xpath.jaxen.JaxenCompiled: java.lang.Object getVariable(java.lang.String,org.jdom2.Namespace)>($r1, $r6);

     label8:
        return $r7;

     label9:
        r2 := @caughtexception;

        $r10 = new org.jaxen.UnresolvableException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to resolve variable ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in namespace \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to a vaulue.");

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.jaxen.UnresolvableException: void <init>(java.lang.String)>($r3);

        $r11 = (java.lang.Throwable) $r10;

        throw $r11;

        catch java.lang.IllegalArgumentException from label3 to label4 with label9;
        catch java.lang.IllegalArgumentException from label5 to label6 with label9;
        catch java.lang.IllegalArgumentException from label7 to label8 with label9;
    }
    public java.lang.String translateNamespacePrefixToUri(java.lang.String)
    {
        org.jdom2.xpath.jaxen.JaxenCompiled r0;
        java.lang.String $r1;
        org.jdom2.Namespace $r2;

        r0 := @this: org.jdom2.xpath.jaxen.JaxenCompiled;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jdom2.xpath.jaxen.JaxenCompiled: org.jdom2.Namespace getNamespace(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<org.jdom2.Namespace: java.lang.String getURI()>();

        return $r1;
    }
