org.jdom2.util.NamespaceStack extends java.lang.Object implements java.lang.Iterable
private static final org.jdom2.Namespace[] DEFAULTSEED
private static final org.jdom2.Namespace[] EMPTY
private static final java.lang.Iterable EMPTYITER
private static final java.util.Comparator NSCOMP
private org.jdom2.Namespace[][] added
private int depth
private org.jdom2.Namespace[][] scope
    static void <clinit>()
    {
        org.jdom2.Namespace[] $r0;
        org.jdom2.util.NamespaceStack$EmptyIterable $r1;
        org.jdom2.util.NamespaceStack$1 $r2;
        org.jdom2.Namespace $r3;

        $r0 = newarray (org.jdom2.Namespace)[0];

        <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] EMPTY> = $r0;

        $r1 = new org.jdom2.util.NamespaceStack$EmptyIterable;

        specialinvoke $r1.<org.jdom2.util.NamespaceStack$EmptyIterable: void <init>(org.jdom2.util.NamespaceStack$1)>(null);

        <org.jdom2.util.NamespaceStack: java.lang.Iterable EMPTYITER> = $r1;

        $r2 = new org.jdom2.util.NamespaceStack$1;

        specialinvoke $r2.<org.jdom2.util.NamespaceStack$1: void <init>()>();

        <org.jdom2.util.NamespaceStack: java.util.Comparator NSCOMP> = $r2;

        $r0 = newarray (org.jdom2.Namespace)[2];

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r0[0] = $r3;

        $r3 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r0[1] = $r3;

        <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] DEFAULTSEED> = $r0;

        return;
    }
    public void <init>()
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Namespace[] $r1;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 = <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] DEFAULTSEED>;

        specialinvoke r0.<org.jdom2.util.NamespaceStack: void <init>(org.jdom2.Namespace[])>($r1);

        return;
    }
    public void <init>(org.jdom2.Namespace[])
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Namespace[] $r1;
        int $i0, $i1;
        org.jdom2.Namespace[][] $r2, $r3;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 := @parameter0: org.jdom2.Namespace[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (org.jdom2.Namespace[])[10];

        r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added> = $r2;

        $r2 = newarray (org.jdom2.Namespace[])[10];

        r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope> = $r2;

        r0.<org.jdom2.util.NamespaceStack: int depth> = -1;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.util.NamespaceStack: int depth> = $i0;

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r2[$i0] = $r1;

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i1 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r3 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r1 = $r3[$i0];

        $r2[$i1] = $r1;

        return;
    }
    private static final int binarySearch(org.jdom2.Namespace[], int, int, org.jdom2.Namespace)
    {
        org.jdom2.Namespace[] $r0;
        org.jdom2.Namespace $r1, $r2;
        int $i0, $i1, $i2, i3;
        java.util.Comparator $r3;

        $r0 := @parameter0: org.jdom2.Namespace[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: org.jdom2.Namespace;

        $i2 = $i2 + -1;

     label1:
        if $i1 > $i2 goto label4;

        $i0 = $i1 + $i2;

        i3 = $i0 >>> 1;

        $r2 = $r0[i3];

        if $r2 != $r1 goto label2;

        return i3;

     label2:
        $r3 = <org.jdom2.util.NamespaceStack: java.util.Comparator NSCOMP>;

        $r2 = $r0[i3];

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $i0 >= 0 goto label3;

        $i1 = i3 + 1;

        goto label1;

     label3:
        if $i0 <= 0 goto label5;

        $i2 = i3 + -1;

        goto label1;

     label4:
        $i1 = neg $i1;

        $i1 = $i1 + -1;

        return $i1;

     label5:
        return i3;
    }
    private static final org.jdom2.Namespace[] checkNamespace(java.util.List, org.jdom2.Namespace, org.jdom2.Namespace[])
    {
        java.util.List r0;
        org.jdom2.Namespace $r1, $r3;
        org.jdom2.Namespace[] $r2;
        java.lang.String $r4, $r5;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object[] $r6;

        r0 := @parameter0: java.util.List;

        $r1 := @parameter1: org.jdom2.Namespace;

        $r2 := @parameter2: org.jdom2.Namespace[];

        $r3 = $r2[0];

        if $r1 != $r3 goto label1;

        return $r2;

     label1:
        $r4 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r3 = $r2[0];

        $r5 = virtualinvoke $r3.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $i0 = lengthof $r2;

        $r6 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (org.jdom2.Namespace[]) $r6;

        $r2[0] = $r1;

        return $r2;

     label2:
        $i0 = lengthof $r2;

        $i0 = staticinvoke <org.jdom2.util.NamespaceStack: int binarySearch(org.jdom2.Namespace[],int,int,org.jdom2.Namespace)>($r2, 1, $i0, $r1);

        if $i0 < 0 goto label3;

        $r3 = $r2[$i0];

        if $r1 != $r3 goto label3;

        return $r2;

     label3:
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        if $i0 < 0 goto label4;

        $i1 = lengthof $r2;

        $r6 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i1);

        $r2 = (org.jdom2.Namespace[]) $r6;

        $r2[$i0] = $r1;

        return $r2;

     label4:
        $i1 = lengthof $r2;

        $i1 = $i1 + 1;

        $r6 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i1);

        $r2 = (org.jdom2.Namespace[]) $r6;

        $i0 = neg $i0;

        $i0 = $i0 + -1;

        $i1 = $i0 + 1;

        $i2 = lengthof $r2;

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, $r2, $i1, $i2);

        $r2[$i0] = $r1;

        return $r2;
    }
    private final void pushStack(org.jdom2.Namespace, org.jdom2.Namespace[], java.util.List)
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Namespace $r1, r3;
        java.util.List r2;
        org.jdom2.Namespace[] r4, $r8, $r9;
        int $i0, $i1;
        org.jdom2.Namespace[][] $r5, $r6;
        java.lang.Object[] $r7;
        boolean $z0;
        java.util.Comparator $r10;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 := @parameter0: org.jdom2.Namespace;

        r4 := @parameter1: org.jdom2.Namespace[];

        r2 := @parameter2: java.util.List;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $i0 = $i0 + 1;

        r0.<org.jdom2.util.NamespaceStack: int depth> = $i0;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i1 = lengthof $r5;

        if $i0 < $i1 goto label1;

        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $r6 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = lengthof $r6;

        $i0 = $i0 * 2;

        $r7 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i0);

        $r5 = (org.jdom2.Namespace[][]) $r7;

        r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope> = $r5;

        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $r6 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = lengthof $r6;

        $r7 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i0);

        $r5 = (org.jdom2.Namespace[][]) $r7;

        r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added> = $r5;

     label1:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r8 = <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] EMPTY>;

        $r5[$i0] = $r8;

     label2:
        r3 = r4[0];

        if $r1 == r3 goto label4;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $i0 = lengthof r4;

        $r7 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, $i0);

        r4 = (org.jdom2.Namespace[]) $r7;

     label3:
        r3 = r4[0];

        $i0 = lengthof r4;

        $i0 = staticinvoke <org.jdom2.util.NamespaceStack: int binarySearch(org.jdom2.Namespace[],int,int,org.jdom2.Namespace)>(r4, 1, $i0, r3);

        $i0 = neg $i0;

        $i0 = $i0 + -1;

        $i0 = $i0 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 1, r4, 0, $i0);

        r4[$i0] = r3;

        $i0 = lengthof r4;

        $i0 = staticinvoke <org.jdom2.util.NamespaceStack: int binarySearch(org.jdom2.Namespace[],int,int,org.jdom2.Namespace)>(r4, 0, $i0, $r1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r4, 1, $i0);

        r4[0] = $r1;

     label4:
        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r5[$i0] = r4;

        return;

     label5:
        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r8 = newarray (org.jdom2.Namespace)[$i1];

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r8 = (org.jdom2.Namespace[]) $r7;

        $r5[$i0] = $r8;

        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r8 = $r5[$i0];

        r3 = $r8[0];

        if r3 != $r1 goto label6;

        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r8 = $r5[$i0];

        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r9 = $r5[$i0];

        $i0 = lengthof $r9;

        $r10 = <org.jdom2.util.NamespaceStack: java.util.Comparator NSCOMP>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>($r8, 1, $i0, $r10);

        goto label2;

     label6:
        $r5 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r8 = $r5[$i0];

        $r10 = <org.jdom2.util.NamespaceStack: java.util.Comparator NSCOMP>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r8, $r10);

        goto label2;
    }
    public java.lang.Iterable addedForward()
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Namespace[][] $r1;
        int $i0;
        org.jdom2.Namespace[] $r2;
        org.jdom2.util.NamespaceStack$NamespaceIterable $r3;
        java.lang.Iterable r4;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r2 = $r1[$i0];

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        r4 = <org.jdom2.util.NamespaceStack: java.lang.Iterable EMPTYITER>;

        return r4;

     label1:
        $r3 = new org.jdom2.util.NamespaceStack$NamespaceIterable;

        $r1 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r2 = $r1[$i0];

        specialinvoke $r3.<org.jdom2.util.NamespaceStack$NamespaceIterable: void <init>(org.jdom2.Namespace[],boolean)>($r2, 1);

        return $r3;
    }
    public java.lang.Iterable addedReverse()
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Namespace[][] $r1;
        int $i0;
        org.jdom2.Namespace[] $r2;
        org.jdom2.util.NamespaceStack$NamespaceIterable $r3;
        java.lang.Iterable r4;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r2 = $r1[$i0];

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        r4 = <org.jdom2.util.NamespaceStack: java.lang.Iterable EMPTYITER>;

        return r4;

     label1:
        $r3 = new org.jdom2.util.NamespaceStack$NamespaceIterable;

        $r1 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r2 = $r1[$i0];

        specialinvoke $r3.<org.jdom2.util.NamespaceStack$NamespaceIterable: void <init>(org.jdom2.Namespace[],boolean)>($r2, 0);

        return $r3;
    }
    public org.jdom2.Namespace[] getScope()
    {
        org.jdom2.util.NamespaceStack r0;
        int $i0;
        java.lang.Object[] $r1;
        org.jdom2.Namespace[][] $r2;
        org.jdom2.Namespace[] $r3, $r4;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r3 = $r2[$i0];

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r4 = $r2[$i0];

        $i0 = lengthof $r4;

        $r1 = staticinvoke <org.jdom2.internal.ArrayCopy: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r3 = (org.jdom2.Namespace[]) $r1;

        return $r3;
    }
    public boolean isInScope(org.jdom2.Namespace)
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Namespace $r1, $r4;
        int $i0, $i1;
        org.jdom2.Namespace[][] $r2;
        org.jdom2.Namespace[] $r3, $r5;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 := @parameter0: org.jdom2.Namespace;

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r3 = $r2[$i0];

        $r4 = $r3[0];

        if $r1 != $r4 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r3 = $r2[$i0];

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r5 = $r2[$i0];

        $i0 = lengthof $r5;

        $i0 = staticinvoke <org.jdom2.util.NamespaceStack: int binarySearch(org.jdom2.Namespace[],int,int,org.jdom2.Namespace)>($r3, 1, $i0, $r1);

        if $i0 < 0 goto label2;

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i1 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r3 = $r2[$i1];

        $r4 = $r3[$i0];

        if $r1 == $r4 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public java.util.Iterator iterator()
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.util.NamespaceStack$ForwardWalker $r1;
        int $i0;
        org.jdom2.Namespace[][] $r2;
        org.jdom2.Namespace[] $r3;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 = new org.jdom2.util.NamespaceStack$ForwardWalker;

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r3 = $r2[$i0];

        specialinvoke $r1.<org.jdom2.util.NamespaceStack$ForwardWalker: void <init>(org.jdom2.Namespace[])>($r3);

        return $r1;
    }
    public void pop()
    {
        org.jdom2.util.NamespaceStack r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        org.jdom2.Namespace[][] $r2;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        if $i0 > 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot over-pop the stack.");

        throw $r1;

     label1:
        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r2[$i0] = null;

        $r2 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] added>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r2[$i0] = null;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $i0 = $i0 + -1;

        r0.<org.jdom2.util.NamespaceStack: int depth> = $i0;

        return;
    }
    public void push(org.jdom2.Attribute)
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Attribute $r1;
        java.util.ArrayList r2;
        int $i0;
        org.jdom2.Namespace $r3;
        org.jdom2.Namespace[][] $r4;
        org.jdom2.Namespace[] $r5;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 := @parameter0: org.jdom2.Attribute;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(1);

        $r3 = virtualinvoke $r1.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r4 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r5 = $r4[$i0];

        $r5 = staticinvoke <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] checkNamespace(java.util.List,org.jdom2.Namespace,org.jdom2.Namespace[])>(r2, $r3, $r5);

        specialinvoke r0.<org.jdom2.util.NamespaceStack: void pushStack(org.jdom2.Namespace,org.jdom2.Namespace[],java.util.List)>($r3, $r5, r2);

        return;
    }
    public void push(org.jdom2.Element)
    {
        org.jdom2.util.NamespaceStack r0;
        org.jdom2.Element $r1;
        java.util.ArrayList r2;
        int $i0;
        org.jdom2.Namespace $r3, r9, $r11;
        org.jdom2.Namespace[][] $r4;
        org.jdom2.Namespace[] $r5;
        boolean $z0;
        java.util.List $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.jdom2.Attribute r10;

        r0 := @this: org.jdom2.util.NamespaceStack;

        $r1 := @parameter0: org.jdom2.Element;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(8);

        $r3 = virtualinvoke $r1.<org.jdom2.Element: org.jdom2.Namespace getNamespace()>();

        $r4 = r0.<org.jdom2.util.NamespaceStack: org.jdom2.Namespace[][] scope>;

        $i0 = r0.<org.jdom2.util.NamespaceStack: int depth>;

        $r5 = $r4[$i0];

        $r5 = staticinvoke <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] checkNamespace(java.util.List,org.jdom2.Namespace,org.jdom2.Namespace[])>(r2, $r3, $r5);

        $z0 = virtualinvoke $r1.<org.jdom2.Element: boolean hasAdditionalNamespaces()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getAdditionalNamespaces()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.jdom2.Namespace) $r8;

        if r9 == $r3 goto label1;

        $r5 = staticinvoke <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] checkNamespace(java.util.List,org.jdom2.Namespace,org.jdom2.Namespace[])>(r2, r9, $r5);

        goto label1;

     label2:
        $z0 = virtualinvoke $r1.<org.jdom2.Element: boolean hasAttributes()>();

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke $r1.<org.jdom2.Element: java.util.List getAttributes()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.jdom2.Attribute) $r8;

        r9 = virtualinvoke r10.<org.jdom2.Attribute: org.jdom2.Namespace getNamespace()>();

        $r11 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        if r9 == $r11 goto label3;

        if r9 == $r3 goto label3;

        $r5 = staticinvoke <org.jdom2.util.NamespaceStack: org.jdom2.Namespace[] checkNamespace(java.util.List,org.jdom2.Namespace,org.jdom2.Namespace[])>(r2, r9, $r5);

        goto label3;

     label4:
        specialinvoke r0.<org.jdom2.util.NamespaceStack: void pushStack(org.jdom2.Namespace,org.jdom2.Namespace[],java.util.List)>($r3, $r5, r2);

        return;
    }
