org.jdom2.internal.ArrayCopy extends java.lang.Object
    private void <init>()
    {
        org.jdom2.internal.ArrayCopy r0;

        r0 := @this: org.jdom2.internal.ArrayCopy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static final char[] copyOf(char[], int)
    {
        char[] $r0, r1;
        int $i0, i1;

        $r0 := @parameter0: char[];

        i1 := @parameter1: int;

        r1 = newarray (char)[i1];

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i1);

        return r1;

     label2:
        i1 = lengthof $r0;

        goto label1;
    }
    public static final int[] copyOf(int[], int)
    {
        int[] $r0, r1;
        int $i0, i1;

        $r0 := @parameter0: int[];

        i1 := @parameter1: int;

        r1 = newarray (int)[i1];

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i1);

        return r1;

     label2:
        i1 = lengthof $r0;

        goto label1;
    }
    public static final java.lang.Object[] copyOf(java.lang.Object[], int)
    {
        java.lang.Object[] r0, $r3;
        int i0, $i1;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, i0);

        $r3 = (java.lang.Object[]) $r2;

        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r3, 0, i0);

        return $r3;

     label2:
        i0 = lengthof r0;

        goto label1;
    }
    public static final boolean[] copyOf(boolean[], int)
    {
        boolean[] $r0, r1;
        int $i0, i1;

        $r0 := @parameter0: boolean[];

        i1 := @parameter1: int;

        r1 = newarray (boolean)[i1];

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i1);

        return r1;

     label2:
        i1 = lengthof $r0;

        goto label1;
    }
    public static final java.lang.Object[] copyOfRange(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0, $r6;
        int $i0, $i1, i2, $i3;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i1 - $i0;

        if i2 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("From(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") > To (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, i2);

        $r6 = (java.lang.Object[]) $r5;

        $i1 = $i0 + i2;

        $i3 = lengthof r0;

        if $i1 <= $i3 goto label3;

        $i1 = lengthof r0;

        $i1 = $i1 - $i0;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i0, $r6, 0, $i1);

        return $r6;

     label3:
        $i1 = i2;

        goto label2;
    }
