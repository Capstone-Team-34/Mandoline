org.jdom2.Namespace extends java.lang.Object implements java.io.Serializable
public static final org.jdom2.Namespace NO_NAMESPACE
public static final org.jdom2.Namespace XML_NAMESPACE
private static final java.util.concurrent.ConcurrentMap namespacemap
private static final long serialVersionUID
private final transient java.lang.String prefix
private final transient java.lang.String uri
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        org.jdom2.Namespace $r1;
        java.lang.String $r2;
        java.util.concurrent.ConcurrentMap $r3;

        r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(512, 0.75F, 64);

        <org.jdom2.Namespace: java.util.concurrent.ConcurrentMap namespacemap> = r0;

        $r1 = new org.jdom2.Namespace;

        specialinvoke $r1.<org.jdom2.Namespace: void <init>(java.lang.String,java.lang.String)>("", "");

        <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE> = $r1;

        $r1 = new org.jdom2.Namespace;

        specialinvoke $r1.<org.jdom2.Namespace: void <init>(java.lang.String,java.lang.String)>("xml", "http://www.w3.org/XML/1998/namespace");

        <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE> = $r1;

        r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r2 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r3 = <org.jdom2.Namespace: java.util.concurrent.ConcurrentMap namespacemap>;

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        $r2 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r0);

        r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r2 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getPrefix()>();

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        interfaceinvoke r0.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r3 = <org.jdom2.Namespace: java.util.concurrent.ConcurrentMap namespacemap>;

        $r1 = <org.jdom2.Namespace: org.jdom2.Namespace XML_NAMESPACE>;

        $r2 = virtualinvoke $r1.<org.jdom2.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r0);

        return;
    }
    private void <init>(java.lang.String, java.lang.String)
    {
        org.jdom2.Namespace r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.jdom2.Namespace;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdom2.Namespace: java.lang.String prefix> = $r1;

        r0.<org.jdom2.Namespace: java.lang.String uri> = $r2;

        return;
    }
    public static org.jdom2.Namespace getNamespace(java.lang.String)
    {
        java.lang.String $r0;
        org.jdom2.Namespace $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jdom2.Namespace: org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)>("", $r0);

        return $r1;
    }
    public static org.jdom2.Namespace getNamespace(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r4;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r2, $r5;
        java.lang.Object $r3;
        org.jdom2.Namespace r6, r7;
        org.jdom2.IllegalNameException $r8;
        java.util.concurrent.ConcurrentHashMap $r9;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label03;

        if $r0 == null goto label01;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label02;

     label01:
        r6 = <org.jdom2.Namespace: org.jdom2.Namespace NO_NAMESPACE>;

        return r6;

     label02:
        $r8 = new org.jdom2.IllegalNameException;

        specialinvoke $r8.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "namespace", "Namespace URIs must be non-null and non-empty Strings");

        throw $r8;

     label03:
        $r2 = <org.jdom2.Namespace: java.util.concurrent.ConcurrentMap namespacemap>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = (java.util.concurrent.ConcurrentMap) $r3;

        if $r2 != null goto label05;

        $r4 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespaceURI(java.lang.String)>($r1);

        if $r4 == null goto label04;

        $r8 = new org.jdom2.IllegalNameException;

        specialinvoke $r8.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "Namespace URI", $r4);

        throw $r8;

     label04:
        $r9 = new java.util.concurrent.ConcurrentHashMap;

        $r2 = $r9;

        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r5 = <org.jdom2.Namespace: java.util.concurrent.ConcurrentMap namespacemap>;

        $r3 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r9);

        $r5 = (java.util.concurrent.ConcurrentMap) $r3;

        if $r5 == null goto label05;

        $r2 = $r5;

     label05:
        if $r0 != null goto label07;

        $r4 = "";

     label06:
        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (org.jdom2.Namespace) $r3;

        if r6 != null goto label13;

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label08;

        $r8 = new org.jdom2.IllegalNameException;

        specialinvoke $r8.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "namespace", "Namespace URIs must be non-null and non-empty Strings");

        throw $r8;

     label07:
        $r4 = $r0;

        goto label06;

     label08:
        $r4 = "http://www.w3.org/XML/1998/namespace";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label09;

        $r8 = new org.jdom2.IllegalNameException;

        specialinvoke $r8.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, "Namespace URI", "The http://www.w3.org/XML/1998/namespace must be bound to only the \'xml\' prefix.");

        throw $r8;

     label09:
        if $r0 != null goto label11;

        $r0 = "";

     label10:
        $r4 = staticinvoke <org.jdom2.Verifier: java.lang.String checkNamespacePrefix(java.lang.String)>($r0);

        if $r4 == null goto label12;

        $r8 = new org.jdom2.IllegalNameException;

        specialinvoke $r8.<org.jdom2.IllegalNameException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r0, "Namespace prefix", $r4);

        throw $r8;

     label11:
        goto label10;

     label12:
        r7 = new org.jdom2.Namespace;

        r6 = r7;

        specialinvoke r7.<org.jdom2.Namespace: void <init>(java.lang.String,java.lang.String)>($r0, $r1);

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, r7);

        r7 = (org.jdom2.Namespace) $r3;

        if r7 == null goto label13;

        return r7;

     label13:
        return r6;
    }
    private java.lang.Object readResolve() throws java.io.InvalidObjectException
    {
        org.jdom2.Namespace r0;
        java.io.InvalidObjectException $r1;

        r0 := @this: org.jdom2.Namespace;

        $r1 = new java.io.InvalidObjectException;

        specialinvoke $r1.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Namespace is serialized through a proxy");

        throw $r1;
    }
    private java.lang.Object writeReplace()
    {
        org.jdom2.Namespace r0;
        org.jdom2.Namespace$NamespaceSerializationProxy $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.jdom2.Namespace;

        $r1 = new org.jdom2.Namespace$NamespaceSerializationProxy;

        $r2 = r0.<org.jdom2.Namespace: java.lang.String prefix>;

        $r3 = r0.<org.jdom2.Namespace: java.lang.String uri>;

        specialinvoke $r1.<org.jdom2.Namespace$NamespaceSerializationProxy: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.jdom2.Namespace r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        java.lang.Object r2;

        r0 := @this: org.jdom2.Namespace;

        r2 := @parameter0: java.lang.Object;

        if r0 != r2 goto label1;

        return 1;

     label1:
        $z0 = r2 instanceof org.jdom2.Namespace;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.jdom2.Namespace: java.lang.String uri>;

        r0 = (org.jdom2.Namespace) r2;

        $r1 = r0.<org.jdom2.Namespace: java.lang.String uri>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;

     label2:
        return 0;
    }
    public java.lang.String getPrefix()
    {
        org.jdom2.Namespace r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Namespace;

        r1 = r0.<org.jdom2.Namespace: java.lang.String prefix>;

        return r1;
    }
    public java.lang.String getURI()
    {
        org.jdom2.Namespace r0;
        java.lang.String r1;

        r0 := @this: org.jdom2.Namespace;

        r1 = r0.<org.jdom2.Namespace: java.lang.String uri>;

        return r1;
    }
    public int hashCode()
    {
        org.jdom2.Namespace r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.jdom2.Namespace;

        $r1 = r0.<org.jdom2.Namespace: java.lang.String uri>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }
    public java.lang.String toString()
    {
        org.jdom2.Namespace r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: org.jdom2.Namespace;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Namespace: prefix \"");

        $r2 = r0.<org.jdom2.Namespace: java.lang.String prefix>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is mapped to URI \"");

        $r2 = r0.<org.jdom2.Namespace: java.lang.String uri>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
