com.fsck.k9.provider.EmailProvider$1 extends java.lang.Object implements com.fsck.k9.mailstore.LockableDatabase$DbCallback
final com.fsck.k9.provider.EmailProvider this$0
final java.lang.String[] val$projection
final java.lang.String val$selection
final java.lang.String[] val$selectionArgs
final java.lang.String val$sortOrder
    void <init>(com.fsck.k9.provider.EmailProvider, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[])
    {
        com.fsck.k9.provider.EmailProvider$1 r0;
        com.fsck.k9.provider.EmailProvider $r1;
        java.lang.String $r2, $r4;
        java.lang.String[] $r3, $r5;

        r0 := @this: com.fsck.k9.provider.EmailProvider$1;

        $r1 := @parameter0: com.fsck.k9.provider.EmailProvider;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String[];

        r0.<com.fsck.k9.provider.EmailProvider$1: com.fsck.k9.provider.EmailProvider this$0> = $r1;

        r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String val$selection> = $r2;

        r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String[] val$projection> = $r3;

        r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String val$sortOrder> = $r4;

        r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String[] val$selectionArgs> = $r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public android.database.Cursor doDbWork(android.database.sqlite.SQLiteDatabase) throws com.fsck.k9.mailstore.LockableDatabase$WrappedException, com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.provider.EmailProvider$1 r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2, $r4, $r8;
        java.lang.StringBuilder r3;
        boolean $z0, $z1;
        java.lang.String[] $r5, $r6;
        java.lang.Object[] $r7;
        int $i0, $i1;
        android.database.Cursor $r9;

        r0 := @this: com.fsck.k9.provider.EmailProvider$1;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r4 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String val$selection>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 == 0 goto label5;

        $r4 = "deleted = 0 AND empty = 0";

     label1:
        $r5 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String[] val$projection>;

        $r6 = staticinvoke <com.fsck.k9.provider.EmailProvider: java.lang.String[] access$000()>();

        $r7 = (java.lang.Object[]) $r6;

        $z0 = staticinvoke <com.fsck.k9.helper.Utility: boolean arrayContainsAny(java.lang.Object[],java.lang.Object[])>($r5, $r7);

        if $z0 == 0 goto label9;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        $z0 = 1;

        $r5 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String[] val$projection>;

        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label8;

        $r2 = $r5[$i1];

        if $z0 != 0 goto label6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        $r8 = "id";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label7;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m.");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AS ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id");

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r4 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String val$selection>;

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") AND ");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleted");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = 0 AND ");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("empty");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = 0");

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label6:
        $z0 = 0;

        goto label3;

     label7:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        goto label4;

     label8:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM messages m JOIN threads t ON (t.message_id = m.id) LEFT JOIN folders f ON (m.folder_id = f.id) WHERE ");

        $r5 = staticinvoke <com.fsck.k9.provider.EmailProvider: java.lang.String[] access$100()>();

        $r4 = staticinvoke <com.fsck.k9.search.SqlQueryBuilder: java.lang.String addPrefixToSelection(java.lang.String[],java.lang.String,java.lang.String)>($r5, "m.", $r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ORDER BY ");

        $r5 = staticinvoke <com.fsck.k9.provider.EmailProvider: java.lang.String[] access$100()>();

        $r4 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String val$sortOrder>;

        $r4 = staticinvoke <com.fsck.k9.search.SqlQueryBuilder: java.lang.String addPrefixToSelection(java.lang.String[],java.lang.String,java.lang.String)>($r5, "m.", $r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String[] val$selectionArgs>;

        $r9 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r4, $r5);

        return $r9;

     label9:
        $r5 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String[] val$projection>;

        $r6 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String[] val$selectionArgs>;

        $r2 = r0.<com.fsck.k9.provider.EmailProvider$1: java.lang.String val$sortOrder>;

        $r9 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("messages", $r5, $r4, $r6, null, null, $r2);

        return $r9;
    }
    public volatile java.lang.Object doDbWork(android.database.sqlite.SQLiteDatabase) throws com.fsck.k9.mailstore.LockableDatabase$WrappedException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.provider.EmailProvider$1 r0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.database.Cursor $r2;

        r0 := @this: com.fsck.k9.provider.EmailProvider$1;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 = virtualinvoke r0.<com.fsck.k9.provider.EmailProvider$1: android.database.Cursor doDbWork(android.database.sqlite.SQLiteDatabase)>($r1);

        return $r2;
    }
