com.fsck.k9.mailstore.LockableDatabase$StorageListener extends java.lang.Object implements com.fsck.k9.mailstore.StorageManager$StorageListener
final com.fsck.k9.mailstore.LockableDatabase this$0
    private void <init>(com.fsck.k9.mailstore.LockableDatabase)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        com.fsck.k9.mailstore.LockableDatabase $r1;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(com.fsck.k9.mailstore.LockableDatabase, com.fsck.k9.mailstore.LockableDatabase$1)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        com.fsck.k9.mailstore.LockableDatabase $r1;
        com.fsck.k9.mailstore.LockableDatabase$1 $r2;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        $r2 := @parameter1: com.fsck.k9.mailstore.LockableDatabase$1;

        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: void <init>(com.fsck.k9.mailstore.LockableDatabase)>($r1);

        return;
    }
    public void onMount(java.lang.String)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        java.lang.String $r1, $r4;
        com.fsck.k9.mailstore.UnavailableStorageException r2;
        com.fsck.k9.mailstore.LockableDatabase $r3;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$000(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = <com.fsck.k9.K9: boolean DEBUG>;

        if $z0 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LockableDatabase: Opening DB ");

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$100(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to mount event on StorageProvider: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("k9", $r1);

     label2:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label3:
        staticinvoke <com.fsck.k9.mailstore.LockableDatabase: void access$300(com.fsck.k9.mailstore.LockableDatabase)>($r3);

     label4:
        return;

     label5:
        r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("k9", "Unable to open DB on mount", r2);

        return;

        catch com.fsck.k9.mailstore.UnavailableStorageException from label3 to label4 with label5;
    }
    public void onUnmount(java.lang.String)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        java.lang.String $r1, $r4;
        com.fsck.k9.mailstore.UnavailableStorageException r2;
        com.fsck.k9.mailstore.LockableDatabase $r3;
        boolean $z0;
        java.lang.StringBuilder $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$000(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label01;

        return;

     label01:
        $z0 = <com.fsck.k9.K9: boolean DEBUG>;

        if $z0 == 0 goto label02;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LockableDatabase: Closing DB ");

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$100(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to unmount event on StorageProvider: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("k9", $r1);

     label02:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label03:
        virtualinvoke $r3.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite()>();

     label04:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r6 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase access$200(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void close()>();

     label05:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label06:
        virtualinvoke $r3.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

     label07:
        return;

     label08:
        r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("k9", "Unable to writelock on unmount", r2);

        return;

     label09:
        $r7 := @caughtexception;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label10:
        virtualinvoke $r3.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        throw $r7;

     label11:
        nop;

        catch com.fsck.k9.mailstore.UnavailableStorageException from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch com.fsck.k9.mailstore.UnavailableStorageException from label06 to label07 with label08;
        catch com.fsck.k9.mailstore.UnavailableStorageException from label10 to label11 with label08;
    }
