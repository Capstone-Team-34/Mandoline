com.fsck.k9.Throttle extends java.lang.Object
public static final boolean DEBUG
public static final int DEFAULT_MAX_TIMEOUT
public static final int DEFAULT_MIN_TIMEOUT
static final int TIMEOUT_EXTEND_INTERVAL
private static java.util.Timer TIMER
private final java.lang.Runnable mCallback
private final com.fsck.k9.Clock mClock
private final android.os.Handler mHandler
private long mLastEventTime
private final int mMaxTimeout
private final int mMinTimeout
private final java.lang.String mName
private com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask
private int mTimeout
private final java.util.Timer mTimer
    static void <clinit>()
    {
        java.util.Timer $r0;

        $r0 = new java.util.Timer;

        specialinvoke $r0.<java.util.Timer: void <init>()>();

        <com.fsck.k9.Throttle: java.util.Timer TIMER> = $r0;

        return;
    }
    public void <init>(java.lang.String, java.lang.Runnable, android.os.Handler)
    {
        com.fsck.k9.Throttle r0;
        java.lang.String $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 := @parameter2: android.os.Handler;

        specialinvoke r0.<com.fsck.k9.Throttle: void <init>(java.lang.String,java.lang.Runnable,android.os.Handler,int,int)>($r1, $r2, $r3, 150, 2500);

        return;
    }
    public void <init>(java.lang.String, java.lang.Runnable, android.os.Handler, int, int)
    {
        com.fsck.k9.Throttle r0;
        java.lang.String $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;
        int $i0, $i1;
        com.fsck.k9.Clock $r4;
        java.util.Timer $r5;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 := @parameter2: android.os.Handler;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 = <com.fsck.k9.Clock: com.fsck.k9.Clock INSTANCE>;

        $r5 = <com.fsck.k9.Throttle: java.util.Timer TIMER>;

        specialinvoke r0.<com.fsck.k9.Throttle: void <init>(java.lang.String,java.lang.Runnable,android.os.Handler,int,int,com.fsck.k9.Clock,java.util.Timer)>($r1, $r2, $r3, $i0, $i1, $r4, $r5);

        return;
    }
    void <init>(java.lang.String, java.lang.Runnable, android.os.Handler, int, int, com.fsck.k9.Clock, java.util.Timer)
    {
        com.fsck.k9.Throttle r0;
        java.lang.String $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;
        int $i0, $i1;
        com.fsck.k9.Clock $r4;
        java.util.Timer $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 := @parameter2: android.os.Handler;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: com.fsck.k9.Clock;

        $r5 := @parameter6: java.util.Timer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i1 >= $i0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        r0.<com.fsck.k9.Throttle: java.lang.String mName> = $r1;

        r0.<com.fsck.k9.Throttle: java.lang.Runnable mCallback> = $r2;

        r0.<com.fsck.k9.Throttle: com.fsck.k9.Clock mClock> = $r4;

        r0.<com.fsck.k9.Throttle: java.util.Timer mTimer> = $r5;

        r0.<com.fsck.k9.Throttle: android.os.Handler mHandler> = $r3;

        r0.<com.fsck.k9.Throttle: int mMinTimeout> = $i0;

        r0.<com.fsck.k9.Throttle: int mMaxTimeout> = $i1;

        $i0 = r0.<com.fsck.k9.Throttle: int mMinTimeout>;

        r0.<com.fsck.k9.Throttle: int mTimeout> = $i0;

        return;
    }
    static android.os.Handler access$200(com.fsck.k9.Throttle)
    {
        com.fsck.k9.Throttle $r0;
        android.os.Handler r1;

        $r0 := @parameter0: com.fsck.k9.Throttle;

        r1 = $r0.<com.fsck.k9.Throttle: android.os.Handler mHandler>;

        return r1;
    }
    static com.fsck.k9.Throttle$MyTimerTask access$302(com.fsck.k9.Throttle, com.fsck.k9.Throttle$MyTimerTask)
    {
        com.fsck.k9.Throttle $r0;
        com.fsck.k9.Throttle$MyTimerTask $r1;

        $r0 := @parameter0: com.fsck.k9.Throttle;

        $r1 := @parameter1: com.fsck.k9.Throttle$MyTimerTask;

        $r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask> = $r1;

        return $r1;
    }
    static java.lang.Runnable access$500(com.fsck.k9.Throttle)
    {
        com.fsck.k9.Throttle $r0;
        java.lang.Runnable r1;

        $r0 := @parameter0: com.fsck.k9.Throttle;

        r1 = $r0.<com.fsck.k9.Throttle: java.lang.Runnable mCallback>;

        return r1;
    }
    private void debugLog(java.lang.String)
    {
        com.fsck.k9.Throttle r0;
        java.lang.String $r1, $r3;
        java.lang.StringBuilder $r2;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Throttle: [");

        $r3 = r0.<com.fsck.k9.Throttle: java.lang.String mName>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("k9", $r1);

        return;
    }
    private boolean isCallbackScheduled()
    {
        com.fsck.k9.Throttle r0;
        com.fsck.k9.Throttle$MyTimerTask $r1;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public void cancelScheduledCallback()
    {
        com.fsck.k9.Throttle r0;
        com.fsck.k9.Throttle$MyTimerTask $r1;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask>;

        if $r1 == null goto label1;

        $r1 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask>;

        virtualinvoke $r1.<com.fsck.k9.Throttle$MyTimerTask: boolean cancel()>();

        r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask> = null;

     label1:
        return;
    }
    long getLastEventTimeForTest()
    {
        com.fsck.k9.Throttle r0;
        long l0;

        r0 := @this: com.fsck.k9.Throttle;

        l0 = r0.<com.fsck.k9.Throttle: long mLastEventTime>;

        return l0;
    }
    int getTimeoutForTest()
    {
        com.fsck.k9.Throttle r0;
        int i0;

        r0 := @this: com.fsck.k9.Throttle;

        i0 = r0.<com.fsck.k9.Throttle: int mTimeout>;

        return i0;
    }
    public void onEvent()
    {
        com.fsck.k9.Throttle r0;
        boolean $z0;
        com.fsck.k9.Throttle$MyTimerTask $r1;
        java.util.Timer $r2;
        int $i0;
        long $l1;

        r0 := @this: com.fsck.k9.Throttle;

        virtualinvoke r0.<com.fsck.k9.Throttle: void updateTimeout()>();

        $z0 = specialinvoke r0.<com.fsck.k9.Throttle: boolean isCallbackScheduled()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new com.fsck.k9.Throttle$MyTimerTask;

        specialinvoke $r1.<com.fsck.k9.Throttle$MyTimerTask: void <init>(com.fsck.k9.Throttle,com.fsck.k9.Throttle$1)>(r0, null);

        r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask> = $r1;

        $r2 = r0.<com.fsck.k9.Throttle: java.util.Timer mTimer>;

        $r1 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask mRunningTimerTask>;

        $i0 = r0.<com.fsck.k9.Throttle: int mTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r2.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r1, $l1);

        return;
    }
    void updateTimeout()
    {
        com.fsck.k9.Throttle r0;
        int $i0, $i4;
        long $l1, $l2;
        com.fsck.k9.Clock $r1;
        byte $b3;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Clock mClock>;

        $l1 = virtualinvoke $r1.<com.fsck.k9.Clock: long getTime()>();

        $l2 = r0.<com.fsck.k9.Throttle: long mLastEventTime>;

        $l2 = $l1 - $l2;

        $b3 = $l2 cmp 500L;

        if $b3 > 0 goto label2;

        $i0 = r0.<com.fsck.k9.Throttle: int mTimeout>;

        $i0 = $i0 * 2;

        r0.<com.fsck.k9.Throttle: int mTimeout> = $i0;

        $i4 = r0.<com.fsck.k9.Throttle: int mTimeout>;

        $i0 = r0.<com.fsck.k9.Throttle: int mMaxTimeout>;

        if $i4 < $i0 goto label1;

        $i0 = r0.<com.fsck.k9.Throttle: int mMaxTimeout>;

        r0.<com.fsck.k9.Throttle: int mTimeout> = $i0;

     label1:
        r0.<com.fsck.k9.Throttle: long mLastEventTime> = $l1;

        return;

     label2:
        $i0 = r0.<com.fsck.k9.Throttle: int mMinTimeout>;

        r0.<com.fsck.k9.Throttle: int mTimeout> = $i0;

        goto label1;
    }
