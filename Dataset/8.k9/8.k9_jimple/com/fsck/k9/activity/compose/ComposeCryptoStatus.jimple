com.fsck.k9.activity.compose.ComposeCryptoStatus extends java.lang.Object
private boolean allKeysAvailable
private boolean allKeysVerified
private com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode
private com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState
private boolean enablePgpInline
private boolean hasRecipients
private java.lang.String[] recipientAddresses
private java.lang.Long selfEncryptKeyId
private java.lang.Long signingKeyId
    public void <init>()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState access$002(com.fsck.k9.activity.compose.ComposeCryptoStatus, com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState> = $r1;

        return $r1;
    }
    static com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode access$102(com.fsck.k9.activity.compose.ComposeCryptoStatus, com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode> = $r1;

        return $r1;
    }
    static java.lang.String[] access$202(com.fsck.k9.activity.compose.ComposeCryptoStatus, java.lang.String[])
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: java.lang.String[];

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.String[] recipientAddresses> = $r1;

        return $r1;
    }
    static boolean access$302(com.fsck.k9.activity.compose.ComposeCryptoStatus, boolean)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        boolean $z0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $z0 := @parameter1: boolean;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysAvailable> = $z0;

        return $z0;
    }
    static boolean access$402(com.fsck.k9.activity.compose.ComposeCryptoStatus, boolean)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        boolean $z0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $z0 := @parameter1: boolean;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysVerified> = $z0;

        return $z0;
    }
    static boolean access$502(com.fsck.k9.activity.compose.ComposeCryptoStatus, boolean)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        boolean $z0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $z0 := @parameter1: boolean;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean hasRecipients> = $z0;

        return $z0;
    }
    static java.lang.Long access$602(com.fsck.k9.activity.compose.ComposeCryptoStatus, java.lang.Long)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        java.lang.Long $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: java.lang.Long;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long signingKeyId> = $r1;

        return $r1;
    }
    static java.lang.Long access$702(com.fsck.k9.activity.compose.ComposeCryptoStatus, java.lang.Long)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        java.lang.Long $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: java.lang.Long;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long selfEncryptKeyId> = $r1;

        return $r1;
    }
    static boolean access$802(com.fsck.k9.activity.compose.ComposeCryptoStatus, boolean)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        boolean $z0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $z0 := @parameter1: boolean;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline> = $z0;

        return $z0;
    }
    public com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState getAttachErrorStateOrNull()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;
        boolean $z0;
        com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState r3;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState UNCONFIGURED>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline>;

        if $z0 == 0 goto label2;

        r3 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState IS_INLINE>;

        return r3;

     label2:
        return null;
    }
    public com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType getCryptoStatusDisplayType()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        int[] $r1;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r2;
        int $i0;
        java.lang.AssertionError $r3;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r4;
        boolean $z0;
        com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType r5;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$1: int[] $SwitchMap$com$fsck$k9$activity$compose$RecipientPresenter$CryptoProviderState>;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $i0 = virtualinvoke $r2.<com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label05;
            default: goto label01;
        };

     label01:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("all CryptoProviderStates must be handled!");

        throw $r3;

     label02:
        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType UNCONFIGURED>;

        return r5;

     label03:
        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType UNINITIALIZED>;

        return r5;

     label04:
        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType ERROR>;

        return r5;

     label05:
        $r1 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$1: int[] $SwitchMap$com$fsck$k9$activity$compose$RecipientPresenter$CryptoMode>;

        $r4 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $i0 = virtualinvoke $r4.<com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label07;
            case 2: goto label11;
            case 3: goto label15;
            case 4: goto label16;
            default: goto label06;
        };

     label06:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("all CryptoModes must be handled!");

        throw $r3;

     label07:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean hasRecipients>;

        if $z0 != 0 goto label08;

        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType PRIVATE_EMPTY>;

        return r5;

     label08:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysAvailable>;

        if $z0 == 0 goto label09;

        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysVerified>;

        if $z0 == 0 goto label09;

        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType PRIVATE_TRUSTED>;

        return r5;

     label09:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysAvailable>;

        if $z0 == 0 goto label10;

        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType PRIVATE_UNTRUSTED>;

        return r5;

     label10:
        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType PRIVATE_NOKEY>;

        return r5;

     label11:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean hasRecipients>;

        if $z0 != 0 goto label12;

        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType OPPORTUNISTIC_EMPTY>;

        return r5;

     label12:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysAvailable>;

        if $z0 == 0 goto label13;

        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysVerified>;

        if $z0 == 0 goto label13;

        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType OPPORTUNISTIC_TRUSTED>;

        return r5;

     label13:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysAvailable>;

        if $z0 == 0 goto label14;

        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType OPPORTUNISTIC_UNTRUSTED>;

        return r5;

     label14:
        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType OPPORTUNISTIC_NOKEY>;

        return r5;

     label15:
        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType SIGN_ONLY>;

        return r5;

     label16:
        r5 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType DISABLED>;

        return r5;
    }
    public long[] getEncryptKeyIds()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        long $l0;
        java.lang.Long $r1;
        long[] $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long selfEncryptKeyId>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = newarray (long)[1];

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long selfEncryptKeyId>;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $r2[0] = $l0;

        return $r2;
    }
    public java.lang.String[] getRecipientAddresses()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        java.lang.String[] r1;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.String[] recipientAddresses>;

        return r1;
    }
    public com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState getSendErrorStateOrNull()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        boolean z0, z1;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;
        java.lang.Long $r3;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r4, $r5;
        com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState r6;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        z0 = 1;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r2 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState OK>;

        if $r1 == $r2 goto label1;

        r6 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState PROVIDER_ERROR>;

        return r6;

     label1:
        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long signingKeyId>;

        if $r3 != null goto label3;

        z1 = 1;

     label2:
        if z1 == 0 goto label4;

        r6 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState SIGN_KEY_NOT_CONFIGURED>;

        return r6;

     label3:
        z1 = 0;

        goto label2;

     label4:
        $r4 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r5 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode PRIVATE>;

        if $r4 != $r5 goto label6;

        z1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allKeysAvailable>;

        if z1 != 0 goto label6;

     label5:
        if z0 == 0 goto label7;

        r6 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState PRIVATE_BUT_MISSING_KEYS>;

        return r6;

     label6:
        z0 = 0;

        goto label5;

     label7:
        return null;
    }
    public java.lang.Long getSigningKeyId()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        java.lang.Long r1;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long signingKeyId>;

        return r1;
    }
    public boolean isCryptoDisabled()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1, $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode DISABLE>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isEncryptionEnabled()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1, $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r2 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode PRIVATE>;

        if $r1 == $r2 goto label1;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r2 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode OPPORTUNISTIC>;

        if $r1 != $r2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isEncryptionOpportunistic()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1, $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode OPPORTUNISTIC>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isPgpInlineModeEnabled()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        boolean z0;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline>;

        return z0;
    }
    public boolean isProviderStateOk()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState OK>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isSigningEnabled()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1, $r2;
        java.lang.Long $r3;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode DISABLE>;

        if $r2 == $r1 goto label1;

        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long signingKeyId>;

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean shouldUsePgpMessageBuilder()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r3, $r4;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r2 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState UNCONFIGURED>;

        if $r1 == $r2 goto label1;

        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r4 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode DISABLE>;

        if $r3 == $r4 goto label1;

        return 1;

     label1:
        return 0;
    }
