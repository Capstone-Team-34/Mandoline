com.fsck.k9.mail.store.imap.ImapUtility extends java.lang.Object
    void <init>()
    {
        com.fsck.k9.mail.store.imap.ImapUtility r0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapUtility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String encodeString(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "\\\\");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\"", "\\\"");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    public static java.util.List getImapRangeValues(java.lang.String)
    {
        java.lang.String $r0, $r3;
        java.lang.NumberFormatException r1;
        java.util.ArrayList r2;
        int $i0;
        long $l1, $l2;
        boolean $z0;
        byte $b3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        if $r0 == null goto label19;

     label01:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(58);

     label02:
        if $i0 <= 0 goto label19;

     label03:
        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

     label04:
        $i0 = $i0 + 1;

     label05:
        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapUtility: boolean is32bitValue(long)>($l1);

     label06:
        if $z0 == 0 goto label15;

     label07:
        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapUtility: boolean is32bitValue(long)>($l2);

     label08:
        if $z0 == 0 goto label15;

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label12;

     label09:
        $b3 = $l1 cmp $l2;

        if $b3 > 0 goto label19;

     label10:
        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label11:
        $l1 = $l1 + 1L;

        goto label09;

     label12:
        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label19;

     label13:
        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label14:
        $l1 = $l1 - 1L;

        goto label12;

     label15:
        $r4 = new java.lang.StringBuilder;

     label16:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("k9", $r3);

     label17:
        return r2;

     label18:
        r1 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range value: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("k9", $r0, r1);

     label19:
        return r2;

        catch java.lang.NumberFormatException from label01 to label02 with label18;
        catch java.lang.NumberFormatException from label03 to label04 with label18;
        catch java.lang.NumberFormatException from label05 to label06 with label18;
        catch java.lang.NumberFormatException from label07 to label08 with label18;
        catch java.lang.NumberFormatException from label10 to label11 with label18;
        catch java.lang.NumberFormatException from label13 to label14 with label18;
        catch java.lang.NumberFormatException from label16 to label17 with label18;
    }
    public static java.util.List getImapSequenceValues(java.lang.String)
    {
        java.lang.String $r0;
        java.util.ArrayList r1;
        int $i0, $i1, $i2;
        java.lang.String[] $r2;
        boolean $z0;
        java.util.List $r3;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        if $r0 == null goto label4;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r0 = $r2[$i1];

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(58);

        if $i2 != -1 goto label3;

        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapUtility: boolean isNumberValid(java.lang.String)>($r0);

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r0);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r3 = staticinvoke <com.fsck.k9.mail.store.imap.ImapUtility: java.util.List getImapRangeValues(java.lang.String)>($r0);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        goto label2;

     label4:
        return r1;
    }
    public static com.fsck.k9.mail.store.imap.ImapResponse getLastResponse(java.util.List)
    {
        java.util.List r0;
        int i0;
        java.lang.Object $r1;
        com.fsck.k9.mail.store.imap.ImapResponse $r2;

        r0 := @parameter0: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i0 = i0 + -1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r2 = (com.fsck.k9.mail.store.imap.ImapResponse) $r1;

        return $r2;
    }
    private static boolean is32bitValue(long)
    {
        long $l0;
        byte $b1;

        $l0 := @parameter0: long;

        $l0 = -4294967296L & $l0;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean isNumberValid(java.lang.String)
    {
        java.lang.String $r0;
        long $l0;
        boolean $z0;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapUtility: boolean is32bitValue(long)>($l0);

     label2:
        if $z0 == 0 goto label4;

        return 1;

     label3:
        $r1 := @caughtexception;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UID value: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("k9", $r0);

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
