com.fsck.k9.mail.store.imap.ImapResponseParser extends java.lang.Object
private java.lang.Exception exception
private com.fsck.k9.mail.filter.PeekableInputStream inputStream
private com.fsck.k9.mail.store.imap.ImapResponse response
    public void <init>(com.fsck.k9.mail.filter.PeekableInputStream)
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.filter.PeekableInputStream $r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.filter.PeekableInputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream> = $r1;

        return;
    }
    private void checkTokenIsString(java.lang.Object) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        java.lang.Object $r1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected non-string token: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return;
    }
    static boolean equalsIgnoreCase(java.lang.Object, java.lang.String)
    {
        java.lang.String $r0, r2;
        boolean $z0;
        java.lang.Object r1;

        r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = r1 instanceof java.lang.String;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.lang.String) r1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        return $z0;
    }
    private void expect(char) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        char $c0;
        com.fsck.k9.mail.filter.PeekableInputStream $r1;
        int $i1;
        java.io.IOException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.Character $r5;
        java.lang.String $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $c0 := @parameter0: char;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i1 = virtualinvoke $r1.<com.fsck.k9.mail.filter.PeekableInputStream: int read()>();

        if $i1 == $c0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = newarray (java.lang.Object)[4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r3[1] = $r5;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[2] = $r4;

        $c0 = (char) $i1;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r3[3] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected %04x (%c) but got %04x (%c)", $r3);

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }
    private boolean isStatusResponse(java.lang.String)
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OK");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NO");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("BAD");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PREAUTH");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("BYE");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private java.lang.String parseBareString(boolean) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        boolean $z0;
        java.lang.StringBuilder r1;
        com.fsck.k9.mail.filter.PeekableInputStream $r2;
        int $i0, $i1;
        java.io.IOException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.String $r6;
        char $c2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $z0 := @parameter0: boolean;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r2.<com.fsck.k9.mail.filter.PeekableInputStream: int peek()>();

        if $i0 != -1 goto label2;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("parseBareString(): end of stream reached");

        throw $r3;

     label2:
        if $i0 == 40 goto label5;

        if $i0 == 41 goto label5;

        if $z0 == 0 goto label3;

        if $i0 == 91 goto label5;

        if $i0 == 93 goto label5;

     label3:
        if $i0 == 123 goto label5;

        if $i0 == 32 goto label5;

        if $i0 == 34 goto label5;

        if $i0 < 0 goto label4;

        if $i0 <= 31 goto label5;

     label4:
        if $i0 != 127 goto label7;

     label5:
        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i1 != 0 goto label6;

        $r3 = new java.io.IOException;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("parseBareString(): (%04x %c)", $r4);

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label6:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label7:
        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r2.<com.fsck.k9.mail.filter.PeekableInputStream: int read()>();

        $c2 = (char) $i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label1;
    }
    private boolean parseCommandContinuationRequest() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(43);

        return 1;
    }
    private com.fsck.k9.mail.store.imap.ImapList parseList(com.fsck.k9.mail.store.imap.ImapList, char, char) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapList $r1, r2;
        char $c0, $c1;
        java.lang.String $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapList;

        $c0 := @parameter1: char;

        $c1 := @parameter2: char;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>($c0);

        r2 = new com.fsck.k9.mail.store.imap.ImapList;

        specialinvoke r2.<com.fsck.k9.mail.store.imap.ImapList: void <init>()>();

        virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapList: boolean add(java.lang.Object)>(r2);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);

     label1:
        $r4 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Object parseToken(com.fsck.k9.mail.store.imap.ImapList)>(r2);

        if $r4 != null goto label2;

        return null;

     label2:
        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $z0 = $r4 instanceof com.fsck.k9.mail.store.imap.ImapList;

        if $z0 != 0 goto label1;

        virtualinvoke r2.<com.fsck.k9.mail.store.imap.ImapList: boolean add(java.lang.Object)>($r4);

        goto label1;

     label3:
        return r2;
    }
    private void parseListResponse(com.fsck.k9.mail.store.imap.ImapResponse) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;
        java.lang.String $r2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponse;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(32);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapList parseList(com.fsck.k9.mail.store.imap.ImapList,char,char)>($r1, 40, 41);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(32);

        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String parseQuoted()>();

        virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: boolean add(java.lang.Object)>($r2);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(32);

        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String parseString()>();

        virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: boolean add(java.lang.Object)>($r2);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(13);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(10);

        return;
    }
    private java.lang.Object parseLiteral() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        byte[] r1;
        com.fsck.k9.mail.filter.FixedLengthInputStream r2;
        java.lang.String $r3;
        int $i0, $i1, $i3;
        com.fsck.k9.mail.store.imap.ImapResponse $r4;
        com.fsck.k9.mail.store.imap.ImapResponseCallback $r5;
        com.fsck.k9.mail.filter.PeekableInputStream $r6;
        java.lang.Object r7, $r8;
        long $l2;
        java.io.IOException r9;
        java.lang.Exception r10;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(123);

        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String readStringUntil(char)>(125);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(13);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(10);

        if $i0 != 0 goto label01;

        return "";

     label01:
        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response>;

        $r5 = virtualinvoke $r4.<com.fsck.k9.mail.store.imap.ImapResponse: com.fsck.k9.mail.store.imap.ImapResponseCallback getCallback()>();

        if $r5 == null goto label12;

        r2 = new com.fsck.k9.mail.filter.FixedLengthInputStream;

        $r6 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        specialinvoke r2.<com.fsck.k9.mail.filter.FixedLengthInputStream: void <init>(java.io.InputStream,int)>($r6, $i0);

        r7 = null;

     label02:
        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response>;

     label03:
        $r5 = virtualinvoke $r4.<com.fsck.k9.mail.store.imap.ImapResponse: com.fsck.k9.mail.store.imap.ImapResponseCallback getCallback()>();

     label04:
        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response>;

     label05:
        $r8 = interfaceinvoke $r5.<com.fsck.k9.mail.store.imap.ImapResponseCallback: java.lang.Object foundLiteral(com.fsck.k9.mail.store.imap.ImapResponse,com.fsck.k9.mail.filter.FixedLengthInputStream)>($r4, r2);

     label06:
        r7 = $r8;

     label07:
        $i1 = virtualinvoke r2.<com.fsck.k9.mail.filter.FixedLengthInputStream: int available()>();

        if $i1 <= 0 goto label11;

        if $i1 == $i0 goto label11;

     label08:
        $i1 = virtualinvoke r2.<com.fsck.k9.mail.filter.FixedLengthInputStream: int available()>();

        if $i1 <= 0 goto label11;

        $i1 = virtualinvoke r2.<com.fsck.k9.mail.filter.FixedLengthInputStream: int available()>();

        $l2 = (long) $i1;

        virtualinvoke r2.<com.fsck.k9.mail.filter.FixedLengthInputStream: long skip(long)>($l2);

        goto label08;

     label09:
        r9 := @caughtexception;

        throw r9;

     label10:
        r10 := @caughtexception;

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Exception exception> = r10;

        goto label07;

     label11:
        if r7 != null goto label16;

     label12:
        r1 = newarray (byte)[$i0];

        $i1 = 0;

     label13:
        if $i1 == $i0 goto label15;

        $r6 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i3 = $i0 - $i1;

        $i3 = virtualinvoke $r6.<com.fsck.k9.mail.filter.PeekableInputStream: int read(byte[],int,int)>(r1, $i1, $i3);

        if $i3 != -1 goto label14;

        r9 = new java.io.IOException;

        specialinvoke r9.<java.io.IOException: void <init>(java.lang.String)>("parseLiteral(): end of stream reached");

        throw r9;

     label14:
        $i1 = $i1 + $i3;

        goto label13;

     label15:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "US-ASCII");

        return $r3;

     label16:
        return r7;

        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.lang.Exception from label02 to label06 with label10;
    }
    private java.lang.String parseQuoted() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        java.lang.StringBuilder r1;
        boolean z0;
        com.fsck.k9.mail.filter.PeekableInputStream $r2;
        int $i0;
        java.lang.String $r3;
        char $c1;
        java.io.IOException $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(34);

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        z0 = 0;

     label1:
        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r2.<com.fsck.k9.mail.filter.PeekableInputStream: int read()>();

        if $i0 == -1 goto label4;

        if z0 != 0 goto label2;

        if $i0 != 92 goto label2;

        z0 = 1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        if $i0 != 34 goto label3;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        $c1 = (char) $i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        z0 = 0;

        goto label1;

     label4:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("parseQuoted(): end of stream reached");

        throw $r4;
    }
    private void parseResponseText(com.fsck.k9.mail.store.imap.ImapResponse) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;
        com.fsck.k9.mail.filter.PeekableInputStream $r2;
        int $i0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponse;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void skipIfSpace()>();

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r2.<com.fsck.k9.mail.filter.PeekableInputStream: int peek()>();

        if $i0 != 91 goto label1;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapList parseList(com.fsck.k9.mail.store.imap.ImapList,char,char)>($r1, 91, 93);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void skipIfSpace()>();

     label1:
        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String readStringUntilEndOfLine()>();

        if $r3 == null goto label2;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: boolean add(java.lang.Object)>($r3);

     label2:
        return;
    }
    private java.lang.String parseString() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.filter.PeekableInputStream $r1;
        int $i0;
        java.lang.String $r2;
        java.lang.Object $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r1.<com.fsck.k9.mail.filter.PeekableInputStream: int peek()>();

        if $i0 != 34 goto label1;

        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String parseQuoted()>();

        return $r2;

     label1:
        if $i0 != 123 goto label2;

        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Object parseLiteral()>();

        $r2 = (java.lang.String) $r3;

        return $r2;

     label2:
        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String parseBareString(boolean)>(0);

        return $r2;
    }
    private java.lang.String parseTaggedResponse() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        java.lang.String $r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String readStringUntil(char)>(32);

        return $r1;
    }
    private java.lang.Object parseToken(com.fsck.k9.mail.store.imap.ImapList) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapList $r1;
        com.fsck.k9.mail.filter.PeekableInputStream $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.Object $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapList;

     label01:
        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r2.<com.fsck.k9.mail.filter.PeekableInputStream: int peek()>();

        if $i0 != 40 goto label02;

        $r1 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapList parseList(com.fsck.k9.mail.store.imap.ImapList,char,char)>($r1, 40, 41);

        return $r1;

     label02:
        if $i0 != 91 goto label03;

        $r1 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapList parseList(com.fsck.k9.mail.store.imap.ImapList,char,char)>($r1, 91, 93);

        return $r1;

     label03:
        if $i0 != 41 goto label04;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(41);

        return ")";

     label04:
        if $i0 != 93 goto label05;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(93);

        return "]";

     label05:
        if $i0 != 34 goto label06;

        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String parseQuoted()>();

        return $r3;

     label06:
        if $i0 != 123 goto label07;

        $r4 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Object parseLiteral()>();

        return $r4;

     label07:
        if $i0 != 32 goto label08;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(32);

        goto label01;

     label08:
        if $i0 != 13 goto label09;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(13);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(10);

        return null;

     label09:
        if $i0 != 10 goto label10;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(10);

        return null;

     label10:
        if $i0 != 9 goto label11;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(9);

        goto label01;

     label11:
        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String parseBareString(boolean)>(1);

        return $r3;
    }
    private void parseUntaggedResponse() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(42);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(32);

        return;
    }
    private void readContinuationRequest(com.fsck.k9.mail.store.imap.ImapResponseCallback) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponseCallback $r1;
        com.fsck.k9.mail.store.imap.ImapResponse $r2;
        java.lang.String $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponseCallback;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: boolean parseCommandContinuationRequest()>();

        $r2 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponse: com.fsck.k9.mail.store.imap.ImapResponse newContinuationRequest(com.fsck.k9.mail.store.imap.ImapResponseCallback)>($r1);

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response> = $r2;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void skipIfSpace()>();

        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String readStringUntilEndOfLine()>();

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response>;

        virtualinvoke $r2.<com.fsck.k9.mail.store.imap.ImapResponse: boolean add(java.lang.Object)>($r3);

        return;
    }
    private java.lang.String readStringUntil(char) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        char $c0, $c2;
        java.lang.StringBuilder r1;
        com.fsck.k9.mail.filter.PeekableInputStream $r2;
        int $i1;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $c0 := @parameter0: char;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i1 = virtualinvoke $r2.<com.fsck.k9.mail.filter.PeekableInputStream: int read()>();

        if $i1 == -1 goto label3;

        if $i1 != $c0 goto label2;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $c2 = (char) $i1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label1;

     label3:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("readStringUntil(): end of stream reached");

        throw $r4;
    }
    private java.lang.String readStringUntilEndOfLine() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        java.lang.String $r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String readStringUntil(char)>(13);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(10);

        return $r1;
    }
    private void readTaggedResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponseCallback $r1;
        java.lang.String $r2;
        com.fsck.k9.mail.store.imap.ImapResponse $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponseCallback;

        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.String parseTaggedResponse()>();

        $r3 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponse: com.fsck.k9.mail.store.imap.ImapResponse newTaggedResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback,java.lang.String)>($r1, $r2);

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response> = $r3;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response>;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void readTokens(com.fsck.k9.mail.store.imap.ImapResponse)>($r3);

        return;
    }
    private java.lang.Object readToken(com.fsck.k9.mail.store.imap.ImapResponse) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponse;

     label1:
        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Object parseToken(com.fsck.k9.mail.store.imap.ImapList)>($r1);

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(")");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("]");

        if $z0 != 0 goto label1;

     label2:
        return $r2;
    }
    private void readTokens(com.fsck.k9.mail.store.imap.ImapResponse) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponse;

        virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: void clear()>();

        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Object readToken(com.fsck.k9.mail.store.imap.ImapResponse)>($r1);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void checkTokenIsString(java.lang.Object)>($r2);

        r3 = (java.lang.String) $r2;

        virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: boolean add(java.lang.Object)>(r3);

        $z0 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: boolean isStatusResponse(java.lang.String)>(r3);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void parseResponseText(com.fsck.k9.mail.store.imap.ImapResponse)>($r1);

        return;

     label1:
        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponseParser: boolean equalsIgnoreCase(java.lang.Object,java.lang.String)>(r3, "LIST");

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponseParser: boolean equalsIgnoreCase(java.lang.Object,java.lang.String)>(r3, "LSUB");

        if $z0 == 0 goto label3;

     label2:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void parseListResponse(com.fsck.k9.mail.store.imap.ImapResponse)>($r1);

        return;

     label3:
        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Object readToken(com.fsck.k9.mail.store.imap.ImapResponse)>($r1);

        if $r2 == null goto label4;

        $z0 = $r2 instanceof com.fsck.k9.mail.store.imap.ImapList;

        if $z0 != 0 goto label3;

        virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: boolean add(java.lang.Object)>($r2);

        goto label3;

     label4:
        return;
    }
    private void readUntaggedResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponseCallback $r1;
        com.fsck.k9.mail.store.imap.ImapResponse $r2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponseCallback;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void parseUntaggedResponse()>();

        $r2 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponse: com.fsck.k9.mail.store.imap.ImapResponse newUntaggedResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback)>($r1);

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response> = $r2;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response>;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void readTokens(com.fsck.k9.mail.store.imap.ImapResponse)>($r2);

        return;
    }
    private void skipIfSpace() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        int $i0;
        com.fsck.k9.mail.filter.PeekableInputStream $r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r1.<com.fsck.k9.mail.filter.PeekableInputStream: int peek()>();

        if $i0 != 32 goto label1;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void expect(char)>(32);

     label1:
        return;
    }
    public com.fsck.k9.mail.store.imap.ImapResponse readResponse() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse readResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback)>(null);

        return $r1;
    }
    public com.fsck.k9.mail.store.imap.ImapResponse readResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        com.fsck.k9.mail.store.imap.ImapResponseCallback $r1;
        java.lang.Exception $r2;
        int $i0;
        com.fsck.k9.mail.filter.PeekableInputStream $r3;
        java.lang.RuntimeException $r4;
        java.lang.Throwable $r5;
        com.fsck.k9.mail.store.imap.ImapResponse r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponseCallback;

     label01:
        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        $i0 = virtualinvoke $r3.<com.fsck.k9.mail.filter.PeekableInputStream: int peek()>();

     label02:
        if $i0 != 43 goto label08;

     label03:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void readContinuationRequest(com.fsck.k9.mail.store.imap.ImapResponseCallback)>($r1);

     label04:
        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Exception exception>;

     label05:
        if $r2 == null goto label13;

     label06:
        $r4 = new java.lang.RuntimeException;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Exception exception>;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("readResponse(): Exception in callback method", $r2);

        throw $r4;

     label07:
        $r5 := @caughtexception;

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response> = null;

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Exception exception> = null;

        throw $r5;

     label08:
        if $i0 != 42 goto label11;

     label09:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void readUntaggedResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback)>($r1);

     label10:
        goto label04;

     label11:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: void readTaggedResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback)>($r1);

     label12:
        goto label04;

     label13:
        r6 = r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response>;

     label14:
        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse response> = null;

        r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.lang.Exception exception> = null;

        return r6;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label05 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
    }
    java.util.List readStatusResponse(java.lang.String, java.lang.String, java.lang.String, com.fsck.k9.mail.store.imap.UntaggedHandler) throws java.io.IOException, com.fsck.k9.mail.store.imap.NegativeImapResponseException
    {
        com.fsck.k9.mail.store.imap.ImapResponseParser r0;
        java.lang.String $r1, $r2, $r3, $r9;
        com.fsck.k9.mail.store.imap.UntaggedHandler $r4;
        java.util.ArrayList r5;
        com.fsck.k9.mail.store.imap.ImapResponse $r6, r7;
        boolean $z0;
        java.lang.StringBuilder $r8;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        int $i0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException $r12;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.fsck.k9.mail.store.imap.UntaggedHandler;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

     label01:
        $r6 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse readResponse()>();

        r7 = $r6;

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label02;

        $z0 = <com.fsck.k9.mail.K9MailLib: boolean DEBUG_PROTOCOL_IMAP>;

        if $z0 == 0 goto label02;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<<");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("k9", $r9);

     label02:
        $r9 = virtualinvoke $r6.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getTag()>();

        if $r9 == null goto label08;

        $r9 = virtualinvoke $r6.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getTag()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label08;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("After sending tag ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", got tag response from previous command ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("k9", $r9);

        $r10 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.fsck.k9.mail.store.imap.ImapResponse) $r11;

        $r9 = virtualinvoke $r6.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getTag()>();

        if $r9 != null goto label04;

        $i0 = virtualinvoke $r6.<com.fsck.k9.mail.store.imap.ImapResponse: int size()>();

        if $i0 < 2 goto label04;

        $r11 = virtualinvoke $r6.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.Object get(int)>(1);

        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponseParser: boolean equalsIgnoreCase(java.lang.Object,java.lang.String)>($r11, "EXISTS");

        if $z0 != 0 goto label03;

        $r11 = virtualinvoke $r6.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.Object get(int)>(1);

        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponseParser: boolean equalsIgnoreCase(java.lang.Object,java.lang.String)>($r11, "EXPUNGE");

        if $z0 != 0 goto label03;

     label04:
        interfaceinvoke $r10.<java.util.Iterator: void remove()>();

        goto label03;

     label05:
        r7 = null;

     label06:
        if r7 == null goto label01;

        $r9 = virtualinvoke r7.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getTag()>();

        if $r9 == null goto label01;

        $i0 = virtualinvoke r7.<com.fsck.k9.mail.store.imap.ImapResponse: int size()>();

        if $i0 < 1 goto label07;

        $r11 = virtualinvoke r7.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.Object get(int)>(0);

        $z0 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponseParser: boolean equalsIgnoreCase(java.lang.Object,java.lang.String)>($r11, "OK");

        if $z0 != 0 goto label10;

     label07:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; response: ");

        $r1 = virtualinvoke r7.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <com.fsck.k9.mail.store.imap.AlertResponse: java.lang.String getAlertText(com.fsck.k9.mail.store.imap.ImapResponse)>(r7);

        $r12 = new com.fsck.k9.mail.store.imap.NegativeImapResponseException;

        specialinvoke $r12.<com.fsck.k9.mail.store.imap.NegativeImapResponseException: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        throw $r12;

     label08:
        if $r4 == null goto label09;

        interfaceinvoke $r4.<com.fsck.k9.mail.store.imap.UntaggedHandler: void handleAsyncUntaggedResponse(com.fsck.k9.mail.store.imap.ImapResponse)>($r6);

     label09:
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label06;

     label10:
        return r5;
    }
