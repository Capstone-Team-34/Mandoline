com.fsck.k9.mail.internet.BinaryTempFileBody extends java.lang.Object implements com.fsck.k9.mail.internet.RawDataBody com.fsck.k9.mail.internet.SizeAware
private static java.io.File mTempDirectory
java.lang.String mEncoding
private java.io.File mFile
    public void <init>(java.lang.String)
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        java.lang.String $r1;
        java.io.File $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding> = null;

        $r2 = <com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mTempDirectory>;

        if $r2 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("setTempDirectory has not been called on BinaryTempFileBody!");

        throw $r3;

     label1:
        r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding> = $r1;

        return;
    }
    static java.io.File access$000(com.fsck.k9.mail.internet.BinaryTempFileBody)
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody $r0;
        java.io.File r1;

        $r0 := @parameter0: com.fsck.k9.mail.internet.BinaryTempFileBody;

        r1 = $r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile>;

        return r1;
    }
    public static java.io.File getTempDirectory()
    {
        java.io.File r0;

        r0 = <com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mTempDirectory>;

        return r0;
    }
    public static void setTempDirectory(java.io.File)
    {
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        <com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mTempDirectory> = $r0;

        return;
    }
    public java.lang.String getEncoding()
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        java.lang.String r1;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        r1 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding>;

        return r1;
    }
    public java.io.File getFile()
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        java.io.File r1;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        r1 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile>;

        return r1;
    }
    public java.io.InputStream getInputStream() throws com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        java.io.IOException r1;
        java.io.File $r2;
        com.fsck.k9.mail.internet.BinaryTempFileBody$BinaryTempFileBodyInputStream $r3;
        java.io.FileInputStream $r4;
        com.fsck.k9.mail.MessagingException $r5;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        $r3 = new com.fsck.k9.mail.internet.BinaryTempFileBody$BinaryTempFileBodyInputStream;

        $r4 = new java.io.FileInputStream;

        $r2 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile>;

     label1:
        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        specialinvoke $r3.<com.fsck.k9.mail.internet.BinaryTempFileBody$BinaryTempFileBodyInputStream: void <init>(com.fsck.k9.mail.internet.BinaryTempFileBody,java.io.InputStream)>(r0, $r4);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r5 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r5.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to open body", r1);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        java.io.File $r1;
        java.io.FileOutputStream $r2;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        $r1 = <com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mTempDirectory>;

        $r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("body", null, $r1);

        r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile> = $r1;

        $r1 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile>;

        virtualinvoke $r1.<java.io.File: void deleteOnExit()>();

        $r2 = new java.io.FileOutputStream;

        $r1 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile>;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        return $r2;
    }
    public long getSize()
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        long $l0;
        java.io.File $r1;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        $r1 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }
    public void setEncoding(java.lang.String) throws com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        java.lang.String $r1, $r4, $r5;
        java.io.IOException r2;
        java.io.FileOutputStream r3;
        boolean $z0;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7;
        java.io.File $r8;
        org.apache.james.mime4j.codec.QuotedPrintableOutputStream r9;
        java.io.FilterOutputStream r10;
        java.io.InputStream $r11;
        com.fsck.k9.mail.MessagingException $r12;
        com.fsck.k9.mail.filter.Base64OutputStream r13;
        java.lang.Throwable $r14, $r15;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        $r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding>;

        if $r4 == null goto label01;

        $r4 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label01;

        return;

     label01:
        $r4 = "8bit";

        $r5 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 != 0 goto label02;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t convert from encoding: ");

        $r1 = r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label02:
        $r8 = <com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mTempDirectory>;

     label03:
        $r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("body", null, $r8);

     label04:
        r3 = new java.io.FileOutputStream;

     label05:
        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

     label06:
        $r4 = "quoted-printable";

     label07:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

     label08:
        if $z0 == 0 goto label17;

     label09:
        r9 = new org.apache.james.mime4j.codec.QuotedPrintableOutputStream;

        specialinvoke r9.<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void <init>(java.io.OutputStream,boolean)>(r3, 0);

     label10:
        r10 = r9;

     label11:
        $r11 = virtualinvoke r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.InputStream getInputStream()>();

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r11, r10);

     label13:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r11);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r10);

     label14:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

     label15:
        r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.File mFile> = $r8;

        r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.lang.String mEncoding> = $r1;

        return;

     label16:
        r2 := @caughtexception;

        $r12 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r12.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to convert body", r2);

        throw $r12;

     label17:
        $r4 = "base64";

     label18:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

     label19:
        if $z0 == 0 goto label22;

     label20:
        r13 = new com.fsck.k9.mail.filter.Base64OutputStream;

        specialinvoke r13.<com.fsck.k9.mail.filter.Base64OutputStream: void <init>(java.io.OutputStream)>(r3);

     label21:
        r10 = r13;

        goto label11;

     label22:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target encoding not supported: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label23:
        $r14 := @caughtexception;

     label24:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        throw $r14;

     label25:
        $r15 := @caughtexception;

     label26:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r11);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r10);

        throw $r15;

     label27:
        nop;

        catch java.io.IOException from label03 to label04 with label16;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.io.IOException from label24 to label25 with label16;
        catch java.lang.Throwable from label26 to label27 with label23;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.internet.BinaryTempFileBody r0;
        java.io.OutputStream $r1;
        java.lang.Throwable $r2;
        java.io.InputStream $r3;

        r0 := @this: com.fsck.k9.mail.internet.BinaryTempFileBody;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = virtualinvoke r0.<com.fsck.k9.mail.internet.BinaryTempFileBody: java.io.InputStream getInputStream()>();

     label1:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r3, $r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
