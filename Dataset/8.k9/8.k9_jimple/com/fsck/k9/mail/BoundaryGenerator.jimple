com.fsck.k9.mail.BoundaryGenerator extends java.lang.Object
private static final com.fsck.k9.mail.BoundaryGenerator INSTANCE
private final java.util.Random random
    static void <clinit>()
    {
        com.fsck.k9.mail.BoundaryGenerator $r0;
        java.util.Random $r1;

        $r0 = new com.fsck.k9.mail.BoundaryGenerator;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        specialinvoke $r0.<com.fsck.k9.mail.BoundaryGenerator: void <init>(java.util.Random)>($r1);

        <com.fsck.k9.mail.BoundaryGenerator: com.fsck.k9.mail.BoundaryGenerator INSTANCE> = $r0;

        return;
    }
    void <init>(java.util.Random)
    {
        com.fsck.k9.mail.BoundaryGenerator r0;
        java.util.Random $r1;

        r0 := @this: com.fsck.k9.mail.BoundaryGenerator;

        $r1 := @parameter0: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mail.BoundaryGenerator: java.util.Random random> = $r1;

        return;
    }
    public static com.fsck.k9.mail.BoundaryGenerator getInstance()
    {
        com.fsck.k9.mail.BoundaryGenerator r0;

        r0 = <com.fsck.k9.mail.BoundaryGenerator: com.fsck.k9.mail.BoundaryGenerator INSTANCE>;

        return r0;
    }
    public java.lang.String generateBoundary()
    {
        com.fsck.k9.mail.BoundaryGenerator r0;
        java.lang.StringBuilder r1;
        int i0, $i1;
        java.util.Random $r2;
        java.lang.String $r3;
        java.util.Locale $r4;

        r0 := @this: com.fsck.k9.mail.BoundaryGenerator;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("----");

        i0 = 0;

     label1:
        if i0 >= 30 goto label2;

        $r2 = r0.<com.fsck.k9.mail.BoundaryGenerator: java.util.Random random>;

        $i1 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>(36);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i1, 36);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r4);

        return $r3;
    }
