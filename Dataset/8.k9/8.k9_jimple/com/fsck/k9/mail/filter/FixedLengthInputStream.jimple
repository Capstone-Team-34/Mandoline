com.fsck.k9.mail.filter.FixedLengthInputStream extends java.io.InputStream
private int mCount
private final java.io.InputStream mIn
private final int mLength
    public void <init>(java.io.InputStream, int)
    {
        com.fsck.k9.mail.filter.FixedLengthInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: com.fsck.k9.mail.filter.FixedLengthInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount> = 0;

        r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: java.io.InputStream mIn> = $r1;

        r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mLength> = $i0;

        return;
    }
    public int available() throws java.io.IOException
    {
        com.fsck.k9.mail.filter.FixedLengthInputStream r0;
        int $i0, $i1;

        r0 := @this: com.fsck.k9.mail.filter.FixedLengthInputStream;

        $i1 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mLength>;

        $i0 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount>;

        $i0 = $i1 - $i0;

        return $i0;
    }
    public int read() throws java.io.IOException
    {
        com.fsck.k9.mail.filter.FixedLengthInputStream r0;
        int $i0, $i1;
        java.io.InputStream $r1;

        r0 := @this: com.fsck.k9.mail.filter.FixedLengthInputStream;

        $i1 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount>;

        $i0 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mLength>;

        if $i1 < $i0 goto label1;

        return -1;

     label1:
        $r1 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: java.io.InputStream mIn>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if $i0 == -1 goto label2;

        $i1 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount>;

        $i1 = $i1 + 1;

        r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount> = $i1;

     label2:
        return $i0;
    }
    public int read(byte[]) throws java.io.IOException
    {
        com.fsck.k9.mail.filter.FixedLengthInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: com.fsck.k9.mail.filter.FixedLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        com.fsck.k9.mail.filter.FixedLengthInputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream $r2;

        r0 := @this: com.fsck.k9.mail.filter.FixedLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount>;

        $i3 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mLength>;

        if $i2 < $i3 goto label1;

        return -1;

     label1:
        $r2 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: java.io.InputStream mIn>;

        $i3 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mLength>;

        $i2 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount>;

        $i2 = $i3 - $i2;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        if $i0 == -1 goto label2;

        $i1 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount>;

        $i1 = $i1 + $i0;

        r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount> = $i1;

     label2:
        return $i0;
    }
    public long skip(long) throws java.io.IOException
    {
        com.fsck.k9.mail.filter.FixedLengthInputStream r0;
        long $l0, $l2;
        java.io.InputStream $r1;
        int $i1;
        byte $b3;

        r0 := @this: com.fsck.k9.mail.filter.FixedLengthInputStream;

        $l0 := @parameter0: long;

        $r1 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: java.io.InputStream mIn>;

        $i1 = virtualinvoke r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int available()>();

        $l2 = (long) $i1;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l2);

        $l0 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l0);

        $b3 = $l0 cmp 0L;

        if $b3 <= 0 goto label1;

        $i1 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount>;

        $l2 = (long) $i1;

        $l2 = $l2 + $l0;

        $i1 = (int) $l2;

        r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mCount> = $i1;

     label1:
        return $l0;
    }
    public java.lang.String toString()
    {
        com.fsck.k9.mail.filter.FixedLengthInputStream r0;
        java.util.Locale $r1;
        java.lang.Object[] $r2;
        java.io.InputStream $r3;
        java.lang.String $r4;
        int $i0;
        java.lang.Integer $r5;

        r0 := @this: com.fsck.k9.mail.filter.FixedLengthInputStream;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: java.io.InputStream mIn>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r2[0] = $r4;

        $i0 = r0.<com.fsck.k9.mail.filter.FixedLengthInputStream: int mLength>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[1] = $r5;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "FixedLengthInputStream(in=%s, length=%d)", $r2);

        return $r4;
    }
