com.fsck.k9.mail.filter.SignSafeOutputStream extends java.io.FilterOutputStream
private static final int DEFAULT_BUFFER_SIZE
private static final byte[] ESCAPED_SPACE
private boolean closed
private final byte[] outBuffer
private int outputIndex
private com.fsck.k9.mail.filter.SignSafeOutputStream$State state
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[3];

        $r0[0] = 61;

        $r0[1] = 50;

        $r0[2] = 48;

        <com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] ESCAPED_SPACE> = $r0;

        return;
    }
    public void <init>(java.io.OutputStream)
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        java.io.OutputStream $r1;
        com.fsck.k9.mail.filter.SignSafeOutputStream$State $r2;
        byte[] $r3;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r2 = <com.fsck.k9.mail.filter.SignSafeOutputStream$State: com.fsck.k9.mail.filter.SignSafeOutputStream$State cr_FROM>;

        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: com.fsck.k9.mail.filter.SignSafeOutputStream$State state> = $r2;

        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: boolean closed> = 0;

        $r3 = newarray (byte)[1024];

        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] outBuffer> = $r3;

        return;
    }
    private void writeToBuffer(byte) throws java.io.IOException
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        byte $b0;
        int $i1, $i2;
        byte[] $r1;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        $b0 := @parameter0: byte;

        $r1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] outBuffer>;

        $i2 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: int outputIndex>;

        $i1 = $i2 + 1;

        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: int outputIndex> = $i1;

        $r1[$i2] = $b0;

        $i1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: int outputIndex>;

        $r1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] outBuffer>;

        $i2 = lengthof $r1;

        if $i1 < $i2 goto label1;

        virtualinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void flushOutput()>();

     label1:
        return;
    }
    public void close() throws java.io.IOException
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        $z0 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void flush()>();

     label2:
        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: boolean closed> = 1;

        return;

     label3:
        $r1 := @caughtexception;

        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: boolean closed> = 1;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void encode(byte) throws java.io.IOException
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        byte $b0;
        com.fsck.k9.mail.filter.SignSafeOutputStream$State $r1, $r2;
        byte[] $r3;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        $b0 := @parameter0: byte;

        $r1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: com.fsck.k9.mail.filter.SignSafeOutputStream$State state>;

        $r1 = virtualinvoke $r1.<com.fsck.k9.mail.filter.SignSafeOutputStream$State: com.fsck.k9.mail.filter.SignSafeOutputStream$State nextState(int)>($b0);

        $r2 = <com.fsck.k9.mail.filter.SignSafeOutputStream$State: com.fsck.k9.mail.filter.SignSafeOutputStream$State SPACE_FROM>;

        if $r1 != $r2 goto label1;

        $r1 = <com.fsck.k9.mail.filter.SignSafeOutputStream$State: com.fsck.k9.mail.filter.SignSafeOutputStream$State INIT>;

        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: com.fsck.k9.mail.filter.SignSafeOutputStream$State state> = $r1;

        $r3 = <com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] ESCAPED_SPACE>;

        $b0 = $r3[0];

        specialinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void writeToBuffer(byte)>($b0);

        $r3 = <com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] ESCAPED_SPACE>;

        $b0 = $r3[1];

        specialinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void writeToBuffer(byte)>($b0);

        $r3 = <com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] ESCAPED_SPACE>;

        $b0 = $r3[2];

        specialinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void writeToBuffer(byte)>($b0);

        return;

     label1:
        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: com.fsck.k9.mail.filter.SignSafeOutputStream$State state> = $r1;

        specialinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void writeToBuffer(byte)>($b0);

        return;
    }
    public void flush() throws java.io.IOException
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        virtualinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void flushOutput()>();

        $r1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }
    void flushOutput() throws java.io.IOException
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        int $i0, $i1;
        byte[] $r1;
        java.io.OutputStream $r2;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        $i0 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: int outputIndex>;

        $r1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] outBuffer>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: java.io.OutputStream out>;

        $r1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] outBuffer>;

        $i0 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: int outputIndex>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

     label1:
        r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: int outputIndex> = 0;

        return;

     label2:
        $r2 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: java.io.OutputStream out>;

        $r1 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: byte[] outBuffer>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r1);

        goto label1;
    }
    public void write(int) throws java.io.IOException
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        int $i0;
        boolean $z0;
        java.io.IOException $r1;
        byte $b1;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        $i0 := @parameter0: int;

        $z0 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r1;

     label1:
        $b1 = (byte) $i0;

        virtualinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void encode(byte)>($b1);

        return;
    }
    public void write(byte[], int, int) throws java.io.IOException
    {
        com.fsck.k9.mail.filter.SignSafeOutputStream r0;
        byte[] $r1;
        int $i0, $i1, i2, $i3;
        boolean $z0;
        java.io.IOException $r2;
        byte $b4;

        r0 := @this: com.fsck.k9.mail.filter.SignSafeOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r2;

     label1:
        i2 = $i0;

     label2:
        $i3 = $i1 + $i0;

        if i2 >= $i3 goto label3;

        $b4 = $r1[i2];

        virtualinvoke r0.<com.fsck.k9.mail.filter.SignSafeOutputStream: void encode(byte)>($b4);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }
