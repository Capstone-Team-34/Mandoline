com.larswerkman.colorpicker.ColorPicker extends android.view.View
private static final int[] COLORS
private static final java.lang.String STATE_ANGLE
private static final java.lang.String STATE_PARENT
private float mAngle
private android.graphics.Paint mColorWheelPaint
private float mColorWheelRadius
private android.graphics.RectF mColorWheelRectangle
private int mColorWheelStrokeWidth
private android.graphics.Paint mPointerColor
private android.graphics.Paint mPointerHaloPaint
private int mPointerRadius
private float mTranslationOffset
private boolean mUserIsMovingPointer
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[7];

        $r0[0] = -65536;

        $r0[1] = -65281;

        $r0[2] = -16776961;

        $r0[3] = -16711681;

        $r0[4] = -16711936;

        $r0[5] = -256;

        $r0[6] = -65536;

        <com.larswerkman.colorpicker.ColorPicker: int[] COLORS> = $r0;

        return;
    }
    public void <init>(android.content.Context)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.content.Context $r1;
        android.graphics.RectF $r2;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>($r1);

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.RectF mColorWheelRectangle> = $r2;

        r0.<com.larswerkman.colorpicker.ColorPicker: boolean mUserIsMovingPointer> = 0;

        specialinvoke r0.<com.larswerkman.colorpicker.ColorPicker: void init(android.util.AttributeSet,int)>(null, 0);

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        android.graphics.RectF $r3;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.RectF mColorWheelRectangle> = $r3;

        r0.<com.larswerkman.colorpicker.ColorPicker: boolean mUserIsMovingPointer> = 0;

        specialinvoke r0.<com.larswerkman.colorpicker.ColorPicker: void init(android.util.AttributeSet,int)>($r2, 0);

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        android.graphics.RectF $r3;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.RectF mColorWheelRectangle> = $r3;

        r0.<com.larswerkman.colorpicker.ColorPicker: boolean mUserIsMovingPointer> = 0;

        specialinvoke r0.<com.larswerkman.colorpicker.ColorPicker: void init(android.util.AttributeSet,int)>($r2, $i0);

        return;
    }
    private static int ave(int, int, float)
    {
        int $i0, $i1;
        float $f0, $f1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $f0 := @parameter2: float;

        $i1 = $i1 - $i0;

        $f1 = (float) $i1;

        $f0 = $f1 * $f0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i0 = $i1 + $i0;

        return $i0;
    }
    private static int calculateColor(float)
    {
        float $f0, $f1;
        int i0, i1, $i3, $i4, $i5, $i6;
        double $d0;
        byte $b2;
        int[] $r0, $r1;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = $d0 / 6.283185307179586;

        $f0 = (float) $d0;

        $b2 = $f0 cmpg 0.0F;

        if $b2 >= 0 goto label1;

        $f0 = $f0 + 1.0F;

     label1:
        $b2 = $f0 cmpg 0.0F;

        if $b2 > 0 goto label2;

        $r0 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i0 = $r0[0];

        return i0;

     label2:
        $b2 = $f0 cmpl 1.0F;

        if $b2 < 0 goto label3;

        $r0 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        $r1 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i0 = lengthof $r1;

        i0 = i0 + -1;

        i0 = $r0[i0];

        return i0;

     label3:
        $r0 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i0 = lengthof $r0;

        i0 = i0 + -1;

        $f1 = (float) i0;

        $f0 = $f0 * $f1;

        i1 = (int) $f0;

        $f1 = (float) i1;

        $f0 = $f0 - $f1;

        $r0 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i0 = $r0[i1];

        $r0 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i1 = i1 + 1;

        i1 = $r0[i1];

        $i3 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        $i4 = staticinvoke <android.graphics.Color: int alpha(int)>(i1);

        $i3 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int ave(int,int,float)>($i3, $i4, $f0);

        $i4 = staticinvoke <android.graphics.Color: int red(int)>(i0);

        $i5 = staticinvoke <android.graphics.Color: int red(int)>(i1);

        $i4 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int ave(int,int,float)>($i4, $i5, $f0);

        $i5 = staticinvoke <android.graphics.Color: int green(int)>(i0);

        $i6 = staticinvoke <android.graphics.Color: int green(int)>(i1);

        $i5 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int ave(int,int,float)>($i5, $i6, $f0);

        i0 = staticinvoke <android.graphics.Color: int blue(int)>(i0);

        i1 = staticinvoke <android.graphics.Color: int blue(int)>(i1);

        i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int ave(int,int,float)>(i0, i1, $f0);

        i0 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>($i3, $i4, $i5, i0);

        return i0;
    }
    private float[] calculatePointerPosition(float)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        float $f0, f1, $f2;
        double $d0, $d1;
        float[] $r1;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $f0 := @parameter0: float;

        f1 = r0.<com.larswerkman.colorpicker.ColorPicker: float mColorWheelRadius>;

        $d0 = (double) f1;

        $d1 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        f1 = (float) $d0;

        $f2 = r0.<com.larswerkman.colorpicker.ColorPicker: float mColorWheelRadius>;

        $d0 = (double) $f2;

        $d1 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        $f0 = (float) $d0;

        $r1 = newarray (float)[2];

        $r1[0] = f1;

        $r1[1] = $f0;

        return $r1;
    }
    private float colorToAngle(int)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        int $i0, i1, i2, i3, i4, i5;
        double d0, $d1;
        int[] $r1;
        float f0;
        byte $b6;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.larswerkman.colorpicker.ColorPicker: int[] normalizeColor(int)>($i0);

        i3 = $r1[0];

        i1 = $r1[1];

        i5 = $r1[2];

        $i0 = i1 ^ -1;

        $i0 = i3 & $i0;

        i4 = 0;

     label01:
        $r1 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i2 = lengthof $r1;

        i2 = i2 + -1;

        if i4 >= i2 goto label09;

        $r1 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i2 = $r1[i4];

        if i2 != $i0 goto label08;

        $r1 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i2 = i4 + 1;

        i2 = $r1[i2];

        i3 = i3 >> i5;

        i3 = i3 & 255;

        d0 = (double) i3;

        d0 = d0 / 255.0;

        i3 = i2 & i1;

        i1 = $i0 & i1;

        if i3 == i1 goto label04;

        if i2 >= $i0 goto label03;

        $i0 = i4 + 1;

        $d1 = (double) $i0;

        d0 = $d1 - d0;

     label02:
        d0 = 6.283185307179586 * d0;

        $r1 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $d1 = (double) $i0;

        d0 = d0 / $d1;

        f0 = (float) d0;

        d0 = (double) f0;

        $b6 = d0 cmpl 3.141592653589793;

        if $b6 <= 0 goto label10;

        d0 = (double) f0;

        d0 = d0 - 6.283185307179586;

        f0 = (float) d0;

        return f0;

     label03:
        $d1 = (double) i4;

        d0 = $d1 + d0;

        goto label02;

     label04:
        if i4 != 0 goto label06;

        $r1 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i1 = lengthof $r1;

        i1 = i1 + -1;

     label05:
        $r1 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        i4 = i1 + -1;

        i4 = $r1[i4];

        if i4 >= $i0 goto label07;

        $i0 = i1 + -1;

        $d1 = (double) $i0;

        d0 = $d1 + d0;

        goto label02;

     label06:
        i1 = i4;

        goto label05;

     label07:
        $d1 = (double) i1;

        d0 = $d1 - d0;

        goto label02;

     label08:
        i4 = i4 + 1;

        goto label01;

     label09:
        return 0.0F;

     label10:
        return f0;
    }
    public static int getRandomColor()
    {
        double $d0;
        float $f0;
        int $i0;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d0 = $d0 * 2.0;

        $d0 = $d0 * 3.141592653589793;

        $f0 = (float) $d0;

        $i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int calculateColor(float)>($f0);

        return $i0;
    }
    private void init(android.util.AttributeSet, int)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.util.AttributeSet $r1;
        int $i0;
        android.graphics.SweepGradient r2;
        android.content.Context $r3;
        int[] $r4;
        android.content.res.TypedArray $r5;
        android.graphics.Paint $r6;
        android.graphics.Paint$Style $r7;
        float $f0;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r1 := @parameter0: android.util.AttributeSet;

        $i0 := @parameter1: int;

        $r3 = virtualinvoke r0.<com.larswerkman.colorpicker.ColorPicker: android.content.Context getContext()>();

        $r4 = <com.larswerkman.colorpicker.R$styleable: int[] ColorPicker>;

        $r5 = virtualinvoke $r3.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r1, $r4, $i0, 0);

        $i0 = <com.larswerkman.colorpicker.R$styleable: int ColorPicker_wheel_size>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getInteger(int,int)>($i0, 16);

        r0.<com.larswerkman.colorpicker.ColorPicker: int mColorWheelStrokeWidth> = $i0;

        $i0 = <com.larswerkman.colorpicker.R$styleable: int ColorPicker_pointer_size>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getInteger(int,int)>($i0, 48);

        r0.<com.larswerkman.colorpicker.ColorPicker: int mPointerRadius> = $i0;

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        r2 = new android.graphics.SweepGradient;

        $r4 = <com.larswerkman.colorpicker.ColorPicker: int[] COLORS>;

        specialinvoke r2.<android.graphics.SweepGradient: void <init>(float,float,int[],float[])>(0.0F, 0.0F, $r4, null);

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mColorWheelPaint> = $r6;

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        virtualinvoke $r6.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r2);

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        $r7 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r6.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r7);

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        $i0 = r0.<com.larswerkman.colorpicker.ColorPicker: int mColorWheelStrokeWidth>;

        $f0 = (float) $i0;

        virtualinvoke $r6.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerHaloPaint> = $r6;

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>(-16777216);

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r6.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r6.<android.graphics.Paint: void setAlpha(int)>(96);

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerColor> = $r6;

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerColor>;

        virtualinvoke $r6.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle> = -1.5707964F;

        $r6 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerColor>;

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        $i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int calculateColor(float)>($f0);

        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>($i0);

        return;
    }
    private int[] normalizeColor(int)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        int $i0, $i1, $i2, i3, i4, i5;
        short s6, s7, s8;
        byte b9;
        int[] $r1;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <android.graphics.Color: int red(int)>($i0);

        $i2 = staticinvoke <android.graphics.Color: int green(int)>($i0);

        $i0 = staticinvoke <android.graphics.Color: int blue(int)>($i0);

        i3 = $i1;

        i4 = $i2;

        i5 = $i0;

        s6 = 0;

        s7 = 0;

        s8 = 0;

        if $i1 >= $i2 goto label3;

        if $i1 >= $i0 goto label3;

        i3 = 0;

        if $i2 <= $i0 goto label2;

        b9 = 0;

        s8 = 255;

        i4 = 255;

     label1:
        $i0 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(255, i3, i4, i5);

        $i1 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(0, s6, s7, s8);

        $r1 = newarray (int)[3];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r1[2] = b9;

        return $r1;

     label2:
        b9 = 8;

        s7 = 255;

        i5 = 255;

        goto label1;

     label3:
        if $i2 >= $i1 goto label5;

        if $i2 >= $i0 goto label5;

        i4 = 0;

        if $i1 <= $i0 goto label4;

        b9 = 0;

        s8 = 255;

        i3 = 255;

        goto label1;

     label4:
        b9 = 16;

        s6 = 255;

        i5 = 255;

        goto label1;

     label5:
        i5 = 0;

        if $i1 <= $i2 goto label6;

        b9 = 8;

        s7 = 255;

        i3 = 255;

        goto label1;

     label6:
        b9 = 16;

        s6 = 255;

        i4 = 255;

        goto label1;
    }
    public int getColor()
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        int $i0;
        float $f0;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        $i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int calculateColor(float)>($f0);

        return $i0;
    }
    protected void onDraw(android.graphics.Canvas)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.graphics.Canvas $r1;
        float[] $r2;
        float $f0, $f1, $f2;
        android.graphics.RectF $r3;
        android.graphics.Paint $r4;
        int $i0;
        double $d0;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r1 := @parameter0: android.graphics.Canvas;

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mTranslationOffset>;

        $f1 = r0.<com.larswerkman.colorpicker.ColorPicker: float mTranslationOffset>;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r3 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.RectF mColorWheelRectangle>;

        $r4 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>($r3, $r4);

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        $r2 = specialinvoke r0.<com.larswerkman.colorpicker.ColorPicker: float[] calculatePointerPosition(float)>($f0);

        $f0 = $r2[0];

        $f1 = $r2[1];

        $i0 = r0.<com.larswerkman.colorpicker.ColorPicker: int mPointerRadius>;

        $f2 = (float) $i0;

        $r4 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r4);

        $f0 = $r2[0];

        $f1 = $r2[1];

        $i0 = r0.<com.larswerkman.colorpicker.ColorPicker: int mPointerRadius>;

        $d0 = (double) $i0;

        $d0 = $d0 / 1.2;

        $f2 = (float) $d0;

        $r4 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerColor>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r4);

        return;
    }
    protected void onMeasure(int, int)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        android.graphics.RectF $r1;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.larswerkman.colorpicker.ColorPicker: int getSuggestedMinimumHeight()>();

        $i1 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int getDefaultSize(int,int)>($i2, $i1);

        $i2 = virtualinvoke r0.<com.larswerkman.colorpicker.ColorPicker: int getSuggestedMinimumWidth()>();

        $i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int getDefaultSize(int,int)>($i2, $i0);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        virtualinvoke r0.<com.larswerkman.colorpicker.ColorPicker: void setMeasuredDimension(int,int)>($i0, $i0);

        $f2 = (float) $i0;

        $f2 = $f2 * 0.5F;

        r0.<com.larswerkman.colorpicker.ColorPicker: float mTranslationOffset> = $f2;

        $f2 = r0.<com.larswerkman.colorpicker.ColorPicker: float mTranslationOffset>;

        $i0 = r0.<com.larswerkman.colorpicker.ColorPicker: int mPointerRadius>;

        $f0 = (float) $i0;

        $f2 = $f2 - $f0;

        r0.<com.larswerkman.colorpicker.ColorPicker: float mColorWheelRadius> = $f2;

        $r1 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.RectF mColorWheelRectangle>;

        $f2 = r0.<com.larswerkman.colorpicker.ColorPicker: float mColorWheelRadius>;

        $f2 = neg $f2;

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mColorWheelRadius>;

        $f3 = neg $f0;

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mColorWheelRadius>;

        $f1 = r0.<com.larswerkman.colorpicker.ColorPicker: float mColorWheelRadius>;

        virtualinvoke $r1.<android.graphics.RectF: void set(float,float,float,float)>($f2, $f3, $f0, $f1);

        return;
    }
    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.os.Parcelable $r1;
        android.os.Bundle r2;
        float $f0;
        android.graphics.Paint $r3;
        int $i0;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r1 := @parameter0: android.os.Parcelable;

        r2 = (android.os.Bundle) $r1;

        $r1 = virtualinvoke r2.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("parent");

        specialinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $f0 = virtualinvoke r2.<android.os.Bundle: float getFloat(java.lang.String)>("angle");

        r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle> = $f0;

        $r3 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerColor>;

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        $i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int calculateColor(float)>($f0);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        return;
    }
    protected android.os.Parcelable onSaveInstanceState()
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.os.Bundle r1;
        float $f0;
        android.os.Parcelable $r2;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r2 = specialinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("parent", $r2);

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        virtualinvoke r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("angle", $f0);

        return r1;
    }
    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        android.view.MotionEvent $r1;
        float f0, f1, $f2;
        int $i0;
        float[] $r2;
        byte $b1;
        boolean $z0;
        double $d0, $d1;
        android.graphics.Paint $r3;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $r1 := @parameter0: android.view.MotionEvent;

        f1 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mTranslationOffset>;

        f0 = f1 - f0;

        f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $f2 = r0.<com.larswerkman.colorpicker.ColorPicker: float mTranslationOffset>;

        f1 = f1 - $f2;

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        $f2 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        $r2 = specialinvoke r0.<com.larswerkman.colorpicker.ColorPicker: float[] calculatePointerPosition(float)>($f2);

        $f2 = $r2[0];

        $f2 = $f2 - 48.0F;

        $b1 = f0 cmpl $f2;

        if $b1 < 0 goto label5;

        $f2 = $r2[0];

        $f2 = $f2 + 48.0F;

        $b1 = f0 cmpg $f2;

        if $b1 > 0 goto label5;

        f0 = $r2[1];

        f0 = f0 - 48.0F;

        $b1 = f1 cmpl f0;

        if $b1 < 0 goto label5;

        f0 = $r2[1];

        f0 = f0 + 48.0F;

        $b1 = f1 cmpg f0;

        if $b1 > 0 goto label5;

        r0.<com.larswerkman.colorpicker.ColorPicker: boolean mUserIsMovingPointer> = 1;

        virtualinvoke r0.<com.larswerkman.colorpicker.ColorPicker: void invalidate()>();

        return 1;

     label3:
        $z0 = r0.<com.larswerkman.colorpicker.ColorPicker: boolean mUserIsMovingPointer>;

        if $z0 == 0 goto label5;

        $d0 = (double) f1;

        $d1 = (double) f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        f1 = (float) $d0;

        r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle> = f1;

        $r3 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerColor>;

        f1 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        $i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int calculateColor(float)>(f1);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<com.larswerkman.colorpicker.ColorPicker: void invalidate()>();

        return 1;

     label4:
        r0.<com.larswerkman.colorpicker.ColorPicker: boolean mUserIsMovingPointer> = 0;

     label5:
        return 1;
    }
    public void setColor(int)
    {
        com.larswerkman.colorpicker.ColorPicker r0;
        int $i0;
        float $f0;
        android.graphics.Paint $r1;

        r0 := @this: com.larswerkman.colorpicker.ColorPicker;

        $i0 := @parameter0: int;

        $f0 = specialinvoke r0.<com.larswerkman.colorpicker.ColorPicker: float colorToAngle(int)>($i0);

        r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle> = $f0;

        $r1 = r0.<com.larswerkman.colorpicker.ColorPicker: android.graphics.Paint mPointerColor>;

        $f0 = r0.<com.larswerkman.colorpicker.ColorPicker: float mAngle>;

        $i0 = staticinvoke <com.larswerkman.colorpicker.ColorPicker: int calculateColor(float)>($f0);

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<com.larswerkman.colorpicker.ColorPicker: void invalidate()>();

        return;
    }
