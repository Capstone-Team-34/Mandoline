com.bumptech.glide.BitmapRequestBuilder extends com.bumptech.glide.GenericRequestBuilder implements com.bumptech.glide.BitmapOptions
private final com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool
private com.bumptech.glide.load.DecodeFormat decodeFormat
private com.bumptech.glide.load.resource.bitmap.Downsampler downsampler
private com.bumptech.glide.load.ResourceDecoder imageDecoder
private com.bumptech.glide.load.ResourceDecoder videoDecoder
    void <init>(com.bumptech.glide.provider.LoadProvider, java.lang.Class, com.bumptech.glide.GenericRequestBuilder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.provider.LoadProvider r1;
        java.lang.Class r2;
        com.bumptech.glide.GenericRequestBuilder r3;
        com.bumptech.glide.load.resource.bitmap.Downsampler $r4;
        com.bumptech.glide.Glide $r5;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r6;
        com.bumptech.glide.load.DecodeFormat $r7;
        com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder $r8;
        com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDecoder $r9;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.provider.LoadProvider;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: com.bumptech.glide.GenericRequestBuilder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: void <init>(com.bumptech.glide.provider.LoadProvider,java.lang.Class,com.bumptech.glide.GenericRequestBuilder)>(r1, r2, r3);

        $r4 = <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler AT_LEAST>;

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.resource.bitmap.Downsampler downsampler> = $r4;

        $r5 = r3.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.Glide glide>;

        $r6 = virtualinvoke $r5.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool getBitmapPool()>();

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool> = $r6;

        $r5 = r3.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.Glide glide>;

        $r7 = virtualinvoke $r5.<com.bumptech.glide.Glide: com.bumptech.glide.load.DecodeFormat getDecodeFormat()>();

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat> = $r7;

        $r8 = new com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;

        $r6 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $r7 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat>;

        specialinvoke $r8.<com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r6, $r7);

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder imageDecoder> = $r8;

        $r9 = new com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDecoder;

        $r6 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $r7 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat>;

        specialinvoke $r9.<com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDecoder: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r6, $r7);

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder videoDecoder> = $r9;

        return;
    }
    private com.bumptech.glide.BitmapRequestBuilder downsample(com.bumptech.glide.load.resource.bitmap.Downsampler)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.bitmap.Downsampler $r1;
        com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder $r2;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r3;
        com.bumptech.glide.load.DecodeFormat $r4;
        com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder $r5;
        com.bumptech.glide.load.ResourceDecoder $r6, $r7;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.resource.bitmap.Downsampler downsampler> = $r1;

        $r2 = new com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;

        $r3 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $r4 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat>;

        specialinvoke $r2.<com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder: void <init>(com.bumptech.glide.load.resource.bitmap.Downsampler,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r1, $r3, $r4);

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder imageDecoder> = $r2;

        $r5 = new com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder;

        $r6 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder imageDecoder>;

        $r7 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder videoDecoder>;

        specialinvoke $r5.<com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder: void <init>(com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.ResourceDecoder)>($r6, $r7);

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)>($r5);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder animate(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder animate(int)>($i0);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder animate(android.view.animation.Animation)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.view.animation.Animation $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.view.animation.Animation;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder animate(android.view.animation.Animation)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder animate(com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder animate(com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder animate(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder animate(int)>($i0);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder animate(android.view.animation.Animation)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.view.animation.Animation $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.view.animation.Animation;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder animate(android.view.animation.Animation)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder animate(com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder animate(com.bumptech.glide.request.animation.ViewPropertyAnimation$Animator)>($r1);

        return r0;
    }
    void applyCenterCrop()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder centerCrop()>();

        return;
    }
    void applyFitCenter()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder fitCenter()>();

        return;
    }
    public com.bumptech.glide.BitmapRequestBuilder approximate()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.bitmap.Downsampler $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 = <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler AT_LEAST>;

        r0 = specialinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder downsample(com.bumptech.glide.load.resource.bitmap.Downsampler)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder asIs()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.bitmap.Downsampler $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 = <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler NONE>;

        r0 = specialinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder downsample(com.bumptech.glide.load.resource.bitmap.Downsampler)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder atMost()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.bitmap.Downsampler $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 = <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler AT_MOST>;

        r0 = specialinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder downsample(com.bumptech.glide.load.resource.bitmap.Downsampler)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder cacheDecoder(com.bumptech.glide.load.ResourceDecoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceDecoder r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.ResourceDecoder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder cacheDecoder(com.bumptech.glide.load.ResourceDecoder)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder cacheDecoder(com.bumptech.glide.load.ResourceDecoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceDecoder $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.ResourceDecoder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder cacheDecoder(com.bumptech.glide.load.ResourceDecoder)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder centerCrop()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.bitmap.BitmapTransformation[] $r1;
        com.bumptech.glide.Glide $r2;
        com.bumptech.glide.load.resource.bitmap.CenterCrop $r3;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 = newarray (com.bumptech.glide.load.resource.bitmap.BitmapTransformation)[1];

        $r2 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.Glide glide>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.CenterCrop getBitmapCenterCrop()>();

        $r1[0] = $r3;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation[])>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder centerCrop()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder centerCrop()>();

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder clone()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.GenericRequestBuilder $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 = specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder clone()>();

        r0 = (com.bumptech.glide.BitmapRequestBuilder) $r1;

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder clone()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder clone()>();

        return r0;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder clone()>();

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceDecoder r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.ResourceDecoder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceDecoder $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.ResourceDecoder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.engine.DiskCacheStrategy;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.engine.DiskCacheStrategy;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder dontAnimate()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder dontAnimate()>();

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder dontAnimate()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder dontAnimate()>();

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder dontTransform()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder dontTransform()>();

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder dontTransform()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder dontTransform()>();

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder encoder(com.bumptech.glide.load.ResourceEncoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceEncoder r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.ResourceEncoder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder encoder(com.bumptech.glide.load.ResourceEncoder)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder encoder(com.bumptech.glide.load.ResourceEncoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceEncoder $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.ResourceEncoder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder encoder(com.bumptech.glide.load.ResourceEncoder)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder error(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder error(int)>($i0);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder error(android.graphics.drawable.Drawable)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder error(android.graphics.drawable.Drawable)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder error(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder error(int)>($i0);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder error(android.graphics.drawable.Drawable)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder error(android.graphics.drawable.Drawable)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder fallback(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder fallback(int)>($i0);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder fallback(android.graphics.drawable.Drawable)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder fallback(android.graphics.drawable.Drawable)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder fallback(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder fallback(int)>($i0);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder fallback(android.graphics.drawable.Drawable)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder fallback(android.graphics.drawable.Drawable)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder fitCenter()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.bitmap.BitmapTransformation[] $r1;
        com.bumptech.glide.Glide $r2;
        com.bumptech.glide.load.resource.bitmap.FitCenter $r3;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 = newarray (com.bumptech.glide.load.resource.bitmap.BitmapTransformation)[1];

        $r2 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.Glide glide>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.FitCenter getBitmapFitCenter()>();

        $r1[0] = $r3;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation[])>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder fitCenter()
    {
        com.bumptech.glide.BitmapRequestBuilder r0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder fitCenter()>();

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder format(com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.DecodeFormat $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r2;
        com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder $r3;
        com.bumptech.glide.load.resource.bitmap.Downsampler $r4;
        com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDecoder $r5;
        com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder $r6;
        com.bumptech.glide.load.resource.file.FileToStreamDecoder $r7;
        com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder $r8;
        com.bumptech.glide.load.ResourceDecoder $r9, $r10;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.DecodeFormat;

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat> = $r1;

        $r3 = new com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;

        $r4 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.resource.bitmap.Downsampler downsampler>;

        $r2 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        specialinvoke $r3.<com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder: void <init>(com.bumptech.glide.load.resource.bitmap.Downsampler,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r4, $r2, $r1);

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder imageDecoder> = $r3;

        $r5 = new com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDecoder;

        $r6 = new com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder;

        specialinvoke $r6.<com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder: void <init>()>();

        $r2 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        specialinvoke $r5.<com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDecoder: void <init>(com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r6, $r2, $r1);

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder videoDecoder> = $r5;

        $r7 = new com.bumptech.glide.load.resource.file.FileToStreamDecoder;

        $r3 = new com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;

        $r4 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.resource.bitmap.Downsampler downsampler>;

        $r2 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        specialinvoke $r3.<com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder: void <init>(com.bumptech.glide.load.resource.bitmap.Downsampler,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r4, $r2, $r1);

        specialinvoke $r7.<com.bumptech.glide.load.resource.file.FileToStreamDecoder: void <init>(com.bumptech.glide.load.ResourceDecoder)>($r3);

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder cacheDecoder(com.bumptech.glide.load.ResourceDecoder)>($r7);

        $r8 = new com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder;

        $r9 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder imageDecoder>;

        $r10 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder videoDecoder>;

        specialinvoke $r8.<com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder: void <init>(com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.ResourceDecoder)>($r9, $r10);

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)>($r8);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder imageDecoder(com.bumptech.glide.load.ResourceDecoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceDecoder r1, $r3;
        com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder $r2;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.ResourceDecoder;

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder imageDecoder> = r1;

        $r2 = new com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder;

        $r3 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder videoDecoder>;

        specialinvoke $r2.<com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder: void <init>(com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.ResourceDecoder)>(r1, $r3);

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)>($r2);

        return r0;
    }
    public com.bumptech.glide.request.target.Target into(android.widget.ImageView)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.widget.ImageView $r1;
        com.bumptech.glide.request.target.Target $r2;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.widget.ImageView;

        $r2 = specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.request.target.Target into(android.widget.ImageView)>($r1);

        return $r2;
    }
    public com.bumptech.glide.BitmapRequestBuilder listener(com.bumptech.glide.request.RequestListener)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.request.RequestListener r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.request.RequestListener;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder listener(com.bumptech.glide.request.RequestListener)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder listener(com.bumptech.glide.request.RequestListener)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.request.RequestListener $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.request.RequestListener;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder listener(com.bumptech.glide.request.RequestListener)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder load(java.lang.Object)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        java.lang.Object r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder load(java.lang.Object)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder load(java.lang.Object)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        java.lang.Object $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder load(java.lang.Object)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder override(int, int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder override(int,int)>($i0, $i1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder override(int, int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder override(int,int)>($i0, $i1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder placeholder(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder placeholder(int)>($i0);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder placeholder(android.graphics.drawable.Drawable)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder placeholder(android.graphics.drawable.Drawable)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder placeholder(int)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        int $i0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder placeholder(int)>($i0);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder placeholder(android.graphics.drawable.Drawable)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder placeholder(android.graphics.drawable.Drawable)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder priority(com.bumptech.glide.Priority)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.Priority $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.Priority;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder priority(com.bumptech.glide.Priority)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder priority(com.bumptech.glide.Priority)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.Priority $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.Priority;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder priority(com.bumptech.glide.Priority)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder signature(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.Key $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder signature(com.bumptech.glide.load.Key)>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder signature(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.Key $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder signature(com.bumptech.glide.load.Key)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder sizeMultiplier(float)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        float $f0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $f0 := @parameter0: float;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder sizeMultiplier(float)>($f0);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder sizeMultiplier(float)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        float $f0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $f0 := @parameter0: float;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder sizeMultiplier(float)>($f0);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder skipMemoryCache(boolean)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        boolean $z0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder skipMemoryCache(boolean)>($z0);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder skipMemoryCache(boolean)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        boolean $z0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $z0 := @parameter0: boolean;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder skipMemoryCache(boolean)>($z0);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder sourceEncoder(com.bumptech.glide.load.Encoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.Encoder r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.Encoder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder sourceEncoder(com.bumptech.glide.load.Encoder)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder sourceEncoder(com.bumptech.glide.load.Encoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.Encoder $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.Encoder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder sourceEncoder(com.bumptech.glide.load.Encoder)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder thumbnail(float)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        float $f0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $f0 := @parameter0: float;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder thumbnail(float)>($f0);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder thumbnail(com.bumptech.glide.BitmapRequestBuilder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0, r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.BitmapRequestBuilder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder thumbnail(com.bumptech.glide.GenericRequestBuilder)>(r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder thumbnail(com.bumptech.glide.GenericRequestBuilder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.GenericRequestBuilder r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.GenericRequestBuilder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder thumbnail(com.bumptech.glide.GenericRequestBuilder)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder thumbnail(float)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        float $f0;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $f0 := @parameter0: float;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder thumbnail(float)>($f0);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder thumbnail(com.bumptech.glide.GenericRequestBuilder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.GenericRequestBuilder $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.GenericRequestBuilder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder thumbnail(com.bumptech.glide.GenericRequestBuilder)>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder transcoder(com.bumptech.glide.load.resource.transcode.ResourceTranscoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder transcoder(com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>(r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder transcoder(com.bumptech.glide.load.resource.transcode.ResourceTranscoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder transcoder(com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>($r1);

        return r0;
    }
    public transient com.bumptech.glide.BitmapRequestBuilder transform(com.bumptech.glide.load.Transformation[])
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.Transformation[] r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.Transformation[];

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder transform(com.bumptech.glide.load.Transformation[])>(r1);

        return r0;
    }
    public transient com.bumptech.glide.BitmapRequestBuilder transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation[])
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.resource.bitmap.BitmapTransformation[] $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.BitmapTransformation[];

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder transform(com.bumptech.glide.load.Transformation[])>($r1);

        return r0;
    }
    public volatile com.bumptech.glide.GenericRequestBuilder transform(com.bumptech.glide.load.Transformation[])
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.Transformation[] $r1;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.Transformation[];

        r0 = virtualinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.BitmapRequestBuilder transform(com.bumptech.glide.load.Transformation[])>($r1);

        return r0;
    }
    public com.bumptech.glide.BitmapRequestBuilder videoDecoder(com.bumptech.glide.load.ResourceDecoder)
    {
        com.bumptech.glide.BitmapRequestBuilder r0;
        com.bumptech.glide.load.ResourceDecoder r1, $r3;
        com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder $r2;

        r0 := @this: com.bumptech.glide.BitmapRequestBuilder;

        r1 := @parameter0: com.bumptech.glide.load.ResourceDecoder;

        r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder videoDecoder> = r1;

        $r2 = new com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder;

        $r3 = r0.<com.bumptech.glide.BitmapRequestBuilder: com.bumptech.glide.load.ResourceDecoder imageDecoder>;

        specialinvoke $r2.<com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder: void <init>(com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.ResourceDecoder)>($r3, r1);

        specialinvoke r0.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.GenericRequestBuilder decoder(com.bumptech.glide.load.ResourceDecoder)>($r2);

        return r0;
    }
