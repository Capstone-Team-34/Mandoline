com.bumptech.glide.Glide extends java.lang.Object
private static final java.lang.String TAG
private static volatile com.bumptech.glide.Glide glide
private final com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop
private final com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter
private final com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool
private final com.bumptech.glide.load.engine.prefill.BitmapPreFiller bitmapPreFiller
private final com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry
private final com.bumptech.glide.load.DecodeFormat decodeFormat
private final com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableCenterCrop
private final com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableFitCenter
private final com.bumptech.glide.load.engine.Engine engine
private final com.bumptech.glide.request.target.ImageViewTargetFactory imageViewTargetFactory
private final com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory
private final android.os.Handler mainHandler
private final com.bumptech.glide.load.engine.cache.MemoryCache memoryCache
private final com.bumptech.glide.load.resource.transcode.TranscoderRegistry transcoderRegistry
    void <init>(com.bumptech.glide.load.engine.Engine, com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, android.content.Context, com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.Engine $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r3;
        android.content.Context $r4;
        com.bumptech.glide.load.DecodeFormat $r5;
        com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDataLoadProvider r6;
        com.bumptech.glide.load.resource.gif.GifDrawableLoadProvider r7;
        com.bumptech.glide.load.resource.bitmap.ImageVideoDataLoadProvider r8;
        com.bumptech.glide.load.resource.bitmap.StreamBitmapDataLoadProvider r9;
        com.bumptech.glide.request.target.ImageViewTargetFactory $r10;
        com.bumptech.glide.load.resource.transcode.TranscoderRegistry $r11;
        com.bumptech.glide.load.model.GenericLoaderFactory $r12;
        android.os.Handler $r13;
        android.os.Looper $r14;
        com.bumptech.glide.load.engine.prefill.BitmapPreFiller $r15;
        com.bumptech.glide.provider.DataLoadProviderRegistry $r16;
        com.bumptech.glide.load.resource.gifbitmap.ImageVideoGifDrawableLoadProvider $r17;
        com.bumptech.glide.load.resource.file.StreamFileDataLoadProvider $r18;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorFileLoader$Factory $r19;
        com.bumptech.glide.load.model.stream.StreamFileLoader$Factory $r20;
        java.lang.Class $r21;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory $r22;
        com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory $r23;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader$Factory $r24;
        com.bumptech.glide.load.model.stream.StreamStringLoader$Factory $r25;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader$Factory $r26;
        com.bumptech.glide.load.model.stream.StreamUriLoader$Factory $r27;
        com.bumptech.glide.load.model.stream.StreamUrlLoader$Factory $r28;
        com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader$Factory $r29;
        com.bumptech.glide.load.model.stream.StreamByteArrayLoader$Factory $r30;
        com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder $r31;
        android.content.res.Resources $r32;
        com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder $r33;
        com.bumptech.glide.load.resource.bitmap.CenterCrop $r34;
        com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation $r35;
        com.bumptech.glide.load.resource.bitmap.FitCenter $r36;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 := @parameter0: com.bumptech.glide.load.engine.Engine;

        $r2 := @parameter1: com.bumptech.glide.load.engine.cache.MemoryCache;

        $r3 := @parameter2: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $r4 := @parameter3: android.content.Context;

        $r5 := @parameter4: com.bumptech.glide.load.DecodeFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r10 = new com.bumptech.glide.request.target.ImageViewTargetFactory;

        specialinvoke $r10.<com.bumptech.glide.request.target.ImageViewTargetFactory: void <init>()>();

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.request.target.ImageViewTargetFactory imageViewTargetFactory> = $r10;

        $r11 = new com.bumptech.glide.load.resource.transcode.TranscoderRegistry;

        specialinvoke $r11.<com.bumptech.glide.load.resource.transcode.TranscoderRegistry: void <init>()>();

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderRegistry transcoderRegistry> = $r11;

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.Engine engine> = $r1;

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool> = $r3;

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache> = $r2;

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.DecodeFormat decodeFormat> = $r5;

        $r12 = new com.bumptech.glide.load.model.GenericLoaderFactory;

        specialinvoke $r12.<com.bumptech.glide.load.model.GenericLoaderFactory: void <init>(android.content.Context)>($r4);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory> = $r12;

        $r13 = new android.os.Handler;

        $r14 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r13.<android.os.Handler: void <init>(android.os.Looper)>($r14);

        r0.<com.bumptech.glide.Glide: android.os.Handler mainHandler> = $r13;

        $r15 = new com.bumptech.glide.load.engine.prefill.BitmapPreFiller;

        specialinvoke $r15.<com.bumptech.glide.load.engine.prefill.BitmapPreFiller: void <init>(com.bumptech.glide.load.engine.cache.MemoryCache,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r2, $r3, $r5);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.prefill.BitmapPreFiller bitmapPreFiller> = $r15;

        $r16 = new com.bumptech.glide.provider.DataLoadProviderRegistry;

        specialinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderRegistry: void <init>()>();

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry> = $r16;

        r9 = new com.bumptech.glide.load.resource.bitmap.StreamBitmapDataLoadProvider;

        specialinvoke r9.<com.bumptech.glide.load.resource.bitmap.StreamBitmapDataLoadProvider: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r3, $r5);

        $r16 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry>;

        virtualinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.provider.DataLoadProvider)>(class "Ljava/io/InputStream;", class "Landroid/graphics/Bitmap;", r9);

        r6 = new com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDataLoadProvider;

        specialinvoke r6.<com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDataLoadProvider: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.DecodeFormat)>($r3, $r5);

        $r16 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry>;

        virtualinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.provider.DataLoadProvider)>(class "Landroid/os/ParcelFileDescriptor;", class "Landroid/graphics/Bitmap;", r6);

        r8 = new com.bumptech.glide.load.resource.bitmap.ImageVideoDataLoadProvider;

        specialinvoke r8.<com.bumptech.glide.load.resource.bitmap.ImageVideoDataLoadProvider: void <init>(com.bumptech.glide.provider.DataLoadProvider,com.bumptech.glide.provider.DataLoadProvider)>(r9, r6);

        $r16 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry>;

        virtualinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.provider.DataLoadProvider)>(class "Lcom/bumptech/glide/load/model/ImageVideoWrapper;", class "Landroid/graphics/Bitmap;", r8);

        r7 = new com.bumptech.glide.load.resource.gif.GifDrawableLoadProvider;

        specialinvoke r7.<com.bumptech.glide.load.resource.gif.GifDrawableLoadProvider: void <init>(android.content.Context,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r4, $r3);

        $r16 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry>;

        virtualinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.provider.DataLoadProvider)>(class "Ljava/io/InputStream;", class "Lcom/bumptech/glide/load/resource/gif/GifDrawable;", r7);

        $r16 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry>;

        $r17 = new com.bumptech.glide.load.resource.gifbitmap.ImageVideoGifDrawableLoadProvider;

        specialinvoke $r17.<com.bumptech.glide.load.resource.gifbitmap.ImageVideoGifDrawableLoadProvider: void <init>(com.bumptech.glide.provider.DataLoadProvider,com.bumptech.glide.provider.DataLoadProvider,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>(r8, r7, $r3);

        virtualinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.provider.DataLoadProvider)>(class "Lcom/bumptech/glide/load/model/ImageVideoWrapper;", class "Lcom/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapper;", $r17);

        $r16 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry>;

        $r18 = new com.bumptech.glide.load.resource.file.StreamFileDataLoadProvider;

        specialinvoke $r18.<com.bumptech.glide.load.resource.file.StreamFileDataLoadProvider: void <init>()>();

        virtualinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.provider.DataLoadProvider)>(class "Ljava/io/InputStream;", class "Ljava/io/File;", $r18);

        $r19 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorFileLoader$Factory;

        specialinvoke $r19.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorFileLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Ljava/io/File;", class "Landroid/os/ParcelFileDescriptor;", $r19);

        $r20 = new com.bumptech.glide.load.model.stream.StreamFileLoader$Factory;

        specialinvoke $r20.<com.bumptech.glide.load.model.stream.StreamFileLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Ljava/io/File;", class "Ljava/io/InputStream;", $r20);

        $r21 = <java.lang.Integer: java.lang.Class TYPE>;

        $r22 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory;

        specialinvoke $r22.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>($r21, class "Landroid/os/ParcelFileDescriptor;", $r22);

        $r21 = <java.lang.Integer: java.lang.Class TYPE>;

        $r23 = new com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory;

        specialinvoke $r23.<com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>($r21, class "Ljava/io/InputStream;", $r23);

        $r22 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory;

        specialinvoke $r22.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Ljava/lang/Integer;", class "Landroid/os/ParcelFileDescriptor;", $r22);

        $r23 = new com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory;

        specialinvoke $r23.<com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Ljava/lang/Integer;", class "Ljava/io/InputStream;", $r23);

        $r24 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader$Factory;

        specialinvoke $r24.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Ljava/lang/String;", class "Landroid/os/ParcelFileDescriptor;", $r24);

        $r25 = new com.bumptech.glide.load.model.stream.StreamStringLoader$Factory;

        specialinvoke $r25.<com.bumptech.glide.load.model.stream.StreamStringLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Ljava/lang/String;", class "Ljava/io/InputStream;", $r25);

        $r26 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader$Factory;

        specialinvoke $r26.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Landroid/net/Uri;", class "Landroid/os/ParcelFileDescriptor;", $r26);

        $r27 = new com.bumptech.glide.load.model.stream.StreamUriLoader$Factory;

        specialinvoke $r27.<com.bumptech.glide.load.model.stream.StreamUriLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Landroid/net/Uri;", class "Ljava/io/InputStream;", $r27);

        $r28 = new com.bumptech.glide.load.model.stream.StreamUrlLoader$Factory;

        specialinvoke $r28.<com.bumptech.glide.load.model.stream.StreamUrlLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Ljava/net/URL;", class "Ljava/io/InputStream;", $r28);

        $r29 = new com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader$Factory;

        specialinvoke $r29.<com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "Lcom/bumptech/glide/load/model/GlideUrl;", class "Ljava/io/InputStream;", $r29);

        $r30 = new com.bumptech.glide.load.model.stream.StreamByteArrayLoader$Factory;

        specialinvoke $r30.<com.bumptech.glide.load.model.stream.StreamByteArrayLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "[B", class "Ljava/io/InputStream;", $r30);

        $r11 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderRegistry transcoderRegistry>;

        $r31 = new com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;

        $r32 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r31.<com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder: void <init>(android.content.res.Resources,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r32, $r3);

        virtualinvoke $r11.<com.bumptech.glide.load.resource.transcode.TranscoderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>(class "Landroid/graphics/Bitmap;", class "Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;", $r31);

        $r11 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderRegistry transcoderRegistry>;

        $r33 = new com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder;

        $r31 = new com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;

        $r32 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r31.<com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder: void <init>(android.content.res.Resources,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r32, $r3);

        specialinvoke $r33.<com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder: void <init>(com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>($r31);

        virtualinvoke $r11.<com.bumptech.glide.load.resource.transcode.TranscoderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>(class "Lcom/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapper;", class "Lcom/bumptech/glide/load/resource/drawable/GlideDrawable;", $r33);

        $r34 = new com.bumptech.glide.load.resource.bitmap.CenterCrop;

        specialinvoke $r34.<com.bumptech.glide.load.resource.bitmap.CenterCrop: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r3);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop> = $r34;

        $r35 = new com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;

        $r34 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop>;

        specialinvoke $r35.<com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation)>($r3, $r34);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableCenterCrop> = $r35;

        $r36 = new com.bumptech.glide.load.resource.bitmap.FitCenter;

        specialinvoke $r36.<com.bumptech.glide.load.resource.bitmap.FitCenter: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r3);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter> = $r36;

        $r35 = new com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;

        $r36 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter>;

        specialinvoke $r35.<com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation)>($r3, $r36);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableFitCenter> = $r35;

        return;
    }
    public static com.bumptech.glide.load.model.ModelLoader buildFileDescriptorModelLoader(java.lang.Class, android.content.Context)
    {
        java.lang.Class r0;
        android.content.Context $r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)>(r0, class "Landroid/os/ParcelFileDescriptor;", $r1);

        return $r2;
    }
    public static com.bumptech.glide.load.model.ModelLoader buildFileDescriptorModelLoader(java.lang.Object, android.content.Context)
    {
        java.lang.Object r0;
        android.content.Context $r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Object,java.lang.Class,android.content.Context)>(r0, class "Landroid/os/ParcelFileDescriptor;", $r1);

        return $r2;
    }
    public static com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class, java.lang.Class, android.content.Context)
    {
        java.lang.Class r0, r1;
        android.content.Context $r2;
        boolean $z0;
        com.bumptech.glide.Glide $r3;
        com.bumptech.glide.load.model.GenericLoaderFactory $r4;
        com.bumptech.glide.load.model.ModelLoader $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: android.content.Context;

        if r0 != null goto label2;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Glide", 3);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Glide", "Unable to load null model, setting placeholder only");

     label1:
        return null;

     label2:
        $r3 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.Glide get(android.content.Context)>($r2);

        $r4 = specialinvoke $r3.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory getLoaderFactory()>();

        $r5 = virtualinvoke $r4.<com.bumptech.glide.load.model.GenericLoaderFactory: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class)>(r0, r1);

        return $r5;
    }
    public static com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Object, java.lang.Class, android.content.Context)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r3;
        android.content.Context $r2;
        com.bumptech.glide.load.model.ModelLoader $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: android.content.Context;

        if r0 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $r4 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)>($r3, r1, $r2);

        return $r4;

     label2:
        $r3 = null;

        goto label1;
    }
    public static com.bumptech.glide.load.model.ModelLoader buildStreamModelLoader(java.lang.Class, android.content.Context)
    {
        java.lang.Class r0;
        android.content.Context $r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)>(r0, class "Ljava/io/InputStream;", $r1);

        return $r2;
    }
    public static com.bumptech.glide.load.model.ModelLoader buildStreamModelLoader(java.lang.Object, android.content.Context)
    {
        java.lang.Object r0;
        android.content.Context $r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Object,java.lang.Class,android.content.Context)>(r0, class "Ljava/io/InputStream;", $r1);

        return $r2;
    }
    public static void clear(android.view.View)
    {
        android.view.View $r0;
        com.bumptech.glide.Glide$ClearTarget r1;

        $r0 := @parameter0: android.view.View;

        r1 = new com.bumptech.glide.Glide$ClearTarget;

        specialinvoke r1.<com.bumptech.glide.Glide$ClearTarget: void <init>(android.view.View)>($r0);

        staticinvoke <com.bumptech.glide.Glide: void clear(com.bumptech.glide.request.target.Target)>(r1);

        return;
    }
    public static void clear(com.bumptech.glide.request.FutureTarget)
    {
        com.bumptech.glide.request.FutureTarget r0;

        r0 := @parameter0: com.bumptech.glide.request.FutureTarget;

        interfaceinvoke r0.<com.bumptech.glide.request.FutureTarget: void clear()>();

        return;
    }
    public static void clear(com.bumptech.glide.request.target.Target)
    {
        com.bumptech.glide.request.target.Target r0;
        com.bumptech.glide.request.Request $r1;

        r0 := @parameter0: com.bumptech.glide.request.target.Target;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $r1 = interfaceinvoke r0.<com.bumptech.glide.request.target.Target: com.bumptech.glide.request.Request getRequest()>();

        if $r1 == null goto label1;

        interfaceinvoke $r1.<com.bumptech.glide.request.Request: void clear()>();

        interfaceinvoke r0.<com.bumptech.glide.request.target.Target: void setRequest(com.bumptech.glide.request.Request)>(null);

     label1:
        return;
    }
    public static com.bumptech.glide.Glide get(android.content.Context)
    {
        android.content.Context $r0;
        com.bumptech.glide.GlideBuilder r1;
        com.bumptech.glide.Glide $r2;
        com.bumptech.glide.module.ManifestParser $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        com.bumptech.glide.module.GlideModule r7;
        java.lang.Throwable $r8;

        $r0 := @parameter0: android.content.Context;

        $r2 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide>;

        if $r2 != null goto label8;

        entermonitor class "Lcom/bumptech/glide/Glide;";

     label1:
        $r2 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide>;

        if $r2 != null goto label7;

        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context getApplicationContext()>();

        $r3 = new com.bumptech.glide.module.ManifestParser;

        specialinvoke $r3.<com.bumptech.glide.module.ManifestParser: void <init>(android.content.Context)>($r0);

        $r4 = virtualinvoke $r3.<com.bumptech.glide.module.ManifestParser: java.util.List parse()>();

        r1 = new com.bumptech.glide.GlideBuilder;

        specialinvoke r1.<com.bumptech.glide.GlideBuilder: void <init>(android.content.Context)>($r0);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.bumptech.glide.module.GlideModule) $r6;

        interfaceinvoke r7.<com.bumptech.glide.module.GlideModule: void applyOptions(android.content.Context,com.bumptech.glide.GlideBuilder)>($r0, r1);

        goto label2;

     label3:
        $r8 := @caughtexception;

        exitmonitor class "Lcom/bumptech/glide/Glide;";

     label4:
        throw $r8;

     label5:
        $r2 = virtualinvoke r1.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.Glide createGlide()>();

        <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide> = $r2;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.bumptech.glide.module.GlideModule) $r6;

        $r2 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide>;

        interfaceinvoke r7.<com.bumptech.glide.module.GlideModule: void registerComponents(android.content.Context,com.bumptech.glide.Glide)>($r0, $r2);

        goto label6;

     label7:
        exitmonitor class "Lcom/bumptech/glide/Glide;";

     label8:
        $r2 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide>;

        return $r2;

        catch java.lang.Throwable from label1 to label4 with label3;
        catch java.lang.Throwable from label5 to label8 with label3;
    }
    private com.bumptech.glide.load.model.GenericLoaderFactory getLoaderFactory()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.model.GenericLoaderFactory r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory>;

        return r1;
    }
    public static java.io.File getPhotoCacheDir(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.bumptech.glide.Glide: java.io.File getPhotoCacheDir(android.content.Context,java.lang.String)>($r0, "image_manager_disk_cache");

        return $r1;
    }
    public static java.io.File getPhotoCacheDir(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.io.File $r2, r3;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.Context: java.io.File getCacheDir()>();

        if $r2 == null goto label2;

        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r1);

        $z0 = virtualinvoke r3.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label4;

     label1:
        return null;

     label2:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Glide", 6);

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Glide", "default disk cache dir is null");

     label3:
        return null;

     label4:
        return r3;
    }
    public static boolean isSetup()
    {
        com.bumptech.glide.Glide $r0;

        $r0 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide>;

        if $r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public static void setup(com.bumptech.glide.GlideBuilder)
    {
        com.bumptech.glide.GlideBuilder $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        com.bumptech.glide.Glide $r2;

        $r0 := @parameter0: com.bumptech.glide.GlideBuilder;

        $z0 = staticinvoke <com.bumptech.glide.Glide: boolean isSetup()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Glide is already setup, check with isSetup() first");

        throw $r1;

     label1:
        $r2 = virtualinvoke $r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.Glide createGlide()>();

        <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide> = $r2;

        return;
    }
    static void tearDown()
    {
        <com.bumptech.glide.Glide: com.bumptech.glide.Glide glide> = null;

        return;
    }
    public static com.bumptech.glide.RequestManager 'with'(android.app.Activity)
    {
        android.app.Activity $r0;
        com.bumptech.glide.manager.RequestManagerRetriever $r1;
        com.bumptech.glide.RequestManager $r2;

        $r0 := @parameter0: android.app.Activity;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerRetriever get()>();

        $r2 = virtualinvoke $r1.<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)>($r0);

        return $r2;
    }
    public static com.bumptech.glide.RequestManager 'with'(android.app.Fragment)
    {
        android.app.Fragment $r0;
        com.bumptech.glide.manager.RequestManagerRetriever $r1;
        com.bumptech.glide.RequestManager $r2;

        $r0 := @parameter0: android.app.Fragment;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerRetriever get()>();

        $r2 = virtualinvoke $r1.<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)>($r0);

        return $r2;
    }
    public static com.bumptech.glide.RequestManager 'with'(android.content.Context)
    {
        android.content.Context $r0;
        com.bumptech.glide.manager.RequestManagerRetriever $r1;
        com.bumptech.glide.RequestManager $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerRetriever get()>();

        $r2 = virtualinvoke $r1.<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)>($r0);

        return $r2;
    }
    public static com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)
    {
        android.support.v4.app.Fragment $r0;
        com.bumptech.glide.manager.RequestManagerRetriever $r1;
        com.bumptech.glide.RequestManager $r2;

        $r0 := @parameter0: android.support.v4.app.Fragment;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerRetriever get()>();

        $r2 = virtualinvoke $r1.<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)>($r0);

        return $r2;
    }
    public static com.bumptech.glide.RequestManager 'with'(android.support.v4.app.FragmentActivity)
    {
        android.support.v4.app.FragmentActivity $r0;
        com.bumptech.glide.manager.RequestManagerRetriever $r1;
        com.bumptech.glide.RequestManager $r2;

        $r0 := @parameter0: android.support.v4.app.FragmentActivity;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerRetriever get()>();

        $r2 = virtualinvoke $r1.<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)>($r0);

        return $r2;
    }
    com.bumptech.glide.provider.DataLoadProvider buildDataProvider(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.provider.DataLoadProvider $r3;
        com.bumptech.glide.provider.DataLoadProviderRegistry $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r4 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderRegistry dataLoadProviderRegistry>;

        $r3 = virtualinvoke $r4.<com.bumptech.glide.provider.DataLoadProviderRegistry: com.bumptech.glide.provider.DataLoadProvider get(java.lang.Class,java.lang.Class)>(r1, r2);

        return $r3;
    }
    com.bumptech.glide.request.target.Target buildImageViewTarget(android.widget.ImageView, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        android.widget.ImageView $r1;
        java.lang.Class r2;
        com.bumptech.glide.request.target.Target $r3;
        com.bumptech.glide.request.target.ImageViewTargetFactory $r4;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 := @parameter0: android.widget.ImageView;

        r2 := @parameter1: java.lang.Class;

        $r4 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.request.target.ImageViewTargetFactory imageViewTargetFactory>;

        $r3 = virtualinvoke $r4.<com.bumptech.glide.request.target.ImageViewTargetFactory: com.bumptech.glide.request.target.Target buildTarget(android.widget.ImageView,java.lang.Class)>($r1, r2);

        return $r3;
    }
    com.bumptech.glide.load.resource.transcode.ResourceTranscoder buildTranscoder(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder $r3;
        com.bumptech.glide.load.resource.transcode.TranscoderRegistry $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r4 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderRegistry transcoderRegistry>;

        $r3 = virtualinvoke $r4.<com.bumptech.glide.load.resource.transcode.TranscoderRegistry: com.bumptech.glide.load.resource.transcode.ResourceTranscoder get(java.lang.Class,java.lang.Class)>(r1, r2);

        return $r3;
    }
    public void clearDiskCache()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.Engine $r1;

        r0 := @this: com.bumptech.glide.Glide;

        staticinvoke <com.bumptech.glide.util.Util: void assertBackgroundThread()>();

        $r1 = virtualinvoke r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.Engine getEngine()>();

        virtualinvoke $r1.<com.bumptech.glide.load.engine.Engine: void clearDiskCache()>();

        return;
    }
    public void clearMemory()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        interfaceinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: void clearMemory()>();

        $r2 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        interfaceinvoke $r2.<com.bumptech.glide.load.engine.cache.MemoryCache: void clearMemory()>();

        return;
    }
    com.bumptech.glide.load.resource.bitmap.CenterCrop getBitmapCenterCrop()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.bitmap.CenterCrop r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop>;

        return r1;
    }
    com.bumptech.glide.load.resource.bitmap.FitCenter getBitmapFitCenter()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.bitmap.FitCenter r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter>;

        return r1;
    }
    public com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool getBitmapPool()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        return r1;
    }
    com.bumptech.glide.load.DecodeFormat getDecodeFormat()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.DecodeFormat r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.DecodeFormat decodeFormat>;

        return r1;
    }
    com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation getDrawableCenterCrop()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableCenterCrop>;

        return r1;
    }
    com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation getDrawableFitCenter()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableFitCenter>;

        return r1;
    }
    com.bumptech.glide.load.engine.Engine getEngine()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.Engine r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.Engine engine>;

        return r1;
    }
    android.os.Handler getMainHandler()
    {
        com.bumptech.glide.Glide r0;
        android.os.Handler r1;

        r0 := @this: com.bumptech.glide.Glide;

        r1 = r0.<com.bumptech.glide.Glide: android.os.Handler mainHandler>;

        return r1;
    }
    public transient void preFillBitmapPool(com.bumptech.glide.load.engine.prefill.PreFillType$Builder[])
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.prefill.PreFillType$Builder[] $r1;
        com.bumptech.glide.load.engine.prefill.BitmapPreFiller $r2;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 := @parameter0: com.bumptech.glide.load.engine.prefill.PreFillType$Builder[];

        $r2 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.prefill.BitmapPreFiller bitmapPreFiller>;

        virtualinvoke $r2.<com.bumptech.glide.load.engine.prefill.BitmapPreFiller: void preFill(com.bumptech.glide.load.engine.prefill.PreFillType$Builder[])>($r1);

        return;
    }
    public void register(java.lang.Class, java.lang.Class, com.bumptech.glide.load.model.ModelLoaderFactory)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.model.ModelLoaderFactory r3;
        com.bumptech.glide.load.model.GenericLoaderFactory $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: com.bumptech.glide.load.model.ModelLoaderFactory;

        $r4 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory>;

        r3 = virtualinvoke $r4.<com.bumptech.glide.load.model.GenericLoaderFactory: com.bumptech.glide.load.model.ModelLoaderFactory register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(r1, r2, r3);

        if r3 == null goto label1;

        interfaceinvoke r3.<com.bumptech.glide.load.model.ModelLoaderFactory: void teardown()>();

     label1:
        return;
    }
    public void setMemoryCategory(com.bumptech.glide.MemoryCategory)
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.MemoryCategory $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;
        float $f0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r3;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 := @parameter0: com.bumptech.glide.MemoryCategory;

        $r2 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        $f0 = virtualinvoke $r1.<com.bumptech.glide.MemoryCategory: float getMultiplier()>();

        interfaceinvoke $r2.<com.bumptech.glide.load.engine.cache.MemoryCache: void setSizeMultiplier(float)>($f0);

        $r3 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $f0 = virtualinvoke $r1.<com.bumptech.glide.MemoryCategory: float getMultiplier()>();

        interfaceinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: void setSizeMultiplier(float)>($f0);

        return;
    }
    public void trimMemory(int)
    {
        com.bumptech.glide.Glide r0;
        int $i0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;

        r0 := @this: com.bumptech.glide.Glide;

        $i0 := @parameter0: int;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        interfaceinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: void trimMemory(int)>($i0);

        $r2 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        interfaceinvoke $r2.<com.bumptech.glide.load.engine.cache.MemoryCache: void trimMemory(int)>($i0);

        return;
    }
    public void unregister(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.model.GenericLoaderFactory $r3;
        com.bumptech.glide.load.model.ModelLoaderFactory $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory>;

        $r4 = virtualinvoke $r3.<com.bumptech.glide.load.model.GenericLoaderFactory: com.bumptech.glide.load.model.ModelLoaderFactory unregister(java.lang.Class,java.lang.Class)>(r1, r2);

        if $r4 == null goto label1;

        interfaceinvoke $r4.<com.bumptech.glide.load.model.ModelLoaderFactory: void teardown()>();

     label1:
        return;
    }
