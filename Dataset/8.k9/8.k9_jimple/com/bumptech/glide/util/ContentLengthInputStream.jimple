com.bumptech.glide.util.ContentLengthInputStream extends java.io.FilterInputStream
private static final java.lang.String TAG
private static final int UNKNOWN
private final long contentLength
private int readSoFar
    void <init>(java.io.InputStream, long)
    {
        com.bumptech.glide.util.ContentLengthInputStream r0;
        java.io.InputStream $r1;
        long $l0;

        r0 := @this: com.bumptech.glide.util.ContentLengthInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<com.bumptech.glide.util.ContentLengthInputStream: long contentLength> = $l0;

        return;
    }
    private int checkReadSoFarOrThrow(int) throws java.io.IOException
    {
        com.bumptech.glide.util.ContentLengthInputStream r0;
        int $i0, $i1;
        long $l2, $l3;
        byte $b4;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: com.bumptech.glide.util.ContentLengthInputStream;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<com.bumptech.glide.util.ContentLengthInputStream: int readSoFar>;

        $i1 = $i1 + $i0;

        r0.<com.bumptech.glide.util.ContentLengthInputStream: int readSoFar> = $i1;

        return $i0;

     label1:
        $l2 = r0.<com.bumptech.glide.util.ContentLengthInputStream: long contentLength>;

        $i1 = r0.<com.bumptech.glide.util.ContentLengthInputStream: int readSoFar>;

        $l3 = (long) $i1;

        $l2 = $l2 - $l3;

        $b4 = $l2 cmp 0L;

        if $b4 <= 0 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read all expected data, expected: ");

        $l2 = r0.<com.bumptech.glide.util.ContentLengthInputStream: long contentLength>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but read: ");

        $i0 = r0.<com.bumptech.glide.util.ContentLengthInputStream: int readSoFar>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return $i0;
    }
    public static java.io.InputStream obtain(java.io.InputStream, long)
    {
        java.io.InputStream $r0;
        long $l0;
        com.bumptech.glide.util.ContentLengthInputStream $r1;

        $r0 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        $r1 = new com.bumptech.glide.util.ContentLengthInputStream;

        specialinvoke $r1.<com.bumptech.glide.util.ContentLengthInputStream: void <init>(java.io.InputStream,long)>($r0, $l0);

        return $r1;
    }
    public static java.io.InputStream obtain(java.io.InputStream, java.lang.String)
    {
        java.io.InputStream $r0;
        java.lang.String $r1;
        int $i0;
        long $l1;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <com.bumptech.glide.util.ContentLengthInputStream: int parseContentLength(java.lang.String)>($r1);

        $l1 = (long) $i0;

        $r0 = staticinvoke <com.bumptech.glide.util.ContentLengthInputStream: java.io.InputStream obtain(java.io.InputStream,long)>($r0, $l1);

        return $r0;
    }
    private static int parseContentLength(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.NumberFormatException r1;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label4;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        return $i0;

     label3:
        r1 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ContentLengthStream", 3);

        if $z0 == 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to parse content length header: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ContentLengthStream", $r0, r1);

     label4:
        return -1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public int available() throws java.io.IOException
    {
        com.bumptech.glide.util.ContentLengthInputStream r0;
        long $l0, $l2;
        int $i1;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.bumptech.glide.util.ContentLengthInputStream;

        entermonitor r0;

     label1:
        $l0 = r0.<com.bumptech.glide.util.ContentLengthInputStream: long contentLength>;

        $i1 = r0.<com.bumptech.glide.util.ContentLengthInputStream: int readSoFar>;

        $l2 = (long) $i1;

        $l0 = $l0 - $l2;

        $r1 = r0.<com.bumptech.glide.util.ContentLengthInputStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        $l2 = (long) $i1;

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l2);

     label2:
        $i1 = (int) $l0;

        exitmonitor r0;

        return $i1;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int read() throws java.io.IOException
    {
        com.bumptech.glide.util.ContentLengthInputStream r0;
        int $i0;
        java.lang.Throwable $r1;

        r0 := @this: com.bumptech.glide.util.ContentLengthInputStream;

        entermonitor r0;

     label1:
        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read()>();

        $i0 = specialinvoke r0.<com.bumptech.glide.util.ContentLengthInputStream: int checkReadSoFarOrThrow(int)>($i0);

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int read(byte[]) throws java.io.IOException
    {
        com.bumptech.glide.util.ContentLengthInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: com.bumptech.glide.util.ContentLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<com.bumptech.glide.util.ContentLengthInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        com.bumptech.glide.util.ContentLengthInputStream r0;
        byte[] $r1;
        int $i0, $i1;
        java.lang.Throwable $r2;

        r0 := @this: com.bumptech.glide.util.ContentLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        entermonitor r0;

     label1:
        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        $i0 = specialinvoke r0.<com.bumptech.glide.util.ContentLengthInputStream: int checkReadSoFarOrThrow(int)>($i0);

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
