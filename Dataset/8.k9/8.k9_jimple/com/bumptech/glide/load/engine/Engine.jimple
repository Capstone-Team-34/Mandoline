com.bumptech.glide.load.engine.Engine extends java.lang.Object implements com.bumptech.glide.load.engine.EngineJobListener com.bumptech.glide.load.engine.cache.MemoryCache$ResourceRemovedListener com.bumptech.glide.load.engine.EngineResource$ResourceListener
private static final java.lang.String TAG
private final java.util.Map activeResources
private final com.bumptech.glide.load.engine.cache.MemoryCache cache
private final com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider diskCacheProvider
private final com.bumptech.glide.load.engine.Engine$EngineJobFactory engineJobFactory
private final java.util.Map jobs
private final com.bumptech.glide.load.engine.EngineKeyFactory keyFactory
private final com.bumptech.glide.load.engine.ResourceRecycler resourceRecycler
private java.lang.ref.ReferenceQueue resourceReferenceQueue
    public void <init>(com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.cache.DiskCache$Factory, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.cache.MemoryCache $r1;
        com.bumptech.glide.load.engine.cache.DiskCache$Factory $r2;
        java.util.concurrent.ExecutorService $r3, $r4;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.engine.cache.MemoryCache;

        $r2 := @parameter1: com.bumptech.glide.load.engine.cache.DiskCache$Factory;

        $r3 := @parameter2: java.util.concurrent.ExecutorService;

        $r4 := @parameter3: java.util.concurrent.ExecutorService;

        specialinvoke r0.<com.bumptech.glide.load.engine.Engine: void <init>(com.bumptech.glide.load.engine.cache.MemoryCache,com.bumptech.glide.load.engine.cache.DiskCache$Factory,java.util.concurrent.ExecutorService,java.util.concurrent.ExecutorService,java.util.Map,com.bumptech.glide.load.engine.EngineKeyFactory,java.util.Map,com.bumptech.glide.load.engine.Engine$EngineJobFactory,com.bumptech.glide.load.engine.ResourceRecycler)>($r1, $r2, $r3, $r4, null, null, null, null, null);

        return;
    }
    void <init>(com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.cache.DiskCache$Factory, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService, java.util.Map, com.bumptech.glide.load.engine.EngineKeyFactory, java.util.Map, com.bumptech.glide.load.engine.Engine$EngineJobFactory, com.bumptech.glide.load.engine.ResourceRecycler)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.cache.MemoryCache $r1;
        com.bumptech.glide.load.engine.cache.DiskCache$Factory $r2;
        java.util.concurrent.ExecutorService $r3, $r4;
        java.util.Map r5, r7;
        com.bumptech.glide.load.engine.EngineKeyFactory r6, $r12;
        com.bumptech.glide.load.engine.Engine$EngineJobFactory r8, $r13;
        com.bumptech.glide.load.engine.ResourceRecycler r9, $r14;
        com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider $r10;
        java.util.HashMap $r11;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.engine.cache.MemoryCache;

        $r2 := @parameter1: com.bumptech.glide.load.engine.cache.DiskCache$Factory;

        $r3 := @parameter2: java.util.concurrent.ExecutorService;

        $r4 := @parameter3: java.util.concurrent.ExecutorService;

        r5 := @parameter4: java.util.Map;

        r6 := @parameter5: com.bumptech.glide.load.engine.EngineKeyFactory;

        r7 := @parameter6: java.util.Map;

        r8 := @parameter7: com.bumptech.glide.load.engine.Engine$EngineJobFactory;

        r9 := @parameter8: com.bumptech.glide.load.engine.ResourceRecycler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.cache.MemoryCache cache> = $r1;

        $r10 = new com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider;

        specialinvoke $r10.<com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider: void <init>(com.bumptech.glide.load.engine.cache.DiskCache$Factory)>($r2);

        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider diskCacheProvider> = $r10;

        if r7 != null goto label1;

        $r11 = new java.util.HashMap;

        r7 = $r11;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

     label1:
        r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources> = r7;

        if r6 != null goto label2;

        $r12 = new com.bumptech.glide.load.engine.EngineKeyFactory;

        r6 = $r12;

        specialinvoke $r12.<com.bumptech.glide.load.engine.EngineKeyFactory: void <init>()>();

     label2:
        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.EngineKeyFactory keyFactory> = r6;

        if r5 != null goto label3;

        $r11 = new java.util.HashMap;

        r5 = $r11;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

     label3:
        r0.<com.bumptech.glide.load.engine.Engine: java.util.Map jobs> = r5;

        if r8 != null goto label4;

        $r13 = new com.bumptech.glide.load.engine.Engine$EngineJobFactory;

        r8 = $r13;

        specialinvoke $r13.<com.bumptech.glide.load.engine.Engine$EngineJobFactory: void <init>(java.util.concurrent.ExecutorService,java.util.concurrent.ExecutorService,com.bumptech.glide.load.engine.EngineJobListener)>($r3, $r4, r0);

     label4:
        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.Engine$EngineJobFactory engineJobFactory> = r8;

        if r9 != null goto label5;

        $r14 = new com.bumptech.glide.load.engine.ResourceRecycler;

        r9 = $r14;

        specialinvoke $r14.<com.bumptech.glide.load.engine.ResourceRecycler: void <init>()>();

     label5:
        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.ResourceRecycler resourceRecycler> = r9;

        interfaceinvoke $r1.<com.bumptech.glide.load.engine.cache.MemoryCache: void setResourceRemovedListener(com.bumptech.glide.load.engine.cache.MemoryCache$ResourceRemovedListener)>(r0);

        return;
    }
    private com.bumptech.glide.load.engine.EngineResource getEngineResourceFromCache(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key $r1;
        com.bumptech.glide.load.engine.Resource $r2;
        com.bumptech.glide.load.engine.cache.MemoryCache $r3;
        boolean $z0;
        com.bumptech.glide.load.engine.EngineResource r4;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r3 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.cache.MemoryCache cache>;

        $r2 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.cache.MemoryCache: com.bumptech.glide.load.engine.Resource remove(com.bumptech.glide.load.Key)>($r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = $r2 instanceof com.bumptech.glide.load.engine.EngineResource;

        if $z0 == 0 goto label2;

        r4 = (com.bumptech.glide.load.engine.EngineResource) $r2;

        return r4;

     label2:
        r4 = new com.bumptech.glide.load.engine.EngineResource;

        specialinvoke r4.<com.bumptech.glide.load.engine.EngineResource: void <init>(com.bumptech.glide.load.engine.Resource,boolean)>($r2, 1);

        return r4;
    }
    private java.lang.ref.ReferenceQueue getReferenceQueue()
    {
        com.bumptech.glide.load.engine.Engine r0;
        java.util.Map $r1;
        java.lang.ref.ReferenceQueue $r2;
        android.os.MessageQueue $r3;
        com.bumptech.glide.load.engine.Engine$RefQueueIdleHandler $r4;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r2 = r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue>;

        if $r2 != null goto label1;

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue> = $r2;

        $r3 = staticinvoke <android.os.Looper: android.os.MessageQueue myQueue()>();

        $r4 = new com.bumptech.glide.load.engine.Engine$RefQueueIdleHandler;

        $r1 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        $r2 = r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue>;

        specialinvoke $r4.<com.bumptech.glide.load.engine.Engine$RefQueueIdleHandler: void <init>(java.util.Map,java.lang.ref.ReferenceQueue)>($r1, $r2);

        virtualinvoke $r3.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r4);

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue>;

        return $r2;
    }
    private com.bumptech.glide.load.engine.EngineResource loadFromActiveResources(com.bumptech.glide.load.Key, boolean)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key $r1;
        boolean $z0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.ref.WeakReference r4;
        com.bumptech.glide.load.engine.EngineResource r5;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $z0 := @parameter1: boolean;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.ref.WeakReference) $r3;

        if r4 == null goto label3;

        $r3 = virtualinvoke r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r5 = (com.bumptech.glide.load.engine.EngineResource) $r3;

        if r5 == null goto label2;

        virtualinvoke r5.<com.bumptech.glide.load.engine.EngineResource: void acquire()>();

        return r5;

     label2:
        $r2 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return r5;

     label3:
        return null;
    }
    private com.bumptech.glide.load.engine.EngineResource loadFromCache(com.bumptech.glide.load.Key, boolean)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key $r1;
        boolean $z0;
        java.util.Map $r2;
        com.bumptech.glide.load.engine.Engine$ResourceWeakReference $r3;
        com.bumptech.glide.load.engine.EngineResource $r4;
        java.lang.ref.ReferenceQueue $r5;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $z0 := @parameter1: boolean;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = specialinvoke r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.EngineResource getEngineResourceFromCache(com.bumptech.glide.load.Key)>($r1);

        if $r4 == null goto label2;

        virtualinvoke $r4.<com.bumptech.glide.load.engine.EngineResource: void acquire()>();

        $r2 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        $r3 = new com.bumptech.glide.load.engine.Engine$ResourceWeakReference;

        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue getReferenceQueue()>();

        specialinvoke $r3.<com.bumptech.glide.load.engine.Engine$ResourceWeakReference: void <init>(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.EngineResource,java.lang.ref.ReferenceQueue)>($r1, $r4, $r5);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label2:
        return $r4;
    }
    private static void logWithTimeAndKey(java.lang.String, long, com.bumptech.glide.load.Key)
    {
        java.lang.String $r0;
        long $l0;
        com.bumptech.glide.load.Key $r1;
        java.lang.StringBuilder $r2;
        double $d0;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r1 := @parameter2: com.bumptech.glide.load.Key;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $d0 = staticinvoke <com.bumptech.glide.util.LogTime: double getElapsedMillis(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms, key: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r0);

        return;
    }
    public void clearDiskCache()
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.cache.DiskCache $r1;
        com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider $r2;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r2 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider diskCacheProvider>;

        $r1 = virtualinvoke $r2.<com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider: com.bumptech.glide.load.engine.cache.DiskCache getDiskCache()>();

        interfaceinvoke $r1.<com.bumptech.glide.load.engine.cache.DiskCache: void clear()>();

        return;
    }
    public com.bumptech.glide.load.engine.Engine$LoadStatus load(com.bumptech.glide.load.Key, int, int, com.bumptech.glide.load.data.DataFetcher, com.bumptech.glide.provider.DataLoadProvider, com.bumptech.glide.load.Transformation, com.bumptech.glide.load.resource.transcode.ResourceTranscoder, com.bumptech.glide.Priority, boolean, com.bumptech.glide.load.engine.DiskCacheStrategy, com.bumptech.glide.request.ResourceCallback)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key $r1;
        int $i0, $i1;
        com.bumptech.glide.load.data.DataFetcher r2;
        com.bumptech.glide.provider.DataLoadProvider r3;
        com.bumptech.glide.load.Transformation r4;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r5;
        com.bumptech.glide.Priority $r6;
        boolean $z0;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r7;
        com.bumptech.glide.request.ResourceCallback $r8;
        com.bumptech.glide.load.engine.EngineRunnable r9;
        long $l2;
        java.lang.String $r10;
        com.bumptech.glide.load.engine.EngineKeyFactory $r11;
        com.bumptech.glide.load.ResourceDecoder $r12, $r13;
        com.bumptech.glide.load.ResourceEncoder $r14;
        com.bumptech.glide.load.Encoder $r15;
        com.bumptech.glide.load.engine.EngineKey $r16;
        com.bumptech.glide.load.engine.EngineResource $r17;
        java.util.Map $r18;
        java.lang.Object $r19;
        com.bumptech.glide.load.engine.EngineJob r20;
        com.bumptech.glide.load.engine.Engine$LoadStatus $r21;
        com.bumptech.glide.load.engine.Engine$EngineJobFactory $r22;
        com.bumptech.glide.load.engine.DecodeJob r23;
        com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider $r24;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 := @parameter3: com.bumptech.glide.load.data.DataFetcher;

        r3 := @parameter4: com.bumptech.glide.provider.DataLoadProvider;

        r4 := @parameter5: com.bumptech.glide.load.Transformation;

        r5 := @parameter6: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        $r6 := @parameter7: com.bumptech.glide.Priority;

        $z0 := @parameter8: boolean;

        $r7 := @parameter9: com.bumptech.glide.load.engine.DiskCacheStrategy;

        $r8 := @parameter10: com.bumptech.glide.request.ResourceCallback;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $l2 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r10 = interfaceinvoke r2.<com.bumptech.glide.load.data.DataFetcher: java.lang.String getId()>();

        $r11 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.EngineKeyFactory keyFactory>;

        $r12 = interfaceinvoke r3.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.ResourceDecoder getCacheDecoder()>();

        $r13 = interfaceinvoke r3.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.ResourceDecoder getSourceDecoder()>();

        $r14 = interfaceinvoke r3.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.ResourceEncoder getEncoder()>();

        $r15 = interfaceinvoke r3.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.Encoder getSourceEncoder()>();

        $r16 = virtualinvoke $r11.<com.bumptech.glide.load.engine.EngineKeyFactory: com.bumptech.glide.load.engine.EngineKey buildKey(java.lang.String,com.bumptech.glide.load.Key,int,int,com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.Transformation,com.bumptech.glide.load.ResourceEncoder,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.load.Encoder)>($r10, $r1, $i0, $i1, $r12, $r13, r4, $r14, r5, $r15);

        $r17 = specialinvoke r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.EngineResource loadFromCache(com.bumptech.glide.load.Key,boolean)>($r16, $z0);

        if $r17 == null goto label2;

        interfaceinvoke $r8.<com.bumptech.glide.request.ResourceCallback: void onResourceReady(com.bumptech.glide.load.engine.Resource)>($r17);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z0 == 0 goto label1;

        staticinvoke <com.bumptech.glide.load.engine.Engine: void logWithTimeAndKey(java.lang.String,long,com.bumptech.glide.load.Key)>("Loaded resource from cache", $l2, $r16);

     label1:
        return null;

     label2:
        $r17 = specialinvoke r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.EngineResource loadFromActiveResources(com.bumptech.glide.load.Key,boolean)>($r16, $z0);

        if $r17 == null goto label4;

        interfaceinvoke $r8.<com.bumptech.glide.request.ResourceCallback: void onResourceReady(com.bumptech.glide.load.engine.Resource)>($r17);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z0 == 0 goto label3;

        staticinvoke <com.bumptech.glide.load.engine.Engine: void logWithTimeAndKey(java.lang.String,long,com.bumptech.glide.load.Key)>("Loaded resource from active resources", $l2, $r16);

     label3:
        return null;

     label4:
        $r18 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map jobs>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r20 = (com.bumptech.glide.load.engine.EngineJob) $r19;

        if r20 == null goto label6;

        virtualinvoke r20.<com.bumptech.glide.load.engine.EngineJob: void addCallback(com.bumptech.glide.request.ResourceCallback)>($r8);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z0 == 0 goto label5;

        staticinvoke <com.bumptech.glide.load.engine.Engine: void logWithTimeAndKey(java.lang.String,long,com.bumptech.glide.load.Key)>("Added to existing load", $l2, $r16);

     label5:
        $r21 = new com.bumptech.glide.load.engine.Engine$LoadStatus;

        specialinvoke $r21.<com.bumptech.glide.load.engine.Engine$LoadStatus: void <init>(com.bumptech.glide.request.ResourceCallback,com.bumptech.glide.load.engine.EngineJob)>($r8, r20);

        return $r21;

     label6:
        $r22 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.Engine$EngineJobFactory engineJobFactory>;

        r20 = virtualinvoke $r22.<com.bumptech.glide.load.engine.Engine$EngineJobFactory: com.bumptech.glide.load.engine.EngineJob build(com.bumptech.glide.load.Key,boolean)>($r16, $z0);

        r23 = new com.bumptech.glide.load.engine.DecodeJob;

        $r24 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.Engine$LazyDiskCacheProvider diskCacheProvider>;

        specialinvoke r23.<com.bumptech.glide.load.engine.DecodeJob: void <init>(com.bumptech.glide.load.engine.EngineKey,int,int,com.bumptech.glide.load.data.DataFetcher,com.bumptech.glide.provider.DataLoadProvider,com.bumptech.glide.load.Transformation,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider,com.bumptech.glide.load.engine.DiskCacheStrategy,com.bumptech.glide.Priority)>($r16, $i0, $i1, r2, r3, r4, r5, $r24, $r7, $r6);

        r9 = new com.bumptech.glide.load.engine.EngineRunnable;

        specialinvoke r9.<com.bumptech.glide.load.engine.EngineRunnable: void <init>(com.bumptech.glide.load.engine.EngineRunnable$EngineRunnableManager,com.bumptech.glide.load.engine.DecodeJob,com.bumptech.glide.Priority)>(r20, r23, $r6);

        $r18 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map jobs>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r20);

        virtualinvoke r20.<com.bumptech.glide.load.engine.EngineJob: void addCallback(com.bumptech.glide.request.ResourceCallback)>($r8);

        virtualinvoke r20.<com.bumptech.glide.load.engine.EngineJob: void start(com.bumptech.glide.load.engine.EngineRunnable)>(r9);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z0 == 0 goto label7;

        staticinvoke <com.bumptech.glide.load.engine.Engine: void logWithTimeAndKey(java.lang.String,long,com.bumptech.glide.load.Key)>("Started new load", $l2, $r16);

     label7:
        $r21 = new com.bumptech.glide.load.engine.Engine$LoadStatus;

        specialinvoke $r21.<com.bumptech.glide.load.engine.Engine$LoadStatus: void <init>(com.bumptech.glide.request.ResourceCallback,com.bumptech.glide.load.engine.EngineJob)>($r8, r20);

        return $r21;
    }
    public void onEngineJobCancelled(com.bumptech.glide.load.engine.EngineJob, com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.EngineJob $r1, r5;
        com.bumptech.glide.load.Key $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.engine.EngineJob;

        $r2 := @parameter1: com.bumptech.glide.load.Key;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $r3 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map jobs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (com.bumptech.glide.load.engine.EngineJob) $r4;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map jobs>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

     label1:
        return;
    }
    public void onEngineJobComplete(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.EngineResource)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key $r1;
        com.bumptech.glide.load.engine.EngineResource r2;
        com.bumptech.glide.load.engine.Engine$ResourceWeakReference $r3;
        boolean $z0;
        java.util.Map $r4;
        java.lang.ref.ReferenceQueue $r5;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        r2 := @parameter1: com.bumptech.glide.load.engine.EngineResource;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        if r2 == null goto label1;

        virtualinvoke r2.<com.bumptech.glide.load.engine.EngineResource: void setResourceListener(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.EngineResource$ResourceListener)>($r1, r0);

        $z0 = virtualinvoke r2.<com.bumptech.glide.load.engine.EngineResource: boolean isCacheable()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        $r3 = new com.bumptech.glide.load.engine.Engine$ResourceWeakReference;

        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue getReferenceQueue()>();

        specialinvoke $r3.<com.bumptech.glide.load.engine.Engine$ResourceWeakReference: void <init>(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.EngineResource,java.lang.ref.ReferenceQueue)>($r1, r2, $r5);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label1:
        $r4 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map jobs>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }
    public void onResourceReleased(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.EngineResource)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key $r1;
        com.bumptech.glide.load.engine.EngineResource $r2;
        boolean $z0;
        java.util.Map $r3;
        com.bumptech.glide.load.engine.cache.MemoryCache $r4;
        com.bumptech.glide.load.engine.ResourceRecycler $r5;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r2 := @parameter1: com.bumptech.glide.load.engine.EngineResource;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $r3 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r2.<com.bumptech.glide.load.engine.EngineResource: boolean isCacheable()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.cache.MemoryCache cache>;

        interfaceinvoke $r4.<com.bumptech.glide.load.engine.cache.MemoryCache: com.bumptech.glide.load.engine.Resource put(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource)>($r1, $r2);

        return;

     label1:
        $r5 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.ResourceRecycler resourceRecycler>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.ResourceRecycler: void recycle(com.bumptech.glide.load.engine.Resource)>($r2);

        return;
    }
    public void onResourceRemoved(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.Resource r1;
        com.bumptech.glide.load.engine.ResourceRecycler $r2;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $r2 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.ResourceRecycler resourceRecycler>;

        virtualinvoke $r2.<com.bumptech.glide.load.engine.ResourceRecycler: void recycle(com.bumptech.glide.load.engine.Resource)>(r1);

        return;
    }
    public void release(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.Resource r1;
        boolean $z0;
        com.bumptech.glide.load.engine.EngineResource r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $z0 = r1 instanceof com.bumptech.glide.load.engine.EngineResource;

        if $z0 == 0 goto label1;

        r2 = (com.bumptech.glide.load.engine.EngineResource) r1;

        virtualinvoke r2.<com.bumptech.glide.load.engine.EngineResource: void release()>();

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot release anything but an EngineResource");

        throw $r3;
    }
