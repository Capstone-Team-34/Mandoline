com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner extends java.lang.Object implements java.lang.Runnable
static final int BACKOFF_RATIO
private static final com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock DEFAULT_CLOCK
static final long INITIAL_BACKOFF_MS
static final long MAX_BACKOFF_MS
static final long MAX_DURATION_MS
private static final java.lang.String TAG
private final com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool
private final com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock clock
private long currentDelay
private final android.os.Handler handler
private boolean isCancelled
private final com.bumptech.glide.load.engine.cache.MemoryCache memoryCache
private final java.util.Set seenTypes
private final com.bumptech.glide.load.engine.prefill.PreFillQueue toPrefill
    static void <clinit>()
    {
        long $l0;
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock $r0;
        java.util.concurrent.TimeUnit $r1;

        $r0 = new com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock;

        specialinvoke $r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock: void <init>()>();

        <com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock DEFAULT_CLOCK> = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        <com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: long MAX_BACKOFF_MS> = $l0;

        return;
    }
    public void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.prefill.PreFillQueue)
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;
        com.bumptech.glide.load.engine.prefill.PreFillQueue $r3;
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock $r4;
        android.os.Handler $r5;
        android.os.Looper $r6;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        $r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $r2 := @parameter1: com.bumptech.glide.load.engine.cache.MemoryCache;

        $r3 := @parameter2: com.bumptech.glide.load.engine.prefill.PreFillQueue;

        $r4 = <com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock DEFAULT_CLOCK>;

        $r5 = new android.os.Handler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        specialinvoke r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.engine.cache.MemoryCache,com.bumptech.glide.load.engine.prefill.PreFillQueue,com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock,android.os.Handler)>($r1, $r2, $r3, $r4, $r5);

        return;
    }
    void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.prefill.PreFillQueue, com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock, android.os.Handler)
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;
        com.bumptech.glide.load.engine.prefill.PreFillQueue $r3;
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock $r4;
        android.os.Handler $r5;
        java.util.HashSet $r6;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        $r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $r2 := @parameter1: com.bumptech.glide.load.engine.cache.MemoryCache;

        $r3 := @parameter2: com.bumptech.glide.load.engine.prefill.PreFillQueue;

        $r4 := @parameter3: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock;

        $r5 := @parameter4: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: java.util.Set seenTypes> = $r6;

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: long currentDelay> = 40L;

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool> = $r1;

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache> = $r2;

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.PreFillQueue toPrefill> = $r3;

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock clock> = $r4;

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: android.os.Handler handler> = $r5;

        return;
    }
    private void addToBitmapPool(com.bumptech.glide.load.engine.prefill.PreFillType, android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        com.bumptech.glide.load.engine.prefill.PreFillType $r1;
        android.graphics.Bitmap $r2, $r6;
        java.util.Set $r3;
        boolean $z0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r4;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r5;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        $r1 := @parameter0: com.bumptech.glide.load.engine.prefill.PreFillType;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r3 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: java.util.Set seenTypes>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $i0 = virtualinvoke $r1.<com.bumptech.glide.load.engine.prefill.PreFillType: int getWidth()>();

        $i1 = virtualinvoke $r1.<com.bumptech.glide.load.engine.prefill.PreFillType: int getHeight()>();

        $r5 = virtualinvoke $r1.<com.bumptech.glide.load.engine.prefill.PreFillType: android.graphics.Bitmap$Config getConfig()>();

        $r6 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: android.graphics.Bitmap get(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r5);

        if $r6 == null goto label1;

        $r4 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: boolean put(android.graphics.Bitmap)>($r6);

     label1:
        $r4 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: boolean put(android.graphics.Bitmap)>($r2);

        return;
    }
    private boolean allocate()
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock $r1;
        long $l0;
        com.bumptech.glide.load.engine.prefill.PreFillQueue $r2;
        boolean $z0;
        com.bumptech.glide.load.engine.prefill.PreFillType $r3;
        int $i1, $i2;
        android.graphics.Bitmap$Config $r4;
        android.graphics.Bitmap $r5;
        com.bumptech.glide.load.engine.cache.MemoryCache $r6;
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$UniqueKey $r7;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r8;
        com.bumptech.glide.load.resource.bitmap.BitmapResource $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        $r1 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock clock>;

        $l0 = virtualinvoke $r1.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock: long now()>();

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.PreFillQueue toPrefill>;

        $z0 = virtualinvoke $r2.<com.bumptech.glide.load.engine.prefill.PreFillQueue: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $z0 = specialinvoke r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: boolean isGcDetected(long)>($l0);

        if $z0 != 0 goto label4;

        $r2 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.PreFillQueue toPrefill>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.load.engine.prefill.PreFillQueue: com.bumptech.glide.load.engine.prefill.PreFillType remove()>();

        $i1 = virtualinvoke $r3.<com.bumptech.glide.load.engine.prefill.PreFillType: int getWidth()>();

        $i2 = virtualinvoke $r3.<com.bumptech.glide.load.engine.prefill.PreFillType: int getHeight()>();

        $r4 = virtualinvoke $r3.<com.bumptech.glide.load.engine.prefill.PreFillType: android.graphics.Bitmap$Config getConfig()>();

        $r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i1, $i2, $r4);

        $i1 = specialinvoke r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: int getFreeMemoryCacheBytes()>();

        $i2 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r5);

        if $i1 < $i2 goto label3;

        $r6 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        $r7 = new com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$UniqueKey;

        specialinvoke $r7.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$UniqueKey: void <init>(com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$1)>(null);

        $r8 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $r9 = staticinvoke <com.bumptech.glide.load.resource.bitmap.BitmapResource: com.bumptech.glide.load.resource.bitmap.BitmapResource obtain(android.graphics.Bitmap,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r5, $r8);

        interfaceinvoke $r6.<com.bumptech.glide.load.engine.cache.MemoryCache: com.bumptech.glide.load.engine.Resource put(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource)>($r7, $r9);

     label2:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("PreFillRunner", 3);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("allocated [");

        $i1 = virtualinvoke $r3.<com.bumptech.glide.load.engine.prefill.PreFillType: int getWidth()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i1 = virtualinvoke $r3.<com.bumptech.glide.load.engine.prefill.PreFillType: int getHeight()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r4 = virtualinvoke $r3.<com.bumptech.glide.load.engine.prefill.PreFillType: android.graphics.Bitmap$Config getConfig()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size: ");

        $i1 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r5);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PreFillRunner", $r11);

        goto label1;

     label3:
        specialinvoke r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: void addToBitmapPool(com.bumptech.glide.load.engine.prefill.PreFillType,android.graphics.Bitmap)>($r3, $r5);

        goto label2;

     label4:
        $z0 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: boolean isCancelled>;

        if $z0 != 0 goto label5;

        $r2 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.PreFillQueue toPrefill>;

        $z0 = virtualinvoke $r2.<com.bumptech.glide.load.engine.prefill.PreFillQueue: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        return 1;

     label5:
        return 0;
    }
    private int getFreeMemoryCacheBytes()
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        com.bumptech.glide.load.engine.cache.MemoryCache $r1;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        $r1 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        $i0 = interfaceinvoke $r1.<com.bumptech.glide.load.engine.cache.MemoryCache: int getMaxSize()>();

        $r1 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        $i1 = interfaceinvoke $r1.<com.bumptech.glide.load.engine.cache.MemoryCache: int getCurrentSize()>();

        $i0 = $i0 - $i1;

        return $i0;
    }
    private long getNextDelay()
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        long $l0, $l1, l2;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        l2 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: long currentDelay>;

        $l0 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: long currentDelay>;

        $l0 = $l0 * 4L;

        $l1 = <com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: long MAX_BACKOFF_MS>;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: long currentDelay> = $l0;

        return l2;
    }
    private boolean isGcDetected(long)
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        long $l0, $l1;
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock $r1;
        byte $b2;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        $l0 := @parameter0: long;

        $r1 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock clock>;

        $l1 = virtualinvoke $r1.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner$Clock: long now()>();

        $l0 = $l1 - $l0;

        $b2 = $l0 cmp 32L;

        if $b2 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void cancel()
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: boolean isCancelled> = 1;

        return;
    }
    public void run()
    {
        com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner r0;
        boolean $z0;
        android.os.Handler $r1;
        long $l0;

        r0 := @this: com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner;

        $z0 = specialinvoke r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: boolean allocate()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: android.os.Handler handler>;

        $l0 = specialinvoke r0.<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: long getNextDelay()>();

        virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r0, $l0);

     label1:
        return;
    }
