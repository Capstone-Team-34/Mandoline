com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy extends java.lang.Object implements com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy
private static final int MAX_SIZE_MULTIPLE
private final com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap
private final com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool
private final java.util.TreeMap sortedSizes
    void <init>()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r2;
        com.bumptech.glide.load.engine.bitmap_recycle.PrettyPrintTreeMap $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        specialinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool> = $r1;

        $r2 = new com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        specialinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap> = $r2;

        $r3 = new com.bumptech.glide.load.engine.bitmap_recycle.PrettyPrintTreeMap;

        specialinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.PrettyPrintTreeMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes> = $r3;

        return;
    }
    static java.lang.String access$100(int)
    {
        int $i0;
        java.lang.String $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(int)>($i0);

        return $r0;
    }
    private void decrementBitmapOfSize(java.lang.Integer)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        java.lang.Integer $r1, r4;
        java.util.TreeMap $r2;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r1 := @parameter0: java.lang.Integer;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label1;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        virtualinvoke $r2.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r1);

        return;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + -1;

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

        return;
    }
    private static java.lang.String getBitmapString(int)
    {
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    private static java.lang.String getBitmapString(android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r0);

        $r1 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(int)>($i0);

        return $r1;
    }
    public android.graphics.Bitmap get(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Bitmap$Config $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r2;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key $r3, r4;
        java.util.TreeMap $r5;
        java.lang.Integer $r6;
        java.lang.Object $r7;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r8;
        android.graphics.Bitmap r9;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Bitmap$Config;

        $i2 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key get(int)>($i2);

        r4 = $r3;

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7 = virtualinvoke $r5.<java.util.TreeMap: java.lang.Object ceilingKey(java.lang.Object)>($r6);

        $r6 = (java.lang.Integer) $r7;

        if $r6 == null goto label1;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i3 == $i2 goto label1;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i2 = $i2 * 8;

        if $i3 > $i2 goto label1;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: void offer(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>($r3);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r4 = virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key get(int)>($i2);

     label1:
        $r8 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r7 = virtualinvoke $r8.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.lang.Object get(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>(r4);

        r9 = (android.graphics.Bitmap) $r7;

        if r9 == null goto label2;

        virtualinvoke r9.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: void decrementBitmapOfSize(java.lang.Integer)>($r6);

     label2:
        return r9;
    }
    public int getSize(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        android.graphics.Bitmap $r1;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r1 := @parameter0: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r1);

        return $i0;
    }
    public java.lang.String logBitmap(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r1;
        java.lang.String $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Bitmap$Config;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        $r2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(int)>($i0);

        return $r2;
    }
    public java.lang.String logBitmap(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        android.graphics.Bitmap $r1;
        java.lang.String $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(android.graphics.Bitmap)>($r1);

        return $r2;
    }
    public void put(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        android.graphics.Bitmap $r1;
        int $i0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r2;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key $r3;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r4;
        java.util.TreeMap $r5;
        java.lang.Integer $r6, r8;
        java.lang.Object $r7;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r1 := @parameter0: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r1);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key get(int)>($i0);

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        virtualinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void put(com.bumptech.glide.load.engine.bitmap_recycle.Poolable,java.lang.Object)>($r3, $r1);

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $i0 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int access$000(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key)>($r3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = virtualinvoke $r5.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r6);

        r8 = (java.lang.Integer) $r7;

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $i0 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int access$000(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key)>($r3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        if r8 != null goto label2;

        $i0 = 1;

     label1:
        r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r8);

        return;

     label2:
        $i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + 1;

        goto label1;
    }
    public android.graphics.Bitmap removeLast()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r1;
        java.lang.Object $r2;
        android.graphics.Bitmap r3;
        int $i0;
        java.lang.Integer $r4;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r2 = virtualinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.lang.Object removeLast()>();

        r3 = (android.graphics.Bitmap) $r2;

        if r3 == null goto label1;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>(r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: void decrementBitmapOfSize(java.lang.Integer)>($r4);

     label1:
        return r3;
    }
    public java.lang.String toString()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        java.lang.StringBuilder $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r2;
        java.util.TreeMap $r3;
        java.lang.String $r4;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SizeStrategy:\n  ");

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  SortedSizes");

        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
