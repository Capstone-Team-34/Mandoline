com.bumptech.glide.load.resource.bitmap.TransformationUtils extends java.lang.Object
public static final int PAINT_FLAGS
private static final java.lang.String TAG
    private void <init>()
    {
        com.bumptech.glide.load.resource.bitmap.TransformationUtils r0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.TransformationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static android.graphics.Bitmap centerCrop(android.graphics.Bitmap, android.graphics.Bitmap, int, int)
    {
        android.graphics.Bitmap $r0, r4;
        int $i0, $i1, $i2, $i3;
        android.graphics.Canvas r1;
        android.graphics.Matrix r2;
        android.graphics.Paint r3;
        float f0, f1, $f2, $f3;
        android.graphics.Bitmap$Config $r5;

        $r0 := @parameter0: android.graphics.Bitmap;

        r4 := @parameter1: android.graphics.Bitmap;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if r4 != null goto label1;

        return null;

     label1:
        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        if $i2 != $i0 goto label2;

        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        if $i2 == $i1 goto label7;

     label2:
        f0 = 0.0F;

        f1 = 0.0F;

        r2 = new android.graphics.Matrix;

        specialinvoke r2.<android.graphics.Matrix: void <init>()>();

        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $i2 = $i2 * $i1;

        $i3 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $i3 = $i3 * $i0;

        if $i2 <= $i3 goto label5;

        $f2 = (float) $i1;

        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        f0 = (float) $i2;

        $f2 = $f2 / f0;

        f0 = (float) $i0;

        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $f3 = (float) $i2;

        $f3 = $f3 * $f2;

        f0 = f0 - $f3;

        f0 = f0 * 0.5F;

     label3:
        virtualinvoke r2.<android.graphics.Matrix: void setScale(float,float)>($f2, $f2);

        $f2 = f0 + 0.5F;

        $i2 = (int) $f2;

        $f2 = (float) $i2;

        f1 = f1 + 0.5F;

        $i2 = (int) f1;

        f1 = (float) $i2;

        virtualinvoke r2.<android.graphics.Matrix: boolean postTranslate(float,float)>($f2, f1);

        if $r0 == null goto label6;

     label4:
        staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: void setAlpha(android.graphics.Bitmap,android.graphics.Bitmap)>(r4, $r0);

        r1 = new android.graphics.Canvas;

        specialinvoke r1.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r0);

        r3 = new android.graphics.Paint;

        specialinvoke r3.<android.graphics.Paint: void <init>(int)>(6);

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r4, r2, r3);

        return $r0;

     label5:
        f1 = (float) $i0;

        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $f2 = (float) $i2;

        $f2 = f1 / $f2;

        f1 = (float) $i1;

        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $f3 = (float) $i2;

        $f3 = $f3 * $f2;

        f1 = f1 - $f3;

        f1 = f1 * 0.5F;

        goto label3;

     label6:
        $r5 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap$Config getSafeConfig(android.graphics.Bitmap)>(r4);

        $r0 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r5);

        goto label4;

     label7:
        return r4;
    }
    public static android.graphics.Bitmap fitCenter(android.graphics.Bitmap, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int, int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r0;
        int $i0, $i1, i2, i3, $i4;
        android.graphics.Canvas r1;
        float f0, f1, $f2;
        android.graphics.Matrix r2;
        android.graphics.Paint r3;
        android.graphics.Bitmap r4, $r6, r7;
        boolean $z0;
        android.graphics.Bitmap$Config $r5;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r4 := @parameter0: android.graphics.Bitmap;

        $r0 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        i3 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        if i3 != $i0 goto label1;

        i3 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        if i3 != $i1 goto label1;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("TransformationUtils", 2);

        if $z0 == 0 goto label5;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TransformationUtils", "requested target size matches input, returning input");

        return r4;

     label1:
        f1 = (float) $i0;

        i3 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        f0 = (float) i3;

        f1 = f1 / f0;

        f0 = (float) $i1;

        i3 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $f2 = (float) i3;

        f0 = f0 / $f2;

        f1 = staticinvoke <java.lang.Math: float min(float,float)>(f1, f0);

        i3 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        f0 = (float) i3;

        f0 = f0 * f1;

        i3 = (int) f0;

        i2 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        f0 = (float) i2;

        f0 = f0 * f1;

        i2 = (int) f0;

        $i4 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        if $i4 != i3 goto label2;

        $i4 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        if $i4 != i2 goto label2;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("TransformationUtils", 2);

        if $z0 == 0 goto label5;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TransformationUtils", "adjusted target size matches input, returning input");

        return r4;

     label2:
        $r5 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap$Config getSafeConfig(android.graphics.Bitmap)>(r4);

        $r6 = interfaceinvoke $r0.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: android.graphics.Bitmap get(int,int,android.graphics.Bitmap$Config)>(i3, i2, $r5);

        r7 = $r6;

        if $r6 != null goto label3;

        r7 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i3, i2, $r5);

     label3:
        staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: void setAlpha(android.graphics.Bitmap,android.graphics.Bitmap)>(r4, r7);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("TransformationUtils", 2);

        if $z0 == 0 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("request: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TransformationUtils", $r9);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toFit:   ");

        $i0 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i0 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TransformationUtils", $r9);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toReuse: ");

        $i0 = virtualinvoke r7.<android.graphics.Bitmap: int getWidth()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i0 = virtualinvoke r7.<android.graphics.Bitmap: int getHeight()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TransformationUtils", $r9);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minPct:   ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TransformationUtils", $r9);

     label4:
        r1 = new android.graphics.Canvas;

        specialinvoke r1.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r7);

        r2 = new android.graphics.Matrix;

        specialinvoke r2.<android.graphics.Matrix: void <init>()>();

        virtualinvoke r2.<android.graphics.Matrix: void setScale(float,float)>(f1, f1);

        r3 = new android.graphics.Paint;

        specialinvoke r3.<android.graphics.Paint: void <init>(int)>(6);

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r4, r2, r3);

        return r7;

     label5:
        return r4;
    }
    public static int getExifOrientationDegrees(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label4;
            case 8: goto label4;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 90;

     label3:
        return 180;

     label4:
        return 270;
    }
    public static int getOrientation(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Exception r1;
        android.media.ExifInterface r2;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        r2 = new android.media.ExifInterface;

     label1:
        specialinvoke r2.<android.media.ExifInterface: void <init>(java.lang.String)>($r0);

        $i0 = virtualinvoke r2.<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>("Orientation", 0);

        $i0 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: int getExifOrientationDegrees(int)>($i0);

     label2:
        return $i0;

     label3:
        r1 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("TransformationUtils", 6);

        if $z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get orientation for image with path=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TransformationUtils", $r0, r1);

     label4:
        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    private static android.graphics.Bitmap$Config getSafeConfig(android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r0;
        android.graphics.Bitmap$Config $r1;

        $r0 := @parameter0: android.graphics.Bitmap;

        $r1 = virtualinvoke $r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r1 == null goto label1;

        $r1 = virtualinvoke $r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        return $r1;

     label1:
        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        return $r1;
    }
    static void initializeMatrixForRotation(int, android.graphics.Matrix)
    {
        int $i0;
        android.graphics.Matrix $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: android.graphics.Matrix;

        lookupswitch($i0)
        {
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label8;
            default: goto label1;
        };

     label1:
        return;

     label2:
        virtualinvoke $r0.<android.graphics.Matrix: void setScale(float,float)>(-1.0F, 1.0F);

        return;

     label3:
        virtualinvoke $r0.<android.graphics.Matrix: void setRotate(float)>(180.0F);

        return;

     label4:
        virtualinvoke $r0.<android.graphics.Matrix: void setRotate(float)>(180.0F);

        virtualinvoke $r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        return;

     label5:
        virtualinvoke $r0.<android.graphics.Matrix: void setRotate(float)>(90.0F);

        virtualinvoke $r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        return;

     label6:
        virtualinvoke $r0.<android.graphics.Matrix: void setRotate(float)>(90.0F);

        return;

     label7:
        virtualinvoke $r0.<android.graphics.Matrix: void setRotate(float)>(-90.0F);

        virtualinvoke $r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        return;

     label8:
        virtualinvoke $r0.<android.graphics.Matrix: void setRotate(float)>(-90.0F);

        return;
    }
    public static android.graphics.Bitmap orientImage(java.lang.String, android.graphics.Bitmap)
    {
        java.lang.String $r0;
        android.graphics.Bitmap $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: int getOrientation(java.lang.String)>($r0);

        $r1 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap rotateImage(android.graphics.Bitmap,int)>($r1, $i0);

        return $r1;
    }
    public static android.graphics.Bitmap rotateImage(android.graphics.Bitmap, int)
    {
        android.graphics.Bitmap $r0, $r3;
        int $i0, $i1;
        android.graphics.Matrix r1;
        java.lang.Exception r2;
        float $f0;
        boolean $z0;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 := @parameter1: int;

        if $i0 == 0 goto label6;

        r1 = new android.graphics.Matrix;

     label1:
        specialinvoke r1.<android.graphics.Matrix: void <init>()>();

     label2:
        $f0 = (float) $i0;

     label3:
        virtualinvoke r1.<android.graphics.Matrix: void setRotate(float)>($f0);

        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>($r0, 0, 0, $i0, $i1, r1, 1);

     label4:
        return $r3;

     label5:
        r2 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("TransformationUtils", 6);

        if $z0 == 0 goto label6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TransformationUtils", "Exception when trying to orient image", r2);

     label6:
        return $r0;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public static android.graphics.Bitmap rotateImageExif(android.graphics.Bitmap, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r0;
        int $i0, $i1;
        android.graphics.Canvas r1;
        android.graphics.Matrix r2;
        android.graphics.RectF r3;
        android.graphics.Paint r4;
        android.graphics.Bitmap r5, $r7, r8;
        boolean $z0;
        float $f0, $f1;
        android.graphics.Bitmap$Config $r6;

        r5 := @parameter0: android.graphics.Bitmap;

        $r0 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $i0 := @parameter2: int;

        r2 = new android.graphics.Matrix;

        specialinvoke r2.<android.graphics.Matrix: void <init>()>();

        staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: void initializeMatrixForRotation(int,android.graphics.Matrix)>($i0, r2);

        $z0 = virtualinvoke r2.<android.graphics.Matrix: boolean isIdentity()>();

        if $z0 == 0 goto label1;

        return r5;

     label1:
        r3 = new android.graphics.RectF;

        $i0 = virtualinvoke r5.<android.graphics.Bitmap: int getWidth()>();

        $f0 = (float) $i0;

        $i0 = virtualinvoke r5.<android.graphics.Bitmap: int getHeight()>();

        $f1 = (float) $i0;

        specialinvoke r3.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        virtualinvoke r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r3);

        $f0 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $f0 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $r6 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap$Config getSafeConfig(android.graphics.Bitmap)>(r5);

        $r7 = interfaceinvoke $r0.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: android.graphics.Bitmap get(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r6);

        r8 = $r7;

        if $r7 != null goto label2;

        r8 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r6);

     label2:
        $f0 = r3.<android.graphics.RectF: float left>;

        $f0 = neg $f0;

        $f1 = r3.<android.graphics.RectF: float top>;

        $f1 = neg $f1;

        virtualinvoke r2.<android.graphics.Matrix: boolean postTranslate(float,float)>($f0, $f1);

        r1 = new android.graphics.Canvas;

        specialinvoke r1.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r8);

        r4 = new android.graphics.Paint;

        specialinvoke r4.<android.graphics.Paint: void <init>(int)>(6);

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r5, r2, r4);

        return r8;
    }
    public static void setAlpha(android.graphics.Bitmap, android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r0, $r1;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: android.graphics.Bitmap;

        $r1 := @parameter1: android.graphics.Bitmap;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 12 goto label1;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        virtualinvoke $r1.<android.graphics.Bitmap: void setHasAlpha(boolean)>($z0);

     label1:
        return;
    }
