com.bumptech.glide.load.MultiTransformation extends java.lang.Object implements com.bumptech.glide.load.Transformation
private java.lang.String id
private final java.util.Collection transformations
    public void <init>(java.util.Collection)
    {
        com.bumptech.glide.load.MultiTransformation r0;
        java.util.Collection r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MultiTransformation must contain at least one Transformation");

        throw $r2;

     label1:
        r0.<com.bumptech.glide.load.MultiTransformation: java.util.Collection transformations> = r1;

        return;
    }
    public transient void <init>(com.bumptech.glide.load.Transformation[])
    {
        com.bumptech.glide.load.MultiTransformation r0;
        com.bumptech.glide.load.Transformation[] r1;
        java.util.List $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        r1 := @parameter0: com.bumptech.glide.load.Transformation[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MultiTransformation must contain at least one Transformation");

        throw $r3;

     label1:
        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        r0.<com.bumptech.glide.load.MultiTransformation: java.util.Collection transformations> = $r2;

        return;
    }
    public java.lang.String getId()
    {
        com.bumptech.glide.load.MultiTransformation r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.bumptech.glide.load.Transformation r6;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        $r2 = r0.<com.bumptech.glide.load.MultiTransformation: java.lang.String id>;

        if $r2 != null goto label3;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<com.bumptech.glide.load.MultiTransformation: java.util.Collection transformations>;

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.bumptech.glide.load.Transformation) $r5;

        $r2 = interfaceinvoke r6.<com.bumptech.glide.load.Transformation: java.lang.String getId()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.bumptech.glide.load.MultiTransformation: java.lang.String id> = $r2;

     label3:
        $r2 = r0.<com.bumptech.glide.load.MultiTransformation: java.lang.String id>;

        return $r2;
    }
    public com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource, int, int)
    {
        com.bumptech.glide.load.MultiTransformation r0;
        com.bumptech.glide.load.engine.Resource r1, r2, $r7;
        int $i0, $i1;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.bumptech.glide.load.Transformation r6;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 = r1;

        $r3 = r0.<com.bumptech.glide.load.MultiTransformation: java.util.Collection transformations>;

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.bumptech.glide.load.Transformation) $r5;

        $r7 = interfaceinvoke r6.<com.bumptech.glide.load.Transformation: com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource,int,int)>(r2, $i0, $i1);

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        interfaceinvoke r2.<com.bumptech.glide.load.engine.Resource: void recycle()>();

     label2:
        r2 = $r7;

        goto label1;

     label3:
        return r2;
    }
