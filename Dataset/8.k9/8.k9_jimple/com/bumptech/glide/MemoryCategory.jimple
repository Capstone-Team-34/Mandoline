com.bumptech.glide.MemoryCategory extends java.lang.Enum
private static final com.bumptech.glide.MemoryCategory[] $VALUES
public static final enum com.bumptech.glide.MemoryCategory HIGH
public static final enum com.bumptech.glide.MemoryCategory LOW
public static final enum com.bumptech.glide.MemoryCategory NORMAL
private float multiplier
    static void <clinit>()
    {
        com.bumptech.glide.MemoryCategory $r0;
        com.bumptech.glide.MemoryCategory[] $r1;

        $r0 = new com.bumptech.glide.MemoryCategory;

        specialinvoke $r0.<com.bumptech.glide.MemoryCategory: void <init>(java.lang.String,int,float)>("LOW", 0, 0.5F);

        <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory LOW> = $r0;

        $r0 = new com.bumptech.glide.MemoryCategory;

        specialinvoke $r0.<com.bumptech.glide.MemoryCategory: void <init>(java.lang.String,int,float)>("NORMAL", 1, 1.0F);

        <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory NORMAL> = $r0;

        $r0 = new com.bumptech.glide.MemoryCategory;

        specialinvoke $r0.<com.bumptech.glide.MemoryCategory: void <init>(java.lang.String,int,float)>("HIGH", 2, 1.5F);

        <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory HIGH> = $r0;

        $r1 = newarray (com.bumptech.glide.MemoryCategory)[3];

        $r0 = <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory LOW>;

        $r1[0] = $r0;

        $r0 = <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory NORMAL>;

        $r1[1] = $r0;

        $r0 = <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory HIGH>;

        $r1[2] = $r0;

        <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int, float)
    {
        com.bumptech.glide.MemoryCategory r0;
        java.lang.String $r1;
        int $i0;
        float $f0;

        r0 := @this: com.bumptech.glide.MemoryCategory;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $f0 := @parameter2: float;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<com.bumptech.glide.MemoryCategory: float multiplier> = $f0;

        return;
    }
    public static com.bumptech.glide.MemoryCategory valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        com.bumptech.glide.MemoryCategory $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/bumptech/glide/MemoryCategory;", $r0);

        $r2 = (com.bumptech.glide.MemoryCategory) $r1;

        return $r2;
    }
    public static com.bumptech.glide.MemoryCategory[] values()
    {
        java.lang.Object $r0;
        com.bumptech.glide.MemoryCategory[] $r1;

        $r1 = <com.bumptech.glide.MemoryCategory: com.bumptech.glide.MemoryCategory[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (com.bumptech.glide.MemoryCategory[]) $r0;

        return $r1;
    }
    public float getMultiplier()
    {
        com.bumptech.glide.MemoryCategory r0;
        float f0;

        r0 := @this: com.bumptech.glide.MemoryCategory;

        f0 = r0.<com.bumptech.glide.MemoryCategory: float multiplier>;

        return f0;
    }
