com.bumptech.glide.RequestManager extends java.lang.Object implements com.bumptech.glide.manager.LifecycleListener
private final android.content.Context context
private final com.bumptech.glide.Glide glide
private final com.bumptech.glide.manager.Lifecycle lifecycle
private com.bumptech.glide.RequestManager$DefaultOptions options
private final com.bumptech.glide.RequestManager$OptionsApplier optionsApplier
private final com.bumptech.glide.manager.RequestTracker requestTracker
private final com.bumptech.glide.manager.RequestManagerTreeNode treeNode
    public void <init>(android.content.Context, com.bumptech.glide.manager.Lifecycle, com.bumptech.glide.manager.RequestManagerTreeNode)
    {
        com.bumptech.glide.RequestManager r0;
        android.content.Context $r1;
        com.bumptech.glide.manager.Lifecycle $r2;
        com.bumptech.glide.manager.RequestManagerTreeNode $r3;
        com.bumptech.glide.manager.RequestTracker $r4;
        com.bumptech.glide.manager.ConnectivityMonitorFactory $r5;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.bumptech.glide.manager.Lifecycle;

        $r3 := @parameter2: com.bumptech.glide.manager.RequestManagerTreeNode;

        $r4 = new com.bumptech.glide.manager.RequestTracker;

        specialinvoke $r4.<com.bumptech.glide.manager.RequestTracker: void <init>()>();

        $r5 = new com.bumptech.glide.manager.ConnectivityMonitorFactory;

        specialinvoke $r5.<com.bumptech.glide.manager.ConnectivityMonitorFactory: void <init>()>();

        specialinvoke r0.<com.bumptech.glide.RequestManager: void <init>(android.content.Context,com.bumptech.glide.manager.Lifecycle,com.bumptech.glide.manager.RequestManagerTreeNode,com.bumptech.glide.manager.RequestTracker,com.bumptech.glide.manager.ConnectivityMonitorFactory)>($r1, $r2, $r3, $r4, $r5);

        return;
    }
    void <init>(android.content.Context, com.bumptech.glide.manager.Lifecycle, com.bumptech.glide.manager.RequestManagerTreeNode, com.bumptech.glide.manager.RequestTracker, com.bumptech.glide.manager.ConnectivityMonitorFactory)
    {
        com.bumptech.glide.RequestManager r0;
        android.content.Context $r1, $r6;
        com.bumptech.glide.manager.Lifecycle $r2;
        com.bumptech.glide.manager.RequestManagerTreeNode $r3;
        com.bumptech.glide.manager.RequestTracker $r4;
        com.bumptech.glide.manager.ConnectivityMonitorFactory $r5;
        com.bumptech.glide.Glide $r7;
        com.bumptech.glide.RequestManager$OptionsApplier $r8;
        com.bumptech.glide.RequestManager$RequestManagerConnectivityListener $r9;
        com.bumptech.glide.manager.ConnectivityMonitor $r10;
        boolean $z0;
        android.os.Handler $r11;
        android.os.Looper $r12;
        com.bumptech.glide.RequestManager$1 $r13;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.bumptech.glide.manager.Lifecycle;

        $r3 := @parameter2: com.bumptech.glide.manager.RequestManagerTreeNode;

        $r4 := @parameter3: com.bumptech.glide.manager.RequestTracker;

        $r5 := @parameter4: com.bumptech.glide.manager.ConnectivityMonitorFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<com.bumptech.glide.RequestManager: android.content.Context context> = $r6;

        r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.Lifecycle lifecycle> = $r2;

        r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestManagerTreeNode treeNode> = $r3;

        r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker> = $r4;

        $r7 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.Glide get(android.content.Context)>($r1);

        r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.Glide glide> = $r7;

        $r8 = new com.bumptech.glide.RequestManager$OptionsApplier;

        specialinvoke $r8.<com.bumptech.glide.RequestManager$OptionsApplier: void <init>(com.bumptech.glide.RequestManager)>(r0);

        r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier> = $r8;

        $r9 = new com.bumptech.glide.RequestManager$RequestManagerConnectivityListener;

        specialinvoke $r9.<com.bumptech.glide.RequestManager$RequestManagerConnectivityListener: void <init>(com.bumptech.glide.manager.RequestTracker)>($r4);

        $r10 = virtualinvoke $r5.<com.bumptech.glide.manager.ConnectivityMonitorFactory: com.bumptech.glide.manager.ConnectivityMonitor build(android.content.Context,com.bumptech.glide.manager.ConnectivityMonitor$ConnectivityListener)>($r1, $r9);

        $z0 = staticinvoke <com.bumptech.glide.util.Util: boolean isOnBackgroundThread()>();

        if $z0 == 0 goto label2;

        $r11 = new android.os.Handler;

        $r12 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r11.<android.os.Handler: void <init>(android.os.Looper)>($r12);

        $r13 = new com.bumptech.glide.RequestManager$1;

        specialinvoke $r13.<com.bumptech.glide.RequestManager$1: void <init>(com.bumptech.glide.RequestManager,com.bumptech.glide.manager.Lifecycle)>(r0, $r2);

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r13);

     label1:
        interfaceinvoke $r2.<com.bumptech.glide.manager.Lifecycle: void addListener(com.bumptech.glide.manager.LifecycleListener)>($r10);

        return;

     label2:
        interfaceinvoke $r2.<com.bumptech.glide.manager.Lifecycle: void addListener(com.bumptech.glide.manager.LifecycleListener)>(r0);

        goto label1;
    }
    static java.lang.Class access$000(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Class $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <com.bumptech.glide.RequestManager: java.lang.Class getSafeClass(java.lang.Object)>($r0);

        return $r1;
    }
    static android.content.Context access$100(com.bumptech.glide.RequestManager)
    {
        com.bumptech.glide.RequestManager $r0;
        android.content.Context r1;

        $r0 := @parameter0: com.bumptech.glide.RequestManager;

        r1 = $r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        return r1;
    }
    static com.bumptech.glide.Glide access$200(com.bumptech.glide.RequestManager)
    {
        com.bumptech.glide.RequestManager $r0;
        com.bumptech.glide.Glide r1;

        $r0 := @parameter0: com.bumptech.glide.RequestManager;

        r1 = $r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.Glide glide>;

        return r1;
    }
    static com.bumptech.glide.manager.RequestTracker access$300(com.bumptech.glide.RequestManager)
    {
        com.bumptech.glide.RequestManager $r0;
        com.bumptech.glide.manager.RequestTracker r1;

        $r0 := @parameter0: com.bumptech.glide.RequestManager;

        r1 = $r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker>;

        return r1;
    }
    static com.bumptech.glide.manager.Lifecycle access$400(com.bumptech.glide.RequestManager)
    {
        com.bumptech.glide.RequestManager $r0;
        com.bumptech.glide.manager.Lifecycle r1;

        $r0 := @parameter0: com.bumptech.glide.RequestManager;

        r1 = $r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.Lifecycle lifecycle>;

        return r1;
    }
    static com.bumptech.glide.RequestManager$OptionsApplier access$500(com.bumptech.glide.RequestManager)
    {
        com.bumptech.glide.RequestManager $r0;
        com.bumptech.glide.RequestManager$OptionsApplier r1;

        $r0 := @parameter0: com.bumptech.glide.RequestManager;

        r1 = $r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        return r1;
    }
    static com.bumptech.glide.RequestManager$DefaultOptions access$800(com.bumptech.glide.RequestManager)
    {
        com.bumptech.glide.RequestManager $r0;
        com.bumptech.glide.RequestManager$DefaultOptions r1;

        $r0 := @parameter0: com.bumptech.glide.RequestManager;

        r1 = $r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$DefaultOptions options>;

        return r1;
    }
    private static java.lang.Class getSafeClass(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;

     label1:
        return null;
    }
    private com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)
    {
        com.bumptech.glide.RequestManager r0;
        java.lang.Class r1;
        com.bumptech.glide.Glide $r2;
        com.bumptech.glide.manager.RequestTracker $r3;
        com.bumptech.glide.manager.Lifecycle $r4;
        com.bumptech.glide.RequestManager$OptionsApplier $r5, $r6;
        android.content.Context $r7;
        com.bumptech.glide.load.model.ModelLoader $r8, $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        com.bumptech.glide.DrawableTypeRequest $r13;
        com.bumptech.glide.GenericRequestBuilder $r14;

        r0 := @this: com.bumptech.glide.RequestManager;

        r1 := @parameter0: java.lang.Class;

        $r7 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        $r8 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildStreamModelLoader(java.lang.Class,android.content.Context)>(r1, $r7);

        $r7 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        $r9 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildFileDescriptorModelLoader(java.lang.Class,android.content.Context)>(r1, $r7);

        if r1 == null goto label1;

        if $r8 != null goto label1;

        if $r9 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown type ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". You must provide a Model of a type for");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which there is a registered ModelLoader, if you are using a custom model, you must first call");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Glide#register with a ModelLoaderFactory for your custom model class");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label1:
        $r6 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        $r13 = new com.bumptech.glide.DrawableTypeRequest;

        $r7 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        $r2 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.Glide glide>;

        $r3 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker>;

        $r4 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.Lifecycle lifecycle>;

        $r5 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        specialinvoke $r13.<com.bumptech.glide.DrawableTypeRequest: void <init>(java.lang.Class,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,android.content.Context,com.bumptech.glide.Glide,com.bumptech.glide.manager.RequestTracker,com.bumptech.glide.manager.Lifecycle,com.bumptech.glide.RequestManager$OptionsApplier)>(r1, $r8, $r9, $r7, $r2, $r3, $r4, $r5);

        $r14 = virtualinvoke $r6.<com.bumptech.glide.RequestManager$OptionsApplier: com.bumptech.glide.GenericRequestBuilder apply(com.bumptech.glide.GenericRequestBuilder)>($r13);

        $r13 = (com.bumptech.glide.DrawableTypeRequest) $r14;

        return $r13;
    }
    public com.bumptech.glide.DrawableTypeRequest 'from'(java.lang.Class)
    {
        com.bumptech.glide.RequestManager r0;
        java.lang.Class r1;
        com.bumptech.glide.DrawableTypeRequest $r2;

        r0 := @this: com.bumptech.glide.RequestManager;

        r1 := @parameter0: java.lang.Class;

        $r2 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>(r1);

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest fromBytes()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.DrawableTypeRequest $r1;
        com.bumptech.glide.signature.StringSignature $r2;
        java.util.UUID $r3;
        java.lang.String $r4;
        com.bumptech.glide.DrawableRequestBuilder $r5;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r6;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>(class "[B");

        $r2 = new com.bumptech.glide.signature.StringSignature;

        $r3 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r4 = virtualinvoke $r3.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r2.<com.bumptech.glide.signature.StringSignature: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder signature(com.bumptech.glide.load.Key)>($r2);

        $r6 = <com.bumptech.glide.load.engine.DiskCacheStrategy: com.bumptech.glide.load.engine.DiskCacheStrategy NONE>;

        $r5 = virtualinvoke $r5.<com.bumptech.glide.DrawableRequestBuilder: com.bumptech.glide.DrawableRequestBuilder diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy)>($r6);

        $r5 = virtualinvoke $r5.<com.bumptech.glide.DrawableRequestBuilder: com.bumptech.glide.DrawableRequestBuilder skipMemoryCache(boolean)>(1);

        $r1 = (com.bumptech.glide.DrawableTypeRequest) $r5;

        return $r1;
    }
    public com.bumptech.glide.DrawableTypeRequest fromFile()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.DrawableTypeRequest $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>(class "Ljava/io/File;");

        return $r1;
    }
    public com.bumptech.glide.DrawableTypeRequest fromMediaStore()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.load.model.stream.MediaStoreStreamLoader r1;
        android.content.Context $r2;
        com.bumptech.glide.Glide $r3;
        com.bumptech.glide.manager.RequestTracker $r4;
        com.bumptech.glide.manager.Lifecycle $r5;
        com.bumptech.glide.RequestManager$OptionsApplier $r6, $r7;
        com.bumptech.glide.load.model.ModelLoader $r8;
        com.bumptech.glide.DrawableTypeRequest $r9;
        com.bumptech.glide.GenericRequestBuilder $r10;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r2 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        $r8 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildStreamModelLoader(java.lang.Class,android.content.Context)>(class "Landroid/net/Uri;", $r2);

        r1 = new com.bumptech.glide.load.model.stream.MediaStoreStreamLoader;

        $r2 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        specialinvoke r1.<com.bumptech.glide.load.model.stream.MediaStoreStreamLoader: void <init>(android.content.Context,com.bumptech.glide.load.model.ModelLoader)>($r2, $r8);

        $r2 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        $r8 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildFileDescriptorModelLoader(java.lang.Class,android.content.Context)>(class "Landroid/net/Uri;", $r2);

        $r7 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        $r9 = new com.bumptech.glide.DrawableTypeRequest;

        $r2 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        $r3 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.Glide glide>;

        $r4 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker>;

        $r5 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.Lifecycle lifecycle>;

        $r6 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        specialinvoke $r9.<com.bumptech.glide.DrawableTypeRequest: void <init>(java.lang.Class,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,android.content.Context,com.bumptech.glide.Glide,com.bumptech.glide.manager.RequestTracker,com.bumptech.glide.manager.Lifecycle,com.bumptech.glide.RequestManager$OptionsApplier)>(class "Landroid/net/Uri;", r1, $r8, $r2, $r3, $r4, $r5, $r6);

        $r10 = virtualinvoke $r7.<com.bumptech.glide.RequestManager$OptionsApplier: com.bumptech.glide.GenericRequestBuilder apply(com.bumptech.glide.GenericRequestBuilder)>($r9);

        $r9 = (com.bumptech.glide.DrawableTypeRequest) $r10;

        return $r9;
    }
    public com.bumptech.glide.DrawableTypeRequest fromResource()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.DrawableTypeRequest $r1;
        android.content.Context $r2;
        com.bumptech.glide.load.Key $r3;
        com.bumptech.glide.DrawableRequestBuilder $r4;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r2 = r0.<com.bumptech.glide.RequestManager: android.content.Context context>;

        $r3 = staticinvoke <com.bumptech.glide.signature.ApplicationVersionSignature: com.bumptech.glide.load.Key obtain(android.content.Context)>($r2);

        $r4 = virtualinvoke $r1.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder signature(com.bumptech.glide.load.Key)>($r3);

        $r1 = (com.bumptech.glide.DrawableTypeRequest) $r4;

        return $r1;
    }
    public com.bumptech.glide.DrawableTypeRequest fromString()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.DrawableTypeRequest $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>(class "Ljava/lang/String;");

        return $r1;
    }
    public com.bumptech.glide.DrawableTypeRequest fromUri()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.DrawableTypeRequest $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>(class "Landroid/net/Uri;");

        return $r1;
    }
    public com.bumptech.glide.DrawableTypeRequest fromUrl()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.DrawableTypeRequest $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>(class "Ljava/net/URL;");

        return $r1;
    }
    public boolean isPaused()
    {
        com.bumptech.glide.RequestManager r0;
        boolean $z0;
        com.bumptech.glide.manager.RequestTracker $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker>;

        $z0 = virtualinvoke $r1.<com.bumptech.glide.manager.RequestTracker: boolean isPaused()>();

        return $z0;
    }
    public com.bumptech.glide.DrawableTypeRequest load(android.net.Uri)
    {
        com.bumptech.glide.RequestManager r0;
        android.net.Uri $r1;
        com.bumptech.glide.DrawableTypeRequest $r2;
        com.bumptech.glide.DrawableRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: android.net.Uri;

        $r2 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest fromUri()>();

        $r3 = virtualinvoke $r2.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>($r1);

        $r2 = (com.bumptech.glide.DrawableTypeRequest) $r3;

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest load(java.io.File)
    {
        com.bumptech.glide.RequestManager r0;
        java.io.File $r1;
        com.bumptech.glide.DrawableTypeRequest $r2;
        com.bumptech.glide.DrawableRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest fromFile()>();

        $r3 = virtualinvoke $r2.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>($r1);

        $r2 = (com.bumptech.glide.DrawableTypeRequest) $r3;

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest load(java.lang.Integer)
    {
        com.bumptech.glide.RequestManager r0;
        java.lang.Integer $r1;
        com.bumptech.glide.DrawableTypeRequest $r2;
        com.bumptech.glide.DrawableRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: java.lang.Integer;

        $r2 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest fromResource()>();

        $r3 = virtualinvoke $r2.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>($r1);

        $r2 = (com.bumptech.glide.DrawableTypeRequest) $r3;

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest load(java.lang.Object)
    {
        com.bumptech.glide.RequestManager r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        com.bumptech.glide.DrawableTypeRequest $r3;
        com.bumptech.glide.DrawableRequestBuilder $r4;

        r0 := @this: com.bumptech.glide.RequestManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <com.bumptech.glide.RequestManager: java.lang.Class getSafeClass(java.lang.Object)>(r1);

        $r3 = specialinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadGeneric(java.lang.Class)>($r2);

        $r4 = virtualinvoke $r3.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>(r1);

        $r3 = (com.bumptech.glide.DrawableTypeRequest) $r4;

        return $r3;
    }
    public com.bumptech.glide.DrawableTypeRequest load(java.lang.String)
    {
        com.bumptech.glide.RequestManager r0;
        java.lang.String $r1;
        com.bumptech.glide.DrawableTypeRequest $r2;
        com.bumptech.glide.DrawableRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest fromString()>();

        $r3 = virtualinvoke $r2.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>($r1);

        $r2 = (com.bumptech.glide.DrawableTypeRequest) $r3;

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest load(java.net.URL)
    {
        com.bumptech.glide.RequestManager r0;
        java.net.URL $r1;
        com.bumptech.glide.DrawableTypeRequest $r2;
        com.bumptech.glide.DrawableRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: java.net.URL;

        $r2 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest fromUrl()>();

        $r3 = virtualinvoke $r2.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>($r1);

        $r2 = (com.bumptech.glide.DrawableTypeRequest) $r3;

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest load(byte[])
    {
        com.bumptech.glide.RequestManager r0;
        byte[] $r1;
        com.bumptech.glide.DrawableTypeRequest $r2;
        com.bumptech.glide.DrawableRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest fromBytes()>();

        $r3 = virtualinvoke $r2.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>($r1);

        $r2 = (com.bumptech.glide.DrawableTypeRequest) $r3;

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest load(byte[], java.lang.String)
    {
        com.bumptech.glide.RequestManager r0;
        byte[] $r1;
        java.lang.String $r2;
        com.bumptech.glide.signature.StringSignature $r3;
        com.bumptech.glide.DrawableTypeRequest $r4;
        com.bumptech.glide.DrawableRequestBuilder $r5;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $r4 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest load(byte[])>($r1);

        $r3 = new com.bumptech.glide.signature.StringSignature;

        specialinvoke $r3.<com.bumptech.glide.signature.StringSignature: void <init>(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder signature(com.bumptech.glide.load.Key)>($r3);

        $r4 = (com.bumptech.glide.DrawableTypeRequest) $r5;

        return $r4;
    }
    public com.bumptech.glide.DrawableTypeRequest loadFromMediaStore(android.net.Uri)
    {
        com.bumptech.glide.RequestManager r0;
        android.net.Uri $r1;
        com.bumptech.glide.DrawableTypeRequest $r2;
        com.bumptech.glide.DrawableRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: android.net.Uri;

        $r2 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest fromMediaStore()>();

        $r3 = virtualinvoke $r2.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder load(java.lang.Object)>($r1);

        $r2 = (com.bumptech.glide.DrawableTypeRequest) $r3;

        return $r2;
    }
    public com.bumptech.glide.DrawableTypeRequest loadFromMediaStore(android.net.Uri, java.lang.String, long, int)
    {
        com.bumptech.glide.RequestManager r0;
        android.net.Uri $r1;
        java.lang.String $r2;
        long $l0;
        int $i1;
        com.bumptech.glide.signature.MediaStoreSignature r3;
        com.bumptech.glide.DrawableTypeRequest $r4;
        com.bumptech.glide.DrawableRequestBuilder $r5;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $i1 := @parameter3: int;

        r3 = new com.bumptech.glide.signature.MediaStoreSignature;

        specialinvoke r3.<com.bumptech.glide.signature.MediaStoreSignature: void <init>(java.lang.String,long,int)>($r2, $l0, $i1);

        $r4 = virtualinvoke r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.DrawableTypeRequest loadFromMediaStore(android.net.Uri)>($r1);

        $r5 = virtualinvoke $r4.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.DrawableRequestBuilder signature(com.bumptech.glide.load.Key)>(r3);

        $r4 = (com.bumptech.glide.DrawableTypeRequest) $r5;

        return $r4;
    }
    public void onDestroy()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.manager.RequestTracker $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker>;

        virtualinvoke $r1.<com.bumptech.glide.manager.RequestTracker: void clearRequests()>();

        return;
    }
    public void onLowMemory()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.Glide $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.Glide glide>;

        virtualinvoke $r1.<com.bumptech.glide.Glide: void clearMemory()>();

        return;
    }
    public void onStart()
    {
        com.bumptech.glide.RequestManager r0;

        r0 := @this: com.bumptech.glide.RequestManager;

        virtualinvoke r0.<com.bumptech.glide.RequestManager: void resumeRequests()>();

        return;
    }
    public void onStop()
    {
        com.bumptech.glide.RequestManager r0;

        r0 := @this: com.bumptech.glide.RequestManager;

        virtualinvoke r0.<com.bumptech.glide.RequestManager: void pauseRequests()>();

        return;
    }
    public void onTrimMemory(int)
    {
        com.bumptech.glide.RequestManager r0;
        int $i0;
        com.bumptech.glide.Glide $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $i0 := @parameter0: int;

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.Glide glide>;

        virtualinvoke $r1.<com.bumptech.glide.Glide: void trimMemory(int)>($i0);

        return;
    }
    public void pauseRequests()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.manager.RequestTracker $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker>;

        virtualinvoke $r1.<com.bumptech.glide.manager.RequestTracker: void pauseRequests()>();

        return;
    }
    public void pauseRequestsRecursive()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.manager.RequestManagerTreeNode $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.bumptech.glide.RequestManager;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        virtualinvoke r0.<com.bumptech.glide.RequestManager: void pauseRequests()>();

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestManagerTreeNode treeNode>;

        $r2 = interfaceinvoke $r1.<com.bumptech.glide.manager.RequestManagerTreeNode: java.util.Set getDescendants()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r0 = (com.bumptech.glide.RequestManager) $r4;

        virtualinvoke r0.<com.bumptech.glide.RequestManager: void pauseRequests()>();

        goto label1;

     label2:
        return;
    }
    public void resumeRequests()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.manager.RequestTracker $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestTracker requestTracker>;

        virtualinvoke $r1.<com.bumptech.glide.manager.RequestTracker: void resumeRequests()>();

        return;
    }
    public void resumeRequestsRecursive()
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.manager.RequestManagerTreeNode $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.bumptech.glide.RequestManager;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        virtualinvoke r0.<com.bumptech.glide.RequestManager: void resumeRequests()>();

        $r1 = r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.manager.RequestManagerTreeNode treeNode>;

        $r2 = interfaceinvoke $r1.<com.bumptech.glide.manager.RequestManagerTreeNode: java.util.Set getDescendants()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r0 = (com.bumptech.glide.RequestManager) $r4;

        virtualinvoke r0.<com.bumptech.glide.RequestManager: void resumeRequests()>();

        goto label1;

     label2:
        return;
    }
    public void setDefaultOptions(com.bumptech.glide.RequestManager$DefaultOptions)
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.RequestManager$DefaultOptions $r1;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: com.bumptech.glide.RequestManager$DefaultOptions;

        r0.<com.bumptech.glide.RequestManager: com.bumptech.glide.RequestManager$DefaultOptions options> = $r1;

        return;
    }
    public com.bumptech.glide.RequestManager$GenericModelRequest using(com.bumptech.glide.load.model.ModelLoader, java.lang.Class)
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.load.model.ModelLoader r1;
        java.lang.Class r2;
        com.bumptech.glide.RequestManager$GenericModelRequest $r3;

        r0 := @this: com.bumptech.glide.RequestManager;

        r1 := @parameter0: com.bumptech.glide.load.model.ModelLoader;

        r2 := @parameter1: java.lang.Class;

        $r3 = new com.bumptech.glide.RequestManager$GenericModelRequest;

        specialinvoke $r3.<com.bumptech.glide.RequestManager$GenericModelRequest: void <init>(com.bumptech.glide.RequestManager,com.bumptech.glide.load.model.ModelLoader,java.lang.Class)>(r0, r1, r2);

        return $r3;
    }
    public com.bumptech.glide.RequestManager$ImageModelRequest using(com.bumptech.glide.load.model.stream.StreamByteArrayLoader)
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.load.model.stream.StreamByteArrayLoader $r1;
        com.bumptech.glide.RequestManager$ImageModelRequest $r2;

        r0 := @this: com.bumptech.glide.RequestManager;

        $r1 := @parameter0: com.bumptech.glide.load.model.stream.StreamByteArrayLoader;

        $r2 = new com.bumptech.glide.RequestManager$ImageModelRequest;

        specialinvoke $r2.<com.bumptech.glide.RequestManager$ImageModelRequest: void <init>(com.bumptech.glide.RequestManager,com.bumptech.glide.load.model.ModelLoader)>(r0, $r1);

        return $r2;
    }
    public com.bumptech.glide.RequestManager$ImageModelRequest using(com.bumptech.glide.load.model.stream.StreamModelLoader)
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.load.model.stream.StreamModelLoader r1;
        com.bumptech.glide.RequestManager$ImageModelRequest $r2;

        r0 := @this: com.bumptech.glide.RequestManager;

        r1 := @parameter0: com.bumptech.glide.load.model.stream.StreamModelLoader;

        $r2 = new com.bumptech.glide.RequestManager$ImageModelRequest;

        specialinvoke $r2.<com.bumptech.glide.RequestManager$ImageModelRequest: void <init>(com.bumptech.glide.RequestManager,com.bumptech.glide.load.model.ModelLoader)>(r0, r1);

        return $r2;
    }
    public com.bumptech.glide.RequestManager$VideoModelRequest using(com.bumptech.glide.load.model.file_descriptor.FileDescriptorModelLoader)
    {
        com.bumptech.glide.RequestManager r0;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorModelLoader r1;
        com.bumptech.glide.RequestManager$VideoModelRequest $r2;

        r0 := @this: com.bumptech.glide.RequestManager;

        r1 := @parameter0: com.bumptech.glide.load.model.file_descriptor.FileDescriptorModelLoader;

        $r2 = new com.bumptech.glide.RequestManager$VideoModelRequest;

        specialinvoke $r2.<com.bumptech.glide.RequestManager$VideoModelRequest: void <init>(com.bumptech.glide.RequestManager,com.bumptech.glide.load.model.ModelLoader)>(r0, r1);

        return $r2;
    }
