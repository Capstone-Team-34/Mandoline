io.requery.android.database.AbstractCursor extends java.lang.Object implements android.database.Cursor
private static final java.lang.String TAG
protected boolean mClosed
private final android.database.ContentObservable mContentObservable
protected android.content.ContentResolver mContentResolver
private final android.database.DataSetObservable mDataSetObservable
private android.os.Bundle mExtras
private android.net.Uri mNotifyUri
protected int mPos
private android.database.ContentObserver mSelfObserver
private final java.lang.Object mSelfObserverLock
private boolean mSelfObserverRegistered
    public void <init>()
    {
        io.requery.android.database.AbstractCursor r0;
        java.lang.Object $r1;
        android.database.DataSetObservable $r2;
        android.database.ContentObservable $r3;
        android.os.Bundle $r4;

        r0 := @this: io.requery.android.database.AbstractCursor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<io.requery.android.database.AbstractCursor: java.lang.Object mSelfObserverLock> = $r1;

        $r2 = new android.database.DataSetObservable;

        specialinvoke $r2.<android.database.DataSetObservable: void <init>()>();

        r0.<io.requery.android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable> = $r2;

        $r3 = new android.database.ContentObservable;

        specialinvoke $r3.<android.database.ContentObservable: void <init>()>();

        r0.<io.requery.android.database.AbstractCursor: android.database.ContentObservable mContentObservable> = $r3;

        $r4 = <android.os.Bundle: android.os.Bundle EMPTY>;

        r0.<io.requery.android.database.AbstractCursor: android.os.Bundle mExtras> = $r4;

        r0.<io.requery.android.database.AbstractCursor: int mPos> = -1;

        return;
    }
    protected void checkPosition()
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0, $i1;
        android.database.CursorIndexOutOfBoundsException $r1;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        if -1 == $i0 goto label1;

        $i0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        $i1 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        if $i0 != $i1 goto label2;

     label1:
        $r1 = new android.database.CursorIndexOutOfBoundsException;

        $i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        $i1 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        specialinvoke $r1.<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)>($i0, $i1);

        throw $r1;

     label2:
        return;
    }
    public void close()
    {
        io.requery.android.database.AbstractCursor r0;
        android.database.ContentObservable $r1;

        r0 := @this: io.requery.android.database.AbstractCursor;

        r0.<io.requery.android.database.AbstractCursor: boolean mClosed> = 1;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r1.<android.database.ContentObservable: void unregisterAll()>();

        virtualinvoke r0.<io.requery.android.database.AbstractCursor: void onDeactivateOrClose()>();

        return;
    }
    public void copyStringToBuffer(int, android.database.CharArrayBuffer)
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0, $i1;
        android.database.CharArrayBuffer $r1;
        char[] r2;
        java.lang.String $r3;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.database.CharArrayBuffer;

        $r3 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: java.lang.String getString(int)>($i0);

        if $r3 == null goto label4;

        r2 = $r1.<android.database.CharArrayBuffer: char[] data>;

        if r2 == null goto label1;

        $i0 = lengthof r2;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

     label1:
        r2 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $r1.<android.database.CharArrayBuffer: char[] data> = r2;

     label2:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r1.<android.database.CharArrayBuffer: int sizeCopied> = $i0;

        return;

     label3:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r3.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r2, 0);

        goto label2;

     label4:
        $r1.<android.database.CharArrayBuffer: int sizeCopied> = 0;

        return;
    }
    public void deactivate()
    {
        io.requery.android.database.AbstractCursor r0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        virtualinvoke r0.<io.requery.android.database.AbstractCursor: void onDeactivateOrClose()>();

        return;
    }
    protected void finalize()
    {
        io.requery.android.database.AbstractCursor r0;
        android.database.ContentObserver $r1;
        boolean $z0;
        android.content.ContentResolver $r2;
        java.lang.Exception $r3;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r1 == null goto label1;

        $z0 = r0.<io.requery.android.database.AbstractCursor: boolean mSelfObserverRegistered>;

        if $z0 == 0 goto label1;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r1);

     label1:
        $z0 = r0.<io.requery.android.database.AbstractCursor: boolean mClosed>;

     label2:
        if $z0 != 0 goto label6;

     label3:
        virtualinvoke r0.<io.requery.android.database.AbstractCursor: void close()>();

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public byte[] getBlob(int)
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getBlob is not supported");

        throw $r1;
    }
    public int getColumnCount()
    {
        io.requery.android.database.AbstractCursor r0;
        java.lang.String[] $r1;
        int $i0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $i0 = lengthof $r1;

        return $i0;
    }
    public int getColumnIndex(java.lang.String)
    {
        io.requery.android.database.AbstractCursor r0;
        java.lang.Exception r1;
        int i0, i1;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        java.lang.String[] $r5;
        boolean $z0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r2 := @parameter0: java.lang.String;

        i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label1;

        r1 = new java.lang.Exception;

        specialinvoke r1.<java.lang.Exception: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requesting column name with table name -- ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Cursor", $r4, r1);

        i0 = i0 + 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i0);

     label1:
        $r5 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        i0 = lengthof $r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r4 = $r5[i1];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return -1;
    }
    public int getColumnIndexOrThrow(java.lang.String)
    {
        io.requery.android.database.AbstractCursor r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        java.lang.StringBuilder $r3;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getColumnIndex(java.lang.String)>($r1);

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return $i0;
    }
    public java.lang.String getColumnName(int)
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $r2 = $r1[$i0];

        return $r2;
    }
public abstract java.lang.String[] getColumnNames() { 
// no body
} 
public abstract int getCount() { 
// no body
} 
public abstract double getDouble(int) { 
// no body
} 
    public android.os.Bundle getExtras()
    {
        io.requery.android.database.AbstractCursor r0;
        android.os.Bundle r1;

        r0 := @this: io.requery.android.database.AbstractCursor;

        r1 = r0.<io.requery.android.database.AbstractCursor: android.os.Bundle mExtras>;

        return r1;
    }
public abstract float getFloat(int) { 
// no body
} 
public abstract int getInt(int) { 
// no body
} 
public abstract long getLong(int) { 
// no body
} 
    public android.net.Uri getNotificationUri()
    {
        io.requery.android.database.AbstractCursor r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        android.net.Uri r3;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 = r0.<io.requery.android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor $r1;

     label1:
        r3 = r0.<io.requery.android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        exitmonitor $r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public final int getPosition()
    {
        io.requery.android.database.AbstractCursor r0;
        int i0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        return i0;
    }
public abstract short getShort(int) { 
// no body
} 
public abstract java.lang.String getString(int) { 
// no body
} 
public abstract int getType(int) { 
// no body
} 
    public boolean getWantsAllOnMoveCalls()
    {
        io.requery.android.database.AbstractCursor r0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        return 0;
    }
    public final boolean isAfterLast()
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0, $i1;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        if $i0 == 0 goto label1;

        $i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        $i1 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        if $i0 != $i1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public final boolean isBeforeFirst()
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        if $i0 == 0 goto label1;

        $i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        if $i0 != -1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isClosed()
    {
        io.requery.android.database.AbstractCursor r0;
        boolean z0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        z0 = r0.<io.requery.android.database.AbstractCursor: boolean mClosed>;

        return z0;
    }
    public final boolean isFirst()
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public final boolean isLast()
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0, $i1, $i2;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i1 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        $i2 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        $i0 = $i1 + -1;

        if $i2 != $i0 goto label1;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
public abstract boolean isNull(int) { 
// no body
} 
    public final boolean move(int)
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $i1 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        $i0 = $i1 + $i0;

        $z0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }
    public final boolean moveToFirst()
    {
        io.requery.android.database.AbstractCursor r0;
        boolean $z0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $z0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: boolean moveToPosition(int)>(0);

        return $z0;
    }
    public final boolean moveToLast()
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0;
        boolean $z0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        $i0 = $i0 + -1;

        $z0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }
    public final boolean moveToNext()
    {
        io.requery.android.database.AbstractCursor r0;
        boolean $z0;
        int $i0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        $i0 = $i0 + 1;

        $z0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }
    public final boolean moveToPosition(int)
    {
        io.requery.android.database.AbstractCursor r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: int getCount()>();

        if $i0 < $i1 goto label1;

        r0.<io.requery.android.database.AbstractCursor: int mPos> = $i1;

        return 0;

     label1:
        if $i0 >= 0 goto label2;

        r0.<io.requery.android.database.AbstractCursor: int mPos> = -1;

        return 0;

     label2:
        $i1 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        if $i0 != $i1 goto label3;

        return 1;

     label3:
        $i1 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        $z0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: boolean onMove(int,int)>($i1, $i0);

        if $z0 != 0 goto label4;

        r0.<io.requery.android.database.AbstractCursor: int mPos> = -1;

        return $z0;

     label4:
        r0.<io.requery.android.database.AbstractCursor: int mPos> = $i0;

        return $z0;
    }
    public final boolean moveToPrevious()
    {
        io.requery.android.database.AbstractCursor r0;
        boolean $z0;
        int $i0;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $i0 = r0.<io.requery.android.database.AbstractCursor: int mPos>;

        $i0 = $i0 + -1;

        $z0 = virtualinvoke r0.<io.requery.android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }
    protected void onChange(boolean)
    {
        io.requery.android.database.AbstractCursor r0;
        boolean $z0;
        java.lang.Object $r1;
        android.database.ContentObserver $r2;
        int $i0;
        android.database.ContentObservable $r3;
        android.net.Uri $r4;
        android.content.ContentResolver $r5;
        java.lang.Throwable $r6;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $z0 := @parameter0: boolean;

        $r1 = r0.<io.requery.android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor $r1;

     label1:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label5;

        $r3 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r3.<android.database.ContentObservable: void dispatchChange(boolean,android.net.Uri)>($z0, null);

     label2:
        $r4 = r0.<io.requery.android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        if $r4 == null goto label3;

        if $z0 == 0 goto label3;

        $r5 = r0.<io.requery.android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r4 = r0.<io.requery.android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r5.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r4, $r2);

     label3:
        exitmonitor $r1;

     label4:
        return;

     label5:
        $r3 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r3.<android.database.ContentObservable: void dispatchChange(boolean)>($z0);

        goto label2;

     label6:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }
    protected void onDeactivateOrClose()
    {
        io.requery.android.database.AbstractCursor r0;
        android.database.ContentObserver $r1;
        android.content.ContentResolver $r2;
        android.database.DataSetObservable $r3;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r1 == null goto label1;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r1);

        r0.<io.requery.android.database.AbstractCursor: boolean mSelfObserverRegistered> = 0;

     label1:
        $r3 = r0.<io.requery.android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r3.<android.database.DataSetObservable: void notifyInvalidated()>();

        return;
    }
public abstract boolean onMove(int, int) { 
// no body
} 
    public void registerContentObserver(android.database.ContentObserver)
    {
        io.requery.android.database.AbstractCursor r0;
        android.database.ContentObserver $r1;
        android.database.ContentObservable $r2;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: android.database.ContentObserver;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r2.<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>($r1);

        return;
    }
    public void registerDataSetObserver(android.database.DataSetObserver)
    {
        io.requery.android.database.AbstractCursor r0;
        android.database.DataSetObserver $r1;
        android.database.DataSetObservable $r2;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: android.database.DataSetObserver;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.DataSetObservable: void registerObserver(java.lang.Object)>($r1);

        return;
    }
    public boolean requery()
    {
        io.requery.android.database.AbstractCursor r0;
        android.net.Uri $r1;
        android.database.ContentObserver $r2;
        boolean $z0;
        android.content.ContentResolver $r3;
        android.database.DataSetObservable $r4;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r2 == null goto label1;

        $z0 = r0.<io.requery.android.database.AbstractCursor: boolean mSelfObserverRegistered>;

        if $z0 != 0 goto label1;

        $r3 = r0.<io.requery.android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r1, 1, $r2);

        r0.<io.requery.android.database.AbstractCursor: boolean mSelfObserverRegistered> = 1;

     label1:
        $r4 = r0.<io.requery.android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r4.<android.database.DataSetObservable: void notifyChanged()>();

        return 1;
    }
    public android.os.Bundle respond(android.os.Bundle)
    {
        io.requery.android.database.AbstractCursor r0;
        android.os.Bundle $r1;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: android.os.Bundle;

        $r1 = <android.os.Bundle: android.os.Bundle EMPTY>;

        return $r1;
    }
    public void setExtras(android.os.Bundle)
    {
        io.requery.android.database.AbstractCursor r0;
        android.os.Bundle $r1;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: android.os.Bundle;

        if $r1 != null goto label1;

        $r1 = <android.os.Bundle: android.os.Bundle EMPTY>;

     label1:
        r0.<io.requery.android.database.AbstractCursor: android.os.Bundle mExtras> = $r1;

        return;
    }
    public void setNotificationUri(android.content.ContentResolver, android.net.Uri)
    {
        io.requery.android.database.AbstractCursor r0;
        android.content.ContentResolver $r1;
        android.net.Uri $r2;
        java.lang.Object $r3;
        android.database.ContentObserver $r4;
        io.requery.android.database.AbstractCursor$SelfContentObserver $r5;
        java.lang.Throwable $r6;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: android.content.ContentResolver;

        $r2 := @parameter1: android.net.Uri;

        $r3 = r0.<io.requery.android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor $r3;

     label1:
        r0.<io.requery.android.database.AbstractCursor: android.net.Uri mNotifyUri> = $r2;

        r0.<io.requery.android.database.AbstractCursor: android.content.ContentResolver mContentResolver> = $r1;

        $r4 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r4 == null goto label2;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r4 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r1.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r4);

     label2:
        $r5 = new io.requery.android.database.AbstractCursor$SelfContentObserver;

        specialinvoke $r5.<io.requery.android.database.AbstractCursor$SelfContentObserver: void <init>(io.requery.android.database.AbstractCursor)>(r0);

        r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver> = $r5;

        $r1 = r0.<io.requery.android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r4 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r2, 1, $r4);

        r0.<io.requery.android.database.AbstractCursor: boolean mSelfObserverRegistered> = 1;

        exitmonitor $r3;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public void unregisterContentObserver(android.database.ContentObserver)
    {
        io.requery.android.database.AbstractCursor r0;
        android.database.ContentObserver $r1;
        boolean $z0;
        android.database.ContentObservable $r2;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: android.database.ContentObserver;

        $z0 = r0.<io.requery.android.database.AbstractCursor: boolean mClosed>;

        if $z0 != 0 goto label1;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r2.<android.database.ContentObservable: void unregisterObserver(java.lang.Object)>($r1);

     label1:
        return;
    }
    public void unregisterDataSetObserver(android.database.DataSetObserver)
    {
        io.requery.android.database.AbstractCursor r0;
        android.database.DataSetObserver $r1;
        android.database.DataSetObservable $r2;

        r0 := @this: io.requery.android.database.AbstractCursor;

        $r1 := @parameter0: android.database.DataSetObserver;

        $r2 = r0.<io.requery.android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.DataSetObservable: void unregisterObserver(java.lang.Object)>($r1);

        return;
    }
