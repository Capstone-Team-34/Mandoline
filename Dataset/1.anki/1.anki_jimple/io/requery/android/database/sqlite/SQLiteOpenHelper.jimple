io.requery.android.database.sqlite.SQLiteOpenHelper extends java.lang.Object
private static final boolean DEBUG_STRICT_READONLY
private static final java.lang.String TAG
private final android.content.Context mContext
private io.requery.android.database.sqlite.SQLiteDatabase mDatabase
private boolean mEnableWriteAheadLogging
private final io.requery.android.database.DatabaseErrorHandler mErrorHandler
private final io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory mFactory
private boolean mIsInitializing
private final java.lang.String mName
private final int mNewVersion
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lio/requery/android/database/sqlite/SQLiteOpenHelper;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG> = $r0;

        return;
    }
    public void <init>(android.content.Context, java.lang.String, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context $r1;
        java.lang.String $r2;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r3;
        int $i0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $i0 := @parameter3: int;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int,io.requery.android.database.DatabaseErrorHandler)>($r1, $r2, $r3, $i0, null);

        return;
    }
    public void <init>(android.content.Context, java.lang.String, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, int, io.requery.android.database.DatabaseErrorHandler)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context $r1;
        java.lang.String $r2;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r3;
        int $i0;
        io.requery.android.database.DatabaseErrorHandler $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $i0 := @parameter3: int;

        $r4 := @parameter4: io.requery.android.database.DatabaseErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 >= 1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version must be >= 1, was ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label1:
        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext> = $r1;

        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName> = $r2;

        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = $r3;

        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: int mNewVersion> = $i0;

        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.DatabaseErrorHandler mErrorHandler> = $r4;

        return;
    }
    private io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteException r1;
        io.requery.android.database.sqlite.SQLiteDatabase $r2, $r7;
        java.lang.IllegalStateException $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r13;
        java.lang.Throwable $r6, $r14;
        android.content.Context $r8;
        java.io.File $r9;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r10;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r11;
        io.requery.android.database.DatabaseErrorHandler $r12;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $z0 := @parameter0: boolean;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 == null goto label01;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        $z1 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z1 != 0 goto label02;

        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase> = null;

     label01:
        $z1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z1 == 0 goto label04;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getDatabase called recursively");

        throw $r3;

     label02:
        if $z0 == 0 goto label03;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        $z1 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z1 != 0 goto label01;

     label03:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        return $r2;

     label04:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

     label05:
        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 1;

     label06:
        if $r2 == null goto label17;

     label07:
        $z0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

     label08:
        if $z0 == 0 goto label10;

     label09:
        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void reopenReadWrite()>();

     label10:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: void onConfigure(io.requery.android.database.sqlite.SQLiteDatabase)>($r2);

        $i0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: int getVersion()>();

        $i1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

     label11:
        if $i0 == $i1 goto label40;

     label12:
        $z0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

     label13:
        if $z0 == 0 goto label35;

     label14:
        r1 = new android.database.sqlite.SQLiteException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t upgrade read-only database from version ");

        $i0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: int getVersion()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i0 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r5);

        throw r1;

     label15:
        $r6 := @caughtexception;

        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if $r2 == null goto label16;

        $r7 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 == $r7 goto label16;

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void close()>();

     label16:
        throw $r6;

     label17:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

     label18:
        if $r5 != null goto label21;

     label19:
        $r7 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase create(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)>(null);

     label20:
        $r2 = $r7;

        goto label10;

     label21:
        $r8 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext>;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

     label22:
        $r9 = virtualinvoke $r8.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>($r5);

        $r5 = virtualinvoke $r9.<java.io.File: java.lang.String getPath()>();

     label23:
        $z1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging>;

     label24:
        if $z1 == 0 goto label30;

        $i0 = 536870912;

     label25:
        $i0 = $i0 | 268435456;

     label26:
        $r10 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String,int)>($r5, $i0);

     label27:
        $r11 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r12 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.DatabaseErrorHandler mErrorHandler>;

     label28:
        $r7 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.DatabaseErrorHandler)>($r10, $r11, $r12);

     label29:
        $r2 = $r7;

        goto label10;

     label30:
        $i0 = 0;

        goto label25;

     label31:
        r1 := @caughtexception;

        if $z0 == 0 goto label33;

     label32:
        throw r1;

     label33:
        $r5 = <io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t open ");

        $r13 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for writing (will try read-only):");

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, $r13, r1);

        $r8 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext>;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>($r5);

        $r5 = virtualinvoke $r9.<java.io.File: java.lang.String getPath()>();

        $r10 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String,int)>($r5, 1);

        $r11 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r12 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.DatabaseErrorHandler mErrorHandler>;

        $r7 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.DatabaseErrorHandler)>($r10, $r11, $r12);

     label34:
        $r2 = $r7;

        goto label10;

     label35:
        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label36:
        if $i0 != 0 goto label45;

     label37:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: void onCreate(io.requery.android.database.sqlite.SQLiteDatabase)>($r2);

     label38:
        $i0 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void setVersion(int)>($i0);

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label39:
        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label40:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: void onOpen(io.requery.android.database.sqlite.SQLiteDatabase)>($r2);

        $z0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

     label41:
        if $z0 == 0 goto label43;

     label42:
        $r5 = <io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opened ");

        $r13 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in read-only mode");

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, $r13);

     label43:
        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase> = $r2;

     label44:
        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if $r2 == null goto label53;

        $r7 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 == $r7 goto label53;

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void close()>();

        return $r2;

     label45:
        $i1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

     label46:
        if $i0 <= $i1 goto label51;

     label47:
        $i1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: void onDowngrade(io.requery.android.database.sqlite.SQLiteDatabase,int,int)>($r2, $i0, $i1);

     label48:
        goto label38;

     label49:
        $r14 := @caughtexception;

     label50:
        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r14;

     label51:
        $i1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: void onUpgrade(io.requery.android.database.sqlite.SQLiteDatabase,int,int)>($r2, $i0, $i1);

     label52:
        goto label38;

     label53:
        return $r2;

        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label17 to label18 with label15;
        catch java.lang.Throwable from label19 to label20 with label15;
        catch android.database.sqlite.SQLiteException from label22 to label23 with label31;
        catch android.database.sqlite.SQLiteException from label26 to label27 with label31;
        catch android.database.sqlite.SQLiteException from label28 to label29 with label31;
        catch java.lang.Throwable from label21 to label24 with label15;
        catch java.lang.Throwable from label26 to label29 with label15;
        catch java.lang.Throwable from label32 to label34 with label15;
        catch java.lang.Throwable from label35 to label36 with label15;
        catch java.lang.Throwable from label37 to label39 with label49;
        catch java.lang.Throwable from label39 to label41 with label15;
        catch java.lang.Throwable from label42 to label44 with label15;
        catch java.lang.Throwable from label45 to label46 with label49;
        catch java.lang.Throwable from label47 to label48 with label49;
        catch java.lang.Throwable from label50 to label51 with label15;
        catch java.lang.Throwable from label51 to label52 with label49;
    }
    public void close()
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2;
        io.requery.android.database.sqlite.SQLiteDatabase $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        $z0 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z0 == 0 goto label3;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Closed during initialization");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r3 == null goto label4;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        $z0 = virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: void close()>();

        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase> = null;

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
    protected io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String, int)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.String $r1;
        int $i0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(java.lang.String,int)>($r1, $i0);

        return $r2;
    }
    public java.lang.String getDatabaseName()
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.String r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        r1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        return r1;
    }
    public io.requery.android.database.sqlite.SQLiteDatabase getReadableDatabase()
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        $r1 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(0);

        exitmonitor r0;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        $r1 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(1);

        exitmonitor r0;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void onConfigure(io.requery.android.database.sqlite.SQLiteDatabase)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase;

        return;
    }
public abstract void onCreate(io.requery.android.database.sqlite.SQLiteDatabase) { 
// no body
} 
    public void onDowngrade(io.requery.android.database.sqlite.SQLiteDatabase, int, int)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;
        int $i0, $i1;
        android.database.sqlite.SQLiteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new android.database.sqlite.SQLiteException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t downgrade database from version ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }
    public void onOpen(io.requery.android.database.sqlite.SQLiteDatabase)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase;

        return;
    }
public abstract void onUpgrade(io.requery.android.database.sqlite.SQLiteDatabase, int, int) { 
// no body
} 
    public void setWriteAheadLoggingEnabled(boolean)
    {
        io.requery.android.database.sqlite.SQLiteOpenHelper r0;
        boolean $z0, $z1;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteOpenHelper;

        $z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $z1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging>;

        if $z1 == $z0 goto label3;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 == null goto label2;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        $z1 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z1 == 0 goto label2;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        $z1 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z1 != 0 goto label2;

        if $z0 == 0 goto label5;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>();

     label2:
        r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging> = $z0;

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        $r1 = r0.<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>();

        goto label2;

     label6:
        $r2 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }
