io.requery.android.database.sqlite.SQLiteGlobal extends java.lang.Object
private static int sDefaultPageSize
private static final java.lang.Object sLock
    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <io.requery.android.database.sqlite.SQLiteGlobal: java.lang.Object sLock> = $r0;

        return;
    }
    private void <init>()
    {
        io.requery.android.database.sqlite.SQLiteGlobal r0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteGlobal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String getDefaultJournalMode()
    {
        return "TRUNCATE";
    }
    public static int getDefaultPageSize()
    {
        java.lang.Object $r0;
        int $i0;
        android.os.StatFs $r1;
        java.lang.Throwable $r2;

        $r0 = <io.requery.android.database.sqlite.SQLiteGlobal: java.lang.Object sLock>;

        entermonitor $r0;

     label1:
        $i0 = <io.requery.android.database.sqlite.SQLiteGlobal: int sDefaultPageSize>;

        if $i0 != 0 goto label2;

        $r1 = new android.os.StatFs;

        specialinvoke $r1.<android.os.StatFs: void <init>(java.lang.String)>("/data");

        $i0 = virtualinvoke $r1.<android.os.StatFs: int getBlockSize()>();

        <io.requery.android.database.sqlite.SQLiteGlobal: int sDefaultPageSize> = $i0;

     label2:
        exitmonitor $r0;

     label3:
        return 1024;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public static java.lang.String getDefaultSyncMode()
    {
        return "FULL";
    }
    public static int getJournalSizeLimit()
    {
        return 524288;
    }
    public static int getWALAutoCheckpoint()
    {
        return 100;
    }
    public static int getWALConnectionPoolSize()
    {
        return 4;
    }
    public static java.lang.String getWALSyncMode()
    {
        return "FULL";
    }
private static native int nativeReleaseMemory() { 
// no body
} 
    public static int releaseMemory()
    {
        int $i0;

        $i0 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: int nativeReleaseMemory()>();

        return $i0;
    }
