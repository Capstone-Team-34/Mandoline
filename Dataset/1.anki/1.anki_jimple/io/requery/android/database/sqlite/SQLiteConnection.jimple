io.requery.android.database.sqlite.SQLiteConnection extends java.lang.Object implements android.support.v4.os.CancellationSignal$OnCancelListener
static final boolean $assertionsDisabled
private static final boolean DEBUG
private static final byte[] EMPTY_BYTE_ARRAY
private static final java.lang.String[] EMPTY_STRING_ARRAY
private static final java.lang.String TAG
private static final java.util.regex.Pattern TRIM_SQL_PATTERN
private int mCancellationSignalAttachCount
private final io.requery.android.database.sqlite.CloseGuard mCloseGuard
private final io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration
private final int mConnectionId
private long mConnectionPtr
private final boolean mIsPrimaryConnection
private final boolean mIsReadOnlyConnection
private boolean mOnlyAllowReadOnlyOperations
private final io.requery.android.database.sqlite.SQLiteConnectionPool mPool
private final io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache
private io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool
private final io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations
    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;
        java.lang.String[] $r1;
        byte[] $r2;
        java.util.regex.Pattern $r3;

        $r0 = class "Lio/requery/android/database/sqlite/SQLiteConnection;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <io.requery.android.database.sqlite.SQLiteConnection: boolean $assertionsDisabled> = $z0;

        $r1 = newarray (java.lang.String)[0];

        <io.requery.android.database.sqlite.SQLiteConnection: java.lang.String[] EMPTY_STRING_ARRAY> = $r1;

        $r2 = newarray (byte)[0];

        <io.requery.android.database.sqlite.SQLiteConnection: byte[] EMPTY_BYTE_ARRAY> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\s]*\\n+[\\s]*");

        <io.requery.android.database.sqlite.SQLiteConnection: java.util.regex.Pattern TRIM_SQL_PATTERN> = $r3;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    private void <init>(io.requery.android.database.sqlite.SQLiteConnectionPool, io.requery.android.database.sqlite.SQLiteDatabaseConfiguration, int, boolean)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2, $r5;
        int $i0;
        boolean $z0;
        io.requery.android.database.sqlite.CloseGuard $r3;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r4;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache $r6;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteConnectionPool;

        $r2 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <io.requery.android.database.sqlite.CloseGuard: io.requery.android.database.sqlite.CloseGuard get()>();

        r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.CloseGuard mCloseGuard> = $r3;

        $r4 = new io.requery.android.database.sqlite.SQLiteConnection$OperationLog;

        specialinvoke $r4.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void <init>(io.requery.android.database.sqlite.SQLiteConnection$1)>(null);

        r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations> = $r4;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnectionPool mPool> = $r1;

        $r5 = new io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r2);

        r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration> = $r5;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: int mConnectionId> = $i0;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection> = $z0;

        $i0 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label2;

        $z0 = 1;

     label1:
        r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection> = $z0;

        $r6 = new io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        specialinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: void <init>(io.requery.android.database.sqlite.SQLiteConnection,int)>(r0, $i0);

        r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache> = $r6;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.CloseGuard: void open(java.lang.String)>("close");

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    static void access$200(io.requery.android.database.sqlite.SQLiteConnection, io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        io.requery.android.database.sqlite.SQLiteConnection $r0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r1;

        $r0 := @parameter0: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        specialinvoke $r0.<io.requery.android.database.sqlite.SQLiteConnection: void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r1);

        return;
    }
    static java.lang.String access$300(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: java.lang.String trimSqlForDisplay(java.lang.String)>($r0);

        return $r0;
    }
    static byte[] access$500()
    {
        byte[] r0;

        r0 = <io.requery.android.database.sqlite.SQLiteConnection: byte[] EMPTY_BYTE_ARRAY>;

        return r0;
    }
    private io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.RuntimeException r2;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache $r3;
        java.lang.Object $r4;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement r5, $r6;
        boolean z0, $z1;
        long $l0, $l1;
        int $i2, $i3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r4 = virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement) $r4;

        z0 = 0;

        if r5 == null goto label02;

        z0 = r5.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse>;

        if z0 != 0 goto label01;

        return r5;

     label01:
        z0 = 1;

     label02:
        $l0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: long nativePrepareStatement(long,java.lang.String)>($l0, $r1);

     label03:
        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i2 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: int nativeGetParameterCount(long,long)>($l1, $l0);

        $i3 = staticinvoke <io.requery.android.database.sqlite.SQLiteStatementType: int getSqlStatementType(java.lang.String)>($r1);

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $z1 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: boolean nativeIsReadOnly(long,long)>($l1, $l0);

        $r6 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,long,int,int,boolean)>($r1, $l0, $i2, $i3, $z1);

     label04:
        r5 = $r6;

        if z0 != 0 goto label08;

     label05:
        z0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: boolean isCacheable(int)>($i3);

     label06:
        if z0 == 0 goto label08;

     label07:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        $r6.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache> = 1;

     label08:
        $r6.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse> = 1;

        return $r6;

     label09:
        r2 := @caughtexception;

        if r5 == null goto label10;

        z0 = r5.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache>;

        if z0 != 0 goto label11;

     label10:
        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeFinalizeStatement(long,long)>($l1, $l0);

     label11:
        throw r2;

        catch java.lang.RuntimeException from label03 to label04 with label09;
        catch java.lang.RuntimeException from label05 to label06 with label09;
        catch java.lang.RuntimeException from label07 to label08 with label09;
    }
    private void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0;
        android.os.Looper $r3, $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label2;

        $z0 = <io.requery.android.database.sqlite.SQLiteDebug: boolean DEBUG_SQL_LOG>;

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r3 != $r4 goto label2;

        $z0 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnection", "Reading from disk on main thread");

        return;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnection", "Writing to disk on main thread");

     label2:
        return;
    }
    private void attachCancellationSignal(android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        android.support.v4.os.CancellationSignal $r1;
        int $i0;
        long $l1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: android.support.v4.os.CancellationSignal;

        if $r1 == null goto label1;

        virtualinvoke $r1.<android.support.v4.os.CancellationSignal: void throwIfCanceled()>();

        $i0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        $i0 = $i0 + 1;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount> = $i0;

        $i0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        if $i0 != 1 goto label1;

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeResetCancel(long,boolean)>($l1, 1);

        virtualinvoke $r1.<android.support.v4.os.CancellationSignal: void setOnCancelListener(android.support.v4.os.CancellationSignal$OnCancelListener)>(r0);

     label1:
        return;
    }
    private void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement, java.lang.Object[])
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r1;
        java.lang.Object[] $r2;
        long l0, $l4, $l5;
        int i1, $i2, $i3;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException $r5;
        android.database.sqlite.SQLiteException $r6;
        java.lang.Object r7;
        boolean $z0;
        java.lang.Boolean r8;
        java.lang.Number r9;
        double $d0;
        byte[] r10;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        $r2 := @parameter1: java.lang.Object[];

        if $r2 == null goto label02;

        i1 = lengthof $r2;

     label01:
        $i2 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        if i1 == $i2 goto label04;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $i2 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bind arguments but ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were provided.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = <android.os.Build$VERSION: int SDK_INT>;

        if i1 < 11 goto label03;

        $r5 = new android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException;

        specialinvoke $r5.<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>(java.lang.String)>($r4);

        throw $r5;

     label02:
        i1 = 0;

        goto label01;

     label03:
        $r6 = new android.database.sqlite.SQLiteException;

        specialinvoke $r6.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label04:
        if i1 != 0 goto label05;

        return;

     label05:
        l0 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $i2 = 0;

     label06:
        if $i2 >= i1 goto label16;

        r7 = $r2[$i2];

        $i3 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: int getTypeOfObject(java.lang.Object)>(r7);

        lookupswitch($i3)
        {
            case 0: goto label10;
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label07;
            case 4: goto label13;
            default: goto label07;
        };

     label07:
        $z0 = r7 instanceof java.lang.Boolean;

        if $z0 == 0 goto label15;

        $l4 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i3 = $i2 + 1;

        r8 = (java.lang.Boolean) r7;

        $z0 = virtualinvoke r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label14;

        $l5 = 1L;

     label08:
        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeBindLong(long,long,int,long)>($l4, l0, $i3, $l5);

     label09:
        $i2 = $i2 + 1;

        goto label06;

     label10:
        $l4 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i3 = $i2 + 1;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeBindNull(long,long,int)>($l4, l0, $i3);

        goto label09;

     label11:
        $l4 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i3 = $i2 + 1;

        r9 = (java.lang.Number) r7;

        $l5 = virtualinvoke r9.<java.lang.Number: long longValue()>();

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeBindLong(long,long,int,long)>($l4, l0, $i3, $l5);

        goto label09;

     label12:
        $l4 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i3 = $i2 + 1;

        r9 = (java.lang.Number) r7;

        $d0 = virtualinvoke r9.<java.lang.Number: double doubleValue()>();

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeBindDouble(long,long,int,double)>($l4, l0, $i3, $d0);

        goto label09;

     label13:
        $l4 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i3 = $i2 + 1;

        r10 = (byte[]) r7;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeBindBlob(long,long,int,byte[])>($l4, l0, $i3, r10);

        goto label09;

     label14:
        $l5 = 0L;

        goto label08;

     label15:
        $l4 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i3 = $i2 + 1;

        $r4 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeBindString(long,long,int,java.lang.String)>($l4, l0, $i3, $r4);

        goto label09;

     label16:
        return;
    }
    private static java.lang.String canonicalizeSyncMode(java.lang.String)
    {
        java.lang.String r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $b0 = -1;

        $i1 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case 48: goto label3;
            case 49: goto label4;
            case 50: goto label5;
            default: goto label1;
        };

     label1:
        lookupswitch($b0)
        {
            case 0: goto label6;
            case 1: goto label7;
            case 2: goto label8;
            default: goto label2;
        };

     label2:
        return r0;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z0 == 0 goto label1;

        $b0 = 0;

        goto label1;

     label4:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label1;

     label5:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("2");

        if $z0 == 0 goto label1;

        $b0 = 2;

        goto label1;

     label6:
        return "OFF";

     label7:
        return "NORMAL";

     label8:
        return "FULL";
    }
    private void detachCancellationSignal(android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        android.support.v4.os.CancellationSignal $r1;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r2;
        long $l1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: android.support.v4.os.CancellationSignal;

        if $r1 == null goto label2;

        $z0 = <io.requery.android.database.sqlite.SQLiteConnection: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        if $i0 > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        $i0 = $i0 + -1;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount> = $i0;

        $i0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        if $i0 != 0 goto label2;

        virtualinvoke $r1.<android.support.v4.os.CancellationSignal: void setOnCancelListener(android.support.v4.os.CancellationSignal$OnCancelListener)>(null);

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeResetCancel(long,boolean)>($l1, 0);

     label2:
        return;
    }
    private void dispose(boolean)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        boolean $z0;
        int $i0;
        io.requery.android.database.sqlite.CloseGuard $r1;
        long $l1;
        byte $b2;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r2;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache $r3;
        java.lang.Throwable $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $z0 := @parameter0: boolean;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.CloseGuard mCloseGuard>;

        if $r1 == null goto label2;

        if $z0 == 0 goto label1;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<io.requery.android.database.sqlite.CloseGuard: void warnIfOpen()>();

     label1:
        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<io.requery.android.database.sqlite.CloseGuard: void close()>();

     label2:
        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label6;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("close", null, null);

     label3:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: void evictAll()>();

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeClose(long)>($l1);

        r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr> = 0L;

     label4:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i0);

        return;

     label5:
        $r4 := @caughtexception;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i0);

        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
    }
    private void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r1;
        long $l0, $l1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        $l0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l1 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeFinalizeStatement(long,long)>($l0, $l1);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r1);

        return;
    }
    private io.requery.android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int, long, long)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        int $i0, $i3, $i4, $i5;
        long $l1, $l2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        java.lang.String r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        io.requery.android.database.sqlite.SQLiteDebug$DbStats $r4;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r2 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i3 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mConnectionId>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = new io.requery.android.database.sqlite.SQLiteDebug$DbStats;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i3 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: int hitCount()>();

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i4 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: int missCount()>();

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i5 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: int size()>();

        specialinvoke $r4.<io.requery.android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)>(r2, $l1, $l2, $i0, $i3, $i4, $i5);

        return $r4;
    }
    private static int getTypeOfObject(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        return 0;

     label1:
        $z0 = $r0 instanceof byte[];

        if $z0 == 0 goto label2;

        return 4;

     label2:
        $z0 = $r0 instanceof java.lang.Float;

        if $z0 != 0 goto label3;

        $z0 = $r0 instanceof java.lang.Double;

        if $z0 == 0 goto label4;

     label3:
        return 2;

     label4:
        $z0 = $r0 instanceof java.lang.Long;

        if $z0 != 0 goto label5;

        $z0 = $r0 instanceof java.lang.Integer;

        if $z0 != 0 goto label5;

        $z0 = $r0 instanceof java.lang.Short;

        if $z0 != 0 goto label5;

        $z0 = $r0 instanceof java.lang.Byte;

        if $z0 == 0 goto label6;

     label5:
        return 1;

     label6:
        return 3;
    }
    public static boolean hasCodec()
    {
        boolean $z0;

        $z0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: boolean nativeHasCodec()>();

        return $z0;
    }
    private static boolean isCacheable(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 == 2 goto label2;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }
private static native void nativeBindBlob(long, long, int, byte[]) { 
// no body
} 
private static native void nativeBindDouble(long, long, int, double) { 
// no body
} 
private static native void nativeBindLong(long, long, int, long) { 
// no body
} 
private static native void nativeBindNull(long, long, int) { 
// no body
} 
private static native void nativeBindString(long, long, int, java.lang.String) { 
// no body
} 
private static native void nativeCancel(long) { 
// no body
} 
private static native void nativeClose(long) { 
// no body
} 
private static native void nativeExecute(long, long) { 
// no body
} 
private static native int nativeExecuteForBlobFileDescriptor(long, long) { 
// no body
} 
private static native int nativeExecuteForChangedRowCount(long, long) { 
// no body
} 
private static native long nativeExecuteForCursorWindow(long, long, long, int, int, boolean) { 
// no body
} 
private static native long nativeExecuteForLastInsertedRowId(long, long) { 
// no body
} 
private static native long nativeExecuteForLong(long, long) { 
// no body
} 
private static native java.lang.String nativeExecuteForString(long, long) { 
// no body
} 
private static native void nativeFinalizeStatement(long, long) { 
// no body
} 
private static native int nativeGetColumnCount(long, long) { 
// no body
} 
private static native java.lang.String nativeGetColumnName(long, long, int) { 
// no body
} 
private static native int nativeGetDbLookaside(long) { 
// no body
} 
private static native int nativeGetParameterCount(long, long) { 
// no body
} 
private static native boolean nativeHasCodec() { 
// no body
} 
private static native boolean nativeIsReadOnly(long, long) { 
// no body
} 
private static native void nativeLoadExtension(long, java.lang.String, java.lang.String) { 
// no body
} 
private static native long nativeOpen(java.lang.String, int, java.lang.String, boolean, boolean) { 
// no body
} 
private static native long nativePrepareStatement(long, java.lang.String) { 
// no body
} 
private static native void nativeRegisterCustomFunction(long, io.requery.android.database.sqlite.SQLiteCustomFunction) { 
// no body
} 
private static native void nativeRegisterLocalizedCollators(long, java.lang.String) { 
// no body
} 
private static native void nativeResetCancel(long, boolean) { 
// no body
} 
private static native void nativeResetStatementAndClearBindings(long, long) { 
// no body
} 
    private io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String, long, int, int, boolean)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        long $l0;
        int $i1, $i2;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement r2, $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $z0 := @parameter4: boolean;

        r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool>;

        if r2 == null goto label2;

        $r3 = r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext>;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool> = $r3;

        r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext> = null;

        r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache> = 0;

     label1:
        r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql> = $r1;

        r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr> = $l0;

        r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters> = $i1;

        r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: int mType> = $i2;

        r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly> = $z0;

        return r2;

     label2:
        r2 = new io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        specialinvoke r2.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: void <init>(io.requery.android.database.sqlite.SQLiteConnection$1)>(null);

        goto label1;
    }
    static io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool, io.requery.android.database.sqlite.SQLiteDatabaseConfiguration, int, boolean)
    {
        io.requery.android.database.sqlite.SQLiteConnectionPool $r0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        int $i0;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteConnection r2;
        android.database.sqlite.SQLiteException r3;

        $r0 := @parameter0: io.requery.android.database.sqlite.SQLiteConnectionPool;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        r2 = new io.requery.android.database.sqlite.SQLiteConnection;

        specialinvoke r2.<io.requery.android.database.sqlite.SQLiteConnection: void <init>(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,int,boolean)>($r0, $r1, $i0, $z0);

     label1:
        specialinvoke r2.<io.requery.android.database.sqlite.SQLiteConnection: void open()>();

     label2:
        return r2;

     label3:
        r3 := @caughtexception;

        specialinvoke r2.<io.requery.android.database.sqlite.SQLiteConnection: void dispose(boolean)>(0);

        throw r3;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }
    private void open()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        boolean $z0, $z1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        java.lang.String $r2, $r3;
        int $i0, i2;
        long $l1;
        java.util.List $r4;
        java.lang.Object $r5;
        io.requery.android.database.sqlite.SQLiteCustomFunction r6;
        java.util.Iterator $r7;
        io.requery.android.database.sqlite.SQLiteCustomExtension r8;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r2 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r3 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $z0 = <io.requery.android.database.sqlite.SQLiteDebug: boolean DEBUG_SQL_STATEMENTS>;

        $z1 = <io.requery.android.database.sqlite.SQLiteDebug: boolean DEBUG_SQL_TIME>;

        $l1 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: long nativeOpen(java.lang.String,int,java.lang.String,boolean,boolean)>($r2, $i0, $r3, $z0, $z1);

        r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr> = $l1;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setPageSize()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setJournalSizeLimit()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setAutoCheckpointInterval()>();

        $z0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: boolean nativeHasCodec()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setWalModeFromConfiguration()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()>();

     label1:
        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label3;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r6 = (io.requery.android.database.sqlite.SQLiteCustomFunction) $r5;

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeRegisterCustomFunction(long,io.requery.android.database.sqlite.SQLiteCustomFunction)>($l1, r6);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customExtensions>;

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (io.requery.android.database.sqlite.SQLiteCustomExtension) $r5;

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $r2 = r8.<io.requery.android.database.sqlite.SQLiteCustomExtension: java.lang.String path>;

        $r3 = r8.<io.requery.android.database.sqlite.SQLiteCustomExtension: java.lang.String entryPoint>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeLoadExtension(long,java.lang.String,java.lang.String)>($l1, $r2, $r3);

        goto label4;

     label5:
        return;
    }
    private void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r1, $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql> = null;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool>;

        $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext> = $r2;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool> = $r1;

        return;
    }
    private void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r1;
        android.database.sqlite.SQLiteException r2;
        long $l0, $l1;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache $r3;
        java.lang.String $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse> = 0;

        $z0 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache>;

        if $z0 == 0 goto label4;

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

     label1:
        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeResetStatementAndClearBindings(long,long)>($l1, $l0);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r4 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object remove(java.lang.Object)>($r4);

        return;

     label4:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r1);

        return;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }
    private void setAutoCheckpointInterval()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        long l0, $l2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0;
        int $i1;
        byte $b3;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label1;

        $i1 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()>();

        l0 = (long) $i1;

        $l2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA wal_autocheckpoint", null, null);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA wal_autocheckpoint=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r3, null, null);

     label1:
        return;
    }
    private void setForeignKeyModeFromConfiguration()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        long l0, $l1;
        byte $b2;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label3;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z0 == 0 goto label2;

        l0 = 1L;

     label1:
        $l1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA foreign_keys", null, null);

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA foreign_keys=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r3, null, null);

        return;

     label2:
        l0 = 0L;

        goto label1;

     label3:
        return;
    }
    private void setJournalMode(java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1, $r3, $r5;
        android.database.sqlite.SQLiteException r2;
        boolean $z0;
        java.lang.StringBuilder $r4;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r6;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA journal_mode", null, null);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label5;

        $r4 = new java.lang.StringBuilder;

     label1:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA journal_mode=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r5, null, null);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

     label2:
        if $z0 == 0 goto label4;

        return;

     label3:
        r2 := @caughtexception;

        $z0 = r2 instanceof android.database.sqlite.SQLiteDatabaseLockedException;

        if $z0 != 0 goto label4;

        throw r2;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not change the database journal mode of \'");

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r6.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' because the database is locked.  This usually means that there are other open connections to the database which prevents the database from enabling or disabling write-ahead logging mode.  Proceeding without changing the journal mode.");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnection", $r1);

     label5:
        return;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }
    private void setJournalSizeLimit()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        long l0, $l2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0;
        int $i1;
        byte $b3;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label1;

        $i1 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()>();

        l0 = (long) $i1;

        $l2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA journal_size_limit", null, null);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA journal_size_limit=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r3, null, null);

     label1:
        return;
    }
    private void setLocaleFromConfiguration()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.RuntimeException r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        int $i0;
        java.util.Locale $r3;
        java.lang.String $r4, $r5;
        long $l1;
        boolean $z0;
        java.lang.Object[] $r6;
        android.database.sqlite.SQLiteException $r7;
        java.lang.StringBuilder $r8;
        java.lang.Throwable $r9;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & 16;

        if $i0 == 0 goto label01;

        return;

     label01:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r3 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $r4 = virtualinvoke $r3.<java.util.Locale: java.lang.String toString()>();

        $l1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeRegisterLocalizedCollators(long,java.lang.String)>($l1, $r4);

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label14;

     label02:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("CREATE TABLE IF NOT EXISTS android_metadata (locale TEXT)", null, null);

        $r5 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("SELECT locale FROM android_metadata UNION SELECT NULL ORDER BY locale DESC LIMIT 1", null, null);

     label03:
        if $r5 == null goto label06;

     label04:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label05:
        if $z0 != 0 goto label14;

     label06:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("BEGIN", null, null);

     label07:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("DELETE FROM android_metadata", null, null);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r4;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("INSERT INTO android_metadata (locale) VALUES(?)", $r6, null);

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("REINDEX LOCALIZED", null, null);

     label08:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("COMMIT", null, null);

     label09:
        return;

     label10:
        r1 := @caughtexception;

        $r7 = new android.database.sqlite.SQLiteException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to change locale for db \'");

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label11:
        $r9 := @caughtexception;

        goto label13;

     label12:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("ROLLBACK", null, null);

        throw $r9;

     label13:
        goto label12;

     label14:
        return;

        catch java.lang.RuntimeException from label02 to label03 with label10;
        catch java.lang.RuntimeException from label04 to label05 with label10;
        catch java.lang.RuntimeException from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.RuntimeException from label08 to label09 with label10;
        catch java.lang.RuntimeException from label12 to label13 with label10;
    }
    private void setPageSize()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        long l0, $l2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0;
        int $i1;
        byte $b3;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label1;

        $i1 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()>();

        l0 = (long) $i1;

        $l2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA page_size", null, null);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA page_size=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r3, null, null);

     label1:
        return;
    }
    private void setSyncMode(java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA synchronous", null, null);

        $r2 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: java.lang.String canonicalizeSyncMode(java.lang.String)>($r2);

        $r3 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: java.lang.String canonicalizeSyncMode(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA synchronous=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r1, null, null);

     label1:
        return;
    }
    private void setWalModeFromConfiguration()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0;
        int $i0;
        java.lang.String $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label2;

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label2;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & 536870912;

        if $i0 == 0 goto label1;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)>("WAL");

        $r2 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>($r2);

        return;

     label1:
        $r2 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)>($r2);

        $r2 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>($r2);

     label2:
        return;
    }
    private void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r1;
        boolean $z0;
        android.database.sqlite.SQLiteException $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement;

        $z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations>;

        if $z0 == 0 goto label1;

        $z0 = $r1.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        if $z0 != 0 goto label1;

        $r2 = new android.database.sqlite.SQLiteException;

        specialinvoke $r2.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>("Cannot execute this statement because it might modify the database but the connection is read-only.");

        throw $r2;

     label1:
        return;
    }
    private static java.lang.String trimSqlForDisplay(java.lang.String)
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = <io.requery.android.database.sqlite.SQLiteConnection: java.util.regex.Pattern TRIM_SQL_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(" ");

        return $r0;
    }
    void close()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void dispose(boolean)>(0);

        return;
    }
    void collectDbStats(java.util.ArrayList)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.util.ArrayList r1;
        io.requery.android.database.CursorWindow r2;
        long $l0, l2, $l3;
        int $i1, $i4;
        io.requery.android.database.sqlite.SQLiteDebug$DbStats $r3;
        java.lang.String $r4, $r5, $r7;
        java.lang.StringBuilder $r6;
        boolean $z0;
        android.database.sqlite.SQLiteException $r8, $r10, $r11;
        java.lang.Throwable $r9;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.util.ArrayList;

        $l0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i1 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: int nativeGetDbLookaside(long)>($l0);

        $l0 = 0L;

        l2 = 0L;

     label01:
        $l3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA page_count;", null, null);

     label02:
        $l0 = $l3;

     label03:
        $l3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>("PRAGMA page_size;", null, null);

     label04:
        l2 = $l3;

     label05:
        $r3 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int,long,long)>($i1, $l0, l2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        r2 = new io.requery.android.database.CursorWindow;

        specialinvoke r2.<io.requery.android.database.CursorWindow: void <init>(java.lang.String)>("collectDbStats");

     label06:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],io.requery.android.database.CursorWindow,int,int,boolean,android.support.v4.os.CancellationSignal)>("PRAGMA database_list;", null, r2, 0, 0, 0, null);

     label07:
        $i1 = 1;

     label08:
        $i4 = virtualinvoke r2.<io.requery.android.database.CursorWindow: int getNumRows()>();

     label09:
        if $i1 >= $i4 goto label29;

     label10:
        $r4 = virtualinvoke r2.<io.requery.android.database.CursorWindow: java.lang.String getString(int,int)>($i1, 1);

        $r5 = virtualinvoke r2.<io.requery.android.database.CursorWindow: java.lang.String getString(int,int)>($i1, 2);

     label11:
        $l0 = 0L;

        l2 = 0L;

     label12:
        $r6 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".page_count;");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $l3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r7, null, null);

     label14:
        $l0 = $l3;

     label15:
        $r6 = new java.lang.StringBuilder;

     label16:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".page_size;");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $l3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r7, null, null);

     label17:
        l2 = $l3;

     label18:
        $r6 = new java.lang.StringBuilder;

     label19:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  (attached) ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label20:
        $r7 = $r4;

     label21:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

     label22:
        if $z0 != 0 goto label26;

     label23:
        $r6 = new java.lang.StringBuilder;

     label24:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label25:
        $r7 = $r5;

     label26:
        $r3 = new io.requery.android.database.sqlite.SQLiteDebug$DbStats;

     label27:
        specialinvoke $r3.<io.requery.android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)>($r7, $l0, l2, 0, 0, 0, 0);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label28:
        $i1 = $i1 + 1;

        goto label08;

     label29:
        virtualinvoke r2.<io.requery.android.database.CursorWindow: void close()>();

        return;

     label30:
        $r8 := @caughtexception;

        virtualinvoke r2.<io.requery.android.database.CursorWindow: void close()>();

        return;

     label31:
        $r9 := @caughtexception;

        virtualinvoke r2.<io.requery.android.database.CursorWindow: void close()>();

        throw $r9;

     label32:
        $r10 := @caughtexception;

        goto label18;

     label33:
        $r11 := @caughtexception;

        goto label05;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label33;
        catch android.database.sqlite.SQLiteException from label03 to label04 with label33;
        catch android.database.sqlite.SQLiteException from label06 to label07 with label30;
        catch android.database.sqlite.SQLiteException from label08 to label09 with label30;
        catch android.database.sqlite.SQLiteException from label10 to label11 with label30;
        catch java.lang.Throwable from label06 to label07 with label31;
        catch java.lang.Throwable from label08 to label09 with label31;
        catch java.lang.Throwable from label10 to label11 with label31;
        catch android.database.sqlite.SQLiteException from label13 to label14 with label32;
        catch android.database.sqlite.SQLiteException from label16 to label17 with label32;
        catch java.lang.Throwable from label12 to label14 with label31;
        catch java.lang.Throwable from label15 to label17 with label31;
        catch android.database.sqlite.SQLiteException from label19 to label20 with label30;
        catch android.database.sqlite.SQLiteException from label21 to label22 with label30;
        catch android.database.sqlite.SQLiteException from label24 to label25 with label30;
        catch android.database.sqlite.SQLiteException from label27 to label28 with label30;
        catch java.lang.Throwable from label18 to label20 with label31;
        catch java.lang.Throwable from label21 to label22 with label31;
        catch java.lang.Throwable from label23 to label25 with label31;
        catch java.lang.Throwable from label26 to label28 with label31;
    }
    void collectDbStatsUnsafe(java.util.ArrayList)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.util.ArrayList r1;
        io.requery.android.database.sqlite.SQLiteDebug$DbStats $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int,long,long)>(0, 0L, 0L);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }
    java.lang.String describeCurrentOperationUnsafe()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r1 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: java.lang.String describeCurrentOperation()>();

        return $r1;
    }
    public void dump(android.util.Printer, boolean)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        android.util.Printer $r1;
        boolean $z0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: android.util.Printer;

        $z0 := @parameter1: boolean;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void dumpUnsafe(android.util.Printer,boolean)>($r1, $z0);

        return;
    }
    void dumpUnsafe(android.util.Printer, boolean)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        android.util.Printer $r1;
        boolean $z0, $z1;
        long $l0;
        java.lang.StringBuilder $r2;
        int $i1;
        java.lang.String $r3;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r4;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: android.util.Printer;

        $z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection #");

        $i1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mConnectionId>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  connectionPtr: 0x");

        $l0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>($r3);

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isPrimaryConnection: ");

        $z1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>($r3);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  onlyAllowReadOnlyOperations: ");

        $z1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>($r3);

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void dump(android.util.Printer,boolean)>($r1, $z0);

        if $z0 == 0 goto label2;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: void dump(android.util.Printer)>($r1);

     label2:
        return;
    }
    public void enableLocalizedCollators()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        boolean $z0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $z0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: boolean nativeHasCodec()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()>();

     label1:
        return;
    }
    public void execute(java.lang.String, java.lang.Object[], android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r3;
        java.lang.RuntimeException r4;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r5;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r6;
        int $i1;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r7;
        java.lang.Throwable $r8, $r9, $r10;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: android.support.v4.os.CancellationSignal;

        if $r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r5;

     label01:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i1 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("execute", $r1, $r2);

     label02:
        $r7 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label03:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>($r7, $r2);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label04:
        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = $r7.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeExecute(long,long)>($l2, $l0);

     label05:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label06:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

     label07:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

        throw $r8;

     label10:
        $r9 := @caughtexception;

     label11:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        throw $r9;

     label12:
        r4 := @caughtexception;

     label13:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i1, r4);

        throw r4;

     label14:
        $r10 := @caughtexception;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        throw $r10;

        catch java.lang.RuntimeException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.RuntimeException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label12;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }
    public android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String, java.lang.Object[], android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r3;
        java.lang.RuntimeException r4;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r5;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r6;
        int $i1, $i3, $i4;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r7;
        android.os.ParcelFileDescriptor $r8;
        java.lang.UnsupportedOperationException $r9;
        java.lang.Throwable $r10, $r11, $r12;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: android.support.v4.os.CancellationSignal;

        if $r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r5;

     label01:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i1 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForBlobFileDescriptor", $r1, $r2);

     label02:
        $r7 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label03:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>($r7, $r2);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label04:
        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = $r7.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $i3 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: int nativeExecuteForBlobFileDescriptor(long,long)>($l2, $l0);

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

     label05:
        if $i4 < 13 goto label11;

        if $i3 < 0 goto label10;

     label06:
        $r8 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>($i3);

     label07:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label08:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

     label09:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        return $r8;

     label10:
        $r8 = null;

        goto label07;

     label11:
        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r9;

     label12:
        $r10 := @caughtexception;

     label13:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

        throw $r10;

     label14:
        $r11 := @caughtexception;

     label15:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        throw $r11;

     label16:
        r4 := @caughtexception;

     label17:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i1, r4);

        throw r4;

     label18:
        $r12 := @caughtexception;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        throw $r12;

        catch java.lang.RuntimeException from label02 to label03 with label16;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.RuntimeException from label08 to label09 with label16;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.RuntimeException from label15 to label16 with label16;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
    }
    public int executeForChangedRowCount(java.lang.String, java.lang.Object[], android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r3;
        java.lang.RuntimeException r4;
        java.lang.IllegalArgumentException $r5;
        int i0, $i1, $i4;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r6;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r7;
        long $l2, $l3;
        boolean $z0;
        java.lang.StringBuilder $r8;
        java.lang.Throwable $r9, $r10, $r11;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: android.support.v4.os.CancellationSignal;

        if $r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r5;

     label01:
        i0 = 0;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i1 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForChangedRowCount", $r1, $r2);

     label02:
        $r7 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label03:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>($r7, $r2);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label04:
        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l3 = $r7.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $i4 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: int nativeExecuteForChangedRowCount(long,long)>($l2, $l3);

     label05:
        i0 = $i4;

     label06:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label07:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

     label08:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z0 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>($i1);

        if $z0 == 0 goto label17;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changedRows=");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>($i1, $r1);

        return $i4;

     label09:
        $r9 := @caughtexception;

     label10:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

        throw $r9;

     label11:
        $r10 := @caughtexception;

     label12:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        throw $r10;

     label13:
        r4 := @caughtexception;

     label14:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i1, r4);

        throw r4;

     label15:
        $r11 := @caughtexception;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z0 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>($i1);

        if $z0 == 0 goto label16;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changedRows=");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>($i1, $r1);

     label16:
        throw $r11;

     label17:
        return $i4;

        catch java.lang.RuntimeException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.RuntimeException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.RuntimeException from label12 to label13 with label13;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
    }
    public int executeForCursorWindow(java.lang.String, java.lang.Object[], io.requery.android.database.CursorWindow, int, int, boolean, android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        io.requery.android.database.CursorWindow $r3;
        int $i0, $i1, i3, i4, i5, $i6;
        boolean $z0;
        android.support.v4.os.CancellationSignal $r4;
        long $l2, $l7, $l8;
        java.lang.RuntimeException r5;
        java.lang.IllegalArgumentException $r6;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r7;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r8;
        java.lang.StringBuilder $r9;
        java.lang.Throwable $r10, $r11, $r12, $r13;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: io.requery.android.database.CursorWindow;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $z0 := @parameter5: boolean;

        $r4 := @parameter6: android.support.v4.os.CancellationSignal;

        if $r1 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r6;

     label01:
        if $r3 != null goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("window must not be null.");

        throw $r6;

     label02:
        virtualinvoke $r3.<io.requery.android.database.CursorWindow: void acquireReference()>();

        i3 = -1;

        i4 = -1;

        i5 = -1;

     label03:
        $r7 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i6 = virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForCursorWindow", $r1, $r2);

     label04:
        $r8 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label05:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r8);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>($r8, $r2);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r8);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.os.CancellationSignal)>($r4);

     label06:
        $l7 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l8 = $r8.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $l2 = $r3.<io.requery.android.database.CursorWindow: long mWindowPtr>;

        $l2 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: long nativeExecuteForCursorWindow(long,long,long,int,int,boolean)>($l7, $l8, $l2, $i0, $i1, $z0);

     label07:
        $l7 = $l2 >> 32;

        i3 = (int) $l7;

        i4 = (int) $l2;

     label08:
        $i1 = virtualinvoke $r3.<io.requery.android.database.CursorWindow: int getNumRows()>();

     label09:
        i5 = $i1;

     label10:
        virtualinvoke $r3.<io.requery.android.database.CursorWindow: void setStartPosition(int)>(i3);

     label11:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r4);

     label12:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r8);

     label13:
        $r7 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z0 = virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>($i6);

     label14:
        if $z0 == 0 goto label16;

     label15:
        $r7 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("window=\'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', startPos=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actualPos=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filledRows=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", countedRows=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>($i6, $r1);

     label16:
        virtualinvoke $r3.<io.requery.android.database.CursorWindow: void releaseReference()>();

        return i4;

     label17:
        $r10 := @caughtexception;

     label18:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r4);

        throw $r10;

     label19:
        $r11 := @caughtexception;

     label20:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r8);

        throw $r11;

     label21:
        r5 := @caughtexception;

     label22:
        $r7 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i6, r5);

        throw r5;

     label23:
        $r12 := @caughtexception;

     label24:
        $r7 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z0 = virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>($i6);

     label25:
        if $z0 == 0 goto label27;

     label26:
        $r7 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("window=\'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', startPos=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actualPos=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filledRows=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", countedRows=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>($i6, $r1);

     label27:
        throw $r12;

     label28:
        $r13 := @caughtexception;

        virtualinvoke $r3.<io.requery.android.database.CursorWindow: void releaseReference()>();

        throw $r13;

        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.RuntimeException from label04 to label05 with label21;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.RuntimeException from label12 to label13 with label21;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.RuntimeException from label20 to label21 with label21;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label28 with label28;
    }
    public long executeForLastInsertedRowId(java.lang.String, java.lang.Object[], android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r3;
        java.lang.RuntimeException r4;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r5;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r6;
        int $i1;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r7;
        java.lang.Throwable $r8, $r9, $r10;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: android.support.v4.os.CancellationSignal;

        if $r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r5;

     label01:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i1 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForLastInsertedRowId", $r1, $r2);

     label02:
        $r7 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label03:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>($r7, $r2);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label04:
        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = $r7.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: long nativeExecuteForLastInsertedRowId(long,long)>($l2, $l0);

     label05:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label06:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

     label07:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        return $l0;

     label08:
        $r8 := @caughtexception;

     label09:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

        throw $r8;

     label10:
        $r9 := @caughtexception;

     label11:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        throw $r9;

     label12:
        r4 := @caughtexception;

     label13:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i1, r4);

        throw r4;

     label14:
        $r10 := @caughtexception;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        throw $r10;

        catch java.lang.RuntimeException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.RuntimeException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label12;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }
    public long executeForLong(java.lang.String, java.lang.Object[], android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r3;
        java.lang.RuntimeException r4;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r5;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r6;
        int $i1;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r7;
        java.lang.Throwable $r8, $r9, $r10;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: android.support.v4.os.CancellationSignal;

        if $r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r5;

     label01:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i1 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForLong", $r1, $r2);

     label02:
        $r7 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label03:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>($r7, $r2);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label04:
        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = $r7.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: long nativeExecuteForLong(long,long)>($l2, $l0);

     label05:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label06:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

     label07:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        return $l0;

     label08:
        $r8 := @caughtexception;

     label09:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

        throw $r8;

     label10:
        $r9 := @caughtexception;

     label11:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        throw $r9;

     label12:
        r4 := @caughtexception;

     label13:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i1, r4);

        throw r4;

     label14:
        $r10 := @caughtexception;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        throw $r10;

        catch java.lang.RuntimeException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.RuntimeException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label12;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }
    public java.lang.String executeForString(java.lang.String, java.lang.Object[], android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r3;
        java.lang.RuntimeException r4;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r5;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r6;
        int $i1;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r7;
        java.lang.Throwable $r8, $r9, $r10;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: android.support.v4.os.CancellationSignal;

        if $r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r5;

     label01:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i1 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForString", $r1, $r2);

     label02:
        $r7 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label03:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>($r7, $r2);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label04:
        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = $r7.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $r1 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: java.lang.String nativeExecuteForString(long,long)>($l2, $l0);

     label05:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

     label06:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

     label07:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        return $r1;

     label08:
        $r8 := @caughtexception;

     label09:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.os.CancellationSignal)>($r3);

        throw $r8;

     label10:
        $r9 := @caughtexception;

     label11:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r7);

        throw $r9;

     label12:
        r4 := @caughtexception;

     label13:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i1, r4);

        throw r4;

     label14:
        $r10 := @caughtexception;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i1);

        throw $r10;

        catch java.lang.RuntimeException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.RuntimeException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label12;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }
    protected void finalize() throws java.lang.Throwable
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r1;
        long $l0;
        byte $b1;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

     label1:
        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnectionPool mPool>;

     label2:
        if $r1 == null goto label6;

     label3:
        $l0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

     label4:
        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label6;

     label5:
        $r1 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnectionPool mPool>;

        virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteConnectionPool: void onConnectionLeaked()>();

     label6:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void dispose(boolean)>(1);

     label7:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label8:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
    }
    boolean isPreparedStatementInCache(java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r2 = virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object get(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isPrimaryConnection()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        boolean z0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        z0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        return z0;
    }
    public void onCancel()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        long $l0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $l0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeCancel(long)>($l0);

        return;
    }
    public void prepare(java.lang.String, io.requery.android.database.sqlite.SQLiteStatementInfo)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.String $r1;
        io.requery.android.database.sqlite.SQLiteStatementInfo $r2;
        java.lang.RuntimeException r3;
        java.lang.IllegalArgumentException $r4;
        io.requery.android.database.sqlite.SQLiteConnection$OperationLog $r5;
        int $i0, $i1, i4;
        io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement $r6;
        boolean $z0;
        long $l2, $l3;
        java.lang.String[] $r7;
        java.lang.Throwable $r8, $r9;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: io.requery.android.database.sqlite.SQLiteStatementInfo;

        if $r1 != null goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r4;

     label01:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $i0 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("prepare", $r1, null);

     label02:
        $r6 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>($r1);

     label03:
        if $r2 == null goto label07;

     label04:
        $i1 = $r6.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        $r2.<io.requery.android.database.sqlite.SQLiteStatementInfo: int numParameters> = $i1;

        $z0 = $r6.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        $r2.<io.requery.android.database.sqlite.SQLiteStatementInfo: boolean readOnly> = $z0;

        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l3 = $r6.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $i1 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: int nativeGetColumnCount(long,long)>($l2, $l3);

     label05:
        if $i1 != 0 goto label09;

     label06:
        $r7 = <io.requery.android.database.sqlite.SQLiteConnection: java.lang.String[] EMPTY_STRING_ARRAY>;

        $r2.<io.requery.android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames> = $r7;

     label07:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r6);

     label08:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i0);

        return;

     label09:
        $r7 = newarray (java.lang.String)[$i1];

        $r2.<io.requery.android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames> = $r7;

     label10:
        i4 = 0;

     label11:
        if i4 >= $i1 goto label07;

     label12:
        $r7 = $r2.<io.requery.android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames>;

        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l3 = $r6.<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $r1 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: java.lang.String nativeGetColumnName(long,long,int)>($l2, $l3, i4);

        $r7[i4] = $r1;

     label13:
        i4 = i4 + 1;

        goto label11;

     label14:
        $r8 := @caughtexception;

     label15:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)>($r6);

        throw $r8;

     label16:
        r3 := @caughtexception;

     label17:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>($i0, r3);

        throw r3;

     label18:
        $r9 := @caughtexception;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>($i0);

        throw $r9;

        catch java.lang.RuntimeException from label02 to label03 with label16;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.RuntimeException from label07 to label08 with label16;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.RuntimeException from label15 to label16 with label16;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
    }
    void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1, $r5;
        java.util.List $r2;
        int $i0, i1;
        java.lang.Object $r3;
        io.requery.android.database.sqlite.SQLiteCustomFunction r4;
        boolean $z0, $z1, $z2;
        long $l2;
        java.util.Locale $r6, $r7;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations> = 0;

        $r2 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label01:
        if i1 >= $i0 goto label03;

        $r2 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (io.requery.android.database.sqlite.SQLiteCustomFunction) $r3;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r2 = $r5.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label02;

        $l2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: void nativeRegisterCustomFunction(long,io.requery.android.database.sqlite.SQLiteCustomFunction)>($l2, r4);

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        $z0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z1 = $r5.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z0 == $z1 goto label09;

        $z0 = 1;

     label04:
        $i0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        i1 = $r5.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 ^ i1;

        $i0 = $i0 & 536870912;

        if $i0 == 0 goto label10;

        $z1 = 1;

     label05:
        $r6 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r7 = $r5.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $z2 = virtualinvoke $r6.<java.util.Locale: boolean equals(java.lang.Object)>($r7);

        if $z2 != 0 goto label11;

        $z2 = 1;

     label06:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r1);

        if $z0 == 0 goto label07;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()>();

     label07:
        if $z1 == 0 goto label08;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setWalModeFromConfiguration()>();

     label08:
        if $z2 == 0 goto label12;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()>();

        return;

     label09:
        $z0 = 0;

        goto label04;

     label10:
        $z1 = 0;

        goto label05;

     label11:
        $z2 = 0;

        goto label06;

     label12:
        return;
    }
    void setOnlyAllowReadOnlyOperations(boolean)
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        boolean $z0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $z0 := @parameter0: boolean;

        r0.<io.requery.android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations> = $z0;

        return;
    }
    public java.lang.String toString()
    {
        io.requery.android.database.sqlite.SQLiteConnection r0;
        java.lang.StringBuilder $r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteConnection;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteConnection: ");

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r3 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i0 = r0.<io.requery.android.database.sqlite.SQLiteConnection: int mConnectionId>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
