io.requery.android.database.sqlite.SQLiteStatement extends io.requery.android.database.sqlite.SQLiteProgram
    void <init>(io.requery.android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.Object[])
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteProgram: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[],android.support.v4.os.CancellationSignal)>($r1, $r2, $r3, null);

        return;
    }
    public void execute()
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteDatabaseCorruptException r1;
        io.requery.android.database.sqlite.SQLiteSession $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: io.requery.android.database.sqlite.SQLiteSession getSession()>();

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r4 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteSession: void execute(java.lang.String,java.lang.Object[],int,android.support.v4.os.CancellationSignal)>($r3, $r4, $i0, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return;

     label3:
        r1 := @caughtexception;

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void onCorruption()>();

        throw r1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }
    public long executeInsert()
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteDatabaseCorruptException r1;
        io.requery.android.database.sqlite.SQLiteSession $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;
        int $i0;
        long $l1;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: io.requery.android.database.sqlite.SQLiteSession getSession()>();

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r4 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        $l1 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteSession: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],int,android.support.v4.os.CancellationSignal)>($r3, $r4, $i0, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return $l1;

     label3:
        r1 := @caughtexception;

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void onCorruption()>();

        throw r1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }
    public int executeUpdateDelete()
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteDatabaseCorruptException r1;
        io.requery.android.database.sqlite.SQLiteSession $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: io.requery.android.database.sqlite.SQLiteSession getSession()>();

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r4 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        $i0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteSession: int executeForChangedRowCount(java.lang.String,java.lang.Object[],int,android.support.v4.os.CancellationSignal)>($r3, $r4, $i0, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return $i0;

     label3:
        r1 := @caughtexception;

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void onCorruption()>();

        throw r1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }
    public android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteDatabaseCorruptException r1;
        io.requery.android.database.sqlite.SQLiteSession $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;
        int $i0;
        android.os.ParcelFileDescriptor $r5;
        java.lang.Throwable $r6;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: io.requery.android.database.sqlite.SQLiteSession getSession()>();

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r4 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        $r5 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteSession: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],int,android.support.v4.os.CancellationSignal)>($r3, $r4, $i0, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return $r5;

     label3:
        r1 := @caughtexception;

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void onCorruption()>();

        throw r1;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r6;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }
    public long simpleQueryForLong()
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteDatabaseCorruptException r1;
        io.requery.android.database.sqlite.SQLiteSession $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;
        int $i0;
        long $l1;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: io.requery.android.database.sqlite.SQLiteSession getSession()>();

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r4 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        $l1 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteSession: long executeForLong(java.lang.String,java.lang.Object[],int,android.support.v4.os.CancellationSignal)>($r3, $r4, $i0, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return $l1;

     label3:
        r1 := @caughtexception;

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void onCorruption()>();

        throw r1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }
    public java.lang.String simpleQueryForString()
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteDatabaseCorruptException r1;
        io.requery.android.database.sqlite.SQLiteSession $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: io.requery.android.database.sqlite.SQLiteSession getSession()>();

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r4 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        $r3 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteSession: java.lang.String executeForString(java.lang.String,java.lang.Object[],int,android.support.v4.os.CancellationSignal)>($r3, $r4, $i0, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return $r3;

     label3:
        r1 := @caughtexception;

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void onCorruption()>();

        throw r1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }
    public java.lang.String toString()
    {
        io.requery.android.database.sqlite.SQLiteStatement r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteStatement;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteProgram: ");

        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
