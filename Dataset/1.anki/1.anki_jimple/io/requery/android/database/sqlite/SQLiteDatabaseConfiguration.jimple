io.requery.android.database.sqlite.SQLiteDatabaseConfiguration extends java.lang.Object
private static final java.util.regex.Pattern EMAIL_IN_DB_PATTERN
public static final java.lang.String MEMORY_DB_PATH
public final java.util.List customExtensions
public final java.util.List customFunctions
public boolean foreignKeyConstraintsEnabled
public final java.lang.String label
public java.util.Locale locale
public int maxSqlCacheSize
public int openFlags
public final java.lang.String path
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\w\\.\\-]+@[\\w\\.\\-]+");

        <io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.regex.Pattern EMAIL_IN_DB_PATTERN> = $r0;

        return;
    }
    void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration r0, $r1;
        java.util.ArrayList $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customExtensions> = $r2;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null.");

        throw $r3;

     label1:
        $r4 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path> = $r4;

        $r4 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label> = $r4;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r1);

        return;
    }
    public void <init>(java.lang.String, int)
    {
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration r0;
        java.lang.String $r1;
        int $i0;
        java.util.ArrayList $r2;
        java.lang.IllegalArgumentException $r3;
        java.util.Locale $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customExtensions> = $r2;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("path must not be null.");

        throw $r3;

     label1:
        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path> = $r1;

        $r1 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String stripPathForLogs(java.lang.String)>($r1);

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label> = $r1;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i0;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = 25;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = $r4;

        return;
    }
    public void <init>(java.lang.String, int, java.util.List, java.util.List)
    {
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration r0;
        java.lang.String $r1;
        int $i0;
        java.util.List r2, r3, $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(java.lang.String,int)>($r1, $i0);

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r2);

        r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customExtensions>;

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r3);

        return;
    }
    private static java.lang.String stripPathForLogs(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        if $i0 != -1 goto label1;

        return r0;

     label1:
        $r1 = <io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.regex.Pattern EMAIL_IN_DB_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("XX@YY");

        return r0;
    }
    public boolean isInMemoryDb()
    {
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(":memory:");

        return $z0;
    }
    void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration r0, $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r4;
        int $i0;
        java.util.Locale $r5;
        java.util.List $r6, $r7;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null.");

        throw $r2;

     label1:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r4 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other configuration must refer to the same database.");

        throw $r2;

     label2:
        $i0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i0;

        $i0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = $i0;

        $r5 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = $r5;

        $z0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled> = $z0;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        $r7 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customExtensions>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customExtensions>;

        $r7 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customExtensions>;

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        return;
    }
