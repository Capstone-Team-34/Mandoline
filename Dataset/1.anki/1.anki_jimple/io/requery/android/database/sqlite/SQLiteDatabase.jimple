io.requery.android.database.sqlite.SQLiteDatabase extends io.requery.android.database.sqlite.SQLiteClosable
static final boolean $assertionsDisabled
public static final int CONFLICT_ABORT
public static final int CONFLICT_FAIL
public static final int CONFLICT_IGNORE
public static final int CONFLICT_NONE
public static final int CONFLICT_REPLACE
public static final int CONFLICT_ROLLBACK
private static final java.lang.String[] CONFLICT_VALUES
public static final int CREATE_IF_NECESSARY
public static final int ENABLE_WRITE_AHEAD_LOGGING
private static final int EVENT_DB_CORRUPT
public static final int MAX_SQL_CACHE_SIZE
public static final int NO_LOCALIZED_COLLATORS
public static final int OPEN_READONLY
public static final int OPEN_READWRITE
public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH
private static final java.lang.String TAG
private static final java.util.WeakHashMap sActiveDatabases
private final io.requery.android.database.sqlite.CloseGuard mCloseGuardLocked
private final io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked
private io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked
private final io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory
private final io.requery.android.database.DatabaseErrorHandler mErrorHandler
private final java.lang.Object mLock
private final java.lang.ThreadLocal mThreadSession
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;
        java.util.WeakHashMap $r1;
        java.lang.String[] $r2;

        $r0 = class "Lio/requery/android/database/sqlite/SQLiteDatabase;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <io.requery.android.database.sqlite.SQLiteDatabase: boolean $assertionsDisabled> = $z0;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("sqlite3x");

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        <io.requery.android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases> = $r1;

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "";

        $r2[1] = " OR ROLLBACK ";

        $r2[2] = " OR ABORT ";

        $r2[3] = " OR FAIL ";

        $r2[4] = " OR IGNORE ";

        $r2[5] = " OR REPLACE ";

        <io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES> = $r2;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    private void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, io.requery.android.database.DatabaseErrorHandler)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r2;
        io.requery.android.database.sqlite.CloseGuard $r3;
        io.requery.android.database.DatabaseErrorHandler r4;
        io.requery.android.database.sqlite.SQLiteDatabase$1 $r5;
        java.lang.Object $r6;
        io.requery.android.database.DefaultDatabaseErrorHandler $r7;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $r2 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        r4 := @parameter2: io.requery.android.database.DatabaseErrorHandler;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteClosable: void <init>()>();

        $r5 = new io.requery.android.database.sqlite.SQLiteDatabase$1;

        specialinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase$1: void <init>(io.requery.android.database.sqlite.SQLiteDatabase)>(r0);

        r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.ThreadLocal mThreadSession> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock> = $r6;

        $r3 = staticinvoke <io.requery.android.database.sqlite.CloseGuard: io.requery.android.database.sqlite.CloseGuard get()>();

        r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.CloseGuard mCloseGuardLocked> = $r3;

        r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory> = $r2;

        if r4 == null goto label2;

     label1:
        r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.DatabaseErrorHandler mErrorHandler> = r4;

        r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked> = $r1;

        return;

     label2:
        $r7 = new io.requery.android.database.DefaultDatabaseErrorHandler;

        r4 = $r7;

        specialinvoke $r7.<io.requery.android.database.DefaultDatabaseErrorHandler: void <init>()>();

        goto label1;
    }
    private void beginTransaction(android.database.sqlite.SQLiteTransactionListener, int)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener $r1;
        int $i0, $i1;
        io.requery.android.database.sqlite.SQLiteSession $r2;
        java.lang.Throwable $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        $i0 := @parameter1: int;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession getThreadSession()>();

        $i1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>(0);

        virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteSession: void beginTransaction(int,android.database.sqlite.SQLiteTransactionListener,int,android.support.v4.os.CancellationSignal)>($i0, $r1, $i1, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    private void collectDbStats(java.util.ArrayList)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.util.ArrayList r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r3;
        java.lang.Throwable $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r3 == null goto label2;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteConnectionPool: void collectDbStats(java.util.ArrayList)>(r1);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public static io.requery.android.database.sqlite.SQLiteDatabase create(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;

        $r0 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r1 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(":memory:", $r0, 268435456);

        return $r1;
    }
    public static boolean deleteDatabase(java.io.File)
    {
        java.io.File $r0, $r3;
        io.requery.android.database.sqlite.SQLiteDatabase$2 r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.File[] $r6;
        int $i0, $i1;

        $r0 := @parameter0: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-journal");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r3.<java.io.File: boolean delete()>();

        $z0 = $z0 | $z1;

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-shm");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r3.<java.io.File: boolean delete()>();

        $z0 = $z0 | $z1;

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wal");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r3.<java.io.File: boolean delete()>();

        $z0 = $z0 | $z1;

        $r3 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        if $r3 == null goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-mj");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = new io.requery.android.database.sqlite.SQLiteDatabase$2;

        specialinvoke r1.<io.requery.android.database.sqlite.SQLiteDatabase$2: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r1);

        $i0 = lengthof $r6;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r0 = $r6[$i1];

        $z1 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        $z0 = $z0 | $z1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $z0;
    }
    private void dispose(boolean)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteConnectionPool r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.CloseGuard $r3;
        java.util.WeakHashMap $r4, $r5;
        java.lang.Throwable $r6, $r7;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label01:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.CloseGuard mCloseGuardLocked>;

        if $r3 == null goto label03;

        if $z0 == 0 goto label02;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.CloseGuard: void warnIfOpen()>();

     label02:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.CloseGuard: void close()>();

     label03:
        r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked> = null;

        exitmonitor $r2;

     label04:
        if $z0 != 0 goto label13;

        $r4 = <io.requery.android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor $r4;

     label05:
        $r5 = <io.requery.android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        virtualinvoke $r5.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        exitmonitor $r4;

     label06:
        if r1 == null goto label13;

        virtualinvoke r1.<io.requery.android.database.sqlite.SQLiteConnectionPool: void close()>();

        return;

     label07:
        $r6 := @caughtexception;

     label08:
        exitmonitor $r2;

     label09:
        throw $r6;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor $r4;

     label12:
        throw $r7;

     label13:
        return;

        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }
    private void dump(android.util.Printer, boolean)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        android.util.Printer $r1;
        boolean $z0;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r3;
        java.lang.Throwable $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.util.Printer;

        $z0 := @parameter1: boolean;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r3 == null goto label2;

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>("");

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteConnectionPool: void dump(android.util.Printer,boolean)>($r1, $z0);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    static void dumpAll(android.util.Printer, boolean)
    {
        android.util.Printer $r0;
        boolean $z0, $z1;
        java.util.ArrayList $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        io.requery.android.database.sqlite.SQLiteDatabase r4;

        $r0 := @parameter0: android.util.Printer;

        $z0 := @parameter1: boolean;

        $r1 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: java.util.ArrayList getActiveDatabases()>();

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (io.requery.android.database.sqlite.SQLiteDatabase) $r3;

        specialinvoke r4.<io.requery.android.database.sqlite.SQLiteDatabase: void dump(android.util.Printer,boolean)>($r0, $z0);

        goto label1;

     label2:
        return;
    }
    private static void ensureFile(java.lang.String)
    {
        java.lang.String $r0;
        java.io.IOException r1;
        java.io.File r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r0);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label9;

     label1:
        $r3 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

     label2:
        if $z0 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t mkdirs ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SQLiteDatabase", $r0);

     label4:
        $z0 = virtualinvoke r2.<java.io.File: boolean createNewFile()>();

     label5:
        if $z0 != 0 goto label9;

        $r4 = new java.lang.StringBuilder;

     label6:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SQLiteDatabase", $r0);

     label7:
        return;

     label8:
        r1 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t ensure file ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r0, r1);

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }
    private int executeSql(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        io.requery.android.database.sqlite.SQLiteStatement r3;
        int $i0;
        java.lang.Throwable $r4, $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        r3 = new io.requery.android.database.sqlite.SQLiteStatement;

        specialinvoke r3.<io.requery.android.database.sqlite.SQLiteStatement: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r1, $r2);

     label2:
        $i0 = virtualinvoke r3.<io.requery.android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label3:
        virtualinvoke r3.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $i0;

     label5:
        $r4 := @caughtexception;

     label6:
        virtualinvoke r3.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

        throw $r4;

     label7:
        $r5 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }
    public static java.lang.String findEditTable(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label4;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(44);

        if $i0 <= 0 goto label2;

        if $i0 < $i1 goto label1;

        if $i1 >= 0 goto label2;

     label1:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return r0;

     label2:
        if $i1 <= 0 goto label5;

        if $i1 < $i0 goto label3;

        if $i0 >= 0 goto label5;

     label3:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return r0;

     label4:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid tables");

        throw $r1;

     label5:
        return r0;
    }
    private static java.util.ArrayList getActiveDatabases()
    {
        java.util.ArrayList r0;
        java.util.WeakHashMap $r1, $r3;
        java.util.Set $r2;
        java.lang.Throwable $r4;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        $r1 = <io.requery.android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor $r1;

     label1:
        $r3 = <io.requery.android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        $r2 = virtualinvoke $r3.<java.util.WeakHashMap: java.util.Set keySet()>();

        virtualinvoke r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r2);

        exitmonitor $r1;

     label2:
        return r0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    static java.util.ArrayList getDbStats()
    {
        java.util.ArrayList r0, $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        io.requery.android.database.sqlite.SQLiteDatabase r4;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        $r1 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: java.util.ArrayList getActiveDatabases()>();

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (io.requery.android.database.sqlite.SQLiteDatabase) $r3;

        specialinvoke r4.<io.requery.android.database.sqlite.SQLiteDatabase: void collectDbStats(java.util.ArrayList)>(r0);

        goto label1;

     label2:
        return r0;
    }
    static boolean hasCodec()
    {
        boolean $z0;

        $z0 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnection: boolean hasCodec()>();

        return $z0;
    }
    private static boolean isMainThread()
    {
        android.os.Looper $r0, $r1;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r0 == null goto label1;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean isReadOnlyLocked()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        int $i0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & 1;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static long longForQuery(io.requery.android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])
    {
        io.requery.android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        java.lang.Throwable $r3;
        io.requery.android.database.sqlite.SQLiteStatement $r4;
        long $l0;

        $r0 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $r4 = virtualinvoke $r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r1);

     label1:
        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,java.lang.String[])>($r4, $r2);

     label2:
        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

        return $l0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    private static long longForQuery(io.requery.android.database.sqlite.SQLiteStatement, java.lang.String[])
    {
        io.requery.android.database.sqlite.SQLiteStatement $r0;
        java.lang.String[] $r1;
        long $l0;

        $r0 := @parameter0: io.requery.android.database.sqlite.SQLiteStatement;

        $r1 := @parameter1: java.lang.String[];

        virtualinvoke $r0.<io.requery.android.database.sqlite.SQLiteStatement: void bindAllArgsAsStrings(java.lang.String[])>($r1);

        $l0 = virtualinvoke $r0.<io.requery.android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

        return $l0;
    }
    private void open()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0;
        java.lang.String $r2;
        android.database.sqlite.SQLiteDatabaseCorruptException r3;
        android.database.sqlite.SQLiteException r4;
        java.lang.StringBuilder $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

     label1:
        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

     label2:
        if $z0 != 0 goto label4;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r2 = $r1.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

     label3:
        staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: void ensureFile(java.lang.String)>($r2);

     label4:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void openInner()>();

     label5:
        return;

     label6:
        r3 := @caughtexception;

     label7:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void openInner()>();

     label8:
        return;

     label9:
        r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open database \'");

        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r2, r4);

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void close()>();

        throw r4;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label9;
        catch android.database.sqlite.SQLiteException from label3 to label4 with label9;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label4 to label5 with label6;
        catch android.database.sqlite.SQLiteException from label4 to label5 with label9;
        catch android.database.sqlite.SQLiteException from label7 to label8 with label9;
    }
    public static io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, io.requery.android.database.DatabaseErrorHandler)
    {
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        io.requery.android.database.DatabaseErrorHandler $r2;
        io.requery.android.database.sqlite.SQLiteDatabase r3;

        $r0 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 := @parameter2: io.requery.android.database.DatabaseErrorHandler;

        r3 = new io.requery.android.database.sqlite.SQLiteDatabase;

        specialinvoke r3.<io.requery.android.database.sqlite.SQLiteDatabase: void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.DatabaseErrorHandler)>($r0, $r1, $r2);

        specialinvoke r3.<io.requery.android.database.sqlite.SQLiteDatabase: void open()>();

        return r3;
    }
    public static io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        java.lang.String $r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        int $i0;
        io.requery.android.database.sqlite.SQLiteDatabase $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $i0 := @parameter2: int;

        $r2 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int,io.requery.android.database.DatabaseErrorHandler)>($r0, $r1, $i0, null);

        return $r2;
    }
    public static io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, int, io.requery.android.database.DatabaseErrorHandler)
    {
        java.lang.String $r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        int $i0;
        io.requery.android.database.DatabaseErrorHandler $r2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration r3;
        io.requery.android.database.sqlite.SQLiteDatabase r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $i0 := @parameter2: int;

        $r2 := @parameter3: io.requery.android.database.DatabaseErrorHandler;

        r3 = new io.requery.android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(java.lang.String,int)>($r0, $i0);

        r4 = new io.requery.android.database.sqlite.SQLiteDatabase;

        specialinvoke r4.<io.requery.android.database.sqlite.SQLiteDatabase: void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.DatabaseErrorHandler)>(r3, $r1, $r2);

        specialinvoke r4.<io.requery.android.database.sqlite.SQLiteDatabase: void open()>();

        return r4;
    }
    private void openInner()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.lang.Throwable $r4, $r9;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r5;
        io.requery.android.database.sqlite.CloseGuard $r6;
        java.util.WeakHashMap $r7, $r8;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $z0 = <io.requery.android.database.sqlite.SQLiteDatabase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r1 == null goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r4;

     label4:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r1 = staticinvoke <io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r5);

        r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked> = $r1;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r6.<io.requery.android.database.sqlite.CloseGuard: void open(java.lang.String)>("close");

        exitmonitor $r2;

     label5:
        $r7 = <io.requery.android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor $r7;

     label6:
        $r8 = <io.requery.android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        virtualinvoke $r8.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);

        exitmonitor $r7;

     label7:
        return;

     label8:
        $r9 := @caughtexception;

        exitmonitor $r7;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }
    public static io.requery.android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.io.File $r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        java.lang.String $r2;
        io.requery.android.database.sqlite.SQLiteDatabase $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        $r3 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)>($r2, $r1);

        return $r3;
    }
    public static io.requery.android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.lang.String $r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        io.requery.android.database.sqlite.SQLiteDatabase $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int,io.requery.android.database.DatabaseErrorHandler)>($r0, $r1, 268435456, null);

        return $r2;
    }
    public static io.requery.android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, io.requery.android.database.DatabaseErrorHandler)
    {
        java.lang.String $r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        io.requery.android.database.DatabaseErrorHandler $r2;
        io.requery.android.database.sqlite.SQLiteDatabase $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 := @parameter2: io.requery.android.database.DatabaseErrorHandler;

        $r3 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int,io.requery.android.database.DatabaseErrorHandler)>($r0, $r1, 268435456, $r2);

        return $r3;
    }
    public static int releaseMemory()
    {
        int $i0;

        $i0 = staticinvoke <io.requery.android.database.sqlite.SQLiteGlobal: int releaseMemory()>();

        return $i0;
    }
    private void throwIfNotOpenLocked()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r4;
        java.lang.String $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The database \'");

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r5 = $r4.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not open.");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        return;
    }
    private boolean yieldIfContendedHelper(boolean, long)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;
        long $l0;
        io.requery.android.database.sqlite.SQLiteSession $r1;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $l0 := @parameter1: long;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession getThreadSession()>();

        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteSession: boolean yieldTransaction(long,boolean,android.support.v4.os.CancellationSignal)>($l0, $z0, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $z0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void addCustomFunction(java.lang.String, int, io.requery.android.database.sqlite.SQLiteDatabase$CustomFunction)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        int $i0;
        io.requery.android.database.sqlite.SQLiteDatabase$CustomFunction $r2;
        java.lang.RuntimeException r3;
        io.requery.android.database.sqlite.SQLiteCustomFunction r4;
        java.lang.Object $r5;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r6;
        java.util.List $r7;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r8;
        java.lang.Throwable $r9;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: io.requery.android.database.sqlite.SQLiteDatabase$CustomFunction;

        r4 = new io.requery.android.database.sqlite.SQLiteCustomFunction;

        specialinvoke r4.<io.requery.android.database.sqlite.SQLiteCustomFunction: void <init>(java.lang.String,int,io.requery.android.database.sqlite.SQLiteDatabase$CustomFunction)>($r1, $i0, $r2);

        $r5 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r5;

     label1:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r7 = $r6.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        $r8 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r6);

     label3:
        exitmonitor $r5;

     label4:
        return;

     label5:
        r3 := @caughtexception;

        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r7 = $r6.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.List customFunctions>;

        interfaceinvoke $r7.<java.util.List: boolean remove(java.lang.Object)>(r4);

        throw r3;

     label6:
        $r9 := @caughtexception;

        exitmonitor $r5;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.RuntimeException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }
    public void beginTransaction()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,int)>(null, 2);

        return;
    }
    public void beginTransactionDeferred()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,int)>(null, 0);

        return;
    }
    public void beginTransactionNonExclusive()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,int)>(null, 1);

        return;
    }
    public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,int)>($r1, 2);

        return;
    }
    public void beginTransactionWithListenerDeferred(android.database.sqlite.SQLiteTransactionListener)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,int)>($r1, 0);

        return;
    }
    public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,int)>($r1, 1);

        return;
    }
    public io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String) throws android.database.SQLException
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        io.requery.android.database.sqlite.SQLiteStatement $r2;
        java.lang.Throwable $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = new io.requery.android.database.sqlite.SQLiteStatement;

        specialinvoke $r2.<io.requery.android.database.sqlite.SQLiteStatement: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r1, null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    io.requery.android.database.sqlite.SQLiteSession createSession()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteConnectionPool r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteSession $r3;
        java.lang.Throwable $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        exitmonitor $r2;

     label2:
        $r3 = new io.requery.android.database.sqlite.SQLiteSession;

        specialinvoke $r3.<io.requery.android.database.sqlite.SQLiteSession: void <init>(io.requery.android.database.sqlite.SQLiteConnectionPool)>(r1);

        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor $r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    public int delete(java.lang.String, java.lang.String, java.lang.String[])
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r2;
        java.lang.String[] $r3;
        io.requery.android.database.sqlite.SQLiteStatement r4;
        java.lang.StringBuilder $r5, $r6;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r7, $r8;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        r4 = new io.requery.android.database.sqlite.SQLiteStatement;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

     label02:
        if $z0 != 0 goto label08;

     label03:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<io.requery.android.database.sqlite.SQLiteStatement: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r1, $r3);

     label05:
        $i0 = virtualinvoke r4.<io.requery.android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label06:
        virtualinvoke r4.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

     label07:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $i0;

     label08:
        $r1 = "";

        goto label04;

     label09:
        $r7 := @caughtexception;

     label10:
        virtualinvoke r4.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

        throw $r7;

     label11:
        $r8 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
    }
    public void disableWriteAheadLogging()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.RuntimeException r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        int $i0;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r4;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label01:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & 536870912;

        if $i0 != 0 goto label03;

        exitmonitor $r2;

     label02:
        return;

     label03:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & -536870913;

        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i0;

     label04:
        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r3);

     label05:
        exitmonitor $r2;

     label06:
        return;

     label07:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label08:
        throw $r5;

     label09:
        r1 := @caughtexception;

     label10:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 | 536870912;

        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i0;

        throw r1;

     label11:
        nop;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }
    void enableLocalizedCollators()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteConnectionPool: void enableLocalizedCollators()>();

        return;
    }
    public boolean enableWriteAheadLogging()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.RuntimeException r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        int $i0;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r4;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label01:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & 536870912;

        if $i0 == 0 goto label03;

        exitmonitor $r2;

     label02:
        return 1;

     label03:
        $z0 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        if $z0 == 0 goto label05;

        exitmonitor $r2;

     label04:
        return 0;

     label05:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z0 = virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 == 0 goto label07;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SQLiteDatabase", "can\'t enable WAL for memory databases.");

        exitmonitor $r2;

     label06:
        return 0;

     label07:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 | 536870912;

        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i0;

     label08:
        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r3);

     label09:
        exitmonitor $r2;

     label10:
        return 1;

     label11:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r5;

     label13:
        r1 := @caughtexception;

     label14:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & -536870913;

        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i0;

        throw r1;

     label15:
        nop;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.RuntimeException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label14 to label15 with label11;
    }
    public void endTransaction()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteSession $r1;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession getThreadSession()>();

        virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteSession: void endTransaction(android.support.v4.os.CancellationSignal)>(null);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void execSQL(java.lang.String) throws android.database.SQLException
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])>($r1, null);

        return;
    }
    public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty bindArgs");

        throw $r3;

     label1:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])>($r1, $r2);

        return;
    }
    protected void finalize() throws java.lang.Throwable
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable $r1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

     label1:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r1 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.util.List getAttachedDbs()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.util.ArrayList r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r3;
        android.database.Cursor r4, $r5;
        boolean $z0;
        android.util.Pair $r6;
        java.lang.String $r7, $r8;
        java.lang.Throwable $r9, $r10, $r11;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label01:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r3 != null goto label03;

        exitmonitor $r2;

     label02:
        return null;

     label03:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

        exitmonitor $r2;

     label04:
        r4 = null;

     label05:
        $r5 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>("pragma database_list;", null);

     label06:
        r4 = $r5;

     label07:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label08:
        if $z0 == 0 goto label18;

     label09:
        $r6 = new android.util.Pair;

        $r7 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r8 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(2);

        specialinvoke $r6.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r7, $r8);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label10:
        goto label07;

     label11:
        $r9 := @caughtexception;

        if r4 == null goto label13;

     label12:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

     label13:
        throw $r9;

     label14:
        $r10 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r10;

     label15:
        $r11 := @caughtexception;

     label16:
        exitmonitor $r2;

     label17:
        throw $r11;

     label18:
        if $r5 == null goto label20;

     label19:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

     label20:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return r1;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label14 with label14;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label19 to label20 with label14;
    }
    java.lang.String getLabel()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object $r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r4 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        exitmonitor $r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public long getMaximumSize()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        long $l0, $l1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: long longForQuery(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA max_page_count;", null);

        $l1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        $l0 = $l1 * $l0;

        return $l0;
    }
    public long getPageSize()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        long $l0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: long longForQuery(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA page_size;", null);

        return $l0;
    }
    public final java.lang.String getPath()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object $r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r4 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        exitmonitor $r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    int getThreadDefaultConnectionFlags(boolean)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;
        byte b0;
        int i1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        b0 = 1;

     label1:
        $z0 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: boolean isMainThread()>();

        if $z0 == 0 goto label3;

        i1 = b0 | 4;

        return i1;

     label2:
        b0 = 2;

        goto label1;

     label3:
        return b0;
    }
    io.requery.android.database.sqlite.SQLiteSession getThreadSession()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object $r1;
        java.lang.ThreadLocal $r2;
        io.requery.android.database.sqlite.SQLiteSession $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.ThreadLocal mThreadSession>;

        $r1 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (io.requery.android.database.sqlite.SQLiteSession) $r1;

        return $r3;
    }
    public int getVersion()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        long $l0;
        java.lang.Long $r1;
        int $i1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: long longForQuery(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA user_version;", null);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $i1 = virtualinvoke $r1.<java.lang.Long: int intValue()>();

        return $i1;
    }
    public boolean inTransaction()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteSession $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession getThreadSession()>();

        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteSession: boolean hasTransaction()>();

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $z0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public long insert(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        android.database.SQLException r4;
        long $l0;
        java.lang.StringBuilder $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

     label1:
        $l0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>($r1, $r2, $r3, 0);

     label2:
        return $l0;

     label3:
        r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r1, r4);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }
    public long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        long $l0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

        $l0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>($r1, $r2, $r3, 0);

        return $l0;
    }
    public long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r2, $r7;
        android.content.ContentValues $r3;
        int $i0, i1;
        java.lang.StringBuilder r4, $r13;
        io.requery.android.database.sqlite.SQLiteStatement r5;
        java.lang.String[] $r6;
        java.lang.Object[] r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        java.util.Map$Entry r12;
        long $l2;
        java.lang.Throwable $r14, $r15;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

        $i0 := @parameter3: int;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT");

        $r6 = <io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES>;

        $r7 = $r6[$i0];

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTO ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label02:
        r8 = null;

        if $r3 == null goto label16;

     label03:
        $i0 = virtualinvoke $r3.<android.content.ContentValues: int size()>();

     label04:
        if $i0 <= 0 goto label16;

     label05:
        $i0 = virtualinvoke $r3.<android.content.ContentValues: int size()>();

     label06:
        if $i0 <= 0 goto label24;

     label07:
        r8 = newarray (java.lang.Object)[$i0];

        $r9 = virtualinvoke $r3.<android.content.ContentValues: java.util.Set valueSet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        i1 = 0;

     label09:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label10:
        if $z0 == 0 goto label18;

     label11:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

     label12:
        if i1 <= 0 goto label17;

        $r1 = ",";

     label13:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r11;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label14:
        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8[i1] = $r11;

     label15:
        i1 = i1 + 1;

        goto label09;

     label16:
        $i0 = 0;

        goto label06;

     label17:
        $r1 = "";

        goto label13;

     label18:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" VALUES (");

     label19:
        i1 = 0;

     label20:
        if i1 >= $i0 goto label25;

        if i1 <= 0 goto label23;

        $r1 = ",?";

     label21:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label22:
        i1 = i1 + 1;

        goto label20;

     label23:
        $r1 = "?";

        goto label21;

     label24:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") VALUES (NULL");

        $r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label25:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        r5 = new io.requery.android.database.sqlite.SQLiteStatement;

        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<io.requery.android.database.sqlite.SQLiteStatement: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r1, r8);

     label26:
        $l2 = virtualinvoke r5.<io.requery.android.database.sqlite.SQLiteStatement: long executeInsert()>();

     label27:
        virtualinvoke r5.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

     label28:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $l2;

     label29:
        $r14 := @caughtexception;

     label30:
        virtualinvoke r5.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

        throw $r14;

     label31:
        $r15 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label31;
        catch java.lang.Throwable from label03 to label04 with label31;
        catch java.lang.Throwable from label05 to label06 with label31;
        catch java.lang.Throwable from label07 to label08 with label31;
        catch java.lang.Throwable from label09 to label10 with label31;
        catch java.lang.Throwable from label11 to label12 with label31;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.lang.Throwable from label14 to label15 with label31;
        catch java.lang.Throwable from label18 to label19 with label31;
        catch java.lang.Throwable from label21 to label22 with label31;
        catch java.lang.Throwable from label24 to label26 with label31;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label27 to label28 with label31;
        catch java.lang.Throwable from label30 to label31 with label31;
    }
    public boolean isDatabaseIntegrityOk()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteException r1;
        java.util.List $r2, r3;
        java.lang.StringBuilder $r5, $r15;
        java.lang.String $r6, $r12;
        android.util.Pair $r7, $r18;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        io.requery.android.database.sqlite.SQLiteStatement r10, $r11;
        java.lang.Throwable $r13, $r14;
        java.lang.IllegalStateException $r16;
        java.util.ArrayList $r17;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>();

     label02:
        r3 = $r2;

        if $r2 != null goto label12;

     label03:
        $r16 = new java.lang.IllegalStateException;

     label04:
        $r15 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("databaselist for: ");

        $r6 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" couldn\'t be retrieved. probably because the database is closed");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

     label06:
        throw $r16;

     label07:
        r1 := @caughtexception;

     label08:
        $r17 = new java.util.ArrayList;

     label09:
        r3 = $r17;

     label10:
        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = new android.util.Pair;

     label11:
        $r6 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        specialinvoke $r18.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("main", $r6);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r18);

     label12:
        $r8 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label14:
        if $z0 == 0 goto label34;

     label15:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.util.Pair) $r9;

     label16:
        r10 = null;

     label17:
        $r15 = new java.lang.StringBuilder;

     label18:
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

        $r9 = $r7.<android.util.Pair: java.lang.Object first>;

        $r6 = (java.lang.String) $r9;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".integrity_check(1);");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r6);

     label19:
        r10 = $r11;

     label20:
        $r6 = virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ok");

     label21:
        if $z0 != 0 goto label27;

     label22:
        $r15 = new java.lang.StringBuilder;

     label23:
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA integrity_check on ");

        $r9 = $r7.<android.util.Pair: java.lang.Object second>;

        $r12 = (java.lang.String) $r9;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SQLiteDatabase", $r6);

     label24:
        if $r11 == null goto label26;

     label25:
        virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

     label26:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return 0;

     label27:
        if $r11 == null goto label13;

     label28:
        virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

     label29:
        goto label13;

     label30:
        $r13 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r13;

     label31:
        $r14 := @caughtexception;

        if r10 == null goto label33;

     label32:
        virtualinvoke r10.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

     label33:
        throw $r14;

     label34:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return 1;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label07;
        catch android.database.sqlite.SQLiteException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label04 to label05 with label30;
        catch java.lang.Throwable from label05 to label07 with label30;
        catch java.lang.Throwable from label08 to label09 with label30;
        catch java.lang.Throwable from label10 to label11 with label30;
        catch java.lang.Throwable from label11 to label14 with label30;
        catch java.lang.Throwable from label15 to label16 with label30;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch java.lang.Throwable from label18 to label19 with label31;
        catch java.lang.Throwable from label20 to label21 with label31;
        catch java.lang.Throwable from label22 to label23 with label31;
        catch java.lang.Throwable from label23 to label24 with label31;
        catch java.lang.Throwable from label25 to label26 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label32 to label34 with label30;
    }
    public boolean isDbLockedByCurrentThread()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteSession $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession getThreadSession()>();

        $z0 = virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteSession: boolean hasConnection()>();

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $z0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean isInMemoryDatabase()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object $r1;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        java.lang.Throwable $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z0 = virtualinvoke $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public boolean isOpen()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object $r1;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r2 == null goto label4;

        $z0 = 1;

     label2:
        exitmonitor $r1;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }
    public boolean isReadOnly()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $z0 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public boolean isWriteAheadLoggingEnabled()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object $r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i0 = $i0 & 536870912;

        if $i0 == 0 goto label4;

        $z0 = 1;

     label2:
        exitmonitor $r1;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }
    public boolean needUpgrade(int)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        int $i0, $i1;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void onAllReferencesReleased()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void dispose(boolean)>(0);

        return;
    }
    void onCorruption()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        io.requery.android.database.DatabaseErrorHandler $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(75004, $r1);

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.DatabaseErrorHandler mErrorHandler>;

        interfaceinvoke $r2.<io.requery.android.database.DatabaseErrorHandler: void onCorruption(io.requery.android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }
    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.Object[], java.lang.String, java.lang.String, java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r3, $r5, $r6, $r7;
        java.lang.String[] $r2;
        java.lang.Object[] $r4;
        android.database.Cursor $r8;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.Object[];

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, null);

        return $r8;
    }
    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.Object[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r3, $r5, $r6, $r7, $r8;
        java.lang.String[] $r2;
        java.lang.Object[] $r4;
        android.database.Cursor $r9;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.Object[];

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.String;

        $r8 := @parameter7: java.lang.String;

        $r9 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8);

        return $r9;
    }
    public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.Object[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;
        java.lang.String $r1, $r3, $r5, $r6, $r7, $r8;
        java.lang.String[] $r2;
        java.lang.Object[] $r4;
        android.database.Cursor $r9;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.Object[];

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: java.lang.String;

        $r7 := @parameter7: java.lang.String;

        $r8 := @parameter8: java.lang.String;

        $r9 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.support.v4.os.CancellationSignal)>(null, $z0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, null);

        return $r9;
    }
    public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.Object[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;
        java.lang.String $r1, $r3, $r5, $r6, $r7, $r8;
        java.lang.String[] $r2;
        java.lang.Object[] $r4;
        android.support.v4.os.CancellationSignal $r9;
        android.database.Cursor $r10;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.Object[];

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: java.lang.String;

        $r7 := @parameter7: java.lang.String;

        $r8 := @parameter8: java.lang.String;

        $r9 := @parameter9: android.support.v4.os.CancellationSignal;

        $r10 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.support.v4.os.CancellationSignal)>(null, $z0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9);

        return $r10;
    }
    public android.database.Cursor queryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.Object[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        boolean $z0;
        java.lang.String $r2, $r4, $r6, $r7, $r8, $r9;
        java.lang.String[] $r3;
        java.lang.Object[] $r5;
        android.database.Cursor $r10;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.Object[];

        $r6 := @parameter6: java.lang.String;

        $r7 := @parameter7: java.lang.String;

        $r8 := @parameter8: java.lang.String;

        $r9 := @parameter9: java.lang.String;

        $r10 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.support.v4.os.CancellationSignal)>($r1, $z0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, null);

        return $r10;
    }
    public android.database.Cursor queryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.Object[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        boolean $z0;
        java.lang.String $r2, $r4, $r6, $r7, $r8, $r9;
        java.lang.String[] $r3;
        java.lang.Object[] $r5;
        android.support.v4.os.CancellationSignal $r10;
        android.database.Cursor $r11;
        java.lang.Throwable $r12;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.Object[];

        $r6 := @parameter6: java.lang.String;

        $r7 := @parameter7: java.lang.String;

        $r8 := @parameter8: java.lang.String;

        $r9 := @parameter9: java.lang.String;

        $r10 := @parameter10: android.support.v4.os.CancellationSignal;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r4 = staticinvoke <io.requery.android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($z0, $r2, $r3, $r4, $r6, $r7, $r8, $r9);

        $r2 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r2);

        $r11 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.Object[],java.lang.String,android.support.v4.os.CancellationSignal)>($r1, $r4, $r5, $r2, $r10);

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $r11;

     label3:
        $r12 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public android.database.Cursor rawQuery(java.lang.String, java.lang.Object[])
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.database.Cursor $r3;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.Object[],java.lang.String,android.support.v4.os.CancellationSignal)>(null, $r1, $r2, null, null);

        return $r3;
    }
    public android.database.Cursor rawQuery(java.lang.String, java.lang.Object[], android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r3;
        android.database.Cursor $r4;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: android.support.v4.os.CancellationSignal;

        $r4 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.Object[],java.lang.String,android.support.v4.os.CancellationSignal)>(null, $r1, $r2, null, $r3);

        return $r4;
    }
    public android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.Object[], java.lang.String)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        java.lang.String $r2, $r4;
        java.lang.Object[] $r3;
        android.database.Cursor $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        $r4 := @parameter3: java.lang.String;

        $r5 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.Object[],java.lang.String,android.support.v4.os.CancellationSignal)>($r1, $r2, $r3, $r4, null);

        return $r5;
    }
    public android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.Object[], java.lang.String, android.support.v4.os.CancellationSignal)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r3;
        java.lang.Object[] $r2;
        android.support.v4.os.CancellationSignal $r4;
        io.requery.android.database.sqlite.SQLiteDirectCursorDriver r5;
        android.database.Cursor $r6;
        io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory r7;
        java.lang.Throwable $r8;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        r7 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: android.support.v4.os.CancellationSignal;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        r5 = new io.requery.android.database.sqlite.SQLiteDirectCursorDriver;

        specialinvoke r5.<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.support.v4.os.CancellationSignal)>(r0, $r1, $r3, $r4);

     label2:
        if r7 == null goto label5;

     label3:
        $r6 = interfaceinvoke r5.<io.requery.android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.Object[])>(r7, $r2);

     label4:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $r6;

     label5:
        r7 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory>;

     label6:
        goto label3;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
    public void reopenReadWrite()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.RuntimeException r1;
        int i0, $i1;
        java.lang.Object $r2;
        boolean $z0;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r3, $r4;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r5;
        java.lang.Throwable $r6;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label01:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $z0 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor $r2;

     label02:
        return;

     label03:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i0 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i1 = $r4.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i1 & -2;

        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i1;

     label04:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r3);

     label05:
        exitmonitor $r2;

     label06:
        return;

     label07:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label08:
        throw $r6;

     label09:
        r1 := @caughtexception;

     label10:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = i0;

        throw r1;

     label11:
        nop;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }
    public long replace(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        android.database.SQLException r4;
        long $l0;
        java.lang.StringBuilder $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

     label1:
        $l0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>($r1, $r2, $r3, 5);

     label2:
        return $l0;

     label3:
        r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r1, r4);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }
    public long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        long $l0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

        $l0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>($r1, $r2, $r3, 5);

        return $l0;
    }
    public void setForeignKeyConstraintsEnabled(boolean)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        boolean $z0, $z1;
        java.lang.RuntimeException r1;
        java.lang.Object $r2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r4;
        java.lang.Throwable $r5;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r2;

     label01:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z1 = $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z1 != $z0 goto label03;

        exitmonitor $r2;

     label02:
        return;

     label03:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled> = $z0;

     label04:
        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r3);

     label05:
        exitmonitor $r2;

     label06:
        return;

     label07:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label08:
        throw $r5;

     label09:
        r1 := @caughtexception;

     label10:
        $r3 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        if $z0 != 0 goto label12;

        $z0 = 1;

     label11:
        $r3.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled> = $z0;

        throw r1;

     label12:
        $z0 = 0;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label12 with label07;
    }
    public void setLocale(java.util.Locale)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.util.Locale $r1, r3;
        java.lang.RuntimeException r2;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object $r6;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r7;
        java.lang.Throwable $r8;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.util.Locale;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("locale must not be null.");

        throw $r5;

     label1:
        $r6 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r6;

     label2:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r3 = $r4.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r4.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = $r1;

     label3:
        $r7 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r4);

     label4:
        exitmonitor $r6;

     label5:
        return;

     label6:
        r2 := @caughtexception;

        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r4.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = r3;

        throw r2;

     label7:
        $r8 := @caughtexception;

        exitmonitor $r6;

     label8:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label8 with label7;
    }
    public void setMaxSqlCacheSize(int)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        int $i0, i1;
        java.lang.RuntimeException r1;
        io.requery.android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        java.lang.IllegalStateException $r3;
        java.lang.Object $r4;
        io.requery.android.database.sqlite.SQLiteConnectionPool $r5;
        java.lang.Throwable $r6;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter0: int;

        if $i0 > 100 goto label1;

        if $i0 >= 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("expected value between 0 and 100");

        throw $r3;

     label2:
        $r4 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor $r4;

     label3:
        specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i1 = $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = $i0;

     label4:
        $r5 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)>($r2);

     label5:
        exitmonitor $r4;

     label6:
        return;

     label7:
        r1 := @caughtexception;

        $r2 = r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r2.<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = i1;

        throw r1;

     label8:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label9:
        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.RuntimeException from label4 to label5 with label7;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label7 to label9 with label8;
    }
    public long setMaximumSize(long)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        long $l0, $l1, l2;
        byte $b3;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        l2 = $l0 / $l1;

        $l0 = $l0 % $l1;

        $b3 = $l0 cmp 0L;

        if $b3 == 0 goto label1;

        l2 = l2 + 1L;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA max_page_count = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $l0 = staticinvoke <io.requery.android.database.sqlite.SQLiteDatabase: long longForQuery(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, $r2, null);

        $l0 = $l0 * $l1;

        return $l0;
    }
    public void setPageSize(long)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        long $l0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA page_size = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        return;
    }
    public void setTransactionSuccessful()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        io.requery.android.database.sqlite.SQLiteSession $r1;
        java.lang.Throwable $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession getThreadSession()>();

        virtualinvoke $r1.<io.requery.android.database.sqlite.SQLiteSession: void setTransactionSuccessful()>();

     label2:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setVersion(int)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA user_version = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        return;
    }
    public java.lang.String toString()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteDatabase: ");

        $r2 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r3;
        android.content.ContentValues $r2;
        java.lang.String[] $r4;
        int $i0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.ContentValues;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $i0 = virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>($r1, $r2, $r3, $r4, 0);

        return $i0;
    }
    public int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1, $r3, $r10;
        android.content.ContentValues $r2;
        java.lang.String[] $r4, $r9;
        int $i0, $i1, i2, i3;
        java.lang.Object[] r5;
        java.lang.StringBuilder r6;
        io.requery.android.database.sqlite.SQLiteStatement r7;
        java.lang.IllegalArgumentException $r8;
        java.util.Set $r11;
        java.util.Iterator $r12;
        boolean $z0;
        java.lang.Object $r13;
        java.util.Map$Entry r14;
        java.lang.Throwable $r15, $r16;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.ContentValues;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $i0 := @parameter4: int;

        if $r2 == null goto label01;

        $i1 = virtualinvoke $r2.<android.content.ContentValues: int size()>();

        if $i1 != 0 goto label02;

     label01:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty values");

        throw $r8;

     label02:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label03:
        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r9 = <io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES>;

        $r10 = $r9[$i0];

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        $i0 = virtualinvoke $r2.<android.content.ContentValues: int size()>();

     label04:
        if $r4 != null goto label14;

        $i1 = $i0;

     label05:
        r5 = newarray (java.lang.Object)[$i1];

        $r11 = virtualinvoke $r2.<android.content.ContentValues: java.util.Set valueSet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        i2 = 0;

     label07:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

     label08:
        if $z0 == 0 goto label17;

     label09:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r13;

     label10:
        if i2 <= 0 goto label16;

        $r1 = ",";

     label11:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r13 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r13;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label12:
        $r13 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5[i2] = $r13;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

     label13:
        i2 = i2 + 1;

        goto label07;

     label14:
        $i1 = lengthof $r4;

     label15:
        $i1 = $i0 + $i1;

        goto label05;

     label16:
        $r1 = "";

        goto label11;

     label17:
        if $r4 == null goto label21;

        i2 = $i0;

     label18:
        if i2 >= $i1 goto label21;

        i3 = i2 - $i0;

     label19:
        $r1 = $r4[i3];

        r5[i2] = $r1;

     label20:
        i2 = i2 + 1;

        goto label18;

     label21:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

     label22:
        if $z0 != 0 goto label24;

     label23:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label24:
        r7 = new io.requery.android.database.sqlite.SQLiteStatement;

        $r1 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<io.requery.android.database.sqlite.SQLiteStatement: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r1, r5);

     label25:
        $i0 = virtualinvoke r7.<io.requery.android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label26:
        virtualinvoke r7.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

     label27:
        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $i0;

     label28:
        $r15 := @caughtexception;

     label29:
        virtualinvoke r7.<io.requery.android.database.sqlite.SQLiteStatement: void close()>();

        throw $r15;

     label30:
        $r16 := @caughtexception;

        virtualinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r16;

        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.lang.Throwable from label11 to label12 with label30;
        catch java.lang.Throwable from label12 to label13 with label30;
        catch java.lang.Throwable from label14 to label15 with label30;
        catch java.lang.Throwable from label19 to label20 with label30;
        catch java.lang.Throwable from label21 to label22 with label30;
        catch java.lang.Throwable from label23 to label25 with label30;
        catch java.lang.Throwable from label25 to label26 with label28;
        catch java.lang.Throwable from label26 to label27 with label30;
        catch java.lang.Throwable from label29 to label30 with label30;
    }
    public boolean yieldIfContendedSafely()
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $z0 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(1, -1L);

        return $z0;
    }
    public boolean yieldIfContendedSafely(long)
    {
        io.requery.android.database.sqlite.SQLiteDatabase r0;
        long $l0;
        boolean $z0;

        r0 := @this: io.requery.android.database.sqlite.SQLiteDatabase;

        $l0 := @parameter0: long;

        $z0 = specialinvoke r0.<io.requery.android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(1, $l0);

        return $z0;
    }
