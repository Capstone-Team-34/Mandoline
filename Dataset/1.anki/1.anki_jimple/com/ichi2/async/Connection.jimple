com.ichi2.async.Connection extends com.ichi2.async.BaseAsyncTask
public static final int CONN_TIMEOUT
public static final int TASK_TYPE_LOGIN
public static final int TASK_TYPE_SYNC
private static com.ichi2.async.Connection sInstance
private static boolean sIsCancellable
private static boolean sIsCancelled
private com.ichi2.async.Connection$TaskListener mListener
private final android.os.PowerManager$WakeLock mWakeLock
    public void <init>()
    {
        com.ichi2.async.Connection r0;
        com.ichi2.anki.AnkiDroidApp $r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.os.PowerManager r4;
        android.os.PowerManager$WakeLock $r5;

        r0 := @this: com.ichi2.async.Connection;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void <init>()>();

        <com.ichi2.async.Connection: boolean sIsCancelled> = 0;

        <com.ichi2.async.Connection: boolean sIsCancellable> = 0;

        $r1 = staticinvoke <com.ichi2.anki.AnkiDroidApp: com.ichi2.anki.AnkiDroidApp getInstance()>();

        $r2 = virtualinvoke $r1.<com.ichi2.anki.AnkiDroidApp: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r4 = (android.os.PowerManager) $r3;

        $r5 = virtualinvoke r4.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "Connection");

        r0.<com.ichi2.async.Connection: android.os.PowerManager$WakeLock mWakeLock> = $r5;

        return;
    }
    public static void cancel()
    {
        java.lang.Object[] $r0;
        com.ichi2.async.Connection $r1;
        java.lang.Throwable $r2;

        entermonitor class "Lcom/ichi2/async/Connection;";

     label1:
        $r0 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Cancelled Connection task", $r0);

        $r1 = <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance>;

        virtualinvoke $r1.<com.ichi2.async.Connection: boolean cancel(boolean)>(1);

        <com.ichi2.async.Connection: boolean sIsCancelled> = 1;

     label2:
        exitmonitor class "Lcom/ichi2/async/Connection;";

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor class "Lcom/ichi2/async/Connection;";

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    private com.ichi2.async.Connection$Payload doInBackgroundLogin(com.ichi2.async.Connection$Payload)
    {
        com.ichi2.async.Connection r0;
        com.ichi2.async.Connection$Payload $r1;
        java.lang.Exception r2, r18;
        org.json.JSONObject r3;
        com.ichi2.libanki.sync.RemoteServer r4;
        java.lang.Object[] $r5;
        java.lang.Object r6;
        java.lang.String r7, r8, $r12;
        org.apache.http.HttpResponse $r9;
        boolean z0;
        org.apache.http.StatusLine $r10;
        int $i0;
        java.lang.Integer $r11;
        org.apache.http.HttpEntity $r13;
        java.io.InputStream $r14;
        java.lang.String[] $r15;
        com.ichi2.anki.exception.UnknownHttpResponseException r16;
        org.json.JSONException r17;
        java.lang.RuntimeException $r19;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: com.ichi2.async.Connection$Payload;

        $r5 = $r1.<com.ichi2.async.Connection$Payload: java.lang.Object[] data>;

        r6 = $r5[0];

        r7 = (java.lang.String) r6;

        $r5 = $r1.<com.ichi2.async.Connection$Payload: java.lang.Object[] data>;

        r6 = $r5[1];

        r8 = (java.lang.String) r6;

        r4 = new com.ichi2.libanki.sync.RemoteServer;

        specialinvoke r4.<com.ichi2.libanki.sync.RemoteServer: void <init>(com.ichi2.async.Connection,java.lang.String)>(r0, null);

     label01:
        $r9 = virtualinvoke r4.<com.ichi2.libanki.sync.HttpSyncer: org.apache.http.HttpResponse hostKey(java.lang.String,java.lang.String)>(r7, r8);

     label02:
        r8 = null;

        z0 = 0;

        if $r9 == null goto label15;

        $r10 = interfaceinvoke $r9.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r10.<org.apache.http.StatusLine: int getStatusCode()>();

        $r1.<com.ichi2.async.Connection$Payload: int returnType> = $i0;

        $r5 = newarray (java.lang.Object)[2];

        $i0 = $r1.<com.ichi2.async.Connection$Payload: int returnType>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r11;

        $r10 = interfaceinvoke $r9.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r12 = interfaceinvoke $r10.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>();

        $r5[1] = $r12;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundLogin - response from server: %d, (%s)", $r5);

        $i0 = $r1.<com.ichi2.async.Connection$Payload: int returnType>;

        if $i0 != 200 goto label07;

        r3 = new org.json.JSONObject;

     label03:
        $r13 = interfaceinvoke $r9.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $r14 = interfaceinvoke $r13.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        $r12 = virtualinvoke r4.<com.ichi2.libanki.sync.HttpSyncer: java.lang.String stream2String(java.io.InputStream)>($r14);

        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>($r12);

        $r12 = virtualinvoke r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("key");

     label04:
        r8 = $r12;

        if $r12 == null goto label11;

     label05:
        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

     label06:
        if $i0 <= 0 goto label11;

        z0 = 1;

     label07:
        if z0 == 0 goto label16;

        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 1;

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = r7;

        $r15[1] = r8;

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object[] data> = $r15;

        return $r1;

     label08:
        r16 := @caughtexception;

        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "error";

        $i0 = virtualinvoke r16.<com.ichi2.anki.exception.UnknownHttpResponseException: int getResponseCode()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r11;

        r7 = virtualinvoke r16.<com.ichi2.anki.exception.UnknownHttpResponseException: java.lang.String getMessage()>();

        $r5[2] = r7;

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

        return $r1;

     label09:
        r2 := @caughtexception;

        z0 = specialinvoke r0.<com.ichi2.async.Connection: boolean timeoutOccured(java.lang.Exception)>(r2);

        if z0 != 0 goto label10;

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r2, "doInBackgroundLogin");

     label10:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "connectionError";

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

        return $r1;

     label11:
        z0 = 0;

        goto label07;

     label12:
        r17 := @caughtexception;

        z0 = 0;

        goto label07;

     label13:
        r18 := @caughtexception;

     label14:
        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r18);

        throw $r19;

     label15:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackgroundLogin - empty response from server", $r5);

        goto label07;

     label16:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        return $r1;

     label17:
        r18 := @caughtexception;

        goto label14;

        catch com.ichi2.anki.exception.UnknownHttpResponseException from label01 to label02 with label08;
        catch java.lang.Exception from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label12;
        catch org.json.JSONException from label05 to label06 with label12;
        catch java.lang.IllegalStateException from label03 to label04 with label13;
        catch java.lang.IllegalStateException from label05 to label06 with label13;
        catch java.io.IOException from label03 to label04 with label17;
        catch java.io.IOException from label05 to label06 with label17;
    }
    private com.ichi2.async.Connection$Payload doInBackgroundSync(com.ichi2.async.Connection$Payload)
    {
        com.ichi2.async.Connection r0;
        com.ichi2.async.Connection$Payload $r1;
        com.ichi2.libanki.sync.Syncer r2;
        com.ichi2.libanki.sync.MediaSyncer r3;
        com.ichi2.libanki.sync.FullSyncer r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        boolean $z0, $z1, z2, $z3;
        java.lang.Object r7;
        java.lang.String r8, r10, $r15;
        java.lang.Boolean $r9;
        com.ichi2.anki.CollectionHelper $r11;
        com.ichi2.anki.AnkiDroidApp $r12;
        com.ichi2.libanki.Collection $r13;
        com.ichi2.libanki.sync.RemoteServer r14;
        com.ichi2.libanki.sync.RemoteMediaServer r16;
        android.content.res.Resources $r17;
        java.lang.OutOfMemoryError r18;
        java.lang.RuntimeException r19, r22;
        com.ichi2.anki.exception.MediaSyncException r20;
        com.ichi2.anki.exception.UnknownHttpResponseException r21;
        int $i0;
        java.lang.Exception r23;
        java.lang.Throwable $r24;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: com.ichi2.async.Connection$Payload;

        <com.ichi2.async.Connection: boolean sIsCancellable> = 1;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundSync()", $r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $z0 = staticinvoke <com.ichi2.async.DeckTask: boolean waitToFinish(java.lang.Integer)>($r6);

        $r5 = $r1.<com.ichi2.async.Connection$Payload: java.lang.Object[] data>;

        r7 = $r5[0];

        r8 = (java.lang.String) r7;

        $r5 = $r1.<com.ichi2.async.Connection$Payload: java.lang.Object[] data>;

        r7 = $r5[1];

        $r9 = (java.lang.Boolean) r7;

        $z1 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        $r5 = $r1.<com.ichi2.async.Connection$Payload: java.lang.Object[] data>;

        r7 = $r5[2];

        r10 = (java.lang.String) r7;

        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r12 = staticinvoke <com.ichi2.anki.AnkiDroidApp: com.ichi2.anki.AnkiDroidApp getInstance()>();

        $r13 = virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getColSafe(android.content.Context)>($r12);

        z2 = 0;

        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $z3 = virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: boolean colIsOpen()>();

        if $z3 == 0 goto label001;

        if $z0 != 0 goto label002;

     label001:
        if r10 == null goto label017;

        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("download");

        if $z0 == 0 goto label017;

        z2 = 1;

     label002:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void lockCollection()>();

     label003:
        r14 = new com.ichi2.libanki.sync.RemoteServer;

     label004:
        specialinvoke r14.<com.ichi2.libanki.sync.RemoteServer: void <init>(com.ichi2.async.Connection,java.lang.String)>(r0, r8);

     label005:
        r2 = new com.ichi2.libanki.sync.Syncer;

     label006:
        specialinvoke r2.<com.ichi2.libanki.sync.Syncer: void <init>(com.ichi2.libanki.Collection,com.ichi2.libanki.sync.HttpSyncer)>($r13, r14);

     label007:
        $z0 = 0;

        if r10 != null goto label050;

     label008:
        $r5 = newarray (java.lang.Object)[0];

     label009:
        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync - starting sync", $r5);

        virtualinvoke r0.<com.ichi2.async.Connection: void publishProgress(int)>(2131231431);

        $r5 = virtualinvoke r2.<com.ichi2.libanki.sync.Syncer: java.lang.Object[] sync(com.ichi2.async.Connection)>(r0);

        $r15 = virtualinvoke r2.<com.ichi2.libanki.sync.Syncer: java.lang.String getSyncMsg()>();

     label010:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.String message> = $r15;

     label011:
        if $r5 != null goto label018;

     label012:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

     label013:
        $r5[0] = "genericError";

     label014:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label015:
        if $r13 == null goto label016;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label016:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label017:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "genericError";

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

        return $r1;

     label018:
        r7 = $r5[0];

     label019:
        $r15 = (java.lang.String) r7;

     label020:
        z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("noChanges");

     label021:
        if z2 != 0 goto label030;

     label022:
        z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("success");

     label023:
        if z2 != 0 goto label030;

     label024:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label025:
        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("sanityCheckError");

     label026:
        if $z1 == 0 goto label028;

     label027:
        virtualinvoke $r13.<com.ichi2.libanki.Collection: void modSchemaNoCheck()>();

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void save()>();

     label028:
        if $r13 == null goto label029;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label029:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label030:
        z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("noChanges");

     label031:
        if z2 == 0 goto label032;

        $z0 = 1;

     label032:
        if $z0 != 0 goto label034;

     label033:
        virtualinvoke $r13.<com.ichi2.libanki.Collection: void clearUndo()>();

     label034:
        <com.ichi2.async.Connection: boolean sIsCancellable> = 1;

     label035:
        z2 = 0;

        $r15 = null;

        if $z1 == 0 goto label044;

     label036:
        r16 = new com.ichi2.libanki.sync.RemoteMediaServer;

     label037:
        specialinvoke r16.<com.ichi2.libanki.sync.RemoteMediaServer: void <init>(com.ichi2.libanki.Collection,java.lang.String,com.ichi2.async.Connection)>($r13, r8, r0);

     label038:
        r3 = new com.ichi2.libanki.sync.MediaSyncer;

     label039:
        specialinvoke r3.<com.ichi2.libanki.sync.MediaSyncer: void <init>(com.ichi2.libanki.Collection,com.ichi2.libanki.sync.RemoteMediaServer,com.ichi2.async.Connection)>($r13, r16, r0);

     label040:
        r8 = virtualinvoke r3.<com.ichi2.libanki.sync.MediaSyncer: java.lang.String sync()>();

     label041:
        if r8 != null goto label127;

     label042:
        $r17 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.res.Resources getAppResources()>();

        r8 = virtualinvoke $r17.<android.content.res.Resources: java.lang.String getString(int)>(2131231423);

     label043:
        $r15 = r8;

     label044:
        if $z0 == 0 goto label161;

        if $z1 == 0 goto label045;

        if z2 == 0 goto label161;

     label045:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

     label046:
        $r5[0] = "noChanges";

     label047:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label048:
        if $r13 == null goto label049;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label049:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label050:
        <com.ichi2.async.Connection: boolean sIsCancellable> = 0;

        r4 = new com.ichi2.libanki.sync.FullSyncer;

     label051:
        specialinvoke r4.<com.ichi2.libanki.sync.FullSyncer: void <init>(com.ichi2.libanki.Collection,java.lang.String,com.ichi2.async.Connection)>($r13, r8, r0);

     label052:
        $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("upload");

     label053:
        if $z3 == 0 goto label068;

     label054:
        $r5 = newarray (java.lang.Object)[0];

     label055:
        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync - fullsync - upload collection", $r5);

        virtualinvoke r0.<com.ichi2.async.Connection: void publishProgress(int)>(2131231432);

        $r5 = virtualinvoke r4.<com.ichi2.libanki.sync.HttpSyncer: java.lang.Object[] upload()>();

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void reopen()>();

     label056:
        if $r5 != null goto label062;

     label057:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

     label058:
        $r5[0] = "genericError";

     label059:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label060:
        if $r13 == null goto label061;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label061:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label062:
        r7 = $r5[0];

     label063:
        z2 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>("OK");

     label064:
        if z2 != 0 goto label091;

     label065:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label066:
        if $r13 == null goto label067;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label067:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label068:
        $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("download");

     label069:
        if $z3 == 0 goto label091;

     label070:
        $r5 = newarray (java.lang.Object)[0];

     label071:
        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync - fullsync - download collection", $r5);

        virtualinvoke r0.<com.ichi2.async.Connection: void publishProgress(int)>(2131231406);

        $r5 = virtualinvoke r4.<com.ichi2.libanki.sync.HttpSyncer: java.lang.Object[] download()>();

     label072:
        if $r5 != null goto label078;

     label073:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

     label074:
        $r5[0] = "genericError";

     label075:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label076:
        if $r13 == null goto label077;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label077:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label078:
        r7 = $r5[0];

     label079:
        $z3 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>("success");

     label080:
        if $z3 == 0 goto label083;

     label081:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 1;

     label082:
        virtualinvoke $r13.<com.ichi2.libanki.Collection: void reopen()>();

     label083:
        r7 = $r5[0];

     label084:
        $z3 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>("success");

     label085:
        if $z3 != 0 goto label091;

     label086:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label087:
        if z2 != 0 goto label089;

     label088:
        virtualinvoke $r13.<com.ichi2.libanki.Collection: void reopen()>();

     label089:
        if $r13 == null goto label090;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label090:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label091:
        goto label032;

     label092:
        r18 := @caughtexception;

     label093:
        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r18, "doInBackgroundSync-fullSync");

     label094:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

     label095:
        $r5[0] = "OutOfMemoryError";

     label096:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label097:
        if $r13 == null goto label098;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label098:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label099:
        r19 := @caughtexception;

     label100:
        $z1 = specialinvoke r0.<com.ichi2.async.Connection: boolean timeoutOccured(java.lang.Exception)>(r19);

     label101:
        if $z1 == 0 goto label108;

     label102:
        $r5 = newarray (java.lang.Object)[1];

     label103:
        $r5[0] = "connectionError";

     label104:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label105:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

     label106:
        if $r13 == null goto label107;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label107:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label108:
        r10 = virtualinvoke r19.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("UserAbortedSync");

     label109:
        if $z1 == 0 goto label118;

     label110:
        $r5 = newarray (java.lang.Object)[1];

     label111:
        $r5[0] = "UserAbortedSync";

     label112:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label113:
        goto label105;

     label114:
        r20 := @caughtexception;

     label115:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Media sync rejected by server", $r5);

        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "mediaSyncServerError";

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r20, "doInBackgroundSync");

     label116:
        if $r13 == null goto label117;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label117:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label118:
        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r19, "doInBackgroundSync-fullSync");

     label119:
        $r5 = newarray (java.lang.Object)[1];

     label120:
        $r5[0] = "IOException";

     label121:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label122:
        goto label105;

     label123:
        r21 := @caughtexception;

     label124:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackgroundSync -- unknown response code error", $r5);

        virtualinvoke r21.<com.ichi2.anki.exception.UnknownHttpResponseException: void printStackTrace()>();

        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $i0 = virtualinvoke r21.<com.ichi2.anki.exception.UnknownHttpResponseException: int getResponseCode()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r10 = virtualinvoke r21.<com.ichi2.anki.exception.UnknownHttpResponseException: java.lang.String getLocalizedMessage()>();

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "error";

        $r5[1] = $r6;

        $r5[2] = r10;

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label125:
        if $r13 == null goto label126;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label126:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label127:
        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("noChanges");

     label128:
        if $z3 == 0 goto label131;

     label129:
        virtualinvoke r0.<com.ichi2.async.Connection: void publishProgress(int)>(2131231426);

     label130:
        z2 = 1;

     label131:
        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("sanityFailed");

     label132:
        if $z3 == 0 goto label135;

     label133:
        $r17 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.res.Resources getAppResources()>();

        r8 = virtualinvoke $r17.<android.content.res.Resources: java.lang.String getString(int)>(2131231427);

     label134:
        $r15 = r8;

        goto label044;

     label135:
        virtualinvoke r0.<com.ichi2.async.Connection: void publishProgress(int)>(2131231428);

     label136:
        goto label044;

     label137:
        r22 := @caughtexception;

     label138:
        $z3 = specialinvoke r0.<com.ichi2.async.Connection: boolean timeoutOccured(java.lang.Exception)>(r22);

     label139:
        if $z3 == 0 goto label145;

     label140:
        $r5 = newarray (java.lang.Object)[1];

     label141:
        $r5[0] = "connectionError";

     label142:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label143:
        r8 = virtualinvoke r22.<java.lang.RuntimeException: java.lang.String getLocalizedMessage()>();

     label144:
        $r15 = r8;

        goto label044;

     label145:
        r8 = virtualinvoke r22.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("UserAbortedSync");

     label146:
        if $z3 == 0 goto label157;

     label147:
        $r5 = newarray (java.lang.Object)[1];

     label148:
        $r5[0] = "UserAbortedSync";

     label149:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label150:
        goto label143;

     label151:
        r23 := @caughtexception;

     label152:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackgroundSync error", $r5);

        virtualinvoke r23.<java.lang.Exception: void printStackTrace()>();

        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        $z1 = specialinvoke r0.<com.ichi2.async.Connection: boolean timeoutOccured(java.lang.Exception)>(r23);

     label153:
        if $z1 == 0 goto label166;

     label154:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "connectionError";

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label155:
        if $r13 == null goto label156;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label156:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label157:
        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r22, "doInBackgroundSync-mediaSync");

     label158:
        goto label143;

     label159:
        $r24 := @caughtexception;

        if $r13 == null goto label160;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label160:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        throw $r24;

     label161:
        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 1;

        $r5 = newarray (java.lang.Object)[3];

     label162:
        $r5[0] = r10;

        $r5[1] = $r13;

        $r5[2] = $r15;

     label163:
        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object[] data> = $r5;

     label164:
        if $r13 == null goto label165;

        virtualinvoke $r13.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label165:
        $r11 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r11.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

        return $r1;

     label166:
        r10 = virtualinvoke r23.<java.lang.Exception: java.lang.String getMessage()>();

        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("UserAbortedSync");

     label167:
        if $z1 == 0 goto label170;

     label168:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "UserAbortedSync";

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label169:
        goto label155;

     label170:
        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r23, "doInBackgroundSync");

        $r5 = newarray (java.lang.Object)[1];

        r10 = virtualinvoke r23.<java.lang.Exception: java.lang.String getLocalizedMessage()>();

        $r5[0] = r10;

        $r1.<com.ichi2.async.Connection$Payload: java.lang.Object result> = $r5;

     label171:
        goto label155;

     label172:
        r19 := @caughtexception;

        goto label100;

     label173:
        r18 := @caughtexception;

        goto label093;

        catch com.ichi2.anki.exception.MediaSyncException from label002 to label003 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label004 to label005 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label006 to label007 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label009 to label010 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label002 to label003 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label004 to label005 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label006 to label007 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label009 to label010 with label123;
        catch java.lang.Exception from label002 to label003 with label151;
        catch java.lang.Exception from label004 to label005 with label151;
        catch java.lang.Exception from label006 to label007 with label151;
        catch java.lang.Exception from label008 to label011 with label151;
        catch java.lang.Exception from label012 to label015 with label151;
        catch java.lang.Throwable from label002 to label007 with label159;
        catch java.lang.Throwable from label008 to label011 with label159;
        catch java.lang.Throwable from label012 to label013 with label159;
        catch java.lang.Throwable from label014 to label015 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label020 to label021 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label022 to label023 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label025 to label026 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label027 to label028 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label020 to label021 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label022 to label023 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label025 to label026 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label027 to label028 with label123;
        catch java.lang.Exception from label018 to label021 with label151;
        catch java.lang.Exception from label022 to label023 with label151;
        catch java.lang.Exception from label024 to label026 with label151;
        catch java.lang.Exception from label027 to label028 with label151;
        catch java.lang.Throwable from label019 to label021 with label159;
        catch java.lang.Throwable from label022 to label023 with label159;
        catch java.lang.Throwable from label024 to label026 with label159;
        catch java.lang.Throwable from label027 to label028 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label030 to label031 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label033 to label034 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label037 to label038 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label039 to label040 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label030 to label031 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label033 to label034 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label037 to label038 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label039 to label040 with label123;
        catch java.lang.Exception from label030 to label031 with label151;
        catch java.lang.Exception from label033 to label034 with label151;
        catch java.lang.Exception from label037 to label038 with label151;
        catch java.lang.Exception from label039 to label040 with label151;
        catch java.lang.Throwable from label030 to label031 with label159;
        catch java.lang.Throwable from label033 to label035 with label159;
        catch java.lang.Throwable from label036 to label040 with label159;
        catch java.lang.RuntimeException from label040 to label041 with label137;
        catch java.lang.RuntimeException from label042 to label043 with label137;
        catch com.ichi2.anki.exception.MediaSyncException from label040 to label041 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label042 to label043 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label040 to label041 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label042 to label043 with label123;
        catch java.lang.Exception from label040 to label041 with label151;
        catch java.lang.Exception from label042 to label043 with label151;
        catch java.lang.Throwable from label040 to label041 with label159;
        catch java.lang.Throwable from label042 to label043 with label159;
        catch java.lang.Exception from label045 to label048 with label151;
        catch java.lang.Throwable from label045 to label046 with label159;
        catch java.lang.Throwable from label047 to label048 with label159;
        catch java.lang.OutOfMemoryError from label050 to label052 with label092;
        catch java.lang.RuntimeException from label051 to label052 with label099;
        catch com.ichi2.anki.exception.MediaSyncException from label051 to label052 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label051 to label052 with label123;
        catch java.lang.Exception from label051 to label052 with label151;
        catch java.lang.Throwable from label050 to label052 with label159;
        catch java.lang.OutOfMemoryError from label052 to label053 with label173;
        catch java.lang.OutOfMemoryError from label055 to label056 with label173;
        catch java.lang.RuntimeException from label052 to label053 with label172;
        catch java.lang.RuntimeException from label054 to label056 with label172;
        catch java.lang.RuntimeException from label057 to label060 with label172;
        catch com.ichi2.anki.exception.MediaSyncException from label052 to label053 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label055 to label056 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label052 to label053 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label055 to label056 with label123;
        catch java.lang.Exception from label052 to label053 with label151;
        catch java.lang.Exception from label055 to label056 with label151;
        catch java.lang.Throwable from label052 to label053 with label159;
        catch java.lang.Throwable from label054 to label056 with label159;
        catch java.lang.Throwable from label057 to label058 with label159;
        catch java.lang.Throwable from label059 to label060 with label159;
        catch java.lang.OutOfMemoryError from label063 to label064 with label173;
        catch java.lang.RuntimeException from label062 to label064 with label172;
        catch java.lang.RuntimeException from label065 to label066 with label172;
        catch com.ichi2.anki.exception.MediaSyncException from label063 to label064 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label063 to label064 with label123;
        catch java.lang.Exception from label063 to label064 with label151;
        catch java.lang.Throwable from label063 to label064 with label159;
        catch java.lang.Throwable from label065 to label066 with label159;
        catch java.lang.OutOfMemoryError from label068 to label069 with label173;
        catch java.lang.OutOfMemoryError from label071 to label072 with label173;
        catch java.lang.RuntimeException from label068 to label069 with label172;
        catch java.lang.RuntimeException from label070 to label072 with label172;
        catch java.lang.RuntimeException from label073 to label076 with label172;
        catch com.ichi2.anki.exception.MediaSyncException from label068 to label069 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label071 to label072 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label068 to label069 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label071 to label072 with label123;
        catch java.lang.Exception from label068 to label069 with label151;
        catch java.lang.Exception from label071 to label072 with label151;
        catch java.lang.Throwable from label068 to label069 with label159;
        catch java.lang.Throwable from label070 to label072 with label159;
        catch java.lang.Throwable from label073 to label074 with label159;
        catch java.lang.Throwable from label075 to label076 with label159;
        catch java.lang.OutOfMemoryError from label079 to label080 with label173;
        catch java.lang.OutOfMemoryError from label082 to label083 with label173;
        catch java.lang.OutOfMemoryError from label084 to label085 with label173;
        catch java.lang.OutOfMemoryError from label088 to label089 with label173;
        catch java.lang.RuntimeException from label078 to label080 with label172;
        catch java.lang.RuntimeException from label081 to label085 with label172;
        catch java.lang.RuntimeException from label086 to label087 with label172;
        catch java.lang.RuntimeException from label088 to label089 with label172;
        catch com.ichi2.anki.exception.MediaSyncException from label079 to label080 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label082 to label083 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label084 to label085 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label088 to label089 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label079 to label080 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label082 to label083 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label084 to label085 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label088 to label089 with label123;
        catch java.lang.Exception from label079 to label080 with label151;
        catch java.lang.Exception from label082 to label083 with label151;
        catch java.lang.Exception from label084 to label085 with label151;
        catch java.lang.Exception from label088 to label089 with label151;
        catch java.lang.Throwable from label079 to label080 with label159;
        catch java.lang.Throwable from label081 to label083 with label159;
        catch java.lang.Throwable from label084 to label085 with label159;
        catch java.lang.Throwable from label086 to label087 with label159;
        catch java.lang.Throwable from label088 to label089 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label093 to label094 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label093 to label094 with label123;
        catch java.lang.Exception from label093 to label097 with label151;
        catch java.lang.Throwable from label093 to label095 with label159;
        catch java.lang.Throwable from label096 to label097 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label100 to label101 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label100 to label101 with label123;
        catch java.lang.Exception from label100 to label101 with label151;
        catch java.lang.Exception from label102 to label106 with label151;
        catch java.lang.Throwable from label100 to label101 with label159;
        catch java.lang.Throwable from label102 to label103 with label159;
        catch java.lang.Throwable from label104 to label106 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label108 to label109 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label108 to label109 with label123;
        catch java.lang.Exception from label108 to label109 with label151;
        catch java.lang.Exception from label110 to label113 with label151;
        catch java.lang.Throwable from label108 to label109 with label159;
        catch java.lang.Throwable from label110 to label111 with label159;
        catch java.lang.Throwable from label112 to label113 with label159;
        catch java.lang.Throwable from label115 to label116 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label118 to label119 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label118 to label119 with label123;
        catch java.lang.Exception from label118 to label122 with label151;
        catch java.lang.Throwable from label118 to label120 with label159;
        catch java.lang.Throwable from label121 to label122 with label159;
        catch java.lang.Throwable from label124 to label125 with label159;
        catch java.lang.RuntimeException from label127 to label128 with label137;
        catch java.lang.RuntimeException from label129 to label130 with label137;
        catch java.lang.RuntimeException from label131 to label132 with label137;
        catch java.lang.RuntimeException from label133 to label134 with label137;
        catch java.lang.RuntimeException from label135 to label136 with label137;
        catch com.ichi2.anki.exception.MediaSyncException from label127 to label128 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label129 to label130 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label131 to label132 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label133 to label134 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label135 to label136 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label127 to label128 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label129 to label130 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label131 to label132 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label133 to label134 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label135 to label136 with label123;
        catch java.lang.Exception from label127 to label128 with label151;
        catch java.lang.Exception from label129 to label130 with label151;
        catch java.lang.Exception from label131 to label132 with label151;
        catch java.lang.Exception from label133 to label134 with label151;
        catch java.lang.Exception from label135 to label136 with label151;
        catch java.lang.Throwable from label127 to label128 with label159;
        catch java.lang.Throwable from label129 to label130 with label159;
        catch java.lang.Throwable from label131 to label132 with label159;
        catch java.lang.Throwable from label133 to label134 with label159;
        catch java.lang.Throwable from label135 to label136 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label138 to label139 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label143 to label144 with label114;
        catch com.ichi2.anki.exception.MediaSyncException from label145 to label146 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label138 to label139 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label143 to label144 with label123;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label145 to label146 with label123;
        catch java.lang.Exception from label138 to label139 with label151;
        catch java.lang.Exception from label140 to label144 with label151;
        catch java.lang.Exception from label145 to label146 with label151;
        catch java.lang.Exception from label147 to label150 with label151;
        catch java.lang.Throwable from label138 to label139 with label159;
        catch java.lang.Throwable from label140 to label141 with label159;
        catch java.lang.Throwable from label142 to label144 with label159;
        catch java.lang.Throwable from label145 to label146 with label159;
        catch java.lang.Throwable from label147 to label148 with label159;
        catch java.lang.Throwable from label149 to label150 with label159;
        catch java.lang.Throwable from label152 to label153 with label159;
        catch java.lang.Throwable from label154 to label155 with label159;
        catch com.ichi2.anki.exception.MediaSyncException from label157 to label158 with label114;
        catch com.ichi2.anki.exception.UnknownHttpResponseException from label157 to label158 with label123;
        catch java.lang.Exception from label157 to label158 with label151;
        catch java.lang.Throwable from label157 to label158 with label159;
        catch java.lang.Exception from label161 to label164 with label151;
        catch java.lang.Throwable from label161 to label162 with label159;
        catch java.lang.Throwable from label163 to label164 with label159;
        catch java.lang.Throwable from label166 to label167 with label159;
        catch java.lang.Throwable from label168 to label169 with label159;
        catch java.lang.Throwable from label170 to label171 with label159;
    }
    private com.ichi2.async.Connection$Payload doOneInBackground(com.ichi2.async.Connection$Payload)
    {
        com.ichi2.async.Connection r0;
        com.ichi2.async.Connection$Payload $r1;
        int $i0;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: com.ichi2.async.Connection$Payload;

        $i0 = $r1.<com.ichi2.async.Connection$Payload: int taskType>;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        $r1 = specialinvoke r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$Payload doInBackgroundLogin(com.ichi2.async.Connection$Payload)>($r1);

        return $r1;

     label3:
        $r1 = specialinvoke r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$Payload doInBackgroundSync(com.ichi2.async.Connection$Payload)>($r1);

        return $r1;
    }
    public static boolean getIsCancelled()
    {
        java.lang.Throwable $r0;
        boolean z0;

        entermonitor class "Lcom/ichi2/async/Connection;";

     label1:
        z0 = <com.ichi2.async.Connection: boolean sIsCancelled>;

     label2:
        exitmonitor class "Lcom/ichi2/async/Connection;";

        return z0;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lcom/ichi2/async/Connection;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static boolean isCancellable()
    {
        java.lang.Throwable $r0;
        boolean z0;

        entermonitor class "Lcom/ichi2/async/Connection;";

     label1:
        z0 = <com.ichi2.async.Connection: boolean sIsCancellable>;

     label2:
        exitmonitor class "Lcom/ichi2/async/Connection;";

        return z0;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lcom/ichi2/async/Connection;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static boolean isOnline()
    {
        com.ichi2.anki.AnkiDroidApp $r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.ConnectivityManager r3;
        android.net.NetworkInfo $r4;
        boolean $z0;

        $r0 = staticinvoke <com.ichi2.anki.AnkiDroidApp: com.ichi2.anki.AnkiDroidApp getInstance()>();

        $r1 = virtualinvoke $r0.<com.ichi2.anki.AnkiDroidApp: android.content.Context getApplicationContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r3 = (android.net.ConnectivityManager) $r2;

        $r4 = virtualinvoke r3.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r4.<android.net.NetworkInfo: boolean isAvailable()>();

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
    private static com.ichi2.async.Connection launchConnectionTask(com.ichi2.async.Connection$TaskListener, com.ichi2.async.Connection$Payload)
    {
        com.ichi2.async.Connection$TaskListener $r0;
        com.ichi2.async.Connection$Payload $r1;
        java.lang.Exception r2;
        boolean $z0;
        com.ichi2.async.Connection $r3;
        android.os.AsyncTask$Status $r4, $r5;
        com.ichi2.async.Connection$Payload[] $r6;

        $r0 := @parameter0: com.ichi2.async.Connection$TaskListener;

        $r1 := @parameter1: com.ichi2.async.Connection$Payload;

        $z0 = staticinvoke <com.ichi2.async.Connection: boolean isOnline()>();

        if $z0 != 0 goto label1;

        $r1.<com.ichi2.async.Connection$Payload: boolean success> = 0;

        interfaceinvoke $r0.<com.ichi2.async.Connection$TaskListener: void onDisconnected()>();

        return null;

     label1:
        $r3 = <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance>;

        if $r3 == null goto label5;

        $r3 = <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance>;

     label2:
        $r4 = virtualinvoke $r3.<com.ichi2.async.Connection: android.os.AsyncTask$Status getStatus()>();

     label3:
        $r5 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status FINISHED>;

        if $r4 == $r5 goto label5;

        $r3 = <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance>;

     label4:
        virtualinvoke $r3.<com.ichi2.async.Connection: java.lang.Object get()>();

     label5:
        $r3 = new com.ichi2.async.Connection;

        specialinvoke $r3.<com.ichi2.async.Connection: void <init>()>();

        <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance> = $r3;

        $r3 = <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance>;

        $r3.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener> = $r0;

        $r3 = <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance>;

        $r6 = newarray (com.ichi2.async.Connection$Payload)[1];

        $r6[0] = $r1;

        virtualinvoke $r3.<com.ichi2.async.Connection: android.os.AsyncTask execute(java.lang.Object[])>($r6);

        $r3 = <com.ichi2.async.Connection: com.ichi2.async.Connection sInstance>;

        return $r3;

     label6:
        r2 := @caughtexception;

        virtualinvoke r2.<java.lang.Exception: void printStackTrace()>();

        goto label5;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }
    public static com.ichi2.async.Connection login(com.ichi2.async.Connection$TaskListener, com.ichi2.async.Connection$Payload)
    {
        com.ichi2.async.Connection$TaskListener $r0;
        com.ichi2.async.Connection$Payload $r1;
        com.ichi2.async.Connection $r2;

        $r0 := @parameter0: com.ichi2.async.Connection$TaskListener;

        $r1 := @parameter1: com.ichi2.async.Connection$Payload;

        $r1.<com.ichi2.async.Connection$Payload: int taskType> = 0;

        $r2 = staticinvoke <com.ichi2.async.Connection: com.ichi2.async.Connection launchConnectionTask(com.ichi2.async.Connection$TaskListener,com.ichi2.async.Connection$Payload)>($r0, $r1);

        return $r2;
    }
    public static com.ichi2.async.Connection sync(com.ichi2.async.Connection$TaskListener, com.ichi2.async.Connection$Payload)
    {
        com.ichi2.async.Connection$TaskListener $r0;
        com.ichi2.async.Connection$Payload $r1;
        com.ichi2.async.Connection $r2;

        $r0 := @parameter0: com.ichi2.async.Connection$TaskListener;

        $r1 := @parameter1: com.ichi2.async.Connection$Payload;

        $r1.<com.ichi2.async.Connection$Payload: int taskType> = 1;

        $r2 = staticinvoke <com.ichi2.async.Connection: com.ichi2.async.Connection launchConnectionTask(com.ichi2.async.Connection$TaskListener,com.ichi2.async.Connection$Payload)>($r0, $r1);

        return $r2;
    }
    private boolean timeoutOccured(java.lang.Exception)
    {
        com.ichi2.async.Connection r0;
        java.lang.Exception $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: java.lang.Exception;

        $r2 = virtualinvoke $r1.<java.lang.Exception: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("UnknownHostException");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("HttpHostConnectException");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("SSLException while building HttpClient");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("SocketTimeoutException");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("ClientProtocolException");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("TimeoutException");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    protected transient com.ichi2.async.Connection$Payload doInBackground(com.ichi2.async.Connection$Payload[])
    {
        com.ichi2.async.Connection r0;
        com.ichi2.async.Connection$Payload[] $r1;
        com.ichi2.async.Connection$Payload $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: com.ichi2.async.Connection$Payload[];

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>($r1);

        $i0 = lengthof $r1;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r2 = $r1[0];

        $r2 = specialinvoke r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$Payload doOneInBackground(com.ichi2.async.Connection$Payload)>($r2);

        return $r2;
    }
    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        com.ichi2.async.Connection r0;
        com.ichi2.async.Connection$Payload $r1;
        java.lang.Object[] $r2;
        com.ichi2.async.Connection$Payload[] $r3;

        r0 := @this: com.ichi2.async.Connection;

        $r2 := @parameter0: java.lang.Object[];

        $r3 = (com.ichi2.async.Connection$Payload[]) $r2;

        $r1 = virtualinvoke r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$Payload doInBackground(com.ichi2.async.Connection$Payload[])>($r3);

        return $r1;
    }
    protected void onCancelled()
    {
        com.ichi2.async.Connection r0;
        java.lang.Object[] $r1;
        android.os.PowerManager$WakeLock $r2;
        com.ichi2.async.Connection$TaskListener $r3;
        boolean $z0;
        com.ichi2.async.Connection$CancellableTaskListener $r4;

        r0 := @this: com.ichi2.async.Connection;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void onCancelled()>();

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Connection onCancelled() method called", $r1);

        $r2 = r0.<com.ichi2.async.Connection: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        $r3 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        $z0 = $r3 instanceof com.ichi2.async.Connection$CancellableTaskListener;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        $r4 = (com.ichi2.async.Connection$CancellableTaskListener) $r3;

        interfaceinvoke $r4.<com.ichi2.async.Connection$CancellableTaskListener: void onCancelled()>();

     label1:
        return;
    }
    protected void onPostExecute(com.ichi2.async.Connection$Payload)
    {
        com.ichi2.async.Connection r0;
        com.ichi2.async.Connection$Payload $r1;
        android.os.PowerManager$WakeLock $r2;
        com.ichi2.async.Connection$TaskListener $r3;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: com.ichi2.async.Connection$Payload;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void onPostExecute(java.lang.Object)>($r1);

        $r2 = r0.<com.ichi2.async.Connection: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        $r3 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        if $r3 == null goto label1;

        $r3 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        interfaceinvoke $r3.<com.ichi2.async.Connection$TaskListener: void onPostExecute(com.ichi2.async.Connection$Payload)>($r1);

     label1:
        return;
    }
    protected volatile void onPostExecute(java.lang.Object)
    {
        com.ichi2.async.Connection r0;
        java.lang.Object $r1;
        com.ichi2.async.Connection$Payload $r2;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.ichi2.async.Connection$Payload) $r1;

        virtualinvoke r0.<com.ichi2.async.Connection: void onPostExecute(com.ichi2.async.Connection$Payload)>($r2);

        return;
    }
    protected void onPreExecute()
    {
        com.ichi2.async.Connection r0;
        android.os.PowerManager$WakeLock $r1;
        com.ichi2.async.Connection$TaskListener $r2;

        r0 := @this: com.ichi2.async.Connection;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void onPreExecute()>();

        $r1 = r0.<com.ichi2.async.Connection: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void acquire()>();

        $r2 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        if $r2 == null goto label1;

        $r2 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        interfaceinvoke $r2.<com.ichi2.async.Connection$TaskListener: void onPreExecute()>();

     label1:
        return;
    }
    protected transient void onProgressUpdate(java.lang.Object[])
    {
        com.ichi2.async.Connection r0;
        java.lang.Object[] $r1;
        com.ichi2.async.Connection$TaskListener $r2;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void onProgressUpdate(java.lang.Object[])>($r1);

        $r2 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        if $r2 == null goto label1;

        $r2 = r0.<com.ichi2.async.Connection: com.ichi2.async.Connection$TaskListener mListener>;

        interfaceinvoke $r2.<com.ichi2.async.Connection$TaskListener: void onProgressUpdate(java.lang.Object[])>($r1);

     label1:
        return;
    }
    public void publishProgress(int)
    {
        com.ichi2.async.Connection r0;
        int $i0;
        java.lang.Integer $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.ichi2.async.Connection;

        $i0 := @parameter0: int;

        $r2 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r1;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void publishProgress(java.lang.Object[])>($r2);

        return;
    }
    public void publishProgress(int, long, long)
    {
        com.ichi2.async.Connection r0;
        int $i0;
        long $l1, $l2;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.Long $r3;

        r0 := @this: com.ichi2.async.Connection;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[1] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[2] = $r3;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void publishProgress(java.lang.Object[])>($r1);

        return;
    }
    public void publishProgress(java.lang.String)
    {
        com.ichi2.async.Connection r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.ichi2.async.Connection;

        $r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r1;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void publishProgress(java.lang.Object[])>($r2);

        return;
    }
