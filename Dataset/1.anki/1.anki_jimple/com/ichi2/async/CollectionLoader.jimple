com.ichi2.async.CollectionLoader extends android.support.v4.content.AsyncTaskLoader
    public void <init>(android.content.Context)
    {
        com.ichi2.async.CollectionLoader r0;
        android.content.Context $r1;

        r0 := @this: com.ichi2.async.CollectionLoader;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.support.v4.content.AsyncTaskLoader: void <init>(android.content.Context)>($r1);

        return;
    }
    public void deliverResult(com.ichi2.libanki.Collection)
    {
        com.ichi2.async.CollectionLoader r0;
        com.ichi2.libanki.Collection $r1;
        java.lang.Object[] $r2;
        boolean $z0;

        r0 := @this: com.ichi2.async.CollectionLoader;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CollectionLoader.deliverResult()", $r2);

        $z0 = virtualinvoke r0.<com.ichi2.async.CollectionLoader: boolean isReset()>();

        if $z0 == 0 goto label1;

        if $r1 == null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.ichi2.async.CollectionLoader: boolean isStarted()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.support.v4.content.AsyncTaskLoader: void deliverResult(java.lang.Object)>($r1);

     label2:
        return;
    }
    public volatile void deliverResult(java.lang.Object)
    {
        com.ichi2.async.CollectionLoader r0;
        java.lang.Object $r1;
        com.ichi2.libanki.Collection $r2;

        r0 := @this: com.ichi2.async.CollectionLoader;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.ichi2.libanki.Collection) $r1;

        virtualinvoke r0.<com.ichi2.async.CollectionLoader: void deliverResult(com.ichi2.libanki.Collection)>($r2);

        return;
    }
    public com.ichi2.libanki.Collection loadInBackground()
    {
        com.ichi2.async.CollectionLoader r0;
        java.lang.RuntimeException r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;

        r0 := @this: com.ichi2.async.CollectionLoader;

     label1:
        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CollectionLoader accessing collection", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = virtualinvoke r0.<com.ichi2.async.CollectionLoader: android.content.Context getContext()>();

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

     label2:
        return $r5;

     label3:
        r1 := @caughtexception;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "loadInBackground - RuntimeException on opening collection", $r2);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r1, "CollectionLoader.loadInBackground");

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
    public volatile java.lang.Object loadInBackground()
    {
        com.ichi2.async.CollectionLoader r0;
        com.ichi2.libanki.Collection $r1;

        r0 := @this: com.ichi2.async.CollectionLoader;

        $r1 = virtualinvoke r0.<com.ichi2.async.CollectionLoader: com.ichi2.libanki.Collection loadInBackground()>();

        return $r1;
    }
    protected void onReset()
    {
        com.ichi2.async.CollectionLoader r0;
        java.lang.Object[] $r1;

        r0 := @this: com.ichi2.async.CollectionLoader;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CollectionLoader.onReset()", $r1);

        virtualinvoke r0.<com.ichi2.async.CollectionLoader: void onStopLoading()>();

        return;
    }
    protected void onStartLoading()
    {
        com.ichi2.async.CollectionLoader r0;
        com.ichi2.anki.CollectionHelper $r1;
        boolean $z0;
        java.lang.Object[] $r2;

        r0 := @this: com.ichi2.async.CollectionLoader;

        $r1 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $z0 = virtualinvoke $r1.<com.ichi2.anki.CollectionHelper: boolean isCollectionLocked()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("onStartLoading() :: Another thread has requested to keep the collection closed.", $r2);

        return;

     label1:
        virtualinvoke r0.<com.ichi2.async.CollectionLoader: void forceLoad()>();

        return;
    }
    protected void onStopLoading()
    {
        com.ichi2.async.CollectionLoader r0;
        java.lang.Object[] $r1;

        r0 := @this: com.ichi2.async.CollectionLoader;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CollectionLoader.onStopLoading()", $r1);

        virtualinvoke r0.<com.ichi2.async.CollectionLoader: boolean cancelLoad()>();

        return;
    }
