com.ichi2.async.DeckTask extends com.ichi2.async.BaseAsyncTask
public static final int TASK_TYPE_ADD_FACT
public static final int TASK_TYPE_ADD_FIELD
public static final int TASK_TYPE_ADD_TEMPLATE
public static final int TASK_TYPE_ANSWER_CARD
public static final int TASK_TYPE_CHANGE_SORT_FIELD
public static final int TASK_TYPE_CHECK_DATABASE
public static final int TASK_TYPE_CHECK_MEDIA
public static final int TASK_TYPE_CONF_CHANGE
public static final int TASK_TYPE_CONF_REMOVE
public static final int TASK_TYPE_CONF_RESET
public static final int TASK_TYPE_CONF_SET_SUBDECKS
public static final int TASK_TYPE_COUNT_MODELS
public static final int TASK_TYPE_DELETE_DECK
public static final int TASK_TYPE_DELETE_FIELD
public static final int TASK_TYPE_DELETE_MODEL
public static final int TASK_TYPE_DISMISS
public static final int TASK_TYPE_EMPTY_CRAM
public static final int TASK_TYPE_EXPORT_APKG
public static final int TASK_TYPE_FIND_EMPTY_CARDS
public static final int TASK_TYPE_IMPORT
public static final int TASK_TYPE_IMPORT_REPLACE
public static final int TASK_TYPE_LOAD_DECK_COUNTS
public static final int TASK_TYPE_REBUILD_CRAM
public static final int TASK_TYPE_REMOVE_TEMPLATE
public static final int TASK_TYPE_RENDER_BROWSER_QA
public static final int TASK_TYPE_REORDER
public static final int TASK_TYPE_REPAIR_DECK
public static final int TASK_TYPE_REPOSITION_FIELD
public static final int TASK_TYPE_SAVE_COLLECTION
public static final int TASK_TYPE_SAVE_MODEL
public static final int TASK_TYPE_SEARCH_CARDS
public static final int TASK_TYPE_UNDO
public static final int TASK_TYPE_UPDATE_FACT
public static final int TASK_TYPE_UPDATE_VALUES_FROM_DECK
private static boolean sHadCardQueue
private static com.ichi2.async.DeckTask sLatestInstance
private android.content.Context mContext
private final com.ichi2.async.DeckTask$Listener mListener
private com.ichi2.async.DeckTask mPreviousTask
private final int mType
    static void <clinit>()
    {
        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 0;

        return;
    }
    public void <init>(int, com.ichi2.async.DeckTask$Listener, com.ichi2.async.DeckTask)
    {
        com.ichi2.async.DeckTask r0, $r2;
        int $i0;
        com.ichi2.async.DeckTask$Listener $r1;

        r0 := @this: com.ichi2.async.DeckTask;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.ichi2.async.DeckTask$Listener;

        $r2 := @parameter2: com.ichi2.async.DeckTask;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void <init>()>();

        r0.<com.ichi2.async.DeckTask: int mType> = $i0;

        r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$Listener mListener> = $r1;

        r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask> = $r2;

        return;
    }
    public static void cancelTask()
    {
        java.lang.Exception r0;
        com.ichi2.async.DeckTask $r1;
        android.os.AsyncTask$Status $r2, $r3;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.Integer $r5;

        $r1 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

        if $r1 == null goto label8;

        $r1 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label1:
        $r2 = virtualinvoke $r1.<com.ichi2.async.DeckTask: android.os.AsyncTask$Status getStatus()>();

     label2:
        $r3 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status FINISHED>;

        if $r2 == $r3 goto label8;

        $r1 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label3:
        virtualinvoke $r1.<com.ichi2.async.DeckTask: boolean cancel(boolean)>(1);

        $r4 = newarray (java.lang.Object)[1];

     label4:
        $r1 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label5:
        $i0 = $r1.<com.ichi2.async.DeckTask: int mType>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Cancelled task %d", $r4);

     label6:
        return;

     label7:
        r0 := @caughtexception;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }
    public static void cancelTask(int)
    {
        int $i0, $i1;
        com.ichi2.async.DeckTask $r0;

        $i0 := @parameter0: int;

        $r0 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

        if $r0 == null goto label1;

        $r0 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

        $i1 = $r0.<com.ichi2.async.DeckTask: int mType>;

        if $i1 != $i0 goto label1;

        staticinvoke <com.ichi2.async.DeckTask: void cancelTask()>();

     label1:
        return;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackGroundAddField(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.anki.exception.ConfirmModSchemaException r2;
        java.lang.Object[] $r3;
        com.ichi2.async.DeckTask$TaskData $r4;
        java.lang.Object r5;
        org.json.JSONObject r6, $r13;
        java.lang.String r7;
        com.ichi2.anki.CollectionHelper $r8;
        android.content.Context $r9;
        com.ichi2.libanki.Collection $r10;
        com.ichi2.libanki.Models $r11, $r12;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundRepositionField", $r3);

        $r4 = $r1[0];

        $r3 = virtualinvoke $r4.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r5 = $r3[0];

        r6 = (org.json.JSONObject) r5;

        r5 = $r3[1];

        r7 = (java.lang.String) r5;

        $r8 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r9 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r10 = virtualinvoke $r8.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r9);

     label1:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r13 = virtualinvoke $r12.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>(r7);

        virtualinvoke $r11.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>(r6, $r13);

        virtualinvoke $r10.<com.ichi2.libanki.Collection: void save()>();

     label2:
        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label3;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackGroundDeleteField(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.anki.exception.ConfirmModSchemaException r2;
        java.lang.Object[] $r3;
        com.ichi2.async.DeckTask$TaskData $r4;
        java.lang.Object r5;
        org.json.JSONObject r6, r7;
        com.ichi2.anki.CollectionHelper $r8;
        android.content.Context $r9;
        com.ichi2.libanki.Collection $r10;
        com.ichi2.libanki.Models $r11;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackGroundDeleteField", $r3);

        $r4 = $r1[0];

        $r3 = virtualinvoke $r4.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r5 = $r3[0];

        r6 = (org.json.JSONObject) r5;

        r5 = $r3[1];

        r7 = (org.json.JSONObject) r5;

        $r8 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r9 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r10 = virtualinvoke $r8.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r9);

     label1:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r11.<com.ichi2.libanki.Models: void remField(org.json.JSONObject,org.json.JSONObject)>(r6, r7);

        virtualinvoke $r10.<com.ichi2.libanki.Collection: void save()>();

     label2:
        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label3;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackGroundDeleteModel(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.anki.exception.ConfirmModSchemaException r2;
        java.lang.Object[] $r3;
        com.ichi2.async.DeckTask$TaskData $r4;
        long $l0;
        com.ichi2.anki.CollectionHelper $r5;
        android.content.Context $r6;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.Models $r8, $r9;
        org.json.JSONObject $r10;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackGroundDeleteModel", $r3);

        $r4 = $r1[0];

        $l0 = virtualinvoke $r4.<com.ichi2.async.DeckTask$TaskData: long getLong()>();

        $r5 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r6 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r6);

     label1:
        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r9 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

        virtualinvoke $r8.<com.ichi2.libanki.Models: void rem(org.json.JSONObject)>($r10);

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

     label2:
        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackGroundDeleteModel :: ConfirmModSchemaException", $r3);

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label3;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackGroundRepositionField(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.anki.exception.ConfirmModSchemaException r2;
        java.lang.Object[] $r3;
        com.ichi2.async.DeckTask$TaskData $r4;
        java.lang.Object r5;
        org.json.JSONObject r6, r7;
        java.lang.Integer $r8;
        int $i0;
        com.ichi2.anki.CollectionHelper $r9;
        android.content.Context $r10;
        com.ichi2.libanki.Collection $r11;
        com.ichi2.libanki.Models $r12;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundRepositionField", $r3);

        $r4 = $r1[0];

        $r3 = virtualinvoke $r4.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r5 = $r3[0];

        r6 = (org.json.JSONObject) r5;

        r5 = $r3[1];

        r7 = (org.json.JSONObject) r5;

        r5 = $r3[2];

        $r8 = (java.lang.Integer) r5;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r10 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r11 = virtualinvoke $r9.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r10);

     label1:
        $r12 = virtualinvoke $r11.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r12.<com.ichi2.libanki.Models: void moveField(org.json.JSONObject,org.json.JSONObject,int)>(r6, r7, $i0);

        virtualinvoke $r11.<com.ichi2.libanki.Collection: void save()>();

     label2:
        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label3;
    }
    private com.ichi2.async.DeckTask$TaskData doInBackgroundAddNote(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.RuntimeException r2;
        com.ichi2.async.DeckTask$TaskData $r3;
        java.lang.Object[] $r4;
        com.ichi2.libanki.Note $r5;
        com.ichi2.anki.CollectionHelper $r6;
        android.content.Context $r7;
        com.ichi2.libanki.Collection $r8;
        com.ichi2.libanki.DB $r9;
        io.requery.android.database.sqlite.SQLiteDatabase $r10;
        int $i0;
        java.lang.Throwable $r11;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundAddNote", $r4);

        $r3 = $r1[0];

        $r5 = virtualinvoke $r3.<com.ichi2.async.DeckTask$TaskData: com.ichi2.libanki.Note getNote()>();

        $r6 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r7 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r8 = virtualinvoke $r6.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r7);

     label1:
        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label2:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        $i0 = virtualinvoke $r8.<com.ichi2.libanki.Collection: int addNote(com.ichi2.libanki.Note)>($r5);

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(int)>($i0);

        $r1[0] = $r3;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label3:
        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label4:
        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r3;

     label5:
        $r11 := @caughtexception;

     label6:
        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r11;

     label7:
        r2 := @caughtexception;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "doInBackgroundAddNote - RuntimeException on adding fact", $r4);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r2, "doInBackgroundAddNote");

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r3;

        catch java.lang.RuntimeException from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label7;
        catch java.lang.RuntimeException from label6 to label7 with label7;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundAddTemplate(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.anki.exception.ConfirmModSchemaException r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.async.DeckTask$TaskData $r7;
        java.lang.Object r8;
        org.json.JSONObject r9, r10;
        com.ichi2.libanki.Models $r11;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundAddTemplate", $r3);

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = $r1[0];

        $r3 = virtualinvoke $r7.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r8 = $r3[0];

        r9 = (org.json.JSONObject) r8;

        r8 = $r3[1];

        r10 = (org.json.JSONObject) r8;

     label1:
        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r11.<com.ichi2.libanki.Models: void addTemplate(org.json.JSONObject,org.json.JSONObject)>(r9, r10);

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void save()>();

     label2:
        $r7 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r7;

     label3:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackgroundAddTemplate :: ConfirmModSchemaException", $r3);

        $r7 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r7;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label3;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundAnswerCard(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.RuntimeException r2;
        com.ichi2.async.DeckTask$TaskData $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Sched $r7;
        com.ichi2.libanki.Card $r8, r9;
        int $i0;
        com.ichi2.libanki.DB $r10;
        io.requery.android.database.sqlite.SQLiteDatabase $r11;
        java.lang.Throwable $r12;
        java.lang.Object[] $r13;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r3 = $r1[0];

        $r8 = virtualinvoke $r3.<com.ichi2.async.DeckTask$TaskData: com.ichi2.libanki.Card getCard()>();

        $r3 = $r1[0];

        $i0 = virtualinvoke $r3.<com.ichi2.async.DeckTask$TaskData: int getInt()>();

     label01:
        $r10 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label02:
        if $r8 == null goto label04;

     label03:
        virtualinvoke $r7.<com.ichi2.libanki.Sched: void answerCard(com.ichi2.libanki.Card,int)>($r8, $i0);

     label04:
        $r8 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.libanki.Card getCard(com.ichi2.libanki.Sched)>($r7);

     label05:
        r9 = $r8;

        if $r8 == null goto label07;

     label06:
        virtualinvoke $r8.<com.ichi2.libanki.Card: java.util.HashMap _getQA(boolean)>(1);

     label07:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(com.ichi2.libanki.Card)>(r9);

        $r1[0] = $r3;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label08:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label09:
        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r3;

     label10:
        $r12 := @caughtexception;

     label11:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r12;

     label12:
        r2 := @caughtexception;

        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "doInBackgroundAnswerCard - RuntimeException on answering card", $r13);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r2, "doInBackgroundAnswerCard");

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r3;

        catch java.lang.RuntimeException from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label08 with label10;
        catch java.lang.RuntimeException from label08 to label09 with label12;
        catch java.lang.RuntimeException from label11 to label12 with label12;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundChangeSortField(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Exception r2;
        java.lang.Object[] $r3;
        com.ichi2.async.DeckTask$TaskData $r4;
        java.lang.Object r5;
        org.json.JSONObject r6;
        java.lang.Integer $r7;
        int $i0;
        com.ichi2.anki.CollectionHelper $r8;
        android.content.Context $r9;
        com.ichi2.libanki.Collection $r10;
        com.ichi2.libanki.Models $r11;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

     label1:
        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundChangeSortField", $r3);

        $r4 = $r1[0];

        $r3 = virtualinvoke $r4.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r5 = $r3[0];

        r6 = (org.json.JSONObject) r5;

        r5 = $r3[1];

        $r7 = (java.lang.Integer) r5;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r9 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r10 = virtualinvoke $r8.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r9);

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r11.<com.ichi2.libanki.Models: void setSortIdx(org.json.JSONObject,int)>(r6, $i0);

        virtualinvoke $r10.<com.ichi2.libanki.Collection: void save()>();

     label2:
        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Error changing sort field", $r3);

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundCheckDatabase(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        long $l0;
        byte $b1;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundCheckDatabase", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        if $r5 != null goto label1;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackgroundCheckDatabase :: supplied collection was null", $r2);

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r6;

     label1:
        $l0 = virtualinvoke $r5.<com.ichi2.libanki.Collection: long fixIntegrity()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r6;

     label2:
        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: void closeCollection(boolean)>(1);

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(int,long,boolean)>(0, $l0, 1);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundCheckMedia(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Media $r6;
        java.util.List $r7;
        com.ichi2.async.DeckTask$TaskData $r8;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundCheckMedia", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        virtualinvoke $r6.<com.ichi2.libanki.Media: void findChanges(boolean)>(1);

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Media: java.util.List check()>();

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r7;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(int,java.lang.Object[],boolean)>(0, $r2, 1);

        return $r8;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundConfChange(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        org.json.JSONException r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.async.DeckTask$TaskData $r7;
        java.lang.Object r8;
        org.json.JSONObject r9, r10;
        long $l0, $l1;
        com.ichi2.libanki.Decks $r11;
        int $i2, $i3;
        com.ichi2.libanki.Sched $r12;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundConfChange", $r3);

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = $r1[0];

        $r3 = virtualinvoke $r7.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r8 = $r3[0];

        r9 = (org.json.JSONObject) r8;

        r8 = $r3[1];

        r10 = (org.json.JSONObject) r8;

     label01:
        $l0 = virtualinvoke r10.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        r10 = virtualinvoke $r11.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l1);

        r10 = virtualinvoke r10.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i2 = virtualinvoke r10.<org.json.JSONObject: int getInt(java.lang.String)>("order");

        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        r10 = virtualinvoke $r11.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l0);

        r10 = virtualinvoke r10.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i3 = virtualinvoke r10.<org.json.JSONObject: int getInt(java.lang.String)>("order");

     label02:
        if $i2 == $i3 goto label03;

        lookupswitch($i3)
        {
            case 0: goto label07;
            case 1: goto label10;
            default: goto label03;
        };

     label03:
        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r11.<com.ichi2.libanki.Decks: void setConf(org.json.JSONObject,long)>(r9, $l0);

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void save()>();

     label04:
        $r7 = new com.ichi2.async.DeckTask$TaskData;

     label05:
        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

     label06:
        return $r7;

     label07:
        $r12 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $l1 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke $r12.<com.ichi2.libanki.Sched: void randomizeCards(long)>($l1);

     label08:
        goto label03;

     label09:
        r2 := @caughtexception;

        $r7 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r7;

     label10:
        $r12 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $l1 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke $r12.<com.ichi2.libanki.Sched: void orderCards(long)>($l1);

     label11:
        goto label03;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
        catch org.json.JSONException from label10 to label11 with label09;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundConfRemove(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        org.json.JSONException r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.async.DeckTask$TaskData $r7;
        java.lang.Object r8;
        org.json.JSONObject r9, $r10;
        int $i0, $i1;
        com.ichi2.libanki.Decks $r11;
        com.ichi2.libanki.Sched $r12;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundConfRemove", $r3);

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = $r1[0];

        $r3 = virtualinvoke $r7.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r8 = $r3[0];

        r9 = (org.json.JSONObject) r8;

     label1:
        $r10 = virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i0 = virtualinvoke $r10.<org.json.JSONObject: int getInt(java.lang.String)>("order");

        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = virtualinvoke $r11.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>(1L);

        $r10 = virtualinvoke $r10.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i1 = virtualinvoke $r10.<org.json.JSONObject: int getInt(java.lang.String)>("order");

     label2:
        if $i0 == $i1 goto label4;

     label3:
        $r10 = virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        virtualinvoke $r10.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("order", $i1);

        $r12 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r12.<com.ichi2.libanki.Sched: void resortConf(org.json.JSONObject)>(r9);

     label4:
        virtualinvoke $r6.<com.ichi2.libanki.Collection: void save()>();

     label5:
        $r7 = new com.ichi2.async.DeckTask$TaskData;

     label6:
        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

     label7:
        return $r7;

     label8:
        r2 := @caughtexception;

        $r7 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r7;

        catch org.json.JSONException from label1 to label2 with label8;
        catch org.json.JSONException from label3 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundConfReset(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        java.lang.Object r7;
        org.json.JSONObject r8;
        com.ichi2.libanki.Decks $r9;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundConfReset", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[0];

        r8 = (org.json.JSONObject) r7;

        $r9 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r9.<com.ichi2.libanki.Decks: void restoreToDefault(org.json.JSONObject)>(r8);

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void save()>();

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundConfSetSubdecks(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        org.json.JSONException r2;
        com.ichi2.async.DeckTask$TaskData r3;
        java.lang.Object[] $r4;
        com.ichi2.anki.CollectionHelper $r5;
        android.content.Context $r6;
        com.ichi2.libanki.Collection $r7;
        java.lang.Object r8;
        org.json.JSONObject r9, r10;
        com.ichi2.libanki.Decks $r11;
        long $l0;
        java.util.TreeMap $r12;
        java.util.Set $r13;
        java.util.Iterator $r14;
        boolean $z0;
        java.util.Map$Entry r15;
        java.lang.Long $r16;
        int $i1;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundConfSetSubdecks", $r4);

        $r5 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r6 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r6);

        r3 = $r1[0];

        $r4 = virtualinvoke r3.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r8 = $r4[0];

        r9 = (org.json.JSONObject) r8;

        r8 = $r4[1];

        r10 = (org.json.JSONObject) r8;

     label01:
        $r11 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        $r13 = virtualinvoke $r12.<java.util.TreeMap: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label16;

     label04:
        r8 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

     label05:
        r15 = (java.util.Map$Entry) r8;

     label06:
        $r11 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        r8 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

     label07:
        $r16 = (java.lang.Long) r8;

     label08:
        $l0 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        r9 = virtualinvoke $r11.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $i1 = virtualinvoke r9.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label09:
        if $i1 == 1 goto label02;

        r3 = new com.ichi2.async.DeckTask$TaskData;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r9;

        $r4[1] = r10;

     label10:
        specialinvoke r3.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r4);

     label11:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r1[0] = r3;

     label12:
        r3 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundConfChange(com.ichi2.async.DeckTask$TaskData[])>($r1);

        $z0 = virtualinvoke r3.<com.ichi2.async.DeckTask$TaskData: boolean getBoolean()>();

     label13:
        if $z0 != 0 goto label02;

        r3 = new com.ichi2.async.DeckTask$TaskData;

     label14:
        specialinvoke r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

     label15:
        return r3;

     label16:
        r3 = new com.ichi2.async.DeckTask$TaskData;

     label17:
        specialinvoke r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

     label18:
        return r3;

     label19:
        r2 := @caughtexception;

        r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return r3;

        catch org.json.JSONException from label01 to label03 with label19;
        catch org.json.JSONException from label04 to label05 with label19;
        catch org.json.JSONException from label06 to label07 with label19;
        catch org.json.JSONException from label08 to label09 with label19;
        catch org.json.JSONException from label10 to label11 with label19;
        catch org.json.JSONException from label12 to label13 with label19;
        catch org.json.JSONException from label14 to label15 with label19;
        catch org.json.JSONException from label17 to label18 with label19;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundCountModels(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.util.ArrayList r2, $r9, $r15;
        java.lang.Object[] r3;
        org.json.JSONException r4;
        com.ichi2.anki.CollectionHelper $r5;
        android.content.Context $r6;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.Models $r8, $r14;
        com.ichi2.async.DeckTask$1 $r10;
        java.util.Iterator $r11;
        boolean $z0;
        java.lang.Object $r12;
        org.json.JSONObject r13;
        long $l0;
        int $i1;
        java.lang.Integer $r16;
        com.ichi2.async.DeckTask$TaskData $r17;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundLoadModels", r3);

        $r5 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r6 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r6);

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r10 = new com.ichi2.async.DeckTask$1;

        specialinvoke $r10.<com.ichi2.async.DeckTask$1: void <init>(com.ichi2.async.DeckTask)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r9, $r10);

     label1:
        $r11 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label9;

     label4:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label5:
        r13 = (org.json.JSONObject) $r12;

     label6:
        $l0 = virtualinvoke r13.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r14 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        r13 = virtualinvoke $r14.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

        $r15 = virtualinvoke $r8.<com.ichi2.libanki.Models: java.util.ArrayList nids(org.json.JSONObject)>(r13);

        $i1 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label7:
        goto label2;

     label8:
        r4 := @caughtexception;

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackgroundLoadModels :: JSONException", r3);

        $r17 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r17.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r17;

     label9:
        r3 = newarray (java.lang.Object)[2];

        r3[0] = $r9;

        r3[1] = r2;

        $r17 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r17.<com.ichi2.async.DeckTask$TaskData: void <init>(int,java.lang.Object[],boolean)>(0, r3, 1);

        return $r17;

        catch org.json.JSONException from label1 to label3 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundDeleteDeck(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        long $l0;
        com.ichi2.libanki.Decks $r7;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundDeleteDeck", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = $r1[0];

        $l0 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: long getLong()>();

        $r7 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r7.<com.ichi2.libanki.Decks: void rem(long,boolean)>($l0, 1);

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundDismissNote(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        long[] r2;
        java.lang.RuntimeException r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Sched $r7;
        com.ichi2.async.DeckTask$TaskData $r8;
        java.lang.Object[] $r9;
        java.lang.Object r10;
        com.ichi2.libanki.Card r11, $r21;
        com.ichi2.libanki.Collection$DismissType r12;
        com.ichi2.libanki.Note $r13;
        com.ichi2.libanki.DB $r14;
        io.requery.android.database.sqlite.SQLiteDatabase $r15;
        int[] $r16;
        int $i0, $i2;
        boolean $z0;
        java.lang.Boolean $r17;
        java.util.ArrayList $r18;
        long $l1;
        java.lang.Long $r19;
        java.lang.Throwable $r20;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r8 = $r1[0];

        $r9 = virtualinvoke $r8.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r10 = $r9[0];

        r11 = (com.ichi2.libanki.Card) r10;

        r10 = $r9[1];

        r12 = (com.ichi2.libanki.Collection$DismissType) r10;

        $r13 = virtualinvoke r11.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

     label01:
        $r14 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = virtualinvoke $r14.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r15.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label02:
        $r16 = <com.ichi2.async.DeckTask$2: int[] $SwitchMap$com$ichi2$libanki$Collection$DismissType>;

        $i0 = virtualinvoke r12.<com.ichi2.libanki.Collection$DismissType: int ordinal()>();

        $i0 = $r16[$i0];

     label03:
        lookupswitch($i0)
        {
            case 1: goto label07;
            case 2: goto label12;
            case 3: goto label14;
            case 4: goto label21;
            case 5: goto label29;
            default: goto label04;
        };

     label04:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        r11 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.libanki.Card getCard(com.ichi2.libanki.Sched)>($r7);

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(com.ichi2.libanki.Card,int)>(r11, 0);

        $r1[0] = $r8;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

        $r14 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = virtualinvoke $r14.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r15.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label05:
        $r14 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = virtualinvoke $r14.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r15.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label06:
        $r8 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r8;

     label07:
        $r9 = newarray (java.lang.Object)[3];

        $z0 = virtualinvoke $r6.<com.ichi2.libanki.Collection: boolean getDirty()>();

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r9[0] = $r17;

        $r18 = virtualinvoke $r13.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $r9[1] = $r18;

        $l1 = virtualinvoke r11.<com.ichi2.libanki.Card: long getId()>();

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r9[2] = $r19;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void markUndo(com.ichi2.libanki.Collection$DismissType,java.lang.Object[])>(r12, $r9);

        r2 = newarray (long)[1];

        $l1 = virtualinvoke r11.<com.ichi2.libanki.Card: long getId()>();

        r2[0] = $l1;

        virtualinvoke $r7.<com.ichi2.libanki.Sched: void buryCards(long[])>(r2);

        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 1;

     label08:
        goto label04;

     label09:
        $r20 := @caughtexception;

     label10:
        $r14 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = virtualinvoke $r14.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r15.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r20;

     label11:
        r3 := @caughtexception;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r3, "doInBackgroundSuspendCard - RuntimeException on suspending card", $r9);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r3, "doInBackgroundSuspendCard");

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r8;

     label12:
        $r9 = newarray (java.lang.Object)[3];

        $z0 = virtualinvoke $r6.<com.ichi2.libanki.Collection: boolean getDirty()>();

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r9[0] = $r17;

        $r18 = virtualinvoke $r13.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $r9[1] = $r18;

        $l1 = virtualinvoke r11.<com.ichi2.libanki.Card: long getId()>();

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r9[2] = $r19;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void markUndo(com.ichi2.libanki.Collection$DismissType,java.lang.Object[])>(r12, $r9);

        $l1 = virtualinvoke $r13.<com.ichi2.libanki.Note: long getId()>();

        virtualinvoke $r7.<com.ichi2.libanki.Sched: void buryNote(long)>($l1);

        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 1;

     label13:
        goto label04;

     label14:
        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r11;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void markUndo(com.ichi2.libanki.Collection$DismissType,java.lang.Object[])>(r12, $r9);

        $i0 = virtualinvoke r11.<com.ichi2.libanki.Card: int getQueue()>();

     label15:
        if $i0 != -1 goto label19;

     label16:
        r2 = newarray (long)[1];

        $l1 = virtualinvoke r11.<com.ichi2.libanki.Card: long getId()>();

        r2[0] = $l1;

        virtualinvoke $r7.<com.ichi2.libanki.Sched: void unsuspendCards(long[])>(r2);

     label17:
        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 1;

     label18:
        goto label04;

     label19:
        r2 = newarray (long)[1];

        $l1 = virtualinvoke r11.<com.ichi2.libanki.Card: long getId()>();

        r2[0] = $l1;

        virtualinvoke $r7.<com.ichi2.libanki.Sched: void suspendCards(long[])>(r2);

     label20:
        goto label17;

     label21:
        $r18 = virtualinvoke $r13.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $i0 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        r2 = newarray (long)[$i0];

     label22:
        $i0 = 0;

     label23:
        $i2 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

     label24:
        if $i0 >= $i2 goto label27;

     label25:
        r10 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r21 = (com.ichi2.libanki.Card) r10;

        $l1 = virtualinvoke $r21.<com.ichi2.libanki.Card: long getId()>();

        r2[$i0] = $l1;

     label26:
        $i0 = $i0 + 1;

        goto label23;

     label27:
        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r18;

        $l1 = virtualinvoke r11.<com.ichi2.libanki.Card: long getId()>();

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r9[1] = $r19;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void markUndo(com.ichi2.libanki.Collection$DismissType,java.lang.Object[])>(r12, $r9);

        virtualinvoke $r7.<com.ichi2.libanki.Sched: void suspendCards(long[])>(r2);

        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 1;

     label28:
        goto label04;

     label29:
        $r18 = virtualinvoke $r13.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = $r13;

        $r9[1] = $r18;

        $l1 = virtualinvoke r11.<com.ichi2.libanki.Card: long getId()>();

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r9[2] = $r19;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void markUndo(com.ichi2.libanki.Collection$DismissType,java.lang.Object[])>(r12, $r9);

        r2 = newarray (long)[1];

        $l1 = virtualinvoke $r13.<com.ichi2.libanki.Note: long getId()>();

        r2[0] = $l1;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void remNotes(long[])>(r2);

        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 1;

     label30:
        goto label04;

        catch java.lang.RuntimeException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.RuntimeException from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.RuntimeException from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label14 to label15 with label09;
        catch java.lang.Throwable from label16 to label18 with label09;
        catch java.lang.Throwable from label19 to label20 with label09;
        catch java.lang.Throwable from label21 to label22 with label09;
        catch java.lang.Throwable from label23 to label24 with label09;
        catch java.lang.Throwable from label25 to label26 with label09;
        catch java.lang.Throwable from label27 to label28 with label09;
        catch java.lang.Throwable from label29 to label30 with label09;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundEmptyCram(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Sched $r6;
        com.ichi2.libanki.Decks $r7;
        long $l0;
        com.ichi2.async.DeckTask$TaskData $r8;
        java.lang.Boolean $r9;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundEmptyCram", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r7 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r7.<com.ichi2.libanki.Decks: long selected()>();

        virtualinvoke $r6.<com.ichi2.libanki.Sched: void emptyDyn(long)>($l0);

        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        $r2 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r2[0] = $r9;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r2);

        $r1[0] = $r8;

        $r8 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundUpdateValuesFromDeck(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r8;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundExportApkg(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.libanki.AnkiPackageExporter r2;
        java.lang.Object[] $r3;
        com.ichi2.async.DeckTask$TaskData $r4;
        java.lang.Object r5;
        com.ichi2.libanki.Collection r6;
        java.lang.String r7;
        java.lang.Long r8;
        java.lang.Boolean $r9;
        boolean $z0, $z1;
        android.content.Context $r10;
        java.io.FileNotFoundException r11;
        java.io.IOException r12;
        org.json.JSONException r13;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundExportApkg", $r3);

        $r4 = $r1[0];

        $r3 = virtualinvoke $r4.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r5 = $r3[0];

        r6 = (com.ichi2.libanki.Collection) r5;

        r5 = $r3[1];

        r7 = (java.lang.String) r5;

        r5 = $r3[2];

        r8 = (java.lang.Long) r5;

        r5 = $r3[3];

        $r9 = (java.lang.Boolean) r5;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        r5 = $r3[4];

        $r9 = (java.lang.Boolean) r5;

        $z1 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        r2 = new com.ichi2.libanki.AnkiPackageExporter;

     label1:
        specialinvoke r2.<com.ichi2.libanki.AnkiPackageExporter: void <init>(com.ichi2.libanki.Collection)>(r6);

        virtualinvoke r2.<com.ichi2.libanki.AnkiPackageExporter: void setIncludeSched(boolean)>($z0);

        virtualinvoke r2.<com.ichi2.libanki.AnkiPackageExporter: void setIncludeMedia(boolean)>($z1);

        virtualinvoke r2.<com.ichi2.libanki.AnkiPackageExporter: void setDid(java.lang.Long)>(r8);

     label2:
        $r10 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

     label3:
        virtualinvoke r2.<com.ichi2.libanki.AnkiPackageExporter: void exportInto(java.lang.String,android.content.Context)>(r7, $r10);

     label4:
        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.String)>(r7);

        return $r4;

     label5:
        r11 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r11, "FileNotFoundException in doInBackgroundExportApkg", $r3);

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

     label6:
        r12 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r12, "IOException in doInBackgroundExportApkg", $r3);

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

     label7:
        r13 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r13, "JSOnException in doInBackgroundExportApkg", $r3);

        $r4 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r4.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r4;

        catch java.io.FileNotFoundException from label1 to label2 with label5;
        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundImportAdd(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.libanki.importer.AnkiPackageImporter r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.AnkiDroidApp $r4;
        android.content.Context $r5;
        android.content.res.Resources $r6;
        com.ichi2.anki.CollectionHelper $r7;
        com.ichi2.libanki.Collection $r8;
        com.ichi2.async.DeckTask$TaskData $r9;
        java.lang.String $r10;
        com.ichi2.async.DeckTask$ProgressCallback $r11;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundImportAdd", $r3);

        $r4 = staticinvoke <com.ichi2.anki.AnkiDroidApp: com.ichi2.anki.AnkiDroidApp getInstance()>();

        $r5 = virtualinvoke $r4.<com.ichi2.anki.AnkiDroidApp: android.content.Context getBaseContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r9 = $r1[0];

        $r10 = virtualinvoke $r9.<com.ichi2.async.DeckTask$TaskData: java.lang.String getString()>();

        r2 = new com.ichi2.libanki.importer.AnkiPackageImporter;

        specialinvoke r2.<com.ichi2.libanki.importer.AnkiPackageImporter: void <init>(com.ichi2.libanki.Collection,java.lang.String)>($r8, $r10);

        $r11 = new com.ichi2.async.DeckTask$ProgressCallback;

        specialinvoke $r11.<com.ichi2.async.DeckTask$ProgressCallback: void <init>(com.ichi2.async.DeckTask,com.ichi2.async.DeckTask,android.content.res.Resources)>(r0, r0, $r6);

        virtualinvoke r2.<com.ichi2.libanki.importer.AnkiPackageImporter: void setProgressCallback(com.ichi2.async.DeckTask$ProgressCallback)>($r11);

        virtualinvoke r2.<com.ichi2.libanki.importer.AnkiPackageImporter: void run()>();

        $r9 = new com.ichi2.async.DeckTask$TaskData;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r2;

        specialinvoke $r9.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r3);

        return $r9;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundImportReplace(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.io.File r2, r3, $r23;
        com.google.gson.stream.JsonReader r4;
        java.util.HashMap r5, r6;
        java.util.zip.ZipFile r7;
        java.lang.Object[] $r8;
        com.ichi2.anki.CollectionHelper $r9;
        android.content.Context $r10;
        com.ichi2.libanki.Collection $r11, r21, $r22;
        com.ichi2.async.DeckTask$TaskData $r12;
        java.lang.String $r13, $r16, $r17;
        com.ichi2.anki.AnkiDroidApp $r14;
        android.content.res.Resources $r15;
        boolean $z0;
        java.lang.String[] $r18;
        java.io.IOException r19, r20, r35;
        java.lang.Exception r24, $r36;
        java.lang.Throwable $r25;
        java.io.FileReader $r26;
        java.lang.RuntimeException r27;
        com.ichi2.libanki.Media $r28;
        int $i0, i1, $i2;
        java.util.Set $r29;
        java.util.Iterator $r30;
        java.lang.Object $r31;
        java.util.Map$Entry r32;
        java.lang.Integer $r33;
        java.io.FileNotFoundException r34;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundImportReplace", $r8);

        $r9 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r10 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r11 = virtualinvoke $r9.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r10);

        $r12 = $r1[0];

        $r13 = virtualinvoke $r12.<com.ichi2.async.DeckTask$TaskData: java.lang.String getString()>();

        $r14 = staticinvoke <com.ichi2.anki.AnkiDroidApp: com.ichi2.anki.AnkiDroidApp getInstance()>();

        $r10 = virtualinvoke $r14.<com.ichi2.anki.AnkiDroidApp: android.content.Context getBaseContext()>();

        $r15 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        $r16 = virtualinvoke $r11.<com.ichi2.libanki.Collection: java.lang.String getPath()>();

        r2 = new java.io.File;

        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r16);

        r3 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "tmpzip");

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label01;

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r2);

     label01:
        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "collection.anki2");

        $r17 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        r7 = new java.util.zip.ZipFile;

        r3 = new java.io.File;

     label02:
        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r13);

        specialinvoke r7.<java.util.zip.ZipFile: void <init>(java.io.File,int)>(r3, 1);

     label03:
        $r13 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

     label04:
        $r18 = newarray (java.lang.String)[2];

        $r18[0] = "collection.anki2";

        $r18[1] = "media";

     label05:
        staticinvoke <com.ichi2.libanki.Utils: void unzipFiles(java.util.zip.ZipFile,java.lang.String,java.lang.String[],java.util.Map)>(r7, $r13, $r18, null);

     label06:
        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r17);

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label09;

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(int,java.lang.Object[],boolean)>(-2, null, 0);

        return $r12;

     label07:
        r19 := @caughtexception;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r19, "doInBackgroundImportReplace - Error while unzipping", $r8);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r19, "doInBackgroundImportReplace0");

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r12;

     label08:
        r20 := @caughtexception;

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(int,java.lang.Object[],boolean)>(-2, null, 0);

        return $r12;

     label09:
        r21 = null;

     label10:
        $r10 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r22 = staticinvoke <com.ichi2.libanki.Storage: com.ichi2.libanki.Collection Collection(android.content.Context,java.lang.String)>($r10, $r17);

     label11:
        r21 = $r22;

     label12:
        $z0 = virtualinvoke $r22.<com.ichi2.libanki.Collection: boolean validCollection()>();

     label13:
        if $z0 != 0 goto label18;

     label14:
        virtualinvoke $r22.<com.ichi2.libanki.Collection: void close()>();

     label15:
        $r12 = new com.ichi2.async.DeckTask$TaskData;

     label16:
        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(int,java.lang.Object[],boolean)>(-2, null, 0);

     label17:
        if $r22 == null goto label78;

        virtualinvoke $r22.<com.ichi2.libanki.Collection: void close()>();

        return $r12;

     label18:
        if $r22 == null goto label19;

        virtualinvoke $r22.<com.ichi2.libanki.Collection: void close()>();

     label19:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        $r13 = virtualinvoke $r15.<android.content.res.Resources: java.lang.String getString(int)>(2131231084);

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.String)>($r13);

        $r1[0] = $r12;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

        if $r11 == null goto label20;

        $r9 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r9.<com.ichi2.anki.CollectionHelper: void closeCollection(boolean)>(1);

        $r9 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r9.<com.ichi2.anki.CollectionHelper: void lockCollection()>();

        staticinvoke <com.ichi2.anki.BackupManager: boolean performBackupInBackground(java.lang.String,boolean)>($r16, 1);

     label20:
        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r17);

        $r23 = new java.io.File;

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>($r16);

        $z0 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>($r23);

        if $z0 != 0 goto label28;

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(int,java.lang.Object[],boolean)>(-2, null, 0);

        return $r12;

     label21:
        r24 := @caughtexception;

     label22:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Error opening new collection file... probably it\'s invalid", $r8);

     label23:
        virtualinvoke r21.<com.ichi2.libanki.Collection: void close()>();

     label24:
        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(int,java.lang.Object[],boolean)>(-2, null, 0);

     label25:
        if r21 == null goto label78;

        virtualinvoke r21.<com.ichi2.libanki.Collection: void close()>();

        return $r12;

     label26:
        $r25 := @caughtexception;

        if r21 == null goto label27;

        virtualinvoke r21.<com.ichi2.libanki.Collection: void close()>();

     label27:
        throw $r25;

     label28:
        $r9 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r9.<com.ichi2.anki.CollectionHelper: void unlockCollection()>();

     label29:
        r5 = new java.util.HashMap;

     label30:
        specialinvoke r5.<java.util.HashMap: void <init>()>();

     label31:
        r6 = new java.util.HashMap;

     label32:
        specialinvoke r6.<java.util.HashMap: void <init>()>();

     label33:
        r3 = new java.io.File;

     label34:
        $r16 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r16, "media");

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

     label35:
        if $z0 == 0 goto label43;

        r4 = new com.google.gson.stream.JsonReader;

        $r26 = new java.io.FileReader;

     label36:
        specialinvoke $r26.<java.io.FileReader: void <init>(java.io.File)>(r3);

        specialinvoke r4.<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>($r26);

        virtualinvoke r4.<com.google.gson.stream.JsonReader: void beginObject()>();

     label37:
        $z0 = virtualinvoke r4.<com.google.gson.stream.JsonReader: boolean hasNext()>();

     label38:
        if $z0 == 0 goto label42;

     label39:
        $r16 = virtualinvoke r4.<com.google.gson.stream.JsonReader: java.lang.String nextName()>();

        $r17 = virtualinvoke r4.<com.google.gson.stream.JsonReader: java.lang.String nextString()>();

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r16);

        virtualinvoke r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

     label40:
        goto label37;

     label41:
        r27 := @caughtexception;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r27, "doInBackgroundImportReplace - RuntimeException", $r8);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r27, "doInBackgroundImportReplace1");

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r12;

     label42:
        virtualinvoke r4.<com.google.gson.stream.JsonReader: void endObject()>();

        virtualinvoke r4.<com.google.gson.stream.JsonReader: void close()>();

     label43:
        $r28 = virtualinvoke $r11.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r16 = virtualinvoke $r28.<com.ichi2.libanki.Media: java.lang.String dir()>();

        $i0 = virtualinvoke r5.<java.util.HashMap: int size()>();

     label44:
        i1 = 0;

     label45:
        $r29 = virtualinvoke r5.<java.util.HashMap: java.util.Set entrySet()>();

        $r30 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>();

     label46:
        $z0 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

     label47:
        if $z0 == 0 goto label72;

     label48:
        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

     label49:
        r32 = (java.util.Map$Entry) $r31;

     label50:
        $r31 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

     label51:
        $r17 = (java.lang.String) $r31;

     label52:
        $r31 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

     label53:
        $r13 = (java.lang.String) $r31;

     label54:
        r3 = new java.io.File;

     label55:
        specialinvoke r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r16, $r17);

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

     label56:
        if $z0 != 0 goto label59;

     label57:
        $r18 = newarray (java.lang.String)[1];

        $r18[0] = $r13;

     label58:
        staticinvoke <com.ichi2.libanki.Utils: void unzipFiles(java.util.zip.ZipFile,java.lang.String,java.lang.String[],java.util.Map)>(r7, $r16, $r18, r6);

     label59:
        i1 = i1 + 1;

     label60:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

     label61:
        $r12 = new com.ichi2.async.DeckTask$TaskData;

     label62:
        $r8 = newarray (java.lang.Object)[1];

     label63:
        $i2 = i1 + 1;

        $i2 = $i2 * 100;

     label64:
        $i2 = $i2 / $i0;

     label65:
        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

     label66:
        $r8[0] = $r33;

     label67:
        $r17 = virtualinvoke $r15.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231074, $r8);

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.String)>($r17);

     label68:
        $r1[0] = $r12;

     label69:
        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

     label70:
        goto label46;

     label71:
        r34 := @caughtexception;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r34, "doInBackgroundImportReplace - FileNotFoundException", $r8);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r34, "doInBackgroundImportReplace2");

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r12;

     label72:
        virtualinvoke r7.<java.util.zip.ZipFile: void close()>();

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r2);

     label73:
        $r12 = new com.ichi2.async.DeckTask$TaskData;

     label74:
        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

     label75:
        return $r12;

     label76:
        r35 := @caughtexception;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r35, "doInBackgroundImportReplace - IOException", $r8);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r35, "doInBackgroundImportReplace3");

        $r12 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r12.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r12;

     label77:
        $r36 := @caughtexception;

        goto label24;

     label78:
        return $r12;

        catch java.io.IOException from label02 to label03 with label07;
        catch java.io.IOException from label03 to label04 with label08;
        catch java.io.IOException from label05 to label06 with label08;
        catch java.lang.Exception from label10 to label11 with label21;
        catch java.lang.Exception from label12 to label13 with label21;
        catch java.lang.Exception from label14 to label15 with label21;
        catch java.lang.Exception from label16 to label17 with label21;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label17 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Exception from label23 to label24 with label77;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.RuntimeException from label28 to label29 with label41;
        catch java.lang.RuntimeException from label30 to label31 with label41;
        catch java.lang.RuntimeException from label32 to label33 with label41;
        catch java.lang.RuntimeException from label34 to label35 with label41;
        catch java.lang.RuntimeException from label36 to label38 with label41;
        catch java.lang.RuntimeException from label39 to label40 with label41;
        catch java.io.FileNotFoundException from label28 to label29 with label71;
        catch java.io.FileNotFoundException from label30 to label31 with label71;
        catch java.io.FileNotFoundException from label32 to label33 with label71;
        catch java.io.FileNotFoundException from label34 to label35 with label71;
        catch java.io.FileNotFoundException from label36 to label38 with label71;
        catch java.io.FileNotFoundException from label39 to label40 with label71;
        catch java.io.IOException from label28 to label29 with label76;
        catch java.io.IOException from label30 to label31 with label76;
        catch java.io.IOException from label32 to label33 with label76;
        catch java.io.IOException from label34 to label35 with label76;
        catch java.io.IOException from label36 to label38 with label76;
        catch java.io.IOException from label39 to label40 with label76;
        catch java.lang.RuntimeException from label42 to label44 with label41;
        catch java.lang.RuntimeException from label45 to label47 with label41;
        catch java.lang.RuntimeException from label48 to label54 with label41;
        catch java.lang.RuntimeException from label55 to label56 with label41;
        catch java.lang.RuntimeException from label57 to label59 with label41;
        catch java.lang.RuntimeException from label60 to label61 with label41;
        catch java.lang.RuntimeException from label62 to label63 with label41;
        catch java.lang.RuntimeException from label64 to label70 with label41;
        catch java.io.FileNotFoundException from label42 to label44 with label71;
        catch java.io.FileNotFoundException from label45 to label47 with label71;
        catch java.io.FileNotFoundException from label48 to label49 with label71;
        catch java.io.FileNotFoundException from label50 to label51 with label71;
        catch java.io.FileNotFoundException from label52 to label53 with label71;
        catch java.io.FileNotFoundException from label55 to label56 with label71;
        catch java.io.FileNotFoundException from label58 to label59 with label71;
        catch java.io.FileNotFoundException from label65 to label66 with label71;
        catch java.io.FileNotFoundException from label67 to label68 with label71;
        catch java.io.FileNotFoundException from label69 to label70 with label71;
        catch java.io.IOException from label42 to label44 with label76;
        catch java.io.IOException from label45 to label47 with label76;
        catch java.io.IOException from label48 to label49 with label76;
        catch java.io.IOException from label50 to label51 with label76;
        catch java.io.IOException from label52 to label53 with label76;
        catch java.io.IOException from label55 to label56 with label76;
        catch java.io.IOException from label58 to label59 with label76;
        catch java.io.IOException from label65 to label66 with label76;
        catch java.io.IOException from label67 to label68 with label76;
        catch java.io.IOException from label69 to label70 with label76;
        catch java.lang.RuntimeException from label72 to label73 with label41;
        catch java.lang.RuntimeException from label74 to label75 with label41;
        catch java.io.FileNotFoundException from label72 to label73 with label71;
        catch java.io.FileNotFoundException from label74 to label75 with label71;
        catch java.io.IOException from label72 to label73 with label76;
        catch java.io.IOException from label74 to label75 with label76;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundLoadDeckCounts(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.RuntimeException r2;
        java.lang.Object[] r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Sched $r7;
        java.util.List $r8;
        com.ichi2.async.DeckTask$TaskData $r9;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundLoadDeckCounts", r3);

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

     label1:
        r3 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Sched: java.util.List deckDueTree()>();

        r3[0] = $r8;

     label2:
        $r9 = new com.ichi2.async.DeckTask$TaskData;

     label3:
        specialinvoke $r9.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>(r3);

     label4:
        return $r9;

     label5:
        r2 := @caughtexception;

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "doInBackgroundLoadDeckCounts - error", r3);

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label5;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundRebuildCram(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Sched $r6;
        com.ichi2.libanki.Decks $r7;
        long $l0;
        com.ichi2.async.DeckTask$TaskData $r8;
        java.lang.Boolean $r9;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundRebuildCram", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r7 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r7.<com.ichi2.libanki.Decks: long selected()>();

        virtualinvoke $r6.<com.ichi2.libanki.Sched: java.util.List rebuildDyn(long)>($l0);

        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        $r2 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r2[0] = $r9;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r2);

        $r1[0] = $r8;

        $r8 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundUpdateValuesFromDeck(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r8;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundRemoveTemplate(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.anki.exception.ConfirmModSchemaException r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.async.DeckTask$TaskData $r7;
        java.lang.Object r8;
        org.json.JSONObject r9, r10;
        com.ichi2.libanki.Models $r11;
        boolean $z0;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundRemoveTemplate", $r3);

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = $r1[0];

        $r3 = virtualinvoke $r7.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r8 = $r3[0];

        r9 = (org.json.JSONObject) r8;

        r8 = $r3[1];

        r10 = (org.json.JSONObject) r8;

     label1:
        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $z0 = virtualinvoke $r11.<com.ichi2.libanki.Models: boolean remTemplate(org.json.JSONObject,org.json.JSONObject)>(r9, r10);

     label2:
        if $z0 != 0 goto label5;

        $r7 = new com.ichi2.async.DeckTask$TaskData;

     label3:
        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.String,boolean)>("removeTemplateFailed", 0);

     label4:
        return $r7;

     label5:
        virtualinvoke $r6.<com.ichi2.libanki.Collection: void save()>();

     label6:
        $r7 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r7;

     label7:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("doInBackgroundRemoveTemplate :: ConfirmModSchemaException", $r3);

        $r7 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r7;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label7;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label3 to label4 with label7;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label5 to label6 with label7;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundRenderBrowserQA(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        float f0, $f1;
        int $i0, $i1, $i2;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        java.lang.Object r7;
        java.util.List r8;
        java.lang.Integer r9, r10;
        java.util.Map $r11;
        java.lang.String $r12;
        boolean $z0;
        long $l3;
        com.ichi2.libanki.Card $r13;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundRenderBrowserQA", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[0];

        r8 = (java.util.List) r7;

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[1];

        r9 = (java.lang.Integer) r7;

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[2];

        r10 = (java.lang.Integer) r7;

        $i1 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

     label1:
        $i0 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + $i2;

        if $i1 >= $i0 goto label4;

        if $i1 < 0 goto label3;

        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        if $i1 >= $i0 goto label3;

        r7 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>($i1);

        $r11 = (java.util.Map) r7;

        r7 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>("answer");

        $r12 = (java.lang.String) r7;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

        r7 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>($i1);

        $r11 = (java.util.Map) r7;

        r7 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>("id");

        $r12 = (java.lang.String) r7;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r12, 10);

        $r13 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card getCard(long)>($l3);

        r7 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>($i1);

        $r11 = (java.util.Map) r7;

        staticinvoke <com.ichi2.anki.CardBrowser: void updateSearchItemQA(java.util.Map,com.ichi2.libanki.Card)>($r11, $r13);

        $z0 = virtualinvoke r0.<com.ichi2.async.DeckTask: boolean isCancelled()>();

        if $z0 == 0 goto label2;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundRenderBrowserQA was aborted", $r2);

        return null;

     label2:
        f0 = (float) $i1;

        $i0 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        $f1 = (float) $i0;

        f0 = f0 / $f1;

        f0 = f0 * 100.0F;

        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        $i0 = (int) f0;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(int)>($i0);

        $r1[0] = $r6;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(java.util.List)>(r8);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundReorder(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        java.lang.Object r7;
        org.json.JSONObject r8;
        com.ichi2.libanki.Sched $r9;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundReorder", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[0];

        r8 = (org.json.JSONObject) r7;

        $r9 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r9.<com.ichi2.libanki.Sched: void resortConf(org.json.JSONObject)>(r8);

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundRepairDeck(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        boolean $z0;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundRepairDeck", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        if $r5 == null goto label1;

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label1:
        $r6 = new com.ichi2.async.DeckTask$TaskData;

        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean repairCollection(com.ichi2.libanki.Collection)>($r5);

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>($z0);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundSaveCollection(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.RuntimeException r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundSaveCollection", $r3);

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        if $r6 == null goto label2;

     label1:
        virtualinvoke $r6.<com.ichi2.libanki.Collection: void save()>();

     label2:
        return null;

     label3:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Error on saving deck in background", $r3);

        goto label2;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundSaveModel(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        java.lang.Object r7;
        org.json.JSONObject r8;
        com.ichi2.libanki.Models $r9;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundSaveModel", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[0];

        r8 = (org.json.JSONObject) r7;

        $r9 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r9.<com.ichi2.libanki.Models: void save(org.json.JSONObject,boolean)>(r8, 1);

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void reset()>();

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void save()>();

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundSearchCards(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.CollectionHelper $r3;
        android.content.Context $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        java.lang.Object r7;
        java.util.HashMap r8;
        java.lang.String r9;
        java.lang.Boolean r10;
        java.lang.Integer $r11;
        int $i0, i1, $i2;
        boolean $z0;
        java.util.List $r12;
        java.util.Map $r13;
        long $l3;
        com.ichi2.libanki.Card $r14;
        com.ichi2.libanki.Decks $r15;
        java.lang.Long[] $r16;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundSearchCards", $r2);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r4);

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[0];

        r8 = (java.util.HashMap) r7;

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[1];

        r9 = (java.lang.String) r7;

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[2];

        r10 = (java.lang.Boolean) r7;

        $r6 = $r1[0];

        $r2 = virtualinvoke $r6.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        r7 = $r2[3];

        $r11 = (java.lang.Integer) r7;

        $i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $z0 = virtualinvoke r10.<java.lang.Boolean: boolean booleanValue()>();

        $r12 = virtualinvoke $r5.<com.ichi2.libanki.Collection: java.util.List findCardsForCardBrowser(java.lang.String,boolean,java.util.Map)>(r9, $z0, r8);

        i1 = 0;

     label1:
        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        if i1 >= $i2 goto label2;

        r7 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i1);

        $r13 = (java.util.Map) r7;

        r7 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>("id");

        r9 = (java.lang.String) r7;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r9, 10);

        $r14 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card getCard(long)>($l3);

        r7 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i1);

        $r13 = (java.util.Map) r7;

        staticinvoke <com.ichi2.anki.CardBrowser: void updateSearchItemQA(java.util.Map,com.ichi2.libanki.Card)>($r13, $r14);

        i1 = i1 + 1;

        goto label1;

     label2:
        $z0 = virtualinvoke r0.<com.ichi2.async.DeckTask: boolean isCancelled()>();

        if $z0 == 0 goto label3;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundSearchCards was cancelled so return null", $r2);

        return null;

     label3:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(java.util.List)>($r12);

        $r1[0] = $r6;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        $r15 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r16 = virtualinvoke $r15.<com.ichi2.libanki.Decks: java.lang.Long[] allIds()>();

        $i0 = virtualinvoke $r5.<com.ichi2.libanki.Collection: int cardCount(java.lang.Long[])>($r16);

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(int)>($i0);

        return $r6;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundUndo(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.RuntimeException r2;
        com.ichi2.async.DeckTask$TaskData $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Sched $r7;
        com.ichi2.libanki.DB $r8;
        io.requery.android.database.sqlite.SQLiteDatabase $r9;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Card $r10, r11;
        java.lang.Throwable $r12;
        java.lang.Object[] $r13;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

     label01:
        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r9.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label02:
        $l0 = virtualinvoke $r6.<com.ichi2.libanki.Collection: long undo()>();

     label03:
        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label10;

     label04:
        $r10 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card getCard(long)>($l0);

     label05:
        r11 = $r10;

     label06:
        virtualinvoke $r10.<com.ichi2.libanki.Card: void startTimer()>();

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void reset()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r7.<com.ichi2.libanki.Sched: void decrementCounts(com.ichi2.libanki.Card)>($r10);

        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 1;

     label07:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(com.ichi2.libanki.Card,int)>(r11, 0);

        $r1[0] = $r3;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r9.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label08:
        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r9.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label09:
        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r3;

     label10:
        virtualinvoke $r6.<com.ichi2.libanki.Collection: void reset()>();

        $r10 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.libanki.Card getCard(com.ichi2.libanki.Sched)>($r7);

     label11:
        r11 = $r10;

        goto label07;

     label12:
        $r12 := @caughtexception;

     label13:
        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r9.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r12;

     label14:
        r2 := @caughtexception;

        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "doInBackgroundUndo - RuntimeException on undoing", $r13);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r2, "doInBackgroundUndo");

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r3;

        catch java.lang.RuntimeException from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.RuntimeException from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.RuntimeException from label13 to label14 with label14;
    }
    private com.ichi2.async.DeckTask$TaskData doInBackgroundUpdateNote(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.RuntimeException r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Sched $r7;
        com.ichi2.async.DeckTask$TaskData $r8;
        com.ichi2.libanki.Card $r9, r16;
        com.ichi2.libanki.Note $r10;
        boolean $z0;
        com.ichi2.libanki.DB $r11;
        io.requery.android.database.sqlite.SQLiteDatabase $r12;
        com.ichi2.libanki.Decks $r13;
        java.util.LinkedList $r14;
        long $l0;
        java.lang.Long $r15;
        java.lang.String $r17;
        java.lang.Throwable $r18;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundUpdateNote", $r3);

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r8 = $r1[0];

        $r9 = virtualinvoke $r8.<com.ichi2.async.DeckTask$TaskData: com.ichi2.libanki.Card getCard()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        $r8 = $r1[0];

        $z0 = virtualinvoke $r8.<com.ichi2.async.DeckTask$TaskData: boolean getBoolean()>();

     label01:
        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r12.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label02:
        virtualinvoke $r10.<com.ichi2.libanki.Note: void flush()>();

        virtualinvoke $r9.<com.ichi2.libanki.Card: void flush()>();

     label03:
        if $z0 == 0 goto label13;

     label04:
        $r13 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r14 = virtualinvoke $r13.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        $l0 = virtualinvoke $r9.<com.ichi2.libanki.Card: long getDid()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r14.<java.util.LinkedList: boolean contains(java.lang.Object)>($r15);

     label05:
        if $z0 == 0 goto label11;

        r16 = $r9;

     label06:
        virtualinvoke $r9.<com.ichi2.libanki.Card: void load()>();

        virtualinvoke $r9.<com.ichi2.libanki.Card: java.lang.String q(boolean)>(1);

     label07:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(com.ichi2.libanki.Card)>(r16);

        $r1[0] = $r8;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

     label08:
        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r12.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label09:
        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r12.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label10:
        $r8 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(1);

        return $r8;

     label11:
        $r9 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.libanki.Card getCard(com.ichi2.libanki.Sched)>($r7);

     label12:
        r16 = $r9;

        goto label07;

     label13:
        $r1 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        $r17 = virtualinvoke $r10.<com.ichi2.libanki.Note: java.lang.String stringTags()>();

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(com.ichi2.libanki.Card,java.lang.String)>($r9, $r17);

        $r1[0] = $r8;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r1);

     label14:
        goto label08;

     label15:
        $r18 := @caughtexception;

     label16:
        $r11 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r12.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r18;

     label17:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "doInBackgroundUpdateNote - RuntimeException on updating fact", $r3);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r2, "doInBackgroundUpdateNote");

        $r8 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>(0);

        return $r8;

        catch java.lang.RuntimeException from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label09 with label15;
        catch java.lang.RuntimeException from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.RuntimeException from label16 to label17 with label17;
    }
    private transient com.ichi2.async.DeckTask$TaskData doInBackgroundUpdateValuesFromDeck(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        java.lang.RuntimeException r2;
        java.lang.Object[] $r3;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Sched $r7;
        com.ichi2.async.DeckTask$TaskData $r8;
        java.lang.Object $r9;
        java.lang.Boolean $r10;
        boolean $z0;
        int[] $r11;
        int $i0, $i1, $i2;
        java.lang.Integer $r12;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("doInBackgroundUpdateValuesFromDeck", $r3);

     label1:
        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r8 = $r1[0];

        $r3 = virtualinvoke $r8.<com.ichi2.async.DeckTask$TaskData: java.lang.Object[] getObjArray()>();

        $r9 = $r3[0];

        $r10 = (java.lang.Boolean) $r9;

        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        if $z0 == 0 goto label4;

     label3:
        virtualinvoke $r7.<com.ichi2.libanki.Sched: void reset()>();

     label4:
        $r11 = virtualinvoke $r7.<com.ichi2.libanki.Sched: int[] counts()>();

        $i0 = virtualinvoke $r7.<com.ichi2.libanki.Sched: int totalNewForCurrentDeck()>();

        $i1 = virtualinvoke $r7.<com.ichi2.libanki.Sched: int cardCount()>();

     label5:
        $r8 = new com.ichi2.async.DeckTask$TaskData;

     label6:
        $r3 = newarray (java.lang.Object)[6];

        $i2 = $r11[0];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r12;

        $i2 = $r11[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[1] = $r12;

        $i2 = $r11[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[2] = $r12;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[3] = $r12;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[4] = $r12;

        $i0 = virtualinvoke $r7.<com.ichi2.libanki.Sched: int eta(int[])>($r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[5] = $r12;

        specialinvoke $r8.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r3);

     label7:
        return $r8;

     label8:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "doInBackgroundUpdateValuesFromDeck - an error occurred", $r3);

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label8;
        catch java.lang.RuntimeException from label3 to label5 with label8;
        catch java.lang.RuntimeException from label6 to label7 with label8;
    }
    private com.ichi2.libanki.Card getCard(com.ichi2.libanki.Sched)
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.libanki.Sched $r1;
        com.ichi2.libanki.Card $r2;
        boolean $z0;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.libanki.Sched;

        $z0 = <com.ichi2.async.DeckTask: boolean sHadCardQueue>;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<com.ichi2.libanki.Sched: void reset()>();

        <com.ichi2.async.DeckTask: boolean sHadCardQueue> = 0;

     label1:
        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card getCard()>();

        return $r2;
    }
    public static com.ichi2.async.DeckTask getInstance()
    {
        java.lang.Throwable $r0;
        com.ichi2.async.DeckTask r1;

        entermonitor class "Lcom/ichi2/async/DeckTask;";

     label1:
        r1 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label2:
        exitmonitor class "Lcom/ichi2/async/DeckTask;";

        return r1;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lcom/ichi2/async/DeckTask;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static transient com.ichi2.async.DeckTask launchDeckTask(int, com.ichi2.async.DeckTask$Listener, com.ichi2.async.DeckTask$TaskData[])
    {
        int $i0;
        com.ichi2.async.DeckTask$Listener $r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.async.DeckTask r2, $r3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: com.ichi2.async.DeckTask$Listener;

        $r1 := @parameter2: com.ichi2.async.DeckTask$TaskData[];

        r2 = new com.ichi2.async.DeckTask;

        $r3 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

        specialinvoke r2.<com.ichi2.async.DeckTask: void <init>(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask)>($i0, $r0, $r3);

        virtualinvoke r2.<com.ichi2.async.DeckTask: android.os.AsyncTask execute(java.lang.Object[])>($r1);

        return r2;
    }
    public static void waitToFinish()
    {
        staticinvoke <com.ichi2.async.DeckTask: boolean waitToFinish(java.lang.Integer)>(null);

        return;
    }
    public static boolean waitToFinish(java.lang.Integer)
    {
        java.lang.Integer $r0, $r6;
        java.lang.Exception r1;
        com.ichi2.async.DeckTask $r2;
        android.os.AsyncTask$Status $r3, $r4;
        java.lang.Object[] $r5;
        int $i0;
        long $l1;
        java.util.concurrent.TimeUnit $r7;

        $r0 := @parameter0: java.lang.Integer;

        $r2 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

        if $r2 == null goto label15;

        $r2 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label01:
        $r3 = virtualinvoke $r2.<com.ichi2.async.DeckTask: android.os.AsyncTask$Status getStatus()>();

     label02:
        $r4 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status FINISHED>;

        if $r3 == $r4 goto label15;

     label03:
        $r5 = newarray (java.lang.Object)[1];

     label04:
        $r2 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label05:
        $i0 = $r2.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("DeckTask: waiting for task %d to finish...", $r5);

     label06:
        if $r0 == null goto label11;

        $r2 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label07:
        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

     label08:
        $l1 = (long) $i0;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

     label09:
        virtualinvoke $r2.<com.ichi2.async.DeckTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l1, $r7);

     label10:
        return 1;

     label11:
        $r2 = <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance>;

     label12:
        virtualinvoke $r2.<com.ichi2.async.DeckTask: java.lang.Object get()>();

     label13:
        return 1;

     label14:
        r1 := @caughtexception;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Exception waiting for task to finish", $r5);

        return 0;

     label15:
        return 1;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Exception from label09 to label10 with label14;
        catch java.lang.Exception from label12 to label13 with label14;
    }
    public transient com.ichi2.async.DeckTask$TaskData doInBackGroundFindEmptyCards(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.anki.CollectionHelper $r2;
        android.content.Context $r3;
        com.ichi2.libanki.Collection $r4;
        java.util.List $r5;
        com.ichi2.async.DeckTask$TaskData $r6;
        java.lang.Object[] $r7;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        $r2 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r3 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r3);

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: java.util.List emptyCids()>();

        $r6 = new com.ichi2.async.DeckTask$TaskData;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r5;

        specialinvoke $r6.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r7);

        return $r6;
    }
    protected transient com.ichi2.async.DeckTask$TaskData doInBackground(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0, $r2;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        android.os.AsyncTask$Status $r3, $r4;
        java.lang.Object[] $r5;
        int $i0;
        java.lang.Integer $r6;
        com.ichi2.anki.AnkiDroidApp $r7;
        android.content.Context $r8;
        com.ichi2.anki.CollectionHelper $r9;
        com.ichi2.libanki.Collection $r10;
        java.lang.InterruptedException r11;
        java.lang.Thread $r12;
        java.util.concurrent.ExecutionException r13;
        java.util.concurrent.CancellationException r14;
        com.ichi2.async.DeckTask$TaskData $r15;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>($r1);

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

        if $r2 == null goto label08;

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

        $r3 = virtualinvoke $r2.<com.ichi2.async.DeckTask: android.os.AsyncTask$Status getStatus()>();

        $r4 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status FINISHED>;

        if $r3 == $r4 goto label08;

        $r5 = newarray (java.lang.Object)[2];

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

        $i0 = $r2.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        $i0 = r0.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Waiting for %d to finish before starting %d", $r5);

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

     label01:
        virtualinvoke $r2.<com.ichi2.async.DeckTask: java.lang.Object get()>();

     label02:
        $r5 = newarray (java.lang.Object)[2];

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

        $i0 = $r2.<com.ichi2.async.DeckTask: int mType>;

     label03:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label04:
        $r5[0] = $r6;

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

     label05:
        $r3 = virtualinvoke $r2.<com.ichi2.async.DeckTask: android.os.AsyncTask$Status getStatus()>();

     label06:
        $r5[1] = $r3;

     label07:
        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Finished waiting for %d to finish. Status= %s", $r5);

     label08:
        <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask sLatestInstance> = r0;

        $r7 = staticinvoke <com.ichi2.anki.AnkiDroidApp: com.ichi2.anki.AnkiDroidApp getInstance()>();

        $r8 = virtualinvoke $r7.<com.ichi2.anki.AnkiDroidApp: android.content.Context getApplicationContext()>();

        r0.<com.ichi2.async.DeckTask: android.content.Context mContext> = $r8;

        $i0 = r0.<com.ichi2.async.DeckTask: int mType>;

        if $i0 == 20 goto label12;

        $r9 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r8 = r0.<com.ichi2.async.DeckTask: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getColSafe(android.content.Context)>($r8);

        if $r10 != null goto label12;

        $r5 = newarray (java.lang.Object)[1];

        $i0 = r0.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Aborting DeckTask %d as Collection could not be opened", $r5);

        return null;

     label09:
        r11 := @caughtexception;

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r12.<java.lang.Thread: void interrupt()>();

        $r5 = newarray (java.lang.Object)[1];

        r0 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

        $i0 = r0.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r11, "interrupted while waiting for previous task: %d", $r5);

        return null;

     label10:
        r13 := @caughtexception;

        $r5 = newarray (java.lang.Object)[1];

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

        $i0 = $r2.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r13, "previously running task failed with exception: %d", $r5);

        goto label08;

     label11:
        r14 := @caughtexception;

        $r5 = newarray (java.lang.Object)[1];

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask>;

        $i0 = $r2.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r14, "previously running task was cancelled: %d", $r5);

        goto label08;

     label12:
        $i0 = r0.<com.ichi2.async.DeckTask: int mType>;

        lookupswitch($i0)
        {
            case 2: goto label15;
            case 3: goto label16;
            case 4: goto label13;
            case 5: goto label13;
            case 6: goto label17;
            case 7: goto label18;
            case 8: goto label19;
            case 9: goto label13;
            case 10: goto label13;
            case 11: goto label21;
            case 12: goto label13;
            case 13: goto label13;
            case 14: goto label22;
            case 15: goto label13;
            case 16: goto label13;
            case 17: goto label13;
            case 18: goto label13;
            case 19: goto label13;
            case 20: goto label23;
            case 21: goto label13;
            case 22: goto label14;
            case 23: goto label24;
            case 24: goto label13;
            case 25: goto label25;
            case 26: goto label26;
            case 27: goto label27;
            case 28: goto label28;
            case 29: goto label29;
            case 30: goto label20;
            case 31: goto label30;
            case 32: goto label31;
            case 33: goto label32;
            case 34: goto label33;
            case 35: goto label34;
            case 36: goto label35;
            case 37: goto label36;
            case 38: goto label37;
            case 39: goto label38;
            case 40: goto label39;
            case 41: goto label40;
            case 42: goto label41;
            case 43: goto label42;
            case 44: goto label43;
            case 45: goto label44;
            case 46: goto label45;
            case 47: goto label46;
            case 48: goto label47;
            default: goto label13;
        };

     label13:
        $r5 = newarray (java.lang.Object)[1];

        $i0 = r0.<com.ichi2.async.DeckTask: int mType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("unknown task type: %d", $r5);

        return null;

     label14:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundLoadDeckCounts(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label15:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundSaveCollection(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label16:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundAnswerCard(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label17:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundAddNote(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label18:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundUpdateNote(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label19:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundUndo(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label20:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundSearchCards(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label21:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundDismissNote(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label22:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundCheckDatabase(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label23:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundRepairDeck(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label24:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundUpdateValuesFromDeck(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label25:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundDeleteDeck(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label26:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundRebuildCram(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label27:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundEmptyCram(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label28:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundImportAdd(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label29:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundImportReplace(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label30:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundExportApkg(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label31:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundReorder(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label32:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundConfChange(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label33:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundConfReset(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label34:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundConfRemove(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label35:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundConfSetSubdecks(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label36:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundRenderBrowserQA(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label37:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundCheckMedia(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label38:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundAddTemplate(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label39:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundRemoveTemplate(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label40:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundCountModels(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label41:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackGroundDeleteModel(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label42:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackGroundDeleteField(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label43:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackGroundRepositionField(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label44:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackGroundAddField(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label45:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundChangeSortField(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label46:
        $r15 = specialinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackgroundSaveModel(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

     label47:
        $r15 = virtualinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackGroundFindEmptyCards(com.ichi2.async.DeckTask$TaskData[])>($r1);

        return $r15;

        catch java.lang.InterruptedException from label01 to label02 with label09;
        catch java.lang.InterruptedException from label03 to label04 with label09;
        catch java.lang.InterruptedException from label05 to label06 with label09;
        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.util.concurrent.ExecutionException from label01 to label02 with label10;
        catch java.util.concurrent.ExecutionException from label03 to label04 with label10;
        catch java.util.concurrent.ExecutionException from label05 to label06 with label10;
        catch java.util.concurrent.ExecutionException from label07 to label08 with label10;
        catch java.util.concurrent.CancellationException from label01 to label02 with label11;
        catch java.util.concurrent.CancellationException from label03 to label04 with label11;
        catch java.util.concurrent.CancellationException from label05 to label06 with label11;
        catch java.util.concurrent.CancellationException from label07 to label08 with label11;
    }
    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData $r1;
        java.lang.Object[] $r2;
        com.ichi2.async.DeckTask$TaskData[] $r3;

        r0 := @this: com.ichi2.async.DeckTask;

        $r2 := @parameter0: java.lang.Object[];

        $r3 = (com.ichi2.async.DeckTask$TaskData[]) $r2;

        $r1 = virtualinvoke r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$TaskData doInBackground(com.ichi2.async.DeckTask$TaskData[])>($r3);

        return $r1;
    }
    public void doProgress(com.ichi2.async.DeckTask$TaskData)
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData $r1;
        com.ichi2.async.DeckTask$TaskData[] $r2;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData;

        $r2 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r2[0] = $r1;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void publishProgress(java.lang.Object[])>($r2);

        return;
    }
    protected void onCancelled()
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$Listener $r1;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$Listener mListener>;

        interfaceinvoke $r1.<com.ichi2.async.DeckTask$Listener: void onCancelled()>();

        return;
    }
    protected void onPostExecute(com.ichi2.async.DeckTask$TaskData)
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData $r1;
        com.ichi2.async.DeckTask$Listener $r2;
        java.lang.Object[] $r3;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void onPostExecute(java.lang.Object)>($r1);

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$Listener mListener>;

        interfaceinvoke $r2.<com.ichi2.async.DeckTask$Listener: void onPostExecute(com.ichi2.async.DeckTask,com.ichi2.async.DeckTask$TaskData)>(r0, $r1);

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("enabling garbage collection of mPreviousTask...", $r3);

        r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask mPreviousTask> = null;

        return;
    }
    protected volatile void onPostExecute(java.lang.Object)
    {
        com.ichi2.async.DeckTask r0;
        java.lang.Object $r1;
        com.ichi2.async.DeckTask$TaskData $r2;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.ichi2.async.DeckTask$TaskData) $r1;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void onPostExecute(com.ichi2.async.DeckTask$TaskData)>($r2);

        return;
    }
    protected void onPreExecute()
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$Listener $r1;

        r0 := @this: com.ichi2.async.DeckTask;

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void onPreExecute()>();

        $r1 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$Listener mListener>;

        interfaceinvoke $r1.<com.ichi2.async.DeckTask$Listener: void onPreExecute(com.ichi2.async.DeckTask)>(r0);

        return;
    }
    protected transient void onProgressUpdate(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.async.DeckTask r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;
        com.ichi2.async.DeckTask$Listener $r2;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        specialinvoke r0.<com.ichi2.async.BaseAsyncTask: void onProgressUpdate(java.lang.Object[])>($r1);

        $r2 = r0.<com.ichi2.async.DeckTask: com.ichi2.async.DeckTask$Listener mListener>;

        interfaceinvoke $r2.<com.ichi2.async.DeckTask$Listener: void onProgressUpdate(com.ichi2.async.DeckTask,com.ichi2.async.DeckTask$TaskData[])>(r0, $r1);

        return;
    }
    protected volatile void onProgressUpdate(java.lang.Object[])
    {
        com.ichi2.async.DeckTask r0;
        java.lang.Object[] $r1;
        com.ichi2.async.DeckTask$TaskData[] $r2;

        r0 := @this: com.ichi2.async.DeckTask;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = (com.ichi2.async.DeckTask$TaskData[]) $r1;

        virtualinvoke r0.<com.ichi2.async.DeckTask: void onProgressUpdate(com.ichi2.async.DeckTask$TaskData[])>($r2);

        return;
    }
