com.ichi2.utils.Base64 extends java.lang.Object
static final boolean $assertionsDisabled
public static final int DECODE
public static final int DONT_GUNZIP
public static final int DO_BREAK_LINES
public static final int ENCODE
private static final byte EQUALS_SIGN
private static final byte EQUALS_SIGN_ENC
public static final int GZIP
private static final int MAX_LINE_LENGTH
private static final byte NEW_LINE
public static final int NO_OPTIONS
public static final int ORDERED
private static final java.lang.String PREFERRED_ENCODING
public static final int URL_SAFE
private static final byte WHITE_SPACE_ENC
private static final byte[] _ORDERED_ALPHABET
private static final byte[] _ORDERED_DECODABET
private static final byte[] _STANDARD_ALPHABET
private static final byte[] _STANDARD_DECODABET
private static final byte[] _URL_SAFE_ALPHABET
private static final byte[] _URL_SAFE_DECODABET
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;
        byte[] $r1;

        $r0 = class "Lcom/ichi2/utils/Base64;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <com.ichi2.utils.Base64: boolean $assertionsDisabled> = $z0;

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        <com.ichi2.utils.Base64: byte[] _STANDARD_ALPHABET> = $r1;

        $r1 = newarray (byte)[127];

        $r1[0] = -9;

        $r1[1] = -9;

        $r1[2] = -9;

        $r1[3] = -9;

        $r1[4] = -9;

        $r1[5] = -9;

        $r1[6] = -9;

        $r1[7] = -9;

        $r1[8] = -9;

        $r1[9] = -5;

        $r1[10] = -5;

        $r1[11] = -9;

        $r1[12] = -9;

        $r1[13] = -5;

        $r1[14] = -9;

        $r1[15] = -9;

        $r1[16] = -9;

        $r1[17] = -9;

        $r1[18] = -9;

        $r1[19] = -9;

        $r1[20] = -9;

        $r1[21] = -9;

        $r1[22] = -9;

        $r1[23] = -9;

        $r1[24] = -9;

        $r1[25] = -9;

        $r1[26] = -9;

        $r1[27] = -9;

        $r1[28] = -9;

        $r1[29] = -9;

        $r1[30] = -9;

        $r1[31] = -9;

        $r1[32] = -5;

        $r1[33] = -9;

        $r1[34] = -9;

        $r1[35] = -9;

        $r1[36] = -9;

        $r1[37] = -9;

        $r1[38] = -9;

        $r1[39] = -9;

        $r1[40] = -9;

        $r1[41] = -9;

        $r1[42] = -9;

        $r1[43] = 62;

        $r1[44] = -9;

        $r1[45] = -9;

        $r1[46] = -9;

        $r1[47] = 63;

        $r1[48] = 52;

        $r1[49] = 53;

        $r1[50] = 54;

        $r1[51] = 55;

        $r1[52] = 56;

        $r1[53] = 57;

        $r1[54] = 58;

        $r1[55] = 59;

        $r1[56] = 60;

        $r1[57] = 61;

        $r1[58] = -9;

        $r1[59] = -9;

        $r1[60] = -9;

        $r1[61] = -1;

        $r1[62] = -9;

        $r1[63] = -9;

        $r1[64] = -9;

        $r1[65] = 0;

        $r1[66] = 1;

        $r1[67] = 2;

        $r1[68] = 3;

        $r1[69] = 4;

        $r1[70] = 5;

        $r1[71] = 6;

        $r1[72] = 7;

        $r1[73] = 8;

        $r1[74] = 9;

        $r1[75] = 10;

        $r1[76] = 11;

        $r1[77] = 12;

        $r1[78] = 13;

        $r1[79] = 14;

        $r1[80] = 15;

        $r1[81] = 16;

        $r1[82] = 17;

        $r1[83] = 18;

        $r1[84] = 19;

        $r1[85] = 20;

        $r1[86] = 21;

        $r1[87] = 22;

        $r1[88] = 23;

        $r1[89] = 24;

        $r1[90] = 25;

        $r1[91] = -9;

        $r1[92] = -9;

        $r1[93] = -9;

        $r1[94] = -9;

        $r1[95] = -9;

        $r1[96] = -9;

        $r1[97] = 26;

        $r1[98] = 27;

        $r1[99] = 28;

        $r1[100] = 29;

        $r1[101] = 30;

        $r1[102] = 31;

        $r1[103] = 32;

        $r1[104] = 33;

        $r1[105] = 34;

        $r1[106] = 35;

        $r1[107] = 36;

        $r1[108] = 37;

        $r1[109] = 38;

        $r1[110] = 39;

        $r1[111] = 40;

        $r1[112] = 41;

        $r1[113] = 42;

        $r1[114] = 43;

        $r1[115] = 44;

        $r1[116] = 45;

        $r1[117] = 46;

        $r1[118] = 47;

        $r1[119] = 48;

        $r1[120] = 49;

        $r1[121] = 50;

        $r1[122] = 51;

        $r1[123] = -9;

        $r1[124] = -9;

        $r1[125] = -9;

        $r1[126] = -9;

        <com.ichi2.utils.Base64: byte[] _STANDARD_DECODABET> = $r1;

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 45;

        $r1[63] = 95;

        <com.ichi2.utils.Base64: byte[] _URL_SAFE_ALPHABET> = $r1;

        $r1 = newarray (byte)[127];

        $r1[0] = -9;

        $r1[1] = -9;

        $r1[2] = -9;

        $r1[3] = -9;

        $r1[4] = -9;

        $r1[5] = -9;

        $r1[6] = -9;

        $r1[7] = -9;

        $r1[8] = -9;

        $r1[9] = -5;

        $r1[10] = -5;

        $r1[11] = -9;

        $r1[12] = -9;

        $r1[13] = -5;

        $r1[14] = -9;

        $r1[15] = -9;

        $r1[16] = -9;

        $r1[17] = -9;

        $r1[18] = -9;

        $r1[19] = -9;

        $r1[20] = -9;

        $r1[21] = -9;

        $r1[22] = -9;

        $r1[23] = -9;

        $r1[24] = -9;

        $r1[25] = -9;

        $r1[26] = -9;

        $r1[27] = -9;

        $r1[28] = -9;

        $r1[29] = -9;

        $r1[30] = -9;

        $r1[31] = -9;

        $r1[32] = -5;

        $r1[33] = -9;

        $r1[34] = -9;

        $r1[35] = -9;

        $r1[36] = -9;

        $r1[37] = -9;

        $r1[38] = -9;

        $r1[39] = -9;

        $r1[40] = -9;

        $r1[41] = -9;

        $r1[42] = -9;

        $r1[43] = -9;

        $r1[44] = -9;

        $r1[45] = 62;

        $r1[46] = -9;

        $r1[47] = -9;

        $r1[48] = 52;

        $r1[49] = 53;

        $r1[50] = 54;

        $r1[51] = 55;

        $r1[52] = 56;

        $r1[53] = 57;

        $r1[54] = 58;

        $r1[55] = 59;

        $r1[56] = 60;

        $r1[57] = 61;

        $r1[58] = -9;

        $r1[59] = -9;

        $r1[60] = -9;

        $r1[61] = -1;

        $r1[62] = -9;

        $r1[63] = -9;

        $r1[64] = -9;

        $r1[65] = 0;

        $r1[66] = 1;

        $r1[67] = 2;

        $r1[68] = 3;

        $r1[69] = 4;

        $r1[70] = 5;

        $r1[71] = 6;

        $r1[72] = 7;

        $r1[73] = 8;

        $r1[74] = 9;

        $r1[75] = 10;

        $r1[76] = 11;

        $r1[77] = 12;

        $r1[78] = 13;

        $r1[79] = 14;

        $r1[80] = 15;

        $r1[81] = 16;

        $r1[82] = 17;

        $r1[83] = 18;

        $r1[84] = 19;

        $r1[85] = 20;

        $r1[86] = 21;

        $r1[87] = 22;

        $r1[88] = 23;

        $r1[89] = 24;

        $r1[90] = 25;

        $r1[91] = -9;

        $r1[92] = -9;

        $r1[93] = -9;

        $r1[94] = -9;

        $r1[95] = 63;

        $r1[96] = -9;

        $r1[97] = 26;

        $r1[98] = 27;

        $r1[99] = 28;

        $r1[100] = 29;

        $r1[101] = 30;

        $r1[102] = 31;

        $r1[103] = 32;

        $r1[104] = 33;

        $r1[105] = 34;

        $r1[106] = 35;

        $r1[107] = 36;

        $r1[108] = 37;

        $r1[109] = 38;

        $r1[110] = 39;

        $r1[111] = 40;

        $r1[112] = 41;

        $r1[113] = 42;

        $r1[114] = 43;

        $r1[115] = 44;

        $r1[116] = 45;

        $r1[117] = 46;

        $r1[118] = 47;

        $r1[119] = 48;

        $r1[120] = 49;

        $r1[121] = 50;

        $r1[122] = 51;

        $r1[123] = -9;

        $r1[124] = -9;

        $r1[125] = -9;

        $r1[126] = -9;

        <com.ichi2.utils.Base64: byte[] _URL_SAFE_DECODABET> = $r1;

        $r1 = newarray (byte)[64];

        $r1[0] = 45;

        $r1[1] = 48;

        $r1[2] = 49;

        $r1[3] = 50;

        $r1[4] = 51;

        $r1[5] = 52;

        $r1[6] = 53;

        $r1[7] = 54;

        $r1[8] = 55;

        $r1[9] = 56;

        $r1[10] = 57;

        $r1[11] = 65;

        $r1[12] = 66;

        $r1[13] = 67;

        $r1[14] = 68;

        $r1[15] = 69;

        $r1[16] = 70;

        $r1[17] = 71;

        $r1[18] = 72;

        $r1[19] = 73;

        $r1[20] = 74;

        $r1[21] = 75;

        $r1[22] = 76;

        $r1[23] = 77;

        $r1[24] = 78;

        $r1[25] = 79;

        $r1[26] = 80;

        $r1[27] = 81;

        $r1[28] = 82;

        $r1[29] = 83;

        $r1[30] = 84;

        $r1[31] = 85;

        $r1[32] = 86;

        $r1[33] = 87;

        $r1[34] = 88;

        $r1[35] = 89;

        $r1[36] = 90;

        $r1[37] = 95;

        $r1[38] = 97;

        $r1[39] = 98;

        $r1[40] = 99;

        $r1[41] = 100;

        $r1[42] = 101;

        $r1[43] = 102;

        $r1[44] = 103;

        $r1[45] = 104;

        $r1[46] = 105;

        $r1[47] = 106;

        $r1[48] = 107;

        $r1[49] = 108;

        $r1[50] = 109;

        $r1[51] = 110;

        $r1[52] = 111;

        $r1[53] = 112;

        $r1[54] = 113;

        $r1[55] = 114;

        $r1[56] = 115;

        $r1[57] = 116;

        $r1[58] = 117;

        $r1[59] = 118;

        $r1[60] = 119;

        $r1[61] = 120;

        $r1[62] = 121;

        $r1[63] = 122;

        <com.ichi2.utils.Base64: byte[] _ORDERED_ALPHABET> = $r1;

        $r1 = newarray (byte)[127];

        $r1[0] = -9;

        $r1[1] = -9;

        $r1[2] = -9;

        $r1[3] = -9;

        $r1[4] = -9;

        $r1[5] = -9;

        $r1[6] = -9;

        $r1[7] = -9;

        $r1[8] = -9;

        $r1[9] = -5;

        $r1[10] = -5;

        $r1[11] = -9;

        $r1[12] = -9;

        $r1[13] = -5;

        $r1[14] = -9;

        $r1[15] = -9;

        $r1[16] = -9;

        $r1[17] = -9;

        $r1[18] = -9;

        $r1[19] = -9;

        $r1[20] = -9;

        $r1[21] = -9;

        $r1[22] = -9;

        $r1[23] = -9;

        $r1[24] = -9;

        $r1[25] = -9;

        $r1[26] = -9;

        $r1[27] = -9;

        $r1[28] = -9;

        $r1[29] = -9;

        $r1[30] = -9;

        $r1[31] = -9;

        $r1[32] = -5;

        $r1[33] = -9;

        $r1[34] = -9;

        $r1[35] = -9;

        $r1[36] = -9;

        $r1[37] = -9;

        $r1[38] = -9;

        $r1[39] = -9;

        $r1[40] = -9;

        $r1[41] = -9;

        $r1[42] = -9;

        $r1[43] = -9;

        $r1[44] = -9;

        $r1[45] = 0;

        $r1[46] = -9;

        $r1[47] = -9;

        $r1[48] = 1;

        $r1[49] = 2;

        $r1[50] = 3;

        $r1[51] = 4;

        $r1[52] = 5;

        $r1[53] = 6;

        $r1[54] = 7;

        $r1[55] = 8;

        $r1[56] = 9;

        $r1[57] = 10;

        $r1[58] = -9;

        $r1[59] = -9;

        $r1[60] = -9;

        $r1[61] = -1;

        $r1[62] = -9;

        $r1[63] = -9;

        $r1[64] = -9;

        $r1[65] = 11;

        $r1[66] = 12;

        $r1[67] = 13;

        $r1[68] = 14;

        $r1[69] = 15;

        $r1[70] = 16;

        $r1[71] = 17;

        $r1[72] = 18;

        $r1[73] = 19;

        $r1[74] = 20;

        $r1[75] = 21;

        $r1[76] = 22;

        $r1[77] = 23;

        $r1[78] = 24;

        $r1[79] = 25;

        $r1[80] = 26;

        $r1[81] = 27;

        $r1[82] = 28;

        $r1[83] = 29;

        $r1[84] = 30;

        $r1[85] = 31;

        $r1[86] = 32;

        $r1[87] = 33;

        $r1[88] = 34;

        $r1[89] = 35;

        $r1[90] = 36;

        $r1[91] = -9;

        $r1[92] = -9;

        $r1[93] = -9;

        $r1[94] = -9;

        $r1[95] = 37;

        $r1[96] = -9;

        $r1[97] = 38;

        $r1[98] = 39;

        $r1[99] = 40;

        $r1[100] = 41;

        $r1[101] = 42;

        $r1[102] = 43;

        $r1[103] = 44;

        $r1[104] = 45;

        $r1[105] = 46;

        $r1[106] = 47;

        $r1[107] = 48;

        $r1[108] = 49;

        $r1[109] = 50;

        $r1[110] = 51;

        $r1[111] = 52;

        $r1[112] = 53;

        $r1[113] = 54;

        $r1[114] = 55;

        $r1[115] = 56;

        $r1[116] = 57;

        $r1[117] = 58;

        $r1[118] = 59;

        $r1[119] = 60;

        $r1[120] = 61;

        $r1[121] = 62;

        $r1[122] = 63;

        $r1[123] = -9;

        $r1[124] = -9;

        $r1[125] = -9;

        $r1[126] = -9;

        <com.ichi2.utils.Base64: byte[] _ORDERED_DECODABET> = $r1;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    private void <init>()
    {
        com.ichi2.utils.Base64 r0;

        r0 := @this: com.ichi2.utils.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static byte[] access$000(int)
    {
        int $i0;
        byte[] $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <com.ichi2.utils.Base64: byte[] getDecodabet(int)>($i0);

        return $r0;
    }
    static byte[] access$100(byte[], int, int, byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $r0 = staticinvoke <com.ichi2.utils.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>($r0, $i0, $i1, $r1, $i2, $i3);

        return $r0;
    }
    static int access$200(byte[], int, byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i0 = staticinvoke <com.ichi2.utils.Base64: int decode4to3(byte[],int,byte[],int,int)>($r0, $i0, $r1, $i1, $i2);

        return $i0;
    }
    static byte[] access$300(byte[], byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r0 = staticinvoke <com.ichi2.utils.Base64: byte[] encode3to4(byte[],byte[],int,int)>($r0, $r1, $i0, $i1);

        return $r0;
    }
    public static byte[] decode(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.ichi2.utils.Base64: byte[] decode(java.lang.String,int)>($r0, 0);

        return $r1;
    }
    public static byte[] decode(java.lang.String, int) throws java.io.IOException
    {
        java.lang.String $r0;
        int $i0, $i1;
        java.io.ByteArrayInputStream r1, r8;
        java.io.ByteArrayOutputStream r2, r10;
        byte[] r3, $r7;
        java.util.zip.GZIPInputStream r4, r9;
        java.io.UnsupportedEncodingException r5;
        java.lang.NullPointerException $r6;
        boolean z0;
        byte $b2;
        java.io.IOException r11;
        java.lang.Exception $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.Throwable $r13;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $r0 != null goto label01;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Input string was null.");

        throw $r6;

     label01:
        $r7 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label02:
        $i1 = lengthof $r7;

        $r7 = staticinvoke <com.ichi2.utils.Base64: byte[] decode(byte[],int,int,int)>($r7, 0, $i1, $i0);

        $i0 = $i0 & 4;

        if $i0 == 0 goto label21;

        z0 = 1;

     label03:
        if $r7 == null goto label47;

        $i0 = lengthof $r7;

        if $i0 < 4 goto label47;

        if z0 != 0 goto label47;

        $b2 = $r7[0];

        $i0 = $b2 & 255;

        $b2 = $r7[1];

        $i1 = $b2 << 8;

        $i1 = $i1 & 65280;

        $i0 = $i0 | $i1;

        if 35615 != $i0 goto label47;

        r8 = null;

        r9 = null;

        r10 = null;

        r3 = newarray (byte)[2048];

     label04:
        r2 = new java.io.ByteArrayOutputStream;

     label05:
        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

     label06:
        r1 = new java.io.ByteArrayInputStream;

     label07:
        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

     label08:
        r4 = new java.util.zip.GZIPInputStream;

     label09:
        specialinvoke r4.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(r1);

     label10:
        $i0 = virtualinvoke r4.<java.util.zip.GZIPInputStream: int read(byte[])>(r3);

     label11:
        if $i0 < 0 goto label22;

     label12:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, $i0);

     label13:
        goto label10;

     label14:
        r11 := @caughtexception;

        r10 = r2;

        r9 = r4;

        r8 = r1;

     label15:
        virtualinvoke r11.<java.io.IOException: void printStackTrace()>();

     label16:
        virtualinvoke r10.<java.io.ByteArrayOutputStream: void close()>();

     label17:
        virtualinvoke r9.<java.util.zip.GZIPInputStream: void close()>();

     label18:
        virtualinvoke r8.<java.io.ByteArrayInputStream: void close()>();

     label19:
        return $r7;

     label20:
        r5 := @caughtexception;

        $r7 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        goto label02;

     label21:
        z0 = 0;

        goto label03;

     label22:
        r3 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label23:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void close()>();

     label24:
        virtualinvoke r4.<java.util.zip.GZIPInputStream: void close()>();

     label25:
        virtualinvoke r1.<java.io.ByteArrayInputStream: void close()>();

     label26:
        return r3;

     label27:
        $r12 := @caughtexception;

        return r3;

     label28:
        $r13 := @caughtexception;

     label29:
        virtualinvoke r10.<java.io.ByteArrayOutputStream: void close()>();

     label30:
        virtualinvoke r9.<java.util.zip.GZIPInputStream: void close()>();

     label31:
        virtualinvoke r8.<java.io.ByteArrayInputStream: void close()>();

     label32:
        throw $r13;

     label33:
        $r14 := @caughtexception;

        goto label24;

     label34:
        $r15 := @caughtexception;

        goto label25;

     label35:
        $r16 := @caughtexception;

        goto label17;

     label36:
        $r17 := @caughtexception;

        goto label18;

     label37:
        $r18 := @caughtexception;

        return $r7;

     label38:
        $r19 := @caughtexception;

        goto label30;

     label39:
        $r20 := @caughtexception;

        goto label31;

     label40:
        $r21 := @caughtexception;

        goto label32;

     label41:
        $r13 := @caughtexception;

        r10 = r2;

        goto label29;

     label42:
        $r13 := @caughtexception;

        r10 = r2;

        r8 = r1;

        goto label29;

     label43:
        $r13 := @caughtexception;

        r10 = r2;

        r9 = r4;

        r8 = r1;

        goto label29;

     label44:
        r11 := @caughtexception;

        goto label15;

     label45:
        r11 := @caughtexception;

        r10 = r2;

        goto label15;

     label46:
        r11 := @caughtexception;

        r10 = r2;

        r8 = r1;

        goto label15;

     label47:
        return $r7;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label20;
        catch java.io.IOException from label05 to label06 with label44;
        catch java.lang.Throwable from label04 to label06 with label28;
        catch java.io.IOException from label07 to label08 with label45;
        catch java.lang.Throwable from label06 to label08 with label41;
        catch java.io.IOException from label09 to label10 with label46;
        catch java.lang.Throwable from label08 to label10 with label42;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label10 to label11 with label43;
        catch java.lang.Throwable from label12 to label13 with label43;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Exception from label16 to label17 with label35;
        catch java.lang.Exception from label17 to label18 with label36;
        catch java.lang.Exception from label18 to label19 with label37;
        catch java.io.IOException from label22 to label23 with label14;
        catch java.lang.Throwable from label22 to label23 with label43;
        catch java.lang.Exception from label23 to label24 with label33;
        catch java.lang.Exception from label24 to label25 with label34;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label29 to label30 with label38;
        catch java.lang.Exception from label30 to label31 with label39;
        catch java.lang.Exception from label31 to label32 with label40;
    }
    public static byte[] decode(byte[])
    {
        byte[] $r0;
        java.io.IOException r1;
        int $i0;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

     label1:
        $r0 = staticinvoke <com.ichi2.utils.Base64: byte[] decode(byte[],int,int,int)>($r0, 0, $i0, 0);

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        $z0 = <com.ichi2.utils.Base64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOExceptions only come from GZipping, which is turned off: ");

        $r4 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r2;

     label4:
        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static byte[] decode(byte[], int, int, int) throws java.io.IOException
    {
        byte[] $r0, r1, r2, $r9;
        int $i0, $i1, $i2, i3, $i4, i5, $i6;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;
        java.lang.StringBuilder $r8;
        byte $b7, b8;
        java.io.IOException $r10;
        java.lang.Byte $r11;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $r0 != null goto label01;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot decode null source array.");

        throw $r3;

     label01:
        if $i0 < 0 goto label02;

        i3 = $i0 + $i1;

        $i4 = lengthof $r0;

        if i3 <= $i4 goto label03;

     label02:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[3];

        $i2 = lengthof $r0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Source array with length %d cannot have offset of %d and process %d bytes.", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label03:
        if $i1 != 0 goto label04;

        $r0 = newarray (byte)[0];

        return $r0;

     label04:
        if $i1 >= 4 goto label05;

        $r4 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base64-encoded string must have at least four characters, but length specified was ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label05:
        $r9 = staticinvoke <com.ichi2.utils.Base64: byte[] getDecodabet(int)>($i2);

        i3 = $i1 * 3;

        i3 = i3 / 4;

        r2 = newarray (byte)[i3];

        i3 = 0;

        r1 = newarray (byte)[4];

        $i4 = $i0;

        i5 = 0;

     label06:
        $i6 = $i0 + $i1;

        if $i4 >= $i6 goto label11;

        $b7 = $r0[$i4];

        $i6 = $b7 & 127;

        $b7 = (byte) $i6;

        b8 = $r9[$b7];

        if b8 < -5 goto label08;

        if b8 < -1 goto label09;

        $i6 = i5 + 1;

        r1[i5] = $b7;

        if $i6 <= 3 goto label10;

        i5 = staticinvoke <com.ichi2.utils.Base64: int decode4to3(byte[],int,byte[],int,int)>(r1, 0, r2, i3, $i2);

        i3 = i3 + i5;

        $i6 = 0;

        if $b7 != 61 goto label10;

     label07:
        $r0 = newarray (byte)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r0, 0, i3);

        return $r0;

     label08:
        $r10 = new java.io.IOException;

        $r5 = newarray (java.lang.Object)[2];

        $b7 = $r0[$i4];

        $r11 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b7);

        $r5[0] = $r11;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r5[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Bad Base64 input character \'%c\' in array position %d", $r5);

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label09:
        $i6 = i5;

     label10:
        $i4 = $i4 + 1;

        i5 = $i6;

        goto label06;

     label11:
        goto label07;
    }
    private static int decode4to3(byte[], int, byte[], int, int)
    {
        byte[] $r0, $r1, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.NullPointerException $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.String $r6;
        byte $b5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source array was null.");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination array was null.");

        throw $r2;

     label2:
        if $i0 < 0 goto label3;

        $i3 = $i0 + 3;

        $i4 = lengthof $r0;

        if $i3 < $i4 goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[2];

        $i1 = lengthof $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Source array with length %d cannot have offset of %d and still process four bytes.", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label4:
        if $i1 < 0 goto label5;

        $i3 = $i1 + 2;

        $i4 = lengthof $r1;

        if $i3 < $i4 goto label6;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[2];

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Destination array with length %d cannot have offset of %d and still store three bytes.", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label6:
        $r7 = staticinvoke <com.ichi2.utils.Base64: byte[] getDecodabet(int)>($i2);

        $i2 = $i0 + 2;

        $b5 = $r0[$i2];

        if $b5 != 61 goto label7;

        $b5 = $r0[$i0];

        $b5 = $r7[$b5];

        $i2 = $b5 & 255;

        $i2 = $i2 << 18;

        $i0 = $i0 + 1;

        $b5 = $r0[$i0];

        $b5 = $r7[$b5];

        $i0 = $b5 & 255;

        $i0 = $i0 << 12;

        $i0 = $i2 | $i0;

        $i0 = $i0 >>> 16;

        $b5 = (byte) $i0;

        $r1[$i1] = $b5;

        return 1;

     label7:
        $i2 = $i0 + 3;

        $b5 = $r0[$i2];

        if $b5 != 61 goto label8;

        $b5 = $r0[$i0];

        $b5 = $r7[$b5];

        $i2 = $b5 & 255;

        $i2 = $i2 << 18;

        $i3 = $i0 + 1;

        $b5 = $r0[$i3];

        $b5 = $r7[$b5];

        $i3 = $b5 & 255;

        $i3 = $i3 << 12;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 2;

        $b5 = $r0[$i0];

        $b5 = $r7[$b5];

        $i0 = $b5 & 255;

        $i0 = $i0 << 6;

        $i0 = $i2 | $i0;

        $i2 = $i0 >>> 16;

        $b5 = (byte) $i2;

        $r1[$i1] = $b5;

        $i1 = $i1 + 1;

        $i0 = $i0 >>> 8;

        $b5 = (byte) $i0;

        $r1[$i1] = $b5;

        return 2;

     label8:
        $b5 = $r0[$i0];

        $b5 = $r7[$b5];

        $i2 = $b5 & 255;

        $i2 = $i2 << 18;

        $i3 = $i0 + 1;

        $b5 = $r0[$i3];

        $b5 = $r7[$b5];

        $i3 = $b5 & 255;

        $i3 = $i3 << 12;

        $i2 = $i2 | $i3;

        $i3 = $i0 + 2;

        $b5 = $r0[$i3];

        $b5 = $r7[$b5];

        $i3 = $b5 & 255;

        $i3 = $i3 << 6;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 3;

        $b5 = $r0[$i0];

        $b5 = $r7[$b5];

        $i0 = $b5 & 255;

        $i0 = $i2 | $i0;

        $i2 = $i0 >> 16;

        $b5 = (byte) $i2;

        $r1[$i1] = $b5;

        $i2 = $i1 + 1;

        $i3 = $i0 >> 8;

        $b5 = (byte) $i3;

        $r1[$i2] = $b5;

        $i1 = $i1 + 2;

        $b5 = (byte) $i0;

        $r1[$i1] = $b5;

        return 3;
    }
    public static void decodeFileToFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0, $r1;
        java.io.BufferedOutputStream r2, r5;
        java.lang.Exception $r3, $r9;
        byte[] $r4;
        java.io.FileOutputStream $r6;
        java.io.IOException r7;
        java.lang.Throwable $r8;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r4 = staticinvoke <com.ichi2.utils.Base64: byte[] decodeFromFile(java.lang.String)>($r0);

        r5 = null;

     label01:
        r2 = new java.io.BufferedOutputStream;

        $r6 = new java.io.FileOutputStream;

     label02:
        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.lang.String)>($r1);

        specialinvoke r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r6);

     label03:
        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4);

     label04:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label05:
        return;

     label06:
        r7 := @caughtexception;

     label07:
        throw r7;

     label08:
        $r8 := @caughtexception;

     label09:
        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label10:
        throw $r8;

     label11:
        $r9 := @caughtexception;

        return;

     label12:
        $r3 := @caughtexception;

        goto label10;

     label13:
        $r8 := @caughtexception;

        r5 = r2;

        goto label09;

     label14:
        r7 := @caughtexception;

        r5 = r2;

        goto label07;

        catch java.io.IOException from label02 to label03 with label06;
        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Exception from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Exception from label09 to label10 with label12;
    }
    public static byte[] decodeFromFile(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        com.ichi2.utils.Base64$InputStream r1, r3;
        java.io.File r2;
        int i0, $i3;
        long $l1;
        byte $b2;
        java.io.IOException $r4, r6;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r7;
        byte[] r8, r11;
        java.io.BufferedInputStream $r9;
        java.io.FileInputStream $r10;
        java.lang.Exception $r12, $r13;

        $r0 := @parameter0: java.lang.String;

        r3 = null;

     label01:
        r2 = new java.io.File;

     label02:
        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r0);

     label03:
        i0 = 0;

     label04:
        $l1 = virtualinvoke r2.<java.io.File: long length()>();

     label05:
        $b2 = $l1 cmp 2147483647L;

        if $b2 <= 0 goto label13;

     label06:
        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File is too big for this convenience method (");

        $l1 = virtualinvoke r2.<java.io.File: long length()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes).");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label08:
        r6 := @caughtexception;

     label09:
        throw r6;

     label10:
        $r7 := @caughtexception;

     label11:
        virtualinvoke r3.<com.ichi2.utils.Base64$InputStream: void close()>();

     label12:
        throw $r7;

     label13:
        $l1 = virtualinvoke r2.<java.io.File: long length()>();

     label14:
        $i3 = (int) $l1;

     label15:
        r8 = newarray (byte)[$i3];

        r1 = new com.ichi2.utils.Base64$InputStream;

        $r9 = new java.io.BufferedInputStream;

        $r10 = new java.io.FileInputStream;

     label16:
        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r9.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r10);

        specialinvoke r1.<com.ichi2.utils.Base64$InputStream: void <init>(java.io.InputStream,int)>($r9, 0);

     label17:
        $i3 = virtualinvoke r1.<com.ichi2.utils.Base64$InputStream: int read(byte[],int,int)>(r8, i0, 4096);

     label18:
        if $i3 < 0 goto label19;

        i0 = i0 + $i3;

        goto label17;

     label19:
        r11 = newarray (byte)[i0];

     label20:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r11, 0, i0);

     label21:
        virtualinvoke r1.<com.ichi2.utils.Base64$InputStream: void close()>();

     label22:
        return r11;

     label23:
        $r12 := @caughtexception;

        return r11;

     label24:
        $r13 := @caughtexception;

        goto label12;

     label25:
        $r7 := @caughtexception;

        r3 = r1;

        goto label11;

     label26:
        r6 := @caughtexception;

        r3 = r1;

        goto label09;

        catch java.io.IOException from label02 to label03 with label08;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.io.IOException from label07 to label08 with label08;
        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Exception from label11 to label12 with label24;
        catch java.io.IOException from label13 to label14 with label08;
        catch java.io.IOException from label16 to label17 with label08;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label15 to label17 with label10;
        catch java.io.IOException from label17 to label18 with label26;
        catch java.io.IOException from label20 to label21 with label26;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label19 to label21 with label25;
        catch java.lang.Exception from label21 to label22 with label23;
    }
    public static void decodeToFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0, $r1;
        com.ichi2.utils.Base64$OutputStream r2, r4;
        byte[] $r3;
        java.io.FileOutputStream $r5;
        java.io.IOException r6;
        java.lang.Throwable $r7;
        java.lang.Exception $r8, $r9;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        r4 = null;

     label01:
        r2 = new com.ichi2.utils.Base64$OutputStream;

        $r5 = new java.io.FileOutputStream;

     label02:
        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.lang.String)>($r1);

        specialinvoke r2.<com.ichi2.utils.Base64$OutputStream: void <init>(java.io.OutputStream,int)>($r5, 0);

     label03:
        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        virtualinvoke r2.<com.ichi2.utils.Base64$OutputStream: void write(byte[])>($r3);

     label04:
        virtualinvoke r2.<com.ichi2.utils.Base64$OutputStream: void close()>();

     label05:
        return;

     label06:
        r6 := @caughtexception;

     label07:
        throw r6;

     label08:
        $r7 := @caughtexception;

     label09:
        virtualinvoke r4.<com.ichi2.utils.Base64$OutputStream: void close()>();

     label10:
        throw $r7;

     label11:
        $r8 := @caughtexception;

        return;

     label12:
        $r9 := @caughtexception;

        goto label10;

     label13:
        $r7 := @caughtexception;

        r4 = r2;

        goto label09;

     label14:
        r6 := @caughtexception;

        r4 = r2;

        goto label07;

        catch java.io.IOException from label02 to label03 with label06;
        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Exception from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Exception from label09 to label10 with label12;
    }
    public static java.lang.Object decodeToObject(java.lang.String) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.String $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.ichi2.utils.Base64: java.lang.Object decodeToObject(java.lang.String,int,java.lang.ClassLoader)>($r0, 0, null);

        return $r1;
    }
    public static java.lang.Object decodeToObject(java.lang.String, int, java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.String $r0;
        int $i0;
        java.lang.ClassLoader $r1;
        java.io.ByteArrayInputStream r2, r4;
        byte[] $r3;
        java.io.ObjectInputStream r5, r6;
        java.lang.Object $r7;
        com.ichi2.utils.Base64$1 r8;
        java.lang.Exception r9, $r11, $r12, $r13, $r14;
        java.lang.Throwable $r10;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.ClassLoader;

        $r3 = staticinvoke <com.ichi2.utils.Base64: byte[] decode(java.lang.String,int)>($r0, $i0);

        r4 = null;

        r5 = null;

     label01:
        r2 = new java.io.ByteArrayInputStream;

     label02:
        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

     label03:
        if $r1 != null goto label11;

     label04:
        r6 = new java.io.ObjectInputStream;

     label05:
        specialinvoke r6.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r2);

     label06:
        r5 = r6;

     label07:
        $r7 = virtualinvoke r5.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label08:
        virtualinvoke r2.<java.io.ByteArrayInputStream: void close()>();

     label09:
        virtualinvoke r5.<java.io.ObjectInputStream: void close()>();

     label10:
        return $r7;

     label11:
        r8 = new com.ichi2.utils.Base64$1;

     label12:
        specialinvoke r8.<com.ichi2.utils.Base64$1: void <init>(java.io.InputStream,java.lang.ClassLoader)>(r2, $r1);

     label13:
        r5 = r8;

        goto label07;

     label14:
        r9 := @caughtexception;

     label15:
        throw r9;

     label16:
        $r10 := @caughtexception;

     label17:
        virtualinvoke r4.<java.io.ByteArrayInputStream: void close()>();

     label18:
        virtualinvoke r5.<java.io.ObjectInputStream: void close()>();

     label19:
        throw $r10;

     label20:
        $r11 := @caughtexception;

        goto label09;

     label21:
        $r12 := @caughtexception;

        return $r7;

     label22:
        $r13 := @caughtexception;

        goto label18;

     label23:
        $r14 := @caughtexception;

        goto label19;

     label24:
        $r10 := @caughtexception;

        r4 = r2;

        goto label17;

     label25:
        r9 := @caughtexception;

        r4 = r2;

        goto label15;

     label26:
        r9 := @caughtexception;

        goto label15;

     label27:
        r9 := @caughtexception;

        r4 = r2;

        goto label15;

        catch java.io.IOException from label02 to label03 with label26;
        catch java.lang.ClassNotFoundException from label02 to label03 with label14;
        catch java.lang.Throwable from label01 to label03 with label16;
        catch java.io.IOException from label05 to label06 with label27;
        catch java.io.IOException from label07 to label08 with label27;
        catch java.lang.ClassNotFoundException from label05 to label06 with label25;
        catch java.lang.ClassNotFoundException from label07 to label08 with label25;
        catch java.lang.Throwable from label04 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Exception from label08 to label09 with label20;
        catch java.lang.Exception from label09 to label10 with label21;
        catch java.io.IOException from label12 to label13 with label27;
        catch java.lang.ClassNotFoundException from label12 to label13 with label25;
        catch java.lang.Throwable from label11 to label13 with label24;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Exception from label17 to label18 with label22;
        catch java.lang.Exception from label18 to label19 with label23;
    }
    public static void encode(java.nio.ByteBuffer, java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer $r0, $r1;
        byte[] r2, r3;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 := @parameter1: java.nio.ByteBuffer;

        r3 = newarray (byte)[3];

        r2 = newarray (byte)[4];

     label1:
        $z0 = virtualinvoke $r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(3, $i0);

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r3, 0, $i0);

        staticinvoke <com.ichi2.utils.Base64: byte[] encode3to4(byte[],byte[],int,int)>(r2, r3, $i0, 0);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r2);

        goto label1;

     label2:
        return;
    }
    public static void encode(java.nio.ByteBuffer, java.nio.CharBuffer)
    {
        java.nio.ByteBuffer $r0;
        java.nio.CharBuffer $r1;
        byte[] r2, r3;
        boolean $z0;
        int $i0, $i2;
        byte $b1;
        char $c3;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 := @parameter1: java.nio.CharBuffer;

        r3 = newarray (byte)[3];

        r2 = newarray (byte)[4];

     label1:
        $z0 = virtualinvoke $r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(3, $i0);

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r3, 0, $i0);

        staticinvoke <com.ichi2.utils.Base64: byte[] encode3to4(byte[],byte[],int,int)>(r2, r3, $i0, 0);

        $i0 = 0;

     label2:
        if $i0 >= 4 goto label1;

        $b1 = r2[$i0];

        $i2 = $b1 & 255;

        $c3 = (char) $i2;

        virtualinvoke $r1.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c3);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    private static byte[] encode3to4(byte[], int, int, byte[], int, int)
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte $b5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $i4 = 0;

        $r2 = staticinvoke <com.ichi2.utils.Base64: byte[] getAlphabet(int)>($i3);

        if $i1 <= 0 goto label5;

        $b5 = $r0[$i0];

        $i3 = $b5 << 24;

        $i3 = $i3 >>> 8;

     label1:
        if $i1 <= 1 goto label6;

        $i6 = $i0 + 1;

        $b5 = $r0[$i6];

        $i6 = $b5 << 24;

        $i6 = $i6 >>> 16;

     label2:
        $i3 = $i6 | $i3;

        if $i1 <= 2 goto label3;

        $i0 = $i0 + 2;

        $b5 = $r0[$i0];

        $i0 = $b5 << 24;

        $i4 = $i0 >>> 24;

     label3:
        $i0 = $i3 | $i4;

        lookupswitch($i1)
        {
            case 1: goto label9;
            case 2: goto label8;
            case 3: goto label7;
            default: goto label4;
        };

     label4:
        return $r1;

     label5:
        $i3 = 0;

        goto label1;

     label6:
        $i6 = 0;

        goto label2;

     label7:
        $i1 = $i0 >>> 18;

        $b5 = $r2[$i1];

        $r1[$i2] = $b5;

        $i1 = $i2 + 1;

        $i3 = $i0 >>> 12;

        $i3 = $i3 & 63;

        $b5 = $r2[$i3];

        $r1[$i1] = $b5;

        $i1 = $i2 + 2;

        $i3 = $i0 >>> 6;

        $i3 = $i3 & 63;

        $b5 = $r2[$i3];

        $r1[$i1] = $b5;

        $i1 = $i2 + 3;

        $i0 = $i0 & 63;

        $b5 = $r2[$i0];

        $r1[$i1] = $b5;

        return $r1;

     label8:
        $i1 = $i0 >>> 18;

        $b5 = $r2[$i1];

        $r1[$i2] = $b5;

        $i1 = $i2 + 1;

        $i3 = $i0 >>> 12;

        $i3 = $i3 & 63;

        $b5 = $r2[$i3];

        $r1[$i1] = $b5;

        $i1 = $i2 + 2;

        $i0 = $i0 >>> 6;

        $i0 = $i0 & 63;

        $b5 = $r2[$i0];

        $r1[$i1] = $b5;

        $i0 = $i2 + 3;

        $r1[$i0] = 61;

        return $r1;

     label9:
        $i1 = $i0 >>> 18;

        $b5 = $r2[$i1];

        $r1[$i2] = $b5;

        $i1 = $i2 + 1;

        $i0 = $i0 >>> 12;

        $i0 = $i0 & 63;

        $b5 = $r2[$i0];

        $r1[$i1] = $b5;

        $i0 = $i2 + 2;

        $r1[$i0] = 61;

        $i0 = $i2 + 3;

        $r1[$i0] = 61;

        return $r1;
    }
    private static byte[] encode3to4(byte[], byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <com.ichi2.utils.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>($r1, 0, $i0, $r0, 0, $i1);

        return $r0;
    }
    public static java.lang.String encodeBytes(byte[])
    {
        byte[] $r0;
        java.io.IOException r1;
        java.lang.String r2, $r3;
        int $i0;
        boolean $z0;
        java.lang.AssertionError $r4;

        $r0 := @parameter0: byte[];

        r2 = null;

        $i0 = lengthof $r0;

     label1:
        $r3 = staticinvoke <com.ichi2.utils.Base64: java.lang.String encodeBytes(byte[],int,int,int)>($r0, 0, $i0, 0);

     label2:
        r2 = $r3;

     label3:
        $z0 = <com.ichi2.utils.Base64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        if r2 != null goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        r1 := @caughtexception;

        $z0 = <com.ichi2.utils.Base64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        r2 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r4;

     label5:
        return r2;

        catch java.io.IOException from label1 to label2 with label4;
    }
    public static java.lang.String encodeBytes(byte[], int) throws java.io.IOException
    {
        byte[] $r0;
        int $i0, $i1;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $r1 = staticinvoke <com.ichi2.utils.Base64: java.lang.String encodeBytes(byte[],int,int,int)>($r0, 0, $i1, $i0);

        return $r1;
    }
    public static java.lang.String encodeBytes(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.io.IOException r1;
        java.lang.String r2, $r3;
        boolean $z0;
        java.lang.AssertionError $r4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 = null;

     label1:
        $r3 = staticinvoke <com.ichi2.utils.Base64: java.lang.String encodeBytes(byte[],int,int,int)>($r0, $i0, $i1, 0);

     label2:
        r2 = $r3;

     label3:
        $z0 = <com.ichi2.utils.Base64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        if r2 != null goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        r1 := @caughtexception;

        $z0 = <com.ichi2.utils.Base64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        r2 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r4;

     label5:
        return r2;

        catch java.io.IOException from label1 to label2 with label4;
    }
    public static java.lang.String encodeBytes(byte[], int, int, int) throws java.io.IOException
    {
        byte[] $r0;
        int $i0, $i1, $i2;
        java.io.UnsupportedEncodingException r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r0 = staticinvoke <com.ichi2.utils.Base64: byte[] encodeBytesToBytes(byte[],int,int,int)>($r0, $i0, $i1, $i2);

        $r2 = new java.lang.String;

     label1:
        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r0, "US-ASCII");

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r0);

        return $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public static byte[] encodeBytesToBytes(byte[])
    {
        byte[] $r0;
        java.io.IOException r1;
        int $i0;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

     label1:
        $r0 = staticinvoke <com.ichi2.utils.Base64: byte[] encodeBytesToBytes(byte[],int,int,int)>($r0, 0, $i0, 0);

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        $z0 = <com.ichi2.utils.Base64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOExceptions only come from GZipping, which is turned off: ");

        $r4 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r2;

     label4:
        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static byte[] encodeBytesToBytes(byte[], int, int, int) throws java.io.IOException
    {
        byte[] $r0, r1;
        int $i0, $i1, $i2, i3, $i4, $i5, i7, $i8;
        com.ichi2.utils.Base64$OutputStream r2, r13;
        java.io.ByteArrayOutputStream r3, r11;
        java.util.zip.GZIPOutputStream r4, r12;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;
        java.io.IOException r14;
        java.lang.Throwable $r15;
        boolean z0;
        byte $b6;
        java.lang.Exception $r16, $r17, $r18, $r19, $r20, $r21;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $r0 != null goto label01;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot serialize a null array.");

        throw $r5;

     label01:
        if $i0 >= 0 goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot have negative offset: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label02:
        if $i1 >= 0 goto label03;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot have length offset: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label03:
        $i4 = $i0 + $i1;

        $i5 = lengthof $r0;

        if $i4 <= $i5 goto label04;

        $r6 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[3];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9[0] = $r10;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9[1] = $r10;

        $i0 = lengthof $r0;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9[2] = $r10;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot have offset of %d and length of %d with array of length %d", $r9);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label04:
        $i4 = $i2 & 2;

        if $i4 == 0 goto label24;

        r11 = null;

        r12 = null;

        r13 = null;

     label05:
        r3 = new java.io.ByteArrayOutputStream;

     label06:
        specialinvoke r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label07:
        r2 = new com.ichi2.utils.Base64$OutputStream;

     label08:
        $i2 = $i2 | 1;

     label09:
        specialinvoke r2.<com.ichi2.utils.Base64$OutputStream: void <init>(java.io.OutputStream,int)>(r3, $i2);

     label10:
        r4 = new java.util.zip.GZIPOutputStream;

     label11:
        specialinvoke r4.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>(r2);

     label12:
        virtualinvoke r4.<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>($r0, $i0, $i1);

        virtualinvoke r4.<java.util.zip.GZIPOutputStream: void close()>();

     label13:
        virtualinvoke r4.<java.util.zip.GZIPOutputStream: void close()>();

     label14:
        virtualinvoke r2.<com.ichi2.utils.Base64$OutputStream: void close()>();

     label15:
        virtualinvoke r3.<java.io.ByteArrayOutputStream: void close()>();

     label16:
        $r0 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;

     label17:
        r14 := @caughtexception;

     label18:
        throw r14;

     label19:
        $r15 := @caughtexception;

     label20:
        virtualinvoke r12.<java.util.zip.GZIPOutputStream: void close()>();

     label21:
        virtualinvoke r13.<com.ichi2.utils.Base64$OutputStream: void close()>();

     label22:
        virtualinvoke r11.<java.io.ByteArrayOutputStream: void close()>();

     label23:
        throw $r15;

     label24:
        $i4 = $i2 & 8;

        if $i4 <= 0 goto label30;

        z0 = 1;

     label25:
        $i4 = $i1 / 3;

        $i4 = $i4 * 4;

        $i5 = $i1 % 3;

        if $i5 <= 0 goto label31;

        $b6 = 4;

     label26:
        $i4 = $i4 + $b6;

        if z0 == 0 goto label27;

        $i5 = $i4 / 76;

        $i4 = $i4 + $i5;

     label27:
        r1 = newarray (byte)[$i4];

        $i5 = 0;

        $i4 = 0;

        i3 = $i1 + -2;

        i7 = 0;

     label28:
        if $i5 >= i3 goto label32;

        $i8 = $i5 + $i0;

        staticinvoke <com.ichi2.utils.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>($r0, $i8, 3, r1, $i4, $i2);

        i7 = i7 + 4;

        if z0 == 0 goto label29;

        if i7 < 76 goto label29;

        i7 = $i4 + 4;

        r1[i7] = 10;

        $i4 = $i4 + 1;

        i7 = 0;

     label29:
        $i5 = $i5 + 3;

        $i4 = $i4 + 4;

        goto label28;

     label30:
        z0 = 0;

        goto label25;

     label31:
        $b6 = 0;

        goto label26;

     label32:
        if $i5 >= $i1 goto label33;

        $i0 = $i5 + $i0;

        $i1 = $i1 - $i5;

        staticinvoke <com.ichi2.utils.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)>($r0, $i0, $i1, r1, $i4, $i2);

        $i4 = $i4 + 4;

     label33:
        $i0 = lengthof r1;

        $i0 = $i0 + -1;

        if $i4 >= $i0 goto label34;

        $r0 = newarray (byte)[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r0, 0, $i4);

        return $r0;

     label34:
        return r1;

     label35:
        $r16 := @caughtexception;

        goto label14;

     label36:
        $r17 := @caughtexception;

        goto label15;

     label37:
        $r18 := @caughtexception;

        goto label16;

     label38:
        $r19 := @caughtexception;

        goto label21;

     label39:
        $r20 := @caughtexception;

        goto label22;

     label40:
        $r21 := @caughtexception;

        goto label23;

     label41:
        $r15 := @caughtexception;

        r11 = r3;

        goto label20;

     label42:
        $r15 := @caughtexception;

        r13 = r2;

        r11 = r3;

        goto label20;

     label43:
        $r15 := @caughtexception;

        r13 = r2;

        r12 = r4;

        r11 = r3;

        goto label20;

     label44:
        r14 := @caughtexception;

        r11 = r3;

        goto label18;

     label45:
        r14 := @caughtexception;

        r13 = r2;

        r11 = r3;

        goto label18;

     label46:
        r14 := @caughtexception;

        r13 = r2;

        r12 = r4;

        r11 = r3;

        goto label18;

        catch java.io.IOException from label06 to label07 with label17;
        catch java.lang.Throwable from label05 to label07 with label19;
        catch java.io.IOException from label09 to label10 with label44;
        catch java.lang.Throwable from label07 to label08 with label41;
        catch java.lang.Throwable from label09 to label10 with label41;
        catch java.io.IOException from label11 to label12 with label45;
        catch java.lang.Throwable from label10 to label12 with label42;
        catch java.io.IOException from label12 to label13 with label46;
        catch java.lang.Throwable from label12 to label13 with label43;
        catch java.lang.Exception from label13 to label14 with label35;
        catch java.lang.Exception from label14 to label15 with label36;
        catch java.lang.Exception from label15 to label16 with label37;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Exception from label20 to label21 with label38;
        catch java.lang.Exception from label21 to label22 with label39;
        catch java.lang.Exception from label22 to label23 with label40;
    }
    public static void encodeFileToFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0, $r1;
        java.io.BufferedOutputStream r2, r4;
        java.lang.Exception $r3, $r9;
        java.io.FileOutputStream $r5;
        byte[] $r6;
        java.io.IOException r7;
        java.lang.Throwable $r8;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r0 = staticinvoke <com.ichi2.utils.Base64: java.lang.String encodeFromFile(java.lang.String)>($r0);

        r4 = null;

     label01:
        r2 = new java.io.BufferedOutputStream;

        $r5 = new java.io.FileOutputStream;

     label02:
        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.lang.String)>($r1);

        specialinvoke r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r5);

     label03:
        $r6 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r6);

     label04:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label05:
        return;

     label06:
        r7 := @caughtexception;

     label07:
        throw r7;

     label08:
        $r8 := @caughtexception;

     label09:
        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label10:
        throw $r8;

     label11:
        $r9 := @caughtexception;

        return;

     label12:
        $r3 := @caughtexception;

        goto label10;

     label13:
        $r8 := @caughtexception;

        r4 = r2;

        goto label09;

     label14:
        r7 := @caughtexception;

        r4 = r2;

        goto label07;

        catch java.io.IOException from label02 to label03 with label06;
        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Exception from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Exception from label09 to label10 with label12;
    }
    public static java.lang.String encodeFromFile(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        com.ichi2.utils.Base64$InputStream r1, r4;
        byte[] r2;
        java.io.File r3;
        long $l0;
        double $d0;
        int $i1, $i2;
        java.io.BufferedInputStream $r5;
        java.io.FileInputStream $r6;
        java.io.IOException r7;
        java.lang.Throwable $r8;
        java.lang.Exception $r9, $r10;

        $r0 := @parameter0: java.lang.String;

        r4 = null;

     label01:
        r3 = new java.io.File;

     label02:
        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r0);

        $l0 = virtualinvoke r3.<java.io.File: long length()>();

     label03:
        $d0 = (double) $l0;

        $d0 = $d0 * 1.4;

        $i1 = (int) $d0;

     label04:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 40);

     label05:
        r2 = newarray (byte)[$i1];

     label06:
        $i1 = 0;

     label07:
        r1 = new com.ichi2.utils.Base64$InputStream;

        $r5 = new java.io.BufferedInputStream;

        $r6 = new java.io.FileInputStream;

     label08:
        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r6);

        specialinvoke r1.<com.ichi2.utils.Base64$InputStream: void <init>(java.io.InputStream,int)>($r5, 1);

     label09:
        $i2 = virtualinvoke r1.<com.ichi2.utils.Base64$InputStream: int read(byte[],int,int)>(r2, $i1, 4096);

     label10:
        if $i2 < 0 goto label11;

        $i1 = $i1 + $i2;

        goto label09;

     label11:
        $r0 = new java.lang.String;

     label12:
        specialinvoke $r0.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r2, 0, $i1, "US-ASCII");

     label13:
        virtualinvoke r1.<com.ichi2.utils.Base64$InputStream: void close()>();

     label14:
        return $r0;

     label15:
        r7 := @caughtexception;

     label16:
        throw r7;

     label17:
        $r8 := @caughtexception;

     label18:
        virtualinvoke r4.<com.ichi2.utils.Base64$InputStream: void close()>();

     label19:
        throw $r8;

     label20:
        $r9 := @caughtexception;

        return $r0;

     label21:
        $r10 := @caughtexception;

        goto label19;

     label22:
        $r8 := @caughtexception;

        r4 = r1;

        goto label18;

     label23:
        r7 := @caughtexception;

        r4 = r1;

        goto label16;

        catch java.io.IOException from label02 to label03 with label15;
        catch java.io.IOException from label04 to label05 with label15;
        catch java.io.IOException from label08 to label09 with label15;
        catch java.lang.Throwable from label01 to label03 with label17;
        catch java.lang.Throwable from label04 to label06 with label17;
        catch java.lang.Throwable from label07 to label09 with label17;
        catch java.io.IOException from label09 to label10 with label23;
        catch java.io.IOException from label12 to label13 with label23;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label13 with label22;
        catch java.lang.Exception from label13 to label14 with label20;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Exception from label18 to label19 with label21;
    }
    public static java.lang.String encodeObject(java.io.Serializable) throws java.io.IOException
    {
        java.io.Serializable $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.Serializable;

        $r1 = staticinvoke <com.ichi2.utils.Base64: java.lang.String encodeObject(java.io.Serializable,int)>($r0, 0);

        return $r1;
    }
    public static java.lang.String encodeObject(java.io.Serializable, int) throws java.io.IOException
    {
        java.io.Serializable $r0;
        int $i0, $i1;
        com.ichi2.utils.Base64$OutputStream r1, r7;
        java.io.ByteArrayOutputStream r2, r6;
        java.util.zip.GZIPOutputStream r3, r8;
        java.io.UnsupportedEncodingException r4;
        java.lang.NullPointerException $r5;
        java.io.ObjectOutputStream r9, r10;
        java.lang.String $r11;
        byte[] $r12;
        java.io.IOException r13;
        java.lang.Throwable $r14;
        java.lang.Exception $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;

        $r0 := @parameter0: java.io.Serializable;

        $i0 := @parameter1: int;

        if $r0 != null goto label01;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot serialize a null object.");

        throw $r5;

     label01:
        r6 = null;

        r7 = null;

        r8 = null;

        r9 = null;

     label02:
        r2 = new java.io.ByteArrayOutputStream;

     label03:
        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

     label04:
        r1 = new com.ichi2.utils.Base64$OutputStream;

     label05:
        $i1 = $i0 | 1;

     label06:
        specialinvoke r1.<com.ichi2.utils.Base64$OutputStream: void <init>(java.io.OutputStream,int)>(r2, $i1);

     label07:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label21;

     label08:
        r3 = new java.util.zip.GZIPOutputStream;

     label09:
        specialinvoke r3.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>(r1);

     label10:
        r10 = new java.io.ObjectOutputStream;

     label11:
        specialinvoke r10.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r3);

     label12:
        r9 = r10;

        r8 = r3;

     label13:
        virtualinvoke r9.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r0);

     label14:
        virtualinvoke r9.<java.io.ObjectOutputStream: void close()>();

     label15:
        virtualinvoke r8.<java.util.zip.GZIPOutputStream: void close()>();

     label16:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label17:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void close()>();

     label18:
        $r11 = new java.lang.String;

     label19:
        $r12 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r11.<java.lang.String: void <init>(byte[],java.lang.String)>($r12, "US-ASCII");

     label20:
        return $r11;

     label21:
        r10 = new java.io.ObjectOutputStream;

     label22:
        specialinvoke r10.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r1);

     label23:
        r9 = r10;

        goto label13;

     label24:
        r13 := @caughtexception;

     label25:
        throw r13;

     label26:
        $r14 := @caughtexception;

     label27:
        virtualinvoke r9.<java.io.ObjectOutputStream: void close()>();

     label28:
        virtualinvoke r8.<java.util.zip.GZIPOutputStream: void close()>();

     label29:
        virtualinvoke r7.<java.io.OutputStream: void close()>();

     label30:
        virtualinvoke r6.<java.io.ByteArrayOutputStream: void close()>();

     label31:
        throw $r14;

     label32:
        r4 := @caughtexception;

        $r11 = new java.lang.String;

        $r12 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>($r12);

        return $r11;

     label33:
        $r15 := @caughtexception;

        goto label15;

     label34:
        $r16 := @caughtexception;

        goto label16;

     label35:
        $r17 := @caughtexception;

        goto label17;

     label36:
        $r18 := @caughtexception;

        goto label18;

     label37:
        $r19 := @caughtexception;

        goto label28;

     label38:
        $r20 := @caughtexception;

        goto label29;

     label39:
        $r21 := @caughtexception;

        goto label30;

     label40:
        $r22 := @caughtexception;

        goto label31;

     label41:
        $r14 := @caughtexception;

        r6 = r2;

        goto label27;

     label42:
        $r14 := @caughtexception;

        r7 = r1;

        r6 = r2;

        goto label27;

     label43:
        $r14 := @caughtexception;

        r8 = r3;

        r7 = r1;

        r6 = r2;

        goto label27;

     label44:
        r13 := @caughtexception;

        r6 = r2;

        goto label25;

     label45:
        r13 := @caughtexception;

        r7 = r1;

        r6 = r2;

        goto label25;

     label46:
        r13 := @caughtexception;

        r8 = r3;

        r7 = r1;

        r6 = r2;

        goto label25;

        catch java.io.IOException from label03 to label04 with label24;
        catch java.lang.Throwable from label02 to label04 with label26;
        catch java.io.IOException from label06 to label07 with label44;
        catch java.lang.Throwable from label04 to label05 with label41;
        catch java.lang.Throwable from label06 to label07 with label41;
        catch java.io.IOException from label09 to label10 with label45;
        catch java.lang.Throwable from label08 to label10 with label42;
        catch java.io.IOException from label11 to label12 with label46;
        catch java.lang.Throwable from label10 to label12 with label43;
        catch java.io.IOException from label13 to label14 with label45;
        catch java.lang.Throwable from label13 to label14 with label42;
        catch java.lang.Exception from label14 to label15 with label33;
        catch java.lang.Exception from label15 to label16 with label34;
        catch java.lang.Exception from label16 to label17 with label35;
        catch java.lang.Exception from label17 to label18 with label36;
        catch java.io.UnsupportedEncodingException from label19 to label20 with label32;
        catch java.io.IOException from label22 to label23 with label45;
        catch java.lang.Throwable from label21 to label23 with label42;
        catch java.lang.Throwable from label25 to label26 with label26;
        catch java.lang.Exception from label27 to label28 with label37;
        catch java.lang.Exception from label28 to label29 with label38;
        catch java.lang.Exception from label29 to label30 with label39;
        catch java.lang.Exception from label30 to label31 with label40;
    }
    public static void encodeToFile(byte[], java.lang.String) throws java.io.IOException
    {
        byte[] $r0;
        java.lang.String $r1;
        com.ichi2.utils.Base64$OutputStream r2, r4;
        java.lang.NullPointerException $r3;
        java.io.FileOutputStream $r5;
        java.io.IOException r6;
        java.lang.Throwable $r7;
        java.lang.Exception $r8, $r9;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label01;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Data to encode was null.");

        throw $r3;

     label01:
        r4 = null;

     label02:
        r2 = new com.ichi2.utils.Base64$OutputStream;

        $r5 = new java.io.FileOutputStream;

     label03:
        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.lang.String)>($r1);

        specialinvoke r2.<com.ichi2.utils.Base64$OutputStream: void <init>(java.io.OutputStream,int)>($r5, 1);

     label04:
        virtualinvoke r2.<com.ichi2.utils.Base64$OutputStream: void write(byte[])>($r0);

     label05:
        virtualinvoke r2.<com.ichi2.utils.Base64$OutputStream: void close()>();

     label06:
        return;

     label07:
        r6 := @caughtexception;

     label08:
        throw r6;

     label09:
        $r7 := @caughtexception;

     label10:
        virtualinvoke r4.<com.ichi2.utils.Base64$OutputStream: void close()>();

     label11:
        throw $r7;

     label12:
        $r8 := @caughtexception;

        return;

     label13:
        $r9 := @caughtexception;

        goto label11;

     label14:
        $r7 := @caughtexception;

        r4 = r2;

        goto label10;

     label15:
        r6 := @caughtexception;

        r4 = r2;

        goto label08;

        catch java.io.IOException from label03 to label04 with label07;
        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.io.IOException from label04 to label05 with label15;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Exception from label10 to label11 with label13;
    }
    private static byte[] getAlphabet(int)
    {
        int $i0, $i1;
        byte[] r0;

        $i0 := @parameter0: int;

        $i1 = $i0 & 16;

        if $i1 != 16 goto label1;

        r0 = <com.ichi2.utils.Base64: byte[] _URL_SAFE_ALPHABET>;

        return r0;

     label1:
        $i0 = $i0 & 32;

        if $i0 != 32 goto label2;

        r0 = <com.ichi2.utils.Base64: byte[] _ORDERED_ALPHABET>;

        return r0;

     label2:
        r0 = <com.ichi2.utils.Base64: byte[] _STANDARD_ALPHABET>;

        return r0;
    }
    private static byte[] getDecodabet(int)
    {
        int $i0, $i1;
        byte[] r0;

        $i0 := @parameter0: int;

        $i1 = $i0 & 16;

        if $i1 != 16 goto label1;

        r0 = <com.ichi2.utils.Base64: byte[] _URL_SAFE_DECODABET>;

        return r0;

     label1:
        $i0 = $i0 & 32;

        if $i0 != 32 goto label2;

        r0 = <com.ichi2.utils.Base64: byte[] _ORDERED_DECODABET>;

        return r0;

     label2:
        r0 = <com.ichi2.utils.Base64: byte[] _STANDARD_DECODABET>;

        return r0;
    }
