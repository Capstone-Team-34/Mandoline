com.ichi2.utils.Base64$InputStream extends java.io.FilterInputStream
private boolean breakLines
private byte[] buffer
private int bufferLength
private byte[] decodabet
private boolean encode
private int lineLength
private int numSigBytes
private int options
private int position
    public void <init>(java.io.InputStream)
    {
        com.ichi2.utils.Base64$InputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.ichi2.utils.Base64$InputStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<com.ichi2.utils.Base64$InputStream: void <init>(java.io.InputStream,int)>($r1, 0);

        return;
    }
    public void <init>(java.io.InputStream, int)
    {
        com.ichi2.utils.Base64$InputStream r0;
        java.io.InputStream $r1;
        int $i0, $i1;
        byte[] $r2;
        boolean $z0, $z1;
        byte $b2;

        r0 := @this: com.ichi2.utils.Base64$InputStream;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $z0 = 1;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<com.ichi2.utils.Base64$InputStream: int options> = $i0;

        $i1 = $i0 & 8;

        if $i1 <= 0 goto label4;

        $z1 = 1;

     label1:
        r0.<com.ichi2.utils.Base64$InputStream: boolean breakLines> = $z1;

        $i1 = $i0 & 1;

        if $i1 <= 0 goto label5;

     label2:
        r0.<com.ichi2.utils.Base64$InputStream: boolean encode> = $z0;

        $z0 = r0.<com.ichi2.utils.Base64$InputStream: boolean encode>;

        if $z0 == 0 goto label6;

        $b2 = 4;

     label3:
        r0.<com.ichi2.utils.Base64$InputStream: int bufferLength> = $b2;

        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int bufferLength>;

        $r2 = newarray (byte)[$i1];

        r0.<com.ichi2.utils.Base64$InputStream: byte[] buffer> = $r2;

        r0.<com.ichi2.utils.Base64$InputStream: int position> = -1;

        r0.<com.ichi2.utils.Base64$InputStream: int lineLength> = 0;

        $r2 = staticinvoke <com.ichi2.utils.Base64: byte[] access$000(int)>($i0);

        r0.<com.ichi2.utils.Base64$InputStream: byte[] decodabet> = $r2;

        return;

     label4:
        $z1 = 0;

        goto label1;

     label5:
        $z0 = 0;

        goto label2;

     label6:
        $b2 = 3;

        goto label3;
    }
    public int read() throws java.io.IOException
    {
        com.ichi2.utils.Base64$InputStream r0;
        byte[] r1, $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.io.InputStream $r2;
        byte $b3;
        java.io.IOException $r4;

        r0 := @this: com.ichi2.utils.Base64$InputStream;

        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int position>;

        if $i1 >= 0 goto label03;

        $z0 = r0.<com.ichi2.utils.Base64$InputStream: boolean encode>;

        if $z0 == 0 goto label05;

        r1 = newarray (byte)[3];

        $i1 = 0;

        $i0 = 0;

     label01:
        if $i0 >= 3 goto label02;

        $r2 = r0.<com.ichi2.utils.Base64$InputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        if $i2 < 0 goto label02;

        $b3 = (byte) $i2;

        r1[$i0] = $b3;

        $i1 = $i1 + 1;

        $i0 = $i0 + 1;

        goto label01;

     label02:
        if $i1 <= 0 goto label04;

        $r3 = r0.<com.ichi2.utils.Base64$InputStream: byte[] buffer>;

        $i0 = r0.<com.ichi2.utils.Base64$InputStream: int options>;

        staticinvoke <com.ichi2.utils.Base64: byte[] access$100(byte[],int,int,byte[],int,int)>(r1, 0, $i1, $r3, 0, $i0);

        r0.<com.ichi2.utils.Base64$InputStream: int position> = 0;

        r0.<com.ichi2.utils.Base64$InputStream: int numSigBytes> = 4;

     label03:
        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int position>;

        if $i1 < 0 goto label16;

        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int position>;

        $i0 = r0.<com.ichi2.utils.Base64$InputStream: int numSigBytes>;

        if $i1 < $i0 goto label13;

     label04:
        return -1;

     label05:
        r1 = newarray (byte)[4];

        $i1 = 0;

     label06:
        if $i1 >= 4 goto label09;

     label07:
        $r2 = r0.<com.ichi2.utils.Base64$InputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        if $i0 < 0 goto label08;

        $r3 = r0.<com.ichi2.utils.Base64$InputStream: byte[] decodabet>;

        $i2 = $i0 & 127;

        $b3 = $r3[$i2];

        if $b3 <= -5 goto label07;

     label08:
        if $i0 >= 0 goto label10;

     label09:
        if $i1 != 4 goto label11;

        $r3 = r0.<com.ichi2.utils.Base64$InputStream: byte[] buffer>;

        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int options>;

        $i1 = staticinvoke <com.ichi2.utils.Base64: int access$200(byte[],int,byte[],int,int)>(r1, 0, $r3, 0, $i1);

        r0.<com.ichi2.utils.Base64$InputStream: int numSigBytes> = $i1;

        r0.<com.ichi2.utils.Base64$InputStream: int position> = 0;

        goto label03;

     label10:
        $b3 = (byte) $i0;

        r1[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label06;

     label11:
        if $i1 != 0 goto label12;

        return -1;

     label12:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Improperly padded Base64 input.");

        throw $r4;

     label13:
        $z0 = r0.<com.ichi2.utils.Base64$InputStream: boolean encode>;

        if $z0 == 0 goto label14;

        $z0 = r0.<com.ichi2.utils.Base64$InputStream: boolean breakLines>;

        if $z0 == 0 goto label14;

        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int lineLength>;

        if $i1 < 76 goto label14;

        r0.<com.ichi2.utils.Base64$InputStream: int lineLength> = 0;

        return 10;

     label14:
        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int lineLength>;

        $i1 = $i1 + 1;

        r0.<com.ichi2.utils.Base64$InputStream: int lineLength> = $i1;

        r1 = r0.<com.ichi2.utils.Base64$InputStream: byte[] buffer>;

        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int position>;

        $i0 = $i1 + 1;

        r0.<com.ichi2.utils.Base64$InputStream: int position> = $i0;

        $b3 = r1[$i1];

        $i1 = r0.<com.ichi2.utils.Base64$InputStream: int position>;

        $i0 = r0.<com.ichi2.utils.Base64$InputStream: int bufferLength>;

        if $i1 < $i0 goto label15;

        r0.<com.ichi2.utils.Base64$InputStream: int position> = -1;

     label15:
        $i1 = $b3 & 255;

        return $i1;

     label16:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Error in Base64 code reading stream.");

        throw $r4;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        com.ichi2.utils.Base64$InputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i4, i5;
        byte $b3;

        r0 := @this: com.ichi2.utils.Base64$InputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i5 = 0;

     label1:
        if i5 >= $i1 goto label3;

        $i4 = virtualinvoke r0.<com.ichi2.utils.Base64$InputStream: int read()>();

        if $i4 < 0 goto label2;

        $i2 = $i0 + i5;

        $b3 = (byte) $i4;

        $r1[$i2] = $b3;

        i5 = i5 + 1;

        goto label1;

     label2:
        if i5 != 0 goto label3;

        return -1;

     label3:
        return i5;
    }
