com.ichi2.utils.Base64$OutputStream extends java.io.FilterOutputStream
private byte[] b4
private boolean breakLines
private byte[] buffer
private int bufferLength
private byte[] decodabet
private boolean encode
private int lineLength
private int options
private int position
private boolean suspendEncoding
    public void <init>(java.io.OutputStream)
    {
        com.ichi2.utils.Base64$OutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<com.ichi2.utils.Base64$OutputStream: void <init>(java.io.OutputStream,int)>($r1, 1);

        return;
    }
    public void <init>(java.io.OutputStream, int)
    {
        com.ichi2.utils.Base64$OutputStream r0;
        java.io.OutputStream $r1;
        int $i0, $i1;
        byte[] $r2;
        boolean $z0, $z1;
        byte $b2;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $z0 = 1;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        $i1 = $i0 & 8;

        if $i1 == 0 goto label4;

        $z1 = 1;

     label1:
        r0.<com.ichi2.utils.Base64$OutputStream: boolean breakLines> = $z1;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label5;

     label2:
        r0.<com.ichi2.utils.Base64$OutputStream: boolean encode> = $z0;

        $z0 = r0.<com.ichi2.utils.Base64$OutputStream: boolean encode>;

        if $z0 == 0 goto label6;

        $b2 = 3;

     label3:
        r0.<com.ichi2.utils.Base64$OutputStream: int bufferLength> = $b2;

        $i1 = r0.<com.ichi2.utils.Base64$OutputStream: int bufferLength>;

        $r2 = newarray (byte)[$i1];

        r0.<com.ichi2.utils.Base64$OutputStream: byte[] buffer> = $r2;

        r0.<com.ichi2.utils.Base64$OutputStream: int position> = 0;

        r0.<com.ichi2.utils.Base64$OutputStream: int lineLength> = 0;

        r0.<com.ichi2.utils.Base64$OutputStream: boolean suspendEncoding> = 0;

        $r2 = newarray (byte)[4];

        r0.<com.ichi2.utils.Base64$OutputStream: byte[] b4> = $r2;

        r0.<com.ichi2.utils.Base64$OutputStream: int options> = $i0;

        $r2 = staticinvoke <com.ichi2.utils.Base64: byte[] access$000(int)>($i0);

        r0.<com.ichi2.utils.Base64$OutputStream: byte[] decodabet> = $r2;

        return;

     label4:
        $z1 = 0;

        goto label1;

     label5:
        $z0 = 0;

        goto label2;

     label6:
        $b2 = 4;

        goto label3;
    }
    public void close() throws java.io.IOException
    {
        com.ichi2.utils.Base64$OutputStream r0;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        virtualinvoke r0.<com.ichi2.utils.Base64$OutputStream: void flushBase64()>();

        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

        r0.<com.ichi2.utils.Base64$OutputStream: byte[] buffer> = null;

        r0.<com.ichi2.utils.Base64$OutputStream: java.io.OutputStream out> = null;

        return;
    }
    public void flushBase64() throws java.io.IOException
    {
        com.ichi2.utils.Base64$OutputStream r0;
        byte[] $r1, $r3;
        int $i0, $i1;
        boolean $z0;
        java.io.OutputStream $r2;
        java.io.IOException $r4;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int position>;

        if $i0 <= 0 goto label2;

        $z0 = r0.<com.ichi2.utils.Base64$OutputStream: boolean encode>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: java.io.OutputStream out>;

        $r3 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] b4>;

        $r1 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] buffer>;

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int position>;

        $i1 = r0.<com.ichi2.utils.Base64$OutputStream: int options>;

        $r1 = staticinvoke <com.ichi2.utils.Base64: byte[] access$300(byte[],byte[],int,int)>($r3, $r1, $i0, $i1);

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r1);

        r0.<com.ichi2.utils.Base64$OutputStream: int position> = 0;

        return;

     label1:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Base64 input not properly padded.");

        throw $r4;

     label2:
        return;
    }
    public void resumeEncoding()
    {
        com.ichi2.utils.Base64$OutputStream r0;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        r0.<com.ichi2.utils.Base64$OutputStream: boolean suspendEncoding> = 0;

        return;
    }
    public void suspendEncoding() throws java.io.IOException
    {
        com.ichi2.utils.Base64$OutputStream r0;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        virtualinvoke r0.<com.ichi2.utils.Base64$OutputStream: void flushBase64()>();

        r0.<com.ichi2.utils.Base64$OutputStream: boolean suspendEncoding> = 1;

        return;
    }
    public void write(int) throws java.io.IOException
    {
        com.ichi2.utils.Base64$OutputStream r0;
        int $i0, $i1, $i2;
        boolean $z0;
        java.io.OutputStream $r1;
        byte[] $r2, $r3;
        byte $b3;
        java.io.IOException $r4;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        $i0 := @parameter0: int;

        $z0 = r0.<com.ichi2.utils.Base64$OutputStream: boolean suspendEncoding>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.ichi2.utils.Base64$OutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        return;

     label1:
        $z0 = r0.<com.ichi2.utils.Base64$OutputStream: boolean encode>;

        if $z0 == 0 goto label3;

        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] buffer>;

        $i1 = r0.<com.ichi2.utils.Base64$OutputStream: int position>;

        $i2 = $i1 + 1;

        r0.<com.ichi2.utils.Base64$OutputStream: int position> = $i2;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int position>;

        $i1 = r0.<com.ichi2.utils.Base64$OutputStream: int bufferLength>;

        if $i0 < $i1 goto label5;

        $r1 = r0.<com.ichi2.utils.Base64$OutputStream: java.io.OutputStream out>;

        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] b4>;

        $r3 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] buffer>;

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int bufferLength>;

        $i1 = r0.<com.ichi2.utils.Base64$OutputStream: int options>;

        $r2 = staticinvoke <com.ichi2.utils.Base64: byte[] access$300(byte[],byte[],int,int)>($r2, $r3, $i0, $i1);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int lineLength>;

        $i0 = $i0 + 4;

        r0.<com.ichi2.utils.Base64$OutputStream: int lineLength> = $i0;

        $z0 = r0.<com.ichi2.utils.Base64$OutputStream: boolean breakLines>;

        if $z0 == 0 goto label2;

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int lineLength>;

        if $i0 < 76 goto label2;

        $r1 = r0.<com.ichi2.utils.Base64$OutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(10);

        r0.<com.ichi2.utils.Base64$OutputStream: int lineLength> = 0;

     label2:
        r0.<com.ichi2.utils.Base64$OutputStream: int position> = 0;

        return;

     label3:
        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] decodabet>;

        $i1 = $i0 & 127;

        $b3 = $r2[$i1];

        if $b3 <= -5 goto label4;

        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] buffer>;

        $i1 = r0.<com.ichi2.utils.Base64$OutputStream: int position>;

        $i2 = $i1 + 1;

        r0.<com.ichi2.utils.Base64$OutputStream: int position> = $i2;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int position>;

        $i1 = r0.<com.ichi2.utils.Base64$OutputStream: int bufferLength>;

        if $i0 < $i1 goto label5;

        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] buffer>;

        $r3 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] b4>;

        $i0 = r0.<com.ichi2.utils.Base64$OutputStream: int options>;

        $i0 = staticinvoke <com.ichi2.utils.Base64: int access$200(byte[],int,byte[],int,int)>($r2, 0, $r3, 0, $i0);

        $r1 = r0.<com.ichi2.utils.Base64$OutputStream: java.io.OutputStream out>;

        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] b4>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        r0.<com.ichi2.utils.Base64$OutputStream: int position> = 0;

        return;

     label4:
        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: byte[] decodabet>;

        $i0 = $i0 & 127;

        $b3 = $r2[$i0];

        if $b3 == -5 goto label5;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Invalid character in Base64 data.");

        throw $r4;

     label5:
        return;
    }
    public void write(byte[], int, int) throws java.io.IOException
    {
        com.ichi2.utils.Base64$OutputStream r0;
        byte[] $r1;
        int $i0, $i1, i2, $i3;
        boolean $z0;
        java.io.OutputStream $r2;
        byte $b4;

        r0 := @this: com.ichi2.utils.Base64$OutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<com.ichi2.utils.Base64$OutputStream: boolean suspendEncoding>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.ichi2.utils.Base64$OutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return;

     label1:
        i2 = 0;

     label2:
        if i2 >= $i1 goto label3;

        $i3 = $i0 + i2;

        $b4 = $r1[$i3];

        virtualinvoke r0.<com.ichi2.utils.Base64$OutputStream: void write(int)>($b4);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }
