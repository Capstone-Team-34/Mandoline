com.ichi2.utils.Threads extends java.lang.Object
    private void <init>()
    {
        com.ichi2.utils.Threads r0;

        r0 := @this: com.ichi2.utils.Threads;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void checkMainThread()
    {
        boolean $z0;
        java.lang.IllegalStateException $r0;
        java.lang.StringBuilder $r1;
        java.lang.Thread $r2;
        java.lang.String $r3;

        $z0 = staticinvoke <com.ichi2.utils.Threads: boolean isOnMainThread()>();

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be called on the main thread instead of ");

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label1:
        return;
    }
    public static void checkNotMainThread()
    {
        boolean $z0;
        java.lang.IllegalStateException $r0;

        $z0 = staticinvoke <com.ichi2.utils.Threads: boolean isOnMainThread()>();

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("must not be called on the main thread");

        throw $r0;

     label1:
        return;
    }
    public static boolean isOnMainThread()
    {
        android.os.Looper $r0, $r1;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static com.ichi2.utils.Threads$ThreadChecker newCurrentThreadChecker()
    {
        com.ichi2.utils.Threads$SingleThreadChecker $r0;
        java.lang.Thread $r1;

        $r0 = new com.ichi2.utils.Threads$SingleThreadChecker;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        specialinvoke $r0.<com.ichi2.utils.Threads$SingleThreadChecker: void <init>(java.lang.Thread,com.ichi2.utils.Threads$1)>($r1, null);

        return $r0;
    }
    public static com.ichi2.utils.Threads$ThreadChecker newLazySingleThreadChecker()
    {
        com.ichi2.utils.Threads$SingleThreadChecker $r0;

        $r0 = new com.ichi2.utils.Threads$SingleThreadChecker;

        specialinvoke $r0.<com.ichi2.utils.Threads$SingleThreadChecker: void <init>(java.lang.Thread,com.ichi2.utils.Threads$1)>(null, null);

        return $r0;
    }
    public static com.ichi2.utils.Threads$ThreadChecker newSingleThreadChecker(java.lang.Thread)
    {
        java.lang.Thread $r0;
        java.lang.IllegalArgumentException $r1;
        com.ichi2.utils.Threads$SingleThreadChecker $r2;

        $r0 := @parameter0: java.lang.Thread;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("thread should not be null");

        throw $r1;

     label1:
        $r2 = new com.ichi2.utils.Threads$SingleThreadChecker;

        specialinvoke $r2.<com.ichi2.utils.Threads$SingleThreadChecker: void <init>(java.lang.Thread,com.ichi2.utils.Threads$1)>($r0, null);

        return $r2;
    }
