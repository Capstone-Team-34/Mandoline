com.ichi2.utils.MethodLogger extends java.lang.Object
    private void <init>()
    {
        com.ichi2.utils.MethodLogger r0;

        r0 := @this: com.ichi2.utils.MethodLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void log()
    {
        staticinvoke <com.ichi2.utils.MethodLogger: void logInternal(java.lang.String)>("");

        return;
    }
    public static void log(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.ichi2.utils.MethodLogger: void logInternal(java.lang.String)>($r0);

        return;
    }
    private static void logInternal(java.lang.String)
    {
        java.lang.String $r0, $r4, $r6;
        java.lang.StackTraceElement r1;
        int i0, i1, $i2;
        java.lang.Thread $r2;
        java.lang.StackTraceElement[] $r3;
        java.lang.Class $r5;
        boolean $z0;
        java.lang.IllegalStateException $r7;
        java.lang.Object[] $r8;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = $r3[i1];

        $r4 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r5 = class "Lcom/ichi2/utils/MethodLogger;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r4, $r6);

        if $z0 == 0 goto label3;

        r1 = $r3[i1];

        $r4 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r4, "logInternal");

        if $z0 == 0 goto label3;

     label2:
        $i2 = i1 + 2;

        if $i2 < i0 goto label4;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("there should always be a caller for this method");

        throw $r7;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        i0 = i1 + 2;

        r1 = $r3[i0];

        $r4 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r6 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label5;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = $r4;

        $r8[1] = $r6;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("called: %s.%s()", $r8);

        return;

     label5:
        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = $r4;

        $r8[1] = $r6;

        $r8[2] = $r0;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("called: %s.%s(): %s", $r8);

        return;
    }
