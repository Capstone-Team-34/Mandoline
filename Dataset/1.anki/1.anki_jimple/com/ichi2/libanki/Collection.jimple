com.ichi2.libanki.Collection extends java.lang.Object
private static final int UNDO_SIZE_MAX
public static final java.lang.String defaultConf
private static final java.util.regex.Pattern fClozePatternA
private static final java.util.regex.Pattern fClozePatternQ
private static final java.util.regex.Pattern fClozeTagStart
private org.json.JSONObject mConf
private android.content.Context mContext
private long mCrt
private com.ichi2.libanki.DB mDb
private boolean mDebugLog
private com.ichi2.libanki.Decks mDecks
private boolean mDty
private double mLastSave
private java.io.PrintWriter mLogHnd
private long mLs
private com.ichi2.libanki.Media mMedia
private long mMod
private com.ichi2.libanki.Models mModels
private java.lang.String mPath
private com.ichi2.libanki.Sched mSched
private long mScm
private boolean mServer
private int mStartReps
private double mStartTime
private com.ichi2.libanki.Tags mTags
private java.util.LinkedList mUndo
private int mUsn
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\{\\{(?!type:)(.*?)cloze:");

        <com.ichi2.libanki.Collection: java.util.regex.Pattern fClozePatternQ> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\{\\{(.*?)cloze:");

        <com.ichi2.libanki.Collection: java.util.regex.Pattern fClozePatternA> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("<%cloze:");

        <com.ichi2.libanki.Collection: java.util.regex.Pattern fClozeTagStart> = $r0;

        return;
    }
    public void <init>(android.content.Context, com.ichi2.libanki.DB, java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        android.content.Context $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.String $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.ichi2.libanki.DB;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.ichi2.libanki.Collection: void <init>(android.content.Context,com.ichi2.libanki.DB,java.lang.String,boolean)>($r1, $r2, $r3, 0);

        return;
    }
    public void <init>(android.content.Context, com.ichi2.libanki.DB, java.lang.String, boolean)
    {
        com.ichi2.libanki.Collection r0;
        android.content.Context $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.ichi2.libanki.DB;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<com.ichi2.libanki.Collection: void <init>(android.content.Context,com.ichi2.libanki.DB,java.lang.String,boolean,boolean)>($r1, $r2, $r3, 0, 0);

        return;
    }
    public void <init>(android.content.Context, com.ichi2.libanki.DB, java.lang.String, boolean, boolean)
    {
        com.ichi2.libanki.Collection r0;
        android.content.Context $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.String $r3;
        boolean $z0, $z1;
        org.json.JSONException r4;
        java.lang.Object[] $r5;
        double $d0;
        com.ichi2.libanki.Media $r6;
        com.ichi2.libanki.Models $r7;
        com.ichi2.libanki.Decks $r8;
        com.ichi2.libanki.Tags $r9;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Sched $r10;
        org.json.JSONObject $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.ichi2.libanki.DB;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ichi2.libanki.Collection: android.content.Context mContext> = $r1;

        r0.<com.ichi2.libanki.Collection: boolean mDebugLog> = $z1;

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb> = $r2;

        r0.<com.ichi2.libanki.Collection: java.lang.String mPath> = $r3;

        specialinvoke r0.<com.ichi2.libanki.Collection: void _openLog()>();

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r3;

        $r3 = staticinvoke <com.ichi2.utils.VersionUtils: java.lang.String getPkgVersionName()>();

        $r5[1] = $r3;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r5);

        r0.<com.ichi2.libanki.Collection: boolean mServer> = $z0;

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        r0.<com.ichi2.libanki.Collection: double mLastSave> = $d0;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void clearUndo()>();

        $r6 = new com.ichi2.libanki.Media;

        specialinvoke $r6.<com.ichi2.libanki.Media: void <init>(com.ichi2.libanki.Collection,boolean)>(r0, $z0);

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media mMedia> = $r6;

        $r7 = new com.ichi2.libanki.Models;

        specialinvoke $r7.<com.ichi2.libanki.Models: void <init>(com.ichi2.libanki.Collection)>(r0);

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels> = $r7;

        $r8 = new com.ichi2.libanki.Decks;

        specialinvoke $r8.<com.ichi2.libanki.Decks: void <init>(com.ichi2.libanki.Collection)>(r0);

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks> = $r8;

        $r9 = new com.ichi2.libanki.Tags;

        specialinvoke $r9.<com.ichi2.libanki.Tags: void <init>(com.ichi2.libanki.Collection)>(r0);

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags mTags> = $r9;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void load()>();

        $l0 = r0.<com.ichi2.libanki.Collection: long mCrt>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l0 = staticinvoke <com.ichi2.anki.UIUtils: long getDayStart()>();

        $l0 = $l0 / 1000L;

        r0.<com.ichi2.libanki.Collection: long mCrt> = $l0;

     label1:
        r0.<com.ichi2.libanki.Collection: int mStartReps> = 0;

        r0.<com.ichi2.libanki.Collection: double mStartTime> = 0.0;

        $r10 = new com.ichi2.libanki.Sched;

        specialinvoke $r10.<com.ichi2.libanki.Sched: void <init>(com.ichi2.libanki.Collection)>(r0);

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched> = $r10;

        $r11 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

        $z0 = virtualinvoke $r11.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("newBury", 0);

        if $z0 != 0 goto label5;

        $r11 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

     label2:
        virtualinvoke $r11.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("newBury", 1);

     label3:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void setMod()>();

        return;

     label4:
        r4 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r12;

     label5:
        return;

        catch org.json.JSONException from label2 to label3 with label4;
    }
    private void _closeLog()
    {
        com.ichi2.libanki.Collection r0;
        java.io.PrintWriter $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: java.io.PrintWriter mLogHnd>;

        if $r1 == null goto label1;

        $r1 = r0.<com.ichi2.libanki.Collection: java.io.PrintWriter mLogHnd>;

        virtualinvoke $r1.<java.io.PrintWriter: void close()>();

        r0.<com.ichi2.libanki.Collection: java.io.PrintWriter mLogHnd> = null;

     label1:
        return;
    }
    private java.util.ArrayList _fieldData(java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.Cursor r3, $r7;
        com.ichi2.libanki.DB $r4;
        io.requery.android.database.sqlite.SQLiteDatabase $r5;
        java.lang.StringBuilder $r6;
        boolean $z0;
        java.lang.Object[] $r8;
        long $l0;
        java.lang.Long $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = null;

     label01:
        $r4 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id, mid, flds FROM notes WHERE id IN ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r1, null);

     label02:
        r3 = $r7;

     label03:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

     label04:
        if $z0 == 0 goto label09;

     label05:
        $r8 = newarray (java.lang.Object)[3];

        $l0 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>(0);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[0] = $r9;

        $l0 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>(1);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[1] = $r9;

        $r1 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r8[2] = $r1;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label06:
        goto label03;

     label07:
        $r10 := @caughtexception;

        if r3 == null goto label08;

        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label08;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label08:
        throw $r10;

     label09:
        if $r7 == null goto label10;

        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label10;

        interfaceinvoke $r7.<android.database.Cursor: void close()>();

     label10:
        return r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
    }
    private com.ichi2.libanki.Card _newCard(com.ichi2.libanki.Note, org.json.JSONObject, int)
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Note $r1;
        org.json.JSONObject $r2;
        int $i0;
        com.ichi2.libanki.Card $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        $r2 := @parameter1: org.json.JSONObject;

        $i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card _newCard(com.ichi2.libanki.Note,org.json.JSONObject,int,boolean)>($r1, $r2, $i0, 1);

        return $r3;
    }
    private com.ichi2.libanki.Card _newCard(com.ichi2.libanki.Note, org.json.JSONObject, int, boolean)
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Note $r1;
        org.json.JSONObject $r2;
        int $i0, $i2;
        boolean $z0, $z1;
        com.ichi2.libanki.Card r3;
        long $l1;
        byte $b3;
        com.ichi2.libanki.Decks $r4;
        java.util.HashMap $r5;
        java.lang.Long $r6;
        org.json.JSONException r7, r9;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        $r2 := @parameter1: org.json.JSONObject;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        r3 = new com.ichi2.libanki.Card;

        specialinvoke r3.<com.ichi2.libanki.Card: void <init>(com.ichi2.libanki.Collection)>(r0);

        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Note: long getId()>();

        virtualinvoke r3.<com.ichi2.libanki.Card: void setNid(long)>($l1);

     label01:
        $i2 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        virtualinvoke r3.<com.ichi2.libanki.Card: void setOrd(int)>($i2);

     label02:
        $l1 = virtualinvoke $r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("did", 0L);

        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label09;

        $r4 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.HashMap getDecks()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $z1 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r6);

        if $z1 == 0 goto label09;

        virtualinvoke r3.<com.ichi2.libanki.Card: void setDid(long)>($l1);

     label03:
        $r4 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

     label04:
        $l1 = virtualinvoke r3.<com.ichi2.libanki.Card: long getDid()>();

        $r2 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l1);

        $i2 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label05:
        if $i2 != 1 goto label10;

     label06:
        virtualinvoke r3.<com.ichi2.libanki.Card: void setDid(long)>(1L);

     label07:
        $l1 = virtualinvoke r3.<com.ichi2.libanki.Card: long getDid()>();

        $i0 = virtualinvoke r0.<com.ichi2.libanki.Collection: int _dueForDid(long,int)>($l1, $i0);

        $l1 = (long) $i0;

        virtualinvoke r3.<com.ichi2.libanki.Card: void setDue(long)>($l1);

        if $z0 == 0 goto label13;

        virtualinvoke r3.<com.ichi2.libanki.Card: void flush()>();

        return r3;

     label08:
        r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r7);

        goto label02;

     label09:
        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        $l1 = virtualinvoke $r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("did", 0L);

        virtualinvoke r3.<com.ichi2.libanki.Card: void setDid(long)>($l1);

        goto label03;

     label10:
        $l1 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke r3.<com.ichi2.libanki.Card: void setDid(long)>($l1);

     label11:
        goto label07;

     label12:
        r9 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r9);

        throw $r8;

     label13:
        return r3;

        catch org.json.JSONException from label01 to label02 with label08;
        catch org.json.JSONException from label04 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
    }
    private void _openLog()
    {
        com.ichi2.libanki.Collection r0;
        java.io.IOException r1;
        java.io.File r2, r3;
        boolean $z0;
        java.lang.String $r4;
        long $l0;
        byte $b1;
        java.lang.StringBuilder $r5;
        java.io.PrintWriter $r6;
        java.io.BufferedWriter $r7;
        java.io.FileWriter $r8;
        java.lang.Object[] $r9;

        r0 := @this: com.ichi2.libanki.Collection;

        $z0 = r0.<com.ichi2.libanki.Collection: boolean mDebugLog>;

        if $z0 != 0 goto label01;

        return;

     label01:
        r2 = new java.io.File;

        $r4 = r0.<com.ichi2.libanki.Collection: java.lang.String mPath>;

     label02:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\\.anki2$", ".log");

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

     label03:
        if $z0 == 0 goto label10;

     label04:
        $l0 = virtualinvoke r2.<java.io.File: long length()>();

     label05:
        $b1 = $l0 cmp 10485760L;

        if $b1 <= 0 goto label10;

        r3 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".old");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

     label07:
        if $z0 == 0 goto label09;

     label08:
        virtualinvoke r3.<java.io.File: boolean delete()>();

     label09:
        virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>(r3);

     label10:
        $r6 = new java.io.PrintWriter;

        $r7 = new java.io.BufferedWriter;

        $r8 = new java.io.FileWriter;

     label11:
        specialinvoke $r8.<java.io.FileWriter: void <init>(java.io.File,boolean)>(r2, 1);

        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r8);

        specialinvoke $r6.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r7, 1);

     label12:
        r0.<com.ichi2.libanki.Collection: java.io.PrintWriter mLogHnd> = $r6;

        return;

     label13:
        r1 := @caughtexception;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Failed to open collection.log file - disabling logging", $r9);

        r0.<com.ichi2.libanki.Collection: boolean mDebugLog> = 0;

        return;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.io.IOException from label08 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label13;
    }
    private java.util.ArrayList _tmplsFromOrds(org.json.JSONObject, java.util.ArrayList)
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONObject $r1, r9;
        java.util.ArrayList r2, r4;
        org.json.JSONException r3;
        int $i0, $i1;
        org.json.JSONArray $r5;
        java.lang.Integer $r6;
        boolean $z0;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        java.lang.String $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: org.json.JSONObject;

        r2 := @parameter1: java.util.ArrayList;

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label01:
        $i0 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("type");

     label02:
        if $i0 != 0 goto label11;

     label03:
        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label04:
        $i0 = 0;

     label05:
        $i1 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

     label06:
        if $i0 >= $i1 goto label21;

     label07:
        $r1 = virtualinvoke $r5.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $i1 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r6);

     label08:
        if $z0 == 0 goto label10;

     label09:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label10:
        $i0 = $i0 + 1;

        goto label05;

     label11:
        $r7 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label13:
        if $z0 == 0 goto label21;

     label14:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label15:
        $r6 = (java.lang.Integer) $r8;

     label16:
        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label17:
        r9 = new org.json.JSONObject;

     label18:
        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $r10 = virtualinvoke $r5.<org.json.JSONArray: java.lang.String getString(int)>(0);

        specialinvoke r9.<org.json.JSONObject: void <init>(java.lang.String)>($r10);

        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("ord", $i0);

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r9);

     label19:
        goto label12;

     label20:
        r3 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r11;

     label21:
        return r4;

        catch org.json.JSONException from label01 to label02 with label20;
        catch org.json.JSONException from label03 to label04 with label20;
        catch org.json.JSONException from label05 to label06 with label20;
        catch org.json.JSONException from label07 to label08 with label20;
        catch org.json.JSONException from label09 to label10 with label20;
        catch org.json.JSONException from label11 to label13 with label20;
        catch org.json.JSONException from label14 to label15 with label20;
        catch org.json.JSONException from label16 to label17 with label20;
        catch org.json.JSONException from label18 to label19 with label20;
    }
    public int _dueForDid(long, int)
    {
        com.ichi2.libanki.Collection r0;
        long $l0;
        org.json.JSONException r1;
        java.util.Random r2;
        int i1, $i2;
        com.ichi2.libanki.Decks $r3;
        org.json.JSONObject $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

     label01:
        $r4 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i2 = virtualinvoke $r4.<org.json.JSONObject: int getInt(java.lang.String)>("order");

     label02:
        if $i2 != 1 goto label03;

        return i1;

     label03:
        r2 = new java.util.Random;

     label04:
        specialinvoke r2.<java.util.Random: void <init>()>();

     label05:
        $l0 = (long) i1;

     label06:
        virtualinvoke r2.<java.util.Random: void setSeed(long)>($l0);

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 1000);

     label07:
        i1 = i1 + -1;

     label08:
        i1 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(i1);

     label09:
        i1 = i1 + 1;

        return i1;

     label10:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch org.json.JSONException from label01 to label02 with label10;
        catch org.json.JSONException from label04 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
    }
    public void _logRem(long[], int)
    {
        com.ichi2.libanki.Collection r0;
        long[] $r1;
        int $i0, $i2, $i3, $i4;
        long l1;
        android.content.ContentValues r2;
        java.lang.Integer $r3;
        java.lang.Long $r4;
        com.ichi2.libanki.DB $r5;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i2 = lengthof $r1;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        l1 = $r1[$i3];

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        $i4 = virtualinvoke r0.<com.ichi2.libanki.Collection: int usn()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("usn", $r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("oid", $r4);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("type", $r3);

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r5.<com.ichi2.libanki.DB: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("graves", null, r2);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return;
    }
    public java.util.ArrayList _qaData()
    {
        com.ichi2.libanki.Collection r0;
        java.util.ArrayList $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList _qaData(java.lang.String)>("");

        return $r1;
    }
    public java.util.ArrayList _qaData(java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.Cursor r3, $r7;
        com.ichi2.libanki.DB $r4;
        io.requery.android.database.sqlite.SQLiteDatabase $r5;
        java.lang.StringBuilder $r6;
        boolean $z0;
        java.lang.Object[] $r8;
        long $l0;
        java.lang.Long $r9;
        int $i1;
        java.lang.Integer $r10;
        java.lang.Throwable $r11;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = null;

     label01:
        $r4 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT c.id, n.id, n.mid, c.did, c.ord, n.tags, n.flds FROM cards c, notes n WHERE c.nid == n.id ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r1, null);

     label02:
        r3 = $r7;

     label03:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

     label04:
        if $z0 == 0 goto label09;

     label05:
        $r8 = newarray (java.lang.Object)[7];

        $l0 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>(0);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[0] = $r9;

        $l0 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>(1);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[1] = $r9;

        $l0 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>(2);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[2] = $r9;

        $l0 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>(3);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[3] = $r9;

        $i1 = interfaceinvoke $r7.<android.database.Cursor: int getInt(int)>(4);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8[4] = $r10;

        $r1 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>(5);

        $r8[5] = $r1;

        $r1 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>(6);

        $r8[6] = $r1;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label06:
        goto label03;

     label07:
        $r11 := @caughtexception;

        if r3 == null goto label08;

        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label08;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label08:
        throw $r11;

     label09:
        if $r7 == null goto label10;

        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label10;

        interfaceinvoke $r7.<android.database.Cursor: void close()>();

     label10:
        return r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
    }
    public void _remNotes(long[])
    {
        com.ichi2.libanki.Collection r0;
        long[] $r1;
        int $i0;
        java.lang.String $r2;
        com.ichi2.libanki.DB $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: long[];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void _logRem(long[],int)>($r1, 1);

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM notes WHERE id IN ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r2);

        return;
    }
    public java.util.HashMap _renderQA(java.lang.Object[])
    {
        com.ichi2.libanki.Collection r0;
        java.lang.Object[] $r1;
        java.util.HashMap $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.HashMap _renderQA(java.lang.Object[],java.lang.String,java.lang.String)>($r1, null, null);

        return $r2;
    }
    public java.util.HashMap _renderQA(java.lang.Object[], java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.Object[] $r1, $r23;
        int i0, $i2, $i3, $i4;
        java.util.HashMap r2, $r29;
        org.json.JSONException r3;
        android.util.Pair r4, $r30;
        java.lang.String $r5, $r6, $r8, $r18;
        java.lang.Object $r7;
        java.lang.String[] $r9;
        java.util.Map r10, $r14;
        com.ichi2.libanki.Models $r11;
        java.lang.Long $r12;
        long $l1;
        org.json.JSONObject $r13, $r21;
        java.util.Set $r15;
        java.util.Iterator $r16;
        boolean $z0;
        java.lang.Integer $r17;
        com.ichi2.libanki.Decks $r19;
        org.json.JSONArray $r20;
        java.util.Locale $r22;
        android.util.Pair[] $r24;
        java.util.regex.Pattern $r25;
        java.util.regex.Matcher $r26;
        java.util.ArrayList $r28;
        com.ichi2.libanki.template.Template $r31;
        java.lang.RuntimeException $r32;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.Object[];

        $r5 := @parameter1: java.lang.String;

        $r6 := @parameter2: java.lang.String;

        $r7 = $r1[6];

        $r8 = (java.lang.String) $r7;

        $r9 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r8);

        r2 = new java.util.HashMap;

        r10 = r2;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        $r11 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $r7 = $r1[2];

        $r12 = (java.lang.Long) $r7;

        $l1 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        $r13 = virtualinvoke $r11.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        $r11 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $r14 = virtualinvoke $r11.<com.ichi2.libanki.Models: java.util.Map fieldMap(org.json.JSONObject)>($r13);

        $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set keySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r7 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $r7 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r4 = (android.util.Pair) $r7;

        $r7 = r4.<android.util.Pair: java.lang.Object first>;

        $r17 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r18 = $r9[i0];

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r18);

        goto label01;

     label02:
        $r7 = $r1[4];

        $r17 = (java.lang.Integer) $r7;

     label03:
        i0 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

     label04:
        i0 = i0 + 1;

        $r7 = $r1[5];

        $r8 = (java.lang.String) $r7;

     label05:
        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Tags", $r8);

        $r7 = virtualinvoke $r13.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("name");

     label06:
        $r8 = (java.lang.String) $r7;

     label07:
        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Type", $r8);

     label08:
        $r19 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

        $r7 = $r1[3];

        $r12 = (java.lang.Long) $r7;

     label09:
        $l1 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        $r8 = virtualinvoke $r19.<com.ichi2.libanki.Decks: java.lang.String name(long)>($l1);

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Deck", $r8);

        $r7 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("Deck");

     label10:
        $r8 = (java.lang.String) $r7;

     label11:
        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

     label12:
        $i2 = lengthof $r9;

        $i2 = $i2 + -1;

        $r8 = $r9[$i2];

     label13:
        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Subdeck", $r8);

        $i2 = virtualinvoke $r13.<org.json.JSONObject: int getInt(java.lang.String)>("type");

     label14:
        if $i2 != 0 goto label70;

     label15:
        $r20 = virtualinvoke $r13.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label16:
        $r7 = $r1[4];

        $r17 = (java.lang.Integer) $r7;

     label17:
        $i2 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r21 = virtualinvoke $r20.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i2);

     label18:
        $r8 = virtualinvoke $r21.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Card", $r8);

     label19:
        $r22 = <java.util.Locale: java.util.Locale US>;

        $r23 = newarray (java.lang.Object)[1];

     label20:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label21:
        $r23[0] = $r17;

     label22:
        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r22, "c%d", $r23);

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "1");

     label23:
        $r29 = new java.util.HashMap;

     label24:
        specialinvoke $r29.<java.util.HashMap: void <init>()>();

     label25:
        $r7 = $r1[0];

        $r12 = (java.lang.Long) $r7;

     label26:
        $l1 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        $r8 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        virtualinvoke $r29.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("id", $r8);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

     label27:
        if $z0 == 0 goto label29;

     label28:
        $r5 = virtualinvoke $r21.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("qfmt");

     label29:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

     label30:
        if $z0 == 0 goto label32;

     label31:
        $r6 = virtualinvoke $r21.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("afmt");

     label32:
        $r24 = newarray (android.util.Pair)[2];

        $r30 = new android.util.Pair;

     label33:
        specialinvoke $r30.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("q", $r5);

     label34:
        $r24[0] = $r30;

        $r30 = new android.util.Pair;

     label35:
        specialinvoke $r30.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("a", $r6);

     label36:
        $r24[1] = $r30;

        $i2 = lengthof $r24;

        $i3 = 0;

     label37:
        if $i3 >= $i2 goto label87;

        r4 = $r24[$i3];

        $r7 = r4.<android.util.Pair: java.lang.Object first>;

        $r5 = (java.lang.String) $r7;

        $r7 = r4.<android.util.Pair: java.lang.Object second>;

        $r6 = (java.lang.String) $r7;

     label38:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("q");

     label39:
        if $z0 == 0 goto label72;

        $r25 = <com.ichi2.libanki.Collection: java.util.regex.Pattern fClozePatternQ>;

     label40:
        $r26 = virtualinvoke $r25.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

     label41:
        $r22 = <java.util.Locale: java.util.Locale US>;

        $r23 = newarray (java.lang.Object)[1];

     label42:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label43:
        $r23[0] = $r17;

     label44:
        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r22, "{{$1cq-%d:", $r23);

        $r6 = virtualinvoke $r26.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r6);

     label45:
        $r25 = <com.ichi2.libanki.Collection: java.util.regex.Pattern fClozeTagStart>;

     label46:
        $r26 = virtualinvoke $r25.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

     label47:
        $r22 = <java.util.Locale: java.util.Locale US>;

        $r23 = newarray (java.lang.Object)[1];

     label48:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label49:
        $r23[0] = $r17;

     label50:
        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r22, "<%%cq:%d:", $r23);

        $r6 = virtualinvoke $r26.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r6);

     label51:
        $r23 = newarray (java.lang.Object)[3];

        $r23[0] = $r13;

        $r23[1] = $r1;

        $r23[2] = r0;

     label52:
        $r7 = staticinvoke <com.ichi2.libanki.hooks.Hooks: java.lang.Object runFilter(java.lang.String,java.lang.Object,java.lang.Object[])>("mungeFields", r10, $r23);

     label53:
        $r14 = (java.util.Map) $r7;

        r10 = $r14;

        $r31 = new com.ichi2.libanki.template.Template;

     label54:
        specialinvoke $r31.<com.ichi2.libanki.template.Template: void <init>(java.lang.String,java.util.Map)>($r6, $r14);

        $r6 = virtualinvoke $r31.<com.ichi2.libanki.template.Template: java.lang.String render()>();

     label55:
        $r23 = newarray (java.lang.Object)[5];

        $r23[0] = $r5;

        $r23[1] = $r14;

        $r23[2] = $r13;

        $r23[3] = $r1;

        $r23[4] = r0;

     label56:
        $r7 = staticinvoke <com.ichi2.libanki.hooks.Hooks: java.lang.Object runFilter(java.lang.String,java.lang.Object,java.lang.Object[])>("mungeQA", $r6, $r23);

     label57:
        $r6 = (java.lang.String) $r7;

     label58:
        virtualinvoke $r29.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("q");

     label59:
        if $z0 == 0 goto label69;

     label60:
        $i4 = virtualinvoke $r13.<org.json.JSONObject: int getInt(java.lang.String)>("type");

     label61:
        if $i4 != 1 goto label69;

     label62:
        $r11 = virtualinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

     label63:
        $r7 = $r1[6];

        $r5 = (java.lang.String) $r7;

     label64:
        $r28 = virtualinvoke $r11.<com.ichi2.libanki.Models: java.util.ArrayList _availClozeOrds(org.json.JSONObject,java.lang.String,boolean)>($r13, $r5, 0);

        $i4 = virtualinvoke $r28.<java.util.ArrayList: int size()>();

     label65:
        if $i4 != 0 goto label69;

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = "http://ankisrs.net/docs/manual.html";

        $r23[1] = "help";

     label66:
        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("<a href=%s#cloze>%s</a>", $r23);

     label67:
        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = $r5;

     label68:
        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Please edit this note and add some cloze deletions. (%s)", $r23);

        virtualinvoke $r29.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("q", $r5);

     label69:
        $i3 = $i3 + 1;

        goto label37;

     label70:
        $r20 = virtualinvoke $r13.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $r21 = virtualinvoke $r20.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(0);

     label71:
        goto label18;

     label72:
        $r25 = <com.ichi2.libanki.Collection: java.util.regex.Pattern fClozePatternA>;

     label73:
        $r26 = virtualinvoke $r25.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

     label74:
        $r22 = <java.util.Locale: java.util.Locale US>;

        $r23 = newarray (java.lang.Object)[1];

     label75:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label76:
        $r23[0] = $r17;

     label77:
        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r22, "{{$1ca-%d:", $r23);

        $r6 = virtualinvoke $r26.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r6);

     label78:
        $r25 = <com.ichi2.libanki.Collection: java.util.regex.Pattern fClozeTagStart>;

     label79:
        $r26 = virtualinvoke $r25.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

     label80:
        $r22 = <java.util.Locale: java.util.Locale US>;

        $r23 = newarray (java.lang.Object)[1];

     label81:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label82:
        $r23[0] = $r17;

     label83:
        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r22, "<%%ca:%d:", $r23);

        $r6 = virtualinvoke $r26.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r6);

     label84:
        $r7 = virtualinvoke $r29.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("q");

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("FrontSide", $r7);

     label85:
        goto label51;

     label86:
        r3 := @caughtexception;

        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r32;

     label87:
        return $r29;

        catch org.json.JSONException from label03 to label04 with label86;
        catch org.json.JSONException from label05 to label06 with label86;
        catch org.json.JSONException from label07 to label08 with label86;
        catch org.json.JSONException from label09 to label10 with label86;
        catch org.json.JSONException from label11 to label12 with label86;
        catch org.json.JSONException from label13 to label14 with label86;
        catch org.json.JSONException from label15 to label16 with label86;
        catch org.json.JSONException from label17 to label18 with label86;
        catch org.json.JSONException from label18 to label19 with label86;
        catch org.json.JSONException from label20 to label21 with label86;
        catch org.json.JSONException from label22 to label23 with label86;
        catch org.json.JSONException from label24 to label25 with label86;
        catch org.json.JSONException from label26 to label27 with label86;
        catch org.json.JSONException from label28 to label29 with label86;
        catch org.json.JSONException from label29 to label30 with label86;
        catch org.json.JSONException from label31 to label32 with label86;
        catch org.json.JSONException from label33 to label34 with label86;
        catch org.json.JSONException from label35 to label36 with label86;
        catch org.json.JSONException from label38 to label39 with label86;
        catch org.json.JSONException from label40 to label41 with label86;
        catch org.json.JSONException from label42 to label43 with label86;
        catch org.json.JSONException from label44 to label45 with label86;
        catch org.json.JSONException from label46 to label47 with label86;
        catch org.json.JSONException from label48 to label49 with label86;
        catch org.json.JSONException from label50 to label51 with label86;
        catch org.json.JSONException from label52 to label53 with label86;
        catch org.json.JSONException from label54 to label55 with label86;
        catch org.json.JSONException from label56 to label57 with label86;
        catch org.json.JSONException from label58 to label59 with label86;
        catch org.json.JSONException from label60 to label61 with label86;
        catch org.json.JSONException from label62 to label63 with label86;
        catch org.json.JSONException from label64 to label65 with label86;
        catch org.json.JSONException from label66 to label67 with label86;
        catch org.json.JSONException from label68 to label69 with label86;
        catch org.json.JSONException from label70 to label71 with label86;
        catch org.json.JSONException from label73 to label74 with label86;
        catch org.json.JSONException from label75 to label76 with label86;
        catch org.json.JSONException from label77 to label78 with label86;
        catch org.json.JSONException from label79 to label80 with label86;
        catch org.json.JSONException from label81 to label82 with label86;
        catch org.json.JSONException from label83 to label84 with label86;
        catch org.json.JSONException from label84 to label85 with label86;
    }
    public int addNote(com.ichi2.libanki.Note)
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Note $r1;
        java.util.ArrayList $r2;
        int $i0, i1;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.json.JSONObject r5;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList findTemplates(com.ichi2.libanki.Note)>($r1);

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke $r1.<com.ichi2.libanki.Note: void flush()>();

        $i0 = virtualinvoke r0.<com.ichi2.libanki.Collection: int nextID(java.lang.String)>("pos");

        i1 = 0;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.json.JSONObject) $r4;

        specialinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card _newCard(com.ichi2.libanki.Note,org.json.JSONObject,int)>($r1, r5, $i0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return i1;
    }
    public boolean basicCheck()
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONException r1;
        int[] r2;
        com.ichi2.libanki.DB $r3;
        int $i0, $i1;
        java.util.Locale $r4;
        java.lang.Object[] $r5;
        com.ichi2.libanki.Models $r6;
        long[] $r7;
        java.lang.String $r8;
        boolean z0;
        java.util.ArrayList $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        org.json.JSONObject r12, $r14;
        org.json.JSONArray $r13;
        long $l2;
        java.lang.Long $r15;
        java.lang.RuntimeException $r16;

        r0 := @this: com.ichi2.libanki.Collection;

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $i0 = virtualinvoke $r3.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("select 1 from cards where nid not in (select id from notes) limit 1");

        if $i0 <= 0 goto label01;

        return 0;

     label01:
        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Models: long[] ids()>();

        $r8 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r7);

        $r5[0] = $r8;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "select 1 from notes where id not in (select distinct nid from cards) or mid not in %s limit 1", $r5);

        $i0 = virtualinvoke $r3.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r8);

        if $i0 <= 0 goto label03;

        z0 = 1;

     label02:
        if z0 == 0 goto label04;

        return 0;

     label03:
        z0 = 0;

        goto label02;

     label04:
        $r6 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

     label05:
        $r9 = virtualinvoke $r6.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label07:
        if z0 == 0 goto label28;

     label08:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

     label09:
        r12 = (org.json.JSONObject) $r11;

     label10:
        $i0 = virtualinvoke r12.<org.json.JSONObject: int getInt(java.lang.String)>("type");

     label11:
        if $i0 != 0 goto label06;

     label12:
        $r13 = virtualinvoke r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i0 = virtualinvoke $r13.<org.json.JSONArray: int length()>();

     label13:
        r2 = newarray (int)[$i0];

        $i0 = 0;

     label14:
        $i1 = virtualinvoke $r13.<org.json.JSONArray: int length()>();

     label15:
        if $i0 >= $i1 goto label18;

     label16:
        $r14 = virtualinvoke $r13.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $i1 = virtualinvoke $r14.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

     label17:
        r2[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label14;

     label18:
        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[2];

     label19:
        $r8 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(int[])>(r2);

     label20:
        $r5[0] = $r8;

     label21:
        $l2 = virtualinvoke r12.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

     label22:
        $r5[1] = $r15;

     label23:
        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "select 1 from cards where ord not in %s and nid in ( select id from notes where mid = %d) limit 1", $r5);

        $i0 = virtualinvoke $r3.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r8);

     label24:
        if $i0 <= 0 goto label26;

        z0 = 1;

     label25:
        if z0 == 0 goto label06;

        return 0;

     label26:
        z0 = 0;

        goto label25;

     label27:
        r1 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r16;

     label28:
        return 1;

        catch org.json.JSONException from label05 to label07 with label27;
        catch org.json.JSONException from label08 to label09 with label27;
        catch org.json.JSONException from label10 to label11 with label27;
        catch org.json.JSONException from label12 to label13 with label27;
        catch org.json.JSONException from label14 to label15 with label27;
        catch org.json.JSONException from label16 to label17 with label27;
        catch org.json.JSONException from label19 to label20 with label27;
        catch org.json.JSONException from label21 to label22 with label27;
        catch org.json.JSONException from label23 to label24 with label27;
    }
    public void beforeUpload()
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String r1;
        java.lang.String[] r2;
        int $i0, $i1;
        com.ichi2.libanki.DB $r3;
        java.lang.StringBuilder $r4;
        com.ichi2.libanki.Models $r5;
        com.ichi2.libanki.Tags $r6;
        com.ichi2.libanki.Decks $r7;
        long $l2;

        r0 := @this: com.ichi2.libanki.Collection;

        $i0 = 0;

        r2 = newarray (java.lang.String)[3];

        r2[0] = "notes";

        r2[1] = "cards";

        r2[2] = "revlog";

        $i1 = lengthof r2;

     label1:
        if $i0 >= $i1 goto label2;

        r1 = r2[$i0];

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET usn=0 WHERE usn=-1");

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>(r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>("delete from graves");

        $i0 = r0.<com.ichi2.libanki.Collection: int mUsn>;

        $i0 = $i0 + 1;

        r0.<com.ichi2.libanki.Collection: int mUsn> = $i0;

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        virtualinvoke $r5.<com.ichi2.libanki.Models: void beforeUpload()>();

        $r6 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags mTags>;

        virtualinvoke $r6.<com.ichi2.libanki.Tags: void beforeUpload()>();

        $r7 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

        virtualinvoke $r7.<com.ichi2.libanki.Decks: void beforeUpload()>();

        virtualinvoke r0.<com.ichi2.libanki.Collection: void modSchemaNoCheck()>();

        $l2 = r0.<com.ichi2.libanki.Collection: long mScm>;

        r0.<com.ichi2.libanki.Collection: long mLs> = $l2;

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>("vacuum");

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>("analyze");

        virtualinvoke r0.<com.ichi2.libanki.Collection: void close()>();

        return;
    }
    public int cardCount()
    {
        com.ichi2.libanki.Collection r0;
        int $i0;
        com.ichi2.libanki.DB $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM cards");

        return $i0;
    }
    public int cardCount(java.lang.Long[])
    {
        com.ichi2.libanki.Collection r0;
        java.lang.Long[] $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.Long[];

        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM cards WHERE did IN ");

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.lang.Long[])>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        return $i0;
    }
    public void clearUndo()
    {
        com.ichi2.libanki.Collection r0;
        java.util.LinkedList $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo> = $r1;

        return;
    }
    public void close()
    {
        com.ichi2.libanki.Collection r0;
        java.lang.Throwable $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void close(boolean)>(1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void close(boolean)
    {
        com.ichi2.libanki.Collection r0;
        boolean $z0;
        java.lang.RuntimeException r1;
        com.ichi2.libanki.DB $r2;
        io.requery.android.database.sqlite.SQLiteDatabase $r3;
        com.ichi2.compat.Compat $r4;
        com.ichi2.libanki.Media $r5;
        java.lang.Object[] $r6;
        java.lang.Throwable $r7, $r8;

        r0 := @this: com.ichi2.libanki.Collection;

        $z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label02:
        if $r2 == null goto label10;

     label03:
        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

     label04:
        if $z0 == 0 goto label17;

     label05:
        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label06:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void save()>();

        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label07:
        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label08:
        $z0 = r0.<com.ichi2.libanki.Collection: boolean mServer>;

        if $z0 != 0 goto label09;

        $r4 = staticinvoke <com.ichi2.compat.CompatHelper: com.ichi2.compat.Compat getCompat()>();

        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        interfaceinvoke $r4.<com.ichi2.compat.Compat: void disableDatabaseWriteAheadLogging(io.requery.android.database.sqlite.SQLiteDatabase)>($r3);

     label09:
        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r2.<com.ichi2.libanki.DB: void close()>();

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb> = null;

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media mMedia>;

        virtualinvoke $r5.<com.ichi2.libanki.Media: void close()>();

        specialinvoke r0.<com.ichi2.libanki.Collection: void _closeLog()>();

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Collection closed", $r6);

     label10:
        exitmonitor r0;

        return;

     label11:
        $r7 := @caughtexception;

     label12:
        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r7;

     label13:
        r1 := @caughtexception;

     label14:
        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r1, "closeDB");

     label15:
        goto label08;

     label16:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

     label17:
        $z0 = virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: boolean inTransaction()>();

     label18:
        if $z0 == 0 goto label08;

     label19:
        virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label20:
        goto label08;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.RuntimeException from label03 to label04 with label13;
        catch java.lang.RuntimeException from label05 to label06 with label13;
        catch java.lang.Throwable from label03 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.RuntimeException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label10 with label16;
        catch java.lang.RuntimeException from label12 to label13 with label13;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.RuntimeException from label17 to label18 with label13;
        catch java.lang.RuntimeException from label19 to label20 with label13;
        catch java.lang.Throwable from label17 to label20 with label16;
    }
    public java.lang.String emptyCardReport(java.util.List)
    {
        com.ichi2.libanki.Collection r0;
        java.util.List r1;
        java.lang.StringBuilder r2, $r6;
        android.database.Cursor r3, $r8;
        com.ichi2.libanki.DB $r4;
        io.requery.android.database.sqlite.SQLiteDatabase $r5;
        java.lang.String $r7, $r9;
        boolean $z0;
        java.lang.Object[] $r10;
        java.lang.Throwable $r11;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 := @parameter0: java.util.List;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r3 = null;

     label01:
        $r4 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select group_concat(ord+1), count(), flds from cards c, notes n where c.nid = n.id and c.id in ");

        $r7 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" group by nid");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r7, null);

     label02:
        r3 = $r8;

     label03:
        $z0 = interfaceinvoke $r8.<android.database.Cursor: boolean moveToNext()>();

     label04:
        if $z0 == 0 goto label09;

     label05:
        $r7 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>(1);

        $r9 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r7;

        $r7 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\u001f", " / ");

        $r10[1] = $r7;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Empty card numbers: %s\nFields: %s\n\n", $r10);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label06:
        goto label03;

     label07:
        $r11 := @caughtexception;

        if r3 == null goto label08;

        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label08;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label08:
        throw $r11;

     label09:
        if $r8 == null goto label10;

        $z0 = interfaceinvoke $r8.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label10;

        interfaceinvoke $r8.<android.database.Cursor: void close()>();

     label10:
        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
    }
    public java.util.List emptyCids()
    {
        com.ichi2.libanki.Collection r0;
        java.util.ArrayList r1, $r3;
        com.ichi2.libanki.Models $r2;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.json.JSONObject r6;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.json.JSONObject) $r5;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Models: java.util.ArrayList nids(org.json.JSONObject)>(r6);

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList genCards(java.util.List)>($r3);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        goto label1;

     label2:
        return r1;
    }
    public java.util.List findCards(java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        java.util.List $r2;
        com.ichi2.libanki.Finder $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.ichi2.libanki.Finder;

        specialinvoke $r3.<com.ichi2.libanki.Finder: void <init>(com.ichi2.libanki.Collection)>(r0);

        $r2 = virtualinvoke $r3.<com.ichi2.libanki.Finder: java.util.List findCards(java.lang.String,java.lang.String)>($r1, null);

        return $r2;
    }
    public java.util.List findCards(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;
        com.ichi2.libanki.Finder $r4;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new com.ichi2.libanki.Finder;

        specialinvoke $r4.<com.ichi2.libanki.Finder: void <init>(com.ichi2.libanki.Collection)>(r0);

        $r3 = virtualinvoke $r4.<com.ichi2.libanki.Finder: java.util.List findCards(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }
    public java.util.List findCardsForCardBrowser(java.lang.String, boolean, java.util.Map)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Map r2;
        java.util.List $r3;
        com.ichi2.libanki.Finder $r4;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.Map;

        $r4 = new com.ichi2.libanki.Finder;

        specialinvoke $r4.<com.ichi2.libanki.Finder: void <init>(com.ichi2.libanki.Collection)>(r0);

        $r3 = virtualinvoke $r4.<com.ichi2.libanki.Finder: java.util.List findCardsForCardBrowser(java.lang.String,boolean,java.util.Map)>($r1, $z0, r2);

        return $r3;
    }
    public java.util.List findDupes(java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        java.util.List $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.ichi2.libanki.Finder: java.util.List findDupes(com.ichi2.libanki.Collection,java.lang.String,java.lang.String)>(r0, $r1, "");

        return $r2;
    }
    public java.util.List findDupes(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.ichi2.libanki.Finder: java.util.List findDupes(com.ichi2.libanki.Collection,java.lang.String,java.lang.String)>(r0, $r1, $r2);

        return $r3;
    }
    public java.util.List findNotes(java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        java.util.List $r2;
        com.ichi2.libanki.Finder $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.ichi2.libanki.Finder;

        specialinvoke $r3.<com.ichi2.libanki.Finder: void <init>(com.ichi2.libanki.Collection)>(r0);

        $r2 = virtualinvoke $r3.<com.ichi2.libanki.Finder: java.util.List findNotes(java.lang.String)>($r1);

        return $r2;
    }
    public int findReplace(java.util.List, java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.util.List r1;
        java.lang.String $r2, $r3;
        int $i0;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 = staticinvoke <com.ichi2.libanki.Finder: int findReplace(com.ichi2.libanki.Collection,java.util.List,java.lang.String,java.lang.String)>(r0, r1, $r2, $r3);

        return $i0;
    }
    public int findReplace(java.util.List, java.lang.String, java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.util.List r1;
        java.lang.String $r2, $r3, $r4;
        int $i0;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $i0 = staticinvoke <com.ichi2.libanki.Finder: int findReplace(com.ichi2.libanki.Collection,java.util.List,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, $r2, $r3, $r4);

        return $i0;
    }
    public int findReplace(java.util.List, java.lang.String, java.lang.String, boolean)
    {
        com.ichi2.libanki.Collection r0;
        java.util.List r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $i0 = staticinvoke <com.ichi2.libanki.Finder: int findReplace(com.ichi2.libanki.Collection,java.util.List,java.lang.String,java.lang.String,boolean)>(r0, r1, $r2, $r3, $z0);

        return $i0;
    }
    public int findReplace(java.util.List, java.lang.String, java.lang.String, boolean, java.lang.String, boolean)
    {
        com.ichi2.libanki.Collection r0;
        java.util.List r1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: java.lang.String;

        $z1 := @parameter5: boolean;

        $i0 = staticinvoke <com.ichi2.libanki.Finder: int findReplace(com.ichi2.libanki.Collection,java.util.List,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>(r0, r1, $r2, $r3, $z0, $r4, $z1);

        return $i0;
    }
    public java.util.ArrayList findTemplates(com.ichi2.libanki.Note)
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Note $r1;
        org.json.JSONObject $r2;
        com.ichi2.libanki.Models $r3;
        java.lang.String[] $r4;
        java.lang.String $r5;
        java.util.ArrayList $r6;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $r4 = virtualinvoke $r1.<com.ichi2.libanki.Note: java.lang.String[] getFields()>();

        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>($r4);

        $r6 = virtualinvoke $r3.<com.ichi2.libanki.Models: java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)>($r2, $r5);

        $r6 = specialinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList _tmplsFromOrds(org.json.JSONObject,java.util.ArrayList)>($r2, $r6);

        return $r6;
    }
    public long fixIntegrity()
    {
        com.ichi2.libanki.Collection r0;
        java.util.ArrayList r1, r2;
        java.io.File r3;
        java.lang.String $r4;
        long $l0, $l3;
        com.ichi2.libanki.DB $r5;
        io.requery.android.database.sqlite.SQLiteDatabase $r6;
        boolean $z0;
        java.lang.StringBuilder $r7;
        com.ichi2.libanki.Models $r8;
        long[] $r9;
        int $i1, $i2, $i4;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        org.json.JSONObject r12, $r14;
        org.json.JSONArray $r13;
        java.lang.Integer $r15;
        android.database.Cursor r16, $r17;
        char $c5;
        java.lang.Long $r18;
        java.lang.Throwable $r19, $r22;
        org.json.JSONException r20;
        java.lang.RuntimeException $r21;
        java.lang.Object[] $r23;
        com.ichi2.libanki.Decks $r24;
        java.lang.Long[] $r25;
        com.ichi2.libanki.Tags $r26;

        r0 := @this: com.ichi2.libanki.Collection;

        r3 = new java.io.File;

        $r4 = r0.<com.ichi2.libanki.Collection: java.lang.String mPath>;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r4);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $l0 = virtualinvoke r3.<java.io.File: long length()>();

     label001:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label002:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void save()>();

     label003:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label004:
        $r4 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.lang.String queryString(java.lang.String)>("PRAGMA integrity_check");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("ok");

     label005:
        if $z0 != 0 goto label008;

     label006:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label007:
        return -1L;

     label008:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r7 = new java.lang.StringBuilder;

     label009:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM notes WHERE mid NOT IN ");

     label010:
        $r8 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

     label011:
        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Models: long[] ids()>();

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r4, 0);

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label012:
        if $i1 == 0 goto label015;

     label013:
        $r7 = new java.lang.StringBuilder;

     label014:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" note(s) with missing note type.");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void _remNotes(long[])>($r9);

     label015:
        $r8 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

     label016:
        r1 = virtualinvoke $r8.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r10 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label017:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label018:
        if $z0 == 0 goto label072;

     label019:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

     label020:
        r12 = (org.json.JSONObject) $r11;

     label021:
        $i1 = virtualinvoke r12.<org.json.JSONObject: int getInt(java.lang.String)>("type");

     label022:
        if $i1 != 0 goto label035;

     label023:
        r1 = new java.util.ArrayList;

     label024:
        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r13 = virtualinvoke r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label025:
        $i1 = 0;

     label026:
        $i2 = virtualinvoke $r13.<org.json.JSONArray: int length()>();

     label027:
        if $i1 >= $i2 goto label030;

     label028:
        $r14 = virtualinvoke $r13.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i1);

        $i2 = virtualinvoke $r14.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label029:
        $i1 = $i1 + 1;

        goto label026;

     label030:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r7 = new java.lang.StringBuilder;

     label031:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE ord NOT IN ");

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND nid IN ( SELECT id FROM notes WHERE mid = ");

        $l3 = virtualinvoke r12.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r4, 0);

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label032:
        if $i1 <= 0 goto label035;

     label033:
        $r7 = new java.lang.StringBuilder;

     label034:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" card(s) with missing template.");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void remCards(long[])>($r9);

     label035:
        r1 = new java.util.ArrayList;

     label036:
        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label037:
        r16 = null;

     label038:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id, flds from notes where mid = ");

        $l3 = virtualinvoke r12.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r4, null);

     label039:
        r16 = $r17;

     label040:
        $z0 = interfaceinvoke $r17.<android.database.Cursor: boolean moveToNext()>();

     label041:
        if $z0 == 0 goto label064;

     label042:
        $r4 = interfaceinvoke $r17.<android.database.Cursor: java.lang.String getString(int)>(1);

        $l3 = interfaceinvoke $r17.<android.database.Cursor: long getLong(int)>(0);

     label043:
        $i1 = 0;

        $i2 = 0;

     label044:
        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

     label045:
        if $i2 >= $i4 goto label049;

     label046:
        $c5 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i2);

     label047:
        if $c5 != 31 goto label048;

        $i1 = $i1 + 1;

     label048:
        $i2 = $i2 + 1;

        goto label044;

     label049:
        $i1 = $i1 + 1;

     label050:
        $r13 = virtualinvoke r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

        $i2 = virtualinvoke $r13.<org.json.JSONArray: int length()>();

     label051:
        if $i1 == $i2 goto label040;

     label052:
        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

     label053:
        goto label040;

     label054:
        $r19 := @caughtexception;

        if r16 == null goto label058;

     label055:
        $z0 = interfaceinvoke r16.<android.database.Cursor: boolean isClosed()>();

     label056:
        if $z0 != 0 goto label058;

     label057:
        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label058:
        throw $r19;

     label059:
        r20 := @caughtexception;

     label060:
        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r20);

        throw $r21;

     label061:
        $r22 := @caughtexception;

     label062:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r22;

     label063:
        $r21 := @caughtexception;

        $r23 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r21, "doInBackgroundCheckDatabase - RuntimeException on marking card", $r23);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>($r21, "doInBackgroundCheckDatabase");

        return -1L;

     label064:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label065:
        if $i1 <= 0 goto label067;

     label066:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" note(s) with wrong field count.");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void _remNotes(long[])>($r9);

     label067:
        if $r17 == null goto label017;

     label068:
        $z0 = interfaceinvoke $r17.<android.database.Cursor: boolean isClosed()>();

     label069:
        if $z0 != 0 goto label017;

     label070:
        interfaceinvoke $r17.<android.database.Cursor: void close()>();

     label071:
        goto label017;

     label072:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label073:
        r1 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", "SELECT id FROM notes WHERE id NOT IN (SELECT DISTINCT nid FROM cards)", 0);

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label074:
        if $i1 == 0 goto label077;

     label075:
        $r7 = new java.lang.StringBuilder;

     label076:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" note(s) with missing no cards.");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void _remNotes(long[])>($r9);

     label077:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label078:
        r1 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", "SELECT id FROM cards WHERE nid NOT IN (SELECT id FROM notes)", 0);

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label079:
        if $i1 == 0 goto label082;

     label080:
        $r7 = new java.lang.StringBuilder;

     label081:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" card(s) with missing note.");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void remCards(long[])>($r9);

     label082:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label083:
        r1 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", "select id from cards where odue > 0 and (type=1 or queue=2) and not odid", 0);

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label084:
        if $i1 == 0 goto label089;

     label085:
        $r7 = new java.lang.StringBuilder;

     label086:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixed ");

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" card(s) with invalid properties.");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label087:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r7 = new java.lang.StringBuilder;

     label088:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set odue=0 where id in ");

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r4);

     label089:
        r1 = new java.util.ArrayList;

     label090:
        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label091:
        $r24 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

     label092:
        $r25 = virtualinvoke $r24.<com.ichi2.libanki.Decks: java.lang.Long[] allIds()>();

     label093:
        $i1 = lengthof $r25;

     label094:
        $i2 = 0;

     label095:
        if $i2 >= $i1 goto label103;

     label096:
        $r18 = $r25[$i2];

     label097:
        $l3 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

     label098:
        $r24 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

     label099:
        $z0 = virtualinvoke $r24.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l3);

     label100:
        if $z0 != 0 goto label102;

     label101:
        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

     label102:
        $i2 = $i2 + 1;

        goto label095;

     label103:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r7 = new java.lang.StringBuilder;

     label104:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id from cards where odid > 0 and did in ");

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r4, 0);

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label105:
        if $i1 == 0 goto label110;

     label106:
        $r7 = new java.lang.StringBuilder;

     label107:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixed ");

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" card(s) with invalid properties.");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label108:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r7 = new java.lang.StringBuilder;

     label109:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set odid=0, odue=0 where id in ");

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r4);

     label110:
        $r26 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags mTags>;

     label111:
        virtualinvoke $r26.<com.ichi2.libanki.Tags: void registerNotes()>();

     label112:
        $r8 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

     label113:
        r1 = virtualinvoke $r8.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r10 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label114:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label115:
        if $z0 == 0 goto label120;

     label116:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

     label117:
        r12 = (org.json.JSONObject) $r11;

        $r8 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

     label118:
        r1 = virtualinvoke $r8.<com.ichi2.libanki.Models: java.util.ArrayList nids(org.json.JSONObject)>(r12);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void updateFieldCache(long[])>($r9);

     label119:
        goto label114;

     label120:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r7 = new java.lang.StringBuilder;

     label121:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE cards SET due = 1000000, mod = ");

        $l3 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", usn = ");

        $i1 = virtualinvoke r0.<com.ichi2.libanki.Collection: int usn()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE due > 1000000 AND queue = 0");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r4);

     label122:
        r12 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label123:
        $i1 = virtualinvoke $r5.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT max(due) + 1 FROM cards WHERE type = 0");

        virtualinvoke r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("nextPos", $i1);

     label124:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label125:
        r1 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", "SELECT id FROM cards WHERE queue = 2 AND due > 10000", 0);

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label126:
        if $i1 <= 0 goto label130;

     label127:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>("Reviews had incorrect due date.");

     label128:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r7 = new java.lang.StringBuilder;

     label129:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE cards SET due = 0, mod = ");

        $l3 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", usn = ");

        $i1 = virtualinvoke r0.<com.ichi2.libanki.Collection: int usn()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE id IN ");

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r4);

     label130:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label131:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label132:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label133:
        $i1 = virtualinvoke $r5.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("select count(name) from sqlite_master where type = \'index\'");

     label134:
        if $i1 >= 7 goto label138;

     label135:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>("Indices were missing.");

     label136:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label137:
        staticinvoke <com.ichi2.libanki.Storage: void addIndices(com.ichi2.libanki.DB)>($r5);

     label138:
        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label139:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void optimize()>();

        r3 = new java.io.File;

        $r4 = r0.<com.ichi2.libanki.Collection: java.lang.String mPath>;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $l3 = virtualinvoke r3.<java.io.File: long length()>();

        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label140;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void modSchemaNoCheck()>();

     label140:
        $l0 = $l0 - $l3;

        $l0 = $l0 / 1024L;

        return $l0;

        catch java.lang.RuntimeException from label001 to label002 with label063;
        catch org.json.JSONException from label002 to label003 with label059;
        catch org.json.JSONException from label004 to label005 with label059;
        catch java.lang.Throwable from label002 to label005 with label061;
        catch java.lang.RuntimeException from label006 to label007 with label063;
        catch org.json.JSONException from label009 to label010 with label059;
        catch org.json.JSONException from label011 to label012 with label059;
        catch org.json.JSONException from label014 to label015 with label059;
        catch org.json.JSONException from label016 to label018 with label059;
        catch org.json.JSONException from label019 to label020 with label059;
        catch org.json.JSONException from label021 to label022 with label059;
        catch org.json.JSONException from label024 to label025 with label059;
        catch org.json.JSONException from label026 to label027 with label059;
        catch org.json.JSONException from label028 to label029 with label059;
        catch org.json.JSONException from label031 to label032 with label059;
        catch org.json.JSONException from label034 to label035 with label059;
        catch org.json.JSONException from label036 to label037 with label059;
        catch java.lang.Throwable from label008 to label012 with label061;
        catch java.lang.Throwable from label013 to label018 with label061;
        catch java.lang.Throwable from label019 to label022 with label061;
        catch java.lang.Throwable from label023 to label025 with label061;
        catch java.lang.Throwable from label026 to label027 with label061;
        catch java.lang.Throwable from label028 to label029 with label061;
        catch java.lang.Throwable from label030 to label032 with label061;
        catch java.lang.Throwable from label033 to label037 with label061;
        catch java.lang.Throwable from label038 to label039 with label054;
        catch java.lang.Throwable from label040 to label041 with label054;
        catch java.lang.Throwable from label042 to label043 with label054;
        catch java.lang.Throwable from label044 to label045 with label054;
        catch java.lang.Throwable from label046 to label047 with label054;
        catch java.lang.Throwable from label050 to label051 with label054;
        catch java.lang.Throwable from label052 to label053 with label054;
        catch org.json.JSONException from label055 to label056 with label059;
        catch org.json.JSONException from label057 to label059 with label059;
        catch java.lang.Throwable from label055 to label056 with label061;
        catch java.lang.Throwable from label057 to label059 with label061;
        catch java.lang.Throwable from label060 to label061 with label061;
        catch java.lang.RuntimeException from label062 to label063 with label063;
        catch java.lang.Throwable from label064 to label065 with label054;
        catch java.lang.Throwable from label066 to label067 with label054;
        catch org.json.JSONException from label068 to label069 with label059;
        catch org.json.JSONException from label070 to label071 with label059;
        catch org.json.JSONException from label073 to label074 with label059;
        catch org.json.JSONException from label076 to label077 with label059;
        catch org.json.JSONException from label078 to label079 with label059;
        catch org.json.JSONException from label081 to label082 with label059;
        catch org.json.JSONException from label083 to label084 with label059;
        catch org.json.JSONException from label086 to label087 with label059;
        catch org.json.JSONException from label088 to label089 with label059;
        catch org.json.JSONException from label090 to label091 with label059;
        catch org.json.JSONException from label092 to label093 with label059;
        catch org.json.JSONException from label097 to label098 with label059;
        catch org.json.JSONException from label099 to label100 with label059;
        catch org.json.JSONException from label101 to label102 with label059;
        catch org.json.JSONException from label104 to label105 with label059;
        catch org.json.JSONException from label107 to label108 with label059;
        catch org.json.JSONException from label109 to label110 with label059;
        catch org.json.JSONException from label111 to label112 with label059;
        catch org.json.JSONException from label113 to label115 with label059;
        catch org.json.JSONException from label116 to label117 with label059;
        catch org.json.JSONException from label118 to label119 with label059;
        catch org.json.JSONException from label121 to label122 with label059;
        catch org.json.JSONException from label123 to label124 with label059;
        catch org.json.JSONException from label125 to label126 with label059;
        catch org.json.JSONException from label127 to label128 with label059;
        catch org.json.JSONException from label129 to label130 with label059;
        catch org.json.JSONException from label131 to label132 with label059;
        catch org.json.JSONException from label133 to label134 with label059;
        catch org.json.JSONException from label135 to label136 with label059;
        catch org.json.JSONException from label137 to label138 with label059;
        catch java.lang.Throwable from label068 to label069 with label061;
        catch java.lang.Throwable from label070 to label071 with label061;
        catch java.lang.Throwable from label072 to label074 with label061;
        catch java.lang.Throwable from label075 to label079 with label061;
        catch java.lang.Throwable from label080 to label084 with label061;
        catch java.lang.Throwable from label085 to label094 with label061;
        catch java.lang.Throwable from label096 to label100 with label061;
        catch java.lang.Throwable from label101 to label102 with label061;
        catch java.lang.Throwable from label103 to label105 with label061;
        catch java.lang.Throwable from label106 to label115 with label061;
        catch java.lang.Throwable from label116 to label119 with label061;
        catch java.lang.Throwable from label120 to label126 with label061;
        catch java.lang.Throwable from label127 to label134 with label061;
        catch java.lang.Throwable from label135 to label138 with label061;
        catch java.lang.RuntimeException from label138 to label139 with label063;
    }
    public void flush()
    {
        com.ichi2.libanki.Collection r0;

        r0 := @this: com.ichi2.libanki.Collection;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void flush(long)>(0L);

        return;
    }
    public void flush(long)
    {
        com.ichi2.libanki.Collection r0;
        android.content.ContentValues r1;
        long $l0;
        byte $b1, $b2;
        java.lang.Object[] $r2;
        java.lang.Long $r3;
        boolean $z0;
        java.lang.Integer $r4;
        int $i3;
        org.json.JSONObject $r5;
        java.lang.String $r6;
        com.ichi2.libanki.DB $r7;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        $b1 = 0;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("flush - Saving information to DB...", $r2);

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label1;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

     label1:
        r0.<com.ichi2.libanki.Collection: long mMod> = $l0;

        r1 = new android.content.ContentValues;

        specialinvoke r1.<android.content.ContentValues: void <init>()>();

        $l0 = r0.<com.ichi2.libanki.Collection: long mCrt>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("crt", $r3);

        $l0 = r0.<com.ichi2.libanki.Collection: long mMod>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("mod", $r3);

        $l0 = r0.<com.ichi2.libanki.Collection: long mScm>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("scm", $r3);

        $z0 = r0.<com.ichi2.libanki.Collection: boolean mDty>;

        if $z0 == 0 goto label2;

        $b1 = 1;

     label2:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b1);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("dty", $r4);

        $i3 = r0.<com.ichi2.libanki.Collection: int mUsn>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("usn", $r4);

        $l0 = r0.<com.ichi2.libanki.Collection: long mLs>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("ls", $r3);

        $r5 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>($r5);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("conf", $r6);

        $r7 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r7.<com.ichi2.libanki.DB: int update(java.lang.String,android.content.ContentValues)>("col", r1);

        return;
    }
    public java.util.ArrayList genCards(java.util.List)
    {
        com.ichi2.libanki.Collection r0;
        java.util.List r1;
        long[] $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList genCards(long[])>($r2);

        return $r3;
    }
    public java.util.ArrayList genCards(long[])
    {
        com.ichi2.libanki.Collection r0;
        long[] $r1;
        java.util.ArrayList r2, r6, $r22, $r23;
        java.util.HashMap r3, r5, $r15;
        org.json.JSONException r4, $r31;
        java.lang.String $r7, $r12;
        android.database.Cursor r8, $r13;
        com.ichi2.libanki.DB $r9;
        io.requery.android.database.sqlite.SQLiteDatabase $r10;
        java.lang.StringBuilder $r11;
        boolean $z0;
        long $l0, $l1, $l2, $l4, $l6;
        java.lang.Long $r14, $r18;
        java.lang.Object $r16;
        int $i3, $i7;
        java.lang.Integer $r17;
        byte $b5;
        java.lang.Throwable $r19, $r30;
        com.ichi2.libanki.Models $r20;
        org.json.JSONObject $r21;
        java.util.Iterator $r24;
        com.ichi2.libanki.Decks $r25;
        java.lang.Object[] $r26;
        java.util.Set $r27;
        java.util.Map$Entry r28;
        java.lang.RuntimeException $r29;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: long[];

        $r7 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        r5 = new java.util.HashMap;

        specialinvoke r5.<java.util.HashMap: void <init>()>();

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        r8 = null;

     label01:
        $r9 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id, nid, ord, did, odid from cards where nid in ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r12, null);

     label02:
        r8 = $r13;

     label03:
        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToNext()>();

     label04:
        if $z0 == 0 goto label23;

     label05:
        $l0 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(1);

        $l1 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(3);

     label06:
        $l2 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(4);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r14);

     label07:
        if $z0 != 0 goto label09;

     label08:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

     label09:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r16 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        $r15 = (java.util.HashMap) $r16;

        $i3 = interfaceinvoke $r13.<android.database.Cursor: int getInt(int)>(2);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $l4 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(0);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r14);

     label10:
        $b5 = $l2 cmp 0L;

        if $b5 == 0 goto label11;

        $l1 = $l2;

     label11:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r14);

     label12:
        if $z0 == 0 goto label21;

     label13:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r16 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        $r14 = (java.lang.Long) $r16;

        $l2 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

     label14:
        $b5 = $l2 cmp 0L;

        if $b5 == 0 goto label03;

     label15:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r16 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        $r14 = (java.lang.Long) $r16;

        $l2 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

     label16:
        $b5 = $l2 cmp $l1;

        if $b5 == 0 goto label03;

     label17:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r18);

     label18:
        goto label03;

     label19:
        $r19 := @caughtexception;

        if r8 == null goto label20;

        $z0 = interfaceinvoke r8.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label20;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label20:
        throw $r19;

     label21:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r18);

     label22:
        goto label03;

     label23:
        if $r13 == null goto label24;

        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label24;

        interfaceinvoke $r13.<android.database.Cursor: void close()>();

     label24:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r9 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long maxID(com.ichi2.libanki.DB)>($r9);

        $l1 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $i3 = virtualinvoke r0.<com.ichi2.libanki.Collection: int usn()>();

        r8 = null;

     label25:
        $r9 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

     label26:
        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

     label27:
        $r11 = new java.lang.StringBuilder;

     label28:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id, mid, flds FROM notes WHERE id IN ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r7, null);

     label29:
        r8 = $r13;

     label30:
        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToNext()>();

     label31:
        if $z0 == 0 goto label94;

     label32:
        $r20 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

     label33:
        $l2 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(1);

        $r21 = virtualinvoke $r20.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l2);

     label34:
        $r20 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

     label35:
        $r7 = interfaceinvoke $r13.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r22 = virtualinvoke $r20.<com.ichi2.libanki.Models: java.util.ArrayList availOrds(org.json.JSONObject,java.lang.String)>($r21, $r7);

        $l2 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(0);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r16 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

     label36:
        $r14 = (java.lang.Long) $r16;

     label37:
        $l6 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

     label38:
        $l4 = $l6;

        $b5 = $l6 cmp 0L;

        if $b5 != 0 goto label40;

     label39:
        $l4 = virtualinvoke $r21.<org.json.JSONObject: long getLong(java.lang.String)>("did");

     label40:
        $r23 = specialinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList _tmplsFromOrds(org.json.JSONObject,java.util.ArrayList)>($r21, $r22);

        $r24 = virtualinvoke $r23.<java.util.ArrayList: java.util.Iterator iterator()>();

     label41:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

     label42:
        if $z0 == 0 goto label77;

     label43:
        $r16 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

     label44:
        $r21 = (org.json.JSONObject) $r16;

     label45:
        $i7 = virtualinvoke $r21.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $z0 = virtualinvoke r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r14);

     label46:
        if $z0 == 0 goto label76;

     label47:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r16 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

     label48:
        $r15 = (java.util.HashMap) $r16;

     label49:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $z0 = virtualinvoke $r15.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r17);

     label50:
        if $z0 == 0 goto label76;

        $z0 = 1;

     label51:
        if $z0 != 0 goto label41;

     label52:
        $l6 = virtualinvoke $r21.<org.json.JSONObject: long getLong(java.lang.String)>("did");

     label53:
        $b5 = $l6 cmp 0L;

        if $b5 == 0 goto label54;

        $l4 = $l6;

     label54:
        $r25 = virtualinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $z0 = virtualinvoke $r25.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l4);

     label55:
        if $z0 == 0 goto label56;

        $l4 = 1L;

     label56:
        $r25 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

     label57:
        $r21 = virtualinvoke $r25.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l4);

        $l6 = virtualinvoke $r21.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label58:
        $l4 = $l6;

     label59:
        $r26 = newarray (java.lang.Object)[7];

     label60:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label61:
        $r26[0] = $r14;

     label62:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

     label63:
        $r26[1] = $r14;

     label64:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

     label65:
        $r26[2] = $r14;

     label66:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

     label67:
        $r26[3] = $r17;

     label68:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label69:
        $r26[4] = $r14;

     label70:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

     label71:
        $r26[5] = $r17;

     label72:
        $i7 = virtualinvoke r0.<com.ichi2.libanki.Collection: int nextID(java.lang.String)>("pos");

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

     label73:
        $r26[6] = $r17;

     label74:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

     label75:
        $l0 = $l0 + 1L;

        goto label41;

     label76:
        $z0 = 0;

        goto label51;

     label77:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $z0 = virtualinvoke r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r14);

     label78:
        if $z0 == 0 goto label30;

     label79:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r16 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

     label80:
        $r15 = (java.util.HashMap) $r16;

     label81:
        $r27 = virtualinvoke $r15.<java.util.HashMap: java.util.Set entrySet()>();

        $r24 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();

     label82:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

     label83:
        if $z0 == 0 goto label30;

     label84:
        $r16 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

     label85:
        r28 = (java.util.Map$Entry) $r16;

     label86:
        $r16 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke $r22.<java.util.ArrayList: boolean contains(java.lang.Object)>($r16);

     label87:
        if $z0 != 0 goto label82;

     label88:
        $r16 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label89:
        goto label82;

     label90:
        r4 := @caughtexception;

     label91:
        $r29 = new java.lang.RuntimeException;

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r29;

     label92:
        $r30 := @caughtexception;

        if r8 == null goto label93;

        $z0 = interfaceinvoke r8.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label93;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label93:
        throw $r30;

     label94:
        if $r13 == null goto label95;

        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label95;

        interfaceinvoke $r13.<android.database.Cursor: void close()>();

     label95:
        $r9 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r9.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("INSERT INTO cards VALUES (?,?,?,?,?,?,0,0,?,0,0,0,0,0,0,0,0,\"\")", r2);

        return r6;

     label96:
        $r31 := @caughtexception;

        goto label54;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label21 to label22 with label19;
        catch org.json.JSONException from label26 to label27 with label90;
        catch org.json.JSONException from label28 to label29 with label90;
        catch org.json.JSONException from label30 to label31 with label90;
        catch org.json.JSONException from label33 to label34 with label90;
        catch org.json.JSONException from label35 to label36 with label90;
        catch org.json.JSONException from label37 to label38 with label90;
        catch org.json.JSONException from label39 to label40 with label90;
        catch org.json.JSONException from label40 to label42 with label90;
        catch org.json.JSONException from label43 to label44 with label90;
        catch org.json.JSONException from label45 to label46 with label90;
        catch org.json.JSONException from label47 to label48 with label90;
        catch org.json.JSONException from label49 to label50 with label90;
        catch java.lang.Throwable from label25 to label29 with label92;
        catch java.lang.Throwable from label30 to label31 with label92;
        catch java.lang.Throwable from label32 to label38 with label92;
        catch java.lang.Throwable from label39 to label40 with label92;
        catch java.lang.Throwable from label40 to label42 with label92;
        catch java.lang.Throwable from label43 to label46 with label92;
        catch java.lang.Throwable from label47 to label50 with label92;
        catch org.json.JSONException from label52 to label53 with label96;
        catch java.lang.Throwable from label52 to label53 with label92;
        catch org.json.JSONException from label54 to label55 with label90;
        catch org.json.JSONException from label57 to label58 with label90;
        catch org.json.JSONException from label60 to label61 with label90;
        catch org.json.JSONException from label62 to label63 with label90;
        catch org.json.JSONException from label64 to label65 with label90;
        catch org.json.JSONException from label66 to label67 with label90;
        catch org.json.JSONException from label68 to label69 with label90;
        catch org.json.JSONException from label70 to label71 with label90;
        catch org.json.JSONException from label72 to label73 with label90;
        catch org.json.JSONException from label74 to label75 with label90;
        catch org.json.JSONException from label77 to label78 with label90;
        catch org.json.JSONException from label79 to label80 with label90;
        catch org.json.JSONException from label81 to label83 with label90;
        catch org.json.JSONException from label84 to label85 with label90;
        catch org.json.JSONException from label86 to label87 with label90;
        catch org.json.JSONException from label88 to label89 with label90;
        catch java.lang.Throwable from label54 to label55 with label92;
        catch java.lang.Throwable from label56 to label58 with label92;
        catch java.lang.Throwable from label59 to label75 with label92;
        catch java.lang.Throwable from label77 to label78 with label92;
        catch java.lang.Throwable from label79 to label83 with label92;
        catch java.lang.Throwable from label84 to label87 with label92;
        catch java.lang.Throwable from label88 to label89 with label92;
        catch java.lang.Throwable from label91 to label92 with label92;
    }
    public com.ichi2.libanki.Card getCard(long)
    {
        com.ichi2.libanki.Collection r0;
        long $l0;
        com.ichi2.libanki.Card $r1;
        java.lang.Long $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        $r1 = new com.ichi2.libanki.Card;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r1.<com.ichi2.libanki.Card: void <init>(com.ichi2.libanki.Collection,java.lang.Long)>(r0, $r2);

        return $r1;
    }
    public org.json.JSONObject getConf()
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONObject r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

        return r1;
    }
    public android.content.Context getContext()
    {
        com.ichi2.libanki.Collection r0;
        android.content.Context r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: android.content.Context mContext>;

        return r1;
    }
    public long getCrt()
    {
        com.ichi2.libanki.Collection r0;
        long l0;

        r0 := @this: com.ichi2.libanki.Collection;

        l0 = r0.<com.ichi2.libanki.Collection: long mCrt>;

        return l0;
    }
    public com.ichi2.libanki.DB getDb()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.DB r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        return r1;
    }
    public com.ichi2.libanki.Decks getDecks()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Decks r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

        return r1;
    }
    public boolean getDirty()
    {
        com.ichi2.libanki.Collection r0;
        boolean z0;

        r0 := @this: com.ichi2.libanki.Collection;

        z0 = r0.<com.ichi2.libanki.Collection: boolean mDty>;

        return z0;
    }
    public com.ichi2.libanki.Media getMedia()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Media r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media mMedia>;

        return r1;
    }
    public long getMod()
    {
        com.ichi2.libanki.Collection r0;
        long l0;

        r0 := @this: com.ichi2.libanki.Collection;

        l0 = r0.<com.ichi2.libanki.Collection: long mMod>;

        return l0;
    }
    public com.ichi2.libanki.Models getModels()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Models r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        return r1;
    }
    public com.ichi2.libanki.Note getNote(long)
    {
        com.ichi2.libanki.Collection r0;
        long $l0;
        com.ichi2.libanki.Note $r1;
        java.lang.Long $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        $r1 = new com.ichi2.libanki.Note;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r1.<com.ichi2.libanki.Note: void <init>(com.ichi2.libanki.Collection,java.lang.Long)>(r0, $r2);

        return $r1;
    }
    public java.lang.String getPath()
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: java.lang.String mPath>;

        return r1;
    }
    public com.ichi2.libanki.Sched getSched()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Sched r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched>;

        return r1;
    }
    public long getScm()
    {
        com.ichi2.libanki.Collection r0;
        long l0;

        r0 := @this: com.ichi2.libanki.Collection;

        l0 = r0.<com.ichi2.libanki.Collection: long mScm>;

        return l0;
    }
    public boolean getServer()
    {
        com.ichi2.libanki.Collection r0;
        boolean z0;

        r0 := @this: com.ichi2.libanki.Collection;

        z0 = r0.<com.ichi2.libanki.Collection: boolean mServer>;

        return z0;
    }
    public com.ichi2.libanki.Tags getTags()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Tags r1;

        r0 := @this: com.ichi2.libanki.Collection;

        r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags mTags>;

        return r1;
    }
    public long getTimeLimit()
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONException r1;
        long $l0;
        org.json.JSONObject $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $r2 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

     label1:
        $l0 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("timeLim");

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public int getUsnForSync()
    {
        com.ichi2.libanki.Collection r0;
        int i0;

        r0 := @this: com.ichi2.libanki.Collection;

        i0 = r0.<com.ichi2.libanki.Collection: int mUsn>;

        return i0;
    }
    public boolean isEmpty()
    {
        com.ichi2.libanki.Collection r0;
        int $i0;
        com.ichi2.libanki.DB $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT 1 FROM cards LIMIT 1");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void load()
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONException r1;
        boolean $z0, $z1;
        android.database.Cursor r2, $r5;
        com.ichi2.libanki.DB $r3;
        io.requery.android.database.sqlite.SQLiteDatabase $r4;
        long $l0;
        int $i1;
        org.json.JSONObject $r6;
        java.lang.String $r7, $r10;
        com.ichi2.libanki.Models $r8;
        com.ichi2.libanki.Decks $r9;
        com.ichi2.libanki.Tags $r11;
        java.lang.RuntimeException $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.ichi2.libanki.Collection;

        $z0 = 1;

        r2 = null;

     label01:
        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r5 = virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>("SELECT crt, mod, scm, dty, usn, ls, conf, models, decks, dconf, tags FROM col", null);

     label02:
        r2 = $r5;

     label03:
        $z1 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

     label04:
        if $z1 != 0 goto label05;

        if $r5 == null goto label18;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return;

     label05:
        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(0);

        r0.<com.ichi2.libanki.Collection: long mCrt> = $l0;

        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(1);

        r0.<com.ichi2.libanki.Collection: long mMod> = $l0;

        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(2);

        r0.<com.ichi2.libanki.Collection: long mScm> = $l0;

        $i1 = interfaceinvoke $r5.<android.database.Cursor: int getInt(int)>(3);

     label06:
        if $i1 != 1 goto label13;

     label07:
        r0.<com.ichi2.libanki.Collection: boolean mDty> = $z0;

        $i1 = interfaceinvoke $r5.<android.database.Cursor: int getInt(int)>(4);

        r0.<com.ichi2.libanki.Collection: int mUsn> = $i1;

        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(5);

        r0.<com.ichi2.libanki.Collection: long mLs> = $l0;

     label08:
        $r6 = new org.json.JSONObject;

     label09:
        $r7 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(6);

        specialinvoke $r6.<org.json.JSONObject: void <init>(java.lang.String)>($r7);

     label10:
        r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf> = $r6;

     label11:
        $r8 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $r7 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(7);

        virtualinvoke $r8.<com.ichi2.libanki.Models: void load(java.lang.String)>($r7);

        $r9 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

        $r7 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(8);

        $r10 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(9);

        virtualinvoke $r9.<com.ichi2.libanki.Decks: void load(java.lang.String,java.lang.String)>($r7, $r10);

        $r11 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags mTags>;

        $r7 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(10);

        virtualinvoke $r11.<com.ichi2.libanki.Tags: void load(java.lang.String)>($r7);

     label12:
        if $r5 == null goto label18;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return;

     label13:
        $z0 = 0;

        goto label07;

     label14:
        r1 := @caughtexception;

     label15:
        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r12;

     label16:
        $r13 := @caughtexception;

        if r2 == null goto label17;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label17:
        throw $r13;

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch org.json.JSONException from label09 to label10 with label14;
        catch java.lang.Throwable from label08 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
    }
    public void lock()
    {
        com.ichi2.libanki.Collection r0;
        boolean $z0;
        com.ichi2.libanki.DB $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $z0 = virtualinvoke $r1.<com.ichi2.libanki.DB: boolean getMod()>();

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r1.<com.ichi2.libanki.DB: void execute(java.lang.String)>("UPDATE col SET mod=mod");

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r1.<com.ichi2.libanki.DB: void setMod(boolean)>($z0);

        return;
    }
    public transient void log(java.lang.Object[])
    {
        com.ichi2.libanki.Collection r0;
        java.lang.Object[] $r1, $r8;
        java.lang.StackTraceElement r2;
        boolean $z0;
        java.lang.Thread $r3;
        java.lang.StackTraceElement[] $r4;
        int i0, $i1;
        java.lang.Object $r5;
        long[] $r6;
        java.lang.String $r7;
        long $l2;
        java.lang.Long $r9;
        java.io.PrintWriter $r10;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.Object[];

        $z0 = r0.<com.ichi2.libanki.Collection: boolean mDebugLog>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        r2 = $r4[3];

        i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $r5 = $r1[i0];

        $z0 = $r5 instanceof long[];

        if $z0 == 0 goto label3;

        $r5 = $r1[i0];

        $r6 = (long[]) $r5;

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r6);

        $r1[i0] = $r7;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $r8 = newarray (java.lang.Object)[4];

        $l2 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r8[0] = $r9;

        $r7 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $r8[1] = $r7;

        $r7 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r8[2] = $r7;

        $r7 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(",  ", $r1);

        $r8[3] = $r7;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[%s] %s:%s(): %s", $r8);

        $r10 = r0.<com.ichi2.libanki.Collection: java.io.PrintWriter mLogHnd>;

        virtualinvoke $r10.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r7, $r1);

        return;
    }
    public void markReview(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Card $r1;
        com.ichi2.libanki.Collection$DismissType $r2;
        java.lang.Object[] $r3;
        com.ichi2.libanki.Note $r4;
        boolean $z0;
        java.lang.Boolean $r5;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 = <com.ichi2.libanki.Collection$DismissType: com.ichi2.libanki.Collection$DismissType REVIEW>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r1;

        $r4 = virtualinvoke $r1.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        $z0 = virtualinvoke $r4.<com.ichi2.libanki.Note: boolean hasTag(java.lang.String)>("leech");

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r3[1] = $r5;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void markUndo(com.ichi2.libanki.Collection$DismissType,java.lang.Object[])>($r2, $r3);

        return;
    }
    public void markUndo(com.ichi2.libanki.Collection$DismissType, java.lang.Object[])
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Collection$DismissType $r1;
        java.lang.Object[] $r2, $r5;
        int[] $r3;
        int $i0;
        java.util.LinkedList $r4;
        java.lang.Object $r6;
        com.ichi2.libanki.Card $r7;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Collection$DismissType;

        $r2 := @parameter1: java.lang.Object[];

        $r3 = <com.ichi2.libanki.Collection$1: int[] $SwitchMap$com$ichi2$libanki$Collection$DismissType>;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Collection$DismissType: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            case 6: goto label3;
            default: goto label1;
        };

     label1:
        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $i0 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if $i0 <= 20 goto label8;

        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        virtualinvoke $r4.<java.util.LinkedList: java.lang.Object removeFirst()>();

        goto label1;

     label2:
        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r1;

        $r6 = $r2[0];

        $r7 = (com.ichi2.libanki.Card) $r6;

        $r7 = virtualinvoke $r7.<com.ichi2.libanki.Card: com.ichi2.libanki.Card clone()>();

        $r5[1] = $r7;

        $r6 = $r2[1];

        $r5[2] = $r6;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label3:
        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = $r1;

        $r6 = $r2[0];

        $r5[1] = $r6;

        $r6 = $r2[1];

        $r5[2] = $r6;

        $r6 = $r2[2];

        $r5[3] = $r6;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label4:
        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = $r1;

        $r6 = $r2[0];

        $r5[1] = $r6;

        $r6 = $r2[1];

        $r5[2] = $r6;

        $r6 = $r2[2];

        $r5[3] = $r6;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label5:
        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r1;

        $r6 = $r2[0];

        $r7 = (com.ichi2.libanki.Card) $r6;

        $r7 = virtualinvoke $r7.<com.ichi2.libanki.Card: com.ichi2.libanki.Card clone()>();

        $r5[1] = $r7;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label6:
        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r1;

        $r6 = $r2[0];

        $r5[1] = $r6;

        $r6 = $r2[1];

        $r5[2] = $r6;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label7:
        $r4 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = $r1;

        $r6 = $r2[0];

        $r5[1] = $r6;

        $r6 = $r2[1];

        $r5[2] = $r6;

        $r6 = $r2[2];

        $r5[3] = $r6;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label8:
        return;
    }
    public void modSchema() throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Collection r0;

        r0 := @this: com.ichi2.libanki.Collection;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

        return;
    }
    public void modSchema(boolean) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Collection r0;
        boolean $z0, $z1;
        com.ichi2.anki.exception.ConfirmModSchemaException $r1;
        long $l0;

        r0 := @this: com.ichi2.libanki.Collection;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.ichi2.libanki.Collection: boolean schemaChanged()>();

        if $z1 != 0 goto label1;

        if $z0 == 0 goto label1;

        $r1 = new com.ichi2.anki.exception.ConfirmModSchemaException;

        specialinvoke $r1.<com.ichi2.anki.exception.ConfirmModSchemaException: void <init>()>();

        throw $r1;

     label1:
        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

        r0.<com.ichi2.libanki.Collection: long mScm> = $l0;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void setMod()>();

        return;
    }
    public void modSchemaNoCheck()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.anki.exception.ConfirmModSchemaException r1;
        java.lang.RuntimeException $r2;

        r0 := @this: com.ichi2.libanki.Collection;

     label1:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void modSchema(boolean)>(0);

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r2;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label3;
    }
    public java.lang.String name()
    {
        com.ichi2.libanki.Collection r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = new java.io.File;

        $r2 = r0.<com.ichi2.libanki.Collection: java.lang.String mPath>;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".anki2", "");

        return $r2;
    }
    public com.ichi2.libanki.Note newNote()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Note $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Note newNote(boolean)>(1);

        return $r1;
    }
    public com.ichi2.libanki.Note newNote(org.json.JSONObject)
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONObject $r1;
        com.ichi2.libanki.Note $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 = new com.ichi2.libanki.Note;

        specialinvoke $r2.<com.ichi2.libanki.Note: void <init>(com.ichi2.libanki.Collection,org.json.JSONObject)>(r0, $r1);

        return $r2;
    }
    public com.ichi2.libanki.Note newNote(boolean)
    {
        com.ichi2.libanki.Collection r0;
        boolean $z0;
        com.ichi2.libanki.Models $r1;
        org.json.JSONObject $r2;
        com.ichi2.libanki.Note $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Models: org.json.JSONObject current(boolean)>($z0);

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Note newNote(org.json.JSONObject)>($r2);

        return $r3;
    }
    public int nextID(java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        char $c0;
        org.json.JSONObject $r3;
        int $i1, $i2;
        org.json.JSONException r4, r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("next");

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

     label1:
        $i1 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>($r1);

     label2:
        $r3 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

        $i2 = $i1 + 1;

     label3:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>($r1, $i2);

     label4:
        return $i1;

     label5:
        r4 := @caughtexception;

        $i1 = 1;

        goto label2;

     label6:
        r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label6;
    }
    public int noteCount()
    {
        com.ichi2.libanki.Collection r0;
        int $i0;
        com.ichi2.libanki.DB $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM notes");

        return $i0;
    }
    public void optimize()
    {
        com.ichi2.libanki.Collection r0;
        java.lang.Object[] $r1;
        com.ichi2.libanki.DB $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("executing VACUUM statement", $r1);

        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r2.<com.ichi2.libanki.DB: void execute(java.lang.String)>("VACUUM");

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("executing ANALYZE statement", $r1);

        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r2.<com.ichi2.libanki.DB: void execute(java.lang.String)>("ANALYZE");

        return;
    }
    public java.util.List previewCards(com.ichi2.libanki.Note)
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Note $r1;
        java.util.List $r2;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.List previewCards(com.ichi2.libanki.Note,int)>($r1, 0);

        return $r2;
    }
    public java.util.List previewCards(com.ichi2.libanki.Note, int)
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Note $r1;
        int $i0, $i1;
        org.json.JSONException r2;
        java.util.ArrayList $r3, $r4;
        boolean $z0;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        com.ichi2.libanki.Card r7;
        org.json.JSONObject $r8;
        org.json.JSONArray $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label02;

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList findTemplates(com.ichi2.libanki.Note)>($r1);

     label01:
        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label12;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        return $r3;

     label02:
        if $i0 != 1 goto label04;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke $r1.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label01;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.ichi2.libanki.Card) $r6;

        $r8 = virtualinvoke r7.<com.ichi2.libanki.Card: org.json.JSONObject template()>();

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label03;

     label04:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label05:
        $r8 = virtualinvoke $r1.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        $r9 = virtualinvoke $r8.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label06:
        $i0 = 0;

     label07:
        $i1 = virtualinvoke $r9.<org.json.JSONArray: int length()>();

     label08:
        if $i0 >= $i1 goto label01;

     label09:
        $r8 = virtualinvoke $r9.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label10:
        $i0 = $i0 + 1;

        goto label07;

     label11:
        r2 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label12:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.json.JSONObject) $r6;

        r7 = specialinvoke r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card _newCard(com.ichi2.libanki.Note,org.json.JSONObject,int,boolean)>($r1, $r8, 1, 0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label13;

     label14:
        return $r4;

        catch org.json.JSONException from label05 to label06 with label11;
        catch org.json.JSONException from label07 to label08 with label11;
        catch org.json.JSONException from label09 to label10 with label11;
    }
    public void remCards(long[])
    {
        com.ichi2.libanki.Collection r0;
        long[] $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: long[];

        virtualinvoke r0.<com.ichi2.libanki.Collection: void remCards(long[],boolean)>($r1, 1);

        return;
    }
    public void remCards(long[], boolean)
    {
        com.ichi2.libanki.Collection r0;
        long[] $r1, $r7;
        boolean $z0;
        int $i0;
        java.lang.String $r2, $r5;
        com.ichi2.libanki.DB $r3;
        java.lang.StringBuilder $r4;
        java.util.ArrayList $r6;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: long[];

        $z0 := @parameter1: boolean;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT nid FROM cards WHERE id IN ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r5, 0);

        $r7 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r6);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void _logRem(long[],int)>($r1, 0);

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM cards WHERE id IN ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM notes WHERE id IN ");

        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r7);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND id NOT IN (SELECT nid FROM cards)");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r2, 0);

        $r1 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r6);

        virtualinvoke r0.<com.ichi2.libanki.Collection: void _remNotes(long[])>($r1);

     label2:
        return;
    }
    public void remNotes(long[])
    {
        com.ichi2.libanki.Collection r0;
        long[] $r1;
        int i0, i1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.ArrayList $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.Long $r8;
        long $l2;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: long[];

        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE nid IN ");

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r4, 0);

        i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r1 = newarray (long)[i0];

        i1 = 0;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Long) $r7;

        $l2 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r1[i1] = $l2;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void remCards(long[])>($r1);

        return;
    }
    public java.util.ArrayList renderQA()
    {
        com.ichi2.libanki.Collection r0;
        java.util.ArrayList $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList renderQA(int[],java.lang.String)>(null, "card");

        return $r1;
    }
    public java.util.ArrayList renderQA(int[], java.lang.String)
    {
        com.ichi2.libanki.Collection r0;
        int[] $r1;
        java.lang.String $r2;
        java.util.ArrayList r3, $r5;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        java.lang.Object[] r8;
        java.util.HashMap $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("card");

        if $z0 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AND c.id IN ");

        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(int[])>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList _qaData(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Object[]) $r7;

        $r9 = virtualinvoke r0.<com.ichi2.libanki.Collection: java.util.HashMap _renderQA(java.lang.Object[])>(r8);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("fact");

        if $z0 == 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AND f.id IN ");

        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(int[])>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label4:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("model");

        if $z0 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AND m.id IN ");

        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(int[])>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label5:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("all");

        if $z0 == 0 goto label6;

        $r2 = "";

        goto label1;

     label6:
        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>()>();

        throw $r10;

     label7:
        return r3;
    }
    public void reopen()
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        com.ichi2.libanki.DB $r2;
        com.ichi2.libanki.Media $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        if $r2 != null goto label1;

        $r2 = new com.ichi2.libanki.DB;

        $r1 = r0.<com.ichi2.libanki.Collection: java.lang.String mPath>;

        specialinvoke $r2.<com.ichi2.libanki.DB: void <init>(java.lang.String)>($r1);

        r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb> = $r2;

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media mMedia>;

        virtualinvoke $r3.<com.ichi2.libanki.Media: void connect()>();

        specialinvoke r0.<com.ichi2.libanki.Collection: void _openLog()>();

     label1:
        return;
    }
    public void reset()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.Sched $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched>;

        virtualinvoke $r1.<com.ichi2.libanki.Sched: void reset()>();

        return;
    }
    public void save()
    {
        com.ichi2.libanki.Collection r0;
        java.lang.Throwable $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void save(java.lang.String,long)>(null, 0L);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void save(long)
    {
        com.ichi2.libanki.Collection r0;
        long $l0;
        java.lang.Throwable $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.ichi2.libanki.Collection: void save(java.lang.String,long)>(null, $l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void save(java.lang.String, long)
    {
        com.ichi2.libanki.Collection r0;
        java.lang.String $r1;
        long $l0;
        com.ichi2.libanki.Models $r2;
        com.ichi2.libanki.Decks $r3;
        com.ichi2.libanki.Tags $r4;
        com.ichi2.libanki.DB $r5;
        boolean $z0;
        double $d0;
        java.lang.Throwable $r6;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        entermonitor r0;

     label1:
        $r2 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        virtualinvoke $r2.<com.ichi2.libanki.Models: void flush()>();

        $r3 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks mDecks>;

        virtualinvoke $r3.<com.ichi2.libanki.Decks: void flush()>();

        $r4 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags mTags>;

        virtualinvoke $r4.<com.ichi2.libanki.Tags: void flush()>();

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $z0 = virtualinvoke $r5.<com.ichi2.libanki.DB: boolean getMod()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.ichi2.libanki.Collection: void flush(long)>($l0);

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r5.<com.ichi2.libanki.DB: void commit()>();

        virtualinvoke r0.<com.ichi2.libanki.Collection: void lock()>();

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r5.<com.ichi2.libanki.DB: void setMod(boolean)>(0);

     label2:
        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        r0.<com.ichi2.libanki.Collection: double mLastSave> = $d0;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public boolean schemaChanged()
    {
        com.ichi2.libanki.Collection r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: com.ichi2.libanki.Collection;

        $l1 = r0.<com.ichi2.libanki.Collection: long mScm>;

        $l0 = r0.<com.ichi2.libanki.Collection: long mLs>;

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void setConf(org.json.JSONObject)
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONObject $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: org.json.JSONObject;

        r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf> = $r1;

        return;
    }
    public void setCrt(long)
    {
        com.ichi2.libanki.Collection r0;
        long $l0;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        r0.<com.ichi2.libanki.Collection: long mCrt> = $l0;

        return;
    }
    public void setLs(long)
    {
        com.ichi2.libanki.Collection r0;
        long $l0;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        r0.<com.ichi2.libanki.Collection: long mLs> = $l0;

        return;
    }
    public void setMod()
    {
        com.ichi2.libanki.Collection r0;
        com.ichi2.libanki.DB $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r1.<com.ichi2.libanki.DB: void setMod(boolean)>(1);

        return;
    }
    public void setServer(boolean)
    {
        com.ichi2.libanki.Collection r0;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Collection;

        $z0 := @parameter0: boolean;

        r0.<com.ichi2.libanki.Collection: boolean mServer> = $z0;

        return;
    }
    public void setTimeLimit(long)
    {
        com.ichi2.libanki.Collection r0;
        long $l0;
        org.json.JSONException r1;
        org.json.JSONObject $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Collection;

        $l0 := @parameter0: long;

        $r2 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

     label1:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("timeLim", $l0);

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public void setUsnAfterSync(int)
    {
        com.ichi2.libanki.Collection r0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Collection;

        $i0 := @parameter0: int;

        r0.<com.ichi2.libanki.Collection: int mUsn> = $i0;

        return;
    }
    public void startTimebox()
    {
        com.ichi2.libanki.Collection r0;
        double $d0;
        com.ichi2.libanki.Sched $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.Collection;

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        r0.<com.ichi2.libanki.Collection: double mStartTime> = $d0;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched>;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Sched: int getReps()>();

        r0.<com.ichi2.libanki.Collection: int mStartReps> = $i0;

        return;
    }
    public java.lang.Long[] timeboxReached()
    {
        com.ichi2.libanki.Collection r0;
        org.json.JSONException r1;
        double d0, $d1;
        org.json.JSONObject $r2;
        long $l0;
        byte $b1;
        java.lang.Long[] $r3;
        java.lang.Long $r4;
        com.ichi2.libanki.Sched $r5;
        int $i2, $i3;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Collection;

        $r2 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

     label01:
        $l0 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("timeLim");

     label02:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label03;

        return null;

     label03:
        d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

     label04:
        $d1 = r0.<com.ichi2.libanki.Collection: double mStartTime>;

        d0 = d0 - $d1;

        $r2 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

     label05:
        $l0 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("timeLim");

     label06:
        $d1 = (double) $l0;

        $b1 = d0 cmpl $d1;

        if $b1 <= 0 goto label14;

        $r3 = newarray (java.lang.Long)[2];

        $r2 = r0.<com.ichi2.libanki.Collection: org.json.JSONObject mConf>;

     label07:
        $l0 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("timeLim");

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label08:
        $r3[0] = $r4;

        $r5 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched>;

     label09:
        $i2 = virtualinvoke $r5.<com.ichi2.libanki.Sched: int getReps()>();

     label10:
        $i3 = r0.<com.ichi2.libanki.Collection: int mStartReps>;

        $i2 = $i2 - $i3;

        $l0 = (long) $i2;

     label11:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label12:
        $r3[1] = $r4;

        return $r3;

     label13:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label14:
        return null;

        catch org.json.JSONException from label01 to label02 with label13;
        catch org.json.JSONException from label03 to label04 with label13;
        catch org.json.JSONException from label05 to label06 with label13;
        catch org.json.JSONException from label07 to label08 with label13;
        catch org.json.JSONException from label09 to label10 with label13;
        catch org.json.JSONException from label11 to label12 with label13;
    }
    public long undo()
    {
        com.ichi2.libanki.Collection r0;
        java.util.ArrayList r1, $r19;
        java.lang.String r2;
        java.util.LinkedList $r3;
        java.lang.Object $r4;
        java.lang.Object[] r5;
        int[] $r6;
        com.ichi2.libanki.Collection$DismissType $r7;
        int $i0;
        com.ichi2.libanki.Card r8;
        java.lang.Boolean r9;
        boolean $z0;
        com.ichi2.libanki.Note $r10;
        com.ichi2.libanki.DB $r11;
        java.lang.StringBuilder $r12;
        long $l1;
        java.lang.Long $r13;
        java.lang.Integer $r14;
        java.lang.String[] $r15;
        com.ichi2.libanki.Sched $r16, $r17;
        java.util.Iterator $r18;
        long[] $r20;

        r0 := @this: com.ichi2.libanki.Collection;

        $r3 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object removeLast()>();

        r5 = (java.lang.Object[]) $r4;

        $r6 = <com.ichi2.libanki.Collection$1: int[] $SwitchMap$com$ichi2$libanki$Collection$DismissType>;

        $r4 = r5[0];

        $r7 = (com.ichi2.libanki.Collection$DismissType) $r4;

        $i0 = virtualinvoke $r7.<com.ichi2.libanki.Collection$DismissType: int ordinal()>();

        $i0 = $r6[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label13;
            case 6: goto label16;
            default: goto label01;
        };

     label01:
        return 0L;

     label02:
        $r4 = r5[1];

        r8 = (com.ichi2.libanki.Card) $r4;

        $r4 = r5[2];

        r9 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label03;

        $r10 = virtualinvoke r8.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        $z0 = virtualinvoke $r10.<com.ichi2.libanki.Note: boolean hasTag(java.lang.String)>("leech");

        if $z0 == 0 goto label03;

        $r10 = virtualinvoke r8.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        virtualinvoke $r10.<com.ichi2.libanki.Note: void delTag(java.lang.String)>("leech");

        $r10 = virtualinvoke r8.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        virtualinvoke $r10.<com.ichi2.libanki.Note: void flush()>();

     label03:
        virtualinvoke r8.<com.ichi2.libanki.Card: void flush(boolean)>(0);

        $r11 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM revlog WHERE cid = ");

        $l1 = virtualinvoke r8.<com.ichi2.libanki.Card: long getId()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ORDER BY id DESC LIMIT 1");

        r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = virtualinvoke $r11.<com.ichi2.libanki.DB: long queryLongScalar(java.lang.String)>(r2);

        $r11 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM revlog WHERE id = ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<com.ichi2.libanki.DB: void execute(java.lang.String)>(r2);

        $r11 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        r5 = newarray (java.lang.Object)[3];

        $l1 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r5[0] = $r13;

        $i0 = virtualinvoke r0.<com.ichi2.libanki.Collection: int usn()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r5[1] = $r14;

        $l1 = virtualinvoke r8.<com.ichi2.libanki.Card: long getNid()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r5[2] = $r13;

        virtualinvoke $r11.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>("update cards set queue=type,mod=?,usn=? where queue=-2 and nid=?", r5);

        $i0 = virtualinvoke r8.<com.ichi2.libanki.Card: int getQueue()>();

        if $i0 != 3 goto label05;

        $i0 = 1;

     label04:
        $r15 = newarray (java.lang.String)[3];

        $r15[0] = "new";

        $r15[1] = "lrn";

        $r15[2] = "rev";

        r2 = $r15[$i0];

        $r16 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched>;

        virtualinvoke $r16.<com.ichi2.libanki.Sched: void _updateStats(com.ichi2.libanki.Card,java.lang.String,long)>(r8, r2, -1L);

        $r16 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched>;

        $r17 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched mSched>;

        $i0 = virtualinvoke $r17.<com.ichi2.libanki.Sched: int getReps()>();

        $i0 = $i0 + -1;

        virtualinvoke $r16.<com.ichi2.libanki.Sched: void setReps(int)>($i0);

        $l1 = virtualinvoke r8.<com.ichi2.libanki.Card: long getId()>();

        return $l1;

     label05:
        $i0 = virtualinvoke r8.<com.ichi2.libanki.Card: int getQueue()>();

        goto label04;

     label06:
        $r4 = r5[2];

        r1 = (java.util.ArrayList) $r4;

        $r18 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r4 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Card) $r4;

        virtualinvoke r8.<com.ichi2.libanki.Card: void flush(boolean)>(0);

        goto label07;

     label08:
        $r4 = r5[3];

        $r13 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        return $l1;

     label09:
        $r4 = r5[1];

        r8 = (com.ichi2.libanki.Card) $r4;

        virtualinvoke r8.<com.ichi2.libanki.Card: void flush(boolean)>(0);

        $l1 = virtualinvoke r8.<com.ichi2.libanki.Card: long getId()>();

        return $l1;

     label10:
        $r4 = r5[1];

        r1 = (java.util.ArrayList) $r4;

        $r18 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r4 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Card) $r4;

        virtualinvoke r8.<com.ichi2.libanki.Card: void flush(boolean)>(0);

        goto label11;

     label12:
        $r4 = r5[2];

        $r13 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        return $l1;

     label13:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r4 = r5[1];

        $r10 = (com.ichi2.libanki.Note) $r4;

        $l1 = virtualinvoke $r10.<com.ichi2.libanki.Note: long getMod()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r10.<com.ichi2.libanki.Note: void flush(java.lang.Long,boolean)>($r13, 0);

        $l1 = virtualinvoke $r10.<com.ichi2.libanki.Note: long getId()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        $r4 = r5[2];

        $r19 = (java.util.ArrayList) $r4;

        $r18 = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r4 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Card) $r4;

        virtualinvoke r8.<com.ichi2.libanki.Card: void flush(boolean)>(0);

        $l1 = virtualinvoke r8.<com.ichi2.libanki.Card: long getId()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        goto label14;

     label15:
        $r11 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM graves WHERE oid IN ");

        $r20 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r20);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<com.ichi2.libanki.DB: void execute(java.lang.String)>(r2);

        $r4 = r5[3];

        $r13 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        return $l1;

     label16:
        $r4 = r5[2];

        r1 = (java.util.ArrayList) $r4;

        $r18 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r4 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Card) $r4;

        virtualinvoke r8.<com.ichi2.libanki.Card: void flush(boolean)>(0);

        goto label17;

     label18:
        $r4 = r5[3];

        $r13 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        return $l1;
    }
    public boolean undoAvailable()
    {
        com.ichi2.libanki.Collection r0;
        int $i0;
        java.util.LinkedList $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String undoName(android.content.res.Resources)
    {
        com.ichi2.libanki.Collection r0;
        android.content.res.Resources $r1;
        java.util.LinkedList $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.Object[] $r4;
        com.ichi2.libanki.Collection$DismissType r5;
        java.lang.String $r6;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<com.ichi2.libanki.Collection: java.util.LinkedList mUndo>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getLast()>();

        $r4 = (java.lang.Object[]) $r3;

        $r3 = $r4[0];

        r5 = (com.ichi2.libanki.Collection$DismissType) $r3;

        $i0 = r5.<com.ichi2.libanki.Collection$DismissType: int undoNameId>;

        $r6 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        return $r6;

     label1:
        return "";
    }
    public void updateFieldCache(long[])
    {
        com.ichi2.libanki.Collection r0;
        long[] $r1;
        java.util.ArrayList r2, $r4;
        java.lang.String $r3;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Object[] r7, $r12;
        java.lang.String[] $r8;
        com.ichi2.libanki.Models $r9;
        java.lang.Long $r10;
        long $l0;
        org.json.JSONObject $r11;
        int $i1;
        com.ichi2.libanki.DB $r13;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 := @parameter0: long[];

        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r4 = specialinvoke r0.<com.ichi2.libanki.Collection: java.util.ArrayList _fieldData(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Object[]) $r6;

        $r6 = r7[2];

        $r3 = (java.lang.String) $r6;

        $r8 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r3);

        $r9 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $r6 = r7[1];

        $r10 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $r11 = virtualinvoke $r9.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

        if $r11 == null goto label1;

        $r12 = newarray (java.lang.Object)[3];

        $r9 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $i1 = virtualinvoke $r9.<com.ichi2.libanki.Models: int sortIdx(org.json.JSONObject)>($r11);

        $r3 = $r8[$i1];

        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String stripHTML(java.lang.String)>($r3);

        $r12[0] = $r3;

        $r3 = $r8[0];

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long fieldChecksum(java.lang.String)>($r3);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r12[1] = $r10;

        $r6 = r7[0];

        $r12[2] = $r6;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $r13 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB mDb>;

        virtualinvoke $r13.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("UPDATE notes SET sfld=?, csum=? WHERE id=?", r2);

        return;
    }
    public int usn()
    {
        com.ichi2.libanki.Collection r0;
        boolean $z0;
        int i0;

        r0 := @this: com.ichi2.libanki.Collection;

        $z0 = r0.<com.ichi2.libanki.Collection: boolean mServer>;

        if $z0 == 0 goto label1;

        i0 = r0.<com.ichi2.libanki.Collection: int mUsn>;

        return i0;

     label1:
        return -1;
    }
    public boolean validCollection()
    {
        com.ichi2.libanki.Collection r0;
        boolean $z0;
        com.ichi2.libanki.Models $r1;

        r0 := @this: com.ichi2.libanki.Collection;

        $r1 = r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models mModels>;

        $z0 = virtualinvoke $r1.<com.ichi2.libanki.Models: boolean validateModel()>();

        return $z0;
    }
