com.ichi2.libanki.importer.AnkiPackageImporter extends com.ichi2.libanki.importer.Anki2Importer
private java.util.Map mNameToNum
private java.util.zip.ZipFile mZip
    public void <init>(com.ichi2.libanki.Collection, java.lang.String)
    {
        com.ichi2.libanki.importer.AnkiPackageImporter r0;
        com.ichi2.libanki.Collection $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.libanki.importer.AnkiPackageImporter;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void <init>(com.ichi2.libanki.Collection,java.lang.String)>($r1, $r2);

        return;
    }
    protected java.io.BufferedInputStream _srcMediaData(java.lang.String)
    {
        com.ichi2.libanki.importer.AnkiPackageImporter r0;
        java.lang.String $r1, $r8;
        java.io.IOException r2;
        java.util.zip.ZipFile $r3, $r4;
        java.util.Map $r5;
        boolean $z0;
        java.io.BufferedInputStream $r6;
        java.lang.Object $r7;
        java.util.zip.ZipEntry $r9;
        java.io.InputStream $r10;
        java.lang.StringBuilder $r11;
        java.lang.Object[] $r12;

        r0 := @this: com.ichi2.libanki.importer.AnkiPackageImporter;

        $r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.Map mNameToNum>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label6;

        $r6 = new java.io.BufferedInputStream;

        $r3 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.zip.ZipFile mZip>;

        $r4 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.zip.ZipFile mZip>;

        $r5 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.Map mNameToNum>;

     label1:
        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

     label2:
        $r8 = (java.lang.String) $r7;

     label3:
        $r9 = virtualinvoke $r4.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($r8);

        $r10 = virtualinvoke $r3.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r9);

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r10);

     label4:
        return $r6;

     label5:
        r2 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not extract media file ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("from zip file.");

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>($r1, $r12);

     label6:
        return null;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    public void run()
    {
        com.ichi2.libanki.importer.AnkiPackageImporter r0;
        com.google.gson.stream.JsonReader r1;
        java.io.File r2, r4;
        java.util.HashMap r3;
        com.ichi2.libanki.Collection $r5;
        java.lang.String $r6, $r15, r22;
        java.util.zip.ZipFile $r7;
        java.lang.String[] $r8;
        boolean $z0;
        java.util.List $r9;
        android.content.res.Resources $r10;
        java.io.IOException r11, r24, r27;
        java.lang.Object[] $r12;
        android.content.Context $r13;
        java.io.FileReader $r14;
        java.util.Map $r16;
        java.io.FileNotFoundException r17;
        java.util.Set $r18;
        java.util.Iterator $r19;
        java.lang.Object $r20;
        java.util.Map$Entry r21;
        com.ichi2.libanki.Media $r23;
        java.lang.Throwable $r25, $r26;

        r0 := @this: com.ichi2.libanki.importer.AnkiPackageImporter;

        virtualinvoke r0.<com.ichi2.libanki.importer.AnkiPackageImporter: void publishProgress(int,int,int)>(0, 0, 0);

        r4 = new java.io.File;

        r2 = new java.io.File;

        $r5 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: java.lang.String getPath()>();

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r6);

        $r6 = virtualinvoke r2.<java.io.File: java.lang.String getParent()>();

        specialinvoke r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r6, "tmpzip");

     label01:
        $r7 = new java.util.zip.ZipFile;

        r2 = new java.io.File;

        $r6 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.lang.String mFile>;

     label02:
        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r6);

        specialinvoke $r7.<java.util.zip.ZipFile: void <init>(java.io.File,int)>(r2, 1);

     label03:
        r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.zip.ZipFile mZip> = $r7;

        $r7 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.zip.ZipFile mZip>;

     label04:
        $r6 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

     label05:
        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "collection.anki2";

        $r8[1] = "media";

     label06:
        staticinvoke <com.ichi2.libanki.Utils: void unzipFiles(java.util.zip.ZipFile,java.lang.String,java.lang.String[],java.util.Map)>($r7, $r6, $r8, null);

     label07:
        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, "collection.anki2");

        $r6 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

     label08:
        if $z0 != 0 goto label14;

     label09:
        $r9 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.List mLog>;

        $r10 = virtualinvoke r0.<com.ichi2.libanki.importer.AnkiPackageImporter: android.content.res.Resources getRes()>();

        $r6 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int)>(2131231073);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r6);

     label10:
        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label63;

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r4);

        return;

     label11:
        r11 := @caughtexception;

     label12:
        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r11, "Failed to unzip apkg.", $r12);

        $r9 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.List mLog>;

        $r10 = virtualinvoke r0.<com.ichi2.libanki.importer.AnkiPackageImporter: android.content.res.Resources getRes()>();

        $r6 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int)>(2131231073);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r6);

     label13:
        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label63;

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r4);

        return;

     label14:
        $r13 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: android.content.Context mContext>;

        $r5 = staticinvoke <com.ichi2.libanki.Storage: com.ichi2.libanki.Collection Collection(android.content.Context,java.lang.String)>($r13, $r6);

     label15:
        $z0 = virtualinvoke $r5.<com.ichi2.libanki.Collection: boolean validCollection()>();

     label16:
        if $z0 != 0 goto label21;

     label17:
        $r9 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.List mLog>;

        $r10 = virtualinvoke r0.<com.ichi2.libanki.importer.AnkiPackageImporter: android.content.res.Resources getRes()>();

        $r6 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int)>(2131231073);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r6);

     label18:
        if $r5 == null goto label20;

     label19:
        virtualinvoke $r5.<com.ichi2.libanki.Collection: void close()>();

     label20:
        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label63;

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r4);

        return;

     label21:
        if $r5 == null goto label23;

     label22:
        virtualinvoke $r5.<com.ichi2.libanki.Collection: void close()>();

     label23:
        r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.lang.String mFile> = $r6;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, "media");

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.Map mNameToNum> = r3;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

     label24:
        r1 = new com.google.gson.stream.JsonReader;

        $r14 = new java.io.FileReader;

     label25:
        specialinvoke $r14.<java.io.FileReader: void <init>(java.io.File)>(r2);

        specialinvoke r1.<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>($r14);

        virtualinvoke r1.<com.google.gson.stream.JsonReader: void beginObject()>();

     label26:
        $z0 = virtualinvoke r1.<com.google.gson.stream.JsonReader: boolean hasNext()>();

     label27:
        if $z0 == 0 goto label56;

     label28:
        $r6 = virtualinvoke r1.<com.google.gson.stream.JsonReader: java.lang.String nextName()>();

        $r15 = virtualinvoke r1.<com.google.gson.stream.JsonReader: java.lang.String nextString()>();

     label29:
        $r16 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.Map mNameToNum>;

     label30:
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r6);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r15);

     label31:
        goto label26;

     label32:
        r17 := @caughtexception;

     label33:
        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Apkg did not contain a media dict. No media will be imported.", $r12);

     label34:
        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void run()>();

        $r16 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.Map mNameToNum>;

        $r18 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label35:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

     label36:
        if $z0 == 0 goto label61;

     label37:
        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.util.Map$Entry) $r20;

        $r20 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        r22 = (java.lang.String) $r20;

        $r20 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.lang.String) $r20;

        $z0 = virtualinvoke r22.<java.lang.String: boolean startsWith(java.lang.String)>("_");

     label38:
        if $z0 != 0 goto label41;

     label39:
        $z0 = virtualinvoke r22.<java.lang.String: boolean startsWith(java.lang.String)>("latex-");

     label40:
        if $z0 == 0 goto label35;

     label41:
        r2 = new java.io.File;

        $r5 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: com.ichi2.libanki.Collection mCol>;

        $r23 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r15 = virtualinvoke $r23.<com.ichi2.libanki.Media: java.lang.String dir()>();

        r22 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String nfcNormalized(java.lang.String)>(r22);

        specialinvoke r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r15, r22);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

     label42:
        if $z0 != 0 goto label35;

     label43:
        $r7 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: java.util.zip.ZipFile mZip>;

        $r5 = r0.<com.ichi2.libanki.importer.AnkiPackageImporter: com.ichi2.libanki.Collection mCol>;

     label44:
        $r23 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r15 = virtualinvoke $r23.<com.ichi2.libanki.Media: java.lang.String dir()>();

     label45:
        $r8 = newarray (java.lang.String)[1];

        $r8[0] = $r6;

     label46:
        staticinvoke <com.ichi2.libanki.Utils: void unzipFiles(java.util.zip.ZipFile,java.lang.String,java.lang.String[],java.util.Map)>($r7, $r15, $r8, r3);

     label47:
        goto label35;

     label48:
        r24 := @caughtexception;

     label49:
        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Failed to extract static media file. Ignoring.", $r12);

     label50:
        goto label35;

     label51:
        $r25 := @caughtexception;

        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label52;

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r4);

     label52:
        throw $r25;

     label53:
        $r26 := @caughtexception;

        if $r5 == null goto label55;

     label54:
        virtualinvoke $r5.<com.ichi2.libanki.Collection: void close()>();

     label55:
        throw $r26;

     label56:
        virtualinvoke r1.<com.google.gson.stream.JsonReader: void endObject()>();

        virtualinvoke r1.<com.google.gson.stream.JsonReader: void close()>();

     label57:
        goto label34;

     label58:
        r27 := @caughtexception;

     label59:
        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Malformed media dict. Media import will be incomplete.", $r12);

     label60:
        goto label34;

     label61:
        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label62;

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r4);

     label62:
        virtualinvoke r0.<com.ichi2.libanki.importer.AnkiPackageImporter: void publishProgress(int,int,int)>(100, 100, 100);

     label63:
        return;

        catch java.io.IOException from label02 to label03 with label11;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.Throwable from label01 to label07 with label51;
        catch java.lang.Throwable from label07 to label08 with label51;
        catch java.lang.Throwable from label09 to label10 with label51;
        catch java.lang.Throwable from label12 to label13 with label51;
        catch java.lang.Throwable from label14 to label15 with label51;
        catch java.lang.Throwable from label15 to label16 with label53;
        catch java.lang.Throwable from label17 to label18 with label53;
        catch java.lang.Throwable from label19 to label20 with label51;
        catch java.lang.Throwable from label22 to label24 with label51;
        catch java.io.FileNotFoundException from label25 to label27 with label32;
        catch java.io.FileNotFoundException from label28 to label29 with label32;
        catch java.io.FileNotFoundException from label30 to label31 with label32;
        catch java.io.IOException from label25 to label27 with label58;
        catch java.io.IOException from label28 to label29 with label58;
        catch java.io.IOException from label30 to label31 with label58;
        catch java.lang.Throwable from label24 to label27 with label51;
        catch java.lang.Throwable from label28 to label31 with label51;
        catch java.lang.Throwable from label33 to label36 with label51;
        catch java.lang.Throwable from label37 to label38 with label51;
        catch java.lang.Throwable from label39 to label40 with label51;
        catch java.lang.Throwable from label41 to label42 with label51;
        catch java.io.IOException from label44 to label45 with label48;
        catch java.io.IOException from label46 to label47 with label48;
        catch java.lang.Throwable from label43 to label47 with label51;
        catch java.lang.Throwable from label49 to label50 with label51;
        catch java.lang.Throwable from label54 to label56 with label51;
        catch java.io.FileNotFoundException from label56 to label57 with label32;
        catch java.io.IOException from label56 to label57 with label58;
        catch java.lang.Throwable from label56 to label57 with label51;
        catch java.lang.Throwable from label59 to label60 with label51;
    }
