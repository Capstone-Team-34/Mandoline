com.ichi2.libanki.importer.Anki2Importer extends com.ichi2.libanki.importer.Importer
private static final int GUID
private static final int MEDIAPICKLIMIT
private static final int MID
private static final int MOD
private int mAdded
private boolean mAllowUpdate
private java.util.Map mCards
private java.util.Map mChangedGuids
private java.lang.String mDeckPrefix
private java.util.Map mDecks
private boolean mDupeOnSchemaChange
private int mDupes
private java.util.Map mIgnoredGuids
private java.util.Map mModelMap
private java.util.Map mNotes
private int mUpdated
    public void <init>(com.ichi2.libanki.Collection, java.lang.String)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        com.ichi2.libanki.Collection $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.ichi2.libanki.importer.Importer: void <init>(com.ichi2.libanki.Collection,java.lang.String)>($r1, $r2);

        r0.<com.ichi2.libanki.importer.Anki2Importer: boolean mNeedMapper> = 0;

        r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String mDeckPrefix> = null;

        r0.<com.ichi2.libanki.importer.Anki2Importer: boolean mAllowUpdate> = 1;

        r0.<com.ichi2.libanki.importer.Anki2Importer: boolean mDupeOnSchemaChange> = 0;

        return;
    }
    private long _did(long)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        long $l0, $l2, $l3;
        org.json.JSONException r1;
        java.util.Map $r2;
        java.lang.Long $r3, $r17;
        boolean $z0;
        java.lang.Object $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Decks $r6;
        org.json.JSONObject $r7, $r16;
        java.lang.String $r8, r9, $r10;
        java.lang.String[] $r11;
        java.util.List $r12;
        int $i1;
        java.lang.StringBuilder $r13;
        java.util.Iterator $r14;
        java.lang.RuntimeException $r15;
        byte $b4;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $l0 := @parameter0: long;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mDecks>;

     label01:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

     label02:
        if $z0 == 0 goto label07;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mDecks>;

     label03:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

     label04:
        $r3 = (java.lang.Long) $r4;

     label05:
        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

     label06:
        return $l0;

     label07:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

     label08:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r8 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label09:
        r9 = $r8;

        $r10 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String mDeckPrefix>;

     label10:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r10);

     label11:
        if $z0 != 0 goto label17;

     label12:
        $r11 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        $i1 = interfaceinvoke $r12.<java.util.List: int size()>();

        $r12 = interfaceinvoke $r12.<java.util.List: java.util.List subList(int,int)>(1, $i1);

        $r8 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("::", $r12);

     label13:
        r9 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String mDeckPrefix>;

     label14:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8);

     label15:
        if $z0 != 0 goto label17;

        $r13 = new java.lang.StringBuilder;

     label16:
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        $r8 = "";

     label18:
        $r11 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        $i1 = interfaceinvoke $r12.<java.util.List: int size()>();

     label19:
        $i1 = $i1 + -1;

     label20:
        $r12 = interfaceinvoke $r12.<java.util.List: java.util.List subList(int,int)>(0, $i1);

        $r14 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

     label22:
        if $z0 == 0 goto label34;

     label23:
        $r4 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

     label24:
        $r10 = (java.lang.String) $r4;

     label25:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8);

     label26:
        if $z0 != 0 goto label28;

        $r13 = new java.lang.StringBuilder;

     label27:
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label28:
        $r13 = new java.lang.StringBuilder;

     label29:
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label30:
        $r8 = $r10;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

     label31:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r3 = virtualinvoke $r6.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String)>($r10);

        $l2 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: long _did(long)>($l2);

     label32:
        goto label21;

     label33:
        r1 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r15;

     label34:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label35:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r3 = virtualinvoke $r6.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String)>(r9);

        $l2 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $z0 = virtualinvoke $r7.<org.json.JSONObject: boolean has(java.lang.String)>("conf");

     label36:
        if $z0 == 0 goto label48;

     label37:
        $l3 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

     label38:
        $b4 = $l3 cmp 1L;

        if $b4 == 0 goto label48;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

     label39:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l3 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        $r16 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l3);

     label40:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label41:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r16);

     label42:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label43:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void updateConf(org.json.JSONObject)>($r16);

     label44:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label45:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r16 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l2);

        $l3 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        virtualinvoke $r16.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("conf", $l3);

     label46:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label47:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r16);

     label48:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label49:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r16 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l2);

        r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("desc");

        virtualinvoke $r16.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("desc", r9);

     label50:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label51:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r16);

     label52:
        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mDecks>;

     label53:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r17);

     label54:
        return $l2;

        catch org.json.JSONException from label01 to label02 with label33;
        catch org.json.JSONException from label03 to label04 with label33;
        catch org.json.JSONException from label05 to label06 with label33;
        catch org.json.JSONException from label08 to label09 with label33;
        catch org.json.JSONException from label10 to label11 with label33;
        catch org.json.JSONException from label12 to label13 with label33;
        catch org.json.JSONException from label14 to label15 with label33;
        catch org.json.JSONException from label16 to label17 with label33;
        catch org.json.JSONException from label18 to label19 with label33;
        catch org.json.JSONException from label20 to label22 with label33;
        catch org.json.JSONException from label23 to label24 with label33;
        catch org.json.JSONException from label25 to label26 with label33;
        catch org.json.JSONException from label27 to label28 with label33;
        catch org.json.JSONException from label29 to label30 with label33;
        catch org.json.JSONException from label31 to label32 with label33;
        catch org.json.JSONException from label35 to label36 with label33;
        catch org.json.JSONException from label37 to label38 with label33;
        catch org.json.JSONException from label39 to label40 with label33;
        catch org.json.JSONException from label41 to label42 with label33;
        catch org.json.JSONException from label43 to label44 with label33;
        catch org.json.JSONException from label45 to label46 with label33;
        catch org.json.JSONException from label47 to label48 with label33;
        catch org.json.JSONException from label49 to label50 with label33;
        catch org.json.JSONException from label51 to label52 with label33;
        catch org.json.JSONException from label53 to label54 with label33;
    }
    private java.io.BufferedInputStream _dstMediaData(java.lang.String)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.String $r1, $r4;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Media $r3;
        java.io.BufferedInputStream $r5;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Media: java.lang.String dir()>();

        $r5 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.io.BufferedInputStream _mediaData(java.lang.String,java.lang.String)>($r1, $r4);

        return $r5;
    }
    private void _import()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.util.HashMap $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        io.requery.android.database.sqlite.SQLiteDatabase $r4;
        com.ichi2.libanki.Media $r5;
        java.lang.String $r6;
        boolean $z0;
        com.ichi2.libanki.Decks $r7;
        java.lang.Long $r8;
        long $l0;
        java.lang.Throwable $r9;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mDecks> = $r1;

     label1:
        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r3 = virtualinvoke $r5.<com.ichi2.libanki.Media: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String mDeckPrefix>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

     label2:
        if $z0 != 0 goto label4;

     label3:
        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r7 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String mDeckPrefix>;

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String)>($r6);

        $l0 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r7 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r7.<com.ichi2.libanki.Decks: void select(long)>($l0);

     label4:
        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _prepareTS()>();

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _prepareModels()>();

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _importNotes()>();

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _importCards()>();

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _importStaticMedia()>();

        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(100, 100, 25);

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _postImport()>();

        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(100, 100, 50);

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r3 = virtualinvoke $r5.<com.ichi2.libanki.Media: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label5:
        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r3 = virtualinvoke $r5.<com.ichi2.libanki.Media: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>("vacuum");

        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(100, 100, 65);

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>("analyze");

        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(100, 100, 75);

        return;

     label6:
        $r9 := @caughtexception;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r3 = virtualinvoke $r5.<com.ichi2.libanki.Media: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
    }
    private void _importCards()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        long l0, $l6, $l8;
        java.util.ArrayList r1, r4;
        java.util.HashMap r2, r3;
        int i1, $i2, $i3, $i4, i5, $i7;
        android.database.Cursor r5, $r9, r21, $r23;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.DB $r7;
        io.requery.android.database.sqlite.SQLiteDatabase $r8;
        boolean $z0, $z1;
        java.lang.String $r10;
        java.lang.Long $r11;
        java.lang.Boolean $r12;
        java.util.Map $r13;
        java.lang.Object $r14;
        java.lang.Integer $r15;
        java.lang.Throwable $r16, $r20, $r24;
        com.ichi2.libanki.Sched $r17;
        java.lang.Object[] r18, r19;
        byte $b9;
        java.lang.StringBuilder $r22;
        java.util.List $r25;
        android.content.res.Resources $r26;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mCards> = r2;

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        r5 = null;

     label01:
        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r9 = virtualinvoke $r8.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>("select f.guid, c.ord, c.id from cards c, notes f where c.nid = f.id", null);

     label02:
        r5 = $r9;

     label03:
        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToNext()>();

     label04:
        if $z0 == 0 goto label13;

     label05:
        $r10 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>(0);

        $i2 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(1);

        l0 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(2);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mCards>;

        $z0 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

     label06:
        if $z0 == 0 goto label11;

     label07:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mCards>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r13 = (java.util.Map) $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r11);

     label08:
        goto label03;

     label09:
        $r16 := @caughtexception;

        if r5 == null goto label10;

        interfaceinvoke r5.<android.database.Cursor: void close()>();

     label10:
        throw $r16;

     label11:
        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r11);

        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mCards>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r3);

     label12:
        goto label03;

     label13:
        if $r9 == null goto label14;

        interfaceinvoke $r9.<android.database.Cursor: void close()>();

     label14:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $i2 = 0;

        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $i3 = virtualinvoke $r6.<com.ichi2.libanki.Collection: int usn()>();

        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        $r17 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        i1 = virtualinvoke $r17.<com.ichi2.libanki.Sched: int getToday()>();

        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r17 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $i4 = virtualinvoke $r17.<com.ichi2.libanki.Sched: int getToday()>();

        i1 = i1 - $i4;

        l0 = (long) i1;

     label15:
        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r9 = virtualinvoke $r8.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>("select f.guid, f.mid, c.* from cards c, notes f where c.nid = f.id", null);

     label16:
        r5 = $r9;

     label17:
        $i4 = interfaceinvoke $r9.<android.database.Cursor: int getCount()>();

     label18:
        if $i4 <= 200 goto label44;

        $z0 = 1;

     label19:
        i1 = $i4 / 100;

        i5 = 0;

     label20:
        $z1 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToNext()>();

     label21:
        if $z1 == 0 goto label83;

     label22:
        r18 = newarray (java.lang.Object)[20];

        $r10 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>(0);

        r18[0] = $r10;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(1);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[1] = $r11;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(2);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[2] = $r11;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(3);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[3] = $r11;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(4);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[4] = $r11;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(5);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[5] = $r15;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(6);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[6] = $r11;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(7);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[7] = $r15;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(8);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[8] = $r15;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(9);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[9] = $r15;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(10);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[10] = $r11;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(11);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[11] = $r11;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(12);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[12] = $r11;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(13);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[13] = $r15;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[14] = $r15;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(15);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[15] = $r15;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(16);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[16] = $r11;

        $l6 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>(17);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[17] = $r11;

        $i7 = interfaceinvoke $r9.<android.database.Cursor: int getInt(int)>(18);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[18] = $r15;

        $r10 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>(19);

        r18[19] = $r10;

        $r14 = r18[0];

        $r10 = (java.lang.String) $r14;

        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mChangedGuids>;

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

     label23:
        if $z1 == 0 goto label25;

     label24:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mChangedGuids>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r10 = (java.lang.String) $r14;

     label25:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mIgnoredGuids>;

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

     label26:
        if $z1 != 0 goto label20;

     label27:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

     label28:
        if $z1 == 0 goto label20;

     label29:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r19 = (java.lang.Object[]) $r14;

        $r14 = r18[5];

        $r15 = (java.lang.Integer) $r14;

        $i7 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mCards>;

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

     label30:
        if $z1 == 0 goto label33;

     label31:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mCards>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r13 = (java.util.Map) $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r15);

     label32:
        if $z1 != 0 goto label20;

     label33:
        $i7 = lengthof r18;

     label34:
        $i7 = $i7 + -2;

     label35:
        r19 = newarray (java.lang.Object)[$i7];

        $i7 = lengthof r19;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r18, 2, r19, 0, $i7);

        $r14 = r19[0];

        $r11 = (java.lang.Long) $r14;

        $l6 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

     label36:
        $r14 = r19[0];

        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r14);

     label37:
        if $z1 == 0 goto label45;

     label38:
        $r14 = r19[0];

        $r11 = (java.lang.Long) $r14;

        $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

     label39:
        $l8 = $l8 + 999L;

     label40:
        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        r19[0] = $r11;

     label41:
        goto label36;

     label42:
        $r20 := @caughtexception;

        if r5 == null goto label43;

        interfaceinvoke r5.<android.database.Cursor: void close()>();

     label43:
        throw $r20;

     label44:
        $z0 = 0;

        goto label19;

     label45:
        $r14 = r19[0];

        $r11 = (java.lang.Long) $r14;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r18 = (java.lang.Object[]) $r14;

        $r14 = r18[0];

        r19[1] = $r14;

        $r14 = r19[2];

        $r11 = (java.lang.Long) $r14;

        $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $l8 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: long _did(long)>($l8);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        r19[2] = $r11;

        $l8 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        r19[4] = $r11;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        r19[5] = $r15;

        $r14 = r19[7];

        $r15 = (java.lang.Integer) $r14;

        $i7 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

     label46:
        if $i7 == 2 goto label51;

     label47:
        $r14 = r19[7];

        $r15 = (java.lang.Integer) $r14;

        $i7 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

     label48:
        if $i7 == 3 goto label51;

     label49:
        $r14 = r19[6];

        $r15 = (java.lang.Integer) $r14;

        $i7 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

     label50:
        if $i7 != 2 goto label54;

     label51:
        $r14 = r19[8];

        $r11 = (java.lang.Long) $r14;

        $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

     label52:
        $l8 = $l8 - l0;

     label53:
        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        r19[8] = $r11;

     label54:
        $r14 = r19[15];

        $r11 = (java.lang.Long) $r14;

        $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

     label55:
        $b9 = $l8 cmp 0L;

        if $b9 == 0 goto label62;

     label56:
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r19[15] = $r15;

        $r14 = r19[14];

        r19[8] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r19[14] = $r15;

        $r14 = r19[6];

        $r15 = (java.lang.Integer) $r14;

        $i7 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

     label57:
        if $i7 != 1 goto label73;

     label58:
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r19[7] = $r15;

     label59:
        $r14 = r19[6];

        $r15 = (java.lang.Integer) $r14;

        $i7 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

     label60:
        if $i7 != 1 goto label62;

     label61:
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r19[6] = $r15;

     label62:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r19);

     label63:
        r21 = null;

     label64:
        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select * from revlog where cid = ");

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r10 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = virtualinvoke $r8.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r10, null);

     label65:
        r21 = $r23;

     label66:
        $z1 = interfaceinvoke $r23.<android.database.Cursor: boolean moveToNext()>();

     label67:
        if $z1 == 0 goto label75;

     label68:
        r18 = newarray (java.lang.Object)[9];

        $l6 = interfaceinvoke $r23.<android.database.Cursor: long getLong(int)>(0);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[0] = $r11;

        $l6 = interfaceinvoke $r23.<android.database.Cursor: long getLong(int)>(1);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[1] = $r11;

        $i7 = interfaceinvoke $r23.<android.database.Cursor: int getInt(int)>(2);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[2] = $r15;

        $i7 = interfaceinvoke $r23.<android.database.Cursor: int getInt(int)>(3);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[3] = $r15;

        $l6 = interfaceinvoke $r23.<android.database.Cursor: long getLong(int)>(4);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[4] = $r11;

        $l6 = interfaceinvoke $r23.<android.database.Cursor: long getLong(int)>(5);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[5] = $r11;

        $l6 = interfaceinvoke $r23.<android.database.Cursor: long getLong(int)>(6);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[6] = $r11;

        $l6 = interfaceinvoke $r23.<android.database.Cursor: long getLong(int)>(7);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r18[7] = $r11;

        $i7 = interfaceinvoke $r23.<android.database.Cursor: int getInt(int)>(8);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[8] = $r15;

        $r14 = r19[0];

        r18[1] = $r14;

        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $i7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: int usn()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r18[2] = $r15;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r18);

     label69:
        goto label66;

     label70:
        $r24 := @caughtexception;

        if r21 == null goto label72;

     label71:
        interfaceinvoke r21.<android.database.Cursor: void close()>();

     label72:
        throw $r24;

     label73:
        $r14 = r19[6];

        r19[7] = $r14;

     label74:
        goto label59;

     label75:
        if $r23 == null goto label77;

     label76:
        interfaceinvoke $r23.<android.database.Cursor: void close()>();

     label77:
        $i2 = $i2 + 1;

        i5 = i5 + 1;

        if $i4 == 0 goto label20;

        if $z0 == 0 goto label80;

     label78:
        $i7 = i5 % i1;

     label79:
        if $i7 != 0 goto label20;

     label80:
        $i7 = i5 * 100;

     label81:
        $i7 = $i7 / $i4;

        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(100, $i7, 0);

     label82:
        goto label20;

     label83:
        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(100, 100, 0);

     label84:
        if $r9 == null goto label85;

        interfaceinvoke $r9.<android.database.Cursor: void close()>();

     label85:
        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r7.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("insert or ignore into cards values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", r1);

        $r6 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r7.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("insert or ignore into revlog values (?,?,?,?,?,?,?,?,?)", r4);

        $r25 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.List mLog>;

        $r26 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: android.content.res.Resources getRes()>();

        r19 = newarray (java.lang.Object)[1];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r19[0] = $r15;

        $r10 = virtualinvoke $r26.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231069, r19);

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>($r10);

        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label15 to label16 with label42;
        catch java.lang.Throwable from label17 to label18 with label42;
        catch java.lang.Throwable from label20 to label21 with label42;
        catch java.lang.Throwable from label22 to label23 with label42;
        catch java.lang.Throwable from label24 to label26 with label42;
        catch java.lang.Throwable from label27 to label28 with label42;
        catch java.lang.Throwable from label29 to label30 with label42;
        catch java.lang.Throwable from label31 to label32 with label42;
        catch java.lang.Throwable from label33 to label34 with label42;
        catch java.lang.Throwable from label35 to label37 with label42;
        catch java.lang.Throwable from label38 to label39 with label42;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label45 to label46 with label42;
        catch java.lang.Throwable from label47 to label48 with label42;
        catch java.lang.Throwable from label49 to label50 with label42;
        catch java.lang.Throwable from label51 to label52 with label42;
        catch java.lang.Throwable from label53 to label55 with label42;
        catch java.lang.Throwable from label56 to label57 with label42;
        catch java.lang.Throwable from label58 to label60 with label42;
        catch java.lang.Throwable from label61 to label63 with label42;
        catch java.lang.Throwable from label64 to label65 with label70;
        catch java.lang.Throwable from label66 to label67 with label70;
        catch java.lang.Throwable from label68 to label69 with label70;
        catch java.lang.Throwable from label71 to label74 with label42;
        catch java.lang.Throwable from label76 to label77 with label42;
        catch java.lang.Throwable from label78 to label79 with label42;
        catch java.lang.Throwable from label81 to label82 with label42;
        catch java.lang.Throwable from label83 to label84 with label42;
    }
    private void _importNotes()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.util.ArrayList r1, r2, r3, r6;
        org.json.JSONException r4;
        java.util.HashMap r5, $r18;
        int i0, $i4, i5, $i6, i7, $i8;
        android.database.Cursor r7, $r11;
        com.ichi2.libanki.Collection $r8;
        com.ichi2.libanki.DB $r9;
        io.requery.android.database.sqlite.SQLiteDatabase $r10;
        boolean $z0, $z1;
        long $l1, $l2, $l3, $l9;
        java.lang.String $r12;
        java.util.Map $r13;
        java.lang.Object[] $r14, $r23;
        java.lang.Long $r15;
        java.lang.Boolean $r16;
        java.lang.Throwable $r17, $r22;
        java.lang.Integer $r19;
        java.lang.Object $r20;
        java.lang.RuntimeException $r21;
        byte $b10;
        com.ichi2.libanki.Models $r24;
        org.json.JSONObject $r25;
        java.util.List $r26;
        android.content.res.Resources $r27;
        long[] $r28;
        com.ichi2.libanki.Tags $r29;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        r5 = new java.util.HashMap;

        specialinvoke r5.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes> = r5;

        r5 = new java.util.HashMap;

        specialinvoke r5.<java.util.HashMap: void <init>()>();

        r7 = null;

     label001:
        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r11 = virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>("select id, guid, mod, mid from notes", null);

     label002:
        r7 = $r11;

     label003:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToNext()>();

     label004:
        if $z0 == 0 goto label009;

     label005:
        $l1 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(0);

        $r12 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(1);

        $l2 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(2);

        $l3 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(3);

        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $r14 = newarray (java.lang.Object)[3];

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r14[0] = $r15;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r14[1] = $r15;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r14[2] = $r15;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

     label006:
        goto label003;

     label007:
        $r17 := @caughtexception;

        if r7 == null goto label008;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label008:
        throw $r17;

     label009:
        if $r11 == null goto label010;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

     label010:
        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mChangedGuids> = $r18;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mIgnoredGuids> = $r18;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $i4 = virtualinvoke $r8.<com.ichi2.libanki.Collection: int usn()>();

        i5 = 0;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

     label011:
        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

     label012:
        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r11 = virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>("select * from notes", null);

     label013:
        r7 = $r11;

     label014:
        $i6 = interfaceinvoke $r11.<android.database.Cursor: int getCount()>();

     label015:
        if $i6 <= 200 goto label057;

        $z0 = 1;

     label016:
        i0 = $i6 / 100;

        i7 = 0;

     label017:
        $z1 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToNext()>();

     label018:
        if $z1 == 0 goto label115;

     label019:
        $r14 = newarray (java.lang.Object)[11];

     label020:
        $l1 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(0);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label021:
        $r14[0] = $r15;

     label022:
        $r12 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(1);

     label023:
        $r14[1] = $r12;

     label024:
        $l1 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(2);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label025:
        $r14[2] = $r15;

     label026:
        $l1 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(3);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label027:
        $r14[3] = $r15;

     label028:
        $i8 = interfaceinvoke $r11.<android.database.Cursor: int getInt(int)>(4);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

     label029:
        $r14[4] = $r19;

     label030:
        $r12 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(5);

     label031:
        $r14[5] = $r12;

     label032:
        $r12 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(6);

     label033:
        $r14[6] = $r12;

     label034:
        $r12 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(7);

     label035:
        $r14[7] = $r12;

     label036:
        $l1 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(8);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label037:
        $r14[8] = $r15;

     label038:
        $i8 = interfaceinvoke $r11.<android.database.Cursor: int getInt(int)>(9);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

     label039:
        $r14[9] = $r19;

     label040:
        $r12 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(10);

     label041:
        $r14[10] = $r12;

     label042:
        $z1 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: boolean _uniquifyNote(java.lang.Object[])>($r14);

     label043:
        if $z1 == 0 goto label077;

     label044:
        $r20 = $r14[0];

     label045:
        $z1 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r20);

     label046:
        if $z1 == 0 goto label058;

     label047:
        $r20 = $r14[0];

        $r15 = (java.lang.Long) $r20;

     label048:
        $l1 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label049:
        $l1 = $l1 + 999L;

     label050:
        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label051:
        $r14[0] = $r15;

     label052:
        goto label044;

     label053:
        r4 := @caughtexception;

     label054:
        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r21;

     label055:
        $r22 := @caughtexception;

        if r7 == null goto label056;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label056:
        throw $r22;

     label057:
        $z0 = 0;

        goto label016;

     label058:
        $r20 = $r14[0];

        $r15 = (java.lang.Long) $r20;

     label059:
        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

     label060:
        $r14[4] = $r19;

        $r20 = $r14[2];

        $r15 = (java.lang.Long) $r20;

     label061:
        $l1 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label062:
        $r20 = $r14[6];

        $r12 = (java.lang.String) $r20;

     label063:
        $r12 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String _mungeMedia(long,java.lang.String)>($l1, $r12);

     label064:
        $r14[6] = $r12;

     label065:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label066:
        $r20 = $r14[0];

        $r15 = (java.lang.Long) $r20;

     label067:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label068:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $r20 = $r14[1];

        $r12 = (java.lang.String) $r20;

        $r23 = newarray (java.lang.Object)[3];

        $r20 = $r14[0];

        $r23[0] = $r20;

        $r20 = $r14[3];

        $r23[1] = $r20;

        $r20 = $r14[2];

        $r23[2] = $r20;

     label069:
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r23);

     label070:
        i7 = i7 + 1;

        if $i6 == 0 goto label017;

        if $z0 == 0 goto label073;

     label071:
        $i8 = i7 % i0;

     label072:
        if $i8 != 0 goto label017;

     label073:
        $i8 = i7 * 100;

     label074:
        $i8 = $i8 / $i6;

     label075:
        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>($i8, 0, 0);

     label076:
        goto label017;

     label077:
        i5 = i5 + 1;

     label078:
        $z1 = r0.<com.ichi2.libanki.importer.Anki2Importer: boolean mAllowUpdate>;

     label079:
        if $z1 == 0 goto label070;

     label080:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $r20 = $r14[1];

     label081:
        $r20 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

     label082:
        $r23 = (java.lang.Object[]) $r20;

        $r20 = $r23[0];

        $r15 = (java.lang.Long) $r20;

     label083:
        $l1 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label084:
        $r20 = $r23[1];

        $r15 = (java.lang.Long) $r20;

     label085:
        $l3 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label086:
        $r20 = $r23[2];

        $r15 = (java.lang.Long) $r20;

     label087:
        $l2 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label088:
        $r20 = $r14[3];

        $r15 = (java.lang.Long) $r20;

     label089:
        $l9 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label090:
        $b10 = $l3 cmp $l9;

        if $b10 >= 0 goto label070;

     label091:
        $r20 = $r14[2];

        $r15 = (java.lang.Long) $r20;

     label092:
        $l3 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label093:
        $b10 = $l2 cmp $l3;

        if $b10 != 0 goto label106;

     label094:
        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label095:
        $r14[0] = $r15;

     label096:
        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

     label097:
        $r14[4] = $r19;

        $r20 = $r14[2];

        $r15 = (java.lang.Long) $r20;

     label098:
        $l1 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

     label099:
        $r20 = $r14[6];

        $r12 = (java.lang.String) $r20;

     label100:
        $r12 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String _mungeMedia(long,java.lang.String)>($l1, $r12);

     label101:
        $r14[6] = $r12;

     label102:
        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label103:
        $r20 = $r14[0];

        $r15 = (java.lang.Long) $r20;

     label104:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label105:
        goto label070;

     label106:
        $r23 = newarray (java.lang.Object)[2];

        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mCol>;

     label107:
        $r24 = virtualinvoke $r8.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r25 = virtualinvoke $r24.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l2);

        $r12 = virtualinvoke $r25.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label108:
        $r23[0] = $r12;

        $r20 = $r14[6];

        $r12 = (java.lang.String) $r20;

     label109:
        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\u001f", ",");

     label110:
        $r23[1] = $r12;

     label111:
        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: %s", $r23);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label112:
        $r13 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mIgnoredGuids>;

        $r20 = $r14[1];

        $r12 = (java.lang.String) $r20;

     label113:
        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r16);

     label114:
        goto label070;

     label115:
        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(100, 0, 0);

     label116:
        if $r11 == null goto label117;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

     label117:
        if i5 <= 0 goto label118;

        virtualinvoke r6.<java.util.ArrayList: int size()>();

        $r26 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.List mLog>;

        $r27 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: android.content.res.Resources getRes()>();

        $r14 = newarray (java.lang.Object)[2];

        i0 = virtualinvoke r6.<java.util.ArrayList: int size()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14[0] = $r19;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r14[1] = $r19;

        $r12 = virtualinvoke $r27.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231082, $r14);

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r12);

        i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if i0 <= 0 goto label118;

        $r26 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.List mLog>;

        $r27 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: android.content.res.Resources getRes()>();

        $r12 = virtualinvoke $r27.<android.content.res.Resources: java.lang.String getString(int)>(2131231083);

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r12);

     label118:
        r0.<com.ichi2.libanki.importer.Anki2Importer: int mDupes> = i5;

        i5 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: int mAdded> = i5;

        i5 = virtualinvoke r6.<java.util.ArrayList: int size()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: int mUpdated> = i5;

        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r9.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("insert or replace into notes values (?,?,?,?,?,?,?,?,?,?,?)", r1);

        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r9.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("insert or replace into notes values (?,?,?,?,?,?,?,?,?,?,?)", r6);

        $r28 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r2);

        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        virtualinvoke $r8.<com.ichi2.libanki.Collection: void updateFieldCache(long[])>($r28);

        $r8 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r29 = virtualinvoke $r8.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        virtualinvoke $r29.<com.ichi2.libanki.Tags: void registerNotes(long[])>($r28);

        return;

        catch java.lang.Throwable from label001 to label002 with label007;
        catch java.lang.Throwable from label003 to label004 with label007;
        catch java.lang.Throwable from label005 to label006 with label007;
        catch org.json.JSONException from label012 to label013 with label053;
        catch org.json.JSONException from label014 to label015 with label053;
        catch org.json.JSONException from label017 to label018 with label053;
        catch org.json.JSONException from label020 to label021 with label053;
        catch org.json.JSONException from label022 to label023 with label053;
        catch org.json.JSONException from label024 to label025 with label053;
        catch org.json.JSONException from label026 to label027 with label053;
        catch org.json.JSONException from label028 to label029 with label053;
        catch org.json.JSONException from label030 to label031 with label053;
        catch org.json.JSONException from label032 to label033 with label053;
        catch org.json.JSONException from label034 to label035 with label053;
        catch org.json.JSONException from label036 to label037 with label053;
        catch org.json.JSONException from label038 to label039 with label053;
        catch org.json.JSONException from label040 to label041 with label053;
        catch org.json.JSONException from label042 to label043 with label053;
        catch org.json.JSONException from label045 to label046 with label053;
        catch org.json.JSONException from label048 to label049 with label053;
        catch org.json.JSONException from label050 to label051 with label053;
        catch java.lang.Throwable from label011 to label013 with label055;
        catch java.lang.Throwable from label014 to label015 with label055;
        catch java.lang.Throwable from label017 to label018 with label055;
        catch java.lang.Throwable from label019 to label043 with label055;
        catch java.lang.Throwable from label044 to label046 with label055;
        catch java.lang.Throwable from label047 to label049 with label055;
        catch java.lang.Throwable from label050 to label052 with label055;
        catch java.lang.Throwable from label054 to label055 with label055;
        catch org.json.JSONException from label059 to label060 with label053;
        catch org.json.JSONException from label061 to label062 with label053;
        catch org.json.JSONException from label063 to label064 with label053;
        catch org.json.JSONException from label065 to label066 with label053;
        catch org.json.JSONException from label067 to label068 with label053;
        catch org.json.JSONException from label069 to label070 with label053;
        catch org.json.JSONException from label075 to label076 with label053;
        catch org.json.JSONException from label081 to label082 with label053;
        catch org.json.JSONException from label083 to label084 with label053;
        catch org.json.JSONException from label085 to label086 with label053;
        catch org.json.JSONException from label087 to label088 with label053;
        catch org.json.JSONException from label089 to label090 with label053;
        catch org.json.JSONException from label092 to label093 with label053;
        catch org.json.JSONException from label094 to label095 with label053;
        catch org.json.JSONException from label096 to label097 with label053;
        catch org.json.JSONException from label098 to label099 with label053;
        catch org.json.JSONException from label100 to label101 with label053;
        catch org.json.JSONException from label102 to label103 with label053;
        catch org.json.JSONException from label104 to label105 with label053;
        catch org.json.JSONException from label107 to label108 with label053;
        catch org.json.JSONException from label109 to label110 with label053;
        catch org.json.JSONException from label111 to label112 with label053;
        catch org.json.JSONException from label113 to label114 with label053;
        catch org.json.JSONException from label115 to label116 with label053;
        catch java.lang.Throwable from label058 to label070 with label055;
        catch java.lang.Throwable from label071 to label072 with label055;
        catch java.lang.Throwable from label074 to label076 with label055;
        catch java.lang.Throwable from label078 to label079 with label055;
        catch java.lang.Throwable from label080 to label090 with label055;
        catch java.lang.Throwable from label091 to label093 with label055;
        catch java.lang.Throwable from label094 to label105 with label055;
        catch java.lang.Throwable from label106 to label114 with label055;
        catch java.lang.Throwable from label115 to label116 with label055;
    }
    private void _importStaticMedia()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.io.File r1;
        int $i0, $i1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Media $r3;
        java.lang.String $r4;
        boolean $z0;
        java.io.File[] $r5;
        java.io.BufferedInputStream $r6;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Media: java.lang.String dir()>();

        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        r1 = $r5[$i1];

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z0 == 0 goto label3;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $z0 = virtualinvoke $r3.<com.ichi2.libanki.Media: boolean have(java.lang.String)>($r4);

        if $z0 != 0 goto label3;

        $r6 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.io.BufferedInputStream _srcMediaData(java.lang.String)>($r4);

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _writeDstMedia(java.lang.String,java.io.BufferedInputStream)>($r4, $r6);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return;
    }
    private java.io.BufferedInputStream _mediaData(java.lang.String)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.String $r1;
        java.io.BufferedInputStream $r2;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.io.BufferedInputStream _mediaData(java.lang.String,java.lang.String)>($r1, null);

        return $r2;
    }
    private java.io.BufferedInputStream _mediaData(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.String $r1, $r4;
        java.io.IOException r2;
        java.io.FileInputStream $r3;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Media $r6;
        java.io.File $r7;
        java.io.BufferedInputStream $r8;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        if $r4 != null goto label1;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r4 = virtualinvoke $r6.<com.ichi2.libanki.Media: java.lang.String dir()>();

     label1:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r4, $r1);

        $r1 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = new java.io.BufferedInputStream;

        $r3 = new java.io.FileInputStream;

     label2:
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>($r1);

        specialinvoke $r8.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r3, 2048);

     label3:
        return $r8;

     label4:
        r2 := @caughtexception;

        return null;

        catch java.io.IOException from label2 to label3 with label4;
    }
    private long _mid(long)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        long $l0, l1, $l2;
        org.json.JSONException r1;
        java.util.Map $r2;
        java.lang.Long $r3, $r10;
        boolean $z0;
        java.lang.Object $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Models $r6;
        org.json.JSONObject $r7, r9;
        java.lang.String $r8, $r12;
        int $i3;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $l0 := @parameter0: long;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mModelMap>;

     label01:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

     label02:
        if $z0 == 0 goto label07;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mModelMap>;

     label03:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

     label04:
        $r3 = (java.lang.Long) $r4;

     label05:
        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

     label06:
        return $l0;

     label07:
        l1 = $l0;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

     label08:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

     label09:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

     label10:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Models: java.lang.String scmhash(org.json.JSONObject)>($r7);

     label11:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label12:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $z0 = virtualinvoke $r6.<com.ichi2.libanki.Models: boolean have(long)>(l1);

     label13:
        if $z0 != 0 goto label23;

        r9 = new org.json.JSONObject;

     label14:
        $r8 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>($r7);

        specialinvoke r9.<org.json.JSONObject: void <init>(java.lang.String)>($r8);

        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("id", l1);

        $l2 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("mod", $l2);

     label15:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mCol>;

     label16:
        $i3 = virtualinvoke $r5.<com.ichi2.libanki.Collection: int usn()>();

        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i3);

     label17:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label18:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r6.<com.ichi2.libanki.Models: void update(org.json.JSONObject)>(r9);

     label19:
        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mModelMap>;

     label20:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r10);

     label21:
        return l1;

     label22:
        r1 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r11;

     label23:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label24:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        r9 = virtualinvoke $r6.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>(l1);

     label25:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label26:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r12 = virtualinvoke $r6.<com.ichi2.libanki.Models: java.lang.String scmhash(org.json.JSONObject)>(r9);

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r12);

     label27:
        if $z0 == 0 goto label34;

        r9 = new org.json.JSONObject;

     label28:
        $r8 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>($r7);

        specialinvoke r9.<org.json.JSONObject: void <init>(java.lang.String)>($r8);

        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("id", l1);

        $l2 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("mod", $l2);

     label29:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mCol>;

     label30:
        $i3 = virtualinvoke $r5.<com.ichi2.libanki.Collection: int usn()>();

        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i3);

     label31:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label32:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r6.<com.ichi2.libanki.Models: void update(org.json.JSONObject)>(r9);

     label33:
        goto label19;

     label34:
        l1 = l1 + 1L;

        goto label11;

        catch org.json.JSONException from label01 to label02 with label22;
        catch org.json.JSONException from label03 to label04 with label22;
        catch org.json.JSONException from label05 to label06 with label22;
        catch org.json.JSONException from label08 to label09 with label22;
        catch org.json.JSONException from label10 to label11 with label22;
        catch org.json.JSONException from label12 to label13 with label22;
        catch org.json.JSONException from label14 to label15 with label22;
        catch org.json.JSONException from label16 to label17 with label22;
        catch org.json.JSONException from label18 to label19 with label22;
        catch org.json.JSONException from label20 to label21 with label22;
        catch org.json.JSONException from label24 to label25 with label22;
        catch org.json.JSONException from label26 to label27 with label22;
        catch org.json.JSONException from label28 to label29 with label22;
        catch org.json.JSONException from label30 to label31 with label22;
        catch org.json.JSONException from label32 to label33 with label22;
    }
    private java.lang.String _mungeMedia(long, java.lang.String)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        long $l0;
        java.lang.String r1, r2, $r4;
        java.lang.StringBuffer r3;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.util.regex.Pattern r8;
        java.util.regex.Matcher $r9;
        int $i1;
        java.io.BufferedInputStream $r10, $r11;
        java.lang.String[] $r12;
        java.util.Locale $r13;
        java.lang.Object[] $r14;
        java.lang.Long $r15;
        com.ichi2.libanki.Collection $r16;
        com.ichi2.libanki.Media $r17;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $l0 := @parameter0: long;

        $r4 := @parameter1: java.lang.String;

        $r5 = <com.ichi2.libanki.Media: java.util.List mRegexps>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.regex.Pattern) $r7;

        $r9 = virtualinvoke r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        r3 = new java.lang.StringBuffer;

        specialinvoke r3.<java.lang.StringBuffer: void <init>()>();

        $i1 = staticinvoke <com.ichi2.libanki.Media: int indexOfFname(java.util.regex.Pattern)>(r8);

     label2:
        $z0 = virtualinvoke $r9.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label8;

        $r4 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>($i1);

        $r10 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.io.BufferedInputStream _srcMediaData(java.lang.String)>($r4);

        $r11 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.io.BufferedInputStream _dstMediaData(java.lang.String)>($r4);

        if $r10 != null goto label3;

        $r4 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $r4 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r4);

        virtualinvoke $r9.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r3, $r4);

        goto label2;

     label3:
        $r12 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFilename(java.lang.String)>($r4);

        r2 = $r12[0];

        r1 = $r12[1];

        $r13 = <java.util.Locale: java.util.Locale US>;

        $r14 = newarray (java.lang.Object)[3];

        $r14[0] = r2;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r14[1] = $r15;

        $r14[2] = r1;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r13, "%s_%s%s", $r14);

        $r16 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $z0 = virtualinvoke $r17.<com.ichi2.libanki.Media: boolean have(java.lang.String)>(r1);

        if $z0 == 0 goto label4;

        r2 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r4, r1);

        $r4 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r4);

        virtualinvoke $r9.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r3, $r4);

        goto label2;

     label4:
        if $r11 == null goto label5;

        $z0 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: boolean compareMedia(java.io.BufferedInputStream,java.io.BufferedInputStream)>($r10, $r11);

        if $z0 == 0 goto label7;

     label5:
        if $r11 != null goto label6;

        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _writeDstMedia(java.lang.String,java.io.BufferedInputStream)>($r4, $r10);

     label6:
        $r4 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $r4 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r4);

        virtualinvoke $r9.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r3, $r4);

        goto label2;

     label7:
        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _writeDstMedia(java.lang.String,java.io.BufferedInputStream)>(r1, $r10);

        r2 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r4, r1);

        $r4 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r4);

        virtualinvoke $r9.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r3, $r4);

        goto label2;

     label8:
        virtualinvoke $r9.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r3);

        $r4 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label1;

     label9:
        return $r4;
    }
    private void _postImport()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        org.json.JSONException r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Long $r6;
        long $l0;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.Sched $r8;
        java.lang.RuntimeException $r9;
        org.json.JSONObject $r10;
        com.ichi2.libanki.DB $r11;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mDecks>;

     label01:
        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label11;

     label04:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

     label05:
        $r6 = (java.lang.Long) $r5;

     label06:
        $l0 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

     label07:
        $r7 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mCol>;

     label08:
        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r8.<com.ichi2.libanki.Sched: void maybeRandomizeDeck(java.lang.Long)>($r6);

     label09:
        goto label02;

     label10:
        r1 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r9;

     label11:
        $r7 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label12:
        $r10 = virtualinvoke $r7.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

     label13:
        $r7 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label14:
        $r11 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $l0 = virtualinvoke $r11.<com.ichi2.libanki.DB: long queryLongScalar(java.lang.String)>("select max(due)+1 from cards where type = 0");

        virtualinvoke $r10.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("nextPos", $l0);

     label15:
        $r7 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label16:
        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

     label17:
        return;

        catch org.json.JSONException from label01 to label03 with label10;
        catch org.json.JSONException from label04 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
        catch org.json.JSONException from label12 to label13 with label10;
        catch org.json.JSONException from label14 to label15 with label10;
        catch org.json.JSONException from label16 to label17 with label10;
    }
    private void _prepareFiles()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.String $r1;
        com.ichi2.libanki.Collection $r2;
        android.content.Context $r3;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mCol>;

        r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst> = $r2;

        $r3 = r0.<com.ichi2.libanki.importer.Anki2Importer: android.content.Context mContext>;

        $r1 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.lang.String mFile>;

        $r2 = staticinvoke <com.ichi2.libanki.Storage: com.ichi2.libanki.Collection Collection(android.content.Context,java.lang.String)>($r3, $r1);

        r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc> = $r2;

        return;
    }
    private void _prepareModels()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.util.HashMap $r1;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mModelMap> = $r1;

        return;
    }
    private boolean _uniquifyNote(java.lang.Object[])
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.Object[] $r1, $r7;
        java.lang.Object r2;
        java.lang.String r3, $r6;
        java.lang.Long $r4;
        long $l0, $l1;
        byte $b2;
        java.util.Map $r5;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.lang.Object[];

        r2 = $r1[1];

        r3 = (java.lang.String) r2;

        r2 = $r1[2];

        $r4 = (java.lang.Long) r2;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $l1 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: long _mid(long)>($l0);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        return $z0;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[2] = $r4;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 == 0 goto label5;

        $z0 = r0.<com.ichi2.libanki.importer.Anki2Importer: boolean mDupeOnSchemaChange>;

        if $z0 != 0 goto label4;

        return 0;

     label4:
        r2 = $r1[1];

        $r6 = (java.lang.String) r2;

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String incGuid(java.lang.String)>($r6);

        $r1[1] = $r6;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mChangedGuids>;

        r2 = $r1[1];

        $r6 = (java.lang.String) r2;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r6);

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        r2 = $r1[1];

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: java.util.Map mNotes>;

        r2 = $r1[1];

        r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r7 = (java.lang.Object[]) r2;

        r2 = $r7[2];

        $r4 = (java.lang.Long) r2;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label4;

        return 0;

     label5:
        return 1;
    }
    private void _writeDstMedia(java.lang.String, java.io.BufferedInputStream)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.String $r1, $r7, $r8;
        java.io.BufferedInputStream $r2;
        java.io.IOException r3;
        java.io.File $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Media $r6;
        java.lang.Object[] $r9;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.BufferedInputStream;

        $r4 = new java.io.File;

        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label1:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Media: java.lang.String dir()>();

        $r8 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String nfcNormalized(java.lang.String)>($r1);

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r7, $r8);

        $r7 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <com.ichi2.libanki.Utils: void writeToFile(java.io.InputStream,java.lang.String)>($r2, $r7);

     label2:
        $r5 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mDst>;

     label3:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        virtualinvoke $r6.<com.ichi2.libanki.Media: void markFileAdd(java.lang.String)>($r1);

     label4:
        return;

     label5:
        r3 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r1;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r3, "Error copying file %s.", $r9);

        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    private boolean compareMedia(java.io.BufferedInputStream, java.io.BufferedInputStream)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.io.BufferedInputStream $r1, $r2;
        byte[] $r3, $r4;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.io.BufferedInputStream;

        $r2 := @parameter1: java.io.BufferedInputStream;

        $r3 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: byte[] _mediaPick(java.io.BufferedInputStream)>($r1);

        $r4 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: byte[] _mediaPick(java.io.BufferedInputStream)>($r2);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r4);

        return $z0;
    }
    byte[] _mediaPick(java.io.BufferedInputStream)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.io.BufferedInputStream $r1;
        java.io.ByteArrayOutputStream r2;
        byte[] r3, $r4;
        int i0, $i1;
        java.io.FileNotFoundException r5;
        java.io.IOException r6;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.io.BufferedInputStream;

        r2 = new java.io.ByteArrayOutputStream;

     label01:
        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>(int)>(2048);

     label02:
        r3 = newarray (byte)[1024];

        i0 = 0;

     label03:
        virtualinvoke $r1.<java.io.BufferedInputStream: void mark(int)>(2048);

     label04:
        $i1 = virtualinvoke $r1.<java.io.BufferedInputStream: int read(byte[])>(r3);

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[])>(r3);

     label05:
        if $i1 != -1 goto label10;

     label06:
        virtualinvoke $r1.<java.io.BufferedInputStream: void reset()>();

     label07:
        r3 = newarray (byte)[1024];

     label08:
        $r4 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        i0 = virtualinvoke r2.<java.io.ByteArrayOutputStream: int size()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 1024);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, i0);

     label09:
        return r3;

     label10:
        i0 = i0 + $i1;

        if i0 <= 1024 goto label04;

        goto label06;

     label11:
        r5 := @caughtexception;

        return null;

     label12:
        r6 := @caughtexception;

        return null;

        catch java.io.FileNotFoundException from label01 to label02 with label11;
        catch java.io.FileNotFoundException from label03 to label05 with label11;
        catch java.io.FileNotFoundException from label06 to label07 with label11;
        catch java.io.FileNotFoundException from label08 to label09 with label11;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label05 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
    }
    protected java.io.BufferedInputStream _srcMediaData(java.lang.String)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.String $r1, $r4;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Media $r3;
        java.io.BufferedInputStream $r5;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Media: java.lang.String dir()>();

        $r5 = specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: java.io.BufferedInputStream _mediaData(java.lang.String,java.lang.String)>($r1, $r4);

        return $r5;
    }
    public int getAdded()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        int i0;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        i0 = r0.<com.ichi2.libanki.importer.Anki2Importer: int mAdded>;

        return i0;
    }
    public int getDupes()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        int i0;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        i0 = r0.<com.ichi2.libanki.importer.Anki2Importer: int mDupes>;

        return i0;
    }
    public int getUpdated()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        int i0;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        i0 = r0.<com.ichi2.libanki.importer.Anki2Importer: int mUpdated>;

        return i0;
    }
    protected void publishProgress(int, int, int)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        int $i0, $i1, $i2;
        com.ichi2.async.DeckTask$TaskData $r1;
        com.ichi2.async.DeckTask$ProgressCallback $r2;
        android.content.res.Resources $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.String $r6;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.async.DeckTask$ProgressCallback mProgress>;

        if $r2 == null goto label1;

        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.async.DeckTask$ProgressCallback mProgress>;

        $r1 = new com.ichi2.async.DeckTask$TaskData;

        $r3 = virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: android.content.res.Resources getRes()>();

        $r4 = newarray (java.lang.Object)[3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[1] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4[2] = $r5;

        $r6 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231078, $r4);

        specialinvoke $r1.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.String)>($r6);

        virtualinvoke $r2.<com.ichi2.async.DeckTask$ProgressCallback: void publishProgress(com.ichi2.async.DeckTask$TaskData)>($r1);

     label1:
        return;
    }
    public void run()
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        java.lang.RuntimeException r1;
        com.ichi2.libanki.Collection $r2;
        java.lang.Throwable $r3;
        java.lang.Object[] $r4;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        virtualinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void publishProgress(int,int,int)>(0, 0, 0);

     label1:
        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _prepareFiles()>();

     label2:
        specialinvoke r0.<com.ichi2.libanki.importer.Anki2Importer: void _import()>();

     label3:
        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void close(boolean)>(0);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        $r2 = r0.<com.ichi2.libanki.importer.Anki2Importer: com.ichi2.libanki.Collection mSrc>;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void close(boolean)>(0);

        throw $r3;

     label7:
        r1 := @caughtexception;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "RuntimeException while importing", $r4);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label7;
        catch java.lang.RuntimeException from label6 to label7 with label7;
    }
    public void setDupeOnSchemaChange(boolean)
    {
        com.ichi2.libanki.importer.Anki2Importer r0;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.importer.Anki2Importer;

        $z0 := @parameter0: boolean;

        r0.<com.ichi2.libanki.importer.Anki2Importer: boolean mDupeOnSchemaChange> = $z0;

        return;
    }
