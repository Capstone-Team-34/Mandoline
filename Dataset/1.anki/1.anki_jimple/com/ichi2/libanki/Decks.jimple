com.ichi2.libanki.Decks extends java.lang.Object
static final boolean $assertionsDisabled
public static final java.lang.String defaultConf
public static final java.lang.String defaultDeck
private static final java.lang.String defaultDynamicDeck
private boolean mChanged
private com.ichi2.libanki.Collection mCol
private java.util.HashMap mDconf
private java.util.HashMap mDecks
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;

        $r0 = class "Lcom/ichi2/libanki/Decks;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <com.ichi2.libanki.Decks: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public void <init>(com.ichi2.libanki.Collection)
    {
        com.ichi2.libanki.Decks r0;
        com.ichi2.libanki.Collection $r1;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol> = $r1;

        return;
    }
    private java.lang.String _basename(java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.ichi2.libanki.Decks: java.util.List _path(java.lang.String)>($r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r1 = (java.lang.String) $r3;

        return $r1;
    }
    private boolean _canDragAndDrop(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.ichi2.libanki.Decks: boolean _isParent(java.lang.String,java.lang.String)>($r2, $r1);

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.ichi2.libanki.Decks: boolean _isAncestor(java.lang.String,java.lang.String)>($r1, $r2);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
    private boolean _isAncestor(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;
        java.util.Iterator $r4, $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.ichi2.libanki.Decks: java.util.List _path(java.lang.String)>($r1);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r3 = specialinvoke r0.<com.ichi2.libanki.Decks: java.util.List _path(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
    private boolean _isParent(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1, $r2;
        java.util.List $r3, $r4;
        java.util.Iterator $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.ichi2.libanki.Decks: java.util.List _path(java.lang.String)>($r1);

        $r1 = specialinvoke r0.<com.ichi2.libanki.Decks: java.lang.String _basename(java.lang.String)>($r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = specialinvoke r0.<com.ichi2.libanki.Decks: java.util.List _path(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
    private java.util.List _path(java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        java.util.List $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r3;
    }
    private void maybeAddToActive()
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONException r1;
        org.json.JSONObject $r2;
        long $l0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

     label1:
        $l0 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke r0.<com.ichi2.libanki.Decks: void select(long)>($l0);

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public java.lang.String _ensureParents(java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String r1, r2;
        java.util.List $r3, $r4;
        int $i0;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7;
        java.lang.Long $r8;
        long $l1;

        r0 := @this: com.ichi2.libanki.Decks;

        r1 := @parameter0: java.lang.String;

        r2 = "";

        $r3 = specialinvoke r0.<com.ichi2.libanki.Decks: java.util.List _path(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        return r1;

     label1:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r6;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r8 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String)>(r1);

        $l1 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.String name(long)>($l1);

        goto label2;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r6 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r1 = (java.lang.String) $r6;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;
    }
    public java.util.LinkedList active()
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONException r1;
        java.util.LinkedList r2;
        com.ichi2.libanki.Collection $r3;
        org.json.JSONObject $r4;
        org.json.JSONArray $r5;
        int i0, $i1;
        long $l2;
        java.lang.Long $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Decks;

        $r3 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label01:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $r5 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("activeDecks");

     label02:
        r2 = new java.util.LinkedList;

     label03:
        specialinvoke r2.<java.util.LinkedList: void <init>()>();

     label04:
        i0 = 0;

     label05:
        $i1 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

     label06:
        if i0 >= $i1 goto label10;

     label07:
        $l2 = virtualinvoke $r5.<org.json.JSONArray: long getLong(int)>(i0);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

     label08:
        i0 = i0 + 1;

        goto label05;

     label09:
        r1 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

     label10:
        return r2;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
    }
    public java.util.ArrayList all()
    {
        com.ichi2.libanki.Decks r0;
        java.util.ArrayList r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.json.JSONObject r6;

        r0 := @this: com.ichi2.libanki.Decks;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.json.JSONObject) $r5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return r1;
    }
    public java.util.ArrayList allConf()
    {
        com.ichi2.libanki.Decks r0;
        java.util.ArrayList r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.json.JSONObject r6;

        r0 := @this: com.ichi2.libanki.Decks;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.json.JSONObject) $r5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return r1;
    }
    public java.lang.Long[] allIds()
    {
        com.ichi2.libanki.Decks r0;
        java.util.HashMap $r1;
        java.util.Set $r2, $r3;
        int $i0;
        java.lang.Long[] $r4;
        java.lang.Object[] $r5;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r4 = newarray (java.lang.Long)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (java.lang.Long[]) $r5;

        return $r4;
    }
    public java.util.ArrayList allNames()
    {
        com.ichi2.libanki.Decks r0;
        java.util.ArrayList $r1;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList allNames(boolean)>(1);

        return $r1;
    }
    public java.util.ArrayList allNames(boolean)
    {
        com.ichi2.libanki.Decks r0;
        boolean $z0;
        org.json.JSONException r1;
        java.util.ArrayList r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        org.json.JSONObject r7;
        java.lang.String $r8;
        java.lang.RuntimeException $r9;
        int $i0;

        r0 := @this: com.ichi2.libanki.Decks;

        $z0 := @parameter0: boolean;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        if $z0 == 0 goto label09;

        $r3 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label01:
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label19;

     label04:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label05:
        r7 = (org.json.JSONObject) $r6;

     label06:
        $r8 = virtualinvoke r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label07:
        goto label02;

     label08:
        r1 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r9;

     label09:
        $r3 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label10:
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label12:
        if $z0 == 0 goto label19;

     label13:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label14:
        r7 = (org.json.JSONObject) $r6;

     label15:
        $i0 = virtualinvoke r7.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label16:
        if $i0 != 0 goto label11;

     label17:
        $r8 = virtualinvoke r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label18:
        goto label11;

     label19:
        return r2;

        catch org.json.JSONException from label01 to label03 with label08;
        catch org.json.JSONException from label04 to label05 with label08;
        catch org.json.JSONException from label06 to label07 with label08;
        catch org.json.JSONException from label10 to label12 with label08;
        catch org.json.JSONException from label13 to label14 with label08;
        catch org.json.JSONException from label15 to label16 with label08;
        catch org.json.JSONException from label17 to label18 with label08;
    }
    public java.util.ArrayList allSorted()
    {
        com.ichi2.libanki.Decks r0;
        com.ichi2.libanki.Decks$1 $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.ichi2.libanki.Decks;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r1 = new com.ichi2.libanki.Decks$1;

        specialinvoke $r1.<com.ichi2.libanki.Decks$1: void <init>(com.ichi2.libanki.Decks)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r2, $r1);

        return $r2;
    }
    public void beforeUpload()
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONException r1;
        java.util.ArrayList $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.json.JSONObject r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Decks;

     label01:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label09;

     label04:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

     label05:
        r5 = (org.json.JSONObject) $r4;

     label06:
        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", 0);

     label07:
        goto label02;

     label08:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label09:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList allConf()>();

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

     label11:
        if $z0 == 0 goto label16;

     label12:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

     label13:
        r5 = (org.json.JSONObject) $r4;

     label14:
        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", 0);

     label15:
        goto label10;

     label16:
        virtualinvoke r0.<com.ichi2.libanki.Decks: void save()>();

        return;

        catch org.json.JSONException from label01 to label03 with label08;
        catch org.json.JSONException from label04 to label05 with label08;
        catch org.json.JSONException from label06 to label07 with label08;
        catch org.json.JSONException from label09 to label11 with label08;
        catch org.json.JSONException from label12 to label13 with label08;
        catch org.json.JSONException from label14 to label15 with label08;
    }
    public org.json.JSONObject byName(java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1;
        org.json.JSONException r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.json.JSONObject r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label1:
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label9;

     label4:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label5:
        r7 = (org.json.JSONObject) $r6;

     label6:
        $r6 = virtualinvoke r7.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("name");

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

     label7:
        if $z0 == 0 goto label2;

        return r7;

     label8:
        r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

     label9:
        return null;

        catch org.json.JSONException from label1 to label3 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    public java.util.TreeMap children(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        java.util.TreeMap r1;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        java.lang.String $r4, $r8, $r10;
        java.util.ArrayList $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.StringBuilder $r9;
        java.lang.Long $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

     label01:
        $r3 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r4 = virtualinvoke $r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label02:
        r1 = new java.util.TreeMap;

     label03:
        specialinvoke r1.<java.util.TreeMap: void <init>()>();

        $r5 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label15;

     label06:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label07:
        $r3 = (org.json.JSONObject) $r7;

     label08:
        $r8 = virtualinvoke $r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label09:
        $r9 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>($r10);

     label11:
        if $z0 == 0 goto label04;

     label12:
        $r8 = virtualinvoke $r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $l0 = virtualinvoke $r3.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

     label13:
        goto label04;

     label14:
        r2 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r12;

     label15:
        return r1;

        catch org.json.JSONException from label01 to label02 with label14;
        catch org.json.JSONException from label03 to label05 with label14;
        catch org.json.JSONException from label06 to label07 with label14;
        catch org.json.JSONException from label08 to label09 with label14;
        catch org.json.JSONException from label10 to label11 with label14;
        catch org.json.JSONException from label12 to label13 with label14;
    }
    public java.lang.Long[] cids(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        java.lang.Long[] $r1;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long[] cids(long,boolean)>($l0, 0);

        return $r1;
    }
    public java.lang.Long[] cids(long, boolean)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        boolean $z0;
        java.util.ArrayList r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Long[] $r6;
        java.lang.Long $r7;
        java.util.TreeMap $r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        java.util.Map$Entry r12;
        long[] $r13;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id from cards where did=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = virtualinvoke $r3.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r5, 0);

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.Long[] list2ObjectArray(java.util.List)>(r1);

        return $r6;

     label1:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        $r9 = virtualinvoke $r8.<java.util.TreeMap: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label2;

     label3:
        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id from cards where did in ");

        $r13 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>(r1);

        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r13);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = virtualinvoke $r3.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r5, 0);

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.Long[] list2ObjectArray(java.util.List)>(r1);

        return $r6;
    }
    public void collapseBrowser(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        boolean $z0, $z1;
        org.json.JSONObject $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $z0 = 0;

     label1:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $z1 = virtualinvoke $r2.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("browserCollapsed", 0);

     label2:
        if $z1 != 0 goto label3;

        $z0 = 1;

     label3:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("browserCollapsed", $z0);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r2);

     label4:
        return;

     label5:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }
    public void collpase(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        org.json.JSONObject $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

     label1:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $z0 = virtualinvoke $r2.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("collapsed");

     label2:
        if $z0 != 0 goto label5;

        $z0 = 1;

     label3:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("collapsed", $z0);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r2);

     label4:
        return;

     label5:
        $z0 = 0;

        goto label3;

     label6:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label6;
        catch org.json.JSONException from label3 to label4 with label6;
    }
    public org.json.JSONObject confForDid(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        org.json.JSONObject $r2;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long,boolean)>($l0, 0);

        $z0 = <com.ichi2.libanki.Decks: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z0 = virtualinvoke $r2.<org.json.JSONObject: boolean has(java.lang.String)>("conf");

        if $z0 == 0 goto label5;

     label2:
        $l0 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l0);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("dyn", 0);

     label3:
        return $r2;

     label4:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

     label5:
        return $r2;

        catch org.json.JSONException from label2 to label3 with label4;
    }
    public long confId(java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1;
        long $l0;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $l0 = virtualinvoke r0.<com.ichi2.libanki.Decks: long confId(java.lang.String,java.lang.String)>($r1, "{\'name\': \"Default\",\'new\': {\'delays\': [1, 10],\'ints\': [1, 4, 7],\'initialFactor\': 2500,\'separate\': True,\'order\': 1,\'perDay\': 20,\'bury\': True},\'lapse\': {\'delays\': [10],\'mult\': 0,\'minInt\': 1,\'leechFails\': 8,\'leechAction\': 0},\'rev\': {\'perDay\': 100,\'ease4\': 1.3,\'fuzz\': 0.05,\'minSpace\': 1,\'ivlFct\': 1,\'maxIvl\': 36500,\'bury\': True},\'maxTaken\': 60,\'timer\': 0,\'autoplay\': True,\'replayq\': True,\'mod\': 0,\'usn\': 0}");

        return $l0;
    }
    public long confId(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1, $r2;
        org.json.JSONObject r3;
        org.json.JSONException r4;
        long $l0;
        java.util.HashMap $r5;
        java.lang.Long $r6;
        boolean $z0;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new org.json.JSONObject;

     label1:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>($r2);

     label2:
        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

     label3:
        $r5 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

     label4:
        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r6);

     label5:
        if $z0 != 0 goto label2;

     label6:
        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("id", $l0);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r1);

     label7:
        $r5 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r3);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>(r3);

        return $l0;

     label8:
        r4 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r7;

        catch org.json.JSONException from label1 to label3 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    public int count()
    {
        com.ichi2.libanki.Decks r0;
        int $i0;
        java.util.HashMap $r1;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }
    public org.json.JSONObject current()
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONObject $r1;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 = virtualinvoke r0.<com.ichi2.libanki.Decks: long selected()>();

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        return $r1;
    }
    public java.util.List didsForConf(org.json.JSONObject)
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1, r8;
        java.util.ArrayList r2;
        org.json.JSONException r3;
        java.util.HashMap $r4;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        long $l0, $l1;
        byte $b2;
        java.lang.Long $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: org.json.JSONObject;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label01:
        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label13;

     label04:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label05:
        r8 = (org.json.JSONObject) $r7;

     label06:
        $z0 = virtualinvoke r8.<org.json.JSONObject: boolean has(java.lang.String)>("conf");

     label07:
        if $z0 == 0 goto label02;

     label08:
        $l0 = virtualinvoke r8.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label09:
        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label02;

     label10:
        $l0 = virtualinvoke r8.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label11:
        goto label02;

     label12:
        r3 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r10;

     label13:
        return r2;

        catch org.json.JSONException from label01 to label03 with label12;
        catch org.json.JSONException from label04 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
    }
    public void flush()
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject r1;
        org.json.JSONException r2;
        android.content.ContentValues r3;
        boolean $z0;
        java.util.HashMap $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        java.util.Map$Entry r8;
        java.lang.Long $r9;
        long $l0;
        java.lang.String $r10;
        java.lang.RuntimeException $r11;
        com.ichi2.libanki.Collection $r12;
        com.ichi2.libanki.DB $r13;

        r0 := @this: com.ichi2.libanki.Decks;

        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

        $z0 = r0.<com.ichi2.libanki.Decks: boolean mChanged>;

        if $z0 == 0 goto label28;

        r1 = new org.json.JSONObject;

     label01:
        specialinvoke r1.<org.json.JSONObject: void <init>()>();

     label02:
        $r4 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label03:
        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label13;

     label06:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label07:
        r8 = (java.util.Map$Entry) $r7;

     label08:
        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

     label09:
        $r9 = (java.lang.Long) $r7;

     label10:
        $l0 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r10, $r7);

     label11:
        goto label04;

     label12:
        r2 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

     label13:
        $r10 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>(r1);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("decks", $r10);

     label14:
        r1 = new org.json.JSONObject;

     label15:
        specialinvoke r1.<org.json.JSONObject: void <init>()>();

     label16:
        $r4 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

     label17:
        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label19:
        if $z0 == 0 goto label26;

     label20:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label21:
        r8 = (java.util.Map$Entry) $r7;

     label22:
        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

     label23:
        $r9 = (java.lang.Long) $r7;

     label24:
        $l0 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r10, $r7);

     label25:
        goto label18;

     label26:
        $r10 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>(r1);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("dconf", $r10);

     label27:
        $r12 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r13 = virtualinvoke $r12.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r13.<com.ichi2.libanki.DB: int update(java.lang.String,android.content.ContentValues)>("col", r3);

        r0.<com.ichi2.libanki.Decks: boolean mChanged> = 0;

     label28:
        return;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
        catch org.json.JSONException from label13 to label14 with label12;
        catch org.json.JSONException from label15 to label16 with label12;
        catch org.json.JSONException from label17 to label19 with label12;
        catch org.json.JSONException from label20 to label21 with label12;
        catch org.json.JSONException from label22 to label23 with label12;
        catch org.json.JSONException from label24 to label25 with label12;
        catch org.json.JSONException from label26 to label27 with label12;
    }
    public org.json.JSONObject get(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONObject $r1;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long,boolean)>($l0, 1);

        return $r1;
    }
    public org.json.JSONObject get(long, boolean)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        boolean $z0, $z1;
        java.util.HashMap $r1;
        java.lang.Long $r2;
        java.lang.Object $r3;
        org.json.JSONObject $r4;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        $r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z1 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        $r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.json.JSONObject) $r3;

        return $r4;

     label1:
        if $z0 == 0 goto label2;

        $r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.json.JSONObject) $r3;

        return $r4;

     label2:
        return null;
    }
    public java.lang.String getActualDescription()
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>("desc", "");

        return $r2;
    }
    public org.json.JSONObject getConf(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        java.util.HashMap $r1;
        java.lang.Long $r2;
        java.lang.Object $r3;
        org.json.JSONObject $r4;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.json.JSONObject) $r3;

        return $r4;
    }
    public java.util.HashMap getDecks()
    {
        com.ichi2.libanki.Decks r0;
        java.util.HashMap r1;

        r0 := @this: com.ichi2.libanki.Decks;

        r1 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        return r1;
    }
    public java.lang.Long id(java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1;
        java.lang.Long $r2;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String,boolean)>($r1, 1);

        return $r2;
    }
    public java.lang.Long id(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1, $r2;
        java.lang.Long $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String,boolean,java.lang.String)>($r1, 1, $r2);

        return $r3;
    }
    public java.lang.Long id(java.lang.String, boolean)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Long $r2;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String,boolean,java.lang.String)>($r1, $z0, "{\'newToday\': [0, 0],\'revToday\': [0, 0],\'lrnToday\': [0, 0],\'timeToday\': [0, 0],\'conf\': 1,\'usn\': 0,\'desc\': \"\",\'dyn\': 0,\'collapsed\': False,\'extendNew\': 10,\'extendRev\': 50}");

        return $r2;
    }
    public java.lang.Long id(java.lang.String, boolean, java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        boolean $z0, $z1;
        java.lang.String $r1, $r4, $r5, $r11;
        org.json.JSONException r2;
        org.json.JSONObject r3;
        java.util.HashMap $r6;
        java.util.Set $r7;
        java.util.Iterator $r8;
        java.lang.Object $r9;
        java.util.Map$Entry r10;
        java.lang.Long $r12;
        long $l0;
        java.lang.RuntimeException $r13;

        r0 := @this: com.ichi2.libanki.Decks;

        $r4 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.String;

     label01:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\"", "");

     label02:
        $r5 = $r4;

        $r6 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label03:
        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z1 == 0 goto label14;

     label06:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

     label07:
        r10 = (java.util.Map$Entry) $r9;

     label08:
        $r9 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

     label09:
        r3 = (org.json.JSONObject) $r9;

     label10:
        $r11 = virtualinvoke r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

     label11:
        if $z1 == 0 goto label04;

     label12:
        $r9 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

     label13:
        $r12 = (java.lang.Long) $r9;

        return $r12;

     label14:
        if $z0 != 0 goto label15;

        return null;

     label15:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("::");

     label16:
        if $z0 == 0 goto label19;

     label17:
        $r4 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.String _ensureParents(java.lang.String)>($r4);

     label18:
        $r5 = $r4;

     label19:
        r3 = new org.json.JSONObject;

     label20:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>($r1);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r5);

     label21:
        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

     label22:
        $r6 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label23:
        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r12);

     label24:
        if $z0 != 0 goto label21;

     label25:
        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("id", $l0);

     label26:
        $r6 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label27:
        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r3);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>(r3);

        specialinvoke r0.<com.ichi2.libanki.Decks: void maybeAddToActive()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label28:
        return $r12;

     label29:
        r2 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r13;

        catch org.json.JSONException from label01 to label02 with label29;
        catch org.json.JSONException from label03 to label05 with label29;
        catch org.json.JSONException from label06 to label07 with label29;
        catch org.json.JSONException from label08 to label09 with label29;
        catch org.json.JSONException from label10 to label11 with label29;
        catch org.json.JSONException from label12 to label13 with label29;
        catch org.json.JSONException from label15 to label16 with label29;
        catch org.json.JSONException from label17 to label18 with label29;
        catch org.json.JSONException from label20 to label22 with label29;
        catch org.json.JSONException from label23 to label24 with label29;
        catch org.json.JSONException from label25 to label26 with label29;
        catch org.json.JSONException from label27 to label28 with label29;
    }
    public boolean isDyn(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        org.json.JSONObject $r2;
        int $i1;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

     label1:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $i1 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label2:
        if $i1 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label4;
    }
    public void load(java.lang.String, java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1, $r2;
        org.json.JSONObject r3, $r7;
        org.json.JSONException r4;
        java.util.HashMap $r5;
        org.json.JSONArray $r6;
        int i0, $i1;
        long $l2;
        java.lang.Long $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf> = $r5;

        r3 = new org.json.JSONObject;

     label01:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>($r1);

        $r6 = virtualinvoke r3.<org.json.JSONObject: org.json.JSONArray names()>();

     label02:
        i0 = 0;

     label03:
        $i1 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label04:
        if i0 >= $i1 goto label09;

     label05:
        $r1 = virtualinvoke $r6.<org.json.JSONArray: java.lang.String getString(int)>(i0);

        $r7 = virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>($r1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

     label06:
        $r5 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label07:
        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

     label08:
        i0 = i0 + 1;

        goto label03;

     label09:
        r3 = new org.json.JSONObject;

     label10:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>($r2);

        $r6 = virtualinvoke r3.<org.json.JSONObject: org.json.JSONArray names()>();

     label11:
        i0 = 0;

     label12:
        if $r6 == null goto label20;

     label13:
        $i1 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label14:
        if i0 >= $i1 goto label20;

     label15:
        $r1 = virtualinvoke $r6.<org.json.JSONArray: java.lang.String getString(int)>(i0);

     label16:
        $r5 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

     label17:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r7 = virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>($r1);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

     label18:
        i0 = i0 + 1;

        goto label12;

     label19:
        r4 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r9;

     label20:
        r0.<com.ichi2.libanki.Decks: boolean mChanged> = 0;

        return;

        catch org.json.JSONException from label01 to label02 with label19;
        catch org.json.JSONException from label03 to label04 with label19;
        catch org.json.JSONException from label05 to label06 with label19;
        catch org.json.JSONException from label07 to label08 with label19;
        catch org.json.JSONException from label10 to label11 with label19;
        catch org.json.JSONException from label13 to label14 with label19;
        catch org.json.JSONException from label15 to label16 with label19;
        catch org.json.JSONException from label17 to label18 with label19;
    }
    public java.lang.String name(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.String name(long,boolean)>($l0, 0);

        return $r1;
    }
    public java.lang.String name(long, boolean)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        boolean $z0;
        org.json.JSONException r1;
        org.json.JSONObject $r2;
        java.lang.String $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

     label1:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long,boolean)>($l0, $z0);

     label2:
        if $r2 == null goto label5;

     label3:
        $r3 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label4:
        return $r3;

     label5:
        return "[no deck]";

     label6:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label6;
        catch org.json.JSONException from label3 to label4 with label6;
    }
    public java.lang.String nameOrNone(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        org.json.JSONObject $r2;
        java.lang.String $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long,boolean)>($l0, 0);

        if $r2 == null goto label4;

     label1:
        $r3 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

     label4:
        return null;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public long newDyn(java.lang.String)
    {
        com.ichi2.libanki.Decks r0;
        java.lang.String $r1;
        java.lang.Long $r2;
        long $l0;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String,java.lang.String)>($r1, "{\'newToday\': [0, 0],\'revToday\': [0, 0],\'lrnToday\': [0, 0],\'timeToday\': [0, 0],\'collapsed\': False,\'dyn\': 1,\'desc\': \"\",\'usn\': 0,\'delays\': null,\'separate\': True,\'terms\': [[\"\", 100, 0]],\'resched\': True,\'return\': True}");

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.ichi2.libanki.Decks: void select(long)>($l0);

        return $l0;
    }
    public java.util.List parents(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        java.util.ArrayList r2, r3;
        org.json.JSONObject $r4;
        java.lang.String $r5, $r12;
        java.lang.String[] $r6;
        java.util.List $r7;
        int $i1, $i2;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r11;
        java.lang.Long $r13;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

     label01:
        $r4 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r5 = virtualinvoke $r4.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

     label02:
        $i1 = $i1 + -1;

     label03:
        $r7 = interfaceinvoke $r7.<java.util.List: java.util.List subList(int,int)>(0, $i1);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label20;

     label06:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

     label07:
        $r5 = (java.lang.String) $r9;

     label08:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label09:
        if $i1 != 0 goto label13;

     label10:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label11:
        goto label04;

     label12:
        r1 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r10;

     label13:
        $r11 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label15:
        $i1 = $i1 + -1;

     label16:
        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i1);

     label17:
        $r12 = (java.lang.String) $r9;

     label18:
        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label19:
        goto label04;

     label20:
        r2 = new java.util.ArrayList;

     label21:
        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label22:
        $i1 = 0;

     label23:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

     label24:
        if $i1 >= $i2 goto label29;

     label25:
        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i1);

     label26:
        $r5 = (java.lang.String) $r9;

     label27:
        $r13 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String)>($r5);

        $l0 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        interfaceinvoke r2.<java.util.List: void add(int,java.lang.Object)>($i1, $r4);

     label28:
        $i1 = $i1 + 1;

        goto label23;

     label29:
        return r2;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
        catch org.json.JSONException from label14 to label15 with label12;
        catch org.json.JSONException from label16 to label17 with label12;
        catch org.json.JSONException from label18 to label19 with label12;
        catch org.json.JSONException from label21 to label22 with label12;
        catch org.json.JSONException from label23 to label24 with label12;
        catch org.json.JSONException from label25 to label26 with label12;
        catch org.json.JSONException from label27 to label28 with label12;
    }
    public void recoverOrphans()
    {
        com.ichi2.libanki.Decks r0;
        java.lang.Long[] $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.Long[] allIds()>();

        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $z0 = virtualinvoke $r3.<com.ichi2.libanki.DB: boolean getMod()>();

        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set did = 1 where did not in ");

        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.lang.Long[])>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r5);

        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void setMod(boolean)>($z0);

        return;
    }
    public void rem(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        virtualinvoke r0.<com.ichi2.libanki.Decks: void rem(long,boolean)>($l0, 0);

        return;
    }
    public void rem(long, boolean)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        virtualinvoke r0.<com.ichi2.libanki.Decks: void rem(long,boolean,boolean)>($l0, $z0, 1);

        return;
    }
    public void rem(long, boolean, boolean)
    {
        com.ichi2.libanki.Decks r0;
        long $l0, $l3;
        boolean $z0, $z1, $z2;
        org.json.JSONException r1;
        byte $b1;
        org.json.JSONObject $r2;
        java.lang.String $r3;
        com.ichi2.libanki.Collection $r4;
        long[] $r5;
        java.util.HashMap $r6;
        java.lang.Long $r7;
        int $i2;
        com.ichi2.libanki.Sched $r8;
        java.util.TreeMap $r9;
        java.util.Collection $r10;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        java.lang.RuntimeException $r13;
        com.ichi2.libanki.DB $r14;
        java.lang.StringBuilder $r15;
        java.util.ArrayList $r16;
        java.util.LinkedList $r17;
        java.util.Set $r18;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label05;

     label01:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r3 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("::");

     label02:
        if $z0 == 0 goto label38;

     label03:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", "Default");

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r2);

     label04:
        return;

     label05:
        $r4 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r5 = newarray (long)[1];

        $r5[0] = $l0;

     label06:
        virtualinvoke $r4.<com.ichi2.libanki.Collection: void _logRem(long[],int)>($r5, 2);

     label07:
        $r6 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label08:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z2 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r7);

     label09:
        if $z2 == 0 goto label38;

     label10:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $i2 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label11:
        if $i2 == 0 goto label22;

        $r4 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label12:
        $r8 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r8.<com.ichi2.libanki.Sched: void emptyDyn(long)>($l0);

     label13:
        if $z1 == 0 goto label36;

     label14:
        $r9 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        $r10 = virtualinvoke $r9.<java.util.TreeMap: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label15:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label16:
        if $z1 == 0 goto label36;

     label17:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label18:
        $r7 = (java.lang.Long) $r12;

     label19:
        $l3 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.ichi2.libanki.Decks: void rem(long,boolean)>($l3, $z0);

     label20:
        goto label15;

     label21:
        r1 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r13;

     label22:
        if $z1 == 0 goto label30;

     label23:
        $r9 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        $r10 = virtualinvoke $r9.<java.util.TreeMap: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label24:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label25:
        if $z1 == 0 goto label30;

     label26:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label27:
        $r7 = (java.lang.Long) $r12;

     label28:
        $l3 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.ichi2.libanki.Decks: void rem(long,boolean)>($l3, $z0);

     label29:
        goto label24;

     label30:
        if $z0 == 0 goto label36;

        $r4 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label31:
        $r14 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label32:
        $r15 = new java.lang.StringBuilder;

     label33:
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE did = ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OR odid = ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r3, 0);

     label34:
        $r4 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label35:
        $r5 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r16);

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void remCards(long[])>($r5);

     label36:
        $r6 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r7);

        $r17 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r17.<java.util.LinkedList: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label37;

        $r6 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

        $r18 = virtualinvoke $r6.<java.util.HashMap: java.util.Set keySet()>();

        $r11 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Long) $r12;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.ichi2.libanki.Decks: void select(long)>($l0);

     label37:
        virtualinvoke r0.<com.ichi2.libanki.Decks: void save()>();

     label38:
        return;

        catch org.json.JSONException from label01 to label02 with label21;
        catch org.json.JSONException from label03 to label04 with label21;
        catch org.json.JSONException from label06 to label07 with label21;
        catch org.json.JSONException from label08 to label09 with label21;
        catch org.json.JSONException from label10 to label11 with label21;
        catch org.json.JSONException from label12 to label13 with label21;
        catch org.json.JSONException from label14 to label16 with label21;
        catch org.json.JSONException from label17 to label18 with label21;
        catch org.json.JSONException from label19 to label20 with label21;
        catch org.json.JSONException from label23 to label25 with label21;
        catch org.json.JSONException from label26 to label27 with label21;
        catch org.json.JSONException from label28 to label29 with label21;
        catch org.json.JSONException from label31 to label32 with label21;
        catch org.json.JSONException from label33 to label34 with label21;
        catch org.json.JSONException from label35 to label36 with label21;
    }
    public void remConf(long) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        boolean $z0;
        byte $b1;
        java.lang.AssertionError $r2;
        com.ichi2.libanki.Collection $r3;
        java.util.HashMap $r4;
        java.lang.Long $r5;
        java.util.ArrayList $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.json.JSONObject r9;
        java.lang.String $r10, $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $z0 = <com.ichi2.libanki.Decks: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        $r3 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

        $r4 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

     label02:
        $r6 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label04:
        if $z0 == 0 goto label14;

     label05:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label06:
        r9 = (org.json.JSONObject) $r8;

     label07:
        $z0 = virtualinvoke r9.<org.json.JSONObject: boolean has(java.lang.String)>("conf");

     label08:
        if $z0 == 0 goto label03;

     label09:
        $r10 = virtualinvoke r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("conf");

        $r11 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

     label10:
        if $z0 == 0 goto label03;

     label11:
        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("conf", 1);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>(r9);

     label12:
        goto label03;

     label13:
        r1 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r12;

     label14:
        return;

        catch org.json.JSONException from label02 to label04 with label13;
        catch org.json.JSONException from label05 to label06 with label13;
        catch org.json.JSONException from label07 to label08 with label13;
        catch org.json.JSONException from label09 to label10 with label13;
        catch org.json.JSONException from label11 to label12 with label13;
    }
    public void rename(org.json.JSONObject, java.lang.String) throws com.ichi2.anki.exception.DeckRenameException
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1, $r9;
        org.json.JSONException r2;
        java.lang.String $r3, $r8, $r13, $r15, $r16;
        java.util.ArrayList $r4;
        boolean $z0;
        com.ichi2.anki.exception.DeckRenameException $r5;
        java.lang.String[] $r6;
        java.util.List $r7;
        int $i0;
        java.lang.RuntimeException $r10;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        java.lang.StringBuilder $r14;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 := @parameter1: java.lang.String;

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList allNames()>();

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label01;

        $r5 = new com.ichi2.anki.exception.DeckRenameException;

        specialinvoke $r5.<com.ichi2.anki.exception.DeckRenameException: void <init>(int)>(0);

        throw $r5;

     label01:
        $r3 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.String _ensureParents(java.lang.String)>($r3);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("::");

     label02:
        if $z0 == 0 goto label10;

     label03:
        $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

     label04:
        $i0 = $i0 + -1;

     label05:
        $r7 = interfaceinvoke $r7.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        $r8 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("::", $r7);

        $r9 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject byName(java.lang.String)>($r8);

        $i0 = virtualinvoke $r9.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label06:
        if $i0 == 0 goto label10;

        $r5 = new com.ichi2.anki.exception.DeckRenameException;

     label07:
        specialinvoke $r5.<com.ichi2.anki.exception.DeckRenameException: void <init>(int)>(1);

     label08:
        throw $r5;

     label09:
        r2 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label10:
        $r8 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r11 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label12:
        if $z0 == 0 goto label25;

     label13:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label14:
        $r9 = (org.json.JSONObject) $r12;

     label15:
        $r13 = virtualinvoke $r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label16:
        $r14 = new java.lang.StringBuilder;

     label17:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>($r15);

     label18:
        if $z0 == 0 goto label11;

     label19:
        $r13 = virtualinvoke $r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label20:
        $r14 = new java.lang.StringBuilder;

     label21:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r15);

     label22:
        $r14 = new java.lang.StringBuilder;

     label23:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>($r15, $r16);

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r13);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r9);

     label24:
        goto label11;

     label25:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r3);

        virtualinvoke r0.<com.ichi2.libanki.Decks: java.lang.String _ensureParents(java.lang.String)>($r3);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r1);

        specialinvoke r0.<com.ichi2.libanki.Decks: void maybeAddToActive()>();

     label26:
        return;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
        catch org.json.JSONException from label10 to label12 with label09;
        catch org.json.JSONException from label13 to label14 with label09;
        catch org.json.JSONException from label15 to label16 with label09;
        catch org.json.JSONException from label17 to label18 with label09;
        catch org.json.JSONException from label19 to label20 with label09;
        catch org.json.JSONException from label21 to label22 with label09;
        catch org.json.JSONException from label23 to label24 with label09;
        catch org.json.JSONException from label25 to label26 with label09;
    }
    public void renameForDragAndDrop(java.lang.Long, java.lang.Long) throws com.ichi2.anki.exception.DeckRenameException
    {
        com.ichi2.libanki.Decks r0;
        java.lang.Long $r1, $r2;
        org.json.JSONException r3;
        long $l0;
        org.json.JSONObject $r4, $r6;
        java.lang.String $r5, $r7;
        java.util.List $r8;
        int $i1;
        boolean $z0;
        java.lang.StringBuilder $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: java.lang.Long;

        $r2 := @parameter1: java.lang.Long;

     label01:
        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r5 = virtualinvoke $r4.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r6 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r7 = virtualinvoke $r6.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label02:
        if $r2 != null goto label07;

     label03:
        $r8 = specialinvoke r0.<com.ichi2.libanki.Decks: java.util.List _path(java.lang.String)>($r5);

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

     label04:
        if $i1 <= 1 goto label14;

     label05:
        $r5 = specialinvoke r0.<com.ichi2.libanki.Decks: java.lang.String _basename(java.lang.String)>($r5);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void rename(org.json.JSONObject,java.lang.String)>($r4, $r5);

     label06:
        return;

     label07:
        $z0 = specialinvoke r0.<com.ichi2.libanki.Decks: boolean _canDragAndDrop(java.lang.String,java.lang.String)>($r5, $r7);

     label08:
        if $z0 == 0 goto label14;

     label09:
        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r5 = virtualinvoke $r4.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r6 = virtualinvoke r0.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r7 = virtualinvoke $r6.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label10:
        $r9 = new java.lang.StringBuilder;

     label11:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r5 = specialinvoke r0.<com.ichi2.libanki.Decks: java.lang.String _basename(java.lang.String)>($r5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.ichi2.libanki.Decks: void rename(org.json.JSONObject,java.lang.String)>($r4, $r5);

     label12:
        return;

     label13:
        r3 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r10;

     label14:
        return;

        catch org.json.JSONException from label01 to label02 with label13;
        catch org.json.JSONException from label03 to label04 with label13;
        catch org.json.JSONException from label05 to label06 with label13;
        catch org.json.JSONException from label07 to label08 with label13;
        catch org.json.JSONException from label09 to label10 with label13;
        catch org.json.JSONException from label11 to label12 with label13;
    }
    public void restoreToDefault(org.json.JSONObject)
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1, r2;
        org.json.JSONException r3;
        int $i0;
        long $l1;
        java.lang.String $r4;
        java.util.HashMap $r5;
        java.lang.Long $r6;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.Sched $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: org.json.JSONObject;

     label01:
        r2 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i0 = virtualinvoke r2.<org.json.JSONObject: int getInt(java.lang.String)>("order");

     label02:
        r2 = new org.json.JSONObject;

     label03:
        specialinvoke r2.<org.json.JSONObject: void <init>(java.lang.String)>("{\'name\': \"Default\",\'new\': {\'delays\': [1, 10],\'ints\': [1, 4, 7],\'initialFactor\': 2500,\'separate\': True,\'order\': 1,\'perDay\': 20,\'bury\': True},\'lapse\': {\'delays\': [10],\'mult\': 0,\'minInt\': 1,\'leechFails\': 8,\'leechAction\': 0},\'rev\': {\'perDay\': 100,\'ease4\': 1.3,\'fuzz\': 0.05,\'minSpace\': 1,\'ivlFct\': 1,\'maxIvl\': 36500,\'bury\': True},\'maxTaken\': 60,\'timer\': 0,\'autoplay\': True,\'replayq\': True,\'mod\': 0,\'usn\': 0}");

        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("id", $l1);

        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r4);

     label04:
        $r5 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

     label05:
        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>(r2);

     label06:
        if $i0 != 0 goto label10;

        $r7 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label07:
        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r8.<com.ichi2.libanki.Sched: void resortConf(org.json.JSONObject)>(r2);

     label08:
        return;

     label09:
        r3 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r9;

     label10:
        return;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
    }
    public void save()
    {
        com.ichi2.libanki.Decks r0;

        r0 := @this: com.ichi2.libanki.Decks;

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>(null);

        return;
    }
    public void save(org.json.JSONObject)
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        long $l0;
        com.ichi2.libanki.Collection $r3;
        int $i1;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: org.json.JSONObject;

        if $r1 == null goto label4;

     label1:
        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("mod", $l0);

     label2:
        $r3 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label3:
        $i1 = virtualinvoke $r3.<com.ichi2.libanki.Collection: int usn()>();

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i1);

     label4:
        r0.<com.ichi2.libanki.Decks: boolean mChanged> = 1;

        return;

     label5:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }
    public void select(long)
    {
        com.ichi2.libanki.Decks r0;
        long $l0;
        org.json.JSONException r1;
        org.json.JSONArray r2;
        java.util.HashMap $r3;
        java.lang.Long $r4;
        java.lang.Object $r5;
        org.json.JSONObject $r6;
        java.lang.String $r7, $r9;
        com.ichi2.libanki.Collection $r8;
        java.util.TreeMap $r10;
        java.util.Collection $r11;
        java.util.Iterator $r12;
        boolean $z0;
        java.lang.RuntimeException $r13;

        r0 := @this: com.ichi2.libanki.Decks;

        $l0 := @parameter0: long;

        $r3 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label01:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

     label02:
        $r6 = (org.json.JSONObject) $r5;

     label03:
        $r7 = virtualinvoke $r6.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label04:
        $r8 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label05:
        $r6 = virtualinvoke $r8.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("curDeck", $r9);

        $r10 = virtualinvoke r0.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r10.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r4);

     label06:
        r2 = new org.json.JSONArray;

     label07:
        specialinvoke r2.<org.json.JSONArray: void <init>()>();

        $r11 = virtualinvoke $r10.<java.util.TreeMap: java.util.Collection values()>();

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

     label09:
        if $z0 == 0 goto label15;

     label10:
        $r5 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

     label11:
        $r4 = (java.lang.Long) $r5;

     label12:
        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r4);

     label13:
        goto label08;

     label14:
        r1 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r13;

     label15:
        $r8 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label16:
        $r6 = virtualinvoke $r8.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("activeDecks", r2);

     label17:
        r0.<com.ichi2.libanki.Decks: boolean mChanged> = 1;

        return;

        catch org.json.JSONException from label01 to label02 with label14;
        catch org.json.JSONException from label03 to label04 with label14;
        catch org.json.JSONException from label05 to label06 with label14;
        catch org.json.JSONException from label07 to label09 with label14;
        catch org.json.JSONException from label10 to label11 with label14;
        catch org.json.JSONException from label12 to label13 with label14;
        catch org.json.JSONException from label16 to label17 with label14;
    }
    public long selected()
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONException r1;
        com.ichi2.libanki.Collection $r2;
        org.json.JSONObject $r3;
        long $l0;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Decks;

        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

     label1:
        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $l0 = virtualinvoke $r3.<org.json.JSONObject: long getLong(java.lang.String)>("curDeck");

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public void setConf(org.json.JSONObject, long)
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1;
        long $l0;
        org.json.JSONException r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: org.json.JSONObject;

        $l0 := @parameter1: long;

     label1:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("conf", $l0);

     label2:
        virtualinvoke r0.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r1);

        return;

     label3:
        r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public void setDeck(long[], long)
    {
        com.ichi2.libanki.Decks r0;
        long[] $r1;
        long $l0;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Object[] $r6;
        java.lang.Long $r7;
        int $i1;
        java.lang.Integer $r8;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: long[];

        $l0 := @parameter1: long;

        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set did=?,usn=?,mod=? where id in ");

        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.Object)[3];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6[0] = $r7;

        $r2 = r0.<com.ichi2.libanki.Decks: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int usn()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[1] = $r8;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6[2] = $r7;

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>($r5, $r6);

        return;
    }
    public void update(org.json.JSONObject)
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        java.util.HashMap $r3;
        long $l0;
        java.lang.Long $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDecks>;

     label1:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

     label2:
        specialinvoke r0.<com.ichi2.libanki.Decks: void maybeAddToActive()>();

        virtualinvoke r0.<com.ichi2.libanki.Decks: void save()>();

        return;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public void updateConf(org.json.JSONObject)
    {
        com.ichi2.libanki.Decks r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        java.util.HashMap $r3;
        long $l0;
        java.lang.Long $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Decks;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.Decks: java.util.HashMap mDconf>;

     label1:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

     label2:
        virtualinvoke r0.<com.ichi2.libanki.Decks: void save()>();

        return;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }
