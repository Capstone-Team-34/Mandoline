com.ichi2.libanki.Sched extends java.lang.Object
private static final int[] FACTOR_ADDITION_VALUES
private boolean mBurySiblingsOnAnswer
private com.ichi2.libanki.Collection mCol
private java.lang.ref.WeakReference mContextReference
public long mDayCutoff
private double[] mEtaCache
private boolean mHaveCustomStudy
private boolean mHaveQueues
private int mLrnCount
private final java.util.LinkedList mLrnDayQueue
private java.util.LinkedList mLrnDids
private final java.util.LinkedList mLrnQueue
private java.lang.String mName
private int mNewCardModulus
private int mNewCount
private java.util.LinkedList mNewDids
private final java.util.LinkedList mNewQueue
private int mQueueLimit
private int mReportLimit
private int mReps
private int mRevCount
private java.util.LinkedList mRevDids
private final java.util.LinkedList mRevQueue
private boolean mSpreadRev
private int mToday
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[3];

        $r0[0] = -150;

        $r0[1] = 0;

        $r0[2] = 150;

        <com.ichi2.libanki.Sched: int[] FACTOR_ADDITION_VALUES> = $r0;

        return;
    }
    public void <init>(com.ichi2.libanki.Collection)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        double[] $r2;
        java.util.LinkedList $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ichi2.libanki.Sched: java.lang.String mName> = "std";

        r0.<com.ichi2.libanki.Sched: boolean mHaveCustomStudy> = 1;

        r0.<com.ichi2.libanki.Sched: boolean mSpreadRev> = 1;

        r0.<com.ichi2.libanki.Sched: boolean mBurySiblingsOnAnswer> = 1;

        $r2 = newarray (double)[4];

        $r2[0] = -1.0;

        $r2[1] = -1.0;

        $r2[2] = -1.0;

        $r2[3] = -1.0;

        r0.<com.ichi2.libanki.Sched: double[] mEtaCache> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue> = $r3;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue> = $r3;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue> = $r3;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue> = $r3;

        r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol> = $r1;

        r0.<com.ichi2.libanki.Sched: int mQueueLimit> = 50;

        r0.<com.ichi2.libanki.Sched: int mReportLimit> = 1000;

        r0.<com.ichi2.libanki.Sched: int mReps> = 0;

        r0.<com.ichi2.libanki.Sched: boolean mHaveQueues> = 0;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _updateCutoff()>();

        return;
    }
    private int _adjRevIvl(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        boolean $z0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $z0 = r0.<com.ichi2.libanki.Sched: boolean mSpreadRev>;

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _fuzzedIvl(int)>($i0);

     label1:
        return $i0;
    }
    private void _answerLrnCard(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, i2, $i5, $i6;
        long l1, l3;
        org.json.JSONObject $r2;
        byte $b4, $b7;
        boolean $z0, $z1, $z2;
        org.json.JSONArray $r3;
        double $d0, $d1;
        float $f0, $f1;
        java.util.LinkedList $r4;
        java.lang.Object $r5;
        long[] $r6;
        org.json.JSONException r7, r9;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)>($r1);

        l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b4 = l1 cmp 0L;

        if $b4 == 0 goto label03;

        $z0 = virtualinvoke $r1.<com.ichi2.libanki.Card: boolean getWasNew()>();

        if $z0 != 0 goto label03;

        $b4 = 3;

     label01:
        $z0 = 0;

        $i5 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        if $i0 != 3 goto label05;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _rescheduleAsRev(com.ichi2.libanki.Card,org.json.JSONObject,boolean)>($r1, $r2, 1);

        $z0 = 1;

     label02:
        specialinvoke r0.<com.ichi2.libanki.Sched: void _logLrn(com.ichi2.libanki.Card,int,org.json.JSONObject,boolean,int,int)>($r1, $i0, $r2, $z0, $b4, $i5);

        return;

     label03:
        $i5 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i5 != 2 goto label04;

        $b4 = 2;

        goto label01;

     label04:
        $b4 = 0;

        goto label01;

     label05:
        if $i0 != 2 goto label06;

        i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        i2 = i2 % 1000;

        i2 = i2 + -1;

        if i2 > 0 goto label06;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _rescheduleAsRev(com.ichi2.libanki.Card,org.json.JSONObject,boolean)>($r1, $r2, 0);

        $z0 = 1;

        goto label02;

     label06:
        if $i0 != 2 goto label14;

        i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        i2 = i2 % 1000;

        i2 = i2 + -1;

     label07:
        $r3 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i6 = specialinvoke r0.<com.ichi2.libanki.Sched: int _leftToday(org.json.JSONArray,int)>($r3, i2);

     label08:
        $i6 = $i6 * 1000;

        i2 = $i6 + i2;

     label09:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLeft(int)>(i2);

     label10:
        i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        i2 = specialinvoke r0.<com.ichi2.libanki.Sched: int _delayForGrade(org.json.JSONObject,int)>($r2, i2);

        $i6 = i2;

        l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        $d0 = (double) l1;

        $d1 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        $b7 = $d0 cmpg $d1;

        if $b7 >= 0 goto label11;

        $f0 = (float) i2;

        $f1 = staticinvoke <com.ichi2.libanki.Utils: float randomFloatInRange(float,float)>(1.0F, 1.25F);

        $f0 = $f0 * $f1;

        $i6 = (int) $f0;

     label11:
        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        $d1 = (double) $i6;

        $d0 = $d0 + $d1;

        i2 = (int) $d0;

        l1 = (long) i2;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>(l1);

        l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        l3 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        $b7 = l1 cmp l3;

        if $b7 >= 0 goto label22;

        i2 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        $i6 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        $i6 = $i6 / 1000;

        i2 = i2 + $i6;

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = i2;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>(1);

        $r4 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $z1 = virtualinvoke $r4.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label12;

        i2 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        if i2 != 0 goto label12;

        i2 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        if i2 != 0 goto label12;

        $r4 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r6 = (long[]) $r5;

        l3 = $r6[0];

        l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        l3 = 1L + l3;

        l1 = staticinvoke <java.lang.Math: long max(long,long)>(l1, l3);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>(l1);

     label12:
        l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        l3 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getId()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void _sortIntoLrn(long,long)>(l1, l3);

        goto label02;

     label13:
        r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r7);

        throw $r8;

     label14:
        i2 = specialinvoke r0.<com.ichi2.libanki.Sched: int _startingLeft(com.ichi2.libanki.Card)>($r1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLeft(int)>(i2);

        $z1 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

        $z2 = virtualinvoke $r2.<org.json.JSONObject: boolean has(java.lang.String)>("mult");

        if $z2 == 0 goto label20;

        if $z1 == 0 goto label20;

     label15:
        i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label16:
        $d0 = (double) i2;

     label17:
        $d1 = virtualinvoke $r2.<org.json.JSONObject: double getDouble(java.lang.String)>("mult");

     label18:
        $d0 = $d0 * $d1;

        i2 = (int) $d0;

     label19:
        i2 = staticinvoke <java.lang.Math: int max(int,int)>(1, i2);

        $i6 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("minInt");

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i6);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setIvl(int)>(i2);

     label20:
        if $z1 == 0 goto label10;

        l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b7 = l1 cmp 0L;

        if $b7 == 0 goto label10;

        i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        i2 = i2 + 1;

        l1 = (long) i2;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>(l1);

        goto label10;

     label21:
        r9 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r9);

        throw $r8;

     label22:
        l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        l3 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        l1 = l1 - l3;

        l1 = l1 / 86400L;

        l1 = l1 + 1L;

        i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        l3 = (long) i2;

        l1 = l3 + l1;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>(l1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>(3);

        goto label02;

        catch org.json.JSONException from label07 to label08 with label13;
        catch org.json.JSONException from label09 to label10 with label13;
        catch org.json.JSONException from label15 to label16 with label21;
        catch org.json.JSONException from label17 to label18 with label21;
        catch org.json.JSONException from label19 to label20 with label21;
    }
    private void _answerRevCard(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $i1 = 0;

        if $i0 != 1 goto label2;

        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _rescheduleLapse(com.ichi2.libanki.Card)>($r1);

     label1:
        specialinvoke r0.<com.ichi2.libanki.Sched: void _logRev(com.ichi2.libanki.Card,int,int)>($r1, $i0, $i1);

        return;

     label2:
        specialinvoke r0.<com.ichi2.libanki.Sched: void _rescheduleRev(com.ichi2.libanki.Card,int)>($r1, $i0);

        goto label1;
    }
    private void _burySiblings(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        java.util.LinkedList r2, $r14;
        org.json.JSONObject $r3;
        boolean $z0, $z1, $z2;
        android.database.Cursor r4, $r13;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.DB $r6;
        io.requery.android.database.sqlite.SQLiteDatabase $r7;
        java.util.Locale $r8;
        java.lang.Object[] $r9;
        long $l0;
        java.lang.Long $r10;
        int $i1;
        java.lang.Integer $r11;
        java.lang.String $r12;
        java.lang.Throwable $r15;
        java.lang.StringBuilder $r16;
        double $d0;
        java.lang.Double $r17;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        r2 = new java.util.LinkedList;

        specialinvoke r2.<java.util.LinkedList: void <init>()>();

        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _newConf(com.ichi2.libanki.Card)>($r1);

        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("bury", 1);

        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _revConf(com.ichi2.libanki.Card)>($r1);

        $z1 = virtualinvoke $r3.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("bury", 1);

        r4 = null;

     label01:
        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r8 = <java.util.Locale: java.util.Locale US>;

        $r9 = newarray (java.lang.Object)[3];

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getNid()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r9[0] = $r10;

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getId()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r9[1] = $r10;

        $i1 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9[2] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r8, "select id, queue from cards where nid=%d and id!=%d and (queue=0 or (queue=2 and due<=%d))", $r9);

        $r13 = virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r12, null);

     label02:
        r4 = $r13;

     label03:
        $z2 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToNext()>();

     label04:
        if $z2 == 0 goto label16;

     label05:
        $l0 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(0);

        $i1 = interfaceinvoke $r13.<android.database.Cursor: int getInt(int)>(1);

     label06:
        if $i1 != 2 goto label12;

        if $z1 == 0 goto label08;

     label07:
        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

     label08:
        $r14 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r14.<java.util.LinkedList: boolean remove(java.lang.Object)>($r10);

     label09:
        goto label03;

     label10:
        $r15 := @caughtexception;

        if r4 == null goto label11;

        $z0 = interfaceinvoke r4.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label11;

        interfaceinvoke r4.<android.database.Cursor: void close()>();

     label11:
        throw $r15;

     label12:
        if $z0 == 0 goto label14;

     label13:
        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r10);

     label14:
        $r14 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r14.<java.util.LinkedList: boolean remove(java.lang.Object)>($r10);

     label15:
        goto label03;

     label16:
        if $r13 == null goto label17;

        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label17;

        interfaceinvoke $r13.<android.database.Cursor: void close()>();

     label17:
        $i1 = virtualinvoke r2.<java.util.LinkedList: int size()>();

        if $i1 <= 0 goto label18;

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set queue=-2,mod=?,usn=? where id in ");

        $r12 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r2);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[2];

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r9[0] = $r17;

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r5.<com.ichi2.libanki.Collection: int usn()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9[1] = $r11;

        virtualinvoke $r6.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>($r12, $r9);

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r2;

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r9);

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label13 to label15 with label10;
    }
    private boolean _checkLeech(com.ichi2.libanki.Card, org.json.JSONObject)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONObject $r2;
        org.json.JSONException r3;
        int $i0, $i1;
        com.ichi2.libanki.Note $r4;
        long $l2;
        byte $b3;
        java.lang.ref.WeakReference $r5;
        java.lang.Object $r6;
        android.content.Context r7;
        com.ichi2.libanki.hooks.Hooks $r8;
        java.lang.Object[] $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: org.json.JSONObject;

     label01:
        $i0 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("leechFails");

     label02:
        if $i0 != 0 goto label03;

        return 0;

     label03:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLapses()>();

     label04:
        if $i1 < $i0 goto label26;

     label05:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLapses()>();

     label06:
        $i1 = $i1 - $i0;

        $i0 = $i0 / 2;

     label07:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 1);

     label08:
        $i0 = $i1 % $i0;

        if $i0 != 0 goto label26;

     label09:
        $r4 = virtualinvoke $r1.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        virtualinvoke $r4.<com.ichi2.libanki.Note: void addTag(java.lang.String)>("leech");

        virtualinvoke $r4.<com.ichi2.libanki.Note: void flush()>();

        $i0 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("leechAction");

     label10:
        if $i0 != 0 goto label18;

     label11:
        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

     label12:
        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label14;

     label13:
        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>($l2);

     label14:
        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

     label15:
        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label17;

     label16:
        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDid(long)>($l2);

     label17:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>(0L);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODid(long)>(0L);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>(-1);

     label18:
        $r5 = r0.<com.ichi2.libanki.Sched: java.lang.ref.WeakReference mContextReference>;

        if $r5 == null goto label24;

        $r5 = r0.<com.ichi2.libanki.Sched: java.lang.ref.WeakReference mContextReference>;

     label19:
        $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

     label20:
        r7 = (android.content.Context) $r6;

     label21:
        $r8 = staticinvoke <com.ichi2.libanki.hooks.Hooks: com.ichi2.libanki.hooks.Hooks getInstance(android.content.Context)>(r7);

     label22:
        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r1;

        $r9[1] = r7;

     label23:
        virtualinvoke $r8.<com.ichi2.libanki.hooks.Hooks: void runHook(java.lang.String,java.lang.Object[])>("leech", $r9);

     label24:
        return 1;

     label25:
        r3 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r10;

     label26:
        return 0;

        catch org.json.JSONException from label01 to label02 with label25;
        catch org.json.JSONException from label03 to label04 with label25;
        catch org.json.JSONException from label05 to label06 with label25;
        catch org.json.JSONException from label07 to label08 with label25;
        catch org.json.JSONException from label09 to label10 with label25;
        catch org.json.JSONException from label11 to label12 with label25;
        catch org.json.JSONException from label13 to label15 with label25;
        catch org.json.JSONException from label16 to label18 with label25;
        catch org.json.JSONException from label19 to label20 with label25;
        catch org.json.JSONException from label21 to label22 with label25;
        catch org.json.JSONException from label23 to label24 with label25;
    }
    private int _cntFnNew(long, int)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        int $i1;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM (SELECT 1 FROM cards WHERE did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 0 LIMIT ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        return $i1;
    }
    private int _cntFnRev(long, int)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        int $i1, $i2;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM (SELECT id FROM cards WHERE did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 2 and due <= ");

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        return $i1;
    }
    private int _constrainedIvl(int, org.json.JSONObject, double)
    {
        com.ichi2.libanki.Sched r0;
        int $i0;
        org.json.JSONObject $r1;
        double $d0, $d1, $d2;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.json.JSONObject;

        $d0 := @parameter2: double;

        $d1 = (double) $i0;

        $d2 = virtualinvoke $r1.<org.json.JSONObject: double optDouble(java.lang.String,double)>("ivlFct", 1.0);

        $d1 = $d1 * $d2;

        $d0 = $d0 + 1.0;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d0);

        $i0 = (int) $d0;

        return $i0;
    }
    private long _daysLate(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        long $l0, $l3;
        byte $b1;
        int $i2;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

     label1:
        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $l3 = (long) $i2;

        $l0 = $l3 - $l0;

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l0);

        return $l0;

     label2:
        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        goto label1;
    }
    private int _deckNewLimit(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        int $i1;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _deckNewLimit(long,java.lang.reflect.Method)>($l0, null);

        return $i1;
    }
    private int _deckNewLimit(long, java.lang.reflect.Method)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        java.lang.reflect.Method $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        java.util.List $r6;
        org.json.JSONObject $r7;
        int i1, $i2;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.Object[] $r10;
        java.lang.Integer $r11;
        java.lang.Exception r12;
        java.lang.RuntimeException $r13;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.reflect.Method;

        if $r1 != null goto label02;

        $r2 = class "Lcom/ichi2/libanki/Sched;";

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Lorg/json/JSONObject;";

     label01:
        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("_deckNewLimitSingle", $r3);

     label02:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label03:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.List parents(long)>($l0);

     label04:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label05:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r7 = virtualinvoke $r5.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

     label06:
        i1 = -1;

     label07:
        $r8 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label09:
        if $z0 == 0 goto label23;

     label10:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

     label11:
        $r7 = (org.json.JSONObject) $r9;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r7;

     label12:
        $r9 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r10);

     label13:
        $r11 = (java.lang.Integer) $r9;

     label14:
        $i2 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

     label15:
        if i1 != -1 goto label16;

        i1 = $i2;

        goto label08;

     label16:
        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i1);

     label17:
        goto label08;

     label18:
        r12 := @caughtexception;

     label19:
        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r12);

        throw $r13;

     label20:
        r12 := @caughtexception;

        goto label19;

     label21:
        r12 := @caughtexception;

        goto label19;

     label22:
        r12 := @caughtexception;

        goto label19;

     label23:
        return i1;

        catch java.lang.IllegalArgumentException from label01 to label02 with label20;
        catch java.lang.IllegalArgumentException from label03 to label04 with label20;
        catch java.lang.IllegalArgumentException from label05 to label06 with label20;
        catch java.lang.IllegalArgumentException from label07 to label09 with label20;
        catch java.lang.IllegalArgumentException from label10 to label11 with label20;
        catch java.lang.IllegalArgumentException from label12 to label13 with label20;
        catch java.lang.IllegalArgumentException from label14 to label15 with label20;
        catch java.lang.IllegalArgumentException from label16 to label17 with label20;
        catch java.lang.NoSuchMethodException from label01 to label02 with label21;
        catch java.lang.NoSuchMethodException from label03 to label04 with label21;
        catch java.lang.NoSuchMethodException from label05 to label06 with label21;
        catch java.lang.NoSuchMethodException from label07 to label09 with label21;
        catch java.lang.NoSuchMethodException from label10 to label11 with label21;
        catch java.lang.NoSuchMethodException from label12 to label13 with label21;
        catch java.lang.NoSuchMethodException from label14 to label15 with label21;
        catch java.lang.NoSuchMethodException from label16 to label17 with label21;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label22;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label22;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label22;
        catch java.lang.reflect.InvocationTargetException from label07 to label09 with label22;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label22;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label22;
        catch java.lang.reflect.InvocationTargetException from label14 to label15 with label22;
        catch java.lang.reflect.InvocationTargetException from label16 to label17 with label22;
        catch java.lang.IllegalAccessException from label01 to label02 with label18;
        catch java.lang.IllegalAccessException from label03 to label04 with label18;
        catch java.lang.IllegalAccessException from label05 to label06 with label18;
        catch java.lang.IllegalAccessException from label07 to label09 with label18;
        catch java.lang.IllegalAccessException from label10 to label11 with label18;
        catch java.lang.IllegalAccessException from label12 to label13 with label18;
        catch java.lang.IllegalAccessException from label14 to label15 with label18;
        catch java.lang.IllegalAccessException from label16 to label17 with label18;
    }
    private int _deckRevLimit(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        java.lang.NoSuchMethodException r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;
        int $i1;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $r2 = class "Lcom/ichi2/libanki/Sched;";

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Lorg/json/JSONObject;";

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("_deckRevLimitSingle", $r3);

        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _deckNewLimit(long,java.lang.reflect.Method)>($l0, $r4);

     label2:
        return $i1;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }
    private int _deckRevLimitSingle(org.json.JSONObject)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONObject $r1, $r5;
        org.json.JSONException r2;
        int $i0, $i2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        long $l1;
        org.json.JSONArray $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONObject;

     label1:
        $i0 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label2:
        if $i0 == 0 goto label3;

        $i0 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        return $i0;

     label3:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label4:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l1);

        $r5 = virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

        $i0 = virtualinvoke $r5.<org.json.JSONObject: int getInt(java.lang.String)>("perDay");

        $r6 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("revToday");

        $i2 = virtualinvoke $r6.<org.json.JSONArray: int getInt(int)>(1);

     label5:
        $i0 = $i0 - $i2;

     label6:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

     label7:
        return $i0;

     label8:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    private int _delayForGrade(org.json.JSONObject, int)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONObject $r1;
        int $i0, $i1;
        org.json.JSONArray $r2;
        double $d0;
        org.json.JSONException r3, r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONObject;

        $i0 := @parameter1: int;

        $i0 = $i0 % 1000;

     label01:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i1 = virtualinvoke $r2.<org.json.JSONArray: int length()>();

     label02:
        $i0 = $i1 - $i0;

     label03:
        $d0 = virtualinvoke $r2.<org.json.JSONArray: double getDouble(int)>($i0);

     label04:
        $d0 = 60.0 * $d0;

        $i0 = (int) $d0;

        return $i0;

     label05:
        r3 := @caughtexception;

     label06:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i0 = virtualinvoke $r2.<org.json.JSONArray: int length()>();

     label07:
        if $i0 <= 0 goto label10;

     label08:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $d0 = virtualinvoke $r2.<org.json.JSONArray: double getDouble(int)>(0);

     label09:
        goto label04;

     label10:
        $d0 = 1.0;

        goto label04;

     label11:
        r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r5;

        catch org.json.JSONException from label01 to label02 with label11;
        catch org.json.JSONException from label03 to label04 with label05;
        catch org.json.JSONException from label06 to label07 with label11;
        catch org.json.JSONException from label08 to label09 with label11;
    }
    private int _dynIvlBoost(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        long l0, $l1, $l4;
        double d0, $d1;
        byte $b2;
        int $i3, $i5;
        java.lang.Object[] $r3;
        org.json.JSONObject $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label1;

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i3 != 2 goto label1;

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getFactor()>();

        if $i3 != 0 goto label2;

     label1:
        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("error: deck is not a filtered deck", $r3);

        return 0;

     label2:
        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        l0 = (long) $i3;

        $l4 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

        $i3 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $l1 = (long) $i3;

        $l1 = $l4 - $l1;

        l0 = l0 - $l1;

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getFactor()>();

        d0 = (double) $i3;

        d0 = d0 / 1000.0;

        d0 = d0 + 1.2;

        d0 = d0 / 2.0;

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        $d1 = (double) l0;

        d0 = $d1 * d0;

        $i5 = (int) d0;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i5);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i3);

        $r4 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _revConf(com.ichi2.libanki.Card)>($r1);

     label3:
        $i5 = virtualinvoke $r4.<org.json.JSONObject: int getInt(java.lang.String)>("maxIvl");

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i3);

     label4:
        return $i3;

     label5:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label3 to label4 with label5;
    }
    private java.lang.String _dynOrder(int, int)
    {
        com.ichi2.libanki.Sched r0;
        int $i0, $i1;
        java.lang.String r1;
        java.lang.StringBuilder $r2;
        java.util.Locale $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        lookupswitch($i0)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label10;
            case 7: goto label09;
            case 8: goto label11;
            default: goto label01;
        };

     label01:
        r1 = "c.due";

     label02:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" limit ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;

     label03:
        r1 = "c.mod";

        goto label02;

     label04:
        r1 = "random()";

        goto label02;

     label05:
        r1 = "ivl";

        goto label02;

     label06:
        r1 = "ivl desc";

        goto label02;

     label07:
        r1 = "lapses desc";

        goto label02;

     label08:
        r1 = "n.id";

        goto label02;

     label09:
        r1 = "n.id desc";

        goto label02;

     label10:
        r1 = "c.due";

        goto label02;

     label11:
        $r3 = <java.util.Locale: java.util.Locale US>;

        $r4 = newarray (java.lang.Object)[2];

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "(case when queue=2 and due <= %d then (ivl / cast(%d-due+0.001 as real)) else 100000+due end)", $r4);

        goto label02;
    }
    private java.util.List _fillDyn(org.json.JSONObject)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        org.json.JSONArray $r3;
        java.lang.String $r4, r5, $r6, $r7;
        int $i0, $i1;
        boolean $z0;
        java.util.Locale $r8;
        java.lang.Object[] $r9;
        com.ichi2.libanki.Collection $r10;
        java.util.List $r11;
        long $l2;
        java.lang.Long $r12;
        java.lang.RuntimeException $r13;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONObject;

     label01:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("terms");

        $r3 = virtualinvoke $r3.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(0);

        $r4 = virtualinvoke $r3.<org.json.JSONArray: java.lang.String getString(int)>(0);

     label02:
        r5 = $r4;

     label03:
        $i0 = virtualinvoke $r3.<org.json.JSONArray: int getInt(int)>(1);

        $i1 = virtualinvoke $r3.<org.json.JSONArray: int getInt(int)>(2);

        $r6 = specialinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _dynOrder(int,int)>($i1, $i0);

        $r7 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7);

     label04:
        if $z0 != 0 goto label07;

        $r8 = <java.util.Locale: java.util.Locale US>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r4;

     label05:
        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r8, "(%s)", $r9);

     label06:
        r5 = $r4;

     label07:
        $r8 = <java.util.Locale: java.util.Locale US>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r5;

     label08:
        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r8, "%s -is:suspended -is:buried -deck:filtered", $r9);

     label09:
        $r10 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label10:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: java.util.List findCards(java.lang.String,java.lang.String)>($r4, $r6);

        $z0 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

     label11:
        if $z0 == 0 goto label12;

        return $r11;

     label12:
        $r10 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r9 = newarray (java.lang.Object)[2];

     label13:
        $l2 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

     label14:
        $r9[0] = $r12;

        $r9[1] = $r11;

     label15:
        virtualinvoke $r10.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r9);

        $l2 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        specialinvoke r0.<com.ichi2.libanki.Sched: void _moveToDyn(long,java.util.List)>($l2, $r11);

     label16:
        return $r11;

     label17:
        r2 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r13;

        catch org.json.JSONException from label01 to label02 with label17;
        catch org.json.JSONException from label03 to label04 with label17;
        catch org.json.JSONException from label05 to label06 with label17;
        catch org.json.JSONException from label08 to label09 with label17;
        catch org.json.JSONException from label10 to label11 with label17;
        catch org.json.JSONException from label13 to label14 with label17;
        catch org.json.JSONException from label15 to label16 with label17;
    }
    private boolean _fillLrn()
    {
        com.ichi2.libanki.Sched r0;
        boolean $z0, $z1;
        int $i0;
        java.util.LinkedList $r1;
        android.database.Cursor r2, $r8;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.DB $r4;
        io.requery.android.database.sqlite.SQLiteDatabase $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        long $l1;
        long[] $r9;
        java.lang.Throwable $r10;
        com.ichi2.libanki.Sched$1 $r11;

        r0 := @this: com.ichi2.libanki.Sched;

        $z0 = 1;

        $i0 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        if $i0 != 0 goto label01;

        return 0;

     label01:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $z1 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label14;

        r2 = null;

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

     label02:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT due, id FROM cards WHERE did IN ");

        $r7 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _deckLimit()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 1 AND due < ");

        $l1 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

        $i0 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r7, null);

     label03:
        r2 = $r8;

     label04:
        $z1 = interfaceinvoke $r8.<android.database.Cursor: boolean moveToNext()>();

     label05:
        if $z1 == 0 goto label10;

     label06:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $r9 = newarray (long)[2];

        $l1 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>(0);

        $r9[0] = $l1;

        $l1 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>(1);

        $r9[1] = $l1;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r9);

     label07:
        goto label04;

     label08:
        $r10 := @caughtexception;

        if r2 == null goto label09;

        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label09;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label09:
        throw $r10;

     label10:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $r11 = new com.ichi2.libanki.Sched$1;

        specialinvoke $r11.<com.ichi2.libanki.Sched$1: void <init>(com.ichi2.libanki.Sched)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r11);

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $z1 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

     label11:
        if $z1 != 0 goto label13;

     label12:
        if $r8 == null goto label15;

        $z1 = interfaceinvoke $r8.<android.database.Cursor: boolean isClosed()>();

        if $z1 != 0 goto label15;

        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        return $z0;

     label13:
        $z0 = 0;

        goto label12;

     label14:
        return 1;

     label15:
        return $z0;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
    }
    private boolean _fillLrnDay()
    {
        com.ichi2.libanki.Sched r0;
        java.util.Random r1;
        int $i0, $i2;
        java.util.LinkedList $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l1;
        android.database.Cursor r5, $r11;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.DB $r7;
        io.requery.android.database.sqlite.SQLiteDatabase $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.lang.Throwable $r12;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        if $i0 != 0 goto label01;

        return 0;

     label01:
        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label03;

        return 1;

     label02:
        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDids>;

        virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>();

     label03:
        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDids>;

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label15;

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDids>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        virtualinvoke $r2.<java.util.LinkedList: void clear()>();

        r5 = null;

     label04:
        $r6 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE did = ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 3 AND due <= ");

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

        $i0 = r0.<com.ichi2.libanki.Sched: int mQueueLimit>;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r8.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r10, null);

     label05:
        r5 = $r11;

     label06:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToNext()>();

     label07:
        if $z0 == 0 goto label12;

     label08:
        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        $l1 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(0);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r4);

     label09:
        goto label06;

     label10:
        $r12 := @caughtexception;

        if r5 == null goto label11;

        $z0 = interfaceinvoke r5.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label11;

        interfaceinvoke r5.<android.database.Cursor: void close()>();

     label11:
        throw $r12;

     label12:
        if $r11 == null goto label13;

        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label13;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

     label13:
        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label02;

        r1 = new java.util.Random;

        specialinvoke r1.<java.util.Random: void <init>()>();

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $l1 = (long) $i0;

        virtualinvoke r1.<java.util.Random: void setSeed(long)>($l1);

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>($r2, r1);

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        $i2 = r0.<com.ichi2.libanki.Sched: int mQueueLimit>;

        if $i0 >= $i2 goto label14;

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDids>;

        virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>();

     label14:
        return 1;

     label15:
        return 0;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
    private boolean _fillNew()
    {
        com.ichi2.libanki.Sched r0;
        java.util.LinkedList $r1;
        int $i0, $i2;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.Long $r3;
        long $l1;
        android.database.Cursor r4, $r10;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.DB $r6;
        io.requery.android.database.sqlite.SQLiteDatabase $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        java.lang.Throwable $r11;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label01;

        return 1;

     label01:
        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        if $i0 != 0 goto label03;

        return 0;

     label02:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewDids>;

        virtualinvoke $r1.<java.util.LinkedList: java.lang.Object remove()>();

     label03:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewDids>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label14;

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewDids>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r3 = (java.lang.Long) $r2;

        $l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $i0 = r0.<com.ichi2.libanki.Sched: int mQueueLimit>;

        $i2 = specialinvoke r0.<com.ichi2.libanki.Sched: int _deckNewLimit(long)>($l1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        r4 = null;

        if $i0 == 0 goto label02;

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue>;

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

     label04:
        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE did = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 0 order by due LIMIT ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r7.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r9, null);

     label05:
        r4 = $r10;

     label06:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToNext()>();

     label07:
        if $z0 == 0 goto label12;

     label08:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue>;

        $l1 = interfaceinvoke $r10.<android.database.Cursor: long getLong(int)>(0);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

     label09:
        goto label06;

     label10:
        $r11 := @caughtexception;

        if r4 == null goto label11;

        $z0 = interfaceinvoke r4.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label11;

        interfaceinvoke r4.<android.database.Cursor: void close()>();

     label11:
        throw $r11;

     label12:
        if $r10 == null goto label13;

        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label13;

        interfaceinvoke $r10.<android.database.Cursor: void close()>();

     label13:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label02;

        return 1;

     label14:
        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        if $i0 == 0 goto label15;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetNew()>();

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _fillNew()>();

        return $z0;

     label15:
        return 0;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
    private boolean _fillRev()
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONException r1;
        java.util.Random r2;
        java.util.LinkedList $r3;
        boolean $z0;
        int $i0, $i2;
        java.lang.Object $r4;
        java.lang.Long $r5;
        long $l1, $l3;
        android.database.Cursor r6, $r12;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.DB $r8;
        io.requery.android.database.sqlite.SQLiteDatabase $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        java.lang.Throwable $r13;
        com.ichi2.libanki.Decks $r14;
        org.json.JSONObject $r15;
        java.lang.RuntimeException $r16;

        r0 := @this: com.ichi2.libanki.Sched;

        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        $z0 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        return 1;

     label01:
        $i0 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        if $i0 != 0 goto label03;

        return 0;

     label02:
        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevDids>;

        virtualinvoke $r3.<java.util.LinkedList: java.lang.Object remove()>();

     label03:
        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevDids>;

        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label26;

        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevDids>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r5 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $i0 = r0.<com.ichi2.libanki.Sched: int mQueueLimit>;

        $i2 = specialinvoke r0.<com.ichi2.libanki.Sched: int _deckRevLimit(long)>($l1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        r6 = null;

        if $i0 == 0 goto label02;

        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        virtualinvoke $r3.<java.util.LinkedList: void clear()>();

     label04:
        $r7 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE did = ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 2 AND due <= ");

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r11, null);

     label05:
        r6 = $r12;

     label06:
        $z0 = interfaceinvoke $r12.<android.database.Cursor: boolean moveToNext()>();

     label07:
        if $z0 == 0 goto label12;

     label08:
        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        $l3 = interfaceinvoke $r12.<android.database.Cursor: long getLong(int)>(0);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

     label09:
        goto label06;

     label10:
        $r13 := @caughtexception;

        if r6 == null goto label11;

        $z0 = interfaceinvoke r6.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label11;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label11:
        throw $r13;

     label12:
        if $r12 == null goto label13;

        $z0 = interfaceinvoke $r12.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label13;

        interfaceinvoke $r12.<android.database.Cursor: void close()>();

     label13:
        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        $z0 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label02;

        $r7 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label14:
        $r14 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r15 = virtualinvoke $r14.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l1);

        $i2 = virtualinvoke $r15.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label15:
        if $i2 == 0 goto label18;

     label16:
        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        $i2 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i2 >= $i0 goto label17;

        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevDids>;

        virtualinvoke $r3.<java.util.LinkedList: java.lang.Object remove()>();

     label17:
        return 1;

     label18:
        r2 = new java.util.Random;

     label19:
        specialinvoke r2.<java.util.Random: void <init>()>();

     label20:
        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $l1 = (long) $i2;

     label21:
        virtualinvoke r2.<java.util.Random: void setSeed(long)>($l1);

     label22:
        $r3 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

     label23:
        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>($r3, r2);

     label24:
        goto label16;

     label25:
        r1 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r16;

     label26:
        $i0 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        if $i0 == 0 goto label27;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetRev()>();

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _fillRev()>();

        return $z0;

     label27:
        return 0;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch org.json.JSONException from label14 to label15 with label25;
        catch org.json.JSONException from label19 to label20 with label25;
        catch org.json.JSONException from label21 to label22 with label25;
        catch org.json.JSONException from label23 to label24 with label25;
    }
    private int _fuzzedIvl(int)
    {
        com.ichi2.libanki.Sched r0;
        int $i0, $i1;
        int[] $r1;
        java.util.Random $r2;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Sched: int[] _fuzzedIvlRange(int)>($i0);

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        $i1 = $r1[1];

        $i0 = $r1[0];

        $i0 = $i1 - $i0;

        $i0 = $i0 + 1;

        $i0 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>($i0);

        $i1 = $r1[0];

        $i0 = $i0 + $i1;

        return $i0;
    }
    private com.ichi2.libanki.Card _getCard()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getLrnCard()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _timeForNewCard()>();

        if $z0 == 0 goto label2;

        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getNewCard()>();

        if $r1 == null goto label2;

        return $r1;

     label2:
        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getRevCard()>();

        if $r1 == null goto label3;

        return $r1;

     label3:
        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getLrnDayCard()>();

        if $r1 == null goto label4;

        return $r1;

     label4:
        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getNewCard()>();

        if $r1 == null goto label5;

        return $r1;

     label5:
        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getLrnCard(boolean)>(1);

        return $r1;
    }
    private com.ichi2.libanki.Card _getLrnCard()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getLrnCard(boolean)>(0);

        return $r1;
    }
    private com.ichi2.libanki.Card _getLrnCard(boolean)
    {
        com.ichi2.libanki.Sched r0;
        boolean $z0, $z1;
        org.json.JSONException r1;
        long l0;
        double $d0, d1;
        com.ichi2.libanki.Collection $r2;
        org.json.JSONObject $r3;
        int $i1, $i3;
        java.util.LinkedList $r4;
        java.lang.Object $r5;
        long[] $r6;
        byte $b2;
        com.ichi2.libanki.Card $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Sched;

        $z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _fillLrn()>();

        if $z1 == 0 goto label5;

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        d1 = $d0;

        if $z0 == 0 goto label3;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label1:
        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $i1 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("collapseTime");

     label2:
        d1 = (double) $i1;

        d1 = $d0 + d1;

     label3:
        $r4 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r6 = (long[]) $r5;

        l0 = $r6[0];

        $d0 = (double) l0;

        $b2 = $d0 cmpg d1;

        if $b2 >= 0 goto label5;

        $r4 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object remove()>();

        $r6 = (long[]) $r5;

        l0 = $r6[1];

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r7 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card getCard(long)>(l0);

        $i1 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        $i3 = virtualinvoke $r7.<com.ichi2.libanki.Card: int getLeft()>();

        $i3 = $i3 / 1000;

        $i1 = $i1 - $i3;

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = $i1;

        return $r7;

     label4:
        r1 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

     label5:
        return null;

        catch org.json.JSONException from label1 to label2 with label4;
    }
    private com.ichi2.libanki.Card _getLrnDayCard()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        boolean $z0;
        int $i0;
        java.util.LinkedList $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l1;
        com.ichi2.libanki.Card $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _fillLrnDay()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        $i0 = $i0 + -1;

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = $i0;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>();

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r5 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card getCard(long)>($l1);

        return $r5;

     label1:
        return null;
    }
    private com.ichi2.libanki.Card _getNewCard()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        boolean $z0;
        int $i0;
        java.util.LinkedList $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l1;
        com.ichi2.libanki.Card $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _fillNew()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        $i0 = $i0 + -1;

        r0.<com.ichi2.libanki.Sched: int mNewCount> = $i0;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>();

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r5 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card getCard(long)>($l1);

        return $r5;

     label1:
        return null;
    }
    private com.ichi2.libanki.Card _getRevCard()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        boolean $z0;
        int $i0;
        java.util.LinkedList $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l1;
        com.ichi2.libanki.Card $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _fillRev()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        $i0 = $i0 + -1;

        r0.<com.ichi2.libanki.Sched: int mRevCount> = $i0;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>();

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r5 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Card getCard(long)>($l1);

        return $r5;

     label1:
        return null;
    }
    private int _graduatingIvl(com.ichi2.libanki.Card, org.json.JSONObject, boolean)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONObject $r2;
        boolean $z0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: org.json.JSONObject;

        $z0 := @parameter2: boolean;

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,boolean,boolean)>($r1, $r2, $z0, 1);

        return $i0;
    }
    private int _graduatingIvl(com.ichi2.libanki.Card, org.json.JSONObject, boolean, boolean)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONObject $r2;
        boolean $z0, $z1;
        int $i0;
        long $l1;
        byte $b2;
        org.json.JSONException r3, r6;
        java.lang.RuntimeException $r4;
        org.json.JSONArray $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: org.json.JSONObject;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i0 != 2 goto label07;

        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label06;

     label01:
        $z0 = virtualinvoke $r2.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("resched");

     label02:
        if $z0 == 0 goto label06;

     label03:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _dynIvlBoost(com.ichi2.libanki.Card)>($r1);

     label04:
        return $i0;

     label05:
        r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

     label06:
        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        return $i0;

     label07:
        $r5 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("ints");

     label08:
        if $z0 != 0 goto label13;

     label09:
        $i0 = virtualinvoke $r5.<org.json.JSONArray: int getInt(int)>(0);

     label10:
        if $z1 == 0 goto label16;

     label11:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _adjRevIvl(com.ichi2.libanki.Card,int)>($r1, $i0);

     label12:
        return $i0;

     label13:
        $i0 = virtualinvoke $r5.<org.json.JSONArray: int getInt(int)>(1);

     label14:
        goto label10;

     label15:
        r6 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r6);

        throw $r4;

     label16:
        return $i0;

        catch org.json.JSONException from label01 to label02 with label05;
        catch org.json.JSONException from label03 to label04 with label05;
        catch org.json.JSONException from label07 to label08 with label15;
        catch org.json.JSONException from label09 to label10 with label15;
        catch org.json.JSONException from label11 to label12 with label15;
        catch org.json.JSONException from label13 to label14 with label15;
    }
    private java.util.List _groupChildren(java.util.List)
    {
        com.ichi2.libanki.Sched r0;
        java.util.List r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        com.ichi2.libanki.Sched$DeckDueTreeNode r4;
        java.lang.String[] $r5;
        java.lang.String $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        r1 := @parameter0: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r3;

        $r5 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r6 = $r5[0];

        $r5 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

        r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names> = $r5;

        goto label1;

     label2:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r1);

        r1 = specialinvoke r0.<com.ichi2.libanki.Sched: java.util.List _groupChildrenMain(java.util.List)>(r1);

        return r1;
    }
    private java.util.List _groupChildrenMain(java.util.List)
    {
        com.ichi2.libanki.Sched r0;
        java.util.List r1;
        java.lang.String r2, $r10;
        org.json.JSONException r3;
        java.util.ArrayList r4, r5, r12;
        java.util.ListIterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        com.ichi2.libanki.Sched$DeckDueTreeNode r8;
        java.lang.String[] $r9, $r14, $r15;
        java.lang.Long r11;
        int i0, i1, i2, $i3, $i5;
        java.util.Iterator $r13;
        long $l4;
        com.ichi2.libanki.Collection $r16;
        com.ichi2.libanki.Decks $r17;
        org.json.JSONObject $r18, $r19, $r20;
        org.json.JSONArray $r21;
        java.lang.RuntimeException $r22;

        r0 := @this: com.ichi2.libanki.Sched;

        r1 := @parameter0: java.util.List;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r7 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r7;

        $r9 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        r2 = $r9[0];

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r8);

     label02:
        $z0 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r7 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r7;

        $r9 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r10 = $r9[0];

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label03;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label02;

     label03:
        interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object previous()>();

     label04:
        r11 = null;

        i0 = 0;

        i1 = 0;

        i2 = 0;

        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>()>();

        $r13 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r7 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r7;

        $r9 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $i3 = lengthof $r9;

        if $i3 != 1 goto label06;

        $l4 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $i3 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        i0 = i0 + $i3;

        $i3 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        i2 = i2 + $i3;

        $i3 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        i1 = i1 + $i3;

        goto label05;

     label06:
        $r9 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $i3 = lengthof $r9;

        $i3 = $i3 + -1;

        $r9 = newarray (java.lang.String)[$i3];

        $r14 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r15 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $i3 = lengthof $r15;

        $i3 = $i3 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 1, $r9, 0, $i3);

        r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names> = $r9;

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label05;

     label07:
        r1 = specialinvoke r0.<com.ichi2.libanki.Sched: java.util.List _groupChildrenMain(java.util.List)>(r12);

        $r13 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r7;

        $i3 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        i0 = i0 + $i3;

        $i3 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        i2 = i2 + $i3;

        $i3 = r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        i1 = i1 + $i3;

        goto label08;

     label09:
        $r16 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l4 = virtualinvoke r11.<java.lang.Long: long longValue()>();

        $r18 = virtualinvoke $r17.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l4);

        $r16 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l4 = virtualinvoke r11.<java.lang.Long: long longValue()>();

        $r19 = virtualinvoke $r17.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l4);

     label10:
        $i3 = virtualinvoke $r18.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label11:
        if $i3 != 0 goto label18;

     label12:
        $r20 = virtualinvoke $r18.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

        $i3 = virtualinvoke $r20.<org.json.JSONObject: int getInt(java.lang.String)>("perDay");

        $r21 = virtualinvoke $r19.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("revToday");

        $i5 = virtualinvoke $r21.<org.json.JSONArray: int getInt(int)>(1);

     label13:
        $i3 = $i3 - $i5;

     label14:
        i0 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i3);

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);

     label15:
        $r18 = virtualinvoke $r18.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i3 = virtualinvoke $r18.<org.json.JSONObject: int getInt(java.lang.String)>("perDay");

        $r21 = virtualinvoke $r19.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("newToday");

        $i5 = virtualinvoke $r21.<org.json.JSONArray: int getInt(int)>(1);

     label16:
        $i3 = $i3 - $i5;

     label17:
        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i3);

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i1);

     label18:
        r8 = new com.ichi2.libanki.Sched$DeckDueTreeNode;

        $l4 = virtualinvoke r11.<java.lang.Long: long longValue()>();

        specialinvoke r8.<com.ichi2.libanki.Sched$DeckDueTreeNode: void <init>(com.ichi2.libanki.Sched,java.lang.String,long,int,int,int,java.util.List)>(r0, r2, $l4, i0, i2, i1, r1);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label01;

     label19:
        r3 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r22;

     label20:
        return r5;

        catch org.json.JSONException from label10 to label11 with label19;
        catch org.json.JSONException from label12 to label13 with label19;
        catch org.json.JSONException from label14 to label15 with label19;
        catch org.json.JSONException from label15 to label16 with label19;
        catch org.json.JSONException from label17 to label18 with label19;
    }
    private org.json.JSONObject _lapseConf(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        org.json.JSONObject $r3, $r6, $r9, $r10;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        org.json.JSONArray $r7, r8;
        int $i2;
        double $d0;
        boolean $z0;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

     label01:
        $r3 = virtualinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _cardConf(com.ichi2.libanki.Card)>($r1);

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

     label02:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label05;

     label03:
        $r3 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

     label04:
        return $r3;

     label05:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label06:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

        $r7 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>("delays");

     label07:
        r8 = $r7;

        if $r7 != null goto label10;

     label08:
        $r9 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        $r7 = virtualinvoke $r9.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

     label09:
        r8 = $r7;

     label10:
        $r9 = new org.json.JSONObject;

     label11:
        specialinvoke $r9.<org.json.JSONObject: void <init>()>();

        $r10 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        $i2 = virtualinvoke $r10.<org.json.JSONObject: int getInt(java.lang.String)>("minInt");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("minInt", $i2);

        $r10 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        $i2 = virtualinvoke $r10.<org.json.JSONObject: int getInt(java.lang.String)>("leechFails");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("leechFails", $i2);

        $r10 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        $i2 = virtualinvoke $r10.<org.json.JSONObject: int getInt(java.lang.String)>("leechAction");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("leechAction", $i2);

        $r6 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        $d0 = virtualinvoke $r6.<org.json.JSONObject: double getDouble(java.lang.String)>("mult");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>("mult", $d0);

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("delays", r8);

        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("resched");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("resched", $z0);

     label12:
        return $r9;

     label13:
        r2 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

        catch org.json.JSONException from label01 to label02 with label13;
        catch org.json.JSONException from label03 to label04 with label13;
        catch org.json.JSONException from label06 to label07 with label13;
        catch org.json.JSONException from label08 to label09 with label13;
        catch org.json.JSONException from label11 to label12 with label13;
    }
    private int _leftToday(org.json.JSONArray, int)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONArray $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONArray;

        $i0 := @parameter1: int;

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _leftToday(org.json.JSONArray,int,long)>($r1, $i0, 0L);

        return $i0;
    }
    private int _leftToday(org.json.JSONArray, int, long)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONArray $r1;
        int $i0, i3, $i4, $i5;
        org.json.JSONException r2;
        long $l1, $l6;
        byte $b2;
        double $d0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONArray;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $l1 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

     label1:
        i3 = 0;

        $i4 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i4);

        $i4 = 0;

     label2:
        if $i4 >= $i0 goto label7;

     label3:
        $i5 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

     label4:
        $i5 = $i5 - $i0;

        $i5 = $i5 + $i4;

     label5:
        $d0 = virtualinvoke $r1.<org.json.JSONArray: double getDouble(int)>($i5);

     label6:
        $d0 = $d0 * 60.0;

        $i5 = (int) $d0;

        $l6 = (long) $i5;

        $l1 = $l1 + $l6;

        $l6 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        $b2 = $l1 cmp $l6;

        if $b2 <= 0 goto label9;

     label7:
        $i0 = i3 + 1;

        return $i0;

     label8:
        r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r3;

     label9:
        i3 = $i4;

        $i4 = $i4 + 1;

        goto label2;

        catch org.json.JSONException from label3 to label4 with label8;
        catch org.json.JSONException from label5 to label6 with label8;
    }
    private void _logLrn(com.ichi2.libanki.Card, int, org.json.JSONObject, boolean, int, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7;
        org.json.JSONObject $r2;
        boolean $z0;
        long $l4;
        com.ichi2.libanki.Collection $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.json.JSONObject;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i2 = specialinvoke r0.<com.ichi2.libanki.Sched: int _delayForGrade(org.json.JSONObject,int)>($r2, $i2);

        $i2 = neg $i2;

        if $z0 == 0 goto label2;

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label1:
        $l4 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getId()>();

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i5 = virtualinvoke $r3.<com.ichi2.libanki.Collection: int usn()>();

        $i6 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getFactor()>();

        $i7 = virtualinvoke $r1.<com.ichi2.libanki.Card: int timeTaken()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void log(long,int,int,int,int,int,int,int)>($l4, $i5, $i0, $i3, $i2, $i6, $i7, $i1);

        return;

     label2:
        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        $i3 = specialinvoke r0.<com.ichi2.libanki.Sched: int _delayForGrade(org.json.JSONObject,int)>($r2, $i3);

        $i3 = neg $i3;

        goto label1;
    }
    private void _logRev(com.ichi2.libanki.Card, int, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1, $i3, $i4, $i5, $i6;
        com.ichi2.libanki.Collection $r2;
        long $l2;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getId()>();

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int usn()>();

        if $i1 == 0 goto label2;

        $i1 = neg $i1;

     label1:
        $i4 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLastIvl()>();

        $i5 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getFactor()>();

        $i6 = virtualinvoke $r1.<com.ichi2.libanki.Card: int timeTaken()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void log(long,int,int,int,int,int,int,int)>($l2, $i3, $i0, $i1, $i4, $i5, $i6, 1);

        return;

     label2:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        goto label1;
    }
    private org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0;
        org.json.JSONObject $r2;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i0 != 2 goto label1;

        $r2 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lapseConf(com.ichi2.libanki.Card)>($r1);

        return $r2;

     label1:
        $r2 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _newConf(com.ichi2.libanki.Card)>($r1);

        return $r2;
    }
    private int _lrnForDeck(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0, $l1, $l3;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        org.json.JSONObject $r4;
        int $i2, $i4;
        java.lang.String $r5;
        java.lang.Exception r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label01:
        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label02:
        $r3 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT sum(left / 1000) FROM (SELECT left FROM cards WHERE did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 1 AND due < ");

        $l1 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

     label04:
        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label05:
        $r4 = virtualinvoke $r1.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $i2 = virtualinvoke $r4.<org.json.JSONObject: int getInt(java.lang.String)>("collapseTime");

     label06:
        $l3 = (long) $i2;

        $l1 = $l1 + $l3;

     label07:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

     label08:
        $i2 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

     label09:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r5);

     label10:
        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label11:
        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label12:
        $r3 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM (SELECT 1 FROM cards WHERE did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 3 AND due <= ");

     label14:
        $i4 = r0.<com.ichi2.libanki.Sched: int mToday>;

     label15:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

     label16:
        $i4 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

     label17:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r5);

     label18:
        $i2 = $i4 + $i2;

        return $i2;

     label19:
        r6 := @caughtexception;

     label20:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r6);

        throw $r7;

     label21:
        r6 := @caughtexception;

        goto label20;

        catch android.database.SQLException from label01 to label02 with label19;
        catch android.database.SQLException from label03 to label04 with label19;
        catch android.database.SQLException from label05 to label06 with label19;
        catch android.database.SQLException from label07 to label08 with label19;
        catch android.database.SQLException from label09 to label10 with label19;
        catch android.database.SQLException from label11 to label12 with label19;
        catch android.database.SQLException from label13 to label14 with label19;
        catch android.database.SQLException from label15 to label16 with label19;
        catch android.database.SQLException from label17 to label18 with label19;
        catch org.json.JSONException from label01 to label02 with label21;
        catch org.json.JSONException from label03 to label04 with label21;
        catch org.json.JSONException from label05 to label06 with label21;
        catch org.json.JSONException from label07 to label08 with label21;
        catch org.json.JSONException from label09 to label10 with label21;
        catch org.json.JSONException from label11 to label12 with label21;
        catch org.json.JSONException from label13 to label14 with label21;
        catch org.json.JSONException from label15 to label16 with label21;
        catch org.json.JSONException from label17 to label18 with label21;
    }
    private void _moveToDyn(long, java.util.List)
    {
        com.ichi2.libanki.Sched r0;
        long $l0, l2, $l4;
        java.util.List r1;
        java.util.ArrayList r2;
        com.ichi2.libanki.Collection $r3;
        int $i1, $i3;
        byte $b5;
        java.lang.Object[] $r4;
        java.lang.Long $r5;
        java.lang.Integer $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        com.ichi2.libanki.DB $r10;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        r1 := @parameter1: java.util.List;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r3.<com.ichi2.libanki.Collection: int usn()>();

        l2 = 0L;

     label1:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $l4 = (long) $i3;

        $b5 = l2 cmp $l4;

        if $b5 >= 0 goto label2;

        $r4 = newarray (java.lang.Object)[4];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4[0] = $r5;

        $l4 = -100000L + l2;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r4[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[2] = $r6;

        $i3 = (int) l2;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        $r4[3] = $r7;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        l2 = l2 + 1L;

        goto label1;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(CASE WHEN type = 2 AND (CASE WHEN odue THEN odue <= ");

        $i1 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ELSE due <= ");

        $i1 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" END) THEN 2 ELSE 0 END)");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r10 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE cards SET odid = (CASE WHEN odid THEN odid ELSE did END), odue = (CASE WHEN odue THEN odue ELSE due END), did = ?, queue = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", due = ?, usn = ? WHERE id = ?");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>($r9, r2);

        return;
    }
    private org.json.JSONObject _newConf(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        org.json.JSONObject $r3, $r6, $r9, $r10;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        org.json.JSONArray $r7, r8;
        int $i2;
        boolean $z0;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

     label01:
        $r3 = virtualinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _cardConf(com.ichi2.libanki.Card)>($r1);

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

     label02:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label05;

     label03:
        $r3 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

     label04:
        return $r3;

     label05:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label06:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

        $r7 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>("delays");

     label07:
        r8 = $r7;

        if $r7 != null goto label09;

     label08:
        $r9 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        r8 = virtualinvoke $r9.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

     label09:
        $r9 = new org.json.JSONObject;

     label10:
        specialinvoke $r9.<org.json.JSONObject: void <init>()>();

        $r10 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $r7 = virtualinvoke $r10.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("ints");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("ints", $r7);

        $r10 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i2 = virtualinvoke $r10.<org.json.JSONObject: int getInt(java.lang.String)>("initialFactor");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("initialFactor", $i2);

        $r6 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $z0 = virtualinvoke $r6.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("bury", 1);

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("bury", $z0);

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("delays", r8);

        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("separate");

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("separate", $z0);

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("order", 1);

     label11:
        $i2 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

     label12:
        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("perDay", $i2);

     label13:
        return $r9;

     label14:
        r2 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

        catch org.json.JSONException from label01 to label02 with label14;
        catch org.json.JSONException from label03 to label04 with label14;
        catch org.json.JSONException from label06 to label07 with label14;
        catch org.json.JSONException from label08 to label09 with label14;
        catch org.json.JSONException from label10 to label11 with label14;
        catch org.json.JSONException from label12 to label13 with label14;
    }
    private int _nextLapseIvl(com.ichi2.libanki.Card, org.json.JSONObject)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONObject $r2;
        org.json.JSONException r3;
        int $i0, $i1;
        double $d0, $d1;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: org.json.JSONObject;

     label1:
        $i0 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("minInt");

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label2:
        $d0 = (double) $i1;

     label3:
        $d1 = virtualinvoke $r2.<org.json.JSONObject: double getDouble(java.lang.String)>("mult");

     label4:
        $d0 = $d0 * $d1;

        $i1 = (int) $d0;

     label5:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label6:
        return $i0;

     label7:
        r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }
    private int _nextLrnIvl(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        org.json.JSONArray $r4;
        boolean $z0;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i1 != 0 goto label01;

        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _startingLeft(com.ichi2.libanki.Card)>($r1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLeft(int)>($i1);

     label01:
        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)>($r1);

        if $i0 != 1 goto label04;

     label02:
        $r4 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i0 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _delayForGrade(org.json.JSONObject,int)>($r3, $i0);

     label03:
        return $i0;

     label04:
        if $i0 != 3 goto label09;

     label05:
        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

     label06:
        if $z0 == 0 goto label18;

     label07:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,boolean,boolean)>($r1, $r3, 1, 0);

     label08:
        $i0 = $i0 * 86400;

        return $i0;

     label09:
        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

     label10:
        $i0 = $i0 % 1000;

        $i0 = $i0 + -1;

        if $i0 > 0 goto label15;

     label11:
        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

     label12:
        if $z0 == 0 goto label18;

     label13:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,boolean,boolean)>($r1, $r3, 0, 0);

     label14:
        $i0 = $i0 * 86400;

        return $i0;

     label15:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _delayForGrade(org.json.JSONObject,int)>($r3, $i0);

     label16:
        return $i0;

     label17:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

     label18:
        return 0;

        catch org.json.JSONException from label02 to label03 with label17;
        catch org.json.JSONException from label05 to label06 with label17;
        catch org.json.JSONException from label07 to label08 with label17;
        catch org.json.JSONException from label09 to label10 with label17;
        catch org.json.JSONException from label11 to label12 with label17;
        catch org.json.JSONException from label13 to label14 with label17;
        catch org.json.JSONException from label15 to label16 with label17;
    }
    private int _nextRevIvl(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, i2, $i3, $i6, $i7;
        org.json.JSONException r2;
        double d0, $d1;
        long $l1, $l4, $l5;
        org.json.JSONObject $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

     label01:
        $l1 = specialinvoke r0.<com.ichi2.libanki.Sched: long _daysLate(com.ichi2.libanki.Card)>($r1);

     label02:
        i2 = 0;

     label03:
        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _revConf(com.ichi2.libanki.Card)>($r1);

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getFactor()>();

     label04:
        d0 = (double) $i3;

        d0 = d0 / 1000.0;

     label05:
        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label06:
        $l4 = (long) $i3;

        $l5 = $l1 / 4L;

        $l4 = $l4 + $l5;

        $d1 = (double) $l4;

        $d1 = $d1 * 1.2;

        $i3 = (int) $d1;

     label07:
        $i6 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label08:
        $d1 = (double) $i6;

     label09:
        $i3 = specialinvoke r0.<com.ichi2.libanki.Sched: int _constrainedIvl(int,org.json.JSONObject,double)>($i3, $r3, $d1);

        $i6 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label10:
        $l4 = (long) $i6;

        $l5 = $l1 / 2L;

        $l4 = $l4 + $l5;

        $d1 = (double) $l4;

        $d1 = $d1 * d0;

        $i6 = (int) $d1;

        $d1 = (double) $i3;

     label11:
        $i6 = specialinvoke r0.<com.ichi2.libanki.Sched: int _constrainedIvl(int,org.json.JSONObject,double)>($i6, $r3, $d1);

        $i7 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label12:
        $l4 = (long) $i7;

        $l1 = $l4 + $l1;

        $d1 = (double) $l1;

        d0 = $d1 * d0;

     label13:
        $d1 = virtualinvoke $r3.<org.json.JSONObject: double getDouble(java.lang.String)>("ease4");

     label14:
        d0 = d0 * $d1;

        $i7 = (int) d0;

        d0 = (double) $i6;

     label15:
        $i7 = specialinvoke r0.<com.ichi2.libanki.Sched: int _constrainedIvl(int,org.json.JSONObject,double)>($i7, $r3, d0);

     label16:
        if $i0 != 2 goto label19;

        i2 = $i3;

     label17:
        $i0 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("maxIvl");

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i0);

     label18:
        return $i0;

     label19:
        if $i0 != 3 goto label20;

        i2 = $i6;

        goto label17;

     label20:
        if $i0 != 4 goto label17;

        i2 = $i7;

        goto label17;

     label21:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch org.json.JSONException from label01 to label02 with label21;
        catch org.json.JSONException from label03 to label04 with label21;
        catch org.json.JSONException from label05 to label06 with label21;
        catch org.json.JSONException from label07 to label08 with label21;
        catch org.json.JSONException from label09 to label10 with label21;
        catch org.json.JSONException from label11 to label12 with label21;
        catch org.json.JSONException from label13 to label14 with label21;
        catch org.json.JSONException from label15 to label16 with label21;
        catch org.json.JSONException from label17 to label18 with label21;
    }
    private boolean _resched(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        int $i0;
        boolean $z0;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _cardConf(com.ichi2.libanki.Card)>($r1);

     label1:
        $i0 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label2:
        if $i0 != 0 goto label3;

        return 1;

     label3:
        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("resched");

     label4:
        return $z0;

     label5:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }
    private void _rescheduleAsRev(com.ichi2.libanki.Card, org.json.JSONObject, boolean)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONObject $r2;
        boolean $z0, z1;
        int $i0;
        long $l1, $l2;
        byte $b3;
        com.ichi2.libanki.Collection $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: org.json.JSONObject;

        $z0 := @parameter2: boolean;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i0 != 2 goto label4;

        z1 = 1;

     label1:
        if z1 == 0 goto label6;

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

        if $z0 == 0 goto label5;

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $i0 = $i0 + 1;

        $l1 = (long) $i0;

        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l2);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>($l1);

     label2:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>(0L);

     label3:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>(2);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setType(int)>(2);

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label7;

        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDid(long)>($l1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>(0L);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODid(long)>(0L);

        if $z0 != 0 goto label7;

        if z1 != 0 goto label7;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setType(int)>(0);

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>($i0);

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i0 = virtualinvoke $r3.<com.ichi2.libanki.Collection: int nextID(java.lang.String)>("pos");

        $l1 = (long) $i0;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>($l1);

        return;

     label4:
        z1 = 0;

        goto label1;

     label5:
        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>($l1);

        goto label2;

     label6:
        specialinvoke r0.<com.ichi2.libanki.Sched: void _rescheduleNew(com.ichi2.libanki.Card,org.json.JSONObject,boolean)>($r1, $r2, $z0);

        goto label3;

     label7:
        return;
    }
    private int _rescheduleLapse(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        long l0, $l4;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        int $i1, $i2, $i5;
        boolean $z0;
        byte $b3;
        org.json.JSONArray $r4;
        double $d0, $d1;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

     label01:
        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lapseConf(com.ichi2.libanki.Card)>($r1);

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLastIvl(int)>($i1);

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

     label02:
        if $z0 == 0 goto label14;

     label03:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLapses()>();

     label04:
        $i1 = $i1 + 1;

     label05:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLapses(int)>($i1);

        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _nextLapseIvl(com.ichi2.libanki.Card,org.json.JSONObject)>($r1, $r3);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setIvl(int)>($i1);

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getFactor()>();

     label06:
        $i1 = $i1 + -200;

     label07:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(1300, $i1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setFactor(int)>($i1);

     label08:
        $i1 = r0.<com.ichi2.libanki.Sched: int mToday>;

     label09:
        $i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

     label10:
        $i1 = $i1 + $i2;

        l0 = (long) $i1;

     label11:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>(l0);

        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

     label12:
        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label14;

     label13:
        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>(l0);

     label14:
        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _checkLeech(com.ichi2.libanki.Card,org.json.JSONObject)>($r1, $r3);

     label15:
        if $z0 == 0 goto label18;

     label16:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

     label17:
        if $i1 != -1 goto label18;

        return 0;

     label18:
        $r4 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i1 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

     label19:
        if $i1 != 0 goto label20;

        return 0;

     label20:
        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

     label21:
        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label23;

     label22:
        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>(l0);

     label23:
        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _delayForGrade(org.json.JSONObject,int)>($r3, 0);

     label24:
        $d0 = (double) $i1;

     label25:
        $d1 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

     label26:
        $d0 = $d0 + $d1;

        l0 = (long) $d0;

     label27:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>(l0);

        $i2 = specialinvoke r0.<com.ichi2.libanki.Sched: int _startingLeft(com.ichi2.libanki.Card)>($r1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLeft(int)>($i2);

        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

     label28:
        $l4 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        $b3 = l0 cmp $l4;

        if $b3 >= 0 goto label33;

        $i2 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

     label29:
        $i5 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

     label30:
        $i5 = $i5 / 1000;

        $i2 = $i2 + $i5;

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = $i2;

     label31:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>(1);

        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

        $l4 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getId()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void _sortIntoLrn(long,long)>(l0, $l4);

     label32:
        return $i1;

     label33:
        l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDue()>();

     label34:
        $l4 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        l0 = l0 - $l4;

        l0 = l0 / 86400L;

        l0 = l0 + 1L;

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $l4 = (long) $i2;

        l0 = $l4 + l0;

     label35:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>(l0);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>(3);

     label36:
        goto label32;

     label37:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label01 to label02 with label37;
        catch org.json.JSONException from label03 to label04 with label37;
        catch org.json.JSONException from label05 to label06 with label37;
        catch org.json.JSONException from label07 to label08 with label37;
        catch org.json.JSONException from label09 to label10 with label37;
        catch org.json.JSONException from label11 to label12 with label37;
        catch org.json.JSONException from label13 to label15 with label37;
        catch org.json.JSONException from label16 to label17 with label37;
        catch org.json.JSONException from label18 to label19 with label37;
        catch org.json.JSONException from label20 to label21 with label37;
        catch org.json.JSONException from label22 to label24 with label37;
        catch org.json.JSONException from label25 to label26 with label37;
        catch org.json.JSONException from label27 to label28 with label37;
        catch org.json.JSONException from label29 to label30 with label37;
        catch org.json.JSONException from label31 to label32 with label37;
        catch org.json.JSONException from label33 to label34 with label37;
        catch org.json.JSONException from label35 to label36 with label37;
    }
    private void _rescheduleNew(com.ichi2.libanki.Card, org.json.JSONObject, boolean)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONObject $r2;
        boolean $z0;
        org.json.JSONException r3;
        int $i0, $i1;
        long $l2;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: org.json.JSONObject;

        $z0 := @parameter2: boolean;

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _graduatingIvl(com.ichi2.libanki.Card,org.json.JSONObject,boolean)>($r1, $r2, $z0);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setIvl(int)>($i0);

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        $i0 = $i0 + $i1;

        $l2 = (long) $i0;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>($l2);

     label1:
        $i0 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("initialFactor");

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setFactor(int)>($i0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    private void _rescheduleRev(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1;
        boolean $z0;
        int[] $r2;
        long $l2;
        byte $b3;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLastIvl(int)>($i1);

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _updateRevIvl(com.ichi2.libanki.Card,int)>($r1, $i0);

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getFactor()>();

        $r2 = <com.ichi2.libanki.Sched: int[] FACTOR_ADDITION_VALUES>;

        $i0 = $i0 + -2;

        $i0 = $r2[$i0];

        $i0 = $i1 + $i0;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1300, $i0);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setFactor(int)>($i0);

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        $i0 = $i0 + $i1;

        $l2 = (long) $i0;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>($l2);

     label1:
        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDid(long)>($l2);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODid(long)>(0L);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>(0L);

        return;

     label2:
        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setDue(long)>($l2);

        goto label1;

     label3:
        return;
    }
    private void _resetLrn()
    {
        com.ichi2.libanki.Sched r0;
        java.util.LinkedList $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetLrnCount()>();

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDayQueue>;

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r1 = virtualinvoke $r3.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnDids> = $r1;

        return;
    }
    private void _resetLrnCount()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        long $l0;
        int $i1, $i2;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT sum(left / 1000) FROM (SELECT left FROM cards WHERE did IN ");

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _deckLimit()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 1 AND due < ");

        $l0 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

        $i1 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = $i1;

        $i1 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM cards WHERE did IN ");

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _deckLimit()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 3 AND due <= ");

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

        $i2 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        $i1 = $i1 + $i2;

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = $i1;

        return;
    }
    private void _resetNew()
    {
        com.ichi2.libanki.Sched r0;
        java.util.LinkedList $r1, $r4;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetNewCount()>();

        $r1 = new java.util.LinkedList;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r4);

        r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewDids> = $r1;

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mNewQueue>;

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void _updateNewCardRatio()>();

        return;
    }
    private void _resetNewCount()
    {
        com.ichi2.libanki.Sched r0;
        java.lang.NoSuchMethodException r1;
        java.lang.Class $r2, $r5;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4, $r6;
        int $i0;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Sched;

        $r2 = class "Lcom/ichi2/libanki/Sched;";

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Lorg/json/JSONObject;";

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("_deckNewLimitSingle", $r3);

     label2:
        $r2 = class "Lcom/ichi2/libanki/Sched;";

        $r3 = newarray (java.lang.Class)[2];

        $r5 = <java.lang.Long: java.lang.Class TYPE>;

        $r3[0] = $r5;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[1] = $r5;

     label3:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("_cntFnNew", $r3);

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r6);

     label4:
        r0.<com.ichi2.libanki.Sched: int mNewCount> = $i0;

        return;

     label5:
        r1 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }
    private void _resetRev()
    {
        com.ichi2.libanki.Sched r0;
        java.util.LinkedList $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetRevCount()>();

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevQueue>;

        virtualinvoke $r1.<java.util.LinkedList: void clear()>();

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r1 = virtualinvoke $r3.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        r0.<com.ichi2.libanki.Sched: java.util.LinkedList mRevDids> = $r1;

        return;
    }
    private void _resetRevCount()
    {
        com.ichi2.libanki.Sched r0;
        java.lang.NoSuchMethodException r1;
        java.lang.Class $r2, $r5;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4, $r6;
        int $i0;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Sched;

        $r2 = class "Lcom/ichi2/libanki/Sched;";

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Lorg/json/JSONObject;";

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("_deckRevLimitSingle", $r3);

     label2:
        $r2 = class "Lcom/ichi2/libanki/Sched;";

        $r3 = newarray (java.lang.Class)[2];

        $r5 = <java.lang.Long: java.lang.Class TYPE>;

        $r3[0] = $r5;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[1] = $r5;

     label3:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("_cntFnRev", $r3);

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _walkingCount(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r6);

     label4:
        r0.<com.ichi2.libanki.Sched: int mRevCount> = $i0;

        return;

     label5:
        r1 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }
    private org.json.JSONObject _revConf(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

     label1:
        $r3 = virtualinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _cardConf(com.ichi2.libanki.Card)>($r1);

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label5;

     label3:
        $r3 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

     label4:
        return $r3;

     label5:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label6:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $r3 = virtualinvoke $r5.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

        $r3 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

     label7:
        return $r3;

     label8:
        r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label8;
        catch org.json.JSONException from label3 to label4 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    private void _sortIntoLrn(long, long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0, $l1, $l3;
        java.util.LinkedList $r1;
        java.util.ListIterator $r2;
        int i2;
        boolean $z0;
        java.lang.Object $r3;
        long[] $r4;
        byte $b4;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.ListIterator listIterator()>();

        i2 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (long[]) $r3;

        $l3 = $r4[0];

        $b4 = $l3 cmp $l0;

        if $b4 <= 0 goto label3;

     label2:
        $r1 = r0.<com.ichi2.libanki.Sched: java.util.LinkedList mLrnQueue>;

        $r4 = newarray (long)[2];

        $r4[0] = $l0;

        $r4[1] = $l1;

        virtualinvoke $r1.<java.util.LinkedList: void add(int,java.lang.Object)>(i2, $r4);

        return;

     label3:
        i2 = i2 + 1;

        goto label1;
    }
    private int _startingLeft(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        int $i0, $i1;
        org.json.JSONObject $r3;
        org.json.JSONArray $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

     label1:
        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

     label2:
        if $i0 != 2 goto label6;

     label3:
        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lapseConf(com.ichi2.libanki.Card)>($r1);

     label4:
        $r4 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i0 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

        $r4 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _leftToday(org.json.JSONArray,int)>($r4, $i0);

     label5:
        $i1 = $i1 * 1000;

        $i0 = $i1 + $i0;

        return $i0;

     label6:
        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)>($r1);

     label7:
        goto label4;

     label8:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label8;
        catch org.json.JSONException from label3 to label4 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    private boolean _timeForNewCard()
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONException r1;
        boolean $z0;
        int $i0, $i1;
        com.ichi2.libanki.Collection $r2;
        org.json.JSONObject $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $z0 = 1;

        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label2:
        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $i0 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("newSpread");

     label3:
        if $i0 == 1 goto label8;

        if $i0 != 2 goto label5;

        return 1;

     label4:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

     label5:
        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCardModulus>;

        if $i0 == 0 goto label8;

        $i0 = r0.<com.ichi2.libanki.Sched: int mReps>;

        if $i0 == 0 goto label7;

        $i0 = r0.<com.ichi2.libanki.Sched: int mReps>;

        $i1 = r0.<com.ichi2.libanki.Sched: int mNewCardModulus>;

        $i0 = $i0 % $i1;

        if $i0 != 0 goto label7;

     label6:
        return $z0;

     label7:
        $z0 = 0;

        goto label6;

     label8:
        return 0;

        catch org.json.JSONException from label2 to label3 with label4;
    }
    private void _updateCutoff()
    {
        com.ichi2.libanki.Sched r0;
        int i0, $i2;
        double $d0, $d1;
        com.ichi2.libanki.Collection $r1;
        long $l1, $l3;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.Long $r4;
        com.ichi2.libanki.Decks $r5;
        java.util.ArrayList $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        org.json.JSONObject r9;

        r0 := @this: com.ichi2.libanki.Sched;

        i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Collection: long getCrt()>();

        $d1 = (double) $l1;

        $d0 = $d0 - $d1;

        $d0 = $d0 / 86400.0;

        $i2 = (int) $d0;

        r0.<com.ichi2.libanki.Sched: int mToday> = $i2;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Collection: long getCrt()>();

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $i2 = $i2 + 1;

        $i2 = $i2 * 86400;

        $l3 = (long) $i2;

        $l1 = $l1 + $l3;

        r0.<com.ichi2.libanki.Sched: long mDayCutoff> = $l1;

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        if i0 == $i2 goto label1;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = newarray (java.lang.Object)[2];

        i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $l1 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r4;

        virtualinvoke $r1.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r2);

     label1:
        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.json.JSONObject) $r8;

        specialinvoke r0.<com.ichi2.libanki.Sched: void update(org.json.JSONObject)>(r9);

        goto label2;

     label3:
        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        r9 = virtualinvoke $r1.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        i0 = virtualinvoke r9.<org.json.JSONObject: int optInt(java.lang.String,int)>("lastUnburied", 0);

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        if i0 >= $i2 goto label4;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void unburyCards()>();

     label4:
        return;
    }
    private void _updateNewCardRatio()
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONException r1;
        com.ichi2.libanki.Collection $r2;
        org.json.JSONObject $r3;
        int $i0, $i1;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label1:
        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $i0 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("newSpread");

     label2:
        if $i0 != 0 goto label5;

        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        if $i0 == 0 goto label5;

        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        $i1 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        $i0 = $i0 + $i1;

        $i1 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        $i0 = $i0 / $i1;

        r0.<com.ichi2.libanki.Sched: int mNewCardModulus> = $i0;

        $i0 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        if $i0 == 0 goto label7;

        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCardModulus>;

     label3:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i0);

     label4:
        r0.<com.ichi2.libanki.Sched: int mNewCardModulus> = $i0;

        return;

     label5:
        r0.<com.ichi2.libanki.Sched: int mNewCardModulus> = 0;

        return;

     label6:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

     label7:
        return;

        catch org.json.JSONException from label1 to label2 with label6;
        catch org.json.JSONException from label3 to label4 with label6;
    }
    private void _updateRevIvl(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _nextRevIvl(com.ichi2.libanki.Card,int)>($r1, $i0);

        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _adjRevIvl(com.ichi2.libanki.Card,int)>($r1, $i0);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setIvl(int)>($i0);

        return;
    }
    private void _updateStats(com.ichi2.libanki.Card, java.lang.String)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void _updateStats(com.ichi2.libanki.Card,java.lang.String,long)>($r1, $r2, 1L);

        return;
    }
    private int _walkingCount(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        com.ichi2.libanki.Sched r0;
        java.lang.reflect.Method $r1, $r2;
        java.util.HashMap r3;
        int i0, $i2, i3, $i5;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        java.util.LinkedList $r6;
        java.util.Iterator $r7, $r14;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.Long $r9, $r15;
        long $l1, $l4;
        java.lang.Object[] $r10;
        org.json.JSONObject $r11;
        java.lang.Integer $r12;
        java.util.List $r13;
        java.lang.Exception r16;
        java.lang.RuntimeException $r17;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        i0 = 0;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label01:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label54;

     label04:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label05:
        $r9 = (java.lang.Long) $r8;

     label06:
        $l1 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

     label07:
        $r10 = newarray (java.lang.Object)[1];

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label08:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r11 = virtualinvoke $r5.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l1);

     label09:
        $r10[0] = $r11;

     label10:
        $r8 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r10);

     label11:
        $r12 = (java.lang.Integer) $r8;

     label12:
        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

     label13:
        i3 = $i2;

        if $i2 == 0 goto label02;

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label14:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r13 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.List parents(long)>($l1);

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

     label16:
        if $z0 == 0 goto label30;

     label17:
        $r8 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

     label18:
        $r11 = (org.json.JSONObject) $r8;

     label19:
        $l4 = virtualinvoke $r11.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $z0 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r9);

     label20:
        if $z0 != 0 goto label26;

     label21:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

     label22:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r11;

     label23:
        $r8 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r10);

     label24:
        $r12 = (java.lang.Integer) $r8;

     label25:
        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

     label26:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r8 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

     label27:
        $r12 = (java.lang.Integer) $r8;

     label28:
        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i3);

     label29:
        goto label15;

     label30:
        $r10 = newarray (java.lang.Object)[2];

     label31:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label32:
        $r10[0] = $r9;

     label33:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

     label34:
        $r10[1] = $r12;

     label35:
        $r8 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r10);

     label36:
        $r12 = (java.lang.Integer) $r8;

     label37:
        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label38:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

     label39:
        if $z0 == 0 goto label50;

     label40:
        $r8 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

     label41:
        $r11 = (org.json.JSONObject) $r8;

     label42:
        $l4 = virtualinvoke $r11.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r8 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r15);

     label43:
        $r12 = (java.lang.Integer) $r8;

     label44:
        $i5 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

     label45:
        $i5 = $i5 - $i2;

     label46:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

     label47:
        goto label38;

     label48:
        r16 := @caughtexception;

     label49:
        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r16);

        throw $r17;

     label50:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label51:
        i3 = i3 - $i2;

     label52:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

     label53:
        i0 = i0 + $i2;

        goto label02;

     label54:
        return i0;

     label55:
        r16 := @caughtexception;

        goto label49;

     label56:
        r16 := @caughtexception;

        goto label49;

        catch org.json.JSONException from label01 to label03 with label48;
        catch org.json.JSONException from label04 to label05 with label48;
        catch org.json.JSONException from label06 to label07 with label48;
        catch org.json.JSONException from label08 to label09 with label48;
        catch org.json.JSONException from label10 to label11 with label48;
        catch org.json.JSONException from label12 to label13 with label48;
        catch org.json.JSONException from label14 to label16 with label48;
        catch org.json.JSONException from label17 to label18 with label48;
        catch org.json.JSONException from label19 to label20 with label48;
        catch org.json.JSONException from label21 to label22 with label48;
        catch org.json.JSONException from label23 to label24 with label48;
        catch org.json.JSONException from label25 to label27 with label48;
        catch org.json.JSONException from label28 to label29 with label48;
        catch org.json.JSONException from label31 to label32 with label48;
        catch org.json.JSONException from label33 to label34 with label48;
        catch org.json.JSONException from label35 to label36 with label48;
        catch org.json.JSONException from label37 to label39 with label48;
        catch org.json.JSONException from label40 to label41 with label48;
        catch org.json.JSONException from label42 to label43 with label48;
        catch org.json.JSONException from label44 to label45 with label48;
        catch org.json.JSONException from label46 to label47 with label48;
        catch java.lang.IllegalAccessException from label01 to label03 with label55;
        catch java.lang.IllegalAccessException from label04 to label05 with label55;
        catch java.lang.IllegalAccessException from label06 to label07 with label55;
        catch java.lang.IllegalAccessException from label08 to label09 with label55;
        catch java.lang.IllegalAccessException from label10 to label11 with label55;
        catch java.lang.IllegalAccessException from label12 to label13 with label55;
        catch java.lang.IllegalAccessException from label14 to label16 with label55;
        catch java.lang.IllegalAccessException from label17 to label18 with label55;
        catch java.lang.IllegalAccessException from label19 to label20 with label55;
        catch java.lang.IllegalAccessException from label21 to label22 with label55;
        catch java.lang.IllegalAccessException from label23 to label24 with label55;
        catch java.lang.IllegalAccessException from label25 to label27 with label55;
        catch java.lang.IllegalAccessException from label28 to label29 with label55;
        catch java.lang.IllegalAccessException from label31 to label32 with label55;
        catch java.lang.IllegalAccessException from label33 to label34 with label55;
        catch java.lang.IllegalAccessException from label35 to label36 with label55;
        catch java.lang.IllegalAccessException from label37 to label39 with label55;
        catch java.lang.IllegalAccessException from label40 to label41 with label55;
        catch java.lang.IllegalAccessException from label42 to label43 with label55;
        catch java.lang.IllegalAccessException from label44 to label45 with label55;
        catch java.lang.IllegalAccessException from label46 to label47 with label55;
        catch java.lang.reflect.InvocationTargetException from label01 to label03 with label56;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label56;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label56;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label56;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label56;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label56;
        catch java.lang.reflect.InvocationTargetException from label14 to label16 with label56;
        catch java.lang.reflect.InvocationTargetException from label17 to label18 with label56;
        catch java.lang.reflect.InvocationTargetException from label19 to label20 with label56;
        catch java.lang.reflect.InvocationTargetException from label21 to label22 with label56;
        catch java.lang.reflect.InvocationTargetException from label23 to label24 with label56;
        catch java.lang.reflect.InvocationTargetException from label25 to label27 with label56;
        catch java.lang.reflect.InvocationTargetException from label28 to label29 with label56;
        catch java.lang.reflect.InvocationTargetException from label31 to label32 with label56;
        catch java.lang.reflect.InvocationTargetException from label33 to label34 with label56;
        catch java.lang.reflect.InvocationTargetException from label35 to label36 with label56;
        catch java.lang.reflect.InvocationTargetException from label37 to label39 with label56;
        catch java.lang.reflect.InvocationTargetException from label40 to label41 with label56;
        catch java.lang.reflect.InvocationTargetException from label42 to label43 with label56;
        catch java.lang.reflect.InvocationTargetException from label44 to label45 with label56;
        catch java.lang.reflect.InvocationTargetException from label46 to label47 with label56;
        catch org.json.JSONException from label50 to label51 with label48;
        catch org.json.JSONException from label52 to label53 with label48;
        catch java.lang.IllegalAccessException from label50 to label51 with label55;
        catch java.lang.IllegalAccessException from label52 to label53 with label55;
        catch java.lang.reflect.InvocationTargetException from label50 to label51 with label56;
        catch java.lang.reflect.InvocationTargetException from label52 to label53 with label56;
    }
    private boolean haveBuried(java.util.List)
    {
        com.ichi2.libanki.Sched r0;
        java.util.List r1;
        java.lang.Object[] $r2;
        java.lang.String $r3;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.DB $r5;
        java.util.Locale $r6;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        r1 := @parameter0: java.util.List;

        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r1);

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "select 1 from cards where queue = -2 and did in %s limit 1", $r2);

        $i0 = virtualinvoke $r5.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r3);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void log(long, int, int, int, int, int, int, int)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.database.sqlite.SQLiteConstraintException r1;
        java.lang.InterruptedException r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.DB $r4;
        java.lang.Object[] $r5;
        double $d0;
        java.lang.Double $r6;
        java.lang.Long $r7;
        java.lang.Integer $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $i7 := @parameter7: int;

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label01:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label02:
        $r5 = newarray (java.lang.Object)[9];

     label03:
        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

     label04:
        $d0 = $d0 * 1000.0;

     label05:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label06:
        $r5[0] = $r6;

     label07:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label08:
        $r5[1] = $r7;

     label09:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label10:
        $r5[2] = $r8;

     label11:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

     label12:
        $r5[3] = $r8;

     label13:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

     label14:
        $r5[4] = $r8;

     label15:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

     label16:
        $r5[5] = $r8;

     label17:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

     label18:
        $r5[6] = $r8;

     label19:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

     label20:
        $r5[7] = $r8;

     label21:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

     label22:
        $r5[8] = $r8;

     label23:
        virtualinvoke $r4.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>("INSERT INTO revlog VALUES (?,?,?,?,?,?,?,?,?)", $r5);

     label24:
        return;

     label25:
        r1 := @caughtexception;

     label26:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

     label27:
        specialinvoke r0.<com.ichi2.libanki.Sched: void log(long,int,int,int,int,int,int,int)>($l0, $i1, $i2, $i3, $i4, $i5, $i6, $i7);

        return;

     label28:
        r2 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r9;

        catch android.database.sqlite.SQLiteConstraintException from label01 to label02 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label03 to label04 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label05 to label06 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label07 to label08 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label09 to label10 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label11 to label12 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label13 to label14 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label15 to label16 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label17 to label18 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label19 to label20 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label21 to label22 with label25;
        catch android.database.sqlite.SQLiteConstraintException from label23 to label24 with label25;
        catch java.lang.InterruptedException from label26 to label27 with label28;
    }
    private void removeLrn(long[])
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r6;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.DB $r5;
        long $l1;
        java.util.ArrayList $r7;
        com.ichi2.libanki.Decks $r8;
        java.lang.Long[] $r9;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND id IN ");

        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set due = odue, queue = 2, mod = ");

        $l1 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", usn = ");

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i0 = virtualinvoke $r4.<com.ichi2.libanki.Collection: int usn()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", odue = 0 where queue IN (1,3) and type = 2 ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r6);

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE queue IN (1,3) ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r3, 0);

        $r1 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r7);

        virtualinvoke r0.<com.ichi2.libanki.Sched: void forgetCards(long[])>($r1);

        return;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND did IN ");

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Decks: java.lang.Long[] allIds()>();

        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.lang.Long[])>($r9);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }
    private void unburyCardsForDeck(java.util.List)
    {
        com.ichi2.libanki.Sched r0;
        java.util.List r1;
        java.lang.String $r2, $r8;
        com.ichi2.libanki.Collection $r3, $r5;
        java.lang.Object[] $r4;
        com.ichi2.libanki.DB $r6;
        java.lang.StringBuilder $r7;
        java.util.ArrayList $r9;
        long $l0;
        java.lang.Long $r10;
        int $i1;
        java.lang.Integer $r11;

        r0 := @this: com.ichi2.libanki.Sched;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r1);

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id from cards where queue = -2 and did in ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r8, 0);

        $r4[0] = $r9;

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r4);

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set mod=?,usn=?,queue=type where queue = -2 and did in ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = newarray (java.lang.Object)[2];

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4[0] = $r10;

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r3.<com.ichi2.libanki.Collection: int usn()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[1] = $r11;

        virtualinvoke $r6.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>($r2, $r4);

        return;
    }
    private void update(org.json.JSONObject)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        org.json.JSONArray r3;
        java.lang.String r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String[] $r5;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONObject;

        $i0 = 0;

        $r5 = newarray (java.lang.String)[4];

        $r5[0] = "new";

        $r5[1] = "rev";

        $r5[2] = "lrn";

        $r5[3] = "time";

        $i1 = lengthof $r5;

     label1:
        if $i0 >= $i1 goto label9;

        r4 = $r5[$i0];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Today");

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>(r4);

        $i2 = virtualinvoke r3.<org.json.JSONArray: int getInt(int)>(0);

     label3:
        $i3 = r0.<com.ichi2.libanki.Sched: int mToday>;

        if $i2 == $i3 goto label7;

        r3 = new org.json.JSONArray;

     label4:
        specialinvoke r3.<org.json.JSONArray: void <init>()>();

     label5:
        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

     label6:
        virtualinvoke r3.<org.json.JSONArray: org.json.JSONArray put(int)>($i2);

        virtualinvoke r3.<org.json.JSONArray: org.json.JSONArray put(int)>(0);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(r4, r3);

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

     label9:
        return;

        catch org.json.JSONException from label2 to label3 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    public org.json.JSONObject _cardConf(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;
        long $l0;
        org.json.JSONObject $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDid()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

        return $r4;
    }
    public void _checkDay()
    {
        com.ichi2.libanki.Sched r0;
        double $d0, $d1;
        long $l0;
        byte $b1;

        r0 := @this: com.ichi2.libanki.Sched;

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        $l0 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        $d1 = (double) $l0;

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label1;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void reset()>();

     label1:
        return;
    }
    public java.lang.String _deckLimit()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Decks $r2;
        java.util.LinkedList $r3;
        java.lang.String $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>($r3);

        return $r4;
    }
    public int _deckNewLimitSingle(org.json.JSONObject)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONObject $r1, $r5;
        org.json.JSONException r2;
        int $i0, $i2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        long $l1;
        org.json.JSONArray $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONObject;

     label1:
        $i0 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label2:
        if $i0 == 0 goto label3;

        $i0 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        return $i0;

     label3:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label4:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l1);

        $r5 = virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i0 = virtualinvoke $r5.<org.json.JSONObject: int getInt(java.lang.String)>("perDay");

        $r6 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("newToday");

        $i2 = virtualinvoke $r6.<org.json.JSONArray: int getInt(int)>(1);

     label5:
        $i0 = $i0 - $i2;

     label6:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

     label7:
        return $i0;

     label8:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    public int[] _fuzzedIvlRange(int)
    {
        com.ichi2.libanki.Sched r0;
        int $i0, $i1, $i2;
        int[] $r1;
        double $d0;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        if $i0 >= 2 goto label1;

        $r1 = newarray (int)[2];

        $r1[0] = 1;

        $r1[1] = 1;

        return $r1;

     label1:
        if $i0 != 2 goto label2;

        $r1 = newarray (int)[2];

        $r1[0] = 2;

        $r1[1] = 3;

        return $r1;

     label2:
        if $i0 >= 7 goto label4;

        $d0 = (double) $i0;

        $d0 = $d0 * 0.25;

        $i1 = (int) $d0;

     label3:
        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 1);

        $r1 = newarray (int)[2];

        $i1 = $i0 - $i2;

        $r1[0] = $i1;

        $i0 = $i0 + $i2;

        $r1[1] = $i0;

        return $r1;

     label4:
        if $i0 >= 30 goto label5;

        $d0 = (double) $i0;

        $d0 = $d0 * 0.15;

        $i1 = (int) $d0;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i1);

        goto label3;

     label5:
        $d0 = (double) $i0;

        $d0 = $d0 * 0.05;

        $i1 = (int) $d0;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i1);

        goto label3;
    }
    public int _newForDeck(long, int)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        int $i1, $i2;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $i2 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM (SELECT 1 FROM cards WHERE did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 0 LIMIT ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        return $i1;
    }
    public java.lang.String _nextDueMsg(android.content.Context)
    {
        com.ichi2.libanki.Sched r0;
        android.content.Context $r1;
        org.json.JSONException r2;
        java.lang.StringBuilder r3, $r5;
        boolean $z0;
        java.lang.String $r4, $r6;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.Decks $r8;
        org.json.JSONObject $r9;
        int $i0;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: android.content.Context;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r0.<com.ichi2.libanki.Sched: boolean revDue()>();

        if $z0 == 0 goto label01;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131231372);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label01:
        $z0 = virtualinvoke r0.<com.ichi2.libanki.Sched: boolean newDue()>();

        if $z0 == 0 goto label02;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131231371);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label02:
        $z0 = virtualinvoke r0.<com.ichi2.libanki.Sched: boolean haveBuried()>();

        if $z0 == 0 goto label04;

        $z0 = r0.<com.ichi2.libanki.Sched: boolean mHaveCustomStudy>;

        if $z0 == 0 goto label09;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131231277);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131231276);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label04:
        $z0 = r0.<com.ichi2.libanki.Sched: boolean mHaveCustomStudy>;

        if $z0 == 0 goto label08;

        $r7 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label05:
        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

        $i0 = virtualinvoke $r9.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label06:
        if $i0 != 0 goto label08;

     label07:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131231369);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label08:
        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label09:
        $r4 = "";

        goto label03;

     label10:
        r2 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

        catch org.json.JSONException from label05 to label06 with label10;
        catch org.json.JSONException from label07 to label08 with label10;
    }
    public int _revForDeck(long, int)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        int $i1, $i2;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM (SELECT 1 FROM cards WHERE did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 2 AND due <= ");

        $i2 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        return $i1;
    }
    public void _updateStats(com.ichi2.libanki.Card, java.lang.String, long)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        java.lang.String $r2;
        long $l0, $l1;
        org.json.JSONException r3;
        java.lang.StringBuilder $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Decks $r6;
        java.util.List $r7;
        org.json.JSONObject $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        org.json.JSONArray $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Today");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDid()>();

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: java.util.List parents(long)>($l1);

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l1);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.json.JSONObject) $r10;

     label2:
        $r11 = virtualinvoke $r8.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>($r2);

        $l1 = virtualinvoke $r11.<org.json.JSONArray: long getLong(int)>(1);

     label3:
        $l1 = $l1 + $l0;

     label4:
        virtualinvoke $r11.<org.json.JSONArray: org.json.JSONArray put(int,long)>(1, $l1);

     label5:
        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r8);

        goto label1;

     label6:
        r3 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r12;

     label7:
        return;

        catch org.json.JSONException from label2 to label3 with label6;
        catch org.json.JSONException from label4 to label5 with label6;
    }
    public int answerButtons(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        long $l0;
        byte $b1;
        int $i2;
        org.json.JSONObject $r3;
        org.json.JSONArray $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODue()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label11;

        $l0 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label01;

        $i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i2 != 2 goto label01;

        return 4;

     label01:
        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lrnConf(com.ichi2.libanki.Card)>($r1);

     label02:
        $i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

     label03:
        if $i2 == 0 goto label08;

     label04:
        $i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

     label05:
        if $i2 == 1 goto label08;

     label06:
        $r4 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i2 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

     label07:
        if $i2 <= 1 goto label10;

     label08:
        return 3;

     label09:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

     label10:
        return 2;

     label11:
        $i2 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i2 == 2 goto label12;

        return 3;

     label12:
        return 4;

        catch org.json.JSONException from label02 to label03 with label09;
        catch org.json.JSONException from label04 to label05 with label09;
        catch org.json.JSONException from label06 to label07 with label09;
    }
    public void answerCard(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1, $i4;
        com.ichi2.libanki.Collection $r2;
        java.lang.Object[] $r3;
        boolean $z0, $z1;
        long $l2;
        byte $b3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r3);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void markReview(com.ichi2.libanki.Card)>($r1);

        $z0 = r0.<com.ichi2.libanki.Sched: boolean mBurySiblingsOnAnswer>;

        if $z0 == 0 goto label01;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _burySiblings(com.ichi2.libanki.Card)>($r1);

     label01:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getReps()>();

        $i1 = $i1 + 1;

        virtualinvoke $r1.<com.ichi2.libanki.Card: int setReps(int)>($i1);

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i1 != 0 goto label09;

        $z0 = 1;

     label02:
        virtualinvoke $r1.<com.ichi2.libanki.Card: void setWasNew(boolean)>($z0);

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i1 != 0 goto label10;

        $z0 = 1;

     label03:
        if $z0 == 0 goto label06;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setQueue(int)>(1);

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i1 != 0 goto label04;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setType(int)>(1);

     label04:
        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _startingLeft(com.ichi2.libanki.Card)>($r1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setLeft(int)>($i1);

        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getODid()>();

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label05;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getType()>();

        if $i1 != 2 goto label05;

        $z1 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean _resched(com.ichi2.libanki.Card)>($r1);

        if $z1 == 0 goto label05;

        $i1 = specialinvoke r0.<com.ichi2.libanki.Sched: int _dynIvlBoost(com.ichi2.libanki.Card)>($r1);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setIvl(int)>($i1);

        $i1 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $i4 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getIvl()>();

        $i1 = $i1 + $i4;

        $l2 = (long) $i1;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setODue(long)>($l2);

     label05:
        specialinvoke r0.<com.ichi2.libanki.Sched: void _updateStats(com.ichi2.libanki.Card,java.lang.String)>($r1, "new");

     label06:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i1 == 1 goto label07;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i1 != 3 goto label11;

     label07:
        specialinvoke r0.<com.ichi2.libanki.Sched: void _answerLrnCard(com.ichi2.libanki.Card,int)>($r1, $i0);

        if $z0 != 0 goto label08;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _updateStats(com.ichi2.libanki.Card,java.lang.String)>($r1, "lrn");

     label08:
        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int timeTaken()>();

        $l2 = (long) $i0;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void _updateStats(com.ichi2.libanki.Card,java.lang.String,long)>($r1, "time", $l2);

        $l2 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setMod(long)>($l2);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int usn()>();

        virtualinvoke $r1.<com.ichi2.libanki.Card: void setUsn(int)>($i0);

        virtualinvoke $r1.<com.ichi2.libanki.Card: void flushSched()>();

        return;

     label09:
        $z0 = 0;

        goto label02;

     label10:
        $z0 = 0;

        goto label03;

     label11:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i1 != 2 goto label12;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _answerRevCard(com.ichi2.libanki.Card,int)>($r1, $i0);

        specialinvoke r0.<com.ichi2.libanki.Sched: void _updateStats(com.ichi2.libanki.Card,java.lang.String)>($r1, "rev");

        goto label08;

     label12:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Invalid queue");

        throw $r4;
    }
    public void buryCards(long[])
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        com.ichi2.libanki.Collection $r2;
        java.lang.Object[] $r3;
        com.ichi2.libanki.DB $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        double $d0;
        java.lang.Double $r7;
        int $i0;
        java.lang.Integer $r8;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r3);

        virtualinvoke r0.<com.ichi2.libanki.Sched: void remFromDyn(long[])>($r1);

        specialinvoke r0.<com.ichi2.libanki.Sched: void removeLrn(long[])>($r1);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set queue=-2,mod=?,usn=? where id in ");

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = newarray (java.lang.Object)[2];

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3[0] = $r7;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int usn()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r8;

        virtualinvoke $r4.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>($r6, $r3);

        return;
    }
    public void buryNote(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.ArrayList $r5;
        long[] $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE nid = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue >= 0");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r4, 0);

        $r6 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r5);

        virtualinvoke r0.<com.ichi2.libanki.Sched: void buryCards(long[])>($r6);

        return;
    }
    public int cardCount()
    {
        com.ichi2.libanki.Sched r0;
        java.lang.String $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        java.lang.StringBuilder $r4;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _deckLimit()>();

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM cards WHERE did IN ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r3.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r1);

        return $i0;
    }
    public int countIdx(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        if $i0 != 3 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        return $i0;
    }
    public int[] counts()
    {
        com.ichi2.libanki.Sched r0;
        int[] $r1;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Sched: int[] counts(com.ichi2.libanki.Card)>(null);

        return $r1;
    }
    public int[] counts(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int[] r2;
        int $i0, $i1;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        r2 = newarray (int)[3];

        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        r2[0] = $i0;

        $i0 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        r2[1] = $i0;

        $i0 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        r2[2] = $i0;

        if $r1 == null goto label2;

        $i0 = virtualinvoke r0.<com.ichi2.libanki.Sched: int countIdx(com.ichi2.libanki.Card)>($r1);

        if $i0 != 1 goto label1;

        $i0 = r2[1];

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        $i1 = $i1 / 1000;

        $i0 = $i0 + $i1;

        r2[1] = $i0;

        return r2;

     label1:
        $i1 = r2[$i0];

        $i1 = $i1 + 1;

        r2[$i0] = $i1;

     label2:
        return r2;
    }
    public java.util.List deckDueList()
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONException r1;
        java.util.HashMap r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        java.util.ArrayList $r5, r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        org.json.JSONObject r9;
        java.lang.String $r10;
        long $l0;
        java.util.List $r11;
        java.lang.String[] $r12;
        int $i1, $i2, $i3, $i4, i5;
        java.lang.Integer[] $r13;
        java.lang.Integer $r14;
        com.ichi2.libanki.Sched$DeckDueTreeNode $r15;
        java.lang.RuntimeException $r16;

        r0 := @this: com.ichi2.libanki.Sched;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void _checkDay()>();

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r4.<com.ichi2.libanki.Decks: void recoverOrphans()>();

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.ArrayList allSorted()>();

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

     label01:
        $r7 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label46;

     label04:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label05:
        r9 = (org.json.JSONObject) $r8;

     label06:
        $r10 = virtualinvoke r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $z0 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r10);

     label07:
        if $z0 == 0 goto label10;

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label08:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke $r4.<com.ichi2.libanki.Decks: void rem(long,boolean,boolean)>($l0, 0, 1);

        $r11 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.util.List deckDueList()>();

     label09:
        return $r11;

     label10:
        $r10 = virtualinvoke r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r12 = virtualinvoke $r10.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", -1);

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

     label11:
        if $i1 >= 2 goto label20;

        $r10 = null;

     label12:
        $i2 = virtualinvoke r0.<com.ichi2.libanki.Sched: int _deckNewLimitSingle(org.json.JSONObject)>(r9);

     label13:
        $i1 = $i2;

     label14:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r10);

     label15:
        if $z0 != 0 goto label27;

     label16:
        $z0 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r10);

     label17:
        if $z0 != 0 goto label24;

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label18:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke $r4.<com.ichi2.libanki.Decks: void rem(long,boolean,boolean)>($l0, 0, 1);

        $r11 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.util.List deckDueList()>();

     label19:
        return $r11;

     label20:
        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

     label21:
        $i1 = $i1 + -1;

     label22:
        $r11 = interfaceinvoke $r11.<java.util.List: java.util.List subList(int,int)>(0, $i1);

        $r10 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("::", $r11);

     label23:
        goto label12;

     label24:
        $r8 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

     label25:
        $r13 = (java.lang.Integer[]) $r8;

        $r14 = $r13[0];

     label26:
        $i1 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

     label27:
        $l0 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $i2 = virtualinvoke r0.<com.ichi2.libanki.Sched: int _newForDeck(long,int)>($l0, $i1);

        $l0 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $i3 = specialinvoke r0.<com.ichi2.libanki.Sched: int _lrnForDeck(long)>($l0);

        $i4 = specialinvoke r0.<com.ichi2.libanki.Sched: int _deckRevLimitSingle(org.json.JSONObject)>(r9);

     label28:
        i5 = $i4;

     label29:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r10);

     label30:
        if $z0 != 0 goto label35;

     label31:
        $r8 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

     label32:
        $r13 = (java.lang.Integer[]) $r8;

        $r14 = $r13[1];

     label33:
        i5 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i5);

     label34:
        i5 = $i4;

     label35:
        $l0 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $i4 = virtualinvoke r0.<com.ichi2.libanki.Sched: int _revForDeck(long,int)>($l0, i5);

     label36:
        $r15 = new com.ichi2.libanki.Sched$DeckDueTreeNode;

     label37:
        $r10 = virtualinvoke r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $l0 = virtualinvoke r9.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        specialinvoke $r15.<com.ichi2.libanki.Sched$DeckDueTreeNode: void <init>(com.ichi2.libanki.Sched,java.lang.String,long,int,int,int)>(r0, $r10, $l0, $i4, $i3, $i2);

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        $r10 = virtualinvoke r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label38:
        $r13 = newarray (java.lang.Integer)[2];

     label39:
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label40:
        $r13[0] = $r14;

     label41:
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

     label42:
        $r13[1] = $r14;

     label43:
        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r13);

     label44:
        goto label02;

     label45:
        r1 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r16;

     label46:
        return r6;

        catch org.json.JSONException from label01 to label03 with label45;
        catch org.json.JSONException from label04 to label05 with label45;
        catch org.json.JSONException from label06 to label07 with label45;
        catch org.json.JSONException from label08 to label09 with label45;
        catch org.json.JSONException from label10 to label11 with label45;
        catch org.json.JSONException from label12 to label13 with label45;
        catch org.json.JSONException from label14 to label15 with label45;
        catch org.json.JSONException from label16 to label17 with label45;
        catch org.json.JSONException from label18 to label19 with label45;
        catch org.json.JSONException from label20 to label21 with label45;
        catch org.json.JSONException from label22 to label23 with label45;
        catch org.json.JSONException from label24 to label25 with label45;
        catch org.json.JSONException from label26 to label27 with label45;
        catch org.json.JSONException from label27 to label28 with label45;
        catch org.json.JSONException from label29 to label30 with label45;
        catch org.json.JSONException from label31 to label32 with label45;
        catch org.json.JSONException from label33 to label34 with label45;
        catch org.json.JSONException from label35 to label36 with label45;
        catch org.json.JSONException from label37 to label38 with label45;
        catch org.json.JSONException from label39 to label40 with label45;
        catch org.json.JSONException from label41 to label42 with label45;
        catch org.json.JSONException from label43 to label44 with label45;
    }
    public java.util.List deckDueTree()
    {
        com.ichi2.libanki.Sched r0;
        java.util.List $r1;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.util.List deckDueList()>();

        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: java.util.List _groupChildren(java.util.List)>($r1);

        return $r1;
    }
    public void decrementCounts(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $i0 = r0.<com.ichi2.libanki.Sched: int mNewCount>;

        $i0 = $i0 + -1;

        r0.<com.ichi2.libanki.Sched: int mNewCount> = $i0;

        return;

     label3:
        $i0 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getLeft()>();

        $i1 = $i1 / 1000;

        $i0 = $i0 - $i1;

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = $i0;

        return;

     label4:
        $i0 = r0.<com.ichi2.libanki.Sched: int mRevCount>;

        $i0 = $i0 + -1;

        r0.<com.ichi2.libanki.Sched: int mRevCount> = $i0;

        return;

     label5:
        $i0 = r0.<com.ichi2.libanki.Sched: int mLrnCount>;

        $i0 = $i0 + -1;

        r0.<com.ichi2.libanki.Sched: int mLrnCount> = $i0;

        return;
    }
    public int dueForecast()
    {
        com.ichi2.libanki.Sched r0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 = virtualinvoke r0.<com.ichi2.libanki.Sched: int dueForecast(int)>(7);

        return $i0;
    }
    public int dueForecast(int)
    {
        com.ichi2.libanki.Sched r0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        return 0;
    }
    public void emptyDyn(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void emptyDyn(long,java.lang.String)>($l0, null);

        return;
    }
    public void emptyDyn(long, java.lang.String)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        java.lang.String $r1, $r7;
        java.lang.StringBuilder $r2;
        com.ichi2.libanki.Collection $r3, $r5;
        java.lang.Object[] $r4;
        com.ichi2.libanki.DB $r6;
        java.util.ArrayList $r8;
        int $i1;
        java.lang.Integer $r9;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("did = ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id from cards where ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r7, 0);

        $r4[0] = $r8;

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r4);

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set did = odid, queue = (case when type = 1 then 0 else type end), type = (case when type = 1 then 0 else type end), due = odue, odue = 0, odid = 0, usn = ? where ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r3.<com.ichi2.libanki.Collection: int usn()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[0] = $r9;

        virtualinvoke $r6.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>($r1, $r4);

        return;
    }
    public int eta(int[])
    {
        com.ichi2.libanki.Sched r0;
        int[] $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<com.ichi2.libanki.Sched: int eta(int[],boolean)>($r1, 1);

        return $i0;
    }
    public int eta(int[], boolean)
    {
        com.ichi2.libanki.Sched r0, $r8;
        int[] $r1;
        boolean $z0;
        double d0, $d1, $d2, $d3, d4, $d5, d6, $d7;
        double[] $r2;
        byte $b0;
        android.database.Cursor r3, $r10;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.DB $r5;
        io.requery.android.database.sqlite.SQLiteDatabase $r6;
        java.lang.StringBuilder $r7;
        long $l1;
        java.lang.String $r9;
        int $i2, $i3;
        java.lang.Throwable $r11;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: int[];

        $z0 := @parameter1: boolean;

        if $z0 != 0 goto label01;

        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        $d1 = $r2[0];

        $b0 = $d1 cmpl -1.0;

        if $b0 != 0 goto label29;

     label01:
        r3 = null;

     label02:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT avg(CASE WHEN ease > 1 THEN 1.0 ELSE 0.0 END), avg(time) FROM revlog WHERE type = 1 AND id > ");

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $l1 = virtualinvoke $r8.<com.ichi2.libanki.Sched: long getDayCutoff()>();

     label03:
        $l1 = $l1 - 604800L;

        $l1 = $l1 * 1000L;

     label04:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r9, null);

     label05:
        r3 = $r10;

     label06:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToFirst()>();

     label07:
        if $z0 != 0 goto label08;

        if $r10 == null goto label30;

        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label30;

        interfaceinvoke $r10.<android.database.Cursor: void close()>();

        return -1;

     label08:
        $d2 = interfaceinvoke $r10.<android.database.Cursor: double getDouble(int)>(0);

     label09:
        d0 = $d2;

     label10:
        $d3 = interfaceinvoke $r10.<android.database.Cursor: double getDouble(int)>(1);

     label11:
        d4 = $d3;

     label12:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isClosed()>();

     label13:
        if $z0 != 0 goto label15;

     label14:
        interfaceinvoke $r10.<android.database.Cursor: void close()>();

     label15:
        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT avg(CASE WHEN ease = 3 THEN 1.0 ELSE 0.0 END), avg(time) FROM revlog WHERE type != 1 AND id > ");

        $r4 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $l1 = virtualinvoke $r8.<com.ichi2.libanki.Sched: long getDayCutoff()>();

     label16:
        $l1 = $l1 - 604800L;

        $l1 = $l1 * 1000L;

     label17:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r9, null);

     label18:
        r3 = $r10;

     label19:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToFirst()>();

     label20:
        if $z0 != 0 goto label21;

        if $r10 == null goto label31;

        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label31;

        interfaceinvoke $r10.<android.database.Cursor: void close()>();

        return -1;

     label21:
        $d5 = interfaceinvoke $r10.<android.database.Cursor: double getDouble(int)>(0);

     label22:
        d6 = $d5;

     label23:
        $d7 = interfaceinvoke $r10.<android.database.Cursor: double getDouble(int)>(1);

     label24:
        $d1 = $d7;

        if $r10 == null goto label25;

        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label25;

        interfaceinvoke $r10.<android.database.Cursor: void close()>();

     label25:
        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        $r2[0] = $d2;

        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        $r2[1] = $d3;

        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        $r2[2] = $d5;

        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        $r2[3] = $d7;

     label26:
        $i2 = $r1[2];

        $d2 = (double) $i2;

        d4 = d4 * $d2;

        d6 = 1.0 - d6;

        d6 = 1.0 / d6;

        d6 = staticinvoke <java.lang.Math: double min(double,double)>(d6, 10.0);

        $i2 = $r1[0];

        $i3 = $r1[1];

        $i2 = $i2 + $i3;

        $d2 = (double) $i2;

        $i2 = $r1[2];

        $d3 = (double) $i2;

        d0 = 1.0 - d0;

        d0 = $d3 * d0;

        d0 = $d2 + d0;

        d0 = d0 * d6;

        $d1 = d0 * $d1;

        $d1 = d4 + $d1;

        $d1 = $d1 / 60000.0;

        $i2 = (int) $d1;

        return $i2;

     label27:
        $r11 := @caughtexception;

        if r3 == null goto label28;

        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label28;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label28:
        throw $r11;

     label29:
        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        d0 = $r2[0];

        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        d4 = $r2[1];

        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        d6 = $r2[2];

        $r2 = r0.<com.ichi2.libanki.Sched: double[] mEtaCache>;

        $d1 = $r2[3];

        goto label26;

     label30:
        return -1;

     label31:
        return -1;

        catch java.lang.Throwable from label02 to label03 with label27;
        catch java.lang.Throwable from label04 to label05 with label27;
        catch java.lang.Throwable from label06 to label07 with label27;
        catch java.lang.Throwable from label08 to label09 with label27;
        catch java.lang.Throwable from label10 to label11 with label27;
        catch java.lang.Throwable from label12 to label13 with label27;
        catch java.lang.Throwable from label14 to label16 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
    }
    public void extendLimits(int, int)
    {
        com.ichi2.libanki.Sched r0;
        int $i0, $i1, $i3;
        java.util.ArrayList r1;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        org.json.JSONObject $r5;
        long $l2;
        java.util.List $r6;
        java.util.TreeMap $r7;
        java.util.Collection $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.Long $r11;
        java.lang.RuntimeException $r12;
        org.json.JSONArray $r13;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label01:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l2 = virtualinvoke $r5.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r6 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.List parents(long)>($l2);

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

     label02:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label03:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l2 = virtualinvoke $r5.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r7 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l2);

        $r8 = virtualinvoke $r7.<java.util.TreeMap: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label13;

     label06:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

     label07:
        $r11 = (java.lang.Long) $r10;

     label08:
        $l2 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

     label09:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label10:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label11:
        goto label04;

     label12:
        r2 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r12;

     label13:
        $r9 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label15:
        if $z0 == 0 goto label26;

     label16:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

     label17:
        $r5 = (org.json.JSONObject) $r10;

     label18:
        $r13 = virtualinvoke $r5.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("newToday");

        $i3 = virtualinvoke $r13.<org.json.JSONArray: int getInt(int)>(1);

     label19:
        $i3 = $i3 - $i0;

     label20:
        virtualinvoke $r13.<org.json.JSONArray: org.json.JSONArray put(int,int)>(1, $i3);

        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("newToday", $r13);

        $r13 = virtualinvoke $r5.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("revToday");

        $i3 = virtualinvoke $r13.<org.json.JSONArray: int getInt(int)>(1);

     label21:
        $i3 = $i3 - $i1;

     label22:
        virtualinvoke $r13.<org.json.JSONArray: org.json.JSONArray put(int,int)>(1, $i3);

        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("revToday", $r13);

     label23:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label24:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r4.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r5);

     label25:
        goto label14;

     label26:
        return;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
        catch org.json.JSONException from label13 to label15 with label12;
        catch org.json.JSONException from label16 to label17 with label12;
        catch org.json.JSONException from label18 to label19 with label12;
        catch org.json.JSONException from label20 to label21 with label12;
        catch org.json.JSONException from label22 to label23 with label12;
        catch org.json.JSONException from label24 to label25 with label12;
    }
    public java.lang.CharSequence finishedMsg(android.content.Context)
    {
        com.ichi2.libanki.Sched r0;
        android.content.Context $r1;
        android.text.style.StyleSpan r2;
        android.text.SpannableStringBuilder r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: android.content.Context;

        r3 = new android.text.SpannableStringBuilder;

        specialinvoke r3.<android.text.SpannableStringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131231370);

        virtualinvoke r3.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>($r4);

        r2 = new android.text.style.StyleSpan;

        specialinvoke r2.<android.text.style.StyleSpan: void <init>(int)>(1);

        $i0 = virtualinvoke r3.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r3.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>(r2, 0, $i0, 0);

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _nextDueMsg(android.content.Context)>($r1);

        virtualinvoke r3.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>($r4);

        return r3;
    }
    public void forgetCards(long[])
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        int $i0;
        java.lang.Object[] $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        virtualinvoke r0.<com.ichi2.libanki.Sched: void remFromDyn(long[])>($r1);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set type=0,queue=0,ivl=0,due=0,odue=0,factor=2500 where id in ");

        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r5);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $i0 = virtualinvoke $r3.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT max(due) FROM cards WHERE type=0");

        $i0 = $i0 + 1;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void sortCards(long[],int)>($r1, $i0);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r6);

        return;
    }
    public com.ichi2.libanki.Card getCard()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        boolean $z0;
        com.ichi2.libanki.Collection $r2;
        java.lang.Object[] $r3;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void _checkDay()>();

        $z0 = r0.<com.ichi2.libanki.Sched: boolean mHaveQueues>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void reset()>();

     label1:
        $r1 = specialinvoke r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card _getCard()>();

        if $r1 == null goto label3;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r3);

        $z0 = r0.<com.ichi2.libanki.Sched: boolean mBurySiblingsOnAnswer>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _burySiblings(com.ichi2.libanki.Card)>($r1);

     label2:
        $i0 = r0.<com.ichi2.libanki.Sched: int mReps>;

        $i0 = $i0 + 1;

        r0.<com.ichi2.libanki.Sched: int mReps> = $i0;

        virtualinvoke $r1.<com.ichi2.libanki.Card: void startTimer()>();

        return $r1;

     label3:
        return null;
    }
    public long getDayCutoff()
    {
        com.ichi2.libanki.Sched r0;
        long l0;

        r0 := @this: com.ichi2.libanki.Sched;

        l0 = r0.<com.ichi2.libanki.Sched: long mDayCutoff>;

        return l0;
    }
    public java.lang.String getName()
    {
        com.ichi2.libanki.Sched r0;
        java.lang.String r1;

        r0 := @this: com.ichi2.libanki.Sched;

        r1 = r0.<com.ichi2.libanki.Sched: java.lang.String mName>;

        return r1;
    }
    public int getReps()
    {
        com.ichi2.libanki.Sched r0;
        int i0;

        r0 := @this: com.ichi2.libanki.Sched;

        i0 = r0.<com.ichi2.libanki.Sched: int mReps>;

        return i0;
    }
    public int getToday()
    {
        com.ichi2.libanki.Sched r0;
        int i0;

        r0 := @this: com.ichi2.libanki.Sched;

        i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        return i0;
    }
    public boolean haveBuried()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Decks $r2;
        java.util.LinkedList $r3;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean haveBuried(java.util.List)>($r3);

        return $z0;
    }
    public boolean haveBuried(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        java.util.ArrayList r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;
        java.util.TreeMap $r4;
        java.util.Collection $r5;
        java.lang.Long $r6;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        r1 = new java.util.ArrayList;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.Collection values()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $z0 = specialinvoke r0.<com.ichi2.libanki.Sched: boolean haveBuried(java.util.List)>(r1);

        return $z0;
    }
    public boolean leechActionSuspend(com.ichi2.libanki.Card)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        int $i0;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

     label1:
        $r3 = virtualinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _cardConf(com.ichi2.libanki.Card)>($r1);

        $r3 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        $i0 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("leechAction");

     label2:
        if $i0 != 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label4;
    }
    public void maybeRandomizeDeck()
    {
        com.ichi2.libanki.Sched r0;

        r0 := @this: com.ichi2.libanki.Sched;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void maybeRandomizeDeck(java.lang.Long)>(null);

        return;
    }
    public void maybeRandomizeDeck(java.lang.Long)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONException r1;
        java.lang.Long $r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        long $l0;
        org.json.JSONObject $r5;
        int $i1;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $r2 := @parameter0: java.lang.Long;

        if $r2 != null goto label1;

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r4.<com.ichi2.libanki.Decks: long selected()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label1:
        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

     label2:
        $r5 = virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i1 = virtualinvoke $r5.<org.json.JSONObject: int getInt(java.lang.String)>("order");

     label3:
        if $i1 != 0 goto label7;

     label4:
        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.ichi2.libanki.Sched: void randomizeCards(long)>($l0);

     label5:
        return;

     label6:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label7:
        return;

        catch org.json.JSONException from label2 to label3 with label6;
        catch org.json.JSONException from label4 to label5 with label6;
    }
    public boolean newDue()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT 1 FROM cards WHERE did IN ");

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _deckLimit()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 0 LIMIT 1");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int nextIvl(com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Card $r1;
        int $i0, $i1;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        org.json.JSONArray $r4;
        double $d0;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $i0 := @parameter1: int;

     label01:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

     label02:
        if $i1 == 0 goto label07;

     label03:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

     label04:
        if $i1 == 1 goto label07;

     label05:
        $i1 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getQueue()>();

     label06:
        if $i1 != 3 goto label09;

     label07:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _nextLrnIvl(com.ichi2.libanki.Card,int)>($r1, $i0);

     label08:
        return $i0;

     label09:
        if $i0 != 1 goto label16;

     label10:
        $r3 = specialinvoke r0.<com.ichi2.libanki.Sched: org.json.JSONObject _lapseConf(com.ichi2.libanki.Card)>($r1);

        $r4 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $i0 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

     label11:
        if $i0 <= 0 goto label14;

     label12:
        $r4 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $d0 = virtualinvoke $r4.<org.json.JSONArray: double getDouble(int)>(0);

     label13:
        $d0 = $d0 * 60.0;

        $i0 = (int) $d0;

        return $i0;

     label14:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _nextLapseIvl(com.ichi2.libanki.Card,org.json.JSONObject)>($r1, $r3);

     label15:
        $i0 = $i0 * 86400;

        return $i0;

     label16:
        $i0 = specialinvoke r0.<com.ichi2.libanki.Sched: int _nextRevIvl(com.ichi2.libanki.Card,int)>($r1, $i0);

     label17:
        $i0 = $i0 * 86400;

        return $i0;

     label18:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label01 to label02 with label18;
        catch org.json.JSONException from label03 to label04 with label18;
        catch org.json.JSONException from label05 to label06 with label18;
        catch org.json.JSONException from label07 to label08 with label18;
        catch org.json.JSONException from label10 to label11 with label18;
        catch org.json.JSONException from label12 to label13 with label18;
        catch org.json.JSONException from label14 to label15 with label18;
        catch org.json.JSONException from label16 to label17 with label18;
    }
    public java.lang.String nextIvlStr(android.content.Context, com.ichi2.libanki.Card, int)
    {
        com.ichi2.libanki.Sched r0;
        android.content.Context $r1;
        com.ichi2.libanki.Card $r2;
        int $i0, $i1;
        org.json.JSONException r3;
        java.lang.String $r4;
        com.ichi2.libanki.Collection $r5;
        org.json.JSONObject $r6;
        java.lang.Object[] $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.ichi2.libanki.Card;

        $i0 := @parameter2: int;

        $i0 = virtualinvoke r0.<com.ichi2.libanki.Sched: int nextIvl(com.ichi2.libanki.Card,int)>($r2, $i0);

        if $i0 != 0 goto label1;

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131231275);

        return $r4;

     label1:
        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String timeQuantity(android.content.Context,int)>($r1, $i0);

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label2:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $i1 = virtualinvoke $r6.<org.json.JSONObject: int getInt(java.lang.String)>("collapseTime");

     label3:
        if $i0 >= $i1 goto label7;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r4;

     label4:
        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(2131231101, $r7);

     label5:
        return $r4;

     label6:
        r3 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

     label7:
        return $r4;

        catch org.json.JSONException from label2 to label3 with label6;
        catch org.json.JSONException from label4 to label5 with label6;
    }
    public void orderCards(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.ArrayList $r5;
        long[] $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ORDER BY id");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r4, 0);

        $r6 = staticinvoke <com.ichi2.libanki.Utils: long[] toPrimitive(java.util.Collection)>($r5);

        virtualinvoke r0.<com.ichi2.libanki.Sched: void sortCards(long[],int,int,boolean,boolean)>($r6, 1, 1, 0, 0);

        return;
    }
    public void randomizeCards(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.ArrayList $r5;
        long[] $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id from cards where did = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r4, 0);

        $r6 = staticinvoke <com.ichi2.libanki.Utils: long[] toPrimitive(java.util.Collection)>($r5);

        virtualinvoke r0.<com.ichi2.libanki.Sched: void sortCards(long[],int,int,boolean,boolean)>($r6, 1, 1, 1, 0);

        return;
    }
    public java.util.List rebuildDyn(long)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONException r1;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;
        org.json.JSONObject $r4;
        int $i2;
        java.lang.Object[] $r5;
        java.lang.RuntimeException $r6;
        java.util.List $r7;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r3.<com.ichi2.libanki.Decks: long selected()>();

     label1:
        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

     label2:
        $i2 = virtualinvoke $r4.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label3:
        if $i2 != 0 goto label7;

        $r5 = newarray (java.lang.Object)[0];

     label4:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("error: deck is not a filtered deck", $r5);

     label5:
        return null;

     label6:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label7:
        virtualinvoke r0.<com.ichi2.libanki.Sched: void emptyDyn(long)>($l0);

        $r7 = specialinvoke r0.<com.ichi2.libanki.Sched: java.util.List _fillDyn(org.json.JSONObject)>($r4);

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label8;

        return null;

     label8:
        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r3.<com.ichi2.libanki.Decks: void select(long)>($l0);

        return $r7;

        catch org.json.JSONException from label2 to label3 with label6;
        catch org.json.JSONException from label4 to label5 with label6;
    }
    public void rebuildDyn()
    {
        com.ichi2.libanki.Sched r0;

        r0 := @this: com.ichi2.libanki.Sched;

        virtualinvoke r0.<com.ichi2.libanki.Sched: java.util.List rebuildDyn(long)>(0L);

        return;
    }
    public void remFromDyn(long[])
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id IN ");

        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND odid");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.ichi2.libanki.Sched: void emptyDyn(long,java.lang.String)>(0L, $r3);

        return;
    }
    public void removeLrn()
    {
        com.ichi2.libanki.Sched r0;

        r0 := @this: com.ichi2.libanki.Sched;

        specialinvoke r0.<com.ichi2.libanki.Sched: void removeLrn(long[])>(null);

        return;
    }
    public void reschedCards(long[], int, int)
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        int $i0, $i1, i2, i4, $i6, $i7, $i8;
        java.util.ArrayList r2;
        long l3, $l5;
        java.util.Random r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        com.ichi2.libanki.Collection $r6;
        java.lang.Long $r7;
        com.ichi2.libanki.DB $r8;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        i4 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $l5 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        r3 = new java.util.Random;

        specialinvoke r3.<java.util.Random: void <init>()>();

        $i6 = lengthof $r1;

        $i7 = 0;

     label1:
        if $i7 >= $i6 goto label2;

        l3 = $r1[$i7];

        i2 = $i1 - $i0;

        i2 = i2 + 1;

        i2 = virtualinvoke r3.<java.util.Random: int nextInt(int)>(i2);

        i2 = i2 + $i0;

        $r4 = newarray (java.lang.Object)[6];

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(1, i2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r4[0] = $r5;

        i2 = i2 + i4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[1] = $r5;

        $r6 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        i2 = virtualinvoke $r6.<com.ichi2.libanki.Collection: int usn()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[2] = $r5;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r4[3] = $r7;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2500);

        $r4[4] = $r5;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r4[5] = $r7;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i7 = $i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.ichi2.libanki.Sched: void remFromDyn(long[])>($r1);

        $r6 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r8.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("update cards set type=2,queue=2,ivl=?,due=?,odue=0, usn=?,mod=?,factor=? where id=?", r2);

        $r6 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r4);

        return;
    }
    public void reset()
    {
        com.ichi2.libanki.Sched r0;

        r0 := @this: com.ichi2.libanki.Sched;

        specialinvoke r0.<com.ichi2.libanki.Sched: void _updateCutoff()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetLrn()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetRev()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void _resetNew()>();

        r0.<com.ichi2.libanki.Sched: boolean mHaveQueues> = 1;

        return;
    }
    public void resetCards(java.lang.Long[])
    {
        com.ichi2.libanki.Sched r0;
        java.lang.Long[] $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        java.util.Locale $r4;
        java.lang.Object[] $r5;
        java.lang.String $r6;
        java.util.ArrayList $r7;
        long[] $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: java.lang.Long[];

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.lang.Long[])>($r1);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "select id from cards where id in %s and (queue != 0 or type != 0)", $r5);

        $r7 = virtualinvoke $r3.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r6, 0);

        $r8 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r7);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set reps=0, lapses=0 where id in ");

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r8);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r6);

        virtualinvoke r0.<com.ichi2.libanki.Sched: void forgetCards(long[])>($r8);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = (java.lang.Object[]) $r1;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r5);

        return;
    }
    public void resortConf(org.json.JSONObject)
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONObject $r1, $r9;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.Long $r8;
        long $l0, $l1;
        byte $b2;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.List didsForConf(org.json.JSONObject)>($r1);

     label01:
        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label13;

     label04:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label05:
        $r8 = (java.lang.Long) $r7;

     label06:
        $l0 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r9 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $l1 = virtualinvoke $r9.<org.json.JSONObject: long getLong(java.lang.String)>("order");

     label07:
        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label11;

     label08:
        virtualinvoke r0.<com.ichi2.libanki.Sched: void randomizeCards(long)>($l0);

     label09:
        goto label02;

     label10:
        r2 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label11:
        virtualinvoke r0.<com.ichi2.libanki.Sched: void orderCards(long)>($l0);

     label12:
        goto label02;

     label13:
        return;

        catch org.json.JSONException from label01 to label03 with label10;
        catch org.json.JSONException from label04 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
        catch org.json.JSONException from label11 to label12 with label10;
    }
    public boolean revDue()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT 1 FROM cards WHERE did IN ");

        $r4 = virtualinvoke r0.<com.ichi2.libanki.Sched: java.lang.String _deckLimit()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 2 AND due <= ");

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT 1");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r4);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void setContext(java.lang.ref.WeakReference)
    {
        com.ichi2.libanki.Sched r0;
        java.lang.ref.WeakReference r1;

        r0 := @this: com.ichi2.libanki.Sched;

        r1 := @parameter0: java.lang.ref.WeakReference;

        r0.<com.ichi2.libanki.Sched: java.lang.ref.WeakReference mContextReference> = r1;

        return;
    }
    public void setReps(int)
    {
        com.ichi2.libanki.Sched r0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        r0.<com.ichi2.libanki.Sched: int mReps> = $i0;

        return;
    }
    public void setToday(int)
    {
        com.ichi2.libanki.Sched r0;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $i0 := @parameter0: int;

        r0.<com.ichi2.libanki.Sched: int mToday> = $i0;

        return;
    }
    public void sortCards(long[], int)
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        virtualinvoke r0.<com.ichi2.libanki.Sched: void sortCards(long[],int,int,boolean,boolean)>($r1, $i0, 1, 0, 0);

        return;
    }
    public void sortCards(long[], int, int, boolean, boolean)
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        int $i0, $i1, $i4, $i5;
        boolean $z0, $z1, $z2;
        java.util.ArrayList r2;
        java.util.HashMap r3;
        long l2, $l3;
        java.lang.String $r4, $r8;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.DB $r6;
        java.lang.StringBuilder $r7;
        java.lang.Long $r9;
        java.lang.Object $r10;
        android.database.Cursor r11, $r13;
        io.requery.android.database.sqlite.SQLiteDatabase $r12;
        java.lang.Object[] $r14;
        java.lang.Integer $r15;
        java.lang.Throwable $r16;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $l3 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $i4 = lengthof $r1;

        $i5 = 0;

     label01:
        if $i5 >= $i4 goto label03;

        l2 = $r1[$i5];

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT nid FROM cards WHERE id = ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        l2 = virtualinvoke $r6.<com.ichi2.libanki.DB: long queryLongScalar(java.lang.String)>($r8);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $z2 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r9);

        if $z2 != 0 goto label02;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label02:
        $i5 = $i5 + 1;

        goto label01;

     label03:
        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i4 != 0 goto label04;

        return;

     label04:
        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        if $z0 == 0 goto label05;

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>(r2);

     label05:
        $i4 = 0;

     label06:
        $i5 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i4 >= $i5 goto label07;

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $i5 = $i4 * $i1;

        $i5 = $i5 + $i0;

        l2 = (long) $i5;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        $i4 = $i4 + 1;

        goto label06;

     label07:
        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $i4 = $i4 + -1;

        $i1 = $i4 * $i1;

        $i1 = $i0 + $i1;

        if $z1 == 0 goto label08;

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT min(due) FROM cards WHERE due >= ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND type = 0 AND id NOT IN ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r8);

        if $i0 == 0 goto label08;

        $i1 = $i1 - $i0;

        $i1 = $i1 + 1;

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE cards SET mod = ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", usn = ");

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i4 = virtualinvoke $r5.<com.ichi2.libanki.Collection: int usn()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", due = due + ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE id NOT IN ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND due >= ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 0");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r8);

     label08:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r11 = null;

     label09:
        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r6.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id, nid FROM cards WHERE type = 0 AND id IN ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r12.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r4, null);

     label10:
        r11 = $r13;

     label11:
        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToNext()>();

     label12:
        if $z0 == 0 goto label17;

     label13:
        l2 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(1);

        $r14 = newarray (java.lang.Object)[4];

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r10 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r14[0] = $r10;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r14[1] = $r9;

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i0 = virtualinvoke $r5.<com.ichi2.libanki.Collection: int usn()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r14[2] = $r15;

        l2 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(0);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r14[3] = $r9;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label14:
        goto label11;

     label15:
        $r16 := @caughtexception;

        if r11 == null goto label16;

        $z0 = interfaceinvoke r11.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label16;

        interfaceinvoke r11.<android.database.Cursor: void close()>();

     label16:
        throw $r16;

     label17:
        if $r13 == null goto label18;

        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label18;

        interfaceinvoke $r13.<android.database.Cursor: void close()>();

     label18:
        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r6.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("UPDATE cards SET due = ?, mod = ?, usn = ? WHERE id = ?", r2);

        return;

        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }
    public void suspendCards(long[])
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        com.ichi2.libanki.Collection $r2;
        java.lang.Object[] $r3;
        com.ichi2.libanki.DB $r4;
        java.lang.StringBuilder $r5;
        long $l0;
        int $i1;
        java.lang.String $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r3);

        virtualinvoke r0.<com.ichi2.libanki.Sched: void remFromDyn(long[])>($r1);

        specialinvoke r0.<com.ichi2.libanki.Sched: void removeLrn(long[])>($r1);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE cards SET queue = -1, mod = ");

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", usn = ");

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int usn()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE id IN ");

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r6);

        return;
    }
    public int totalNewForCurrentDeck()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.lang.StringBuilder $r3;
        com.ichi2.libanki.Decks $r4;
        java.util.LinkedList $r5;
        java.lang.String $r6;
        int $i0;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count() FROM cards WHERE id IN (SELECT id FROM cards WHERE did IN ");

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND queue = 0 LIMIT ");

        $i0 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r6);

        return $i0;
    }
    public int totalRevForCurrentDeck()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        java.util.Locale $r3;
        java.lang.Object[] $r4;
        com.ichi2.libanki.Decks $r5;
        java.util.LinkedList $r6;
        java.lang.String $r7;
        int $i0;
        java.lang.Integer $r8;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r4 = newarray (java.lang.Object)[3];

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        $r7 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>($r6);

        $r4[0] = $r7;

        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r8;

        $i0 = r0.<com.ichi2.libanki.Sched: int mReportLimit>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[2] = $r8;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "SELECT count() FROM cards WHERE id IN (SELECT id FROM cards WHERE did IN %s AND queue = 2 AND due <= %d LIMIT %s)", $r4);

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r7);

        return $i0;
    }
    public void unburyCards()
    {
        com.ichi2.libanki.Sched r0;
        org.json.JSONException r1;
        com.ichi2.libanki.Collection $r2, $r5;
        org.json.JSONObject $r3;
        int $i0;
        java.lang.Object[] $r4;
        com.ichi2.libanki.DB $r6;
        java.util.ArrayList $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Sched;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label1:
        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

     label2:
        $i0 = r0.<com.ichi2.libanki.Sched: int mToday>;

     label3:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("lastUnburied", $i0);

     label4:
        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

     label5:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", "select id from cards where queue = -2", 0);

     label6:
        $r4[0] = $r7;

     label7:
        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r4);

     label8:
        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r6.<com.ichi2.libanki.DB: void execute(java.lang.String)>("update cards set queue=type where queue = -2");

        return;

     label9:
        r1 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

        catch org.json.JSONException from label1 to label2 with label9;
        catch org.json.JSONException from label3 to label4 with label9;
        catch org.json.JSONException from label5 to label6 with label9;
        catch org.json.JSONException from label7 to label8 with label9;
    }
    public void unburyCardsForDeck()
    {
        com.ichi2.libanki.Sched r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Decks $r2;
        java.util.LinkedList $r3;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Decks: java.util.LinkedList active()>();

        specialinvoke r0.<com.ichi2.libanki.Sched: void unburyCardsForDeck(java.util.List)>($r3);

        return;
    }
    public void unburyCardsForDeck(long)
    {
        com.ichi2.libanki.Sched r0;
        long $l0;
        java.util.ArrayList r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;
        java.util.TreeMap $r4;
        java.util.Collection $r5;
        java.lang.Long $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $l0 := @parameter0: long;

        r1 = new java.util.ArrayList;

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.Collection values()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        specialinvoke r0.<com.ichi2.libanki.Sched: void unburyCardsForDeck(java.util.List)>(r1);

        return;
    }
    public void unsuspendCards(long[])
    {
        com.ichi2.libanki.Sched r0;
        long[] $r1;
        com.ichi2.libanki.Collection $r2;
        java.lang.Object[] $r3;
        com.ichi2.libanki.DB $r4;
        java.lang.StringBuilder $r5;
        long $l0;
        int $i1;
        java.lang.String $r6;

        r0 := @this: com.ichi2.libanki.Sched;

        $r1 := @parameter0: long[];

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r3);

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE cards SET queue = type, mod = ");

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", usn = ");

        $r2 = r0.<com.ichi2.libanki.Sched: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int usn()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE queue = -1 AND id IN ");

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r6);

        return;
    }
