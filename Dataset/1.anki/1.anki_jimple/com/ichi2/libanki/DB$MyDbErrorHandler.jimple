com.ichi2.libanki.DB$MyDbErrorHandler extends java.lang.Object implements io.requery.android.database.DatabaseErrorHandler
final com.ichi2.libanki.DB this$0
    public void <init>(com.ichi2.libanki.DB)
    {
        com.ichi2.libanki.DB$MyDbErrorHandler r0;
        com.ichi2.libanki.DB $r1;

        r0 := @this: com.ichi2.libanki.DB$MyDbErrorHandler;

        $r1 := @parameter0: com.ichi2.libanki.DB;

        r0.<com.ichi2.libanki.DB$MyDbErrorHandler: com.ichi2.libanki.DB this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void onCorruption(io.requery.android.database.sqlite.SQLiteDatabase)
    {
        com.ichi2.libanki.DB$MyDbErrorHandler r0;
        io.requery.android.database.sqlite.SQLiteDatabase $r1;
        com.ichi2.anki.CollectionHelper $r2;
        java.lang.Object[] $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.DB$MyDbErrorHandler;

        $r1 := @parameter0: io.requery.android.database.sqlite.SQLiteDatabase;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("The database has been corrupted...", $r3);

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Database corrupted");

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String,java.lang.String)>($r4, "DB.MyDbErrorHandler.onCorruption", "Db has been corrupted ");

        $r2 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r2.<com.ichi2.anki.CollectionHelper: void closeCollection(boolean)>(0);

        <com.ichi2.anki.dialogs.DatabaseErrorDialog: boolean databaseCorruptFlag> = 1;

        return;
    }
