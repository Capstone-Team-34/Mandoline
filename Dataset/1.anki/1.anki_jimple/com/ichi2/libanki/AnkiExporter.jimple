com.ichi2.libanki.AnkiExporter extends com.ichi2.libanki.Exporter
int mCount
boolean mIncludeMedia
boolean mIncludeSched
java.lang.String mMediaDir
java.util.ArrayList mMediaFiles
com.ichi2.libanki.Collection mSrc
    public void <init>(com.ichi2.libanki.Collection)
    {
        com.ichi2.libanki.AnkiExporter r0;
        com.ichi2.libanki.Collection $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        specialinvoke r0.<com.ichi2.libanki.Exporter: void <init>(com.ichi2.libanki.Collection)>($r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.libanki.AnkiExporter: java.util.ArrayList mMediaFiles> = $r2;

        r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeSched> = 0;

        r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeMedia> = 1;

        return;
    }
    private boolean _modelHasMedia(org.json.JSONObject, java.lang.String) throws org.json.JSONException
    {
        com.ichi2.libanki.AnkiExporter r0;
        org.json.JSONObject $r1;
        java.lang.String $r2, $r4;
        java.lang.Object[] $r3;
        boolean $z0;
        org.json.JSONArray $r5;
        int i0, $i1;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("_modelHasMedia given null model", $r3);

        return 1;

     label1:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("css");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label4;

        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        i0 = 0;

     label2:
        $i1 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

        if i0 >= $i1 goto label3;

        $r1 = virtualinvoke $r5.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("qfmt");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label4;

        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("afmt");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label4;

        i0 = i0 + 1;

        goto label2;

     label3:
        return 0;

     label4:
        return 1;
    }
    private java.lang.String removeSystemTags(java.lang.String)
    {
        com.ichi2.libanki.AnkiExporter r0;
        java.lang.String $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Tags $r3;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r1 = virtualinvoke $r3.<com.ichi2.libanki.Tags: java.lang.String remFromStr(java.lang.String,java.lang.String)>("marked leech", $r1);

        return $r1;
    }
    public void exportInto(java.lang.String, android.content.Context) throws org.json.JSONException, java.io.IOException
    {
        com.ichi2.libanki.AnkiExporter r0;
        java.lang.String $r1, $r16;
        android.content.Context $r2;
        java.lang.Object[] r3;
        java.util.ArrayList r4, r8, $r17;
        org.json.JSONObject r5, r25;
        java.io.File r6;
        java.util.HashSet r7;
        com.ichi2.libanki.Collection $r9, $r10;
        java.lang.Long $r11;
        com.ichi2.libanki.DB $r12;
        java.lang.Long[] $r13;
        io.requery.android.database.sqlite.SQLiteDatabase $r14;
        java.lang.StringBuilder $r15;
        boolean $z0;
        int $i0, $i1, i4, $i5;
        java.lang.Object $r18;
        com.ichi2.libanki.Decks $r19;
        long $l2;
        com.ichi2.libanki.Models $r20;
        java.util.Iterator $r21;
        com.ichi2.libanki.Sched $r22;
        java.util.TreeMap $r23;
        java.util.Collection $r24;
        byte $b3;
        com.ichi2.libanki.Media $r26;
        java.util.List $r27;
        java.io.File[] $r28;
        org.json.JSONArray $r29;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.Context;

        r6 = new java.io.File;

        specialinvoke r6.<java.io.File: void <init>(java.lang.String)>($r1);

        virtualinvoke r6.<java.io.File: boolean delete()>();

        $r9 = staticinvoke <com.ichi2.libanki.Storage: com.ichi2.libanki.Collection Collection(android.content.Context,java.lang.String)>($r2, $r1);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mCol>;

        r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc> = $r10;

        $r11 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.Long mDid>;

        if $r11 != null goto label03;

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        r4 = virtualinvoke $r12.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", "SELECT id FROM cards", 0);

        $r13 = staticinvoke <com.ichi2.libanki.Utils: java.lang.Long[] list2ObjectArray(java.util.List)>(r4);

     label01:
        virtualinvoke $r9.<com.ichi2.libanki.Collection: void close()>();

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Attach DB", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r14 = virtualinvoke $r12.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ATTACH \'");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' AS DST_DB");

        $r1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r1);

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Copy cards", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r14 = virtualinvoke $r12.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT INTO DST_DB.cards select * from cards where id in ");

        $r1 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.lang.Long[])>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r1);

        r7 = new java.util.HashSet;

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select nid from cards where id in ");

        $r1 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.lang.Long[])>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke $r12.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r1, 0);

        specialinvoke r7.<java.util.HashSet: void <init>(java.util.Collection)>(r4);

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Copy notes", r3);

        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>(java.util.Collection)>(r7);

        $r1 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.util.List)>(r8);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r14 = virtualinvoke $r12.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT INTO DST_DB.notes select * from notes where id in ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r16);

        $z0 = r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeSched>;

        if $z0 != 0 goto label05;

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Stripping system tags from list", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select tags from notes where id in ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke $r12.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/String;", $r16, 0);

        r4 = new java.util.ArrayList;

        $i0 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = newarray (java.lang.Object)[2];

        $i0 = 0;

     label02:
        $i1 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label04;

        $r18 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r16 = (java.lang.String) $r18;

        $r16 = specialinvoke r0.<com.ichi2.libanki.AnkiExporter: java.lang.String removeSystemTags(java.lang.String)>($r16);

        r3[0] = $r16;

        $r18 = virtualinvoke r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        r3[1] = $r18;

        virtualinvoke r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, r3);

        $i0 = $i0 + 1;

        goto label02;

     label03:
        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r19 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r11 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.Long mDid>;

        $l2 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $r13 = virtualinvoke $r19.<com.ichi2.libanki.Decks: java.lang.Long[] cids(long,boolean)>($l2, 1);

        goto label01;

     label04:
        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r12.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("UPDATE DST_DB.notes set tags=? where id=?", r4);

     label05:
        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Finding models used by notes", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select distinct mid from DST_DB.notes where id in ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke $r12.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r16, 0);

        $z0 = r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeSched>;

        if $z0 == 0 goto label08;

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Copy history and revlog", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r14 = virtualinvoke $r12.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insert into DST_DB.revlog select * from revlog where cid in ");

        $r16 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(java.lang.Long[])>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r16);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r14 = virtualinvoke $r12.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r14.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DETACH DST_DB");

        virtualinvoke $r9.<com.ichi2.libanki.Collection: void reopen()>();

     label06:
        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Copy models", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r20 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        r8 = virtualinvoke $r20.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r21 = virtualinvoke r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r18 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.json.JSONObject) $r18;

        $l2 = virtualinvoke r5.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $z0 = virtualinvoke r4.<java.util.ArrayList: boolean contains(java.lang.Object)>($r11);

        if $z0 == 0 goto label07;

        $r20 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r20.<com.ichi2.libanki.Models: void update(org.json.JSONObject)>(r5);

        goto label07;

     label08:
        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Detaching destination db and reopening", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r14 = virtualinvoke $r12.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r14.<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DETACH DST_DB");

        virtualinvoke $r9.<com.ichi2.libanki.Collection: void reopen()>();

        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Resetting cards", r3);

        $r22 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r22.<com.ichi2.libanki.Sched: void resetCards(java.lang.Long[])>($r13);

        goto label06;

     label09:
        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Copy decks", r3);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r11 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.Long mDid>;

        if $r11 == null goto label11;

        $r11 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.Long mDid>;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r19 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r11 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.Long mDid>;

        $l2 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $r23 = virtualinvoke $r19.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l2);

        $r24 = virtualinvoke $r23.<java.util.TreeMap: java.util.Collection values()>();

        $r21 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r18 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.Long) $r18;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label10;

     label11:
        r5 = new org.json.JSONObject;

        specialinvoke r5.<org.json.JSONObject: void <init>()>();

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r19 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        r8 = virtualinvoke $r19.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r21 = virtualinvoke r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r18 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.json.JSONObject) $r18;

        $r16 = virtualinvoke r25.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("id");

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 != 0 goto label12;

        $r11 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.Long mDid>;

        if $r11 == null goto label13;

        $l2 = virtualinvoke r25.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $z0 = virtualinvoke r4.<java.util.ArrayList: boolean contains(java.lang.Object)>($r11);

        if $z0 == 0 goto label12;

     label13:
        $i0 = virtualinvoke r25.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

        if $i0 == 1 goto label14;

        $l2 = virtualinvoke r25.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        $b3 = $l2 cmp 1L;

        if $b3 == 0 goto label14;

        $z0 = r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeSched>;

        if $z0 == 0 goto label14;

        $l2 = virtualinvoke r25.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        $r16 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>($r16, 1);

     label14:
        $z0 = r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeSched>;

        if $z0 != 0 goto label15;

        virtualinvoke r25.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("conf", 1);

     label15:
        $r19 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r19.<com.ichi2.libanki.Decks: void update(org.json.JSONObject)>(r25);

        goto label12;

     label16:
        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Copy deck options", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r19 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        r4 = virtualinvoke $r19.<com.ichi2.libanki.Decks: java.util.ArrayList allConf()>();

        $r21 = virtualinvoke r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r18 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.json.JSONObject) $r18;

        $r16 = virtualinvoke r25.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("id");

        $z0 = virtualinvoke r5.<org.json.JSONObject: boolean has(java.lang.String)>($r16);

        if $z0 == 0 goto label17;

        $r19 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r19.<com.ichi2.libanki.Decks: void updateConf(org.json.JSONObject)>(r25);

        goto label17;

     label18:
        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Find used media", r3);

        r5 = new org.json.JSONObject;

        specialinvoke r5.<org.json.JSONObject: void <init>()>();

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r26 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r16 = virtualinvoke $r26.<com.ichi2.libanki.Media: java.lang.String dir()>();

        r0.<com.ichi2.libanki.AnkiExporter: java.lang.String mMediaDir> = $r16;

        $z0 = r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeMedia>;

        if $z0 == 0 goto label27;

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select mid from notes where id in ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke $r12.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r16, 0);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r12 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select flds from notes where id in ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = virtualinvoke $r12.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/String;", $r1, 0);

        $i0 = 0;

     label19:
        $i1 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label22;

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r26 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r18 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r11 = (java.lang.Long) $r18;

        $r18 = virtualinvoke r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r1 = (java.lang.String) $r18;

        $r27 = virtualinvoke $r26.<com.ichi2.libanki.Media: java.util.List filesInStr(java.lang.Long,java.lang.String)>($r11, $r1);

        $r21 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r18 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r18;

        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>($r1, 1);

        goto label20;

     label21:
        $i0 = $i0 + 1;

        goto label19;

     label22:
        $r1 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.String mMediaDir>;

        if $r1 == null goto label27;

        r6 = new java.io.File;

        $r1 = r0.<com.ichi2.libanki.AnkiExporter: java.lang.String mMediaDir>;

        specialinvoke r6.<java.io.File: void <init>(java.lang.String)>($r1);

        $r28 = virtualinvoke r6.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r28;

        $i1 = 0;

     label23:
        if $i1 >= $i0 goto label27;

        r6 = $r28[$i1];

        $r1 = virtualinvoke r6.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z0 == 0 goto label25;

        i4 = 0;

     label24:
        $i5 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        if i4 >= $i5 goto label25;

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $r20 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l2 = (long) i4;

        r25 = virtualinvoke $r20.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l2);

        $z0 = specialinvoke r0.<com.ichi2.libanki.AnkiExporter: boolean _modelHasMedia(org.json.JSONObject,java.lang.String)>(r25, $r1);

        if $z0 == 0 goto label26;

        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>($r1, 1);

     label25:
        $i1 = $i1 + 1;

        goto label23;

     label26:
        i4 = i4 + 1;

        goto label24;

     label27:
        $r29 = virtualinvoke r5.<org.json.JSONObject: org.json.JSONArray names()>();

        if $r29 == null goto label29;

        $i0 = 0;

     label28:
        $i1 = virtualinvoke $r29.<org.json.JSONArray: int length()>();

        if $i0 >= $i1 goto label29;

        r4 = r0.<com.ichi2.libanki.AnkiExporter: java.util.ArrayList mMediaFiles>;

        $r1 = virtualinvoke $r29.<org.json.JSONArray: java.lang.String getString(int)>($i0);

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $i0 = $i0 + 1;

        goto label28;

     label29:
        r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Cleanup", r3);

        $r10 = r0.<com.ichi2.libanki.AnkiExporter: com.ichi2.libanki.Collection mSrc>;

        $l2 = virtualinvoke $r10.<com.ichi2.libanki.Collection: long getCrt()>();

        virtualinvoke $r9.<com.ichi2.libanki.Collection: void setCrt(long)>($l2);

        $i0 = virtualinvoke $r9.<com.ichi2.libanki.Collection: int cardCount()>();

        r0.<com.ichi2.libanki.AnkiExporter: int mCount> = $i0;

        virtualinvoke $r9.<com.ichi2.libanki.Collection: void setMod()>();

        virtualinvoke r0.<com.ichi2.libanki.AnkiExporter: void postExport()>();

        virtualinvoke $r9.<com.ichi2.libanki.Collection: void close()>();

        return;
    }
    protected void postExport()
    {
        com.ichi2.libanki.AnkiExporter r0;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        return;
    }
    public void setDid(java.lang.Long)
    {
        com.ichi2.libanki.AnkiExporter r0;
        java.lang.Long $r1;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        $r1 := @parameter0: java.lang.Long;

        r0.<com.ichi2.libanki.AnkiExporter: java.lang.Long mDid> = $r1;

        return;
    }
    public void setIncludeMedia(boolean)
    {
        com.ichi2.libanki.AnkiExporter r0;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        $z0 := @parameter0: boolean;

        r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeMedia> = $z0;

        return;
    }
    public void setIncludeSched(boolean)
    {
        com.ichi2.libanki.AnkiExporter r0;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.AnkiExporter;

        $z0 := @parameter0: boolean;

        r0.<com.ichi2.libanki.AnkiExporter: boolean mIncludeSched> = $z0;

        return;
    }
