com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils extends java.lang.Object
final com.ichi2.libanki.hooks.AdvancedStatistics this$0
    private void <init>(com.ichi2.libanki.hooks.AdvancedStatistics)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        com.ichi2.libanki.hooks.AdvancedStatistics $r1;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r1 := @parameter0: com.ichi2.libanki.hooks.AdvancedStatistics;

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: com.ichi2.libanki.hooks.AdvancedStatistics this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(com.ichi2.libanki.hooks.AdvancedStatistics, com.ichi2.libanki.hooks.AdvancedStatistics$1)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        com.ichi2.libanki.hooks.AdvancedStatistics $r1;
        com.ichi2.libanki.hooks.AdvancedStatistics$1 $r2;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r1 := @parameter0: com.ichi2.libanki.hooks.AdvancedStatistics;

        $r2 := @parameter1: com.ichi2.libanki.hooks.AdvancedStatistics$1;

        specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils: void <init>(com.ichi2.libanki.hooks.AdvancedStatistics)>($r1);

        return;
    }
    public java.lang.Object[] append(java.lang.Object[], java.lang.Object, int)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        java.lang.Object r1;
        int $i0, i1;
        java.lang.Object[] $r2;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r2 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        i1 = lengthof $r2;

        $i0 = i1 + $i0;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

     label1:
        if i1 >= $i0 goto label2;

        $r2[i1] = r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }
    public double[][] createDoubleMatrix(int, int)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        int $i0, $i1, i2, i3;
        double[][] r1;
        double[] $r2;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 = newarray (double[])[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r2 = newarray (double)[$i1];

        r1[i2] = $r2;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r2 = r1[i2];

        $r2[i3] = 0.0;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }
    public int[][] createIntMatrix(int, int)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        int $i0, $i1, i2, i3;
        int[][] r1;
        int[] $r2;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 = newarray (int[])[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r2 = newarray (int)[$i1];

        r1[i2] = $r2;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r2 = r1[i2];

        $r2[i3] = 0;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }
    public void formatMatrix(java.lang.String, int[][], java.lang.String)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        java.lang.String $r1, $r3;
        int[][] $r2;
        int[] r4;
        java.lang.StringBuilder r5;
        int $i0, $i1, i2, $i3;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: int[][];

        $r3 := @parameter2: java.lang.String;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        r4 = $r2[$i1];

        i2 = 0;

     label2:
        $i3 = lengthof r4;

        if i2 >= $i3 goto label3;

        $r6 = newarray (java.lang.Object)[1];

        $i3 = r4[i2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[0] = $r7;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r6);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r1, $r6);

        return;
    }
    public int nCols(int[][])
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        int[][] $r1;
        int $i0;
        int[] $r2;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r1 := @parameter0: int[][];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r2 = $r1[0];

        $i0 = lengthof $r2;

        return $i0;
    }
    public int nRows(int[][])
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        int[][] $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r1 := @parameter0: int[][];

        $i0 = lengthof $r1;

        return $i0;
    }
    public long[] stringToLongArray(java.lang.String)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        java.lang.String $r1;
        long[] r2;
        int $i0, $i1;
        java.lang.String[] $r3;
        long $l2;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(", ");

        $i0 = lengthof $r3;

        r2 = newarray (long)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r1 = $r3[$i0];

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        r2[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r2;
    }
    public int[][] toIntMatrix(double[][], int)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        double[][] $r1;
        int $i0, i1, i2, i4, i5, $i6;
        long $l3;
        int[][] r2;
        double[] $r3;
        int[] $r4;
        double $d0;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        $r1 := @parameter0: double[][];

        $i0 := @parameter1: int;

        i1 = lengthof $r1;

        if i1 != 0 goto label1;

        r2 = newarray (int[])[0];

        return r2;

     label1:
        $r3 = $r1[1];

        i2 = lengthof $r3;

        r2 = newarray (int[])[i1];

        i4 = 0;

     label2:
        if i4 >= i1 goto label7;

        $r4 = newarray (int)[i2];

        r2[i4] = $r4;

        i5 = 0;

     label3:
        if i5 >= i2 goto label6;

        if $i0 != 1 goto label5;

        $r4 = r2[i4];

        $r3 = $r1[i4];

        $d0 = $r3[i5];

        $l3 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i6 = (int) $l3;

        $r4[i5] = $i6;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r4 = r2[i4];

        $r3 = $r1[i4];

        $d0 = $r3[i5];

        $i6 = (int) $d0;

        $r4[i5] = $i6;

        goto label4;

     label6:
        i4 = i4 + 1;

        goto label2;

     label7:
        return r2;
    }
    public double[][] transposeMatrix(double[][])
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        int i0, i1, i2, i3;
        double[][] r1, r6;
        double[] $r2, $r7;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double $d0;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        r1 := @parameter0: double[][];

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        return r1;

     label1:
        i0 = lengthof r1;

        $r2 = r1[0];

        i1 = lengthof $r2;

        $r3 = newarray (int)[2];

        $r3[0] = i1;

        $r3[1] = i0;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (double[][]) $r5;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        $r2 = r6[i3];

        $r7 = r1[i2];

        $d0 = $r7[i3];

        $r2[i2] = $d0;

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        return r6;
    }
    public int[][] transposeMatrix(int[][])
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils r0;
        int i0, i1, i2, i3, $i4;
        int[][] r1, r5;
        int[] $r2, $r6;
        java.lang.Class $r3;
        java.lang.Object $r4;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$ArrayUtils;

        r1 := @parameter0: int[][];

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        return r1;

     label1:
        i0 = lengthof r1;

        $r2 = r1[0];

        i1 = lengthof $r2;

        $r2 = newarray (int)[2];

        $r2[0] = i1;

        $r2[1] = i0;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        $r2 = r5[i3];

        $r6 = r1[i2];

        $i4 = $r6[i3];

        $r2[i2] = $i4;

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        return r5;
    }
