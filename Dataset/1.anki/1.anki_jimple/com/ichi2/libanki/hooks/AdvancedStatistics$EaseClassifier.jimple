com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier extends java.lang.Object
private final io.requery.android.database.sqlite.SQLiteDatabase db
private final int[] priorMature
private final int[] priorNew
private final int[] priorYoung
private double[][] probabilities
private double[][] probabilitiesCumulative
private final java.lang.String queryBaseNew
private final java.lang.String queryBaseYoungMature
private final java.lang.String queryMature
private final java.lang.String queryNew
private final java.lang.String queryYoung
private final java.util.Random random
private com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome singleReviewOutcome
final com.ichi2.libanki.hooks.AdvancedStatistics this$0
    public void <init>(com.ichi2.libanki.hooks.AdvancedStatistics, io.requery.android.database.sqlite.SQLiteDatabase)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        com.ichi2.libanki.hooks.AdvancedStatistics $r1;
        io.requery.android.database.sqlite.SQLiteDatabase $r2;
        int[] $r3;
        com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome $r4;
        long $l0, $l1;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.Object[] $r7;
        double[][] $r8;
        double[] $r9;
        java.util.Random $r10;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: com.ichi2.libanki.hooks.AdvancedStatistics;

        $r2 := @parameter1: io.requery.android.database.sqlite.SQLiteDatabase;

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: com.ichi2.libanki.hooks.AdvancedStatistics this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 5;

        $r3[1] = 0;

        $r3[2] = 5;

        $r3[3] = 0;

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int[] priorNew> = $r3;

        $r3 = newarray (int)[4];

        $r3[0] = 1;

        $r3[1] = 0;

        $r3[2] = 9;

        $r3[3] = 0;

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int[] priorYoung> = $r3;

        $r3 = newarray (int)[4];

        $r3[0] = 1;

        $r3[1] = 0;

        $r3[2] = 9;

        $r3[3] = 0;

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int[] priorMature> = $r3;

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: java.lang.String queryBaseNew> = "select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, 0 as hard, sum(case when ease=2 then 1 else 0 end) as good, sum(case when ease=3 then 1 else 0 end) as easy from revlog ";

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: java.lang.String queryBaseYoungMature> = "select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, sum(case when ease=2 then 1 else 0 end) as hard, sum(case when ease=3 then 1 else 0 end) as good, sum(case when ease=4 then 1 else 0 end) as easy from revlog ";

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: java.lang.String queryNew> = "select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, 0 as hard, sum(case when ease=2 then 1 else 0 end) as good, sum(case when ease=3 then 1 else 0 end) as easy from revlog where type=0;";

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: java.lang.String queryYoung> = "select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, sum(case when ease=2 then 1 else 0 end) as hard, sum(case when ease=3 then 1 else 0 end) as good, sum(case when ease=4 then 1 else 0 end) as easy from revlog where type=1 and lastIvl < 21;";

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: java.lang.String queryMature> = "select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, sum(case when ease=2 then 1 else 0 end) as hard, sum(case when ease=3 then 1 else 0 end) as good, sum(case when ease=4 then 1 else 0 end) as easy from revlog where type=1 and lastIvl >= 21;";

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: io.requery.android.database.sqlite.SQLiteDatabase db> = $r2;

        $r4 = new com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome;

        specialinvoke $r4.<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: void <init>(com.ichi2.libanki.hooks.AdvancedStatistics,com.ichi2.libanki.hooks.AdvancedStatistics$Card,double)>($r1, null, 0.0);

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome singleReviewOutcome> = $r4;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: void calculateCumProbabilitiesForNewEasePerCurrentEase()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calculating probability distributions took: ");

        $l0 = $l1 - $l0;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new\t\t");

        $r8 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r9 = $r8[0];

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("young\t\t");

        $r8 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r9 = $r8[1];

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mature\t");

        $r8 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r9 = $r8[2];

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cumulative new\t\t");

        $r8 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative>;

        $r9 = $r8[0];

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cumulative young\t\t");

        $r8 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative>;

        $r9 = $r8[1];

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cumulative mature\t");

        $r8 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative>;

        $r9 = $r8[2];

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r10 = new java.util.Random;

        specialinvoke $r10.<java.util.Random: void <init>()>();

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: java.util.Random random> = $r10;

        return;
    }
    private void applyOutcomeToCard(com.ichi2.libanki.hooks.AdvancedStatistics$Card, int)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        com.ichi2.libanki.hooks.AdvancedStatistics$Card $r1;
        int $i0, $i1, $i2;
        double $d0, $d1;
        byte $b3;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: com.ichi2.libanki.hooks.AdvancedStatistics$Card;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.hooks.AdvancedStatistics$Card: int getType()>();

        $i2 = virtualinvoke $r1.<com.ichi2.libanki.hooks.AdvancedStatistics$Card: int getIvl()>();

        $d0 = virtualinvoke $r1.<com.ichi2.libanki.hooks.AdvancedStatistics$Card: double getFactor()>();

        if $i1 != 0 goto label4;

        if $i0 > 2 goto label3;

        $i1 = 1;

     label1:
        virtualinvoke $r1.<com.ichi2.libanki.hooks.AdvancedStatistics$Card: void setIvl(int)>($i1);

        if $i0 <= 0 goto label9;

        $b3 = 1;

     label2:
        virtualinvoke $r1.<com.ichi2.libanki.hooks.AdvancedStatistics$Card: void setCorrect(int)>($b3);

        return;

     label3:
        $i1 = 4;

        goto label1;

     label4:
        lookupswitch($i0)
        {
            case 0: goto label6;
            case 1: goto label7;
            case 2: goto label8;
            default: goto label5;
        };

     label5:
        $d1 = (double) $i2;

        $d0 = 2.4 * $d0;

        $d0 = $d1 * $d0;

        $i1 = (int) $d0;

        goto label1;

     label6:
        $i1 = 1;

        goto label1;

     label7:
        $d0 = (double) $i2;

        $d0 = $d0 * 1.2;

        $i1 = (int) $d0;

        goto label1;

     label8:
        $d1 = (double) $i2;

        $d0 = 1.2 * $d0;

        $d0 = $d1 * $d0;

        $i1 = (int) $d0;

        goto label1;

     label9:
        $b3 = 0;

        goto label2;
    }
    private void calculateCumProbabilitiesForNewEasePerCurrentEase()
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        double[][] $r1, $r4;
        int[] $r2;
        double[] $r3;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 = newarray (double[])[3];

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities> = $r1;

        $r1 = newarray (double[])[3];

        r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative> = $r1;

        $r1 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r2 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int[] priorNew>;

        $r3 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[] calculateProbabilitiesForNewEaseForCurrentEase(java.lang.String,int[])>("select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, 0 as hard, sum(case when ease=2 then 1 else 0 end) as good, sum(case when ease=3 then 1 else 0 end) as easy from revlog where type=0;", $r2);

        $r1[0] = $r3;

        $r1 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r2 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int[] priorYoung>;

        $r3 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[] calculateProbabilitiesForNewEaseForCurrentEase(java.lang.String,int[])>("select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, sum(case when ease=2 then 1 else 0 end) as hard, sum(case when ease=3 then 1 else 0 end) as good, sum(case when ease=4 then 1 else 0 end) as easy from revlog where type=1 and lastIvl < 21;", $r2);

        $r1[1] = $r3;

        $r1 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r2 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int[] priorMature>;

        $r3 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[] calculateProbabilitiesForNewEaseForCurrentEase(java.lang.String,int[])>("select count() as N, sum(case when ease=1 then 1 else 0 end) as repeat, sum(case when ease=2 then 1 else 0 end) as hard, sum(case when ease=3 then 1 else 0 end) as good, sum(case when ease=4 then 1 else 0 end) as easy from revlog where type=1 and lastIvl >= 21;", $r2);

        $r1[2] = $r3;

        $r1 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative>;

        $r4 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r3 = $r4[0];

        $r3 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[] cumsum(double[])>($r3);

        $r1[0] = $r3;

        $r1 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative>;

        $r4 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r3 = $r4[1];

        $r3 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[] cumsum(double[])>($r3);

        $r1[1] = $r3;

        $r1 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative>;

        $r4 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r3 = $r4[2];

        $r3 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[] cumsum(double[])>($r3);

        $r1[2] = $r3;

        return;
    }
    private double[] calculateProbabilitiesForNewEaseForCurrentEase(java.lang.String, int[])
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        java.lang.String $r1;
        int[] $r2, r3;
        android.database.Cursor r4, $r6;
        int $i0, $i1, $i2;
        io.requery.android.database.sqlite.SQLiteDatabase $r5;
        boolean $z0;
        double[] $r7;
        double $d0, $d1;
        java.lang.Throwable $r8;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: int[];

        r4 = null;

        r3 = newarray (int)[4];

        $i0 = $r2[0];

        r3[0] = $i0;

        $i0 = $r2[1];

        r3[1] = $i0;

        $i0 = $r2[2];

        r3[2] = $i0;

        $i0 = $r2[3];

        r3[3] = $i0;

        $i0 = $r2[0];

        $i1 = $r2[1];

        $i0 = $i0 + $i1;

        $i1 = $r2[2];

        $i0 = $i0 + $i1;

        $i1 = $r2[3];

        $i0 = $i0 + $i1;

     label01:
        $r5 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: io.requery.android.database.sqlite.SQLiteDatabase db>;

        $r6 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r1, null);

     label02:
        r4 = $r6;

     label03:
        interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

        $i1 = r3[0];

        $i2 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>(1);

     label04:
        $i1 = $i1 + $i2;

     label05:
        r3[0] = $i1;

        $i1 = r3[1];

        $i2 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>(2);

     label06:
        $i1 = $i1 + $i2;

     label07:
        r3[1] = $i1;

        $i1 = r3[2];

        $i2 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>(3);

     label08:
        $i1 = $i1 + $i2;

     label09:
        r3[2] = $i1;

        $i1 = r3[3];

        $i2 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>(4);

     label10:
        $i1 = $i1 + $i2;

     label11:
        r3[3] = $i1;

        $i1 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>(0);

     label12:
        $i0 = $i0 + $i1;

        if $r6 == null goto label13;

        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label13;

        interfaceinvoke $r6.<android.database.Cursor: void close()>();

     label13:
        $r7 = newarray (double)[4];

        $i1 = r3[0];

        $d0 = (double) $i1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $r7[0] = $d0;

        $i1 = r3[1];

        $d0 = (double) $i1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $r7[1] = $d0;

        $i1 = r3[2];

        $d0 = (double) $i1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $r7[2] = $d0;

        $i1 = r3[3];

        $d0 = (double) $i1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $r7[3] = $d0;

        return $r7;

     label14:
        $r8 := @caughtexception;

        if r4 == null goto label15;

        $z0 = interfaceinvoke r4.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label15;

        interfaceinvoke r4.<android.database.Cursor: void close()>();

     label15:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
    }
    private double[] cumsum(double[])
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        double[] $r1, r2;
        double $d0, $d1;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: double[];

        r2 = newarray (double)[4];

        $d0 = $r1[0];

        r2[0] = $d0;

        $d0 = r2[0];

        $d1 = $r1[1];

        $d0 = $d0 + $d1;

        r2[1] = $d0;

        $d0 = r2[1];

        $d1 = $r1[2];

        $d0 = $d0 + $d1;

        r2[2] = $d0;

        $d0 = r2[2];

        $d1 = $r1[3];

        $d0 = $d0 + $d1;

        r2[3] = $d0;

        return r2;
    }
    private int draw(double[])
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        double[] $r1;
        java.util.Random $r2;
        double $d0;
        int $i0;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: double[];

        $r2 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: java.util.Random random>;

        $d0 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $i0 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int searchsorted(double[],double)>($r1, $d0);

        return $i0;
    }
    private int searchsorted(double[], double)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        double[] $r1;
        double $d0, $d1;
        byte $b0;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $d1 = $r1[0];

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label1;

        return 0;

     label1:
        $d1 = $r1[1];

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label2;

        return 1;

     label2:
        $d1 = $r1[2];

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label3;

        return 2;

     label3:
        return 3;
    }
    public com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome simSingleReview(com.ichi2.libanki.hooks.AdvancedStatistics$Card)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        com.ichi2.libanki.hooks.AdvancedStatistics$Card $r1;
        int $i0;
        double[][] $r2;
        double[] $r3;
        com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome $r4;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: com.ichi2.libanki.hooks.AdvancedStatistics$Card;

        $i0 = virtualinvoke $r1.<com.ichi2.libanki.hooks.AdvancedStatistics$Card: int getType()>();

        $r2 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilitiesCumulative>;

        $r3 = $r2[$i0];

        $i0 = specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: int draw(double[])>($r3);

        specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: void applyOutcomeToCard(com.ichi2.libanki.hooks.AdvancedStatistics$Card,int)>($r1, $i0);

        $r4 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome singleReviewOutcome>;

        virtualinvoke $r4.<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: void setAll(com.ichi2.libanki.hooks.AdvancedStatistics$Card,double)>($r1, 1.0);

        $r4 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome singleReviewOutcome>;

        return $r4;
    }
    public com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome simSingleReview(com.ichi2.libanki.hooks.AdvancedStatistics$Card, int)
    {
        com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier r0;
        com.ichi2.libanki.hooks.AdvancedStatistics$Card $r1;
        int $i0, $i1;
        com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome $r2;
        double[][] $r3;
        double[] $r4;
        double $d0;

        r0 := @this: com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier;

        $r1 := @parameter0: com.ichi2.libanki.hooks.AdvancedStatistics$Card;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<com.ichi2.libanki.hooks.AdvancedStatistics$Card: int getType()>();

        specialinvoke r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: void applyOutcomeToCard(com.ichi2.libanki.hooks.AdvancedStatistics$Card,int)>($r1, $i0);

        $r2 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome singleReviewOutcome>;

        $r3 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: double[][] probabilities>;

        $r4 = $r3[$i1];

        $d0 = $r4[$i0];

        virtualinvoke $r2.<com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome: void setAll(com.ichi2.libanki.hooks.AdvancedStatistics$Card,double)>($r1, $d0);

        $r2 = r0.<com.ichi2.libanki.hooks.AdvancedStatistics$EaseClassifier: com.ichi2.libanki.hooks.AdvancedStatistics$ReviewOutcome singleReviewOutcome>;

        return $r2;
    }
