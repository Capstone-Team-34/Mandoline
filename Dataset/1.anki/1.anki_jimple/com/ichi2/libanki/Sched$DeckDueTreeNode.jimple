com.ichi2.libanki.Sched$DeckDueTreeNode extends java.lang.Object implements java.lang.Comparable
public java.util.List children
public int depth
public long did
public int lrnCount
public java.lang.String[] names
public int newCount
public int revCount
final com.ichi2.libanki.Sched this$0
    public void <init>(com.ichi2.libanki.Sched, java.lang.String, long, int, int, int)
    {
        com.ichi2.libanki.Sched$DeckDueTreeNode r0;
        com.ichi2.libanki.Sched $r1;
        java.lang.String $r2;
        long $l0;
        int $i1, $i2, $i3;
        java.lang.String[] $r3;

        r0 := @this: com.ichi2.libanki.Sched$DeckDueTreeNode;

        $r1 := @parameter0: com.ichi2.libanki.Sched;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r2;

        specialinvoke r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: void <init>(com.ichi2.libanki.Sched,java.lang.String[],long,int,int,int)>($r1, $r3, $l0, $i1, $i2, $i3);

        return;
    }
    public void <init>(com.ichi2.libanki.Sched, java.lang.String, long, int, int, int, java.util.List)
    {
        com.ichi2.libanki.Sched$DeckDueTreeNode r0;
        com.ichi2.libanki.Sched $r1;
        java.lang.String $r2;
        long $l0;
        int $i1, $i2, $i3;
        java.util.List r3;
        java.lang.String[] $r4;

        r0 := @this: com.ichi2.libanki.Sched$DeckDueTreeNode;

        $r1 := @parameter0: com.ichi2.libanki.Sched;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        r3 := @parameter6: java.util.List;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r2;

        specialinvoke r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: void <init>(com.ichi2.libanki.Sched,java.lang.String[],long,int,int,int)>($r1, $r4, $l0, $i1, $i2, $i3);

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children> = r3;

        return;
    }
    public void <init>(com.ichi2.libanki.Sched, java.lang.String[], long, int, int, int)
    {
        com.ichi2.libanki.Sched$DeckDueTreeNode r0;
        com.ichi2.libanki.Sched $r1;
        java.lang.String[] $r2;
        long $l0;
        int $i1, $i2, $i3;
        java.util.ArrayList $r3;

        r0 := @this: com.ichi2.libanki.Sched$DeckDueTreeNode;

        $r1 := @parameter0: com.ichi2.libanki.Sched;

        $r2 := @parameter1: java.lang.String[];

        $l0 := @parameter2: long;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: com.ichi2.libanki.Sched this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children> = $r3;

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names> = $r2;

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did> = $l0;

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount> = $i1;

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount> = $i2;

        r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount> = $i3;

        return;
    }
    public int compareTo(java.lang.Object)
    {
        com.ichi2.libanki.Sched$DeckDueTreeNode r0, r2;
        java.lang.Object $r1;
        int $i0, i1;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5;

        r0 := @this: com.ichi2.libanki.Sched$DeckDueTreeNode;

        $r1 := @parameter0: java.lang.Object;

        r2 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r1;

        i1 = 0;

     label1:
        $r3 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r3 = r2.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r3 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r4 = $r3[i1];

        $r3 = r2.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r5 = $r3[i1];

        $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r5);

        if $i0 != 0 goto label4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r2.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        i1 = lengthof $r3;

        $r3 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $i0 = lengthof $r3;

        if i1 <= $i0 goto label3;

        return -1;

     label3:
        return 1;

     label4:
        return $i0;
    }
    public java.lang.String toString()
    {
        com.ichi2.libanki.Sched$DeckDueTreeNode r0;
        java.util.Locale $r1;
        java.lang.Object[] $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        long $l0;
        java.lang.Long $r5;
        int $i1;
        java.lang.Integer $r6;
        java.util.List $r7;

        r0 := @this: com.ichi2.libanki.Sched$DeckDueTreeNode;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[7];

        $r3 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        $r2[0] = $r4;

        $l0 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[1] = $r5;

        $i1 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: int depth>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[2] = $r6;

        $i1 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[3] = $r6;

        $i1 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[4] = $r6;

        $i1 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[5] = $r6;

        $r7 = r0.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children>;

        $r2[6] = $r7;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%s, %d, %d, %d, %d, %d, %s", $r2);

        return $r4;
    }
