com.ichi2.libanki.sync.Syncer extends java.lang.Object
public static final int TYPE_BLOB
public static final int TYPE_FLOAT
public static final int TYPE_INTEGER
public static final int TYPE_NULL
public static final int TYPE_STRING
com.ichi2.libanki.Collection mCol
private android.database.Cursor mCursor
long mLMod
boolean mLNewer
long mLScm
int mMaxUsn
int mMinUsn
org.json.JSONObject mRChg
long mRMod
long mRScm
com.ichi2.libanki.sync.HttpSyncer mServer
java.lang.String mSyncMsg
private java.util.LinkedList mTablesLeft
    public void <init>(com.ichi2.libanki.Collection, com.ichi2.libanki.sync.HttpSyncer)
    {
        com.ichi2.libanki.sync.Syncer r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.sync.HttpSyncer $r2;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        $r2 := @parameter1: com.ichi2.libanki.sync.HttpSyncer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol> = $r1;

        r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer> = $r2;

        return;
    }
    private java.util.List columnTypesForQuery(java.lang.String)
    {
        com.ichi2.libanki.sync.Syncer r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Integer[] $r2;
        java.lang.Integer $r3;
        java.util.List $r4;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("revlog");

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Integer)[9];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[2] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[3] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[4] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[5] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[6] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[7] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[8] = $r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r4;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("cards");

        if $z0 == 0 goto label2;

        $r2 = newarray (java.lang.Integer)[18];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[2] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[3] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[4] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[5] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[6] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[7] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[8] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[9] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[10] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[11] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[12] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[13] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[14] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[15] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[16] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[17] = $r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r4;

     label2:
        $r2 = newarray (java.lang.Integer)[11];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[1] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[2] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[3] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[4] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[5] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[6] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[7] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[8] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[9] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[10] = $r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r4;
    }
    private android.database.Cursor cursorForTable(java.lang.String)
    {
        com.ichi2.libanki.sync.Syncer r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.DB $r4;
        io.requery.android.database.sqlite.SQLiteDatabase $r5;
        java.util.Locale $r6;
        java.lang.Object[] $r7;
        int $i0;
        java.lang.Integer $r8;
        android.database.Cursor $r9;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: java.lang.String usnLim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("revlog");

        if $z0 == 0 goto label1;

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r7 = newarray (java.lang.Object)[2];

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7[0] = $r8;

        $r7[1] = $r2;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "SELECT id, cid, %d, ease, ivl, lastIvl, factor, time, type FROM revlog WHERE %s", $r7);

        $r9 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r1, null);

        return $r9;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("cards");

        if $z0 == 0 goto label2;

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r7 = newarray (java.lang.Object)[2];

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7[0] = $r8;

        $r7[1] = $r2;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "SELECT id, nid, did, ord, mod, %d, type, queue, due, ivl, factor, reps, lapses, left, odue, odid, flags, data FROM cards WHERE %s", $r7);

        $r9 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r1, null);

        return $r9;

     label2:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r7 = newarray (java.lang.Object)[2];

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7[0] = $r8;

        $r7[1] = $r2;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "SELECT id, guid, mid, mod, %d, tags, flds, \'\', \'\', flags, data FROM notes WHERE %s", $r7);

        $r9 = virtualinvoke $r5.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r1, null);

        return $r9;
    }
    private long finish(long)
    {
        com.ichi2.libanki.sync.Syncer r0;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Collection $r1;
        int $i2;
        com.ichi2.libanki.DB $r2;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

     label1:
        $r1 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r1.<com.ichi2.libanki.Collection: void setLs(long)>($l0);

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $i2 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

        $i2 = $i2 + 1;

        virtualinvoke $r1.<com.ichi2.libanki.Collection: void setUsnAfterSync(int)>($i2);

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r2.<com.ichi2.libanki.DB: void setMod(boolean)>(1);

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r1.<com.ichi2.libanki.Collection: void save(java.lang.String,long)>(null, $l0);

        return $l0;
    }
    private org.json.JSONObject getConf()
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject $r1;
        com.ichi2.libanki.Collection $r2;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r1 = virtualinvoke $r2.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        return $r1;
    }
    private org.json.JSONArray getDecks()
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONException r1;
        org.json.JSONArray r2, r4, r11;
        com.ichi2.libanki.Collection $r3;
        boolean $z0;
        com.ichi2.libanki.Decks $r5;
        java.util.ArrayList $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.json.JSONObject r9;
        int $i0, $i1;
        java.lang.RuntimeException $r10;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r2 = new org.json.JSONArray;

        specialinvoke r2.<org.json.JSONArray: void <init>()>();

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label01:
        $z0 = virtualinvoke $r3.<com.ichi2.libanki.Collection: boolean getServer()>();

     label02:
        if $z0 == 0 goto label29;

        r4 = new org.json.JSONArray;

     label03:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

     label04:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label05:
        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 == 0 goto label15;

     label08:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label09:
        r9 = (org.json.JSONObject) $r8;

     label10:
        $i0 = virtualinvoke r9.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label11:
        $i1 = r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn>;

        if $i0 < $i1 goto label06;

     label12:
        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r9);

     label13:
        goto label06;

     label14:
        r1 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r10;

     label15:
        r11 = new org.json.JSONArray;

     label16:
        specialinvoke r11.<org.json.JSONArray: void <init>()>();

     label17:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label18:
        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.ArrayList allConf()>();

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label19:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label20:
        if $z0 == 0 goto label27;

     label21:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label22:
        r9 = (org.json.JSONObject) $r8;

     label23:
        $i0 = virtualinvoke r9.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label24:
        $i1 = r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn>;

        if $i0 < $i1 goto label19;

     label25:
        virtualinvoke r11.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r9);

     label26:
        goto label19;

     label27:
        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r4);

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r11);

     label28:
        return r2;

     label29:
        r4 = new org.json.JSONArray;

     label30:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

     label31:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label32:
        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label33:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label34:
        if $z0 == 0 goto label41;

     label35:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label36:
        r9 = (org.json.JSONObject) $r8;

     label37:
        $i0 = virtualinvoke r9.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label38:
        if $i0 != -1 goto label33;

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

     label39:
        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i0);

        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r9);

     label40:
        goto label33;

     label41:
        r11 = new org.json.JSONArray;

     label42:
        specialinvoke r11.<org.json.JSONArray: void <init>()>();

     label43:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label44:
        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.ArrayList allConf()>();

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label45:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label46:
        if $z0 == 0 goto label53;

     label47:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label48:
        r9 = (org.json.JSONObject) $r8;

     label49:
        $i0 = virtualinvoke r9.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label50:
        if $i0 != -1 goto label45;

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

     label51:
        virtualinvoke r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i0);

        virtualinvoke r11.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r9);

     label52:
        goto label45;

     label53:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label54:
        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r5.<com.ichi2.libanki.Decks: void save()>();

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r4);

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r11);

     label55:
        return r2;

        catch org.json.JSONException from label01 to label02 with label14;
        catch org.json.JSONException from label03 to label04 with label14;
        catch org.json.JSONException from label05 to label07 with label14;
        catch org.json.JSONException from label08 to label09 with label14;
        catch org.json.JSONException from label10 to label11 with label14;
        catch org.json.JSONException from label12 to label13 with label14;
        catch org.json.JSONException from label16 to label17 with label14;
        catch org.json.JSONException from label18 to label20 with label14;
        catch org.json.JSONException from label21 to label22 with label14;
        catch org.json.JSONException from label23 to label24 with label14;
        catch org.json.JSONException from label25 to label26 with label14;
        catch org.json.JSONException from label27 to label28 with label14;
        catch org.json.JSONException from label30 to label31 with label14;
        catch org.json.JSONException from label32 to label34 with label14;
        catch org.json.JSONException from label35 to label36 with label14;
        catch org.json.JSONException from label37 to label38 with label14;
        catch org.json.JSONException from label39 to label40 with label14;
        catch org.json.JSONException from label42 to label43 with label14;
        catch org.json.JSONException from label44 to label46 with label14;
        catch org.json.JSONException from label47 to label48 with label14;
        catch org.json.JSONException from label49 to label50 with label14;
        catch org.json.JSONException from label51 to label52 with label14;
        catch org.json.JSONException from label54 to label55 with label14;
    }
    private org.json.JSONArray getModels()
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONException r1;
        org.json.JSONArray r2;
        com.ichi2.libanki.Collection $r3;
        boolean $z0;
        com.ichi2.libanki.Models $r4;
        java.util.ArrayList $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        org.json.JSONObject r8;
        int $i0, $i1;
        java.lang.RuntimeException $r9;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r2 = new org.json.JSONArray;

        specialinvoke r2.<org.json.JSONArray: void <init>()>();

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label01:
        $z0 = virtualinvoke $r3.<com.ichi2.libanki.Collection: boolean getServer()>();

     label02:
        if $z0 == 0 goto label13;

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label03:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label25;

     label06:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label07:
        r8 = (org.json.JSONObject) $r7;

     label08:
        $i0 = virtualinvoke r8.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label09:
        $i1 = r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn>;

        if $i0 < $i1 goto label04;

     label10:
        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r8);

     label11:
        goto label04;

     label12:
        r1 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r9;

     label13:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label14:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label16:
        if $z0 == 0 goto label23;

     label17:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label18:
        r8 = (org.json.JSONObject) $r7;

     label19:
        $i0 = virtualinvoke r8.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label20:
        if $i0 != -1 goto label15;

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

     label21:
        virtualinvoke r8.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i0);

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r8);

     label22:
        goto label15;

     label23:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label24:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r4.<com.ichi2.libanki.Models: void save()>();

     label25:
        return r2;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
        catch org.json.JSONException from label14 to label16 with label12;
        catch org.json.JSONException from label17 to label18 with label12;
        catch org.json.JSONException from label19 to label20 with label12;
        catch org.json.JSONException from label21 to label22 with label12;
        catch org.json.JSONException from label24 to label25 with label12;
    }
    private org.json.JSONArray getTags()
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray r1;
        com.ichi2.libanki.Collection $r2;
        boolean $z0;
        com.ichi2.libanki.Tags $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.Integer $r8;
        int $i0, $i1;
        java.lang.String r9, $r10;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r1 = new org.json.JSONArray;

        specialinvoke r1.<org.json.JSONArray: void <init>()>();

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $z0 = virtualinvoke $r2.<com.ichi2.libanki.Collection: boolean getServer()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Tags: java.util.Set allItems()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i1 = r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn>;

        if $i0 < $i1 goto label1;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Tags: java.util.Set allItems()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i0 != -1 goto label3;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) $r6;

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r6;

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r3.<com.ichi2.libanki.Tags: void add(java.lang.String,java.lang.Integer)>($r10, $r8);

        virtualinvoke r1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r9);

        goto label3;

     label4:
        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        virtualinvoke $r3.<com.ichi2.libanki.Tags: void save()>();

     label5:
        return r1;
    }
    private void mergeCards(org.json.JSONArray)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray $r1;
        java.util.ArrayList $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Object[] r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.DB $r7;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONArray;

        $r2 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: java.util.ArrayList newerRows(org.json.JSONArray,java.lang.String,int)>($r1, "cards", 4);

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Object[]) $r4;

        $r6 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r7.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>("INSERT OR REPLACE INTO cards VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", r5);

        goto label1;

     label2:
        return;
    }
    private void mergeConf(org.json.JSONObject)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject $r1;
        com.ichi2.libanki.Collection $r2;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void setConf(org.json.JSONObject)>($r1);

        return;
    }
    private void mergeDecks(org.json.JSONArray)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray $r1, $r3;
        org.json.JSONException r2;
        int i0, $i1;
        org.json.JSONObject $r4, $r7;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Decks $r6;
        long $l2, $l3;
        byte $b4;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONArray;

     label01:
        $r3 = virtualinvoke $r1.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(0);

     label02:
        i0 = 0;

     label03:
        $i1 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label04:
        if i0 >= $i1 goto label14;

     label05:
        $r4 = virtualinvoke $r3.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

     label06:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label07:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l2 = virtualinvoke $r4.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject get(long,boolean)>($l2, 0);

     label08:
        if $r7 == null goto label11;

     label09:
        $l2 = virtualinvoke $r4.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

        $l3 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

     label10:
        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label13;

     label11:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label12:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void update(org.json.JSONObject)>($r4);

     label13:
        i0 = i0 + 1;

        goto label03;

     label14:
        $r1 = virtualinvoke $r1.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(1);

     label15:
        i0 = 0;

     label16:
        $i1 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

     label17:
        if i0 >= $i1 goto label28;

     label18:
        $r4 = virtualinvoke $r1.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

     label19:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label20:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l2 = virtualinvoke $r4.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l2);

     label21:
        if $r7 == null goto label24;

     label22:
        $l2 = virtualinvoke $r4.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

        $l3 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

     label23:
        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label26;

     label24:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label25:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void updateConf(org.json.JSONObject)>($r4);

     label26:
        i0 = i0 + 1;

        goto label16;

     label27:
        r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

     label28:
        return;

        catch org.json.JSONException from label01 to label02 with label27;
        catch org.json.JSONException from label03 to label04 with label27;
        catch org.json.JSONException from label05 to label06 with label27;
        catch org.json.JSONException from label07 to label08 with label27;
        catch org.json.JSONException from label09 to label10 with label27;
        catch org.json.JSONException from label12 to label13 with label27;
        catch org.json.JSONException from label14 to label15 with label27;
        catch org.json.JSONException from label16 to label17 with label27;
        catch org.json.JSONException from label18 to label19 with label27;
        catch org.json.JSONException from label20 to label21 with label27;
        catch org.json.JSONException from label22 to label23 with label27;
        catch org.json.JSONException from label25 to label26 with label27;
    }
    private void mergeModels(org.json.JSONArray)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray $r1;
        org.json.JSONException r2;
        int i0, $i1;
        org.json.JSONObject $r3, $r6;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Models $r5;
        long $l2, $l3;
        byte $b4;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONArray;

        i0 = 0;

     label01:
        $i1 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

        if i0 >= $i1 goto label12;

     label02:
        $r3 = virtualinvoke $r1.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

     label03:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label04:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l2 = virtualinvoke $r3.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l2);

     label05:
        if $r6 == null goto label08;

     label06:
        $l2 = virtualinvoke $r3.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

        $l3 = virtualinvoke $r6.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

     label07:
        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label10;

     label08:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label09:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r5.<com.ichi2.libanki.Models: void update(org.json.JSONObject)>($r3);

     label10:
        i0 = i0 + 1;

        goto label01;

     label11:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

     label12:
        return;

        catch org.json.JSONException from label02 to label03 with label11;
        catch org.json.JSONException from label04 to label05 with label11;
        catch org.json.JSONException from label06 to label07 with label11;
        catch org.json.JSONException from label09 to label10 with label11;
    }
    private void mergeNotes(org.json.JSONArray)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray $r1;
        long[] $r2;
        java.util.ArrayList $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Object[] r6;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.DB $r8;
        java.lang.Number $r9;
        long $l0;
        java.lang.Long $r10;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONArray;

        $r3 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: java.util.ArrayList newerRows(org.json.JSONArray,java.lang.String,int)>($r1, "notes", 4);

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Object[]) $r5;

        $r7 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r8.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>("INSERT OR REPLACE INTO notes VALUES (?,?,?,?,?,?,?,?,?,?,?)", r6);

        $r7 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r2 = newarray (long)[1];

        $r5 = r6[0];

        $r9 = (java.lang.Number) $r5;

        $l0 = virtualinvoke $r9.<java.lang.Number: long longValue()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l0 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $r2[0] = $l0;

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void updateFieldCache(long[])>($r2);

        goto label1;

     label2:
        return;
    }
    private void mergeRevlog(org.json.JSONArray)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray $r1, $r4;
        int i0, $i1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.DB $r3;
        java.lang.Object[] $r5;
        java.lang.Exception r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONArray;

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

        if i0 >= $i1 goto label7;

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label2:
        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r4 = virtualinvoke $r1.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(i0);

        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.Object[] jsonArray2Objects(org.json.JSONArray)>($r4);

        virtualinvoke $r3.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>("INSERT OR IGNORE INTO revlog VALUES (?,?,?,?,?,?,?,?,?)", $r5);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        r6 := @caughtexception;

     label5:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r6);

        throw $r7;

     label6:
        r6 := @caughtexception;

        goto label5;

     label7:
        return;

        catch android.database.SQLException from label2 to label3 with label4;
        catch org.json.JSONException from label2 to label3 with label6;
    }
    private void mergeTags(org.json.JSONArray)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray $r1;
        org.json.JSONException r2;
        java.util.ArrayList r3;
        int i0, $i1;
        java.lang.String $r4;
        java.lang.RuntimeException $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Tags $r7;
        java.lang.Integer $r8;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONArray;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

        if i0 >= $i1 goto label5;

     label2:
        $r4 = virtualinvoke $r1.<org.json.JSONArray: java.lang.String getString(int)>(i0);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

     label5:
        $r6 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r7.<com.ichi2.libanki.Tags: void register(java.lang.Iterable,java.lang.Integer)>(r3, $r8);

        return;

        catch org.json.JSONException from label2 to label3 with label4;
    }
    private java.util.ArrayList newerRows(org.json.JSONArray, java.lang.String, int)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray $r1, $r7;
        java.lang.String $r2, $r13;
        int $i0, $i1, $i2;
        org.json.JSONException r3;
        long[] r4;
        java.util.HashMap r5;
        java.util.ArrayList r6;
        long $l3, $l4;
        android.database.Cursor r8, $r14;
        com.ichi2.libanki.Collection $r9;
        com.ichi2.libanki.DB $r10;
        io.requery.android.database.sqlite.SQLiteDatabase $r11;
        java.lang.StringBuilder $r12;
        boolean $z0;
        java.lang.Long $r15, $r16;
        java.lang.Throwable $r17;
        java.lang.RuntimeException $r18;
        java.lang.Object $r19;
        byte $b5;
        java.lang.Object[] $r20;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONArray;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

        r4 = newarray (long)[$i1];

        $i1 = 0;

     label01:
        $i2 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

     label02:
        if $i1 >= $i2 goto label05;

     label03:
        $r7 = virtualinvoke $r1.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>($i1);

        $l3 = virtualinvoke $r7.<org.json.JSONArray: long getLong(int)>(0);

     label04:
        r4[$i1] = $l3;

        $i1 = $i1 + 1;

        goto label01;

     label05:
        r5 = new java.util.HashMap;

     label06:
        specialinvoke r5.<java.util.HashMap: void <init>()>();

     label07:
        r8 = null;

     label08:
        $r9 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id, mod FROM ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE id IN ");

        $r13 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>(r4);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

        $r13 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: java.lang.String usnLim()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r11.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r13, null);

     label09:
        r8 = $r14;

     label10:
        $z0 = interfaceinvoke $r14.<android.database.Cursor: boolean moveToNext()>();

     label11:
        if $z0 == 0 goto label20;

     label12:
        $l3 = interfaceinvoke $r14.<android.database.Cursor: long getLong(int)>(0);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $l3 = interfaceinvoke $r14.<android.database.Cursor: long getLong(int)>(1);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

     label13:
        goto label10;

     label14:
        $r17 := @caughtexception;

        if r8 == null goto label18;

     label15:
        $z0 = interfaceinvoke r8.<android.database.Cursor: boolean isClosed()>();

     label16:
        if $z0 != 0 goto label18;

     label17:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label18:
        throw $r17;

     label19:
        r3 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r18;

     label20:
        if $r14 == null goto label24;

     label21:
        $z0 = interfaceinvoke $r14.<android.database.Cursor: boolean isClosed()>();

     label22:
        if $z0 != 0 goto label24;

     label23:
        interfaceinvoke $r14.<android.database.Cursor: void close()>();

     label24:
        r6 = new java.util.ArrayList;

     label25:
        specialinvoke r6.<java.util.ArrayList: void <init>()>();

     label26:
        $i1 = 0;

     label27:
        $i2 = virtualinvoke $r1.<org.json.JSONArray: int length()>();

     label28:
        if $i1 >= $i2 goto label37;

     label29:
        $r7 = virtualinvoke $r1.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>($i1);

        $l3 = virtualinvoke $r7.<org.json.JSONArray: long getLong(int)>(0);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $z0 = virtualinvoke r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r15);

     label30:
        if $z0 == 0 goto label35;

     label31:
        $l3 = virtualinvoke $r7.<org.json.JSONArray: long getLong(int)>(0);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r19 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r15);

     label32:
        $r15 = (java.lang.Long) $r19;

     label33:
        $l3 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

        $l4 = virtualinvoke $r7.<org.json.JSONArray: long getLong(int)>($i0);

     label34:
        $b5 = $l3 cmp $l4;

        if $b5 >= 0 goto label36;

     label35:
        $r20 = staticinvoke <com.ichi2.libanki.Utils: java.lang.Object[] jsonArray2Objects(org.json.JSONArray)>($r7);

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

     label36:
        $i1 = $i1 + 1;

        goto label27;

     label37:
        $r9 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r20 = newarray (java.lang.Object)[2];

        $r20[0] = $r2;

        $r20[1] = $r1;

     label38:
        virtualinvoke $r9.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r20);

     label39:
        return r6;

        catch org.json.JSONException from label01 to label02 with label19;
        catch org.json.JSONException from label03 to label04 with label19;
        catch org.json.JSONException from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch org.json.JSONException from label15 to label16 with label19;
        catch org.json.JSONException from label17 to label19 with label19;
        catch org.json.JSONException from label21 to label22 with label19;
        catch org.json.JSONException from label23 to label24 with label19;
        catch org.json.JSONException from label25 to label26 with label19;
        catch org.json.JSONException from label27 to label28 with label19;
        catch org.json.JSONException from label29 to label30 with label19;
        catch org.json.JSONException from label31 to label32 with label19;
        catch org.json.JSONException from label33 to label34 with label19;
        catch org.json.JSONException from label35 to label36 with label19;
        catch org.json.JSONException from label38 to label39 with label19;
    }
    private void prepareToChunk()
    {
        com.ichi2.libanki.sync.Syncer r0;
        java.util.LinkedList $r1;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft> = $r1;

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft>;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>("revlog");

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft>;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>("cards");

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft>;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>("notes");

        r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor> = null;

        return;
    }
    private void publishProgress(com.ichi2.async.Connection, int)
    {
        com.ichi2.libanki.sync.Syncer r0;
        com.ichi2.async.Connection $r1;
        int $i0;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: com.ichi2.async.Connection;

        $i0 := @parameter1: int;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.ichi2.async.Connection: void publishProgress(int)>($i0);

     label1:
        return;
    }
    private void remove(org.json.JSONObject)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        boolean $z0;
        org.json.JSONArray $r4;
        long[] $r5;
        int i0, $i1;
        com.ichi2.libanki.Decks $r6;
        long $l2;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $z0 = virtualinvoke $r3.<com.ichi2.libanki.Collection: boolean getServer()>();

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void setServer(boolean)>(1);

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label01:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("notes");

        $r5 = staticinvoke <com.ichi2.libanki.Utils: long[] jsonArrayToLongArray(org.json.JSONArray)>($r4);

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void _remNotes(long[])>($r5);

     label02:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label03:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("cards");

        $r5 = staticinvoke <com.ichi2.libanki.Utils: long[] jsonArrayToLongArray(org.json.JSONArray)>($r4);

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void remCards(long[],boolean)>($r5, 0);

        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("decks");

     label04:
        i0 = 0;

     label05:
        $i1 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

     label06:
        if i0 >= $i1 goto label10;

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label07:
        $r6 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l2 = virtualinvoke $r4.<org.json.JSONArray: long getLong(int)>(i0);

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void rem(long,boolean,boolean)>($l2, 0, 0);

     label08:
        i0 = i0 + 1;

        goto label05;

     label09:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

     label10:
        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void setServer(boolean)>($z0);

        return;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
    }
    private org.json.JSONObject removed()
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONArray r1, r2, r4;
        org.json.JSONException r3;
        org.json.JSONObject r5;
        android.database.Cursor r6, $r13;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.DB $r8;
        io.requery.android.database.sqlite.SQLiteDatabase $r9;
        java.lang.StringBuilder $r10, $r11;
        boolean $z0;
        int $i0;
        java.lang.String $r12;
        long $l1;
        java.lang.Throwable $r14;
        java.lang.RuntimeException $r15;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r1 = new org.json.JSONArray;

        specialinvoke r1.<org.json.JSONArray: void <init>()>();

        r4 = new org.json.JSONArray;

        specialinvoke r4.<org.json.JSONArray: void <init>()>();

        r2 = new org.json.JSONArray;

        specialinvoke r2.<org.json.JSONArray: void <init>()>();

        r6 = null;

     label01:
        $r7 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT oid, type FROM graves WHERE usn");

        $r7 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $z0 = virtualinvoke $r7.<com.ichi2.libanki.Collection: boolean getServer()>();

     label02:
        if $z0 == 0 goto label15;

     label03:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn>;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r9.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r12, null);

     label05:
        r6 = $r13;

     label06:
        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToNext()>();

     label07:
        if $z0 == 0 goto label20;

     label08:
        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getInt(int)>(1);

     label09:
        lookupswitch($i0)
        {
            case 0: goto label11;
            case 1: goto label16;
            case 2: goto label18;
            default: goto label10;
        };

     label10:
        goto label06;

     label11:
        $l1 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(0);

        virtualinvoke r1.<org.json.JSONArray: org.json.JSONArray put(long)>($l1);

     label12:
        goto label06;

     label13:
        $r14 := @caughtexception;

        if r6 == null goto label14;

        $z0 = interfaceinvoke r6.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label14;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label14:
        throw $r14;

     label15:
        $r12 = " = -1";

        goto label04;

     label16:
        $l1 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(0);

        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(long)>($l1);

     label17:
        goto label06;

     label18:
        $l1 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>(0);

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(long)>($l1);

     label19:
        goto label06;

     label20:
        if $r13 == null goto label21;

        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean isClosed()>();

        if $z0 != 0 goto label21;

        interfaceinvoke $r13.<android.database.Cursor: void close()>();

     label21:
        $r7 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $z0 = virtualinvoke $r7.<com.ichi2.libanki.Collection: boolean getServer()>();

        if $z0 != 0 goto label22;

        $r7 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE graves SET usn=");

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE usn=-1");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r12);

     label22:
        r5 = new org.json.JSONObject;

        specialinvoke r5.<org.json.JSONObject: void <init>()>();

     label23:
        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("cards", r1);

        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("notes", r4);

        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("decks", r2);

     label24:
        return r5;

     label25:
        r3 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
        catch java.lang.Throwable from label18 to label19 with label13;
        catch org.json.JSONException from label23 to label24 with label25;
    }
    private void throwExceptionIfCancelled(com.ichi2.async.Connection)
    {
        com.ichi2.libanki.sync.Syncer r0;
        com.ichi2.async.Connection $r1;
        boolean $z0;
        java.lang.Object[] $r2;
        com.ichi2.libanki.sync.HttpSyncer $r3;
        java.lang.RuntimeException $r4;
        com.ichi2.anki.exception.UnknownHttpResponseException $r5;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: com.ichi2.async.Connection;

        $z0 = staticinvoke <com.ichi2.async.Connection: boolean getIsCancelled()>();

        if $z0 == 0 goto label4;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync was cancelled", $r2);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void publishProgress(com.ichi2.async.Connection,int)>($r1, 2131231391);

        $r3 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

     label1:
        virtualinvoke $r3.<com.ichi2.libanki.sync.HttpSyncer: void abort()>();

     label2:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("UserAbortedSync");

        throw $r4;

     label3:
        $r5 := @caughtexception;

        goto label2;

     label4:
        return;

        catch com.ichi2.anki.exception.UnknownHttpResponseException from label1 to label2 with label3;
    }
    private java.lang.String usnLim()
    {
        com.ichi2.libanki.sync.Syncer r0;
        com.ichi2.libanki.Collection $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $z0 = virtualinvoke $r1.<com.ichi2.libanki.Collection: boolean getServer()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("usn >= ");

        $i0 = r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        return "usn = -1";
    }
    public org.json.JSONObject applyChanges(org.json.JSONObject)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject $r1, $r2;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONObject;

        r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject mRChg> = $r1;

        $r2 = virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject changes()>();

        $r1 = r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject mRChg>;

        virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeChanges(org.json.JSONObject,org.json.JSONObject)>($r2, $r1);

        return $r2;
    }
    public void applyChunk(org.json.JSONObject)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        boolean $z0;
        org.json.JSONArray $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONObject;

     label01:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("revlog");

     label02:
        if $z0 == 0 goto label04;

     label03:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("revlog");

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeRevlog(org.json.JSONArray)>($r3);

     label04:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("cards");

     label05:
        if $z0 == 0 goto label07;

     label06:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("cards");

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeCards(org.json.JSONArray)>($r3);

     label07:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("notes");

     label08:
        if $z0 == 0 goto label12;

     label09:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("notes");

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeNotes(org.json.JSONArray)>($r3);

     label10:
        return;

     label11:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

     label12:
        return;

        catch org.json.JSONException from label01 to label02 with label11;
        catch org.json.JSONException from label03 to label05 with label11;
        catch org.json.JSONException from label06 to label08 with label11;
        catch org.json.JSONException from label09 to label10 with label11;
    }
    public org.json.JSONObject changes()
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONException r1;
        org.json.JSONObject r2, $r4;
        org.json.JSONArray $r3;
        boolean $z0;
        com.ichi2.libanki.Collection $r5;
        long $l0;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r2 = new org.json.JSONObject;

        specialinvoke r2.<org.json.JSONObject: void <init>()>();

     label1:
        $r3 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONArray getModels()>();

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("models", $r3);

        $r3 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONArray getDecks()>();

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("decks", $r3);

        $r3 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONArray getTags()>();

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tags", $r3);

     label2:
        $z0 = r0.<com.ichi2.libanki.sync.Syncer: boolean mLNewer>;

        if $z0 == 0 goto label8;

     label3:
        $r4 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject getConf()>();

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("conf", $r4);

     label4:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label5:
        $l0 = virtualinvoke $r5.<com.ichi2.libanki.Collection: long getCrt()>();

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("crt", $l0);

     label6:
        return r2;

     label7:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label8:
        return r2;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }
    public org.json.JSONObject chunk()
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject r1;
        org.json.JSONException r2;
        org.json.JSONArray r3, r4;
        int i0, $i1, i2, i3, $i4;
        java.util.LinkedList $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String r7, $r11;
        android.database.Cursor $r8;
        java.util.List $r9;
        java.lang.Integer $r10;
        java.lang.RuntimeException $r12;
        double $d0;
        long $l5;
        com.ichi2.libanki.Collection $r13;
        com.ichi2.libanki.DB $r14;
        java.lang.StringBuilder $r15;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r1 = new org.json.JSONObject;

        specialinvoke r1.<org.json.JSONObject: void <init>()>();

     label01:
        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("done", 0);

     label02:
        i0 = 250;

     label03:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft>;

     label04:
        $z0 = virtualinvoke $r5.<java.util.LinkedList: boolean isEmpty()>();

     label05:
        if $z0 != 0 goto label53;

        if i0 <= 0 goto label53;

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft>;

     label06:
        $r6 = virtualinvoke $r5.<java.util.LinkedList: java.lang.Object getFirst()>();

     label07:
        r7 = (java.lang.String) $r6;

        $r8 = r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor>;

        if $r8 != null goto label10;

     label08:
        $r8 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor cursorForTable(java.lang.String)>(r7);

     label09:
        r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor> = $r8;

     label10:
        $r9 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: java.util.List columnTypesForQuery(java.lang.String)>(r7);

     label11:
        r4 = new org.json.JSONArray;

     label12:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

     label13:
        $r8 = r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor>;

     label14:
        $i1 = interfaceinvoke $r8.<android.database.Cursor: int getColumnCount()>();

     label15:
        i2 = 0;

     label16:
        $r8 = r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor>;

     label17:
        $z0 = interfaceinvoke $r8.<android.database.Cursor: boolean moveToNext()>();

     label18:
        if $z0 == 0 goto label39;

        r3 = new org.json.JSONArray;

     label19:
        specialinvoke r3.<org.json.JSONArray: void <init>()>();

     label20:
        i3 = 0;

     label21:
        if i3 >= $i1 goto label37;

     label22:
        $r6 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i3);

     label23:
        $r10 = (java.lang.Integer) $r6;

     label24:
        $i4 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label25:
        lookupswitch($i4)
        {
            case 1: goto label34;
            case 2: goto label31;
            case 3: goto label27;
            default: goto label26;
        };

     label26:
        i3 = i3 + 1;

        goto label21;

     label27:
        $r8 = r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor>;

     label28:
        $r11 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>(i3);

        virtualinvoke r3.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r11);

     label29:
        goto label26;

     label30:
        r2 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r12;

     label31:
        $r8 = r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor>;

     label32:
        $d0 = interfaceinvoke $r8.<android.database.Cursor: double getDouble(int)>(i3);

        virtualinvoke r3.<org.json.JSONArray: org.json.JSONArray put(double)>($d0);

     label33:
        goto label26;

     label34:
        $r8 = r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor>;

     label35:
        $l5 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>(i3);

        virtualinvoke r3.<org.json.JSONArray: org.json.JSONArray put(long)>($l5);

     label36:
        goto label26;

     label37:
        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r3);

     label38:
        i2 = i2 + 1;

        if i2 != i0 goto label16;

     label39:
        if i2 == i0 goto label51;

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft>;

     label40:
        virtualinvoke $r5.<java.util.LinkedList: java.lang.Object removeFirst()>();

     label41:
        $r8 = r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor>;

     label42:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

     label43:
        r0.<com.ichi2.libanki.sync.Syncer: android.database.Cursor mCursor> = null;

        $r13 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label44:
        $z0 = virtualinvoke $r13.<com.ichi2.libanki.Collection: boolean getServer()>();

     label45:
        if $z0 != 0 goto label51;

        $r13 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label46:
        $r14 = virtualinvoke $r13.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label47:
        $r15 = new java.lang.StringBuilder;

     label48:
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET usn=");

     label49:
        $i1 = r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn>;

     label50:
        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE usn=-1");

        $r11 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<com.ichi2.libanki.DB: void execute(java.lang.String)>($r11);

     label51:
        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(r7, r4);

     label52:
        i0 = i0 - i2;

        goto label03;

     label53:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: java.util.LinkedList mTablesLeft>;

     label54:
        $z0 = virtualinvoke $r5.<java.util.LinkedList: boolean isEmpty()>();

     label55:
        if $z0 == 0 goto label57;

     label56:
        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("done", 1);

     label57:
        return r1;

        catch org.json.JSONException from label01 to label02 with label30;
        catch org.json.JSONException from label04 to label05 with label30;
        catch org.json.JSONException from label06 to label07 with label30;
        catch org.json.JSONException from label08 to label09 with label30;
        catch org.json.JSONException from label10 to label11 with label30;
        catch org.json.JSONException from label12 to label13 with label30;
        catch org.json.JSONException from label14 to label15 with label30;
        catch org.json.JSONException from label17 to label18 with label30;
        catch org.json.JSONException from label19 to label20 with label30;
        catch org.json.JSONException from label22 to label23 with label30;
        catch org.json.JSONException from label24 to label25 with label30;
        catch org.json.JSONException from label28 to label29 with label30;
        catch org.json.JSONException from label32 to label33 with label30;
        catch org.json.JSONException from label35 to label36 with label30;
        catch org.json.JSONException from label37 to label38 with label30;
        catch org.json.JSONException from label40 to label41 with label30;
        catch org.json.JSONException from label42 to label43 with label30;
        catch org.json.JSONException from label44 to label45 with label30;
        catch org.json.JSONException from label46 to label47 with label30;
        catch org.json.JSONException from label48 to label49 with label30;
        catch org.json.JSONException from label50 to label52 with label30;
        catch org.json.JSONException from label54 to label55 with label30;
        catch org.json.JSONException from label56 to label57 with label30;
    }
    public long finish()
    {
        com.ichi2.libanki.sync.Syncer r0;
        long $l0;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $l0 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: long finish(long)>(0L);

        return $l0;
    }
    public java.lang.String getSyncMsg()
    {
        com.ichi2.libanki.sync.Syncer r0;
        java.lang.String r1;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r1 = r0.<com.ichi2.libanki.sync.Syncer: java.lang.String mSyncMsg>;

        return r1;
    }
    public void mergeChanges(org.json.JSONObject, org.json.JSONObject)
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject $r1, $r2;
        org.json.JSONException r3;
        org.json.JSONArray $r4;
        boolean $z0;
        com.ichi2.libanki.Collection $r5;
        long $l0;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

     label1:
        $r4 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("models");

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeModels(org.json.JSONArray)>($r4);

        $r4 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("decks");

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeDecks(org.json.JSONArray)>($r4);

        $r4 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tags");

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeTags(org.json.JSONArray)>($r4);

        $z0 = virtualinvoke $r2.<org.json.JSONObject: boolean has(java.lang.String)>("conf");

     label2:
        if $z0 == 0 goto label4;

     label3:
        $r1 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("conf");

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeConf(org.json.JSONObject)>($r1);

     label4:
        $z0 = virtualinvoke $r2.<org.json.JSONObject: boolean has(java.lang.String)>("crt");

     label5:
        if $z0 == 0 goto label7;

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label6:
        $l0 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("crt");

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void setCrt(long)>($l0);

     label7:
        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void prepareToChunk()>();

        return;

     label8:
        r3 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label8;
        catch org.json.JSONException from label3 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    public org.json.JSONObject meta() throws org.json.JSONException
    {
        com.ichi2.libanki.sync.Syncer r0;
        org.json.JSONObject r1;
        com.ichi2.libanki.Collection $r2;
        long $l0;
        int $i1;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r1 = new org.json.JSONObject;

        specialinvoke r1.<org.json.JSONObject: void <init>()>();

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $l0 = virtualinvoke $r2.<com.ichi2.libanki.Collection: long getMod()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("mod", $l0);

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $l0 = virtualinvoke $r2.<com.ichi2.libanki.Collection: long getScm()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("scm", $l0);

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int getUsnForSync()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i1);

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("ts", $l0);

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("musn", 0);

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("msg", "");

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("cont", 1);

        return r1;
    }
    public org.json.JSONObject sanityCheck()
    {
        com.ichi2.libanki.sync.Syncer r0;
        int i0, $i1, $i2;
        org.json.JSONException r1;
        org.json.JSONArray r2, r4;
        org.json.JSONObject r3, r13;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.DB $r6;
        java.lang.Object[] $r7;
        java.lang.RuntimeException $r8;
        com.ichi2.libanki.Decks $r9;
        java.util.ArrayList $r10;
        java.util.Iterator $r11;
        boolean $z0, $z1;
        java.lang.Object $r12;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;
        com.ichi2.libanki.Tags $r16;
        java.util.Set $r17;
        java.util.Map$Entry r18;
        java.lang.Integer $r19;
        com.ichi2.libanki.Models $r20;
        com.ichi2.libanki.Sched $r21;
        int[] $r22;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        r3 = new org.json.JSONObject;

        specialinvoke r3.<org.json.JSONObject: void <init>()>();

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label001:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM cards WHERE nid NOT IN (SELECT id FROM notes)");

     label002:
        if i0 == 0 goto label005;

        $r7 = newarray (java.lang.Object)[0];

     label003:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Sync - SanityCheck: there are cards without mother notes", $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "missing notes");

     label004:
        return r3;

     label005:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label006:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM notes WHERE id NOT IN (SELECT DISTINCT nid FROM cards)");

     label007:
        if i0 == 0 goto label011;

        $r7 = newarray (java.lang.Object)[0];

     label008:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Sync - SanityCheck: there are notes without cards", $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "missing cards");

     label009:
        return r3;

     label010:
        r1 := @caughtexception;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Syncer.sanityCheck()", $r7);

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

     label011:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label012:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM cards WHERE usn = -1");

     label013:
        if i0 == 0 goto label016;

        $r7 = newarray (java.lang.Object)[0];

     label014:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Sync - SanityCheck: there are unsynced cards", $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "cards had usn = -1");

     label015:
        return r3;

     label016:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label017:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM notes WHERE usn = -1");

     label018:
        if i0 == 0 goto label021;

        $r7 = newarray (java.lang.Object)[0];

     label019:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Sync - SanityCheck: there are unsynced notes", $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "notes had usn = -1");

     label020:
        return r3;

     label021:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label022:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM revlog WHERE usn = -1");

     label023:
        if i0 == 0 goto label026;

        $r7 = newarray (java.lang.Object)[0];

     label024:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Sync - SanityCheck: there are unsynced revlogs", $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "revlog had usn = -1");

     label025:
        return r3;

     label026:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label027:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM graves WHERE usn = -1");

     label028:
        if i0 == 0 goto label031;

        $r7 = newarray (java.lang.Object)[0];

     label029:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Sync - SanityCheck: there are unsynced graves", $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "graves had usn = -1");

     label030:
        return r3;

     label031:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label032:
        $r9 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label033:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label034:
        if $z0 == 0 goto label043;

     label035:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label036:
        r13 = (org.json.JSONObject) $r12;

     label037:
        i0 = virtualinvoke r13.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label038:
        if i0 != -1 goto label033;

        $r14 = new java.lang.StringBuilder;

     label039:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sync - SanityCheck: unsynced deck: ");

        $r15 = virtualinvoke r13.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label040:
        $r7 = newarray (java.lang.Object)[0];

     label041:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>($r15, $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "deck had usn = -1");

     label042:
        return r3;

     label043:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label044:
        $r16 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Tags: java.util.Set allItems()>();

        $r11 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label045:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label046:
        if $z0 == 0 goto label055;

     label047:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label048:
        r18 = (java.util.Map$Entry) $r12;

     label049:
        $r12 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

     label050:
        $r19 = (java.lang.Integer) $r12;

     label051:
        i0 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

     label052:
        if i0 != -1 goto label045;

        $r7 = newarray (java.lang.Object)[0];

     label053:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Sync - SanityCheck: there are unsynced tags", $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "tag had usn = -1");

     label054:
        return r3;

     label055:
        $z0 = 0;

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label056:
        $r20 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r10 = virtualinvoke $r20.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label057:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label058:
        if $z1 == 0 goto label073;

     label059:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label060:
        r13 = (org.json.JSONObject) $r12;

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label061:
        $z1 = virtualinvoke $r5.<com.ichi2.libanki.Collection: boolean getServer()>();

     label062:
        if $z1 == 0 goto label067;

     label063:
        i0 = virtualinvoke r13.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label064:
        if i0 >= 0 goto label057;

     label065:
        virtualinvoke r13.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", 0);

     label066:
        $z0 = 1;

        goto label057;

     label067:
        i0 = virtualinvoke r13.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

     label068:
        if i0 != -1 goto label057;

        $r14 = new java.lang.StringBuilder;

     label069:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sync - SanityCheck: unsynced model: ");

        $r15 = virtualinvoke r13.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label070:
        $r7 = newarray (java.lang.Object)[0];

     label071:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>($r15, $r7);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", "model had usn = -1");

     label072:
        return r3;

     label073:
        if $z0 == 0 goto label075;

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label074:
        $r20 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r20.<com.ichi2.libanki.Models: void save()>();

     label075:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label076:
        $r21 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r21.<com.ichi2.libanki.Sched: void reset()>();

     label077:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label078:
        $r21 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r21.<com.ichi2.libanki.Sched: java.util.List deckDueList()>();

     label079:
        r2 = new org.json.JSONArray;

     label080:
        specialinvoke r2.<org.json.JSONArray: void <init>()>();

     label081:
        r4 = new org.json.JSONArray;

     label082:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

     label083:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label084:
        $r21 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r22 = virtualinvoke $r21.<com.ichi2.libanki.Sched: int[] counts()>();

     label085:
        $i1 = lengthof $r22;

        $i2 = 0;

     label086:
        if $i2 >= $i1 goto label089;

        i0 = $r22[$i2];

     label087:
        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

     label088:
        $i2 = $i2 + 1;

        goto label086;

     label089:
        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r4);

     label090:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label091:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM cards");

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

     label092:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label093:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM notes");

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

     label094:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label095:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM revlog");

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

     label096:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label097:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i0 = virtualinvoke $r6.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("SELECT count() FROM graves");

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

     label098:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label099:
        $r20 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r10 = virtualinvoke $r20.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        i0 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

     label100:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label101:
        $r9 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        i0 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

     label102:
        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label103:
        $r9 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Decks: java.util.ArrayList allConf()>();

        i0 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>(i0);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("client", r2);

     label104:
        return r3;

        catch org.json.JSONException from label001 to label002 with label010;
        catch org.json.JSONException from label003 to label004 with label010;
        catch org.json.JSONException from label006 to label007 with label010;
        catch org.json.JSONException from label008 to label009 with label010;
        catch org.json.JSONException from label012 to label013 with label010;
        catch org.json.JSONException from label014 to label015 with label010;
        catch org.json.JSONException from label017 to label018 with label010;
        catch org.json.JSONException from label019 to label020 with label010;
        catch org.json.JSONException from label022 to label023 with label010;
        catch org.json.JSONException from label024 to label025 with label010;
        catch org.json.JSONException from label027 to label028 with label010;
        catch org.json.JSONException from label029 to label030 with label010;
        catch org.json.JSONException from label032 to label034 with label010;
        catch org.json.JSONException from label035 to label036 with label010;
        catch org.json.JSONException from label037 to label038 with label010;
        catch org.json.JSONException from label039 to label040 with label010;
        catch org.json.JSONException from label041 to label042 with label010;
        catch org.json.JSONException from label044 to label046 with label010;
        catch org.json.JSONException from label047 to label048 with label010;
        catch org.json.JSONException from label049 to label050 with label010;
        catch org.json.JSONException from label051 to label052 with label010;
        catch org.json.JSONException from label053 to label054 with label010;
        catch org.json.JSONException from label056 to label058 with label010;
        catch org.json.JSONException from label059 to label060 with label010;
        catch org.json.JSONException from label061 to label062 with label010;
        catch org.json.JSONException from label063 to label064 with label010;
        catch org.json.JSONException from label065 to label066 with label010;
        catch org.json.JSONException from label067 to label068 with label010;
        catch org.json.JSONException from label069 to label070 with label010;
        catch org.json.JSONException from label071 to label072 with label010;
        catch org.json.JSONException from label074 to label075 with label010;
        catch org.json.JSONException from label076 to label077 with label010;
        catch org.json.JSONException from label078 to label079 with label010;
        catch org.json.JSONException from label080 to label081 with label010;
        catch org.json.JSONException from label082 to label083 with label010;
        catch org.json.JSONException from label084 to label085 with label010;
        catch org.json.JSONException from label087 to label088 with label010;
        catch org.json.JSONException from label089 to label090 with label010;
        catch org.json.JSONException from label091 to label092 with label010;
        catch org.json.JSONException from label093 to label094 with label010;
        catch org.json.JSONException from label095 to label096 with label010;
        catch org.json.JSONException from label097 to label098 with label010;
        catch org.json.JSONException from label099 to label100 with label010;
        catch org.json.JSONException from label101 to label102 with label010;
        catch org.json.JSONException from label103 to label104 with label010;
    }
    public org.json.JSONObject start(int, boolean, org.json.JSONObject)
    {
        com.ichi2.libanki.sync.Syncer r0;
        int $i0, $i1;
        boolean $z0;
        org.json.JSONObject $r1, $r3;
        com.ichi2.libanki.Collection $r2;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: org.json.JSONObject;

        $r2 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $i1 = virtualinvoke $r2.<com.ichi2.libanki.Collection: int getUsnForSync()>();

        r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn> = $i1;

        r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn> = $i0;

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        r0.<com.ichi2.libanki.sync.Syncer: boolean mLNewer> = $z0;

        $r3 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject removed()>();

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void remove(org.json.JSONObject)>($r1);

        return $r3;

     label2:
        $z0 = 0;

        goto label1;
    }
    public java.lang.Object[] sync() throws com.ichi2.anki.exception.UnknownHttpResponseException
    {
        com.ichi2.libanki.sync.Syncer r0;
        java.lang.Object[] $r1;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: java.lang.Object[] sync(com.ichi2.async.Connection)>(null);

        return $r1;
    }
    public java.lang.Object[] sync(com.ichi2.async.Connection) throws com.ichi2.anki.exception.UnknownHttpResponseException
    {
        com.ichi2.libanki.sync.Syncer r0;
        com.ichi2.async.Connection $r1;
        long l0, $l2, $l3, $l6;
        org.json.JSONObject r2, r3;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.sync.HttpSyncer $r5;
        org.apache.http.HttpResponse $r6;
        org.apache.http.StatusLine $r7;
        int $i1, $i4;
        java.lang.Object[] $r8;
        com.ichi2.libanki.DB $r9;
        io.requery.android.database.sqlite.SQLiteDatabase $r10;
        org.apache.http.HttpEntity $r11;
        java.io.InputStream $r12;
        java.lang.String $r13;
        boolean $z0;
        java.lang.Exception r14;
        java.lang.RuntimeException $r15;
        byte $b5;
        java.lang.Long $r16;
        java.lang.OutOfMemoryError r17;
        java.io.IOException r18;
        java.lang.Throwable $r19;

        r0 := @this: com.ichi2.libanki.sync.Syncer;

        $r1 := @parameter0: com.ichi2.async.Connection;

        r0.<com.ichi2.libanki.sync.Syncer: java.lang.String mSyncMsg> = "";

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void save()>();

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: org.apache.http.HttpResponse meta()>();

        if $r6 != null goto label01;

        return null;

     label01:
        $r7 = interfaceinvoke $r6.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i1 = interfaceinvoke $r7.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i1 != 403 goto label02;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "badAuth";

        return $r8;

     label02:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label03:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label04:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: getting meta data from server", $r8);

        r2 = new org.json.JSONObject;

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        $r11 = interfaceinvoke $r6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $r12 = interfaceinvoke $r11.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        $r13 = virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: java.lang.String stream2String(java.io.InputStream)>($r12);

        specialinvoke r2.<org.json.JSONObject: void <init>(java.lang.String)>($r13);

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "rmeta";

        $r8[1] = r2;

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r13 = virtualinvoke r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("msg");

        r0.<com.ichi2.libanki.sync.Syncer: java.lang.String mSyncMsg> = $r13;

        $z0 = virtualinvoke r2.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("cont");

     label05:
        if $z0 != 0 goto label12;

     label06:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "serverAbort";

     label07:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label08:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label09:
        return $r8;

     label10:
        r14 := @caughtexception;

     label11:
        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r14);

        throw $r15;

     label12:
        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void throwExceptionIfCancelled(com.ichi2.async.Connection)>($r1);

        $l2 = virtualinvoke r2.<org.json.JSONObject: long getLong(java.lang.String)>("scm");

        $i1 = virtualinvoke r2.<org.json.JSONObject: int getInt(java.lang.String)>("ts");

        $l3 = virtualinvoke r2.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

        r0.<com.ichi2.libanki.sync.Syncer: long mRMod> = $l3;

        $i4 = virtualinvoke r2.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

        r0.<com.ichi2.libanki.sync.Syncer: int mMaxUsn> = $i4;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: building local meta data", $r8);

        r2 = virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject meta()>();

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "lmeta";

        $r8[1] = r2;

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $l3 = virtualinvoke r2.<org.json.JSONObject: long getLong(java.lang.String)>("mod");

        r0.<com.ichi2.libanki.sync.Syncer: long mLMod> = $l3;

        $i4 = virtualinvoke r2.<org.json.JSONObject: int getInt(java.lang.String)>("usn");

        r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn> = $i4;

        $l3 = virtualinvoke r2.<org.json.JSONObject: long getLong(java.lang.String)>("scm");

        $i4 = virtualinvoke r2.<org.json.JSONObject: int getInt(java.lang.String)>("ts");

     label13:
        $i1 = $i1 - $i4;

     label14:
        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

     label15:
        l0 = (long) $i1;

        $b5 = l0 cmp 300L;

        if $b5 <= 0 goto label21;

     label16:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "clock off";

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "clockOff";

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r8[1] = $r16;

     label17:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label18:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label19:
        return $r8;

     label20:
        r14 := @caughtexception;

        goto label11;

     label21:
        l0 = r0.<com.ichi2.libanki.sync.Syncer: long mLMod>;

        $l6 = r0.<com.ichi2.libanki.sync.Syncer: long mRMod>;

     label22:
        $b5 = l0 cmp $l6;

        if $b5 != 0 goto label28;

     label23:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: no changes - returning", $r8);

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "no changes";

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "noChanges";

     label24:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label25:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label26:
        return $r8;

     label27:
        r17 := @caughtexception;

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r17, "Syncer-sync");

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "OutOfMemoryError";

        return $r8;

     label28:
        $b5 = $l3 cmp $l2;

        if $b5 == 0 goto label34;

     label29:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: full sync necessary - returning", $r8);

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "schema diff";

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "fullSync";

     label30:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label31:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label32:
        return $r8;

     label33:
        r18 := @caughtexception;

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r18, "Syncer-sync");

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "IOException";

        return $r8;

     label34:
        $l2 = r0.<com.ichi2.libanki.sync.Syncer: long mLMod>;

        $l3 = r0.<com.ichi2.libanki.sync.Syncer: long mRMod>;

     label35:
        $b5 = $l2 cmp $l3;

        if $b5 <= 0 goto label42;

        $z0 = 1;

     label36:
        r0.<com.ichi2.libanki.sync.Syncer: boolean mLNewer> = $z0;

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $z0 = virtualinvoke $r4.<com.ichi2.libanki.Collection: boolean basicCheck()>();

     label37:
        if $z0 != 0 goto label43;

     label38:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "basic check";

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "basicCheckFailed";

     label39:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label40:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label41:
        return $r8;

     label42:
        $z0 = 0;

        goto label36;

     label43:
        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void throwExceptionIfCancelled(com.ichi2.async.Connection)>($r1);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void publishProgress(com.ichi2.async.Connection,int)>($r1, 2131231403);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: collection removed data", $r8);

        r3 = specialinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject removed()>();

        r2 = new org.json.JSONObject;

        specialinvoke r2.<org.json.JSONObject: void <init>()>();

        $i1 = r0.<com.ichi2.libanki.sync.Syncer: int mMinUsn>;

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("minUsn", $i1);

        $z0 = r0.<com.ichi2.libanki.sync.Syncer: boolean mLNewer>;

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("lnewer", $z0);

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("graves", r3);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: sending and receiving removed data", $r8);

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        r2 = virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: org.json.JSONObject start(org.json.JSONObject)>(r2);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: applying removed data", $r8);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void throwExceptionIfCancelled(com.ichi2.async.Connection)>($r1);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void remove(org.json.JSONObject)>(r2);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void publishProgress(com.ichi2.async.Connection,int)>($r1, 2131231437);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: collection small changes", $r8);

        r2 = virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject changes()>();

        r3 = new org.json.JSONObject;

        specialinvoke r3.<org.json.JSONObject: void <init>()>();

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("changes", r2);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: sending and receiving small changes", $r8);

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        r3 = virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: org.json.JSONObject applyChanges(org.json.JSONObject)>(r3);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void throwExceptionIfCancelled(com.ichi2.async.Connection)>($r1);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: merging small changes", $r8);

        virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: void mergeChanges(org.json.JSONObject,org.json.JSONObject)>(r2, r3);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void publishProgress(com.ichi2.async.Connection,int)>($r1, 2131231404);

     label44:
        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void throwExceptionIfCancelled(com.ichi2.async.Connection)>($r1);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: downloading chunked data", $r8);

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        r2 = virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: org.json.JSONObject chunk()>();

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "server chunk";

        $r8[1] = r2;

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: applying chunked data", $r8);

        virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: void applyChunk(org.json.JSONObject)>(r2);

        $z0 = virtualinvoke r2.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("done");

     label45:
        if $z0 == 0 goto label44;

     label46:
        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void publishProgress(com.ichi2.async.Connection,int)>($r1, 2131231441);

     label47:
        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void throwExceptionIfCancelled(com.ichi2.async.Connection)>($r1);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: collecting chunked data", $r8);

        r3 = virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject chunk()>();

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "client chunk";

        $r8[1] = r3;

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        r2 = new org.json.JSONObject;

        specialinvoke r2.<org.json.JSONObject: void <init>()>();

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("chunk", r3);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: sending chunked data", $r8);

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: void applyChunk(org.json.JSONObject)>(r2);

        $z0 = virtualinvoke r3.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("done");

     label48:
        if $z0 == 0 goto label47;

     label49:
        r2 = virtualinvoke r0.<com.ichi2.libanki.sync.Syncer: org.json.JSONObject sanityCheck()>();

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        r3 = virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: org.json.JSONObject sanityCheck2(org.json.JSONObject)>(r2);

     label50:
        if r3 == null goto label53;

     label51:
        $r13 = virtualinvoke r3.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>("status", "bad");

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("ok");

     label52:
        if $z0 != 0 goto label57;

     label53:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = "sanity check failed";

        $r8[1] = r2;

        $r8[2] = r3;

        virtualinvoke $r4.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "sanityCheckError";

        $r8[1] = null;

     label54:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label55:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label56:
        return $r8;

     label57:
        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void publishProgress(com.ichi2.async.Connection,int)>($r1, 2131231412);

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: sending finish command", $r8);

        $r5 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.sync.HttpSyncer mServer>;

        $l2 = virtualinvoke $r5.<com.ichi2.libanki.sync.HttpSyncer: long finish()>();

     label58:
        $b5 = $l2 cmp 0L;

        if $b5 != 0 goto label63;

     label59:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "finishError";

     label60:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label61:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label62:
        return $r8;

     label63:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Sync: finishing", $r8);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: long finish(long)>($l2);

        specialinvoke r0.<com.ichi2.libanki.sync.Syncer: void publishProgress(com.ichi2.async.Connection,int)>($r1, 2131231444);

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label64:
        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label65:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label66:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "success";

        return $r8;

     label67:
        $r19 := @caughtexception;

        $r4 = r0.<com.ichi2.libanki.sync.Syncer: com.ichi2.libanki.Collection mCol>;

     label68:
        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r10.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r19;

     label69:
        nop;

        catch org.json.JSONException from label03 to label04 with label10;
        catch java.lang.IllegalStateException from label03 to label04 with label20;
        catch java.lang.OutOfMemoryError from label03 to label04 with label27;
        catch java.io.IOException from label03 to label04 with label33;
        catch java.lang.Throwable from label04 to label05 with label67;
        catch java.lang.Throwable from label06 to label07 with label67;
        catch org.json.JSONException from label08 to label09 with label10;
        catch java.lang.IllegalStateException from label08 to label09 with label20;
        catch java.lang.OutOfMemoryError from label08 to label09 with label27;
        catch java.io.IOException from label08 to label09 with label33;
        catch java.lang.Throwable from label12 to label13 with label67;
        catch java.lang.Throwable from label14 to label15 with label67;
        catch java.lang.Throwable from label16 to label17 with label67;
        catch org.json.JSONException from label18 to label19 with label10;
        catch java.lang.IllegalStateException from label18 to label19 with label20;
        catch java.lang.OutOfMemoryError from label18 to label19 with label27;
        catch java.io.IOException from label18 to label19 with label33;
        catch java.lang.Throwable from label21 to label22 with label67;
        catch java.lang.Throwable from label23 to label24 with label67;
        catch org.json.JSONException from label25 to label26 with label10;
        catch java.lang.IllegalStateException from label25 to label26 with label20;
        catch java.lang.OutOfMemoryError from label25 to label26 with label27;
        catch java.io.IOException from label25 to label26 with label33;
        catch java.lang.Throwable from label29 to label30 with label67;
        catch org.json.JSONException from label31 to label32 with label10;
        catch java.lang.IllegalStateException from label31 to label32 with label20;
        catch java.lang.OutOfMemoryError from label31 to label32 with label27;
        catch java.io.IOException from label31 to label32 with label33;
        catch java.lang.Throwable from label34 to label35 with label67;
        catch java.lang.Throwable from label36 to label37 with label67;
        catch java.lang.Throwable from label38 to label39 with label67;
        catch org.json.JSONException from label40 to label41 with label10;
        catch java.lang.IllegalStateException from label40 to label41 with label20;
        catch java.lang.OutOfMemoryError from label40 to label41 with label27;
        catch java.io.IOException from label40 to label41 with label33;
        catch java.lang.Throwable from label43 to label45 with label67;
        catch java.lang.Throwable from label46 to label48 with label67;
        catch java.lang.Throwable from label49 to label50 with label67;
        catch java.lang.Throwable from label51 to label52 with label67;
        catch java.lang.Throwable from label53 to label54 with label67;
        catch org.json.JSONException from label55 to label56 with label10;
        catch java.lang.IllegalStateException from label55 to label56 with label20;
        catch java.lang.OutOfMemoryError from label55 to label56 with label27;
        catch java.io.IOException from label55 to label56 with label33;
        catch java.lang.Throwable from label57 to label58 with label67;
        catch java.lang.Throwable from label59 to label60 with label67;
        catch org.json.JSONException from label61 to label62 with label10;
        catch java.lang.IllegalStateException from label61 to label62 with label20;
        catch java.lang.OutOfMemoryError from label61 to label62 with label27;
        catch java.io.IOException from label61 to label62 with label33;
        catch java.lang.Throwable from label63 to label64 with label67;
        catch org.json.JSONException from label65 to label66 with label10;
        catch java.lang.IllegalStateException from label65 to label66 with label20;
        catch java.lang.OutOfMemoryError from label65 to label66 with label27;
        catch java.io.IOException from label65 to label66 with label33;
        catch org.json.JSONException from label68 to label69 with label10;
        catch java.lang.IllegalStateException from label68 to label69 with label20;
        catch java.lang.OutOfMemoryError from label68 to label69 with label27;
        catch java.io.IOException from label68 to label69 with label33;
    }
