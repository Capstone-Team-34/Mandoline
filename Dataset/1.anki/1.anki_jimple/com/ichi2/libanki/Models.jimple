com.ichi2.libanki.Models extends java.lang.Object
static final boolean $assertionsDisabled
private static final java.lang.String defaultField
public static final java.lang.String defaultModel
private static final java.lang.String defaultTemplate
private static final java.util.regex.Pattern fClozeOrdPattern
private static final java.util.regex.Pattern fClozePattern1
private static final java.util.regex.Pattern fClozePattern2
private boolean mChanged
private java.util.Map mCmpldTemplateMap
private com.ichi2.libanki.Collection mCol
private org.json.JSONObject mConf
private long mCrt
private java.lang.String mCss
private org.json.JSONArray mFields
private int mId
private long mMod
private java.util.HashMap mModels
private java.lang.String mName
private org.json.JSONArray mTemplates
    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;
        java.util.regex.Pattern $r1;

        $r0 = class "Lcom/ichi2/libanki/Models;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <com.ichi2.libanki.Models: boolean $assertionsDisabled> = $z0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\{\\{[^}]*?cloze:(?:[^}]?:)*(.+?)\\}\\}");

        <com.ichi2.libanki.Models: java.util.regex.Pattern fClozePattern1> = $r1;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("<%cloze:(.+?)%>");

        <com.ichi2.libanki.Models: java.util.regex.Pattern fClozePattern2> = $r1;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\{\\{c(\\d+)::.+?\\}\\}");

        <com.ichi2.libanki.Models: java.util.regex.Pattern fClozeOrdPattern> = $r1;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public void <init>(com.ichi2.libanki.Collection)
    {
        com.ichi2.libanki.Models r0;
        com.ichi2.libanki.Collection $r1;
        long $l0;
        java.util.HashMap $r2;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ichi2.libanki.Models: java.lang.String mName> = "";

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        r0.<com.ichi2.libanki.Models: long mCrt> = $l0;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        r0.<com.ichi2.libanki.Models: long mMod> = $l0;

        r0.<com.ichi2.libanki.Models: java.lang.String mCss> = "";

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.Models: java.util.Map mCmpldTemplateMap> = $r2;

        r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol> = $r1;

        return;
    }
    private void _changeCards(long[], org.json.JSONObject, org.json.JSONObject, java.util.Map)
    {
        com.ichi2.libanki.Models r0;
        long[] $r1;
        org.json.JSONObject $r2, $r3;
        java.util.Map r4;
        java.util.ArrayList r5, r6;
        org.json.JSONException r7;
        android.database.Cursor r8, $r15;
        int $i0, $i1, $i2, $i4, $i5;
        org.json.JSONArray $r9;
        com.ichi2.libanki.Collection $r10;
        com.ichi2.libanki.DB $r11;
        io.requery.android.database.sqlite.SQLiteDatabase $r12;
        java.lang.String $r13, $r14;
        boolean $z0;
        long $l3, $l6;
        java.lang.Integer $r16;
        java.lang.Object[] $r17;
        java.lang.Long $r18;
        java.lang.Throwable $r19;
        java.lang.RuntimeException $r20;
        java.lang.Object $r21;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: org.json.JSONObject;

        $r3 := @parameter2: org.json.JSONObject;

        r4 := @parameter3: java.util.Map;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        r8 = null;

     label01:
        $i0 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("type");

        $i1 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("type");

        $r9 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i2 = virtualinvoke $r9.<org.json.JSONArray: int length()>();

     label02:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

     label03:
        $r13 = "select id, ord from cards where nid in ";

     label04:
        $r14 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r13 = virtualinvoke $r13.<java.lang.String: java.lang.String concat(java.lang.String)>($r14);

        $r15 = virtualinvoke $r12.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r13, null);

     label05:
        r8 = $r15;

     label06:
        $z0 = interfaceinvoke $r15.<android.database.Cursor: boolean moveToNext()>();

     label07:
        if $z0 == 0 goto label22;

     label08:
        $l3 = interfaceinvoke $r15.<android.database.Cursor: long getLong(int)>(0);

        $i4 = interfaceinvoke $r15.<android.database.Cursor: int getInt(int)>(1);

     label09:
        if $i0 != 1 goto label18;

     label10:
        $i5 = interfaceinvoke $r15.<android.database.Cursor: int getInt(int)>(1);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

     label11:
        if $i1 == 1 goto label12;

        if $i2 > $i4 goto label12;

        $r16 = null;

     label12:
        if $r16 == null goto label20;

     label13:
        $r17 = newarray (java.lang.Object)[4];

        $r17[0] = $r16;

        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $i4 = virtualinvoke $r10.<com.ichi2.libanki.Collection: int usn()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r17[1] = $r16;

        $l6 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r17[2] = $r18;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r17[3] = $r18;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r17);

     label14:
        goto label06;

     label15:
        $r19 := @caughtexception;

        if r8 == null goto label16;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label16:
        throw $r19;

     label17:
        r7 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r7);

        throw $r20;

     label18:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r21 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r16 = (java.lang.Integer) $r21;

     label19:
        goto label12;

     label20:
        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r18);

     label21:
        goto label06;

     label22:
        if $r15 == null goto label23;

        interfaceinvoke $r15.<android.database.Cursor: void close()>();

     label23:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r11.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("update cards set ord=?,usn=?,mod=? where id=?", r5);

        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r1 = staticinvoke <com.ichi2.libanki.Utils: long[] toPrimitive(java.util.Collection)>(r6);

        virtualinvoke $r10.<com.ichi2.libanki.Collection: void remCards(long[])>($r1);

        return;

        catch org.json.JSONException from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label15;
        catch java.lang.Throwable from label20 to label21 with label15;
    }
    private void _changeNotes(long[], org.json.JSONObject, java.util.Map)
    {
        com.ichi2.libanki.Models r0;
        long[] $r1;
        org.json.JSONObject $r2;
        java.util.Map r3;
        java.util.ArrayList r4, r6;
        org.json.JSONException r5;
        java.util.HashMap r7;
        org.json.JSONArray $r8;
        int $i0, $i3;
        long $l1, $l2, $l4;
        android.database.Cursor r9, $r15;
        com.ichi2.libanki.Collection $r10;
        com.ichi2.libanki.DB $r11;
        io.requery.android.database.sqlite.SQLiteDatabase $r12;
        java.lang.String $r13, $r14;
        boolean $z0;
        java.lang.String[] $r16;
        java.util.Set $r17;
        java.util.Iterator $r18;
        java.lang.Object $r19;
        java.lang.Integer r20;
        java.lang.Throwable $r21;
        java.lang.RuntimeException $r22;
        java.lang.Object[] $r23;
        java.lang.Long $r24;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: org.json.JSONObject;

        r3 := @parameter2: java.util.Map;

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label01:
        $r8 = virtualinvoke $r2.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

        $i0 = virtualinvoke $r8.<org.json.JSONArray: int length()>();

        $l1 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label02:
        r9 = null;

     label03:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

     label04:
        $r13 = "select id, flds from notes where id in ";

     label05:
        $r14 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r1);

        $r13 = virtualinvoke $r13.<java.lang.String: java.lang.String concat(java.lang.String)>($r14);

        $r15 = virtualinvoke $r12.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r13, null);

     label06:
        r9 = $r15;

     label07:
        $z0 = interfaceinvoke $r15.<android.database.Cursor: boolean moveToNext()>();

     label08:
        if $z0 == 0 goto label28;

     label09:
        $l2 = interfaceinvoke $r15.<android.database.Cursor: long getLong(int)>(0);

        $r13 = interfaceinvoke $r15.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r16 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r13);

        r7 = new java.util.HashMap;

        specialinvoke r7.<java.util.HashMap: void <init>()>();

        $r17 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

     label11:
        if $z0 == 0 goto label17;

     label12:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.Integer) $r19;

        $r19 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r20);

        $i3 = virtualinvoke r20.<java.lang.Integer: int intValue()>();

        $r13 = $r16[$i3];

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r13);

     label13:
        goto label10;

     label14:
        $r21 := @caughtexception;

        if r9 == null goto label15;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label15:
        throw $r21;

     label16:
        r5 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r22;

     label17:
        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

     label18:
        $i3 = 0;

     label19:
        if $i3 >= $i0 goto label26;

     label20:
        r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $z0 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r20);

     label21:
        if $z0 == 0 goto label24;

     label22:
        r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r19 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r20);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r19);

     label23:
        $i3 = $i3 + 1;

        goto label19;

     label24:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("");

     label25:
        goto label23;

     label26:
        $i3 = interfaceinvoke r6.<java.util.List: int size()>();

        $r16 = newarray (java.lang.String)[$i3];

        $r23 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r16 = (java.lang.String[]) $r23;

        $r13 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>($r16);

        $r23 = newarray (java.lang.Object)[5];

        $r23[0] = $r13;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r23[1] = $r24;

        $l4 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r23[2] = $r24;

        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $i3 = virtualinvoke $r10.<com.ichi2.libanki.Collection: int usn()>();

        r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r23[3] = r20;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r23[4] = $r24;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r23);

     label27:
        goto label07;

     label28:
        if $r15 == null goto label29;

        interfaceinvoke $r15.<android.database.Cursor: void close()>();

     label29:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r11.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("update notes set flds=?,mid=?,mod=?,usn=? where id = ?", r4);

        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r10.<com.ichi2.libanki.Collection: void updateFieldCache(long[])>($r1);

        return;

        catch org.json.JSONException from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label14;
        catch java.lang.Throwable from label20 to label21 with label14;
        catch java.lang.Throwable from label22 to label23 with label14;
        catch java.lang.Throwable from label24 to label25 with label14;
        catch java.lang.Throwable from label26 to label27 with label14;
    }
    private java.lang.Object[] _reqForTemplate(org.json.JSONObject, java.util.ArrayList, org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r3;
        java.util.ArrayList r2, r4, r5, r7;
        org.json.JSONException r6;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.String r10, r19;
        java.lang.RuntimeException $r11;
        java.lang.Object[] r12, $r16;
        java.lang.Long $r13;
        long $l0;
        int $i1, $i2;
        java.lang.Integer $r14;
        java.lang.String[] $r15;
        com.ichi2.libanki.Collection $r17;
        java.util.HashMap $r18;
        org.json.JSONArray $r20;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        r2 := @parameter1: java.util.ArrayList;

        $r3 := @parameter2: org.json.JSONObject;

        r4 = new java.util.ArrayList;

     label01:
        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label02:
        r5 = new java.util.ArrayList;

     label03:
        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        $r8 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label11;

     label06:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

     label07:
        r10 = (java.lang.String) $r9;

     label08:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>("ankiflag");

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>("");

     label09:
        goto label04;

     label10:
        r6 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r6);

        throw $r11;

     label11:
        r12 = newarray (java.lang.Object)[7];

     label12:
        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

     label13:
        r12[0] = $r13;

     label14:
        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

     label15:
        r12[1] = $r13;

     label16:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label17:
        r12[2] = $r13;

     label18:
        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

     label19:
        r12[3] = $r13;

     label20:
        $i1 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label21:
        r12[4] = $r14;

        r12[5] = "";

     label22:
        $i1 = virtualinvoke r4.<java.util.ArrayList: int size()>();

     label23:
        $r15 = newarray (java.lang.String)[$i1];

     label24:
        $r16 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

     label25:
        $r15 = (java.lang.String[]) $r16;

     label26:
        r10 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>($r15);

     label27:
        r12[6] = r10;

        $r17 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label28:
        $r18 = virtualinvoke $r17.<com.ichi2.libanki.Collection: java.util.HashMap _renderQA(java.lang.Object[])>(r12);

        $r9 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("q");

     label29:
        r19 = (java.lang.String) $r9;

        r12 = newarray (java.lang.Object)[7];

     label30:
        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

     label31:
        r12[0] = $r13;

     label32:
        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

     label33:
        r12[1] = $r13;

     label34:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label35:
        r12[2] = $r13;

     label36:
        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

     label37:
        r12[3] = $r13;

     label38:
        $i1 = virtualinvoke $r3.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label39:
        r12[4] = $r14;

        r12[5] = "";

     label40:
        $i1 = virtualinvoke r5.<java.util.ArrayList: int size()>();

     label41:
        $r15 = newarray (java.lang.String)[$i1];

     label42:
        $r16 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

     label43:
        $r15 = (java.lang.String[]) $r16;

     label44:
        r10 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>($r15);

     label45:
        r12[6] = r10;

        $r17 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label46:
        $r18 = virtualinvoke $r17.<com.ichi2.libanki.Collection: java.util.HashMap _renderQA(java.lang.Object[])>(r12);

        $r9 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("q");

     label47:
        r10 = (java.lang.String) $r9;

     label48:
        $z0 = virtualinvoke r19.<java.lang.String: boolean equals(java.lang.Object)>(r10);

     label49:
        if $z0 == 0 goto label54;

        r12 = newarray (java.lang.Object)[3];

        r12[0] = "none";

        $r20 = new org.json.JSONArray;

     label50:
        specialinvoke $r20.<org.json.JSONArray: void <init>()>();

     label51:
        r12[1] = $r20;

        $r20 = new org.json.JSONArray;

     label52:
        specialinvoke $r20.<org.json.JSONArray: void <init>()>();

     label53:
        r12[2] = $r20;

        return r12;

     label54:
        $r20 = new org.json.JSONArray;

     label55:
        specialinvoke $r20.<org.json.JSONArray: void <init>()>();

     label56:
        r7 = new java.util.ArrayList;

     label57:
        specialinvoke r7.<java.util.ArrayList: void <init>()>();

     label58:
        $i1 = 0;

     label59:
        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label60:
        if $i1 >= $i2 goto label73;

     label61:
        virtualinvoke r7.<java.util.ArrayList: void clear()>();

        virtualinvoke r7.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r4);

        virtualinvoke r7.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i1, "");

        $i2 = virtualinvoke r7.<java.util.ArrayList: int size()>();

     label62:
        $r15 = newarray (java.lang.String)[$i2];

     label63:
        $r16 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

     label64:
        $r15 = (java.lang.String[]) $r16;

     label65:
        r19 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>($r15);

     label66:
        r12[6] = r19;

        $r17 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label67:
        $r18 = virtualinvoke $r17.<com.ichi2.libanki.Collection: java.util.HashMap _renderQA(java.lang.Object[])>(r12);

        $r9 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("q");

     label68:
        r19 = (java.lang.String) $r9;

     label69:
        $z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("ankiflag");

     label70:
        if $z0 != 0 goto label72;

     label71:
        virtualinvoke $r20.<org.json.JSONArray: org.json.JSONArray put(int)>($i1);

     label72:
        $i1 = $i1 + 1;

        goto label59;

     label73:
        $i1 = virtualinvoke $r20.<org.json.JSONArray: int length()>();

     label74:
        if $i1 <= 0 goto label75;

        r12 = newarray (java.lang.Object)[2];

        r12[0] = "all";

        r12[1] = $r20;

        return r12;

     label75:
        $r20 = new org.json.JSONArray;

     label76:
        specialinvoke $r20.<org.json.JSONArray: void <init>()>();

     label77:
        $i1 = 0;

     label78:
        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label79:
        if $i1 >= $i2 goto label92;

     label80:
        virtualinvoke r7.<java.util.ArrayList: void clear()>();

        virtualinvoke r7.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r5);

        virtualinvoke r7.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i1, "1");

        $i2 = virtualinvoke r7.<java.util.ArrayList: int size()>();

     label81:
        $r15 = newarray (java.lang.String)[$i2];

     label82:
        $r16 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

     label83:
        $r15 = (java.lang.String[]) $r16;

     label84:
        r19 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>($r15);

     label85:
        r12[6] = r19;

        $r17 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label86:
        $r18 = virtualinvoke $r17.<com.ichi2.libanki.Collection: java.util.HashMap _renderQA(java.lang.Object[])>(r12);

        $r9 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("q");

     label87:
        r19 = (java.lang.String) $r9;

     label88:
        $z0 = virtualinvoke r19.<java.lang.String: boolean equals(java.lang.Object)>(r10);

     label89:
        if $z0 != 0 goto label91;

     label90:
        virtualinvoke $r20.<org.json.JSONArray: org.json.JSONArray put(int)>($i1);

     label91:
        $i1 = $i1 + 1;

        goto label78;

     label92:
        r12 = newarray (java.lang.Object)[2];

        r12[0] = "any";

        r12[1] = $r20;

        return r12;

        catch org.json.JSONException from label01 to label02 with label10;
        catch org.json.JSONException from label03 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
        catch org.json.JSONException from label12 to label13 with label10;
        catch org.json.JSONException from label14 to label15 with label10;
        catch org.json.JSONException from label16 to label17 with label10;
        catch org.json.JSONException from label18 to label19 with label10;
        catch org.json.JSONException from label20 to label21 with label10;
        catch org.json.JSONException from label22 to label23 with label10;
        catch org.json.JSONException from label24 to label25 with label10;
        catch org.json.JSONException from label26 to label27 with label10;
        catch org.json.JSONException from label28 to label29 with label10;
        catch org.json.JSONException from label30 to label31 with label10;
        catch org.json.JSONException from label32 to label33 with label10;
        catch org.json.JSONException from label34 to label35 with label10;
        catch org.json.JSONException from label36 to label37 with label10;
        catch org.json.JSONException from label38 to label39 with label10;
        catch org.json.JSONException from label40 to label41 with label10;
        catch org.json.JSONException from label42 to label43 with label10;
        catch org.json.JSONException from label44 to label45 with label10;
        catch org.json.JSONException from label46 to label47 with label10;
        catch org.json.JSONException from label48 to label49 with label10;
        catch org.json.JSONException from label50 to label51 with label10;
        catch org.json.JSONException from label52 to label53 with label10;
        catch org.json.JSONException from label55 to label56 with label10;
        catch org.json.JSONException from label57 to label58 with label10;
        catch org.json.JSONException from label59 to label60 with label10;
        catch org.json.JSONException from label61 to label62 with label10;
        catch org.json.JSONException from label63 to label64 with label10;
        catch org.json.JSONException from label65 to label66 with label10;
        catch org.json.JSONException from label67 to label68 with label10;
        catch org.json.JSONException from label69 to label70 with label10;
        catch org.json.JSONException from label71 to label72 with label10;
        catch org.json.JSONException from label73 to label74 with label10;
        catch org.json.JSONException from label76 to label77 with label10;
        catch org.json.JSONException from label78 to label79 with label10;
        catch org.json.JSONException from label80 to label81 with label10;
        catch org.json.JSONException from label82 to label83 with label10;
        catch org.json.JSONException from label84 to label85 with label10;
        catch org.json.JSONException from label86 to label87 with label10;
        catch org.json.JSONException from label88 to label89 with label10;
        catch org.json.JSONException from label90 to label91 with label10;
    }
    private void _setID(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        long $l0;
        java.util.HashMap $r3;
        java.lang.Long $r4;
        boolean $z0;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

     label1:
        $r3 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

        goto label1;

     label2:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("id", $l0);

     label3:
        return;

     label4:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label2 to label3 with label4;
    }
    private void _syncTemplates(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        com.ichi2.libanki.Collection $r2;
        java.util.ArrayList $r3;
        long[] $r4;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Models: java.util.ArrayList nids(org.json.JSONObject)>($r1);

        $r4 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r3);

        virtualinvoke $r2.<com.ichi2.libanki.Collection: java.util.ArrayList genCards(long[])>($r4);

        return;
    }
    private void _updateRequired(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r6;
        org.json.JSONException r2;
        java.util.ArrayList r3;
        org.json.JSONArray r4, r5, $r8;
        int $i0, $i1;
        java.lang.String $r7;
        java.lang.Object[] $r9;
        java.lang.Object $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

     label01:
        $i0 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("type");

     label02:
        if $i0 != 1 goto label03;

        return;

     label03:
        r5 = new org.json.JSONArray;

     label04:
        specialinvoke r5.<org.json.JSONArray: void <init>()>();

     label05:
        r3 = new java.util.ArrayList;

     label06:
        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label07:
        $i0 = 0;

     label08:
        $i1 = virtualinvoke r4.<org.json.JSONArray: int length()>();

     label09:
        if $i0 >= $i1 goto label12;

     label10:
        $r6 = virtualinvoke r4.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $r7 = virtualinvoke $r6.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label11:
        $i0 = $i0 + 1;

        goto label08;

     label12:
        $r8 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label13:
        $i0 = 0;

     label14:
        $i1 = virtualinvoke $r8.<org.json.JSONArray: int length()>();

     label15:
        if $i0 >= $i1 goto label24;

     label16:
        $r6 = virtualinvoke $r8.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $r9 = specialinvoke r0.<com.ichi2.libanki.Models: java.lang.Object[] _reqForTemplate(org.json.JSONObject,java.util.ArrayList,org.json.JSONObject)>($r1, r3, $r6);

     label17:
        r4 = new org.json.JSONArray;

     label18:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

        $i1 = virtualinvoke $r6.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(int)>($i1);

     label19:
        $r10 = $r9[0];

     label20:
        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r10);

     label21:
        $r10 = $r9[1];

     label22:
        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r10);

        virtualinvoke r5.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r4);

     label23:
        $i0 = $i0 + 1;

        goto label14;

     label24:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("req", r5);

     label25:
        return;

     label26:
        r2 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

        catch org.json.JSONException from label01 to label02 with label26;
        catch org.json.JSONException from label04 to label05 with label26;
        catch org.json.JSONException from label06 to label07 with label26;
        catch org.json.JSONException from label08 to label09 with label26;
        catch org.json.JSONException from label10 to label11 with label26;
        catch org.json.JSONException from label12 to label13 with label26;
        catch org.json.JSONException from label14 to label15 with label26;
        catch org.json.JSONException from label16 to label17 with label26;
        catch org.json.JSONException from label18 to label19 with label26;
        catch org.json.JSONException from label20 to label21 with label26;
        catch org.json.JSONException from label22 to label23 with label26;
        catch org.json.JSONException from label24 to label25 with label26;
    }
    public static org.json.JSONObject addBasicModel(com.ichi2.libanki.Collection) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Collection $r0;
        org.json.JSONObject $r1;

        $r0 := @parameter0: com.ichi2.libanki.Collection;

        $r1 = staticinvoke <com.ichi2.libanki.Models: org.json.JSONObject addBasicModel(com.ichi2.libanki.Collection,java.lang.String)>($r0, "Basic");

        return $r1;
    }
    public static org.json.JSONObject addBasicModel(com.ichi2.libanki.Collection, java.lang.String) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Collection $r0;
        java.lang.String $r1;
        org.json.JSONException r2;
        com.ichi2.libanki.Models $r3;
        org.json.JSONObject $r4, $r5;
        java.lang.RuntimeException $r6;

        $r0 := @parameter0: com.ichi2.libanki.Collection;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Models: org.json.JSONObject newModel(java.lang.String)>($r1);

        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>("Front");

        virtualinvoke $r3.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>($r4, $r5);

        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>("Back");

        virtualinvoke $r3.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>($r4, $r5);

        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Models: org.json.JSONObject newTemplate(java.lang.String)>("Card 1");

     label1:
        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("qfmt", "{{Front}}");

        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("afmt", "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}");

     label2:
        virtualinvoke $r3.<com.ichi2.libanki.Models: void addTemplate(org.json.JSONObject,org.json.JSONObject)>($r4, $r5);

        virtualinvoke $r3.<com.ichi2.libanki.Models: void add(org.json.JSONObject)>($r4);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public static org.json.JSONObject addClozeModel(com.ichi2.libanki.Collection) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Collection $r0;
        org.json.JSONException r1;
        com.ichi2.libanki.Models $r2;
        org.json.JSONObject $r3, $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r7;
        java.lang.RuntimeException $r8;

        $r0 := @parameter0: com.ichi2.libanki.Collection;

        $r2 = virtualinvoke $r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject newModel(java.lang.String)>("Cloze");

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("type", 1);

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>("Text");

        virtualinvoke $r2.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>($r3, $r4);

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>("Extra");

        virtualinvoke $r2.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>($r3, $r4);

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject newTemplate(java.lang.String)>("Cloze");

     label2:
        $r5 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{{cloze:");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Text");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r5 = new java.lang.StringBuilder;

     label5:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("css");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".cloze {font-weight: bold;color: blue;}");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("css", $r7);

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("qfmt", $r6);

     label6:
        $r5 = new java.lang.StringBuilder;

     label7:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<br>\n{{Extra}}");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("afmt", $r6);

        virtualinvoke $r2.<com.ichi2.libanki.Models: void addTemplate(org.json.JSONObject,org.json.JSONObject)>($r3, $r4);

        virtualinvoke $r2.<com.ichi2.libanki.Models: void add(org.json.JSONObject)>($r3);

     label8:
        return $r3;

     label9:
        r1 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

        catch org.json.JSONException from label1 to label2 with label9;
        catch org.json.JSONException from label3 to label4 with label9;
        catch org.json.JSONException from label5 to label6 with label9;
        catch org.json.JSONException from label7 to label8 with label9;
    }
    public static org.json.JSONObject addForwardOptionalReverse(com.ichi2.libanki.Collection) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Collection $r0;
        org.json.JSONException r1;
        com.ichi2.libanki.Models $r2;
        org.json.JSONObject $r3, $r4;
        java.lang.RuntimeException $r5;

        $r0 := @parameter0: com.ichi2.libanki.Collection;

        $r2 = virtualinvoke $r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r3 = staticinvoke <com.ichi2.libanki.Models: org.json.JSONObject addBasicModel(com.ichi2.libanki.Collection)>($r0);

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", "Basic (optional reversed card)");

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>("Add Reverse");

        virtualinvoke $r2.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>($r3, $r4);

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject newTemplate(java.lang.String)>("Card 2");

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("qfmt", "{{#Add Reverse}}{{Back}}{{/Add Reverse}}");

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("afmt", "{{FrontSide}}\n\n<hr id=answer>\n\n{{Front}}");

        virtualinvoke $r2.<com.ichi2.libanki.Models: void addTemplate(org.json.JSONObject,org.json.JSONObject)>($r3, $r4);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public static org.json.JSONObject addForwardReverse(com.ichi2.libanki.Collection) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Collection $r0;
        org.json.JSONException r1;
        com.ichi2.libanki.Models $r2;
        org.json.JSONObject $r3, $r4;
        java.lang.RuntimeException $r5;

        $r0 := @parameter0: com.ichi2.libanki.Collection;

        $r2 = virtualinvoke $r0.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r3 = staticinvoke <com.ichi2.libanki.Models: org.json.JSONObject addBasicModel(com.ichi2.libanki.Collection)>($r0);

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", "Basic (and reversed card)");

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject newTemplate(java.lang.String)>("Card 2");

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("qfmt", "{{Back}}");

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("afmt", "{{FrontSide}}\n\n<hr id=answer>\n\n{{Front}}");

        virtualinvoke $r2.<com.ichi2.libanki.Models: void addTemplate(org.json.JSONObject,org.json.JSONObject)>($r3, $r4);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    private boolean validateBrackets(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        char c0, $c4;
        boolean $z0, z1;
        java.lang.String $r2;
        int i1, i2, $i3;
        char[] $r3;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $z0 = 1;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String toString()>();

        i1 = 0;

        z1 = 0;

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        i2 = 0;

     label01:
        $i3 = lengthof $r3;

        if i2 >= $i3 goto label09;

        c0 = $r3[i2];

        if c0 != 34 goto label05;

        if i2 == 0 goto label02;

        $i3 = i2 + -1;

        $c4 = $r3[$i3];

        if $c4 == 92 goto label05;

     label02:
        if z1 != 0 goto label04;

        z1 = 1;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        z1 = 0;

        goto label03;

     label05:
        if z1 != 0 goto label03;

        lookupswitch(c0)
        {
            case 123: goto label07;
            case 124: goto label06;
            case 125: goto label08;
            default: goto label06;
        };

     label06:
        goto label03;

     label07:
        i1 = i1 + 1;

        goto label03;

     label08:
        i1 = i1 + -1;

        if i1 >= 0 goto label03;

        return 0;

     label09:
        if i1 != 0 goto label11;

     label10:
        return $z0;

     label11:
        $z0 = 0;

        goto label10;
    }
    public java.util.ArrayList _availClozeOrds(org.json.JSONObject, java.lang.String)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.ichi2.libanki.Models: java.util.ArrayList _availClozeOrds(org.json.JSONObject,java.lang.String,boolean)>($r1, $r2, 1);

        return $r3;
    }
    public java.util.ArrayList _availClozeOrds(org.json.JSONObject, java.lang.String, boolean)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r10;
        java.lang.String $r2;
        boolean $z0, $z1;
        org.json.JSONException r3;
        java.util.ArrayList r4;
        java.util.HashSet r5;
        java.lang.String[] $r6;
        java.util.Map $r7;
        java.util.regex.Pattern $r8;
        org.json.JSONArray $r9;
        java.util.regex.Matcher $r11;
        java.lang.RuntimeException $r12;
        java.util.Iterator $r13;
        java.lang.Object $r14;
        android.util.Pair $r15;
        java.lang.Integer $r16;
        int $i0;
        java.lang.Integer[] $r17;
        java.util.List $r18;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r2);

        $r7 = virtualinvoke r0.<com.ichi2.libanki.Models: java.util.Map fieldMap(org.json.JSONObject)>($r1);

        r5 = new java.util.HashSet;

        specialinvoke r5.<java.util.HashSet: void <init>()>();

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r8 = <com.ichi2.libanki.Models: java.util.regex.Pattern fClozePattern1>;

     label01:
        $r9 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $r10 = virtualinvoke $r9.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(0);

        $r2 = virtualinvoke $r10.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("qfmt");

        $r11 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

     label02:
        $z1 = virtualinvoke $r11.<java.util.regex.Matcher: boolean find()>();

     label03:
        if $z1 == 0 goto label07;

     label04:
        $r2 = virtualinvoke $r11.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r2);

     label05:
        goto label02;

     label06:
        r3 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r12;

     label07:
        $r8 = <com.ichi2.libanki.Models: java.util.regex.Pattern fClozePattern2>;

     label08:
        $r9 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $r1 = virtualinvoke $r9.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(0);

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("qfmt");

        $r11 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

     label09:
        $z1 = virtualinvoke $r11.<java.util.regex.Matcher: boolean find()>();

     label10:
        if $z1 == 0 goto label13;

     label11:
        $r2 = virtualinvoke $r11.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r2);

     label12:
        goto label09;

     label13:
        $r13 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r14;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label14;

        $r14 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r15 = (android.util.Pair) $r14;

        $r14 = $r15.<android.util.Pair: java.lang.Object first>;

        $r16 = (java.lang.Integer) $r14;

        $i0 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        $r8 = <com.ichi2.libanki.Models: java.util.regex.Pattern fClozeOrdPattern>;

        $r2 = $r6[$i0];

        $r11 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

     label15:
        $z1 = virtualinvoke $r11.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label14;

        $r2 = virtualinvoke $r11.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $i0 = $i0 + -1;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r16);

        goto label15;

     label16:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $z1 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>($r16);

        if $z1 == 0 goto label17;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        interfaceinvoke r5.<java.util.Set: boolean remove(java.lang.Object)>($r16);

     label17:
        $z1 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label18;

        if $z0 == 0 goto label18;

        r4 = new java.util.ArrayList;

        $r17 = newarray (java.lang.Integer)[1];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r17[0] = $r16;

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        specialinvoke r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r18);

        return r4;

     label18:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r5);

        return r4;

        catch org.json.JSONException from label01 to label03 with label06;
        catch org.json.JSONException from label04 to label05 with label06;
        catch org.json.JSONException from label08 to label10 with label06;
        catch org.json.JSONException from label11 to label12 with label06;
    }
    public void _transformFields(org.json.JSONObject, com.ichi2.libanki.Models$TransformFieldVisitor)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        com.ichi2.libanki.Models$TransformFieldVisitor $r2;
        org.json.JSONException r3;
        java.util.ArrayList r4;
        long $l0;
        byte $b1;
        android.database.Cursor r5, $r11;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.DB $r7;
        io.requery.android.database.sqlite.SQLiteDatabase $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        boolean $z0;
        java.lang.Object[] $r12;
        java.lang.String[] $r13;
        java.lang.Long $r14;
        int $i2;
        java.lang.Integer $r15;
        java.lang.Throwable $r16;
        java.lang.RuntimeException $r17;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: com.ichi2.libanki.Models$TransformFieldVisitor;

     label01:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label02:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label03;

        return;

     label03:
        r4 = new java.util.ArrayList;

     label04:
        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label05:
        r5 = null;

     label06:
        $r6 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select id, flds from notes where mid = ");

        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r8.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])>($r10, null);

     label07:
        r5 = $r11;

     label08:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToNext()>();

     label09:
        if $z0 == 0 goto label16;

     label10:
        $r12 = newarray (java.lang.Object)[4];

        $r10 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r13 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r10);

        $r13 = interfaceinvoke $r2.<com.ichi2.libanki.Models$TransformFieldVisitor: java.lang.String[] transform(java.lang.String[])>($r13);

        $r10 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>($r13);

        $r12[0] = $r10;

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r12[1] = $r14;

        $r6 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $i2 = virtualinvoke $r6.<com.ichi2.libanki.Collection: int usn()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r12[2] = $r15;

        $l0 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>(0);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r12[3] = $r14;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label11:
        goto label08;

     label12:
        $r16 := @caughtexception;

        if r5 == null goto label14;

     label13:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

     label14:
        throw $r16;

     label15:
        r3 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r17;

     label16:
        if $r11 == null goto label18;

     label17:
        interfaceinvoke $r11.<android.database.Cursor: void close()>();

     label18:
        $r6 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label19:
        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r7.<com.ichi2.libanki.DB: void executeMany(java.lang.String,java.util.List)>("update notes set flds=?,mod=?,usn=? where id = ?", r4);

     label20:
        return;

        catch org.json.JSONException from label01 to label02 with label15;
        catch org.json.JSONException from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch org.json.JSONException from label13 to label15 with label15;
        catch org.json.JSONException from label17 to label18 with label15;
        catch org.json.JSONException from label19 to label20 with label15;
    }
    public void _updateFieldOrds(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        org.json.JSONArray $r3;
        int i0, $i1;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

     label1:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label2:
        i0 = 0;

     label3:
        $i1 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label4:
        if i0 >= $i1 goto label8;

     label5:
        $r1 = virtualinvoke $r3.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("ord", i0);

     label6:
        i0 = i0 + 1;

        goto label3;

     label7:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

     label8:
        return;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }
    public void _updateTemplOrds(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        org.json.JSONArray $r3;
        int i0, $i1;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

     label1:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label2:
        i0 = 0;

     label3:
        $i1 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label4:
        if i0 >= $i1 goto label8;

     label5:
        $r1 = virtualinvoke $r3.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("ord", i0);

     label6:
        i0 = i0 + 1;

        goto label3;

     label7:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

     label8:
        return;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }
    public void add(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        specialinvoke r0.<com.ichi2.libanki.Models: void _setID(org.json.JSONObject)>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void update(org.json.JSONObject)>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void setCurrent(org.json.JSONObject)>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

        return;
    }
    public void addField(org.json.JSONObject, org.json.JSONObject) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r2;
        org.json.JSONException r3;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Collection $r4;
        org.json.JSONArray $r5;
        com.ichi2.libanki.Models$TransformFieldAdd $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

     label1:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label4;

        $r4 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label3:
        virtualinvoke $r4.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

     label4:
        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

        virtualinvoke $r5.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r2);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("flds", $r5);

        virtualinvoke r0.<com.ichi2.libanki.Models: void _updateFieldOrds(org.json.JSONObject)>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

     label5:
        $r6 = new com.ichi2.libanki.Models$TransformFieldAdd;

     label6:
        specialinvoke $r6.<com.ichi2.libanki.Models$TransformFieldAdd: void <init>(com.ichi2.libanki.Models)>(r0);

        virtualinvoke r0.<com.ichi2.libanki.Models: void _transformFields(org.json.JSONObject,com.ichi2.libanki.Models$TransformFieldVisitor)>($r1, $r6);

     label7:
        return;

     label8:
        r3 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label8;
        catch org.json.JSONException from label3 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    public void addTemplate(org.json.JSONObject, org.json.JSONObject) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r2;
        org.json.JSONException r3;
        long $l0;
        byte $b1;
        com.ichi2.libanki.Collection $r4;
        org.json.JSONArray $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

     label1:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label4;

        $r4 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label3:
        virtualinvoke $r4.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

     label4:
        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        virtualinvoke $r5.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r2);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tmpls", $r5);

        virtualinvoke r0.<com.ichi2.libanki.Models: void _updateTemplOrds(org.json.JSONObject)>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

     label5:
        return;

     label6:
        r3 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label6;
        catch org.json.JSONException from label3 to label5 with label6;
    }
    public java.util.ArrayList all()
    {
        com.ichi2.libanki.Models r0;
        java.util.ArrayList r1;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.json.JSONObject r6;

        r0 := @this: com.ichi2.libanki.Models;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.json.JSONObject) $r5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return r1;
    }
    public java.util.ArrayList availOrds(org.json.JSONObject, java.lang.String)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        java.lang.String $r2;
        org.json.JSONException r3;
        int $i0, $i1, i2, $i3;
        java.util.ArrayList $r4;
        java.lang.String[] $r5;
        org.json.JSONArray $r6, $r7;
        boolean $z0;
        java.lang.Integer $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: java.lang.String;

     label01:
        $i0 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("type");

     label02:
        if $i0 != 1 goto label05;

     label03:
        $r4 = virtualinvoke r0.<com.ichi2.libanki.Models: java.util.ArrayList _availClozeOrds(org.json.JSONObject,java.lang.String)>($r1, $r2);

     label04:
        return $r4;

     label05:
        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r2);

     label06:
        $i0 = lengthof $r5;

        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label10;

        $r2 = $r5[$i1];

     label08:
        virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

     label09:
        $i1 = $i1 + 1;

        goto label07;

     label10:
        $r4 = new java.util.ArrayList;

     label11:
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("req");

     label12:
        $i0 = 0;

     label13:
        $i1 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label14:
        if $i0 >= $i1 goto label42;

     label15:
        $r7 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>($i0);

        $i1 = virtualinvoke $r7.<org.json.JSONArray: int getInt(int)>(0);

        $r2 = virtualinvoke $r7.<org.json.JSONArray: java.lang.String getString(int)>(1);

        $r7 = virtualinvoke $r7.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(2);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("none");

     label16:
        if $z0 == 0 goto label18;

     label17:
        $i0 = $i0 + 1;

        goto label13;

     label18:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("all");

     label19:
        if $z0 == 0 goto label32;

        $z0 = 1;

        i2 = 0;

     label20:
        $i3 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

     label21:
        if i2 >= $i3 goto label27;

     label22:
        $i3 = virtualinvoke $r7.<org.json.JSONArray: int getInt(int)>(i2);

     label23:
        $r2 = $r5[$i3];

        if $r2 == null goto label26;

        $r2 = $r5[$i3];

     label24:
        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

     label25:
        if $i3 != 0 goto label31;

     label26:
        $z0 = 0;

     label27:
        if $z0 == 0 goto label17;

     label28:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label29:
        goto label17;

     label30:
        r3 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r9;

     label31:
        i2 = i2 + 1;

        goto label20;

     label32:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("any");

     label33:
        if $z0 == 0 goto label28;

        $z0 = 0;

        i2 = 0;

     label34:
        $i3 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

     label35:
        if i2 >= $i3 goto label40;

     label36:
        $i3 = virtualinvoke $r7.<org.json.JSONArray: int getInt(int)>(i2);

     label37:
        $r2 = $r5[$i3];

        if $r2 == null goto label41;

        $r2 = $r5[$i3];

     label38:
        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

     label39:
        if $i3 == 0 goto label41;

        $z0 = 1;

     label40:
        if $z0 != 0 goto label28;

        goto label17;

     label41:
        i2 = i2 + 1;

        goto label34;

     label42:
        return $r4;

        catch org.json.JSONException from label01 to label02 with label30;
        catch org.json.JSONException from label03 to label04 with label30;
        catch org.json.JSONException from label05 to label06 with label30;
        catch org.json.JSONException from label08 to label09 with label30;
        catch org.json.JSONException from label11 to label12 with label30;
        catch org.json.JSONException from label13 to label14 with label30;
        catch org.json.JSONException from label15 to label16 with label30;
        catch org.json.JSONException from label18 to label19 with label30;
        catch org.json.JSONException from label20 to label21 with label30;
        catch org.json.JSONException from label22 to label23 with label30;
        catch org.json.JSONException from label24 to label25 with label30;
        catch org.json.JSONException from label28 to label29 with label30;
        catch org.json.JSONException from label32 to label33 with label30;
        catch org.json.JSONException from label34 to label35 with label30;
        catch org.json.JSONException from label36 to label37 with label30;
        catch org.json.JSONException from label38 to label39 with label30;
    }
    public void beforeUpload()
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONException r1;
        java.util.ArrayList $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.json.JSONObject r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Models;

     label1:
        $r2 = virtualinvoke r0.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label9;

     label4:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

     label5:
        r5 = (org.json.JSONObject) $r4;

     label6:
        virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", 0);

     label7:
        goto label2;

     label8:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label9:
        virtualinvoke r0.<com.ichi2.libanki.Models: void save()>();

        return;

        catch org.json.JSONException from label1 to label3 with label8;
        catch org.json.JSONException from label4 to label5 with label8;
        catch org.json.JSONException from label6 to label7 with label8;
    }
    public org.json.JSONObject byName(java.lang.String)
    {
        com.ichi2.libanki.Models r0;
        java.lang.String $r1, $r8;
        org.json.JSONException r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.json.JSONObject r7;
        java.lang.RuntimeException $r9;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.json.JSONObject) $r6;

     label2:
        $r8 = virtualinvoke r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r1);

     label3:
        if $z0 == 0 goto label1;

        return r7;

     label4:
        r2 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r9;

     label5:
        return null;

        catch org.json.JSONException from label2 to label3 with label4;
    }
    public void change(org.json.JSONObject, long[], org.json.JSONObject, java.util.Map, java.util.Map) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r3;
        long[] $r2;
        java.util.Map r4, r5;
        org.json.JSONException r6;
        com.ichi2.libanki.Collection $r7;
        boolean $z0;
        long $l0, $l1;
        byte $b2;
        java.lang.AssertionError $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: long[];

        $r3 := @parameter2: org.json.JSONObject;

        r4 := @parameter3: java.util.Map;

        r5 := @parameter4: java.util.Map;

        $r7 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

        $z0 = <com.ichi2.libanki.Models: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

     label1:
        $l0 = virtualinvoke $r3.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label2:
        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label7;

        if r4 == null goto label3;

        if r5 != null goto label7;

     label3:
        $r8 = new java.lang.AssertionError;

     label4:
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

     label5:
        throw $r8;

     label6:
        r6 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r6);

        throw $r9;

     label7:
        if r4 == null goto label8;

        specialinvoke r0.<com.ichi2.libanki.Models: void _changeNotes(long[],org.json.JSONObject,java.util.Map)>($r2, $r3, r4);

     label8:
        if r5 == null goto label9;

        specialinvoke r0.<com.ichi2.libanki.Models: void _changeCards(long[],org.json.JSONObject,org.json.JSONObject,java.util.Map)>($r2, $r1, $r3, r5);

     label9:
        $r7 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r7.<com.ichi2.libanki.Collection: java.util.ArrayList genCards(long[])>($r2);

        return;

        catch org.json.JSONException from label1 to label2 with label6;
        catch org.json.JSONException from label4 to label5 with label6;
    }
    public org.json.JSONObject copy(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, r2;
        java.lang.String $r3;
        java.lang.StringBuilder $r4;
        org.json.JSONException r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        r2 = new org.json.JSONObject;

     label1:
        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>($r1);

        specialinvoke r2.<org.json.JSONObject: void <init>(java.lang.String)>($r3);

     label2:
        $r4 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" copy");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r3);

     label4:
        virtualinvoke r0.<com.ichi2.libanki.Models: void add(org.json.JSONObject)>(r2);

        return r2;

     label5:
        r5 := @caughtexception;

     label6:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r6;

     label7:
        r5 := @caughtexception;

        goto label6;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label7;
    }
    public org.json.JSONObject current()
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Models: org.json.JSONObject current(boolean)>(1);

        return $r1;
    }
    public org.json.JSONObject current(boolean)
    {
        com.ichi2.libanki.Models r0;
        boolean $z0;
        org.json.JSONObject r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;
        long $l0;
        java.util.HashMap $r4;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r0 := @this: com.ichi2.libanki.Models;

        $z0 := @parameter0: boolean;

        r1 = null;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        r1 = virtualinvoke $r3.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

        $l0 = virtualinvoke r1.<org.json.JSONObject: long optLong(java.lang.String,long)>("mid", -1L);

        r1 = virtualinvoke r0.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

     label1:
        if r1 != null goto label2;

        $r2 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        r1 = virtualinvoke $r2.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $l0 = virtualinvoke r1.<org.json.JSONObject: long optLong(java.lang.String,long)>("curModel", -1L);

        r1 = virtualinvoke r0.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

     label2:
        if r1 != null goto label3;

        $r4 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r1 = (org.json.JSONObject) $r7;

     label3:
        return r1;
    }
    public java.util.Map fieldMap(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        java.util.HashMap r3;
        android.util.Pair $r4;
        org.json.JSONArray $r5;
        int i0, $i1;
        java.lang.String $r6;
        java.lang.Integer $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

     label01:
        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label02:
        r3 = new java.util.HashMap;

     label03:
        specialinvoke r3.<java.util.HashMap: void <init>()>();

     label04:
        i0 = 0;

     label05:
        $i1 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

     label06:
        if i0 >= $i1 goto label12;

     label07:
        $r1 = virtualinvoke $r5.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        $r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label08:
        $r4 = new android.util.Pair;

     label09:
        $i1 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r7, $r1);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r4);

     label10:
        i0 = i0 + 1;

        goto label05;

     label11:
        r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

     label12:
        return r3;

        catch org.json.JSONException from label01 to label02 with label11;
        catch org.json.JSONException from label03 to label04 with label11;
        catch org.json.JSONException from label05 to label06 with label11;
        catch org.json.JSONException from label07 to label08 with label11;
        catch org.json.JSONException from label09 to label10 with label11;
    }
    public java.util.ArrayList fieldNames(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        java.util.ArrayList r3;
        org.json.JSONArray $r4;
        int i0, $i1;
        java.lang.String $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

     label01:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label02:
        r3 = new java.util.ArrayList;

     label03:
        specialinvoke r3.<java.util.ArrayList: void <init>()>();

     label04:
        i0 = 0;

     label05:
        $i1 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

     label06:
        if i0 >= $i1 goto label10;

     label07:
        $r1 = virtualinvoke $r4.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        $r5 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label08:
        i0 = i0 + 1;

        goto label05;

     label09:
        r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

     label10:
        return r3;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
    }
    public void flush()
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject r1;
        org.json.JSONException r2;
        android.content.ContentValues r3;
        boolean $z0;
        java.util.HashMap $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        java.util.Map$Entry r8;
        java.lang.Long $r9;
        long $l0;
        java.lang.String $r10;
        java.lang.RuntimeException $r11;
        com.ichi2.libanki.Collection $r12;
        com.ichi2.libanki.DB $r13;

        r0 := @this: com.ichi2.libanki.Models;

        $z0 = r0.<com.ichi2.libanki.Models: boolean mChanged>;

        if $z0 == 0 goto label12;

        r1 = new org.json.JSONObject;

        specialinvoke r1.<org.json.JSONObject: void <init>()>();

        $r4 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

     label01:
        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label11;

     label04:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label05:
        r8 = (java.util.Map$Entry) $r7;

     label06:
        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

     label07:
        $r9 = (java.lang.Long) $r7;

     label08:
        $l0 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r10, $r7);

     label09:
        goto label02;

     label10:
        r2 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

     label11:
        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

        $r10 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>(r1);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("models", $r10);

        $r12 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r13 = virtualinvoke $r12.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        virtualinvoke $r13.<com.ichi2.libanki.DB: int update(java.lang.String,android.content.ContentValues)>("col", r3);

        r0.<com.ichi2.libanki.Models: boolean mChanged> = 0;

     label12:
        return;

        catch org.json.JSONException from label01 to label03 with label10;
        catch org.json.JSONException from label04 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
    }
    public org.json.JSONObject get(long)
    {
        com.ichi2.libanki.Models r0;
        long $l0;
        java.util.HashMap $r1;
        java.lang.Long $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.json.JSONObject $r4;

        r0 := @this: com.ichi2.libanki.Models;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.json.JSONObject) $r3;

        return $r4;

     label1:
        return null;
    }
    public int getId()
    {
        com.ichi2.libanki.Models r0;
        int i0;

        r0 := @this: com.ichi2.libanki.Models;

        i0 = r0.<com.ichi2.libanki.Models: int mId>;

        return i0;
    }
    public java.util.HashMap getModels()
    {
        com.ichi2.libanki.Models r0;
        java.util.HashMap r1;

        r0 := @this: com.ichi2.libanki.Models;

        r1 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        return r1;
    }
    public java.lang.String getName()
    {
        com.ichi2.libanki.Models r0;
        java.lang.String r1;

        r0 := @this: com.ichi2.libanki.Models;

        r1 = r0.<com.ichi2.libanki.Models: java.lang.String mName>;

        return r1;
    }
    public java.util.HashMap getTemplateNames()
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONException r1;
        java.util.HashMap r2, r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.json.JSONObject r7, $r9;
        org.json.JSONArray $r8;
        int i0, $i1;
        java.lang.Integer $r10;
        java.lang.String $r11;
        long $l2;
        java.lang.Long $r12;
        java.lang.RuntimeException $r13;

        r0 := @this: com.ichi2.libanki.Models;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        r2 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r4 = virtualinvoke r2.<java.util.HashMap: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.json.JSONObject) $r6;

     label02:
        $r8 = virtualinvoke r7.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label03:
        r2 = new java.util.HashMap;

     label04:
        specialinvoke r2.<java.util.HashMap: void <init>()>();

     label05:
        i0 = 0;

     label06:
        $i1 = virtualinvoke $r8.<org.json.JSONArray: int length()>();

     label07:
        if i0 >= $i1 goto label10;

     label08:
        $r9 = virtualinvoke $r8.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        $i1 = virtualinvoke $r9.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r11 = virtualinvoke $r9.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label09:
        i0 = i0 + 1;

        goto label06;

     label10:
        $l2 = virtualinvoke r7.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r2);

     label11:
        goto label01;

     label12:
        r1 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r13;

     label13:
        return r3;

        catch org.json.JSONException from label02 to label03 with label12;
        catch org.json.JSONException from label04 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
    }
    public boolean have(long)
    {
        com.ichi2.libanki.Models r0;
        long $l0;
        java.util.HashMap $r1;
        java.lang.Long $r2;
        boolean $z0;

        r0 := @this: com.ichi2.libanki.Models;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }
    public long[] ids()
    {
        com.ichi2.libanki.Models r0;
        long[] r1;
        java.util.HashMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        int $i0;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Long $r6;
        long $l1;

        r0 := @this: com.ichi2.libanki.Models;

        $r2 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r2 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        r1 = newarray (long)[$i0];

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Long) $r5;

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        r1[$i0] = $l1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public void load(java.lang.String)
    {
        com.ichi2.libanki.Models r0;
        java.lang.String $r1;
        org.json.JSONException r2;
        org.json.JSONObject r3, $r6;
        java.util.HashMap $r4;
        org.json.JSONArray $r5;
        int i0, $i1;
        long $l2;
        java.lang.Long $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: java.lang.String;

        r0.<com.ichi2.libanki.Models: boolean mChanged> = 0;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.libanki.Models: java.util.HashMap mModels> = $r4;

        r3 = new org.json.JSONObject;

     label01:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>($r1);

        $r5 = virtualinvoke r3.<org.json.JSONObject: org.json.JSONArray names()>();

     label02:
        if $r5 == null goto label10;

        i0 = 0;

     label03:
        $i1 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

     label04:
        if i0 >= $i1 goto label10;

     label05:
        $r1 = virtualinvoke $r5.<org.json.JSONArray: java.lang.String getString(int)>(i0);

        $r6 = virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>($r1);

     label06:
        $r4 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

     label07:
        $l2 = virtualinvoke $r6.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

     label08:
        i0 = i0 + 1;

        goto label03;

     label09:
        r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

     label10:
        return;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
    }
    public void moveField(org.json.JSONObject, org.json.JSONObject, int) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r2, $r7;
        int $i0, i1, i2, $i3;
        org.json.JSONException r3;
        java.util.ArrayList r4;
        com.ichi2.libanki.Collection $r5;
        org.json.JSONArray $r6;
        boolean $z0;
        java.lang.String $r8, $r9;
        com.ichi2.libanki.Models$TransformFieldMove $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        $i0 := @parameter2: int;

        $r5 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

     label01:
        $r6 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label02:
        r4 = new java.util.ArrayList;

     label03:
        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label04:
        i1 = -1;

        i2 = 0;

     label05:
        $i3 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label06:
        if i2 >= $i3 goto label10;

     label07:
        $r7 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i2);

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $r7 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i2);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

     label08:
        if $z0 == 0 goto label09;

        i1 = i2;

        if $i0 != i2 goto label09;

        return;

     label09:
        i2 = i2 + 1;

        goto label05;

     label10:
        $r6 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

        i2 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("sortf");

        $r7 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i2);

        $r8 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>($r7);

        virtualinvoke r4.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        virtualinvoke r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r2);

     label11:
        $r6 = new org.json.JSONArray;

     label12:
        specialinvoke $r6.<org.json.JSONArray: void <init>(java.util.Collection)>(r4);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("flds", $r6);

        $r6 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label13:
        i2 = 0;

     label14:
        $i3 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label15:
        if i2 >= $i3 goto label19;

     label16:
        $r2 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i2);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String jsonToString(org.json.JSONObject)>($r2);

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label17:
        if $z0 == 0 goto label24;

     label18:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("sortf", i2);

     label19:
        virtualinvoke r0.<com.ichi2.libanki.Models: void _updateFieldOrds(org.json.JSONObject)>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

     label20:
        $r10 = new com.ichi2.libanki.Models$TransformFieldMove;

     label21:
        specialinvoke $r10.<com.ichi2.libanki.Models$TransformFieldMove: void <init>(com.ichi2.libanki.Models,int,int)>(r0, $i0, i1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void _transformFields(org.json.JSONObject,com.ichi2.libanki.Models$TransformFieldVisitor)>($r1, $r10);

     label22:
        return;

     label23:
        r3 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r11;

     label24:
        i2 = i2 + 1;

        goto label14;

        catch org.json.JSONException from label01 to label02 with label23;
        catch org.json.JSONException from label03 to label04 with label23;
        catch org.json.JSONException from label05 to label06 with label23;
        catch org.json.JSONException from label07 to label08 with label23;
        catch org.json.JSONException from label10 to label11 with label23;
        catch org.json.JSONException from label12 to label13 with label23;
        catch org.json.JSONException from label14 to label15 with label23;
        catch org.json.JSONException from label16 to label17 with label23;
        catch org.json.JSONException from label18 to label20 with label23;
        catch org.json.JSONException from label21 to label22 with label23;
    }
    public void moveTemplate(org.json.JSONObject, org.json.JSONObject, int)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r2, $r9;
        int $i0, i1, i2, $i3;
        org.json.JSONException r3;
        java.util.ArrayList r4;
        java.util.HashMap r5;
        java.lang.StringBuilder r6, $r12;
        org.json.JSONArray $r7;
        java.lang.Object $r8;
        boolean $z0;
        java.lang.Integer $r10, $r11;
        com.ichi2.libanki.Collection $r13;
        com.ichi2.libanki.DB $r14;
        java.lang.String $r15;
        java.lang.Object[] $r16;
        long $l4;
        java.lang.Long $r17;
        java.lang.RuntimeException $r18;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        $i0 := @parameter2: int;

     label01:
        $r7 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label02:
        i1 = -1;

        r4 = new java.util.ArrayList;

     label03:
        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label04:
        r5 = new java.util.HashMap;

     label05:
        specialinvoke r5.<java.util.HashMap: void <init>()>();

     label06:
        i2 = 0;

     label07:
        $i3 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

     label08:
        if i2 >= $i3 goto label13;

     label09:
        $r8 = virtualinvoke $r7.<org.json.JSONArray: java.lang.Object get(int)>(i2);

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

     label10:
        if $z0 == 0 goto label11;

        i1 = i2;

        if $i0 != i2 goto label11;

        return;

     label11:
        $r9 = virtualinvoke $r7.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i2);

        $i3 = virtualinvoke $r9.<java.lang.Object: int hashCode()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i3 = virtualinvoke $r9.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label12:
        i2 = i2 + 1;

        goto label07;

     label13:
        virtualinvoke r4.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        virtualinvoke r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r2);

     label14:
        $r7 = new org.json.JSONArray;

     label15:
        specialinvoke $r7.<org.json.JSONArray: void <init>(java.util.Collection)>(r4);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tmpls", $r7);

        virtualinvoke r0.<com.ichi2.libanki.Models: void _updateTemplOrds(org.json.JSONObject)>($r1);

     label16:
        r6 = new java.lang.StringBuilder;

     label17:
        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label18:
        $i0 = 0;

     label19:
        i1 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

     label20:
        if $i0 >= i1 goto label25;

     label21:
        $r2 = virtualinvoke $r7.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $r12 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("when ord = ");

        i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" then ");

        i1 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        i1 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

     label22:
        i1 = i1 + -1;

        if $i0 == i1 goto label24;

     label23:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label24:
        $i0 = $i0 + 1;

        goto label19;

     label25:
        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

     label26:
        $r13 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label27:
        $r14 = virtualinvoke $r13.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label28:
        $r12 = new java.lang.StringBuilder;

     label29:
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update cards set ord = (case ");

        $r15 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r6 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end),usn=?,mod=? where nid in (select id from notes where mid = ?)");

        $r15 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label30:
        $r16 = newarray (java.lang.Object)[3];

        $r13 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label31:
        $i0 = virtualinvoke $r13.<com.ichi2.libanki.Collection: int usn()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label32:
        $r16[0] = $r10;

     label33:
        $l4 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

     label34:
        $r16[1] = $r17;

     label35:
        $l4 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

     label36:
        $r16[2] = $r17;

     label37:
        virtualinvoke $r14.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>($r15, $r16);

     label38:
        return;

     label39:
        r3 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r18;

        catch org.json.JSONException from label01 to label02 with label39;
        catch org.json.JSONException from label03 to label04 with label39;
        catch org.json.JSONException from label05 to label06 with label39;
        catch org.json.JSONException from label07 to label08 with label39;
        catch org.json.JSONException from label09 to label10 with label39;
        catch org.json.JSONException from label11 to label12 with label39;
        catch org.json.JSONException from label13 to label14 with label39;
        catch org.json.JSONException from label15 to label16 with label39;
        catch org.json.JSONException from label17 to label18 with label39;
        catch org.json.JSONException from label19 to label20 with label39;
        catch org.json.JSONException from label21 to label22 with label39;
        catch org.json.JSONException from label23 to label24 with label39;
        catch org.json.JSONException from label25 to label26 with label39;
        catch org.json.JSONException from label27 to label28 with label39;
        catch org.json.JSONException from label29 to label30 with label39;
        catch org.json.JSONException from label31 to label32 with label39;
        catch org.json.JSONException from label33 to label34 with label39;
        catch org.json.JSONException from label35 to label36 with label39;
        catch org.json.JSONException from label37 to label38 with label39;
    }
    public org.json.JSONObject newField(java.lang.String)
    {
        com.ichi2.libanki.Models r0;
        java.lang.String $r1;
        org.json.JSONException r2;
        org.json.JSONObject r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: java.lang.String;

        r3 = new org.json.JSONObject;

     label1:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>("{\'name\': \"\", \'ord\': null, \'sticky\': False, \'rtl\': False, \'font\': \"Arial\", \'size\': 20, \'media\': [] }");

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r1);

     label2:
        return r3;

     label3:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public org.json.JSONObject newModel(java.lang.String)
    {
        com.ichi2.libanki.Models r0;
        java.lang.String $r1;
        org.json.JSONException r2;
        org.json.JSONObject r3;
        long $l0;
        org.json.JSONArray $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: java.lang.String;

        r3 = new org.json.JSONObject;

     label1:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>("{\'sortf\': 0, \'did\': 1, \'latexPre\': \"\\\\documentclass[12pt]{article}\\n\\\\special{papersize=3in,5in}\\n\\\\usepackage[utf8]{inputenc}\\n\\\\usepackage{amssymb,amsmath}\\n\\\\pagestyle{empty}\\n\\\\setlength{\\\\parindent}{0in}\\n\\\\begin{document}\\n\", \'latexPost\': \"\\\\end{document}\", \'mod\': 0, \'usn\': 0, \'vers\': [], \'type\': 0, \'css\': \".card {\\n font-family: arial;\\n font-size: 20px;\\n text-align: center;\\n color: black;\\n background-color: white;\\n}\"}");

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r1);

        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("mod", $l0);

     label2:
        $r4 = new org.json.JSONArray;

     label3:
        specialinvoke $r4.<org.json.JSONArray: void <init>()>();

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("flds", $r4);

     label4:
        $r4 = new org.json.JSONArray;

     label5:
        specialinvoke $r4.<org.json.JSONArray: void <init>()>();

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tmpls", $r4);

     label6:
        $r4 = new org.json.JSONArray;

     label7:
        specialinvoke $r4.<org.json.JSONArray: void <init>()>();

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tags", $r4);

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("id", 0);

     label8:
        return r3;

     label9:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label9;
        catch org.json.JSONException from label3 to label4 with label9;
        catch org.json.JSONException from label5 to label6 with label9;
        catch org.json.JSONException from label7 to label8 with label9;
    }
    public org.json.JSONObject newTemplate(java.lang.String)
    {
        com.ichi2.libanki.Models r0;
        java.lang.String $r1;
        org.json.JSONException r2;
        org.json.JSONObject r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: java.lang.String;

        r3 = new org.json.JSONObject;

     label1:
        specialinvoke r3.<org.json.JSONObject: void <init>(java.lang.String)>("{\'name\': \"\", \'ord\': null, \'qfmt\': \"\", \'afmt\': \"\", \'did\': null, \'bqfmt\': \"\",\'bafmt\': \"\",\'bfont\': \"Arial\",\'bsize\': 12 }");

        virtualinvoke r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r1);

     label2:
        return r3;

     label3:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public java.util.ArrayList nids(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.DB $r4;
        java.lang.StringBuilder $r5;
        long $l0;
        java.lang.String $r6;
        java.util.ArrayList $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label1:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label2:
        $r5 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM notes WHERE mid = ");

        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r6, 0);

     label4:
        return $r7;

     label5:
        r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }
    public void rem(org.json.JSONObject) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        boolean z0;
        com.ichi2.libanki.Collection $r3, $r4;
        long $l0, $l1;
        byte $b2;
        com.ichi2.libanki.DB $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.util.ArrayList $r8;
        long[] $r9;
        java.util.HashMap $r10;
        java.lang.Long $r11;
        java.util.Collection $r12;
        java.util.Iterator $r13;
        java.lang.Object $r14;
        java.lang.RuntimeException $r15;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        z0 = 1;

        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

     label01:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r1 = virtualinvoke r0.<com.ichi2.libanki.Models: org.json.JSONObject current()>();

        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label02:
        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label14;

     label03:
        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        $r4 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label04:
        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label05:
        $r6 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id FROM cards WHERE nid IN (SELECT id FROM notes WHERE mid = ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r7, 0);

        $r9 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r8);

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void remCards(long[])>($r9);

     label07:
        $r10 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

     label08:
        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r11);

        virtualinvoke r0.<com.ichi2.libanki.Models: void save()>();

     label09:
        if z0 == 0 goto label16;

        $r10 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

     label10:
        $r12 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

     label11:
        $r1 = (org.json.JSONObject) $r14;

     label12:
        virtualinvoke r0.<com.ichi2.libanki.Models: void setCurrent(org.json.JSONObject)>($r1);

     label13:
        return;

     label14:
        z0 = 0;

        goto label03;

     label15:
        r2 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r15;

     label16:
        return;

        catch org.json.JSONException from label01 to label02 with label15;
        catch org.json.JSONException from label04 to label05 with label15;
        catch org.json.JSONException from label06 to label07 with label15;
        catch org.json.JSONException from label08 to label09 with label15;
        catch org.json.JSONException from label10 to label11 with label15;
        catch org.json.JSONException from label12 to label13 with label15;
    }
    public void remField(org.json.JSONObject, org.json.JSONObject) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r2, $r7;
        org.json.JSONException r3;
        org.json.JSONArray r4, $r6;
        com.ichi2.libanki.Collection $r5;
        int i0, i1, $i2;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.RuntimeException $r9;
        com.ichi2.libanki.Models$TransformFieldDelete $r10;
        java.util.ArrayList $r11;
        long[] $r12;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        $r5 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

     label01:
        $r6 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label02:
        r4 = new org.json.JSONArray;

     label03:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

     label04:
        i0 = -1;

        i1 = 0;

     label05:
        $i2 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label06:
        if i1 >= $i2 goto label13;

     label07:
        $r7 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i1);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

     label08:
        if $z0 == 0 goto label10;

        i0 = i1;

     label09:
        i1 = i1 + 1;

        goto label05;

     label10:
        $r8 = virtualinvoke $r6.<org.json.JSONArray: java.lang.Object get(int)>(i1);

        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r8);

     label11:
        goto label09;

     label12:
        r3 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r9;

     label13:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("flds", r4);

        i1 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("sortf");

        r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

        $i2 = virtualinvoke r4.<org.json.JSONArray: int length()>();

     label14:
        if i1 < $i2 goto label16;

        i1 = i1 + -1;

     label15:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("sortf", i1);

     label16:
        virtualinvoke r0.<com.ichi2.libanki.Models: void _updateFieldOrds(org.json.JSONObject)>($r1);

     label17:
        $r10 = new com.ichi2.libanki.Models$TransformFieldDelete;

     label18:
        specialinvoke $r10.<com.ichi2.libanki.Models$TransformFieldDelete: void <init>(com.ichi2.libanki.Models,int)>(r0, i0);

        virtualinvoke r0.<com.ichi2.libanki.Models: void _transformFields(org.json.JSONObject,com.ichi2.libanki.Models$TransformFieldVisitor)>($r1, $r10);

        i1 = virtualinvoke r0.<com.ichi2.libanki.Models: int sortIdx(org.json.JSONObject)>($r1);

     label19:
        if i0 != i1 goto label21;

        $r5 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label20:
        $r11 = virtualinvoke r0.<com.ichi2.libanki.Models: java.util.ArrayList nids(org.json.JSONObject)>($r1);

        $r12 = staticinvoke <com.ichi2.libanki.Utils: long[] toPrimitive(java.util.Collection)>($r11);

        virtualinvoke $r5.<com.ichi2.libanki.Collection: void updateFieldCache(long[])>($r12);

     label21:
        virtualinvoke r0.<com.ichi2.libanki.Models: void renameField(org.json.JSONObject,org.json.JSONObject,java.lang.String)>($r1, $r2, null);

     label22:
        return;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label04 with label12;
        catch org.json.JSONException from label05 to label06 with label12;
        catch org.json.JSONException from label07 to label08 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
        catch org.json.JSONException from label13 to label14 with label12;
        catch org.json.JSONException from label15 to label17 with label12;
        catch org.json.JSONException from label18 to label19 with label12;
        catch org.json.JSONException from label20 to label22 with label12;
    }
    public boolean remTemplate(org.json.JSONObject, org.json.JSONObject) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r2, $r18;
        org.json.JSONException r3;
        org.json.JSONArray r4, $r17;
        boolean $z0;
        int $i0, i1, $i2;
        java.lang.AssertionError $r5;
        java.lang.RuntimeException $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8;
        long $l3;
        java.lang.String $r9;
        com.ichi2.libanki.Collection $r10;
        com.ichi2.libanki.DB $r11;
        java.util.ArrayList $r12;
        long[] $r13;
        java.lang.Object[] $r14;
        java.lang.Integer $r15;
        java.lang.Long $r16;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        $z0 = <com.ichi2.libanki.Models: boolean $assertionsDisabled>;

        if $z0 != 0 goto label06;

     label01:
        r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i0 = virtualinvoke r4.<org.json.JSONArray: int length()>();

     label02:
        if $i0 > 1 goto label06;

        $r5 = new java.lang.AssertionError;

     label03:
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

     label04:
        throw $r5;

     label05:
        r3 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

     label06:
        r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label07:
        $i0 = -1;

        i1 = 0;

     label08:
        $i2 = virtualinvoke r4.<org.json.JSONArray: int length()>();

     label09:
        if i1 >= $i2 goto label12;

     label10:
        $r7 = virtualinvoke r4.<org.json.JSONArray: java.lang.Object get(int)>(i1);

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

     label11:
        if $z0 == 0 goto label21;

        $i0 = i1;

     label12:
        $r8 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select c.id from cards c, notes f where c.nid=f.id and mid = ");

        $l3 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ord = ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label15:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.DB: java.util.ArrayList queryColumn(java.lang.Class,java.lang.String,int)>(class "Ljava/lang/Long;", $r9, 0);

        $r13 = staticinvoke <com.ichi2.libanki.Utils: long[] toPrimitive(java.util.Collection)>($r12);

     label16:
        $r8 = new java.lang.StringBuilder;

     label17:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select nid, count() from cards where nid in (select nid from cards where id in ");

        $r9 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>($r13);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") group by nid having count() < 2 limit 1");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label18:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label19:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        i1 = virtualinvoke $r11.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r9);

     label20:
        if i1 == 0 goto label22;

        return 0;

     label21:
        i1 = i1 + 1;

        goto label08;

     label22:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label23:
        virtualinvoke $r10.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

     label24:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label25:
        virtualinvoke $r10.<com.ichi2.libanki.Collection: void remCards(long[])>($r13);

     label26:
        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label27:
        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label28:
        $r14 = newarray (java.lang.Object)[4];

        $r10 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label29:
        i1 = virtualinvoke $r10.<com.ichi2.libanki.Collection: int usn()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

     label30:
        $r14[0] = $r15;

     label31:
        $l3 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

     label32:
        $r14[1] = $r16;

     label33:
        $l3 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

     label34:
        $r14[2] = $r16;

     label35:
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label36:
        $r14[3] = $r15;

     label37:
        virtualinvoke $r11.<com.ichi2.libanki.DB: void execute(java.lang.String,java.lang.Object[])>("update cards set ord = ord - 1, usn = ?, mod = ? where nid in (select id from notes where mid = ?) and ord > ?", $r14);

        $r17 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label38:
        r4 = new org.json.JSONArray;

     label39:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

     label40:
        $i0 = 0;

     label41:
        i1 = virtualinvoke $r17.<org.json.JSONArray: int length()>();

     label42:
        if $i0 >= i1 goto label48;

     label43:
        $r18 = virtualinvoke $r17.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

     label44:
        if $z0 == 0 goto label46;

     label45:
        $i0 = $i0 + 1;

        goto label41;

     label46:
        $r7 = virtualinvoke $r17.<org.json.JSONArray: java.lang.Object get(int)>($i0);

        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r7);

     label47:
        goto label45;

     label48:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tmpls", r4);

     label49:
        virtualinvoke r0.<com.ichi2.libanki.Models: void _updateTemplOrds(org.json.JSONObject)>($r1);

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

        return 1;

        catch org.json.JSONException from label01 to label02 with label05;
        catch org.json.JSONException from label03 to label04 with label05;
        catch org.json.JSONException from label06 to label07 with label05;
        catch org.json.JSONException from label08 to label09 with label05;
        catch org.json.JSONException from label10 to label11 with label05;
        catch org.json.JSONException from label13 to label14 with label05;
        catch org.json.JSONException from label15 to label16 with label05;
        catch org.json.JSONException from label17 to label18 with label05;
        catch org.json.JSONException from label19 to label20 with label05;
        catch org.json.JSONException from label23 to label24 with label05;
        catch org.json.JSONException from label25 to label26 with label05;
        catch org.json.JSONException from label27 to label28 with label05;
        catch org.json.JSONException from label29 to label30 with label05;
        catch org.json.JSONException from label31 to label32 with label05;
        catch org.json.JSONException from label33 to label34 with label05;
        catch org.json.JSONException from label35 to label36 with label05;
        catch org.json.JSONException from label37 to label38 with label05;
        catch org.json.JSONException from label39 to label40 with label05;
        catch org.json.JSONException from label41 to label42 with label05;
        catch org.json.JSONException from label43 to label44 with label05;
        catch org.json.JSONException from label46 to label47 with label05;
        catch org.json.JSONException from label48 to label49 with label05;
    }
    public void renameField(org.json.JSONObject, org.json.JSONObject, java.lang.String) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r2, $r12;
        org.json.JSONException r3;
        java.lang.String r4, $r5, $r8, $r10, $r14;
        com.ichi2.libanki.Collection $r6;
        java.lang.Object[] $r7;
        java.lang.StringBuilder $r9;
        org.json.JSONArray $r11;
        int i0, $i1, $i2;
        java.lang.String[] $r13;
        boolean $z0;
        java.lang.RuntimeException $r15;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        $r5 := @parameter2: java.lang.String;

        $r6 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

        $r7 = newarray (java.lang.Object)[1];

     label01:
        r4 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>(r4);

     label02:
        $r7[0] = r4;

     label03:
        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\\{\\{([^{}]*)([:#^/]|[^:#/^}][^:}]*?:|)%s\\}\\}", $r7);

     label04:
        if $r5 != null goto label05;

        $r5 = "";

     label05:
        $r9 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{{$1$2");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label07:
        i0 = 0;

     label08:
        $i1 = virtualinvoke $r11.<org.json.JSONArray: int length()>();

     label09:
        if i0 >= $i1 goto label21;

     label10:
        $r12 = virtualinvoke $r11.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

     label11:
        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "qfmt";

        $r13[1] = "afmt";

        $i1 = lengthof $r13;

        $i2 = 0;

     label12:
        if $i2 >= $i1 goto label20;

        r4 = $r13[$i2];

     label13:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

     label14:
        if $z0 != 0 goto label17;

     label15:
        $r14 = virtualinvoke $r12.<org.json.JSONObject: java.lang.String getString(java.lang.String)>(r4);

        $r14 = virtualinvoke $r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r8, $r10);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(r4, $r14);

     label16:
        $i2 = $i2 + 1;

        goto label12;

     label17:
        $r14 = virtualinvoke $r12.<org.json.JSONObject: java.lang.String getString(java.lang.String)>(r4);

        $r14 = virtualinvoke $r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r8, "");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(r4, $r14);

     label18:
        goto label16;

     label19:
        r3 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r15;

     label20:
        i0 = i0 + 1;

        goto label08;

     label21:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r5);

     label22:
        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

        return;

        catch org.json.JSONException from label01 to label02 with label19;
        catch org.json.JSONException from label03 to label04 with label19;
        catch org.json.JSONException from label06 to label07 with label19;
        catch org.json.JSONException from label08 to label09 with label19;
        catch org.json.JSONException from label10 to label11 with label19;
        catch org.json.JSONException from label13 to label14 with label19;
        catch org.json.JSONException from label15 to label16 with label19;
        catch org.json.JSONException from label17 to label18 with label19;
        catch org.json.JSONException from label21 to label22 with label19;
    }
    public void save()
    {
        com.ichi2.libanki.Models r0;

        r0 := @this: com.ichi2.libanki.Models;

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject,boolean)>(null, 0);

        return;
    }
    public void save(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject,boolean)>($r1, 0);

        return;
    }
    public void save(org.json.JSONObject, boolean)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        boolean $z0, $z1;
        org.json.JSONException r2;
        long $l0;
        com.ichi2.libanki.Collection $r3;
        int $i1;
        byte $b2;
        java.lang.RuntimeException $r4;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $z0 := @parameter1: boolean;

        if $r1 == null goto label8;

        $z1 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("id");

        if $z1 == 0 goto label8;

     label1:
        $l0 = staticinvoke <com.ichi2.libanki.Utils: long intNow()>();

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("mod", $l0);

     label2:
        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label3:
        $i1 = virtualinvoke $r3.<com.ichi2.libanki.Collection: int usn()>();

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("usn", $i1);

        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label4:
        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label6;

     label5:
        specialinvoke r0.<com.ichi2.libanki.Models: void _updateRequired(org.json.JSONObject)>($r1);

     label6:
        if $z0 == 0 goto label8;

     label7:
        specialinvoke r0.<com.ichi2.libanki.Models: void _syncTemplates(org.json.JSONObject)>($r1);

     label8:
        r0.<com.ichi2.libanki.Models: boolean mChanged> = 1;

        return;

     label9:
        r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label9;
        catch org.json.JSONException from label3 to label4 with label9;
        catch org.json.JSONException from label5 to label6 with label9;
        catch org.json.JSONException from label7 to label8 with label9;
    }
    public java.lang.String scmhash(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r6;
        org.json.JSONException r2;
        java.lang.String r3;
        org.json.JSONArray $r4;
        int i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        r3 = "";

     label01:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

     label02:
        i0 = 0;

     label03:
        $i1 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

     label04:
        if i0 >= $i1 goto label07;

        $r5 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r6 = virtualinvoke $r4.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        r3 = virtualinvoke $r6.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        i0 = i0 + 1;

        goto label03;

     label07:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label08:
        i0 = 0;

     label09:
        $i1 = virtualinvoke $r4.<org.json.JSONArray: int length()>();

     label10:
        if i0 >= $i1 goto label16;

     label11:
        $r1 = virtualinvoke $r4.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

     label12:
        $r5 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        i0 = i0 + 1;

        goto label09;

     label15:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

     label16:
        r3 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String checksum(java.lang.String)>(r3);

        return r3;

        catch org.json.JSONException from label01 to label02 with label15;
        catch org.json.JSONException from label03 to label04 with label15;
        catch org.json.JSONException from label05 to label06 with label15;
        catch org.json.JSONException from label07 to label08 with label15;
        catch org.json.JSONException from label09 to label10 with label15;
        catch org.json.JSONException from label11 to label12 with label15;
        catch org.json.JSONException from label13 to label14 with label15;
    }
    public void setChanged()
    {
        com.ichi2.libanki.Models r0;

        r0 := @this: com.ichi2.libanki.Models;

        r0.<com.ichi2.libanki.Models: boolean mChanged> = 1;

        return;
    }
    public void setCurrent(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1, $r4;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        java.lang.Object $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label1:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $r5 = virtualinvoke $r1.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("id");

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("curModel", $r5);

     label2:
        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void setMod()>();

        return;

     label3:
        r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public void setSortIdx(org.json.JSONObject, int) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        int $i0;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        java.util.ArrayList $r4;
        long[] $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $i0 := @parameter1: int;

        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label1:
        virtualinvoke $r3.<com.ichi2.libanki.Collection: void modSchema(boolean)>(1);

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("sortf", $i0);

     label2:
        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label3:
        $r4 = virtualinvoke r0.<com.ichi2.libanki.Models: java.util.ArrayList nids(org.json.JSONObject)>($r1);

        $r5 = staticinvoke <com.ichi2.libanki.Utils: long[] toPrimitive(java.util.Collection)>($r4);

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void updateFieldCache(long[])>($r5);

        virtualinvoke r0.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r1);

     label4:
        return;

     label5:
        r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }
    public int sortIdx(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        int $i0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

     label1:
        $i0 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("sortf");

     label2:
        return $i0;

     label3:
        r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r3;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public int tmplUseCount(org.json.JSONObject, int)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        int $i0;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.DB $r4;
        java.lang.StringBuilder $r5;
        long $l1;
        java.lang.String $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $i0 := @parameter1: int;

        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label1:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label2:
        $r5 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select count() from cards, notes where cards.nid = notes.id and notes.mid = ");

        $l1 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and cards.ord = ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r4.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r6);

     label4:
        return $i0;

     label5:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }
    public void update(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        java.util.HashMap $r3;
        long $l0;
        java.lang.Long $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

     label1:
        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

     label2:
        virtualinvoke r0.<com.ichi2.libanki.Models: void save()>();

        return;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    public int useCount(org.json.JSONObject)
    {
        com.ichi2.libanki.Models r0;
        org.json.JSONObject $r1;
        org.json.JSONException r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.DB $r4;
        java.lang.StringBuilder $r5;
        long $l0;
        java.lang.String $r6;
        int $i1;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 := @parameter0: org.json.JSONObject;

        $r3 = r0.<com.ichi2.libanki.Models: com.ichi2.libanki.Collection mCol>;

     label1:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

     label2:
        $r5 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select count() from notes where mid = ");

        $l0 = virtualinvoke $r1.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r4.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r6);

     label4:
        return $i1;

     label5:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }
    public boolean validateModel()
    {
        com.ichi2.libanki.Models r0;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry r5;
        org.json.JSONObject $r6;

        r0 := @this: com.ichi2.libanki.Models;

        $r1 = r0.<com.ichi2.libanki.Models: java.util.HashMap mModels>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (org.json.JSONObject) $r4;

        $z0 = specialinvoke r0.<com.ichi2.libanki.Models: boolean validateBrackets(org.json.JSONObject)>($r6);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
