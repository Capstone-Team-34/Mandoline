com.ichi2.anki.DeckOptions extends com.ichi2.ui.AppCompatPreferenceActivity implements android.content.SharedPreferences$OnSharedPreferenceChangeListener
private com.ichi2.libanki.Collection mCol
private org.json.JSONObject mDeck
private org.json.JSONObject mOptions
private com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref
private boolean mPreferenceChanged
private android.content.BroadcastReceiver mUnmountReceiver
    public void <init>()
    {
        com.ichi2.anki.DeckOptions r0;

        r0 := @this: com.ichi2.anki.DeckOptions;

        specialinvoke r0.<com.ichi2.ui.AppCompatPreferenceActivity: void <init>()>();

        r0.<com.ichi2.anki.DeckOptions: boolean mPreferenceChanged> = 0;

        r0.<com.ichi2.anki.DeckOptions: android.content.BroadcastReceiver mUnmountReceiver> = null;

        return;
    }
    static org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)
    {
        com.ichi2.anki.DeckOptions $r0;
        org.json.JSONObject r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions;

        r1 = $r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mOptions>;

        return r1;
    }
    static org.json.JSONObject access$002(com.ichi2.anki.DeckOptions, org.json.JSONObject)
    {
        com.ichi2.anki.DeckOptions $r0;
        org.json.JSONObject $r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions;

        $r1 := @parameter1: org.json.JSONObject;

        $r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mOptions> = $r1;

        return $r1;
    }
    static org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)
    {
        com.ichi2.anki.DeckOptions $r0;
        org.json.JSONObject r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions;

        r1 = $r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mDeck>;

        return r1;
    }
    static com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)
    {
        com.ichi2.anki.DeckOptions $r0;
        com.ichi2.libanki.Collection r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions;

        r1 = $r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

        return r1;
    }
    static void access$500(com.ichi2.anki.DeckOptions)
    {
        com.ichi2.anki.DeckOptions $r0;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions;

        specialinvoke $r0.<com.ichi2.anki.DeckOptions: void restartActivity()>();

        return;
    }
    private void closeWithResult()
    {
        com.ichi2.anki.DeckOptions r0;
        boolean $z0;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $z0 = r0.<com.ichi2.anki.DeckOptions: boolean mPreferenceChanged>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void setResult(int)>(-1);

     label1:
        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void finish()>();

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int FADE>;

        staticinvoke <com.ichi2.anim.ActivityTransitionAnimation: void slide(android.app.Activity,int)>(r0, $i0);

        return;

     label2:
        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void setResult(int)>(0);

        goto label1;
    }
    private int getOptionsGroupCount()
    {
        com.ichi2.anki.DeckOptions r0;
        org.json.JSONException r1;
        int i0, $i2;
        org.json.JSONObject $r2;
        long $l1, $l3;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        java.util.ArrayList $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        byte $b4;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.anki.DeckOptions;

        i0 = 0;

        $r2 = r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mDeck>;

     label01:
        $l1 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

     label02:
        $r3 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

     label03:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label13;

     label06:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label07:
        $r2 = (org.json.JSONObject) $r7;

     label08:
        $i2 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label09:
        if $i2 == 1 goto label04;

     label10:
        $l3 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

     label11:
        $b4 = $l3 cmp $l1;

        if $b4 != 0 goto label04;

        i0 = i0 + 1;

        goto label04;

     label12:
        r1 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

     label13:
        return i0;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
    }
    private java.lang.String getOptionsGroupName()
    {
        com.ichi2.anki.DeckOptions r0;
        org.json.JSONException r1;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r2;
        long $l0;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        org.json.JSONObject $r5;
        java.lang.String $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r2 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $l0 = virtualinvoke $r2.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: long getLong(java.lang.String,long)>("deckConf", 0L);

        $r3 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

     label1:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l0);

        $r6 = virtualinvoke $r5.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label2:
        return $r6;

     label3:
        r1 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label3;
    }
    private int getSubdeckCount()
    {
        com.ichi2.anki.DeckOptions r0;
        org.json.JSONException r1;
        int i0, $i2;
        org.json.JSONObject $r2;
        long $l1;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        java.util.TreeMap $r5;
        java.util.Set $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.util.Map$Entry r9;
        java.lang.Long $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.anki.DeckOptions;

        i0 = 0;

        $r2 = r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mDeck>;

     label01:
        $l1 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label02:
        $r3 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

     label03:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l1);

        $r6 = virtualinvoke $r5.<java.util.TreeMap: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label13;

     label06:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label07:
        r9 = (java.util.Map$Entry) $r8;

        $r3 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

     label08:
        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r8 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

     label09:
        $r10 = (java.lang.Long) $r8;

     label10:
        $l1 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $r2 = virtualinvoke $r4.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l1);

        $i2 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label11:
        if $i2 == 1 goto label04;

        i0 = i0 + 1;

        goto label04;

     label12:
        r1 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r11;

     label13:
        return i0;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
    }
    private void registerExternalStorageListener()
    {
        com.ichi2.anki.DeckOptions r0;
        android.content.IntentFilter r1;
        android.content.BroadcastReceiver $r2;
        com.ichi2.anki.DeckOptions$1 $r3;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r2 = r0.<com.ichi2.anki.DeckOptions: android.content.BroadcastReceiver mUnmountReceiver>;

        if $r2 != null goto label1;

        $r3 = new com.ichi2.anki.DeckOptions$1;

        specialinvoke $r3.<com.ichi2.anki.DeckOptions$1: void <init>(com.ichi2.anki.DeckOptions)>(r0);

        r0.<com.ichi2.anki.DeckOptions: android.content.BroadcastReceiver mUnmountReceiver> = $r3;

        r1 = new android.content.IntentFilter;

        specialinvoke r1.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("com.ichi2.anki.action.MEDIA_EJECT");

        $r2 = r0.<com.ichi2.anki.DeckOptions: android.content.BroadcastReceiver mUnmountReceiver>;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r2, r1);

     label1:
        return;
    }
    private void restartActivity()
    {
        com.ichi2.anki.DeckOptions r0;
        android.content.Intent $r1;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label1;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void recreate()>();

        return;

     label1:
        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.content.Intent getIntent()>();

        virtualinvoke $r1.<android.content.Intent: android.content.Intent addFlags(int)>(65536);

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void finish()>();

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void overridePendingTransition(int,int)>(0, 0);

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void startActivity(android.content.Intent)>($r1);

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void overridePendingTransition(int,int)>(0, 0);

        return;
    }
    protected void buildLists()
    {
        com.ichi2.anki.DeckOptions r0;
        java.lang.String[] r1, r2;
        org.json.JSONException r3;
        android.preference.Preference $r4;
        android.preference.ListPreference r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Decks $r7;
        java.util.ArrayList $r8;
        com.ichi2.anki.DeckOptions$JSONNameComparator $r9;
        int $i0, $i1;
        java.lang.Object $r10;
        org.json.JSONObject r11;
        java.lang.String $r12;
        java.lang.RuntimeException $r13;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r14;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.preference.Preference findPreference(java.lang.CharSequence)>("deckConf");

        r5 = (android.preference.ListPreference) $r4;

        $r6 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Decks: java.util.ArrayList allConf()>();

        $r9 = new com.ichi2.anki.DeckOptions$JSONNameComparator;

        specialinvoke $r9.<com.ichi2.anki.DeckOptions$JSONNameComparator: void <init>(com.ichi2.anki.DeckOptions)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r8, $r9);

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label01:
        $i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

     label02:
        if $i0 >= $i1 goto label10;

     label03:
        $r10 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

     label04:
        r11 = (org.json.JSONObject) $r10;

     label05:
        $r12 = virtualinvoke r11.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("id");

     label06:
        r2[$i0] = $r12;

     label07:
        $r12 = virtualinvoke r11.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label08:
        r1[$i0] = $r12;

        $i0 = $i0 + 1;

        goto label01;

     label09:
        r3 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r13;

     label10:
        virtualinvoke r5.<android.preference.ListPreference: void setEntries(java.lang.CharSequence[])>(r1);

        virtualinvoke r5.<android.preference.ListPreference: void setEntryValues(java.lang.CharSequence[])>(r2);

        $r14 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r12 = virtualinvoke $r14.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>("deckConf", "0");

        virtualinvoke r5.<android.preference.ListPreference: void setValue(java.lang.String)>($r12);

        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.preference.Preference findPreference(java.lang.CharSequence)>("newOrder");

        r5 = (android.preference.ListPreference) $r4;

        virtualinvoke r5.<android.preference.ListPreference: void setEntries(int)>(2131296268);

        virtualinvoke r5.<android.preference.ListPreference: void setEntryValues(int)>(2131296291);

        $r14 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r12 = virtualinvoke $r14.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>("newOrder", "0");

        virtualinvoke r5.<android.preference.ListPreference: void setValue(java.lang.String)>($r12);

        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.preference.Preference findPreference(java.lang.CharSequence)>("lapLeechAct");

        r5 = (android.preference.ListPreference) $r4;

        virtualinvoke r5.<android.preference.ListPreference: void setEntries(int)>(2131296267);

        virtualinvoke r5.<android.preference.ListPreference: void setEntryValues(int)>(2131296289);

        $r14 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r12 = virtualinvoke $r14.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>("lapLeechAct", "0");

        virtualinvoke r5.<android.preference.ListPreference: void setValue(java.lang.String)>($r12);

        return;

        catch org.json.JSONException from label01 to label02 with label09;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch org.json.JSONException from label07 to label08 with label09;
    }
    public android.content.SharedPreferences getSharedPreferences(java.lang.String, int)
    {
        com.ichi2.anki.DeckOptions r0;
        java.lang.String $r1;
        int $i0;
        java.lang.Object[] $r2;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r3;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("getSharedPreferences(name=%s)", $r2);

        r3 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        return r3;
    }
    protected void onCreate(android.os.Bundle)
    {
        com.ichi2.anki.DeckOptions r0;
        android.os.Bundle $r1;
        org.json.JSONException r2;
        com.ichi2.anki.CollectionHelper $r3;
        com.ichi2.libanki.Collection $r4;
        android.content.Intent $r5;
        boolean $z0;
        com.ichi2.libanki.Decks $r6;
        long $l0;
        org.json.JSONObject $r7;
        java.lang.Object[] $r8;
        android.support.v7.app.ActionBar $r9;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r10;
        android.content.res.Resources $r11;
        java.lang.String $r12, r13;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r1 := @parameter0: android.os.Bundle;

        staticinvoke <com.ichi2.themes.Themes: void setThemeLegacy(android.content.Context)>(r0);

        specialinvoke r0.<com.ichi2.ui.AppCompatPreferenceActivity: void onCreate(android.os.Bundle)>($r1);

        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r4 = virtualinvoke $r3.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>(r0);

        r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol> = $r4;

        $r4 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

        if $r4 != null goto label1;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void finish()>();

        return;

     label1:
        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.content.Intent getIntent()>();

        $r1 = virtualinvoke $r5.<android.content.Intent: android.os.Bundle getExtras()>();

        if $r1 == null goto label4;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("did");

        if $z0 == 0 goto label4;

        $r4 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r1.<android.os.Bundle: long getLong(java.lang.String)>("did");

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mDeck> = $r7;

     label2:
        specialinvoke r0.<com.ichi2.anki.DeckOptions: void registerExternalStorageListener()>();

        $r4 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

        if $r4 != null goto label5;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("DeckOptions - No Collection loaded", $r8);

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void finish()>();

     label3:
        $r9 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.support.v7.app.ActionBar getSupportActionBar()>();

        virtualinvoke $r9.<android.support.v7.app.ActionBar: void setHomeButtonEnabled(boolean)>(1);

        $r9 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.support.v7.app.ActionBar getSupportActionBar()>();

        virtualinvoke $r9.<android.support.v7.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>(1);

        return;

     label4:
        $r4 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection mCol>;

        $r6 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

        r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mDeck> = $r7;

        goto label2;

     label5:
        $r10 = new com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        specialinvoke $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: void <init>(com.ichi2.anki.DeckOptions)>(r0);

        r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref> = $r10;

        $r10 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        virtualinvoke $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>(r0);

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void addPreferencesFromResource(int)>(2131165185);

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void buildLists()>();

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void updateSummaries()>();

        $r11 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.content.res.Resources getResources()>();

        $r12 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String getString(int)>(2131230954);

        r13 = $r12;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("XXX");

        if $z0 == 0 goto label7;

        $r7 = r0.<com.ichi2.anki.DeckOptions: org.json.JSONObject mDeck>;

     label6:
        r13 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        r13 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("XXX", r13);

     label7:
        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void setTitle(java.lang.CharSequence)>(r13);

        goto label3;

     label8:
        r2 := @caughtexception;

        r13 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("XXX", "???");

        goto label7;

        catch org.json.JSONException from label6 to label7 with label8;
    }
    protected void onDestroy()
    {
        com.ichi2.anki.DeckOptions r0;
        android.content.BroadcastReceiver $r1;

        r0 := @this: com.ichi2.anki.DeckOptions;

        specialinvoke r0.<com.ichi2.ui.AppCompatPreferenceActivity: void onDestroy()>();

        $r1 = r0.<com.ichi2.anki.DeckOptions: android.content.BroadcastReceiver mUnmountReceiver>;

        if $r1 == null goto label1;

        $r1 = r0.<com.ichi2.anki.DeckOptions: android.content.BroadcastReceiver mUnmountReceiver>;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

     label1:
        return;
    }
    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        com.ichi2.anki.DeckOptions r0;
        int $i0, $i1;
        android.view.KeyEvent $r1;
        java.lang.Object[] $r2;
        boolean $z0;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        if $i0 != 4 goto label1;

        $i1 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label1;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckOptions - onBackPressed()", $r2);

        specialinvoke r0.<com.ichi2.anki.DeckOptions: void closeWithResult()>();

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.ichi2.ui.AppCompatPreferenceActivity: boolean onKeyDown(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;
    }
    public boolean onOptionsItemSelected(android.view.MenuItem)
    {
        com.ichi2.anki.DeckOptions r0;
        android.view.MenuItem $r1;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r1 := @parameter0: android.view.MenuItem;

        $i0 = interfaceinvoke $r1.<android.view.MenuItem: int getItemId()>();

        lookupswitch($i0)
        {
            case 16908332: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        specialinvoke r0.<com.ichi2.anki.DeckOptions: void closeWithResult()>();

        return 1;
    }
    public boolean onPreferenceTreeClick(android.preference.PreferenceScreen, android.preference.Preference)
    {
        com.ichi2.anki.DeckOptions r0;
        android.preference.PreferenceScreen $r1;
        android.preference.Preference $r2;
        boolean $z0;
        android.app.Dialog $r3;
        android.view.Window $r4;
        android.view.View $r5, $r6;
        android.graphics.drawable.Drawable $r7;
        android.graphics.drawable.Drawable$ConstantState $r8;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r1 := @parameter0: android.preference.PreferenceScreen;

        $r2 := @parameter1: android.preference.Preference;

        specialinvoke r0.<com.ichi2.ui.AppCompatPreferenceActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)>($r1, $r2);

        if $r2 == null goto label1;

        $z0 = $r2 instanceof android.preference.PreferenceScreen;

        if $z0 == 0 goto label1;

        $r1 = (android.preference.PreferenceScreen) $r2;

        $r3 = virtualinvoke $r1.<android.preference.PreferenceScreen: android.app.Dialog getDialog()>();

        if $r3 == null goto label1;

        $r1 = (android.preference.PreferenceScreen) $r2;

        $r3 = virtualinvoke $r1.<android.preference.PreferenceScreen: android.app.Dialog getDialog()>();

        $r4 = virtualinvoke $r3.<android.app.Dialog: android.view.Window getWindow()>();

        $r5 = virtualinvoke $r4.<android.view.Window: android.view.View getDecorView()>();

        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.view.Window getWindow()>();

        $r6 = virtualinvoke $r4.<android.view.Window: android.view.View getDecorView()>();

        $r7 = virtualinvoke $r6.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $r8 = virtualinvoke $r7.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        $r7 = virtualinvoke $r8.<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>();

        virtualinvoke $r5.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r7);

     label1:
        return 0;
    }
    public void onSharedPreferenceChanged(android.content.SharedPreferences, java.lang.String)
    {
        com.ichi2.anki.DeckOptions r0;
        android.content.SharedPreferences $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r1 := @parameter0: android.content.SharedPreferences;

        $r2 := @parameter1: java.lang.String;

        r0.<com.ichi2.anki.DeckOptions: boolean mPreferenceChanged> = 1;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions: void updateSummaries()>();

        return;
    }
    protected void updateSummaries()
    {
        com.ichi2.anki.DeckOptions r0;
        android.content.res.Resources $r1;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String r7, $r13, $r14;
        android.preference.Preference $r8;
        int $i0;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;
        android.preference.ListPreference r11;
        java.lang.CharSequence $r12;

        r0 := @this: com.ichi2.anki.DeckOptions;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.content.res.Resources getResources()>();

        $r2 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r3 = staticinvoke <com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map access$600(com.ichi2.anki.DeckOptions$DeckPreferenceHack)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.preference.Preference findPreference(java.lang.CharSequence)>(r7);

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("deckConf");

        if $z0 == 0 goto label02;

        r7 = specialinvoke r0.<com.ichi2.anki.DeckOptions: java.lang.String getOptionsGroupName()>();

        $i0 = specialinvoke r0.<com.ichi2.anki.DeckOptions: int getOptionsGroupCount()>();

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("%", "%%");

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r7;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9[1] = $r10;

        r7 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>(2131361794, $i0, $r9);

        virtualinvoke $r8.<android.preference.Preference: void setSummary(java.lang.CharSequence)>(r7);

        goto label01;

     label02:
        if $r8 == null goto label01;

        $z0 = $r8 instanceof android.preference.CheckBoxPreference;

        if $z0 != 0 goto label01;

        $z0 = $r8 instanceof android.preference.ListPreference;

        if $z0 == 0 goto label07;

        r11 = (android.preference.ListPreference) $r8;

        $r12 = virtualinvoke r11.<android.preference.ListPreference: java.lang.CharSequence getEntry()>();

        if $r12 == null goto label06;

        $r12 = virtualinvoke r11.<android.preference.ListPreference: java.lang.CharSequence getEntry()>();

        $r13 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

     label03:
        $r2 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r3 = staticinvoke <com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map access$700(com.ichi2.anki.DeckOptions$DeckPreferenceHack)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z0 != 0 goto label05;

        $r12 = virtualinvoke $r8.<android.preference.Preference: java.lang.CharSequence getSummary()>();

        $r2 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r3 = staticinvoke <com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map access$700(com.ichi2.anki.DeckOptions$DeckPreferenceHack)>($r2);

        if $r12 == null goto label08;

        $r12 = virtualinvoke $r8.<android.preference.Preference: java.lang.CharSequence getSummary()>();

        $r14 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

     label04:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r14);

     label05:
        $r2 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r3 = staticinvoke <com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map access$700(com.ichi2.anki.DeckOptions$DeckPreferenceHack)>($r2);

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r7 = (java.lang.String) $r6;

        if r7 == null goto label09;

        $z0 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("XXX");

        if $z0 == 0 goto label09;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("XXX", $r13);

        virtualinvoke $r8.<android.preference.Preference: void setSummary(java.lang.CharSequence)>(r7);

        goto label01;

     label06:
        $r13 = "";

        goto label03;

     label07:
        $r2 = r0.<com.ichi2.anki.DeckOptions: com.ichi2.anki.DeckOptions$DeckPreferenceHack mPref>;

        $r13 = virtualinvoke $r2.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>(r7, "");

        goto label03;

     label08:
        $r14 = null;

        goto label04;

     label09:
        virtualinvoke $r8.<android.preference.Preference: void setSummary(java.lang.CharSequence)>($r13);

        goto label01;

     label10:
        $i0 = specialinvoke r0.<com.ichi2.anki.DeckOptions: int getSubdeckCount()>();

        $r8 = virtualinvoke r0.<com.ichi2.anki.DeckOptions: android.preference.Preference findPreference(java.lang.CharSequence)>("confSetSubdecks");

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9[0] = $r10;

        r7 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>(2131361795, $i0, $r9);

        virtualinvoke $r8.<android.preference.Preference: void setSummary(java.lang.CharSequence)>(r7);

        return;
    }
