com.ichi2.anki.NoteEditor extends com.ichi2.anki.AnkiActivity
private static final java.lang.String ACTION_CREATE_FLASHCARD
private static final java.lang.String ACTION_CREATE_FLASHCARD_SEND
public static final int CALLER_CARDBROWSER_ADD
public static final int CALLER_CARDBROWSER_EDIT
public static final int CALLER_CARDEDITOR
public static final int CALLER_CARDEDITOR_INTENT_ADD
public static final int CALLER_DECKPICKER
public static final int CALLER_NOCALLER
public static final int CALLER_REVIEWER
public static final int CALLER_REVIEWER_ADD
public static final int CALLER_STUDYOPTIONS
public static final java.lang.String EXTRA_CALLER
public static final java.lang.String EXTRA_CARD_ID
public static final java.lang.String EXTRA_CONTENTS
public static final java.lang.String EXTRA_ID
public static final int REQUEST_ADD
public static final int REQUEST_MULTIMEDIA_EDIT
public static final int REQUEST_TEMPLATE_EDIT
public static final java.lang.String SOURCE_TEXT
public static final java.lang.String TARGET_TEXT
public static com.ichi2.libanki.Card mCurrentEditedCard
private boolean mAddNote
private boolean mAedictIntent
private java.util.ArrayList mAllDeckIds
private java.util.ArrayList mAllModelIds
private int mCaller
private android.widget.TextView mCardsButton
private boolean mChanged
private long mCurrentDid
private java.util.LinkedList mEditFields
private com.ichi2.libanki.Note mEditorNote
private boolean mFieldEdited
private android.widget.LinearLayout mFieldsLayoutContainer
private java.util.Map mModelChangeCardMap
private java.util.Map mModelChangeFieldMap
private android.widget.Spinner mNoteDeckSpinner
private android.widget.Spinner mNoteTypeSpinner
private com.afollestad.materialdialogs.MaterialDialog mProgressDialog
private boolean mReloadRequired
private com.ichi2.async.DeckTask$TaskListener mSaveFactHandler
private android.os.Bundle mSavedFields
private java.util.List mSelectedTags
private java.lang.String[] mSourceText
private android.widget.TextView mTagsButton
private boolean mTagsEdited
private android.content.BroadcastReceiver mUnmountReceiver
    public void <init>()
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.anki.NoteEditor$1 $r1;

        r0 := @this: com.ichi2.anki.NoteEditor;

        specialinvoke r0.<com.ichi2.anki.AnkiActivity: void <init>()>();

        r0.<com.ichi2.anki.NoteEditor: boolean mChanged> = 0;

        r0.<com.ichi2.anki.NoteEditor: boolean mTagsEdited> = 0;

        r0.<com.ichi2.anki.NoteEditor: boolean mFieldEdited> = 0;

        r0.<com.ichi2.anki.NoteEditor: boolean mReloadRequired> = 0;

        r0.<com.ichi2.anki.NoteEditor: android.content.BroadcastReceiver mUnmountReceiver> = null;

        $r1 = new com.ichi2.anki.NoteEditor$1;

        specialinvoke $r1.<com.ichi2.anki.NoteEditor$1: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        r0.<com.ichi2.anki.NoteEditor: com.ichi2.async.DeckTask$TaskListener mSaveFactHandler> = $r1;

        return;
    }
    static com.afollestad.materialdialogs.MaterialDialog access$000(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        com.afollestad.materialdialogs.MaterialDialog r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: com.afollestad.materialdialogs.MaterialDialog mProgressDialog>;

        return r1;
    }
    static com.afollestad.materialdialogs.MaterialDialog access$002(com.ichi2.anki.NoteEditor, com.afollestad.materialdialogs.MaterialDialog)
    {
        com.ichi2.anki.NoteEditor $r0;
        com.afollestad.materialdialogs.MaterialDialog $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: com.afollestad.materialdialogs.MaterialDialog;

        $r0.<com.ichi2.anki.NoteEditor: com.afollestad.materialdialogs.MaterialDialog mProgressDialog> = $r1;

        return $r1;
    }
    static void access$1000(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor()>();

        return;
    }
    static boolean access$102(com.ichi2.anki.NoteEditor, boolean)
    {
        com.ichi2.anki.NoteEditor $r0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $z0 := @parameter1: boolean;

        $r0.<com.ichi2.anki.NoteEditor: boolean mChanged> = $z0;

        return $z0;
    }
    static boolean access$1102(com.ichi2.anki.NoteEditor, boolean)
    {
        com.ichi2.anki.NoteEditor $r0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $z0 := @parameter1: boolean;

        $r0.<com.ichi2.anki.NoteEditor: boolean mFieldEdited> = $z0;

        return $z0;
    }
    static boolean access$1202(com.ichi2.anki.NoteEditor, boolean)
    {
        com.ichi2.anki.NoteEditor $r0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $z0 := @parameter1: boolean;

        $r0.<com.ichi2.anki.NoteEditor: boolean mTagsEdited> = $z0;

        return $z0;
    }
    static void access$1300(com.ichi2.anki.NoteEditor, int)
    {
        com.ichi2.anki.NoteEditor $r0;
        int $i0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $i0 := @parameter1: int;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor(int)>($i0);

        return;
    }
    static void access$1400(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void showCardTemplateEditor()>();

        return;
    }
    static long access$1502(com.ichi2.anki.NoteEditor, long)
    {
        com.ichi2.anki.NoteEditor $r0;
        long $l0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $l0 := @parameter1: long;

        $r0.<com.ichi2.anki.NoteEditor: long mCurrentDid> = $l0;

        return $l0;
    }
    static java.util.ArrayList access$1600(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.ArrayList r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllDeckIds>;

        return r1;
    }
    static void access$1900(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void showTagsDialog()>();

        return;
    }
    static void access$2000(com.ichi2.anki.NoteEditor, org.json.JSONObject, org.json.JSONObject)
    {
        com.ichi2.anki.NoteEditor $r0;
        org.json.JSONObject $r1, $r2;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: org.json.JSONObject;

        $r2 := @parameter2: org.json.JSONObject;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void changeNoteTypeWithErrorHandling(org.json.JSONObject,org.json.JSONObject)>($r1, $r2);

        return;
    }
    static java.lang.String[] access$202(com.ichi2.anki.NoteEditor, java.lang.String[])
    {
        com.ichi2.anki.NoteEditor $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: java.lang.String[];

        $r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText> = $r1;

        return $r1;
    }
    static void access$2100(com.ichi2.anki.NoteEditor, org.json.JSONObject, org.json.JSONObject) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.anki.NoteEditor $r0;
        org.json.JSONObject $r1, $r2;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: org.json.JSONObject;

        $r2 := @parameter2: org.json.JSONObject;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void changeNoteType(org.json.JSONObject,org.json.JSONObject)>($r1, $r2);

        return;
    }
    static boolean access$2202(com.ichi2.anki.NoteEditor, boolean)
    {
        com.ichi2.anki.NoteEditor $r0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $z0 := @parameter1: boolean;

        $r0.<com.ichi2.anki.NoteEditor: boolean mReloadRequired> = $z0;

        return $z0;
    }
    static java.util.List access$2300(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.List r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        return r1;
    }
    static java.util.List access$2302(com.ichi2.anki.NoteEditor, java.util.List)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.List $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: java.util.List;

        $r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags> = $r1;

        return $r1;
    }
    static void access$2400(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void updateTags()>();

        return;
    }
    static void access$2500(com.ichi2.anki.NoteEditor, int, com.ichi2.anki.multimediacard.IMultimediaEditableNote, com.ichi2.anki.multimediacard.fields.IField)
    {
        com.ichi2.anki.NoteEditor $r0;
        int $i0;
        com.ichi2.anki.multimediacard.IMultimediaEditableNote $r1;
        com.ichi2.anki.multimediacard.fields.IField $r2;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $i0 := @parameter1: int;

        $r1 := @parameter2: com.ichi2.anki.multimediacard.IMultimediaEditableNote;

        $r2 := @parameter3: com.ichi2.anki.multimediacard.fields.IField;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void startMultimediaFieldEditor(int,com.ichi2.anki.multimediacard.IMultimediaEditableNote,com.ichi2.anki.multimediacard.fields.IField)>($i0, $r1, $r2);

        return;
    }
    static java.lang.String access$2600(com.ichi2.anki.NoteEditor, java.lang.String, int, int)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 = specialinvoke $r0.<com.ichi2.anki.NoteEditor: java.lang.String insertClozeAround(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r1;
    }
    static java.util.Map access$2700(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeFieldMap>;

        return r1;
    }
    static java.util.Map access$2702(com.ichi2.anki.NoteEditor, java.util.Map)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.Map $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: java.util.Map;

        $r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeFieldMap> = $r1;

        return $r1;
    }
    static java.lang.Object access$2800(com.ichi2.anki.NoteEditor, java.util.Map, java.lang.Object)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.Map $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: java.lang.Object;

        $r2 = specialinvoke $r0.<com.ichi2.anki.NoteEditor: java.lang.Object getKeyByValue(java.util.Map,java.lang.Object)>($r1, $r2);

        return $r2;
    }
    static org.json.JSONObject access$2900(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        org.json.JSONObject $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 = specialinvoke $r0.<com.ichi2.anki.NoteEditor: org.json.JSONObject getCurrentlySelectedModel()>();

        return $r1;
    }
    static com.ichi2.libanki.Note access$300(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        com.ichi2.libanki.Note r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        return r1;
    }
    static void access$3000(com.ichi2.anki.NoteEditor, org.json.JSONObject)
    {
        com.ichi2.anki.NoteEditor $r0;
        org.json.JSONObject $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: org.json.JSONObject;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void updateFieldsFromMap(org.json.JSONObject)>($r1);

        return;
    }
    static boolean access$3100(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $z0 = specialinvoke $r0.<com.ichi2.anki.NoteEditor: boolean duplicateCheck()>();

        return $z0;
    }
    static java.util.ArrayList access$3200(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.ArrayList r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllModelIds>;

        return r1;
    }
    static void access$3300(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void updateDeckPosition()>();

        return;
    }
    static void access$3400(com.ichi2.anki.NoteEditor, java.lang.String[])
    {
        com.ichi2.anki.NoteEditor $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: java.lang.String[];

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void resetEditFields(java.lang.String[])>($r1);

        return;
    }
    static java.util.Map access$3500(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeCardMap>;

        return r1;
    }
    static java.util.Map access$3502(com.ichi2.anki.NoteEditor, java.util.Map)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.Map $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: java.util.Map;

        $r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeCardMap> = $r1;

        return $r1;
    }
    static android.widget.Spinner access$3600(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        android.widget.Spinner r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteDeckSpinner>;

        return r1;
    }
    static void access$3700(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void populateEditFields()>();

        return;
    }
    static void access$3800(com.ichi2.anki.NoteEditor, org.json.JSONObject)
    {
        com.ichi2.anki.NoteEditor $r0;
        org.json.JSONObject $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: org.json.JSONObject;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void updateCards(org.json.JSONObject)>($r1);

        return;
    }
    static void access$400(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void setNote()>();

        return;
    }
    static java.util.LinkedList access$500(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        java.util.LinkedList r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        r1 = $r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        return r1;
    }
    static boolean access$600(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        boolean z0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        z0 = $r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        return z0;
    }
    static int access$700(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        int i0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        i0 = $r0.<com.ichi2.anki.NoteEditor: int mCaller>;

        return i0;
    }
    static boolean access$800(com.ichi2.anki.NoteEditor)
    {
        com.ichi2.anki.NoteEditor $r0;
        boolean z0;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        z0 = $r0.<com.ichi2.anki.NoteEditor: boolean mAedictIntent>;

        return z0;
    }
    static void access$900(com.ichi2.anki.NoteEditor, android.content.Intent)
    {
        com.ichi2.anki.NoteEditor $r0;
        android.content.Intent $r1;

        $r0 := @parameter0: com.ichi2.anki.NoteEditor;

        $r1 := @parameter1: android.content.Intent;

        specialinvoke $r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor(android.content.Intent)>($r1);

        return;
    }
    private boolean addFromAedict(java.lang.String)
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String $r1, $r3;
        java.lang.String[] $r2, $r4;
        int i0, $i1, $i2;
        boolean $z0;
        android.content.res.Resources $r5;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label5;

        $r1 = $r2[i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label4;

        $r1 = $r2[i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z0 == 0 goto label4;

        $r1 = $r2[i0];

        $r3 = $r2[i0];

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z0 == 0 goto label4;

        $i1 = lengthof $r2;

        $i2 = i0 + 1;

        if $i1 <= $i2 goto label3;

        i0 = i0 + 1;

        $r1 = $r2[i0];

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = lengthof $r2;

        if i0 <= 1 goto label2;

        $r4 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r1 = $r2[1];

        $r4[0] = $r1;

        $r4 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r1 = $r2[0];

        $r4[1] = $r1;

        r0.<com.ichi2.anki.NoteEditor: boolean mAedictIntent> = 1;

        return 0;

     label2:
        $r5 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131231092);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r1, 0);

        return 1;

     label3:
        $r5 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131231092);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r1, 0);

        return 1;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        $r5 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131231091);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r1, 0);

        return 1;
    }
    private boolean allowFieldRemapping()
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String[][] $r1;
        com.ichi2.libanki.Note $r2;
        int $i0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r2 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r1 = virtualinvoke $r2.<com.ichi2.libanki.Note: java.lang.String[][] items()>();

        $i0 = lengthof $r1;

        if $i0 <= 2 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void changeNoteType(org.json.JSONObject, org.json.JSONObject) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.anki.NoteEditor r0;
        org.json.JSONObject $r1, $r2;
        long[] r3;
        java.util.Map $r4, $r8;
        com.ichi2.libanki.Note $r5;
        long $l0;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Models $r7;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        r3 = newarray (long)[1];

        $r5 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $l0 = virtualinvoke $r5.<com.ichi2.libanki.Note: long getId()>();

        r3[0] = $l0;

        $r6 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r8 = r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeFieldMap>;

        $r4 = r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeCardMap>;

        virtualinvoke $r7.<com.ichi2.libanki.Models: void change(org.json.JSONObject,long[],org.json.JSONObject,java.util.Map,java.util.Map)>($r1, r3, $r2, $r8, $r4);

        $r5 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        virtualinvoke $r5.<com.ichi2.libanki.Note: void load()>();

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor()>();

        return;
    }
    private void changeNoteTypeWithErrorHandling(org.json.JSONObject, org.json.JSONObject)
    {
        com.ichi2.anki.NoteEditor r0;
        org.json.JSONObject $r1, $r2;
        com.ichi2.anki.NoteEditor$6 r3;
        com.ichi2.anki.dialogs.ConfirmationDialog r4;
        com.ichi2.anki.exception.ConfirmModSchemaException r5;
        android.content.res.Resources $r6;
        java.lang.String $r7;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        $r6 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

     label1:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void changeNoteType(org.json.JSONObject,org.json.JSONObject)>($r1, $r2);

     label2:
        return;

     label3:
        r5 := @caughtexception;

        r4 = new com.ichi2.anki.dialogs.ConfirmationDialog;

        specialinvoke r4.<com.ichi2.anki.dialogs.ConfirmationDialog: void <init>()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int)>(2131231051);

        virtualinvoke r4.<com.ichi2.anki.dialogs.ConfirmationDialog: void setArgs(java.lang.String)>($r7);

        r3 = new com.ichi2.anki.NoteEditor$6;

        specialinvoke r3.<com.ichi2.anki.NoteEditor$6: void <init>(com.ichi2.anki.NoteEditor,org.json.JSONObject,org.json.JSONObject)>(r0, $r1, $r2);

        virtualinvoke r4.<com.ichi2.anki.dialogs.ConfirmationDialog: void setConfirm(java.lang.Runnable)>(r3);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void showDialogFragment(android.support.v4.app.DialogFragment)>(r4);

        return;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label3;
    }
    private void closeCardEditorWithCheck()
    {
        com.ichi2.anki.NoteEditor r0;
        boolean $z0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $z0 = specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean hasUnsavedChanges()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void showDiscardChangesDialog()>();

        return;

     label1:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor()>();

        return;
    }
    private void closeNoteEditor()
    {
        com.ichi2.anki.NoteEditor r0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor(android.content.Intent)>(null);

        return;
    }
    private void closeNoteEditor(int)
    {
        com.ichi2.anki.NoteEditor r0;
        int $i0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor(int,android.content.Intent)>($i0, null);

        return;
    }
    private void closeNoteEditor(int, android.content.Intent)
    {
        com.ichi2.anki.NoteEditor r0;
        int $i0;
        android.content.Intent $r1;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.content.Intent;

        if $r1 == null goto label2;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void setResult(int,android.content.Intent)>($i0, $r1);

     label1:
        $i0 = r0.<com.ichi2.anki.NoteEditor: int mCaller>;

        if $i0 != 10 goto label3;

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int NONE>;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void finishWithAnimation(int)>($i0);

        return;

     label2:
        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void setResult(int)>($i0);

        goto label1;

     label3:
        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int RIGHT>;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void finishWithAnimation(int)>($i0);

        return;
    }
    private void closeNoteEditor(android.content.Intent)
    {
        com.ichi2.anki.NoteEditor r0;
        android.content.Intent r1;
        boolean $z0;
        byte b0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        r1 := @parameter0: android.content.Intent;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mChanged>;

        if $z0 == 0 goto label4;

        b0 = -1;

     label1:
        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mReloadRequired>;

        if $z0 == 0 goto label3;

        if r1 != null goto label2;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>()>();

     label2:
        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("reloadRequired", 1);

     label3:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor(int,android.content.Intent)>(b0, r1);

        return;

     label4:
        b0 = 0;

        goto label1;
    }
    private boolean duplicateCheck()
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String r1;
        java.util.LinkedList $r2;
        java.lang.Object $r3;
        com.ichi2.anki.FieldEditText r4;
        com.ichi2.libanki.Note $r5;
        java.lang.String[] $r6;
        java.lang.Integer $r7;
        int $i0;
        boolean z0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r2 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object get(int)>(0);

        r4 = (com.ichi2.anki.FieldEditText) $r3;

        $r5 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Note: java.lang.String[] getFields()>();

        r1 = $r6[0];

        specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean updateField(com.ichi2.anki.FieldEditText)>(r4);

        $r5 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r7 = virtualinvoke $r5.<com.ichi2.libanki.Note: java.lang.Integer dupeOrEmpty()>();

        if $r7 == null goto label2;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i0 != 2 goto label2;

        virtualinvoke r4.<com.ichi2.anki.FieldEditText: void setDupeStyle()>();

        z0 = 1;

     label1:
        $r5 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Note: java.lang.String[] values()>();

        $r6[0] = r1;

        return z0;

     label2:
        virtualinvoke r4.<com.ichi2.anki.FieldEditText: void setDefaultStyle()>();

        z0 = 0;

        goto label1;
    }
    private void fetchIntentInformation(android.content.Intent)
    {
        com.ichi2.anki.NoteEditor r0;
        android.content.Intent $r1;
        android.util.Pair r2;
        android.os.Bundle $r3;
        java.lang.String $r4, $r5;
        boolean $z0;
        java.lang.String[] $r6;
        java.lang.Object $r7;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: android.content.Intent;

        $r3 = virtualinvoke $r1.<android.content.Intent: android.os.Bundle getExtras()>();

        $r4 = "org.openintents.action.CREATE_FLASHCARD";

        $r5 = virtualinvoke $r1.<android.content.Intent: java.lang.String getAction()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.String)[2];

        r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText> = $r6;

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r4 = virtualinvoke $r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("SOURCE_TEXT");

        $r6[0] = $r4;

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r4 = virtualinvoke $r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("TARGET_TEXT");

        $r6[1] = $r4;

        return;

     label1:
        $r4 = virtualinvoke $r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.intent.extra.SUBJECT");

        if $r4 == null goto label5;

        $r4 = virtualinvoke $r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.intent.extra.SUBJECT");

     label2:
        $r5 = virtualinvoke $r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.intent.extra.TEXT");

        if $r5 == null goto label6;

        $r5 = virtualinvoke $r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.intent.extra.TEXT");

     label3:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label4;

        $r4 = $r5;

        $r5 = "";

     label4:
        r2 = new android.util.Pair;

        specialinvoke r2.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = newarray (java.lang.String)[2];

        r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText> = $r6;

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r7 = r2.<android.util.Pair: java.lang.Object first>;

        $r4 = (java.lang.String) $r7;

        $r6[0] = $r4;

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r7 = r2.<android.util.Pair: java.lang.Object second>;

        $r4 = (java.lang.String) $r7;

        $r6[1] = $r4;

        return;

     label5:
        $r4 = "";

        goto label2;

     label6:
        $r5 = "";

        goto label3;
    }
    private org.json.JSONObject getCurrentlySelectedModel()
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Models $r2;
        java.util.ArrayList $r3;
        android.widget.Spinner $r4;
        int $i0;
        java.lang.Object $r5;
        java.lang.Long $r6;
        long $l1;
        org.json.JSONObject $r7;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r3 = r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllModelIds>;

        $r4 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteTypeSpinner>;

        $i0 = virtualinvoke $r4.<android.widget.Spinner: int getSelectedItemPosition()>();

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r6 = (java.lang.Long) $r5;

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $r7 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        return $r7;
    }
    private java.lang.String getFieldsText()
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String[] r1;
        java.util.LinkedList $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.ichi2.anki.FieldEditText $r4;
        android.text.Editable $r5;
        java.lang.String $r6;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r2 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label1:
        $r2 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i1 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        if $i0 >= $i1 goto label2;

        $r2 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object get(int)>($i0);

        $r4 = (com.ichi2.anki.FieldEditText) $r3;

        $r5 = virtualinvoke $r4.<com.ichi2.anki.FieldEditText: android.text.Editable getText()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        r1[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>(r1);

        return $r6;
    }
    private java.lang.Object getKeyByValue(java.util.Map, java.lang.Object)
    {
        com.ichi2.anki.NoteEditor r0;
        java.util.Map r1;
        java.lang.Object r2, $r5;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.util.Map$Entry r6;

        r0 := @this: com.ichi2.anki.NoteEditor;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        r2 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        return r2;

     label2:
        return null;
    }
    private boolean hasUnsavedChanges()
    {
        com.ichi2.anki.NoteEditor r0;
        long $l0, $l1;
        boolean $z0;
        org.json.JSONObject $r1, $r3;
        com.ichi2.libanki.Card $r2;
        byte $b2;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<com.ichi2.anki.NoteEditor: org.json.JSONObject getCurrentlySelectedModel()>();

        $r2 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Card: org.json.JSONObject model()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label2;

        $r2 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        if $r2 == null goto label2;

        $r2 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $l1 = virtualinvoke $r2.<com.ichi2.libanki.Card: long getDid()>();

        $l0 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label3;

     label2:
        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mFieldEdited>;

        if $z0 != 0 goto label3;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mTagsEdited>;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }
    private void initFieldEditText(com.ichi2.anki.FieldEditText, int, java.lang.String[], android.graphics.Typeface, boolean)
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.anki.FieldEditText $r1;
        int $i0;
        java.lang.String[] $r2;
        android.graphics.Typeface $r3;
        boolean $z0;
        java.lang.String r4, r5;
        com.ichi2.anki.NoteEditor$13 $r6;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: com.ichi2.anki.FieldEditText;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String[];

        $r3 := @parameter3: android.graphics.Typeface;

        $z0 := @parameter4: boolean;

        r5 = $r2[0];

        r4 = $r2[1];

        virtualinvoke $r1.<com.ichi2.anki.FieldEditText: void init(int,java.lang.String,java.lang.String)>($i0, r5, r4);

        if $r3 == null goto label1;

        virtualinvoke $r1.<com.ichi2.anki.FieldEditText: void setTypeface(android.graphics.Typeface)>($r3);

     label1:
        $r6 = new com.ichi2.anki.NoteEditor$13;

        specialinvoke $r6.<com.ichi2.anki.NoteEditor$13: void <init>(com.ichi2.anki.NoteEditor,int)>(r0, $i0);

        virtualinvoke $r1.<com.ichi2.anki.FieldEditText: void addTextChangedListener(android.text.TextWatcher)>($r6);

        virtualinvoke $r1.<com.ichi2.anki.FieldEditText: void setEnabled(boolean)>($z0);

        return;
    }
    private java.lang.String insertClozeAround(java.lang.String, int, int)
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String $r1, $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{{c1::");

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i2, $i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    private void populateEditFields()
    {
        com.ichi2.anki.NoteEditor r0;
        android.os.Bundle $r1;
        com.ichi2.libanki.Note $r2;
        java.lang.String[][] $r3, r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.String r8;
        int $i0;
        java.lang.String[] $r9;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 = r0.<com.ichi2.anki.NoteEditor: android.os.Bundle mSavedFields>;

        if $r1 == null goto label4;

        $r2 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Note: java.lang.String[][] items()>();

        r4 = $r3;

        $r1 = r0.<com.ichi2.anki.NoteEditor: android.os.Bundle mSavedFields>;

        $r5 = virtualinvoke $r1.<android.os.Bundle: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        $r1 = r0.<com.ichi2.anki.NoteEditor: android.os.Bundle mSavedFields>;

        r8 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r8);

        $r9 = $r3[$i0];

        $r9[1] = r8;

        goto label1;

     label2:
        r0.<com.ichi2.anki.NoteEditor: android.os.Bundle mSavedFields> = null;

     label3:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void populateEditFields(java.lang.String[][],boolean)>(r4, 0);

        return;

     label4:
        $r2 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        r4 = virtualinvoke $r2.<com.ichi2.libanki.Note: java.lang.String[][] items()>();

        goto label3;
    }
    private void populateEditFields(java.lang.String[][], boolean)
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String[][] $r1;
        boolean $z0, $z1;
        android.widget.LinearLayout $r2;
        java.util.LinkedList $r3;
        android.graphics.Typeface r4;
        android.content.Context $r5;
        android.content.SharedPreferences $r6;
        java.lang.String $r7;
        int i0, $i1;
        android.view.LayoutInflater $r8;
        android.view.View $r9, $r10;
        com.ichi2.anki.FieldEditText r11;
        java.lang.String[] $r12;
        android.widget.TextView $r13;
        float $f0;
        android.widget.ImageButton r14;
        int[] $r15;
        java.lang.Object[] $r16;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: java.lang.String[][];

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.ichi2.anki.NoteEditor: android.widget.LinearLayout mFieldsLayoutContainer>;

        virtualinvoke $r2.<android.widget.LinearLayout: void removeAllViews()>();

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields> = $r3;

        r4 = null;

        $r5 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.Context getBaseContext()>();

        $r6 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r5);

        $r7 = interfaceinvoke $r6.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("browserEditorFont", "");

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label1;

        r4 = staticinvoke <com.ichi2.anki.AnkiFont: android.graphics.Typeface getTypeface(android.content.Context,java.lang.String)>(r0, $r7);

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label8;

        $r8 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.LayoutInflater getLayoutInflater()>();

        $r9 = virtualinvoke $r8.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(2130903074, null);

        $r10 = virtualinvoke $r9.<android.view.View: android.view.View findViewById(int)>(2131755145);

        r11 = (com.ichi2.anki.FieldEditText) $r10;

        $r12 = $r1[i0];

        if $z0 != 0 goto label5;

        $z1 = 1;

     label3:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void initFieldEditText(com.ichi2.anki.FieldEditText,int,java.lang.String[],android.graphics.Typeface,boolean)>(r11, i0, $r12, r4, $z1);

        $r13 = virtualinvoke r11.<com.ichi2.anki.FieldEditText: android.widget.TextView getLabel()>();

        $f0 = staticinvoke <com.ichi2.anki.UIUtils: float getDensityAdjustedValue(android.content.Context,float)>(r0, 3.4F);

        $i1 = (int) $f0;

        virtualinvoke $r13.<android.widget.TextView: void setPadding(int,int,int,int)>($i1, 0, 0, 0);

        $r3 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r11);

        $r10 = virtualinvoke $r9.<android.view.View: android.view.View findViewById(int)>(2131755146);

        r14 = (android.widget.ImageButton) $r10;

        $r15 = newarray (int)[2];

        $r15[0] = 2130771975;

        $r15[1] = 2130772054;

        $r15 = staticinvoke <com.ichi2.themes.Themes: int[] getResFromAttr(android.content.Context,int[])>(r0, $r15);

        if $z0 == 0 goto label6;

        $z1 = specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean allowFieldRemapping()>();

        if $z1 == 0 goto label6;

        $i1 = $r15[1];

        virtualinvoke r14.<android.widget.ImageButton: void setBackgroundResource(int)>($i1);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void setRemapButtonListener(android.widget.ImageButton,int)>(r14, i0);

     label4:
        $r16 = newarray (java.lang.Object)[1];

        $r12 = $r1[i0];

        $r7 = $r12[0];

        $r16[0] = $r7;

        $r7 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: java.lang.String getString(int,java.lang.Object[])>(2131231150, $r16);

        virtualinvoke r14.<android.widget.ImageButton: void setContentDescription(java.lang.CharSequence)>($r7);

        $r2 = r0.<com.ichi2.anki.NoteEditor: android.widget.LinearLayout mFieldsLayoutContainer>;

        virtualinvoke $r2.<android.widget.LinearLayout: void addView(android.view.View)>($r13);

        $r2 = r0.<com.ichi2.anki.NoteEditor: android.widget.LinearLayout mFieldsLayoutContainer>;

        virtualinvoke $r2.<android.widget.LinearLayout: void addView(android.view.View)>($r9);

        i0 = i0 + 1;

        goto label2;

     label5:
        $z1 = 0;

        goto label3;

     label6:
        if $z0 == 0 goto label7;

        $z1 = specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean allowFieldRemapping()>();

        if $z1 != 0 goto label7;

        virtualinvoke r14.<android.widget.ImageButton: void setBackgroundResource(int)>(0);

        goto label4;

     label7:
        $i1 = $r15[0];

        virtualinvoke r14.<android.widget.ImageButton: void setBackgroundResource(int)>($i1);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void setMMButtonListener(android.widget.ImageButton,int)>(r14, i0);

        goto label4;

     label8:
        return;
    }
    private void registerExternalStorageListener()
    {
        com.ichi2.anki.NoteEditor r0;
        android.content.IntentFilter r1;
        android.content.BroadcastReceiver $r2;
        com.ichi2.anki.NoteEditor$8 $r3;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r2 = r0.<com.ichi2.anki.NoteEditor: android.content.BroadcastReceiver mUnmountReceiver>;

        if $r2 != null goto label1;

        $r3 = new com.ichi2.anki.NoteEditor$8;

        specialinvoke $r3.<com.ichi2.anki.NoteEditor$8: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        r0.<com.ichi2.anki.NoteEditor: android.content.BroadcastReceiver mUnmountReceiver> = $r3;

        r1 = new android.content.IntentFilter;

        specialinvoke r1.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("com.ichi2.anki.action.MEDIA_EJECT");

        $r2 = r0.<com.ichi2.anki.NoteEditor: android.content.BroadcastReceiver mUnmountReceiver>;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r2, r1);

     label1:
        return;
    }
    private void resetEditFields(java.lang.String[])
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String[] $r1;
        int i0, $i1, $i2;
        java.util.LinkedList $r2;
        java.lang.Object $r3;
        com.ichi2.anki.FieldEditText $r4;
        java.lang.String $r5;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: java.lang.String[];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        $r2 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i2 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        if i0 >= $i1 goto label2;

        $r2 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object get(int)>(i0);

        $r4 = (com.ichi2.anki.FieldEditText) $r3;

        $r5 = $r1[i0];

        virtualinvoke $r4.<com.ichi2.anki.FieldEditText: void setText(java.lang.CharSequence)>($r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void saveNote()
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.anki.NoteEditor$5 r1;
        com.ichi2.anki.dialogs.ConfirmationDialog r2;
        org.json.JSONException r3;
        org.json.JSONArray r4;
        android.content.res.Resources $r5;
        java.util.List $r6;
        java.util.ArrayList $r7;
        boolean $z0, $z1;
        java.util.LinkedList $r8;
        java.util.Iterator $r9;
        java.lang.Object $r10;
        com.ichi2.anki.FieldEditText r11;
        com.ichi2.libanki.Note $r12;
        org.json.JSONObject $r13, $r22;
        long $l0, $l3;
        java.lang.String $r14;
        java.lang.RuntimeException $r15;
        com.ichi2.libanki.Collection $r16;
        com.ichi2.libanki.Models $r17;
        com.ichi2.async.DeckTask$TaskListener $r18;
        com.ichi2.async.DeckTask$TaskData[] $r19;
        com.ichi2.async.DeckTask$TaskData $r20;
        com.ichi2.libanki.Card $r21;
        java.util.Map $r23;
        int $i1, $i2;
        byte $b4;
        com.ichi2.libanki.Sched $r24;
        long[] $r25;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r5 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        if $r6 != null goto label01;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags> = $r7;

     label01:
        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 == 0 goto label22;

        $r8 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r9 = virtualinvoke $r8.<java.util.LinkedList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.ichi2.anki.FieldEditText) $r10;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean updateField(com.ichi2.anki.FieldEditText)>(r11);

        goto label02;

     label03:
        $r12 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

     label04:
        $r13 = virtualinvoke $r12.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

     label05:
        $l0 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

     label06:
        virtualinvoke $r13.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("did", $l0);

     label07:
        $r12 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

     label08:
        $r14 = specialinvoke r0.<com.ichi2.anki.NoteEditor: java.lang.String tagsAsString(java.util.List)>($r6);

        virtualinvoke $r12.<com.ichi2.libanki.Note: void setTagsFromStr(java.lang.String)>($r14);

     label09:
        r4 = new org.json.JSONArray;

     label10:
        specialinvoke r4.<org.json.JSONArray: void <init>()>();

     label11:
        $r6 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

     label12:
        $r9 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label14:
        if $z0 == 0 goto label20;

     label15:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

     label16:
        $r14 = (java.lang.String) $r10;

     label17:
        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r14);

     label18:
        goto label13;

     label19:
        r3 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r15;

     label20:
        $r16 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r13 = virtualinvoke $r17.<com.ichi2.libanki.Models: org.json.JSONObject current()>();

        virtualinvoke $r13.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tags", r4);

        $r16 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r17.<com.ichi2.libanki.Models: void setChanged()>();

     label21:
        $r18 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.async.DeckTask$TaskListener mSaveFactHandler>;

        $r19 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r20 = new com.ichi2.async.DeckTask$TaskData;

        $r12 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        specialinvoke $r20.<com.ichi2.async.DeckTask$TaskData: void <init>(com.ichi2.libanki.Note)>($r12);

        $r19[0] = $r20;

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(6, $r18, $r19);

        return;

     label22:
        $r13 = specialinvoke r0.<com.ichi2.anki.NoteEditor: org.json.JSONObject getCurrentlySelectedModel()>();

        $r21 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $r22 = virtualinvoke $r21.<com.ichi2.libanki.Card: org.json.JSONObject model()>();

        $z0 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r22);

        if $z0 != 0 goto label25;

        r0.<com.ichi2.anki.NoteEditor: boolean mReloadRequired> = 1;

        $r23 = r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeCardMap>;

        $i1 = interfaceinvoke $r23.<java.util.Map: int size()>();

        $r12 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r7 = virtualinvoke $r12.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $i2 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if $i1 < $i2 goto label23;

        $r23 = r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeCardMap>;

        $z0 = interfaceinvoke $r23.<java.util.Map: boolean containsKey(java.lang.Object)>(null);

        if $z0 == 0 goto label24;

     label23:
        r2 = new com.ichi2.anki.dialogs.ConfirmationDialog;

        specialinvoke r2.<com.ichi2.anki.dialogs.ConfirmationDialog: void <init>()>();

        $r14 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131230853);

        virtualinvoke r2.<com.ichi2.anki.dialogs.ConfirmationDialog: void setArgs(java.lang.String)>($r14);

        r1 = new com.ichi2.anki.NoteEditor$5;

        specialinvoke r1.<com.ichi2.anki.NoteEditor$5: void <init>(com.ichi2.anki.NoteEditor,org.json.JSONObject,org.json.JSONObject)>(r0, $r22, $r13);

        virtualinvoke r2.<com.ichi2.anki.dialogs.ConfirmationDialog: void setConfirm(java.lang.Runnable)>(r1);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void showDialogFragment(android.support.v4.app.DialogFragment)>(r2);

        return;

     label24:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void changeNoteTypeWithErrorHandling(org.json.JSONObject,org.json.JSONObject)>($r22, $r13);

        return;

     label25:
        $z0 = 0;

        $r21 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $l0 = virtualinvoke $r21.<com.ichi2.libanki.Card: long getDid()>();

        $l3 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

        $b4 = $l0 cmp $l3;

        if $b4 == 0 goto label26;

        r0.<com.ichi2.anki.NoteEditor: boolean mReloadRequired> = 1;

        $r16 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r24 = virtualinvoke $r16.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r25 = newarray (long)[1];

        $r21 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $l0 = virtualinvoke $r21.<com.ichi2.libanki.Card: long getId()>();

        $r25[0] = $l0;

        virtualinvoke $r24.<com.ichi2.libanki.Sched: void remFromDyn(long[])>($r25);

        $r21 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        virtualinvoke $r21.<com.ichi2.libanki.Card: void load()>();

        $r21 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $r12 = virtualinvoke $r21.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote> = $r12;

        $r21 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $l0 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

        virtualinvoke $r21.<com.ichi2.libanki.Card: void setDid(long)>($l0);

        $z0 = 1;

     label26:
        $r8 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r9 = virtualinvoke $r8.<java.util.LinkedList: java.util.Iterator iterator()>();

     label27:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label28;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.ichi2.anki.FieldEditText) $r10;

        $z1 = specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean updateField(com.ichi2.anki.FieldEditText)>(r11);

        $z0 = $z0 | $z1;

        goto label27;

     label28:
        $r6 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        $r9 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label29:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label32;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r10;

        if $z0 != 0 goto label30;

        $r12 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $z0 = virtualinvoke $r12.<com.ichi2.libanki.Note: boolean hasTag(java.lang.String)>($r14);

        if $z0 != 0 goto label31;

     label30:
        $z0 = 1;

        goto label29;

     label31:
        $z0 = 0;

        goto label29;

     label32:
        if $z0 != 0 goto label33;

        $r12 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r6 = virtualinvoke $r12.<com.ichi2.libanki.Note: java.util.List getTags()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 <= $i2 goto label36;

     label33:
        $z0 = 1;

     label34:
        if $z0 == 0 goto label35;

        $r12 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r6 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        $r14 = specialinvoke r0.<com.ichi2.anki.NoteEditor: java.lang.String tagsAsString(java.util.List)>($r6);

        virtualinvoke $r12.<com.ichi2.libanki.Note: void setTagsFromStr(java.lang.String)>($r14);

        r0.<com.ichi2.anki.NoteEditor: boolean mChanged> = 1;

     label35:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor()>();

        return;

     label36:
        $z0 = 0;

        goto label34;

        catch org.json.JSONException from label04 to label05 with label19;
        catch org.json.JSONException from label06 to label07 with label19;
        catch org.json.JSONException from label08 to label09 with label19;
        catch org.json.JSONException from label10 to label11 with label19;
        catch org.json.JSONException from label12 to label14 with label19;
        catch org.json.JSONException from label15 to label16 with label19;
        catch org.json.JSONException from label17 to label18 with label19;
        catch org.json.JSONException from label20 to label21 with label19;
    }
    private void setDid(com.ichi2.libanki.Note)
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.libanki.Note $r1;
        org.json.JSONException r2;
        long $l0;
        byte $b1;
        boolean $z0;
        com.ichi2.libanki.Collection $r3;
        org.json.JSONObject $r4, $r6;
        com.ichi2.libanki.Models $r5;
        com.ichi2.libanki.Decks $r7;
        java.lang.RuntimeException $r8;
        com.ichi2.libanki.Card $r9;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        $l0 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label01;

        return;

     label01:
        if $r1 == null goto label02;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 == 0 goto label13;

     label02:
        $r3 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: org.json.JSONObject getConf()>();

        $r3 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r5 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Models: org.json.JSONObject current()>();

        $z0 = virtualinvoke $r4.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("addToCur", 1);

     label03:
        if $z0 == 0 goto label11;

     label04:
        $l0 = virtualinvoke $r4.<org.json.JSONObject: long getLong(java.lang.String)>("curDeck");

     label05:
        r0.<com.ichi2.anki.NoteEditor: long mCurrentDid> = $l0;

     label06:
        $r3 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r7 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

     label07:
        $l0 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

     label08:
        $z0 = virtualinvoke $r7.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l0);

     label09:
        if $z0 == 0 goto label14;

        r0.<com.ichi2.anki.NoteEditor: long mCurrentDid> = 1L;

        return;

     label10:
        r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

     label11:
        $l0 = virtualinvoke $r6.<org.json.JSONObject: long getLong(java.lang.String)>("did");

     label12:
        r0.<com.ichi2.anki.NoteEditor: long mCurrentDid> = $l0;

        return;

     label13:
        $r9 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $l0 = virtualinvoke $r9.<com.ichi2.libanki.Card: long getDid()>();

        r0.<com.ichi2.anki.NoteEditor: long mCurrentDid> = $l0;

     label14:
        return;

        catch org.json.JSONException from label02 to label03 with label10;
        catch org.json.JSONException from label04 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
        catch org.json.JSONException from label11 to label12 with label10;
    }
    private void setEditFieldTexts(java.lang.String)
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.String $r1;
        java.lang.String[] r2, $r6;
        int i0, i1, $i2;
        java.util.LinkedList $r3;
        java.lang.Object $r4;
        com.ichi2.anki.FieldEditText $r5;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: java.lang.String;

        r2 = null;

        if $r1 != null goto label4;

        i0 = 0;

     label1:
        i1 = 0;

     label2:
        $r3 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i2 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if i1 >= $i2 goto label6;

        if i1 >= i0 goto label5;

        $r3 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object get(int)>(i1);

        $r5 = (com.ichi2.anki.FieldEditText) $r4;

        $r1 = r2[i1];

        virtualinvoke $r5.<com.ichi2.anki.FieldEditText: void setText(java.lang.CharSequence)>($r1);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r1);

        r2 = $r6;

        i0 = lengthof $r6;

        goto label1;

     label5:
        $r3 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object get(int)>(i1);

        $r5 = (com.ichi2.anki.FieldEditText) $r4;

        virtualinvoke $r5.<com.ichi2.anki.FieldEditText: void setText(java.lang.CharSequence)>("");

        goto label3;

     label6:
        return;
    }
    private void setMMButtonListener(android.widget.ImageButton, int)
    {
        com.ichi2.anki.NoteEditor r0;
        android.widget.ImageButton $r1;
        int $i0;
        com.ichi2.anki.NoteEditor$11 $r2;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: android.widget.ImageButton;

        $i0 := @parameter1: int;

        $r2 = new com.ichi2.anki.NoteEditor$11;

        specialinvoke $r2.<com.ichi2.anki.NoteEditor$11: void <init>(com.ichi2.anki.NoteEditor,int)>(r0, $i0);

        virtualinvoke $r1.<android.widget.ImageButton: void setOnClickListener(android.view.View$OnClickListener)>($r2);

        return;
    }
    private void setNote()
    {
        com.ichi2.anki.NoteEditor r0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void setNote(com.ichi2.libanki.Note)>(null);

        return;
    }
    private void setNote(com.ichi2.libanki.Note)
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.libanki.Note $r1;
        boolean $z0;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Models $r3;
        org.json.JSONObject $r4;
        java.util.List $r5;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: com.ichi2.libanki.Note;

        if $r1 == null goto label1;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 == 0 goto label4;

     label1:
        $r2 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Models: org.json.JSONObject current()>();

        $r1 = new com.ichi2.libanki.Note;

        $r2 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        specialinvoke $r1.<com.ichi2.libanki.Note: void <init>(com.ichi2.libanki.Collection,org.json.JSONObject)>($r2, $r4);

        r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote> = $r1;

     label2:
        $r5 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        if $r5 != null goto label3;

        $r1 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r5 = virtualinvoke $r1.<com.ichi2.libanki.Note: java.util.List getTags()>();

        r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags> = $r5;

     label3:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void updateDeckPosition()>();

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void updateTags()>();

        $r1 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r4 = virtualinvoke $r1.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void updateCards(org.json.JSONObject)>($r4);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void populateEditFields()>();

        return;

     label4:
        r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote> = $r1;

        goto label2;
    }
    private void setRemapButtonListener(android.widget.ImageButton, int)
    {
        com.ichi2.anki.NoteEditor r0;
        android.widget.ImageButton $r1;
        int $i0;
        com.ichi2.anki.NoteEditor$12 $r2;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: android.widget.ImageButton;

        $i0 := @parameter1: int;

        $r2 = new com.ichi2.anki.NoteEditor$12;

        specialinvoke $r2.<com.ichi2.anki.NoteEditor$12: void <init>(com.ichi2.anki.NoteEditor,int)>(r0, $i0);

        virtualinvoke $r1.<android.widget.ImageButton: void setOnClickListener(android.view.View$OnClickListener)>($r2);

        return;
    }
    private void showCardTemplateEditor()
    {
        com.ichi2.anki.NoteEditor r0;
        org.json.JSONException r1;
        android.content.Intent r2;
        org.json.JSONObject $r3;
        long $l0;
        boolean $z0;
        com.ichi2.libanki.Card $r4;
        com.ichi2.libanki.Note $r5;
        int $i1;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.anki.NoteEditor;

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/CardTemplateEditor;");

     label1:
        $r3 = specialinvoke r0.<com.ichi2.anki.NoteEditor: org.json.JSONObject getCurrentlySelectedModel()>();

        $l0 = virtualinvoke $r3.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("modelId", $l0);

     label2:
        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label3;

        $r4 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        $l0 = virtualinvoke $r5.<com.ichi2.libanki.Note: long getId()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("noteId", $l0);

     label3:
        $i1 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r2, 3, $i1);

        return;

     label4:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label4;
    }
    private void showDiscardChangesDialog()
    {
        com.ichi2.anki.NoteEditor r0;
        com.afollestad.materialdialogs.MaterialDialog$Builder $r1;
        com.ichi2.anki.NoteEditor$9 $r2;
        com.afollestad.materialdialogs.MaterialDialog $r3;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 = new com.afollestad.materialdialogs.MaterialDialog$Builder;

        specialinvoke $r1.<com.afollestad.materialdialogs.MaterialDialog$Builder: void <init>(android.content.Context)>(r0);

        $r1 = virtualinvoke $r1.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder content(int)>(2131230984);

        $r1 = virtualinvoke $r1.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder positiveText(int)>(2131230970);

        $r1 = virtualinvoke $r1.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder negativeText(int)>(2131230967);

        $r2 = new com.ichi2.anki.NoteEditor$9;

        specialinvoke $r2.<com.ichi2.anki.NoteEditor$9: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        $r1 = virtualinvoke $r1.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder callback(com.afollestad.materialdialogs.MaterialDialog$ButtonCallback)>($r2);

        $r3 = virtualinvoke $r1.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog build()>();

        virtualinvoke $r3.<com.afollestad.materialdialogs.MaterialDialog: void show()>();

        return;
    }
    private void showTagsDialog()
    {
        com.ichi2.anki.NoteEditor r0;
        java.util.ArrayList r1, r2;
        java.util.List $r3;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Tags $r5;
        com.ichi2.anki.dialogs.TagsDialog $r6;
        com.ichi2.anki.NoteEditor$10 $r7;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r3 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        if $r3 != null goto label1;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags> = r1;

     label1:
        r2 = new java.util.ArrayList;

        $r4 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r3 = virtualinvoke $r5.<com.ichi2.libanki.Tags: java.util.List all()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r1 = new java.util.ArrayList;

        $r3 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r6 = staticinvoke <com.ichi2.anki.dialogs.TagsDialog: com.ichi2.anki.dialogs.TagsDialog newInstance(int,java.util.ArrayList,java.util.ArrayList)>(0, r1, r2);

        $r7 = new com.ichi2.anki.NoteEditor$10;

        specialinvoke $r7.<com.ichi2.anki.NoteEditor$10: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        virtualinvoke $r6.<com.ichi2.anki.dialogs.TagsDialog: void setTagsDialogListener(com.ichi2.anki.dialogs.TagsDialog$TagsDialogListener)>($r7);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void showDialogFragment(android.support.v4.app.DialogFragment)>($r6);

        return;
    }
    private void startMultimediaFieldEditor(int, com.ichi2.anki.multimediacard.IMultimediaEditableNote, com.ichi2.anki.multimediacard.fields.IField)
    {
        com.ichi2.anki.NoteEditor r0;
        int $i0;
        com.ichi2.anki.multimediacard.IMultimediaEditableNote $r1;
        com.ichi2.anki.multimediacard.fields.IField $r2;
        android.content.Intent r3;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.ichi2.anki.multimediacard.IMultimediaEditableNote;

        $r2 := @parameter2: com.ichi2.anki.multimediacard.fields.IField;

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/multimediacard/activity/MultimediaEditFieldActivity;");

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("multim.card.ed.extra.field.index", $i0);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>("multim.card.ed.extra.field", $r2);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>("multim.card.ed.extra.whole.note", $r1);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void startActivityForResultWithoutAnimation(android.content.Intent,int)>(r3, 2);

        return;
    }
    private java.lang.String tagsAsString(java.util.List)
    {
        com.ichi2.anki.NoteEditor r0;
        java.util.List r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.anki.NoteEditor;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" ", r1);

        return $r2;
    }
    private void updateCards(org.json.JSONObject)
    {
        com.ichi2.anki.NoteEditor r0;
        org.json.JSONObject $r1, $r5;
        org.json.JSONException r2;
        org.json.JSONArray $r3;
        java.lang.String r4, $r6, r7, $r10;
        int i0, $i1;
        boolean $z0;
        com.ichi2.libanki.Note $r8;
        com.ichi2.libanki.Card $r9;
        java.lang.StringBuilder $r11;
        android.widget.TextView $r12;
        android.content.res.Resources $r13;
        java.lang.Object[] $r14;
        android.text.Spanned $r15;
        java.lang.RuntimeException $r16;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: org.json.JSONObject;

     label01:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label02:
        r4 = "";

        i0 = 0;

     label03:
        $i1 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label04:
        if i0 >= $i1 goto label22;

     label05:
        $r5 = virtualinvoke $r3.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

        $r6 = virtualinvoke $r5.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("name");

     label06:
        r7 = $r6;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label15;

     label07:
        $i1 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label08:
        if $i1 <= 1 goto label15;

        $r8 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

     label09:
        $r5 = virtualinvoke $r8.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

     label10:
        if $r1 != $r5 goto label15;

        $r9 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

     label11:
        $r5 = virtualinvoke $r9.<com.ichi2.libanki.Card: org.json.JSONObject template()>();

        $r10 = virtualinvoke $r5.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("name");

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r6);

     label12:
        if $z0 == 0 goto label15;

        $r11 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<u>");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</u>");

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        r7 = $r6;

     label15:
        $r11 = new java.lang.StringBuilder;

     label16:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        r4 = $r6;

     label18:
        $i1 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label19:
        $i1 = $i1 + -1;

        if i0 >= $i1 goto label21;

        $r11 = new java.lang.StringBuilder;

     label20:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        i0 = i0 + 1;

        goto label03;

     label22:
        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label28;

     label23:
        i0 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label24:
        $r8 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

     label25:
        $r1 = virtualinvoke $r8.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i1 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

     label26:
        if i0 >= $i1 goto label28;

        $r11 = new java.lang.StringBuilder;

     label27:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<font color=\'red\'>");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</font>");

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label28:
        $r12 = r0.<com.ichi2.anki.NoteEditor: android.widget.TextView mCardsButton>;

     label29:
        $r13 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

     label30:
        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r4;

     label31:
        r4 = virtualinvoke $r13.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131230742, $r14);

        $r15 = staticinvoke <android.text.Html: android.text.Spanned fromHtml(java.lang.String)>(r4);

        virtualinvoke $r12.<android.widget.TextView: void setText(java.lang.CharSequence)>($r15);

     label32:
        return;

     label33:
        r2 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r16;

        catch org.json.JSONException from label01 to label02 with label33;
        catch org.json.JSONException from label03 to label04 with label33;
        catch org.json.JSONException from label05 to label06 with label33;
        catch org.json.JSONException from label07 to label08 with label33;
        catch org.json.JSONException from label09 to label10 with label33;
        catch org.json.JSONException from label11 to label12 with label33;
        catch org.json.JSONException from label13 to label14 with label33;
        catch org.json.JSONException from label16 to label17 with label33;
        catch org.json.JSONException from label18 to label19 with label33;
        catch org.json.JSONException from label20 to label21 with label33;
        catch org.json.JSONException from label23 to label24 with label33;
        catch org.json.JSONException from label25 to label26 with label33;
        catch org.json.JSONException from label27 to label28 with label33;
        catch org.json.JSONException from label29 to label30 with label33;
        catch org.json.JSONException from label31 to label32 with label33;
    }
    private void updateDeckPosition()
    {
        com.ichi2.anki.NoteEditor r0;
        java.util.ArrayList $r1;
        long $l0;
        java.lang.Long $r2;
        int $i1;
        android.widget.Spinner $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 = r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllDeckIds>;

        $l0 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int indexOf(java.lang.Object)>($r2);

        if $i1 == -1 goto label1;

        $r3 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteDeckSpinner>;

        virtualinvoke $r3.<android.widget.Spinner: void setSelection(int,boolean)>($i1, 0);

        return;

     label1:
        $r4 = newarray (java.lang.Object)[2];

        $l0 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4[0] = $r2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[1] = $r5;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("updateDeckPosition() error :: mCurrentDid=%d, position=%d", $r4);

        return;
    }
    private boolean updateField(com.ichi2.anki.FieldEditText)
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.anki.FieldEditText $r1;
        android.text.Editable $r2;
        java.lang.String $r3, $r4;
        com.ichi2.libanki.Note $r5;
        java.lang.String[] $r6;
        int $i0;
        boolean $z0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: com.ichi2.anki.FieldEditText;

        $r2 = virtualinvoke $r1.<com.ichi2.anki.FieldEditText: android.text.Editable getText()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = <com.ichi2.anki.FieldEditText: java.lang.String NEW_LINE>;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r4, "<br>");

        $r5 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Note: java.lang.String[] values()>();

        $i0 = virtualinvoke $r1.<com.ichi2.anki.FieldEditText: int getOrd()>();

        $r4 = $r6[$i0];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r5 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Note: java.lang.String[] values()>();

        $i0 = virtualinvoke $r1.<com.ichi2.anki.FieldEditText: int getOrd()>();

        $r6[$i0] = $r3;

        return 1;

     label1:
        return 0;
    }
    private void updateFieldsFromMap(org.json.JSONObject)
    {
        com.ichi2.anki.NoteEditor r0;
        org.json.JSONObject $r1;
        com.ichi2.libanki.Note $r2;
        java.lang.String[][] $r3, r9;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Models $r5;
        java.util.Map $r6, $r15;
        int $i0;
        int[] $r7;
        java.lang.Object $r8;
        java.util.Set $r10;
        java.util.Iterator $r11;
        boolean $z0;
        java.lang.String r12, $r19;
        android.util.Pair $r13;
        java.lang.Integer r14, r16;
        java.lang.String[] $r17, $r21;
        android.content.res.Resources $r18;
        java.lang.Object[] $r20;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Note: java.lang.String[][] items()>();

        $r4 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Models: java.util.Map fieldMap(org.json.JSONObject)>($r1);

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = newarray (int)[2];

        $r7[0] = $i0;

        $r7[1] = 2;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Ljava/lang/String;", $r7);

        r9 = (java.lang.String[][]) $r8;

        $r10 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r8;

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        $r13 = (android.util.Pair) $r8;

        $r8 = $r13.<android.util.Pair: java.lang.Object first>;

        r14 = (java.lang.Integer) $r8;

        $r15 = r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeFieldMap>;

        $z0 = interfaceinvoke $r15.<java.util.Map: boolean containsValue(java.lang.Object)>(r14);

        if $z0 == 0 goto label4;

        $r15 = r0.<com.ichi2.anki.NoteEditor: java.util.Map mModelChangeFieldMap>;

        $r8 = specialinvoke r0.<com.ichi2.anki.NoteEditor: java.lang.Object getKeyByValue(java.util.Map,java.lang.Object)>($r15, r14);

        r16 = (java.lang.Integer) $r8;

        $z0 = specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean allowFieldRemapping()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $r17 = r9[$i0];

        $r18 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $r19 = virtualinvoke $r18.<android.content.res.Resources: java.lang.String getString(int)>(2131231038);

        $r20 = newarray (java.lang.Object)[2];

        $r20[0] = r12;

        $i0 = virtualinvoke r16.<java.lang.Integer: int intValue()>();

        $r21 = $r3[$i0];

        r12 = $r21[0];

        $r20[1] = r12;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r19, $r20);

        $r17[0] = $r19;

     label2:
        $i0 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $r17 = r9[$i0];

        $i0 = virtualinvoke r16.<java.lang.Integer: int intValue()>();

        $r21 = $r3[$i0];

        $r19 = $r21[1];

        $r17[1] = $r19;

        goto label1;

     label3:
        $i0 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $r17 = r9[$i0];

        $r17[0] = r12;

        goto label2;

     label4:
        $i0 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $r17 = r9[$i0];

        $r17[0] = r12;

        $i0 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $r17 = r9[$i0];

        $r17[1] = "";

        goto label1;

     label5:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void populateEditFields(java.lang.String[][],boolean)>(r9, 1);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void updateCards(org.json.JSONObject)>($r1);

        return;
    }
    private void updateTags()
    {
        com.ichi2.anki.NoteEditor r0;
        java.util.List $r1;
        java.util.ArrayList $r2;
        android.widget.TextView $r3;
        android.content.res.Resources $r4;
        java.lang.Object[] $r5;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.Tags $r7, $r8;
        java.util.TreeSet $r9;
        java.lang.String $r10;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        if $r1 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags> = $r2;

     label1:
        $r3 = r0.<com.ichi2.anki.NoteEditor: android.widget.TextView mTagsButton>;

        $r4 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r6 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Tags getTags()>();

        $r1 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Tags: java.util.TreeSet canonify(java.util.List)>($r1);

        $r10 = virtualinvoke $r7.<com.ichi2.libanki.Tags: java.lang.String join(java.util.Collection)>($r9);

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", ", ");

        $r5[0] = $r10;

        $r10 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131230746, $r5);

        virtualinvoke $r3.<android.widget.TextView: void setText(java.lang.CharSequence)>($r10);

        return;
    }
    protected void onActivityResult(int, int, android.content.Intent)
    {
        com.ichi2.anki.NoteEditor r0;
        int $i0, $i1;
        android.content.Intent $r1;
        com.ichi2.libanki.Collection $r2;
        android.os.Bundle $r3;
        java.lang.Object $r4;
        com.ichi2.anki.multimediacard.fields.IField r5;
        com.ichi2.libanki.Note $r6;
        org.json.JSONObject $r7;
        com.ichi2.anki.multimediacard.impl.MultimediaEditableNote $r8;
        java.util.LinkedList $r9;
        com.ichi2.anki.FieldEditText r10;
        com.ichi2.anki.multimediacard.fields.EFieldType $r11, $r12;
        java.lang.String $r13;
        boolean $z0;
        android.text.Editable $r14;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.content.Intent;

        specialinvoke r0.<com.ichi2.anki.AnkiActivity: void onActivityResult(int,int,android.content.Intent)>($i0, $i1, $r1);

        if $i1 != 203 goto label01;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeNoteEditor(int)>(203);

     label01:
        lookupswitch($i0)
        {
            case 0: goto label03;
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label08;
            default: goto label02;
        };

     label02:
        return;

     label03:
        if $i1 == 0 goto label10;

        r0.<com.ichi2.anki.NoteEditor: boolean mChanged> = 1;

        return;

     label04:
        if $i1 == 0 goto label10;

        $r2 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r1.<android.content.Intent: android.os.Bundle getExtras()>();

        $i0 = virtualinvoke $r3.<android.os.Bundle: int getInt(java.lang.String)>("edit.field.result.field.index");

        $r4 = virtualinvoke $r3.<android.os.Bundle: java.lang.Object get(java.lang.String)>("edit.field.result.field");

        r5 = (com.ichi2.anki.multimediacard.fields.IField) $r4;

        $r6 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        $r8 = staticinvoke <com.ichi2.anki.servicelayer.NoteService: com.ichi2.anki.multimediacard.impl.MultimediaEditableNote createEmptyNote(org.json.JSONObject)>($r7);

        $r6 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        staticinvoke <com.ichi2.anki.servicelayer.NoteService: void updateMultimediaNoteFromJsonNote(com.ichi2.libanki.Collection,com.ichi2.libanki.Note,com.ichi2.anki.multimediacard.IMultimediaEditableNote)>($r2, $r6, $r8);

        interfaceinvoke $r8.<com.ichi2.anki.multimediacard.IMultimediaEditableNote: boolean setField(int,com.ichi2.anki.multimediacard.fields.IField)>($i0, r5);

        $r9 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r4 = virtualinvoke $r9.<java.util.LinkedList: java.lang.Object get(int)>($i0);

        r10 = (com.ichi2.anki.FieldEditText) $r4;

        $r11 = interfaceinvoke r5.<com.ichi2.anki.multimediacard.fields.IField: com.ichi2.anki.multimediacard.fields.EFieldType getType()>();

        $r12 = <com.ichi2.anki.multimediacard.fields.EFieldType: com.ichi2.anki.multimediacard.fields.EFieldType TEXT>;

        if $r11 != $r12 goto label06;

        $r13 = interfaceinvoke r5.<com.ichi2.anki.multimediacard.fields.IField: java.lang.String getFormattedValue()>();

        virtualinvoke r10.<com.ichi2.anki.FieldEditText: void setText(java.lang.CharSequence)>($r13);

     label05:
        staticinvoke <com.ichi2.anki.servicelayer.NoteService: void saveMedia(com.ichi2.libanki.Collection,com.ichi2.anki.multimediacard.impl.MultimediaEditableNote)>($r2, $r8);

        r0.<com.ichi2.anki.NoteEditor: boolean mChanged> = 1;

        return;

     label06:
        $z0 = virtualinvoke r10.<com.ichi2.anki.FieldEditText: boolean hasFocus()>();

        if $z0 == 0 goto label07;

        $r14 = virtualinvoke r10.<com.ichi2.anki.FieldEditText: android.text.Editable getText()>();

        $i0 = virtualinvoke r10.<com.ichi2.anki.FieldEditText: int getSelectionStart()>();

        $i1 = virtualinvoke r10.<com.ichi2.anki.FieldEditText: int getSelectionEnd()>();

        $r13 = interfaceinvoke r5.<com.ichi2.anki.multimediacard.fields.IField: java.lang.String getFormattedValue()>();

        interfaceinvoke $r14.<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>($i0, $i1, $r13);

        goto label05;

     label07:
        $r14 = virtualinvoke r10.<com.ichi2.anki.FieldEditText: android.text.Editable getText()>();

        $r13 = interfaceinvoke r5.<com.ichi2.anki.multimediacard.fields.IField: java.lang.String getFormattedValue()>();

        interfaceinvoke $r14.<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>($r13);

        goto label05;

     label08:
        if $i1 != -1 goto label09;

        r0.<com.ichi2.anki.NoteEditor: boolean mReloadRequired> = 1;

     label09:
        $r6 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void updateCards(org.json.JSONObject)>($r7);

     label10:
        return;
    }
    public void onBackPressed()
    {
        com.ichi2.anki.NoteEditor r0;
        java.lang.Object[] $r1;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("NoteEditor:: onBackPressed()", $r1);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeCardEditorWithCheck()>();

        return;
    }
    protected void onCollectionLoaded(com.ichi2.libanki.Collection)
    {
        com.ichi2.anki.NoteEditor r0;
        com.ichi2.libanki.Collection $r1;
        java.util.ArrayList r2, $r17;
        org.json.JSONException r3, r24, r32, r39;
        android.widget.ArrayAdapter r4;
        android.view.Window $r5;
        android.content.Intent $r6;
        java.lang.Object[] $r7;
        int $i0;
        java.lang.Integer $r8;
        android.content.Context $r9;
        android.view.View $r10;
        android.support.v7.widget.Toolbar r11;
        android.widget.LinearLayout $r12;
        android.widget.TextView $r13;
        com.ichi2.anki.NoteEditor$2 $r14;
        android.widget.Spinner $r15;
        com.ichi2.libanki.Models $r16;
        com.ichi2.anki.NoteEditor$JSONNameComparator $r18;
        java.util.Iterator $r19;
        boolean $z0;
        java.lang.Object $r20;
        org.json.JSONObject r21, $r31;
        java.lang.String $r22, $r36;
        long $l1, $l2;
        java.lang.Long $r23;
        java.lang.RuntimeException $r25;
        com.ichi2.libanki.Card $r26;
        com.ichi2.libanki.Note $r27;
        java.lang.String[] $r28;
        org.json.JSONArray $r29;
        com.ichi2.libanki.Decks $r30;
        byte $b3;
        com.ichi2.anki.NoteEditor$3 $r33;
        com.ichi2.anki.NoteEditor$SetNoteTypeListener $r34;
        java.util.LinkedList $r35;
        java.lang.StringBuilder $r37;
        com.ichi2.anki.NoteEditor$4 $r38;
        com.ichi2.anki.FieldEditText $r40;
        com.ichi2.anki.NoteEditor$EditNoteTypeListener $r41;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        specialinvoke r0.<com.ichi2.anki.AnkiActivity: void onCollectionLoaded(com.ichi2.libanki.Collection)>($r1);

        $r5 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.Window getWindow()>();

        virtualinvoke $r5.<android.view.Window: void setSoftInputMode(int)>(3);

        $r6 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.Intent getIntent()>();

        $r7 = newarray (java.lang.Object)[1];

        $i0 = r0.<com.ichi2.anki.NoteEditor: int mCaller>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7[0] = $r8;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("onCollectionLoaded: caller: %d", $r7);

        $r9 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.Context getBaseContext()>();

        staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r9);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void registerExternalStorageListener()>();

        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(16908290);

        $r10 = virtualinvoke $r10.<android.view.View: android.view.View findViewById(int)>(2131755165);

        r11 = (android.support.v7.widget.Toolbar) $r10;

        if r11 == null goto label01;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void setSupportActionBar(android.support.v7.widget.Toolbar)>(r11);

     label01:
        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(2131755237);

        $r12 = (android.widget.LinearLayout) $r10;

        r0.<com.ichi2.anki.NoteEditor: android.widget.LinearLayout mFieldsLayoutContainer> = $r12;

        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(2131755239);

        $r13 = (android.widget.TextView) $r10;

        r0.<com.ichi2.anki.NoteEditor: android.widget.TextView mTagsButton> = $r13;

        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(2131755241);

        $r13 = (android.widget.TextView) $r10;

        r0.<com.ichi2.anki.NoteEditor: android.widget.TextView mCardsButton> = $r13;

        $r13 = r0.<com.ichi2.anki.NoteEditor: android.widget.TextView mCardsButton>;

        $r14 = new com.ichi2.anki.NoteEditor$2;

        specialinvoke $r14.<com.ichi2.anki.NoteEditor$2: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        virtualinvoke $r13.<android.widget.TextView: void setOnClickListener(android.view.View$OnClickListener)>($r14);

        r0.<com.ichi2.anki.NoteEditor: boolean mAedictIntent> = 0;

        $i0 = r0.<com.ichi2.anki.NoteEditor: int mCaller>;

        lookupswitch($i0)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label12;
            case 3: goto label12;
            case 4: goto label02;
            case 5: goto label02;
            case 6: goto label13;
            case 7: goto label15;
            case 8: goto label16;
            case 9: goto label02;
            case 10: goto label17;
            case 11: goto label12;
            default: goto label02;
        };

     label02:
        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(2131755234);

        $r15 = (android.widget.Spinner) $r10;

        r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteTypeSpinner> = $r15;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllModelIds> = r2;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r1 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r16 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r18 = new com.ichi2.anki.NoteEditor$JSONNameComparator;

        specialinvoke $r18.<com.ichi2.anki.NoteEditor$JSONNameComparator: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r17, $r18);

        $r19 = virtualinvoke $r17.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.json.JSONObject) $r20;

     label04:
        $r22 = virtualinvoke r21.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

     label05:
        $r17 = r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllModelIds>;

     label06:
        $l1 = virtualinvoke r21.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

     label07:
        goto label03;

     label08:
        r24 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r24);

        throw $r25;

     label09:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("no caller could be identified, closing", $r7);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void finishWithoutAnimation()>();

        return;

     label10:
        $r26 = staticinvoke <com.ichi2.anki.AbstractFlashcardViewer: com.ichi2.libanki.Card getEditorCard()>();

        <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard> = $r26;

        $r26 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        if $r26 != null goto label11;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void finishWithoutAnimation()>();

        return;

     label11:
        $r26 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $r27 = virtualinvoke $r26.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote> = $r27;

        r0.<com.ichi2.anki.NoteEditor: boolean mAddNote> = 0;

        goto label02;

     label12:
        r0.<com.ichi2.anki.NoteEditor: boolean mAddNote> = 1;

        goto label02;

     label13:
        $r26 = <com.ichi2.anki.CardBrowser: com.ichi2.libanki.Card sCardBrowserCard>;

        <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard> = $r26;

        $r26 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        if $r26 != null goto label14;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void finishWithoutAnimation()>();

        return;

     label14:
        $r26 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $r27 = virtualinvoke $r26.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote> = $r27;

        r0.<com.ichi2.anki.NoteEditor: boolean mAddNote> = 0;

        goto label02;

     label15:
        r0.<com.ichi2.anki.NoteEditor: boolean mAddNote> = 1;

        goto label02;

     label16:
        r0.<com.ichi2.anki.NoteEditor: boolean mAddNote> = 1;

        goto label02;

     label17:
        specialinvoke r0.<com.ichi2.anki.NoteEditor: void fetchIntentInformation(android.content.Intent)>($r6);

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        if $r28 != null goto label18;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void finishWithoutAnimation()>();

        return;

     label18:
        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r22 = $r28[0];

        $z0 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("Aedict Notepad");

        if $z0 == 0 goto label19;

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r22 = $r28[1];

        $z0 = specialinvoke r0.<com.ichi2.anki.NoteEditor: boolean addFromAedict(java.lang.String)>($r22);

        if $z0 == 0 goto label19;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void finishWithoutAnimation()>();

        return;

     label19:
        r0.<com.ichi2.anki.NoteEditor: boolean mAddNote> = 1;

        goto label02;

     label20:
        r4 = new android.widget.ArrayAdapter;

        specialinvoke r4.<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>(r0, 17367048, r2);

        $r15 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteTypeSpinner>;

        virtualinvoke $r15.<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)>(r4);

        virtualinvoke r4.<android.widget.ArrayAdapter: void setDropDownViewResource(int)>(17367049);

        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(2131755235);

        $r13 = (android.widget.TextView) $r10;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label24;

        $r27 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

     label21:
        r21 = virtualinvoke $r27.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        $r29 = virtualinvoke r21.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i0 = virtualinvoke $r29.<org.json.JSONArray: int length()>();

     label22:
        if $i0 <= 1 goto label24;

     label23:
        virtualinvoke $r13.<android.widget.TextView: void setText(int)>(2131230741);

     label24:
        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(2131755236);

        $r15 = (android.widget.Spinner) $r10;

        r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteDeckSpinner> = $r15;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllDeckIds> = r2;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r1 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r30 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r17 = virtualinvoke $r30.<com.ichi2.libanki.Decks: java.util.ArrayList all()>();

        $r18 = new com.ichi2.anki.NoteEditor$JSONNameComparator;

        specialinvoke $r18.<com.ichi2.anki.NoteEditor$JSONNameComparator: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r17, $r18);

        $r19 = virtualinvoke $r17.<java.util.ArrayList: java.util.Iterator iterator()>();

     label25:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label34;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.json.JSONObject) $r20;

     label26:
        $l1 = virtualinvoke r21.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r1 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r30 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r31 = virtualinvoke $r30.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

        $l2 = virtualinvoke $r31.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $i0 = virtualinvoke r21.<org.json.JSONObject: int getInt(java.lang.String)>("dyn");

     label27:
        if $i0 == 0 goto label28;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label25;

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label25;

     label28:
        $r22 = virtualinvoke r21.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

     label29:
        $r17 = r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllDeckIds>;

     label30:
        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

     label31:
        goto label25;

     label32:
        r32 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r32);

        throw $r25;

     label33:
        r3 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>()>();

        throw $r25;

     label34:
        r4 = new android.widget.ArrayAdapter;

        specialinvoke r4.<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>(r0, 17367048, r2);

        $r15 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteDeckSpinner>;

        virtualinvoke $r15.<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)>(r4);

        virtualinvoke r4.<android.widget.ArrayAdapter: void setDropDownViewResource(int)>(17367049);

        $r15 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteDeckSpinner>;

        $r33 = new com.ichi2.anki.NoteEditor$3;

        specialinvoke $r33.<com.ichi2.anki.NoteEditor$3: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        virtualinvoke $r15.<android.widget.Spinner: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>($r33);

        $r27 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void setDid(com.ichi2.libanki.Note)>($r27);

        $r27 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void setNote(com.ichi2.libanki.Note)>($r27);

        r2 = r0.<com.ichi2.anki.NoteEditor: java.util.ArrayList mAllModelIds>;

        $r27 = r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Note mEditorNote>;

     label35:
        r21 = virtualinvoke $r27.<com.ichi2.libanki.Note: org.json.JSONObject model()>();

        $l1 = virtualinvoke r21.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $i0 = virtualinvoke r2.<java.util.ArrayList: int indexOf(java.lang.Object)>($r23);

     label36:
        $r15 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteTypeSpinner>;

        virtualinvoke $r15.<android.widget.Spinner: void setSelection(int,boolean)>($i0, 0);

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 == 0 goto label42;

        $r15 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteTypeSpinner>;

        $r34 = new com.ichi2.anki.NoteEditor$SetNoteTypeListener;

        specialinvoke $r34.<com.ichi2.anki.NoteEditor$SetNoteTypeListener: void <init>(com.ichi2.anki.NoteEditor,com.ichi2.anki.NoteEditor$1)>(r0, null);

        virtualinvoke $r15.<android.widget.Spinner: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>($r34);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void setTitle(int)>(2131230824);

        $r22 = null;

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        if $r28 == null goto label41;

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAedictIntent>;

        if $z0 == 0 goto label40;

        $r35 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i0 = virtualinvoke $r35.<java.util.LinkedList: int size()>();

        if $i0 != 3 goto label40;

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r36 = $r28[1];

        $z0 = virtualinvoke $r36.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");

        if $z0 == 0 goto label40;

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r22 = $r28[1];

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u001f");

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r36 = $r28[0];

        $r37 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r37 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u001f");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke $r22.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\\[", $r36);

        $i0 = virtualinvoke $r22.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r22 = virtualinvoke $r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label37:
        if $r22 == null goto label38;

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void setEditFieldTexts(java.lang.String)>($r22);

     label38:
        $r10 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.View findViewById(int)>(2131755238);

        $r38 = new com.ichi2.anki.NoteEditor$4;

        specialinvoke $r38.<com.ichi2.anki.NoteEditor$4: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        virtualinvoke $r10.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r38);

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 != 0 goto label43;

        $r26 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        if $r26 == null goto label43;

        $r7 = newarray (java.lang.Object)[1];

        $r26 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $l1 = virtualinvoke $r26.<com.ichi2.libanki.Card: long getId()>();

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r7[0] = $r23;

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("NoteEditor:: Edit note activity successfully started with card id %d", $r7);

        return;

     label39:
        r39 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r39);

        throw $r25;

     label40:
        $r35 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i0 = virtualinvoke $r35.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label37;

        $r35 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r20 = virtualinvoke $r35.<java.util.LinkedList: java.lang.Object get(int)>(0);

        $r40 = (com.ichi2.anki.FieldEditText) $r20;

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r36 = $r28[0];

        virtualinvoke $r40.<com.ichi2.anki.FieldEditText: void setText(java.lang.CharSequence)>($r36);

        $r35 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i0 = virtualinvoke $r35.<java.util.LinkedList: int size()>();

        if $i0 <= 1 goto label37;

        $r35 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r20 = virtualinvoke $r35.<java.util.LinkedList: java.lang.Object get(int)>(1);

        $r40 = (com.ichi2.anki.FieldEditText) $r20;

        $r28 = r0.<com.ichi2.anki.NoteEditor: java.lang.String[] mSourceText>;

        $r36 = $r28[1];

        virtualinvoke $r40.<com.ichi2.anki.FieldEditText: void setText(java.lang.CharSequence)>($r36);

        goto label37;

     label41:
        $r22 = virtualinvoke $r6.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("CONTENTS");

        goto label37;

     label42:
        $r15 = r0.<com.ichi2.anki.NoteEditor: android.widget.Spinner mNoteTypeSpinner>;

        $r41 = new com.ichi2.anki.NoteEditor$EditNoteTypeListener;

        specialinvoke $r41.<com.ichi2.anki.NoteEditor$EditNoteTypeListener: void <init>(com.ichi2.anki.NoteEditor,com.ichi2.anki.NoteEditor$1)>(r0, null);

        virtualinvoke $r15.<android.widget.Spinner: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>($r41);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void setTitle(int)>(2131230825);

        goto label38;

     label43:
        return;

        catch org.json.JSONException from label04 to label05 with label08;
        catch org.json.JSONException from label06 to label07 with label08;
        catch org.json.JSONException from label21 to label22 with label33;
        catch org.json.JSONException from label23 to label24 with label33;
        catch org.json.JSONException from label26 to label27 with label32;
        catch org.json.JSONException from label28 to label29 with label32;
        catch org.json.JSONException from label30 to label31 with label32;
        catch org.json.JSONException from label35 to label36 with label39;
    }
    protected void onCreate(android.os.Bundle)
    {
        com.ichi2.anki.NoteEditor r0;
        android.os.Bundle $r1;
        java.lang.Object[] $r2;
        android.content.Intent $r3;
        int $i0;
        boolean $z0;
        long $l1;
        java.util.ArrayList $r4;
        java.lang.String[] $r5;
        java.util.List $r6;
        java.lang.String $r7, $r8;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("onCreate()", $r2);

        specialinvoke r0.<com.ichi2.anki.AnkiActivity: void onCreate(android.os.Bundle)>($r1);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void setContentView(int)>(2130903127);

        $r3 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.Intent getIntent()>();

        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("caller");

        r0.<com.ichi2.anki.NoteEditor: int mCaller> = $i0;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String)>("addFact");

        r0.<com.ichi2.anki.NoteEditor: boolean mAddNote> = $z0;

        $l1 = virtualinvoke $r1.<android.os.Bundle: long getLong(java.lang.String)>("did");

        r0.<com.ichi2.anki.NoteEditor: long mCurrentDid> = $l1;

        $r4 = new java.util.ArrayList;

        $r5 = virtualinvoke $r1.<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>("tags");

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags> = $r4;

        $r1 = virtualinvoke $r1.<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>("editFields");

        r0.<com.ichi2.anki.NoteEditor: android.os.Bundle mSavedFields> = $r1;

     label1:
        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void startLoadingCollection()>();

        return;

     label2:
        $i0 = virtualinvoke $r3.<android.content.Intent: int getIntExtra(java.lang.String,int)>("CALLER", 0);

        r0.<com.ichi2.anki.NoteEditor: int mCaller> = $i0;

        $i0 = r0.<com.ichi2.anki.NoteEditor: int mCaller>;

        if $i0 != 0 goto label1;

        $r7 = virtualinvoke $r3.<android.content.Intent: java.lang.String getAction()>();

        if $r7 == null goto label1;

        $r8 = "org.openintents.action.CREATE_FLASHCARD";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label3;

        $r8 = "android.intent.action.SEND";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

     label3:
        r0.<com.ichi2.anki.NoteEditor: int mCaller> = 10;

        goto label1;
    }
    public boolean onCreateOptionsMenu(android.view.Menu)
    {
        com.ichi2.anki.NoteEditor r0;
        android.view.Menu $r1;
        android.view.MenuInflater $r2;
        boolean $z0;
        android.view.MenuItem $r3;
        java.util.LinkedList $r4;
        int i0, $i1;
        java.lang.Object $r5;
        com.ichi2.anki.FieldEditText $r6;
        android.text.Editable $r7;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: android.view.Menu;

        $r2 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.view.MenuInflater getMenuInflater()>();

        virtualinvoke $r2.<android.view.MenuInflater: void inflate(int,android.view.Menu)>(2131820555, $r1);

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755381);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(0);

     label1:
        $r4 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        if $r4 == null goto label3;

        i0 = 0;

     label2:
        $r4 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i1 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if i0 >= $i1 goto label3;

        $r4 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object get(int)>(i0);

        $r6 = (com.ichi2.anki.FieldEditText) $r5;

        $r7 = virtualinvoke $r6.<com.ichi2.anki.FieldEditText: android.text.Editable getText()>();

        $i1 = interfaceinvoke $r7.<android.text.Editable: int length()>();

        if $i1 <= 0 goto label5;

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755381);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>(1);

     label3:
        $z0 = specialinvoke r0.<com.ichi2.anki.AnkiActivity: boolean onCreateOptionsMenu(android.view.Menu)>($r1);

        return $z0;

     label4:
        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755380);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(1);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755382);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(1);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755383);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(1);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755382);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(1);

        goto label1;

     label5:
        $r4 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $i1 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        $i1 = $i1 + -1;

        if i0 != $i1 goto label6;

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755381);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>(0);

     label6:
        i0 = i0 + 1;

        goto label2;
    }
    protected void onDestroy()
    {
        com.ichi2.anki.NoteEditor r0;
        android.content.BroadcastReceiver $r1;

        r0 := @this: com.ichi2.anki.NoteEditor;

        specialinvoke r0.<com.ichi2.anki.AnkiActivity: void onDestroy()>();

        $r1 = r0.<com.ichi2.anki.NoteEditor: android.content.BroadcastReceiver mUnmountReceiver>;

        if $r1 == null goto label1;

        $r1 = r0.<com.ichi2.anki.NoteEditor: android.content.BroadcastReceiver mUnmountReceiver>;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

     label1:
        return;
    }
    public boolean onOptionsItemSelected(android.view.MenuItem)
    {
        com.ichi2.anki.NoteEditor r0;
        android.view.MenuItem $r1;
        com.ichi2.anki.NoteEditor$7 r2;
        com.ichi2.anki.dialogs.ConfirmationDialog r3;
        android.content.Intent r4;
        android.content.res.Resources $r5;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r6;
        java.lang.String $r7, $r8;
        com.ichi2.anki.dialogs.NoteEditorRescheduleCard $r9;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: android.view.MenuItem;

        $r5 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $i0 = interfaceinvoke $r1.<android.view.MenuItem: int getItemId()>();

        lookupswitch($i0)
        {
            case 16908332: goto label2;
            case 2131755379: goto label3;
            case 2131755380: goto label4;
            case 2131755381: goto label4;
            case 2131755382: goto label6;
            case 2131755383: goto label7;
            default: goto label1;
        };

     label1:
        $z0 = specialinvoke r0.<com.ichi2.anki.AnkiActivity: boolean onOptionsItemSelected(android.view.MenuItem)>($r1);

        return $z0;

     label2:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("NoteEditor:: Home button pressed", $r6);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void closeCardEditorWithCheck()>();

        return 1;

     label3:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("NoteEditor:: Save note button pressed", $r6);

        specialinvoke r0.<com.ichi2.anki.NoteEditor: void saveNote()>();

        return 1;

     label4:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("NoteEditor:: Copy or add card button pressed", $r6);

        r4 = new android.content.Intent;

        specialinvoke r4.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/NoteEditor;");

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("CALLER", 8);

        $i0 = interfaceinvoke $r1.<android.view.MenuItem: int getItemId()>();

        if $i0 != 2131755381 goto label5;

        $r7 = specialinvoke r0.<com.ichi2.anki.NoteEditor: java.lang.String getFieldsText()>();

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("CONTENTS", $r7);

     label5:
        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r4, 0, $i0);

        return 1;

     label6:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("NoteEditor:: Reset progress button pressed", $r6);

        r3 = new com.ichi2.anki.dialogs.ConfirmationDialog;

        specialinvoke r3.<com.ichi2.anki.dialogs.ConfirmationDialog: void <init>()>();

        $r7 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131231259);

        $r8 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131231258);

        virtualinvoke r3.<com.ichi2.anki.dialogs.ConfirmationDialog: void setArgs(java.lang.String,java.lang.String)>($r7, $r8);

        r2 = new com.ichi2.anki.NoteEditor$7;

        specialinvoke r2.<com.ichi2.anki.NoteEditor$7: void <init>(com.ichi2.anki.NoteEditor)>(r0);

        virtualinvoke r3.<com.ichi2.anki.dialogs.ConfirmationDialog: void setConfirm(java.lang.Runnable)>(r2);

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void showDialogFragment(android.support.v4.app.DialogFragment)>(r3);

        return 1;

     label7:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("NoteEditor:: Reschedule button pressed", $r6);

        $r9 = staticinvoke <com.ichi2.anki.dialogs.NoteEditorRescheduleCard: com.ichi2.anki.dialogs.NoteEditorRescheduleCard newInstance()>();

        virtualinvoke r0.<com.ichi2.anki.NoteEditor: void showDialogFragment(android.support.v4.app.DialogFragment)>($r9);

        return 1;
    }
    public void onRescheduleCard(int)
    {
        com.ichi2.anki.NoteEditor r0;
        int $i0;
        java.lang.Object[] $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Sched $r3;
        long[] $r4;
        com.ichi2.libanki.Card $r5;
        long $l1;
        android.content.res.Resources $r6;
        java.lang.String $r7;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Reschedule card", $r1);

        $r2 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r4 = newarray (long)[1];

        $r5 = <com.ichi2.anki.NoteEditor: com.ichi2.libanki.Card mCurrentEditedCard>;

        $l1 = virtualinvoke $r5.<com.ichi2.libanki.Card: long getId()>();

        $r4[0] = $l1;

        virtualinvoke $r3.<com.ichi2.libanki.Sched: void reschedCards(long[],int,int)>($r4, $i0, $i0);

        $r2 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: com.ichi2.libanki.Collection getCol()>();

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void reset()>();

        r0.<com.ichi2.anki.NoteEditor: boolean mReloadRequired> = 1;

        $r6 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int)>(2131231254);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r7, 1);

        return;
    }
    protected void onSaveInstanceState(android.os.Bundle)
    {
        com.ichi2.anki.NoteEditor r0;
        android.os.Bundle $r1, r2;
        java.lang.Object[] $r3;
        int $i0;
        boolean $z0;
        long $l1;
        java.util.List $r4, $r5;
        java.lang.String[] $r6;
        java.util.LinkedList $r7;
        java.util.Iterator $r8;
        java.lang.Object $r9;
        com.ichi2.anki.FieldEditText r10;
        java.lang.String $r11, $r13;
        android.text.Editable $r12;

        r0 := @this: com.ichi2.anki.NoteEditor;

        $r1 := @parameter0: android.os.Bundle;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Saving instance", $r3);

        $i0 = r0.<com.ichi2.anki.NoteEditor: int mCaller>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("caller", $i0);

        $z0 = r0.<com.ichi2.anki.NoteEditor: boolean mAddNote>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("addFact", $z0);

        $l1 = r0.<com.ichi2.anki.NoteEditor: long mCurrentDid>;

        virtualinvoke $r1.<android.os.Bundle: void putLong(java.lang.String,long)>("did", $l1);

        $r4 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        $r5 = r0.<com.ichi2.anki.NoteEditor: java.util.List mSelectedTags>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r6 = (java.lang.String[]) $r3;

        virtualinvoke $r1.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("tags", $r6);

        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        $r7 = r0.<com.ichi2.anki.NoteEditor: java.util.LinkedList mEditFields>;

        $r8 = virtualinvoke $r7.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.ichi2.anki.FieldEditText) $r9;

        $i0 = virtualinvoke r10.<com.ichi2.anki.FieldEditText: int getOrd()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r12 = virtualinvoke r10.<com.ichi2.anki.FieldEditText: android.text.Editable getText()>();

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>($r11, $r13);

        goto label1;

     label2:
        virtualinvoke $r1.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("editFields", r2);

        specialinvoke r0.<com.ichi2.anki.AnkiActivity: void onSaveInstanceState(android.os.Bundle)>($r1);

        return;
    }
    protected void onStop()
    {
        com.ichi2.anki.NoteEditor r0;
        boolean $z0;

        r0 := @this: com.ichi2.anki.NoteEditor;

        specialinvoke r0.<com.ichi2.anki.AnkiActivity: void onStop()>();

        $z0 = virtualinvoke r0.<com.ichi2.anki.NoteEditor: boolean isFinishing()>();

        if $z0 != 0 goto label1;

        staticinvoke <com.ichi2.widget.WidgetStatus: void update(android.content.Context)>(r0);

        staticinvoke <com.ichi2.anki.UIUtils: void saveCollectionInBackground(android.content.Context)>(r0);

     label1:
        return;
    }
