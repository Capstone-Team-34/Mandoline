com.ichi2.anki.IntentHandler extends android.app.Activity
    public void <init>()
    {
        com.ichi2.anki.IntentHandler r0;

        r0 := @this: com.ichi2.anki.IntentHandler;

        specialinvoke r0.<android.app.Activity: void <init>()>();

        return;
    }
    static void access$000(com.ichi2.anki.IntentHandler)
    {
        com.ichi2.anki.IntentHandler $r0;

        $r0 := @parameter0: com.ichi2.anki.IntentHandler;

        specialinvoke $r0.<com.ichi2.anki.IntentHandler: void finishWithFade()>();

        return;
    }
    private boolean copyFileToCache(android.content.Intent, java.lang.String)
    {
        com.ichi2.anki.IntentHandler r0;
        android.content.Intent $r1;
        java.lang.String $r2;
        byte[] r3;
        java.io.FileOutputStream r4;
        android.content.ContentResolver $r5;
        android.net.Uri $r6;
        java.io.InputStream $r7;
        java.io.FileNotFoundException r8, r12;
        java.lang.Object[] $r9;
        int $i0;
        java.io.IOException r10, r11, r13, r15;
        java.lang.Throwable $r14;

        r0 := @this: com.ichi2.anki.IntentHandler;

        $r1 := @parameter0: android.content.Intent;

        $r2 := @parameter1: java.lang.String;

     label01:
        $r5 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke $r1.<android.content.Intent: android.net.Uri getData()>();

        $r7 = virtualinvoke $r5.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r6);

     label02:
        if $r7 != null goto label04;

        return 0;

     label03:
        r8 := @caughtexception;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r8, "Could not open input stream to intent data", $r9);

        return 0;

     label04:
        r4 = new java.io.FileOutputStream;

     label05:
        specialinvoke r4.<java.io.FileOutputStream: void <init>(java.lang.String)>($r2);

     label06:
        r3 = newarray (byte)[1024];

     label07:
        $i0 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r3);

     label08:
        if $i0 <= 0 goto label17;

     label09:
        virtualinvoke r4.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

     label10:
        goto label07;

     label11:
        r10 := @caughtexception;

     label12:
        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r2;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r10, "Could not copy file to %s", $r9);

     label13:
        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label14:
        return 0;

     label15:
        r11 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r2;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r11, "Error closing tempOutDir %s", $r9);

        return 0;

     label16:
        r12 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r2;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r12, "Could not access destination file %s", $r9);

        return 0;

     label17:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label18:
        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label19:
        return 1;

     label20:
        r13 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r2;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r13, "Error closing tempOutDir %s", $r9);

        goto label19;

     label21:
        $r14 := @caughtexception;

     label22:
        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label23:
        throw $r14;

     label24:
        r15 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r2;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r15, "Error closing tempOutDir %s", $r9);

        goto label23;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.io.FileNotFoundException from label05 to label06 with label16;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label17 to label18 with label11;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.io.IOException from label22 to label23 with label24;
    }
    private void finishWithFade()
    {
        com.ichi2.anki.IntentHandler r0;
        int $i0;

        r0 := @this: com.ichi2.anki.IntentHandler;

        virtualinvoke r0.<com.ichi2.anki.IntentHandler: void finish()>();

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int UP>;

        staticinvoke <com.ichi2.anim.ActivityTransitionAnimation: void slide(android.app.Activity,int)>(r0, $i0);

        return;
    }
    private boolean hasValidZipFile(android.content.Intent)
    {
        com.ichi2.anki.IntentHandler r0;
        android.content.Intent $r1;
        java.util.zip.ZipInputStream r2;
        java.io.InputStream r3, $r6;
        android.content.ContentResolver $r4;
        android.net.Uri $r5;
        java.lang.Object[] $r7;
        java.io.FileNotFoundException r8;
        boolean z0;
        java.util.zip.ZipEntry $r9;
        java.lang.Exception r10, r13;
        java.io.IOException r11;
        java.lang.Throwable $r12;

        r0 := @this: com.ichi2.anki.IntentHandler;

        $r1 := @parameter0: android.content.Intent;

        r3 = null;

     label01:
        $r4 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.ContentResolver getContentResolver()>();

        $r5 = virtualinvoke $r1.<android.content.Intent: android.net.Uri getData()>();

        $r6 = virtualinvoke $r4.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r5);

     label02:
        r3 = $r6;

     label03:
        if r3 != null goto label05;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Could not open input stream to intent data", $r7);

        return 0;

     label04:
        r8 := @caughtexception;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r8, "Could not open input stream to intent data", $r7);

        goto label03;

     label05:
        r2 = new java.util.zip.ZipInputStream;

        specialinvoke r2.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>(r3);

        z0 = 0;

     label06:
        $r9 = virtualinvoke r2.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

     label07:
        if $r9 == null goto label08;

        z0 = 1;

     label08:
        virtualinvoke r2.<java.util.zip.ZipInputStream: void close()>();

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label09:
        return z0;

     label10:
        r10 := @caughtexception;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r10, "Error closing the InputStream", $r7);

        return z0;

     label11:
        r11 := @caughtexception;

     label12:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r11, "Error checking if provided file has a zip entry", $r7);

     label13:
        goto label08;

     label14:
        $r12 := @caughtexception;

     label15:
        virtualinvoke r2.<java.util.zip.ZipInputStream: void close()>();

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label16:
        throw $r12;

     label17:
        r13 := @caughtexception;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r13, "Error closing the InputStream", $r7);

        goto label16;

        catch java.io.FileNotFoundException from label01 to label02 with label04;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Exception from label15 to label16 with label17;
    }
    private void sendDoSyncMsg()
    {
        com.ichi2.anki.IntentHandler r0;
        android.os.Message $r1;

        r0 := @this: com.ichi2.anki.IntentHandler;

        $r1 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        $r1.<android.os.Message: int what> = 8;

        staticinvoke <com.ichi2.anki.dialogs.DialogHandler: void storeMessage(android.os.Message)>($r1);

        return;
    }
    private void sendShowImportFileDialogMsg(java.lang.String)
    {
        com.ichi2.anki.IntentHandler r0;
        java.lang.String $r1, $r4;
        java.io.File r2;
        android.os.Bundle r3;
        android.os.Message $r5;
        boolean $z0;

        r0 := @this: com.ichi2.anki.IntentHandler;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $r4 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r5 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r3 = new android.os.Bundle;

        specialinvoke r3.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("importPath", $r1);

        virtualinvoke $r5.<android.os.Message: void setData(android.os.Bundle)>(r3);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("collection.apkg");

        if $z0 == 0 goto label2;

        $r5.<android.os.Message: int what> = 1;

     label1:
        staticinvoke <com.ichi2.anki.dialogs.DialogHandler: void storeMessage(android.os.Message)>($r5);

        return;

     label2:
        $r5.<android.os.Message: int what> = 2;

        goto label1;
    }
    protected void onCreate(android.os.Bundle)
    {
        com.ichi2.anki.IntentHandler r0;
        android.os.Bundle $r1;
        android.content.Intent r2, $r3, $r6;
        java.lang.String $r4, $r8, $r11, $r16;
        java.lang.Object[] $r5;
        android.net.Uri $r7;
        boolean $z0, $z1;
        android.content.res.Resources $r9;
        java.lang.StringBuilder $r10;
        android.database.Cursor r12, $r15;
        android.content.ContentResolver $r13;
        java.lang.String[] $r14;
        java.lang.Throwable $r17;
        java.lang.RuntimeException $r18;
        java.io.File $r19, $r20;
        com.afollestad.materialdialogs.MaterialDialog$Builder $r21;
        com.ichi2.anki.IntentHandler$1 $r22;
        com.afollestad.materialdialogs.MaterialDialog $r23;
        com.ichi2.anki.CollectionHelper $r24;
        com.ichi2.libanki.Collection $r25;
        com.ichi2.libanki.Decks $r26;
        long $l0;

        r0 := @this: com.ichi2.anki.IntentHandler;

        $r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1);

        virtualinvoke r0.<com.ichi2.anki.IntentHandler: void setContentView(int)>(2130903143);

        $r3 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.Intent getIntent()>();

        $r4 = virtualinvoke $r3.<android.content.Intent: java.lang.String toString()>();

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>($r4, $r5);

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/DeckPicker;");

        $r6 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.Intent getIntent()>();

        $r7 = virtualinvoke $r6.<android.content.Intent: android.net.Uri getData()>();

        $r6 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.Intent getIntent()>();

        $r4 = virtualinvoke $r6.<android.content.Intent: java.lang.String getType()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r7, $r4);

        $r4 = virtualinvoke $r3.<android.content.Intent: java.lang.String getAction()>();

        $r8 = "android.intent.action.VIEW";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label19;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("IntentHandler/ User requested to view a file", $r5);

        $z0 = 0;

        $r9 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.res.Resources getResources()>();

        $r5 = newarray (java.lang.Object)[1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r8 = staticinvoke <com.ichi2.anki.AnkiDroidApp: java.lang.String getManualUrl()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#importing");

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        $r8 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231070, $r5);

        $r7 = virtualinvoke $r3.<android.content.Intent: android.net.Uri getData()>();

        $r11 = virtualinvoke $r7.<android.net.Uri: java.lang.String getScheme()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("content");

        if $z1 == 0 goto label16;

        $r11 = null;

        r12 = null;

     label01:
        $r13 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.ContentResolver getContentResolver()>();

        $r7 = virtualinvoke $r3.<android.content.Intent: android.net.Uri getData()>();

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = "_display_name";

        $r15 = virtualinvoke $r13.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r7, $r14, null, null, null);

     label02:
        r12 = $r15;

        if $r15 == null goto label06;

     label03:
        $z1 = interfaceinvoke $r15.<android.database.Cursor: boolean moveToFirst()>();

     label04:
        if $z1 == 0 goto label06;

     label05:
        $r11 = interfaceinvoke $r15.<android.database.Cursor: java.lang.String getString(int)>(0);

     label06:
        if $r15 == null goto label07;

        interfaceinvoke $r15.<android.database.Cursor: void close()>();

     label07:
        if $r11 != null goto label09;

        $r16 = virtualinvoke $r3.<android.content.Intent: java.lang.String getType()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("application/apkg");

        if $z1 != 0 goto label08;

        $z1 = specialinvoke r0.<com.ichi2.anki.IntentHandler: boolean hasValidZipFile(android.content.Intent)>($r3);

        if $z1 == 0 goto label13;

     label08:
        $r11 = "unknown_filename.apkg";

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("Could not retrieve filename from ContentProvider, but was valid zip file so we try to continue", $r5);

     label09:
        if $r11 == null goto label14;

        $r16 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean endsWith(java.lang.String)>(".apkg");

        if $z1 != 0 goto label14;

        $r9 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.res.Resources getResources()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r11;

        $r8 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231071, $r5);

     label10:
        if $z0 == 0 goto label18;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>($r4);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r0.<com.ichi2.anki.IntentHandler: void startActivity(android.content.Intent)>(r2);

        specialinvoke r0.<com.ichi2.anki.IntentHandler: void finishWithFade()>();

        return;

     label11:
        $r17 := @caughtexception;

        if r12 == null goto label12;

        interfaceinvoke r12.<android.database.Cursor: void close()>();

     label12:
        throw $r17;

     label13:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Could not retrieve filename from ContentProvider or read content as ZipFile", $r5);

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not import apkg from ContentProvider");

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String,java.lang.String)>($r18, "IntentHandler.java", "apkg import failed");

        goto label09;

     label14:
        if $r11 == null goto label10;

        $r19 = new java.io.File;

        $r20 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: java.io.File getCacheDir()>();

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r20, $r11);

        $r7 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r19);

        $r11 = virtualinvoke $r7.<android.net.Uri: java.lang.String getEncodedPath()>();

        $z1 = specialinvoke r0.<com.ichi2.anki.IntentHandler: boolean copyFileToCache(android.content.Intent,java.lang.String)>($r3, $r11);

        $z0 = $z1;

        if $z1 == 0 goto label15;

        specialinvoke r0.<com.ichi2.anki.IntentHandler: void sendShowImportFileDialogMsg(java.lang.String)>($r11);

        goto label10;

     label15:
        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error importing apkg file");

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String,java.lang.String)>($r18, "IntentHandler.java", "apkg import failed");

        goto label10;

     label16:
        $r7 = virtualinvoke $r3.<android.content.Intent: android.net.Uri getData()>();

        $r11 = virtualinvoke $r7.<android.net.Uri: java.lang.String getScheme()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z1 == 0 goto label10;

        $r7 = virtualinvoke $r3.<android.content.Intent: android.net.Uri getData()>();

        $r11 = virtualinvoke $r7.<android.net.Uri: java.lang.String getPath()>();

        if $r11 == null goto label17;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean endsWith(java.lang.String)>(".apkg");

        if $z1 == 0 goto label17;

        specialinvoke r0.<com.ichi2.anki.IntentHandler: void sendShowImportFileDialogMsg(java.lang.String)>($r11);

        $z0 = 1;

        goto label10;

     label17:
        $r9 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.res.Resources getResources()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r11;

        $r8 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231071, $r5);

        goto label10;

     label18:
        $r9 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int)>(2131231073);

        $r21 = new com.afollestad.materialdialogs.MaterialDialog$Builder;

        specialinvoke $r21.<com.afollestad.materialdialogs.MaterialDialog$Builder: void <init>(android.content.Context)>(r0);

        $r21 = virtualinvoke $r21.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder title(java.lang.CharSequence)>($r4);

        $r21 = virtualinvoke $r21.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder content(java.lang.CharSequence)>($r8);

        $r9 = virtualinvoke r0.<com.ichi2.anki.IntentHandler: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int)>(2131230970);

        $r21 = virtualinvoke $r21.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder positiveText(java.lang.CharSequence)>($r4);

        $r22 = new com.ichi2.anki.IntentHandler$1;

        specialinvoke $r22.<com.ichi2.anki.IntentHandler$1: void <init>(com.ichi2.anki.IntentHandler)>(r0);

        $r21 = virtualinvoke $r21.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder callback(com.afollestad.materialdialogs.MaterialDialog$ButtonCallback)>($r22);

        $r23 = virtualinvoke $r21.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog build()>();

        virtualinvoke $r23.<com.afollestad.materialdialogs.MaterialDialog: void show()>();

        return;

     label19:
        $r8 = "com.ichi2.anki.DO_SYNC";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label20;

        specialinvoke r0.<com.ichi2.anki.IntentHandler: void sendDoSyncMsg()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>($r4);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r0.<com.ichi2.anki.IntentHandler: void startActivity(android.content.Intent)>(r2);

        specialinvoke r0.<com.ichi2.anki.IntentHandler: void finishWithFade()>();

        return;

     label20:
        $z0 = virtualinvoke $r3.<android.content.Intent: boolean hasExtra(java.lang.String)>("EXTRA_DECK_ID");

        if $z0 == 0 goto label21;

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/Reviewer;");

        $r24 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r25 = virtualinvoke $r24.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>(r0);

        $r26 = virtualinvoke $r25.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r3.<android.content.Intent: long getLongExtra(java.lang.String,long)>("EXTRA_DECK_ID", 0L);

        virtualinvoke $r26.<com.ichi2.libanki.Decks: void select(long)>($l0);

        virtualinvoke r0.<com.ichi2.anki.IntentHandler: void startActivity(android.content.Intent)>(r2);

        specialinvoke r0.<com.ichi2.anki.IntentHandler: void finishWithFade()>();

        return;

     label21:
        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.LAUNCHER");

        virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(268468224);

        virtualinvoke r0.<com.ichi2.anki.IntentHandler: boolean startActivityIfNeeded(android.content.Intent,int)>(r2, 0);

        specialinvoke r0.<com.ichi2.anki.IntentHandler: void finishWithFade()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
    }
