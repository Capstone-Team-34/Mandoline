com.ichi2.anki.widgets.DeckAdapter extends android.support.v7.widget.RecyclerView$Adapter
private com.ichi2.libanki.Collection mCol
private android.graphics.drawable.Drawable mCollapseImage
private android.view.View$OnClickListener mCountsClickListener
private android.view.View$OnClickListener mDeckClickListener
private android.view.View$OnClickListener mDeckExpanderClickListener
private java.util.List mDeckList
private android.view.View$OnLongClickListener mDeckLongClickListener
private int mDeckNameDefaultColor
private int mDeckNameDynColor
private android.graphics.drawable.Drawable mExpandImage
private boolean mHasSubdecks
private android.view.LayoutInflater mLayoutInflater
private int mLearnCountColor
private int mLrn
private int mNew
private int mNewCountColor
private android.graphics.drawable.Drawable mNoExpander
private int mRev
private int mReviewCountColor
private int mRowCurrentDrawable
private int mZeroCountColor
    public void <init>(android.view.LayoutInflater, android.content.Context)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.view.LayoutInflater $r1;
        android.content.Context $r2;
        int[] r3;
        android.graphics.drawable.ColorDrawable $r4;
        java.util.ArrayList $r5;
        android.content.res.TypedArray $r6;
        int $i0;
        android.graphics.drawable.Drawable $r7;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.view.LayoutInflater;

        $r2 := @parameter1: android.content.Context;

        specialinvoke r0.<android.support.v7.widget.RecyclerView$Adapter: void <init>()>();

        $r4 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r4.<android.graphics.drawable.ColorDrawable: void <init>(int)>(0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.graphics.drawable.Drawable mNoExpander> = $r4;

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.LayoutInflater mLayoutInflater> = $r1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList> = $r5;

        r3 = newarray (int)[9];

        r3[0] = 2130772055;

        r3[1] = 2130772038;

        r3[2] = 2130772002;

        r3[3] = 2130772039;

        r3[4] = 2130771977;

        r3[5] = 16842904;

        r3[6] = 2130771985;

        r3[7] = 2130771988;

        r3[8] = 2130771976;

        $r6 = virtualinvoke $r2.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>(r3);

        $i0 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>($r2, 2131689483);

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getColor(int,int)>(0, $i0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mZeroCountColor> = $i0;

        $i0 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>($r2, 2131689483);

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getColor(int,int)>(1, $i0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mNewCountColor> = $i0;

        $i0 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>($r2, 2131689483);

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getColor(int,int)>(2, $i0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mLearnCountColor> = $i0;

        $i0 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>($r2, 2131689483);

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getColor(int,int)>(3, $i0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mReviewCountColor> = $i0;

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getResourceId(int,int)>(4, 0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mRowCurrentDrawable> = $i0;

        $i0 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>($r2, 2131689483);

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getColor(int,int)>(5, $i0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mDeckNameDefaultColor> = $i0;

        $i0 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>($r2, 2131689513);

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getColor(int,int)>(6, $i0);

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mDeckNameDynColor> = $i0;

        $r7 = virtualinvoke $r6.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(7);

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.graphics.drawable.Drawable mExpandImage> = $r7;

        $r7 = virtualinvoke $r6.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(8);

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.graphics.drawable.Drawable mCollapseImage> = $r7;

        virtualinvoke $r6.<android.content.res.TypedArray: void recycle()>();

        return;
    }
    private void processNodes(java.util.List)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        java.util.List r1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: void processNodes(java.util.List,int)>(r1, 0);

        return;
    }
    private void processNodes(java.util.List, int)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        java.util.List r1, $r5;
        int $i0, $i3, $i4;
        java.util.Iterator $r2, $r9;
        boolean $z0;
        java.lang.Object $r3;
        com.ichi2.libanki.Sched$DeckDueTreeNode r4;
        long $l1;
        byte $b2;
        com.ichi2.libanki.Collection $r6;
        com.ichi2.libanki.DB $r7;
        com.ichi2.libanki.Decks $r8;
        org.json.JSONObject r10;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        r1 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r3;

        $l1 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $b2 = $l1 cmp 1L;

        if $b2 != 0 goto label2;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i3 <= 1 goto label2;

        $r5 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i3 != 0 goto label2;

        $r6 = r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol>;

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $i3 = virtualinvoke $r7.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>("select 1 from cards where did = 1");

        if $i3 == 0 goto label1;

     label2:
        $r6 = r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol>;

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r5 = virtualinvoke $r8.<com.ichi2.libanki.Decks: java.util.List parents(long)>($l1);

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.json.JSONObject) $r3;

        r0.<com.ichi2.anki.widgets.DeckAdapter: boolean mHasSubdecks> = 1;

        $z0 = virtualinvoke r10.<org.json.JSONObject: boolean optBoolean(java.lang.String)>("collapsed");

        if $z0 == 0 goto label3;

        return;

     label4:
        $r5 = r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: int depth> = $i0;

        if $i0 != 0 goto label5;

        $i3 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mNew>;

        $i4 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        $i3 = $i3 + $i4;

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mNew> = $i3;

        $i3 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mLrn>;

        $i4 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        $i3 = $i3 + $i4;

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mLrn> = $i3;

        $i3 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mRev>;

        $i4 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        $i3 = $i3 + $i4;

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mRev> = $i3;

     label5:
        $r5 = r4.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children>;

        $i3 = $i0 + 1;

        specialinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: void processNodes(java.util.List,int)>($r5, $i3);

        goto label1;

     label6:
        return;
    }
    private void setDeckExpander(android.widget.ImageButton, android.widget.ImageButton, com.ichi2.libanki.Sched$DeckDueTreeNode)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.widget.ImageButton $r1, $r2;
        com.ichi2.libanki.Sched$DeckDueTreeNode $r3;
        int i0, $i2;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        long $l1;
        org.json.JSONObject $r6;
        boolean $z0;
        android.graphics.drawable.Drawable $r7;
        android.content.Context $r8;
        java.lang.String $r9;
        android.content.res.Resources $r10;
        float $f0;
        java.util.List $r11;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.widget.ImageButton;

        $r2 := @parameter1: android.widget.ImageButton;

        $r3 := @parameter2: com.ichi2.libanki.Sched$DeckDueTreeNode;

        $r4 = r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = $r3.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l1);

        $z0 = virtualinvoke $r6.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("collapsed", 0);

        if $z0 == 0 goto label2;

        $r7 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.graphics.drawable.Drawable mExpandImage>;

        virtualinvoke $r1.<android.widget.ImageButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r7);

        $r8 = virtualinvoke $r1.<android.widget.ImageButton: android.content.Context getContext()>();

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getString(int)>(2131231015);

        virtualinvoke $r1.<android.widget.ImageButton: void setContentDescription(java.lang.CharSequence)>($r9);

     label1:
        $r10 = virtualinvoke $r2.<android.widget.ImageButton: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r10.<android.content.res.Resources: float getDimension(int)>(2131427358);

        i0 = (int) $f0;

        $i2 = $r3.<com.ichi2.libanki.Sched$DeckDueTreeNode: int depth>;

        i0 = i0 * $i2;

        virtualinvoke $r2.<android.widget.ImageButton: void setMinimumWidth(int)>(i0);

        return;

     label2:
        $r11 = $r3.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children>;

        i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i0 <= 0 goto label3;

        $r7 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.graphics.drawable.Drawable mCollapseImage>;

        virtualinvoke $r1.<android.widget.ImageButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r7);

        $r8 = virtualinvoke $r1.<android.widget.ImageButton: android.content.Context getContext()>();

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getString(int)>(2131230850);

        virtualinvoke $r1.<android.widget.ImageButton: void setContentDescription(java.lang.CharSequence)>($r9);

        goto label1;

     label3:
        $r7 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.graphics.drawable.Drawable mNoExpander>;

        virtualinvoke $r1.<android.widget.ImageButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r7);

        goto label1;
    }
    public void buildDeckList(java.util.List, com.ichi2.libanki.Collection)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        java.util.List r1, $r3;
        com.ichi2.libanki.Collection $r2;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: com.ichi2.libanki.Collection;

        r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol> = $r2;

        $r3 = r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mRev> = 0;

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mLrn> = 0;

        r0.<com.ichi2.anki.widgets.DeckAdapter: int mNew> = 0;

        r0.<com.ichi2.anki.widgets.DeckAdapter: boolean mHasSubdecks> = 0;

        specialinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: void processNodes(java.util.List)>(r1);

        virtualinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: void notifyDataSetChanged()>();

        return;
    }
    public int findDeckPosition(long)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        long $l0, $l3;
        int i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        com.ichi2.libanki.Sched$DeckDueTreeNode $r3;
        byte $b4;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        org.json.JSONObject $r6;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $l0 := @parameter0: long;

        i1 = 0;

     label1:
        $r1 = r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        $r1 = r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r2;

        $l3 = $r3.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $b4 = $l3 cmp $l0;

        if $b4 != 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol>;

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r1 = virtualinvoke $r5.<com.ichi2.libanki.Decks: java.util.List parents(long)>($l0);

        i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 != 0 goto label4;

        return 0;

     label4:
        i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = i1 + -1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (org.json.JSONObject) $r2;

        $l0 = virtualinvoke $r6.<org.json.JSONObject: long optLong(java.lang.String,long)>("id", 0L);

        i1 = virtualinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: int findDeckPosition(long)>($l0);

        return i1;
    }
    public java.util.List getDeckList()
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        java.util.List r1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        r1 = r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList>;

        return r1;
    }
    public int getDue()
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        int $i0, $i1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mNew>;

        $i1 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mLrn>;

        $i0 = $i0 + $i1;

        $i1 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mRev>;

        $i0 = $i0 + $i1;

        return $i0;
    }
    public int getEta()
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Sched $r2;
        int[] $r3;
        int $i0;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 = r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r3 = newarray (int)[3];

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mNew>;

        $r3[0] = $i0;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mLrn>;

        $r3[1] = $i0;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mRev>;

        $r3[2] = $i0;

        $i0 = virtualinvoke $r2.<com.ichi2.libanki.Sched: int eta(int[])>($r3);

        return $i0;
    }
    public int getItemCount()
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 = r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }
    public volatile void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder, int)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        int $i0;
        android.support.v7.widget.RecyclerView$ViewHolder $r1;
        com.ichi2.anki.widgets.DeckAdapter$ViewHolder $r2;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.support.v7.widget.RecyclerView$ViewHolder;

        $i0 := @parameter1: int;

        $r2 = (com.ichi2.anki.widgets.DeckAdapter$ViewHolder) $r1;

        virtualinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder,int)>($r2, $i0);

        return;
    }
    public void onBindViewHolder(com.ichi2.anki.widgets.DeckAdapter$ViewHolder, int)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        com.ichi2.anki.widgets.DeckAdapter$ViewHolder $r1;
        int $i0, i1;
        android.widget.RelativeLayout r2;
        java.util.List $r3;
        java.lang.Object $r4;
        com.ichi2.libanki.Sched$DeckDueTreeNode r5;
        android.content.res.Resources $r6;
        float $f0;
        boolean $z0;
        android.widget.ImageButton $r7, $r8;
        long $l2, $l3;
        java.lang.Long $r9;
        android.view.View$OnClickListener $r10;
        com.ichi2.libanki.Collection $r11;
        com.ichi2.libanki.Decks $r12;
        org.json.JSONObject $r13;
        byte $b4;
        android.widget.TextView $r14;
        java.lang.String[] $r15;
        java.lang.String $r16;
        android.widget.LinearLayout $r17;
        android.view.View$OnLongClickListener $r18;
        com.ichi2.compat.Compat $r19;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: com.ichi2.anki.widgets.DeckAdapter$ViewHolder;

        $i0 := @parameter1: int;

        $r3 = r0.<com.ichi2.anki.widgets.DeckAdapter: java.util.List mDeckList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r4;

        r2 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.RelativeLayout deckLayout>;

        $r6 = virtualinvoke r2.<android.widget.RelativeLayout: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r6.<android.content.res.Resources: float getDimension(int)>(2131427348);

        $i0 = (int) $f0;

        $z0 = r0.<com.ichi2.anki.widgets.DeckAdapter: boolean mHasSubdecks>;

        if $z0 == 0 goto label08;

        $r6 = virtualinvoke r2.<android.widget.RelativeLayout: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r6.<android.content.res.Resources: float getDimension(int)>(2131427347);

        i1 = (int) $f0;

        virtualinvoke r2.<android.widget.RelativeLayout: void setPadding(int,int,int,int)>(i1, 0, $i0, 0);

        $r7 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.ImageButton deckExpander>;

        virtualinvoke $r7.<android.widget.ImageButton: void setVisibility(int)>(0);

        $r7 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.ImageButton deckExpander>;

        $r8 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.ImageButton indentView>;

        specialinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: void setDeckExpander(android.widget.ImageButton,android.widget.ImageButton,com.ichi2.libanki.Sched$DeckDueTreeNode)>($r7, $r8, r5);

     label01:
        $r3 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label09;

        $r7 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.ImageButton deckExpander>;

        $l2 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r7.<android.widget.ImageButton: void setTag(java.lang.Object)>($r9);

        $r7 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.ImageButton deckExpander>;

        $r10 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnClickListener mDeckExpanderClickListener>;

        virtualinvoke $r7.<android.widget.ImageButton: void setOnClickListener(android.view.View$OnClickListener)>($r10);

     label02:
        r2 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.RelativeLayout deckLayout>;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mRowCurrentDrawable>;

        virtualinvoke r2.<android.widget.RelativeLayout: void setBackgroundResource(int)>($i0);

        $l2 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r11 = r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol>;

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r13 = virtualinvoke $r12.<com.ichi2.libanki.Decks: org.json.JSONObject current()>();

        $l3 = virtualinvoke $r13.<org.json.JSONObject: long optLong(java.lang.String)>("id");

        $b4 = $l2 cmp $l3;

        if $b4 != 0 goto label10;

        r2 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.RelativeLayout deckLayout>;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mRowCurrentDrawable>;

        virtualinvoke r2.<android.widget.RelativeLayout: void setBackgroundResource(int)>($i0);

     label03:
        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckName>;

        $r15 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r16 = $r15[0];

        virtualinvoke $r14.<android.widget.TextView: void setText(java.lang.CharSequence)>($r16);

        $r11 = r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.libanki.Collection mCol>;

        $r12 = virtualinvoke $r11.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l2 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $z0 = virtualinvoke $r12.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l2);

        if $z0 == 0 goto label11;

        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckName>;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mDeckNameDynColor>;

        virtualinvoke $r14.<android.widget.TextView: void setTextColor(int)>($i0);

     label04:
        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckNew>;

        $i0 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke $r14.<android.widget.TextView: void setText(java.lang.CharSequence)>($r16);

        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckNew>;

        $i0 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        if $i0 != 0 goto label12;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mZeroCountColor>;

     label05:
        virtualinvoke $r14.<android.widget.TextView: void setTextColor(int)>($i0);

        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckLearn>;

        $i0 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke $r14.<android.widget.TextView: void setText(java.lang.CharSequence)>($r16);

        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckLearn>;

        $i0 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        if $i0 != 0 goto label13;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mZeroCountColor>;

     label06:
        virtualinvoke $r14.<android.widget.TextView: void setTextColor(int)>($i0);

        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckRev>;

        $i0 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke $r14.<android.widget.TextView: void setText(java.lang.CharSequence)>($r16);

        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckRev>;

        $i0 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        if $i0 != 0 goto label14;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mZeroCountColor>;

     label07:
        virtualinvoke $r14.<android.widget.TextView: void setTextColor(int)>($i0);

        r2 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.RelativeLayout deckLayout>;

        $l2 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke r2.<android.widget.RelativeLayout: void setTag(java.lang.Object)>($r9);

        $r17 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.LinearLayout countsLayout>;

        $l2 = r5.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r17.<android.widget.LinearLayout: void setTag(java.lang.Object)>($r9);

        r2 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.RelativeLayout deckLayout>;

        $r10 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnClickListener mDeckClickListener>;

        virtualinvoke r2.<android.widget.RelativeLayout: void setOnClickListener(android.view.View$OnClickListener)>($r10);

        r2 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.RelativeLayout deckLayout>;

        $r18 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnLongClickListener mDeckLongClickListener>;

        virtualinvoke r2.<android.widget.RelativeLayout: void setOnLongClickListener(android.view.View$OnLongClickListener)>($r18);

        $r17 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.LinearLayout countsLayout>;

        $r10 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnClickListener mCountsClickListener>;

        virtualinvoke $r17.<android.widget.LinearLayout: void setOnClickListener(android.view.View$OnClickListener)>($r10);

        return;

     label08:
        $r7 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.ImageButton deckExpander>;

        virtualinvoke $r7.<android.widget.ImageButton: void setVisibility(int)>(8);

        $r6 = virtualinvoke r2.<android.widget.RelativeLayout: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r6.<android.content.res.Resources: float getDimension(int)>(2131427346);

        i1 = (int) $f0;

        virtualinvoke r2.<android.widget.RelativeLayout: void setPadding(int,int,int,int)>(i1, 0, $i0, 0);

        goto label01;

     label09:
        $r7 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.ImageButton deckExpander>;

        virtualinvoke $r7.<android.widget.ImageButton: void setOnClickListener(android.view.View$OnClickListener)>(null);

        goto label02;

     label10:
        $r19 = staticinvoke <com.ichi2.compat.CompatHelper: com.ichi2.compat.Compat getCompat()>();

        r2 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.RelativeLayout deckLayout>;

        interfaceinvoke $r19.<com.ichi2.compat.Compat: void setSelectableBackground(android.view.View)>(r2);

        goto label03;

     label11:
        $r14 = $r1.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: android.widget.TextView deckName>;

        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mDeckNameDefaultColor>;

        virtualinvoke $r14.<android.widget.TextView: void setTextColor(int)>($i0);

        goto label04;

     label12:
        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mNewCountColor>;

        goto label05;

     label13:
        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mLearnCountColor>;

        goto label06;

     label14:
        $i0 = r0.<com.ichi2.anki.widgets.DeckAdapter: int mReviewCountColor>;

        goto label07;
    }
    public volatile android.support.v7.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup, int)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.view.ViewGroup $r1;
        int $i0;
        com.ichi2.anki.widgets.DeckAdapter$ViewHolder $r2;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.view.ViewGroup;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.ichi2.anki.widgets.DeckAdapter: com.ichi2.anki.widgets.DeckAdapter$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)>($r1, $i0);

        return $r2;
    }
    public com.ichi2.anki.widgets.DeckAdapter$ViewHolder onCreateViewHolder(android.view.ViewGroup, int)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.view.ViewGroup $r1;
        int $i0;
        android.view.View $r2;
        android.view.LayoutInflater $r3;
        com.ichi2.anki.widgets.DeckAdapter$ViewHolder $r4;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.view.ViewGroup;

        $i0 := @parameter1: int;

        $r3 = r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.LayoutInflater mLayoutInflater>;

        $r2 = virtualinvoke $r3.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>(2130903077, $r1, 0);

        $r4 = new com.ichi2.anki.widgets.DeckAdapter$ViewHolder;

        specialinvoke $r4.<com.ichi2.anki.widgets.DeckAdapter$ViewHolder: void <init>(com.ichi2.anki.widgets.DeckAdapter,android.view.View)>(r0, $r2);

        return $r4;
    }
    public void setCountsClickListener(android.view.View$OnClickListener)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.view.View$OnClickListener $r1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.view.View$OnClickListener;

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnClickListener mCountsClickListener> = $r1;

        return;
    }
    public void setDeckClickListener(android.view.View$OnClickListener)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.view.View$OnClickListener $r1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.view.View$OnClickListener;

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnClickListener mDeckClickListener> = $r1;

        return;
    }
    public void setDeckExpanderClickListener(android.view.View$OnClickListener)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.view.View$OnClickListener $r1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.view.View$OnClickListener;

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnClickListener mDeckExpanderClickListener> = $r1;

        return;
    }
    public void setDeckLongClickListener(android.view.View$OnLongClickListener)
    {
        com.ichi2.anki.widgets.DeckAdapter r0;
        android.view.View$OnLongClickListener $r1;

        r0 := @this: com.ichi2.anki.widgets.DeckAdapter;

        $r1 := @parameter0: android.view.View$OnLongClickListener;

        r0.<com.ichi2.anki.widgets.DeckAdapter: android.view.View$OnLongClickListener mDeckLongClickListener> = $r1;

        return;
    }
