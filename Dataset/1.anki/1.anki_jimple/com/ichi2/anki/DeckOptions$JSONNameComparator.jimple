com.ichi2.anki.DeckOptions$JSONNameComparator extends java.lang.Object implements java.util.Comparator
final com.ichi2.anki.DeckOptions this$0
    public void <init>(com.ichi2.anki.DeckOptions)
    {
        com.ichi2.anki.DeckOptions$JSONNameComparator r0;
        com.ichi2.anki.DeckOptions $r1;

        r0 := @this: com.ichi2.anki.DeckOptions$JSONNameComparator;

        $r1 := @parameter0: com.ichi2.anki.DeckOptions;

        r0.<com.ichi2.anki.DeckOptions$JSONNameComparator: com.ichi2.anki.DeckOptions this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.ichi2.anki.DeckOptions$JSONNameComparator r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.json.JSONObject $r3, $r4;

        r0 := @this: com.ichi2.anki.DeckOptions$JSONNameComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.json.JSONObject) $r1;

        $r4 = (org.json.JSONObject) $r2;

        $i0 = virtualinvoke r0.<com.ichi2.anki.DeckOptions$JSONNameComparator: int compare(org.json.JSONObject,org.json.JSONObject)>($r3, $r4);

        return $i0;
    }
    public int compare(org.json.JSONObject, org.json.JSONObject)
    {
        com.ichi2.anki.DeckOptions$JSONNameComparator r0;
        org.json.JSONObject $r1, $r2;
        org.json.JSONException r3;
        java.lang.String $r4, $r5;
        int $i0;
        java.lang.RuntimeException $r6;

        r0 := @this: com.ichi2.anki.DeckOptions$JSONNameComparator;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

     label1:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r5 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label2:
        $i0 = virtualinvoke $r4.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r5);

        return $i0;

     label3:
        r3 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label3;
    }
