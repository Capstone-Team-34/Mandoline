com.ichi2.anki.api.NoteInfo extends java.lang.Object
private final java.lang.String[] mFields
private final long mId
private final java.util.Set mTags
    private void <init>(long, java.lang.String[], java.util.Set)
    {
        com.ichi2.anki.api.NoteInfo r0;
        long $l0;
        java.lang.String[] $r1;
        java.util.Set r2;

        r0 := @this: com.ichi2.anki.api.NoteInfo;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ichi2.anki.api.NoteInfo: long mId> = $l0;

        r0.<com.ichi2.anki.api.NoteInfo: java.lang.String[] mFields> = $r1;

        r0.<com.ichi2.anki.api.NoteInfo: java.util.Set mTags> = r2;

        return;
    }
    public void <init>(com.ichi2.anki.api.NoteInfo)
    {
        com.ichi2.anki.api.NoteInfo r0, $r1;
        long $l0;
        java.lang.String[] $r2;
        java.lang.Object $r3;
        java.util.HashSet $r4;
        java.util.Set $r5;

        r0 := @this: com.ichi2.anki.api.NoteInfo;

        $r1 := @parameter0: com.ichi2.anki.api.NoteInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = virtualinvoke $r1.<com.ichi2.anki.api.NoteInfo: long getId()>();

        r0.<com.ichi2.anki.api.NoteInfo: long mId> = $l0;

        $r2 = virtualinvoke $r1.<com.ichi2.anki.api.NoteInfo: java.lang.String[] getFields()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.String[]) $r3;

        r0.<com.ichi2.anki.api.NoteInfo: java.lang.String[] mFields> = $r2;

        $r4 = new java.util.HashSet;

        $r5 = virtualinvoke $r1.<com.ichi2.anki.api.NoteInfo: java.util.Set getTags()>();

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        r0.<com.ichi2.anki.api.NoteInfo: java.util.Set mTags> = $r4;

        return;
    }
    static com.ichi2.anki.api.NoteInfo buildFromCursor(android.database.Cursor)
    {
        android.database.Cursor $r0;
        java.lang.Exception r1;
        java.util.HashSet r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        java.lang.String[] $r4, $r5;
        long $l3;
        java.util.List $r6;
        com.ichi2.anki.api.NoteInfo $r7;

        $r0 := @parameter0: android.database.Cursor;

     label1:
        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_id");

        $i1 = interfaceinvoke $r0.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("flds");

        $i2 = interfaceinvoke $r0.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("tags");

        $r3 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>($i1);

        $r4 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String[] splitFields(java.lang.String)>($r3);

        $l3 = interfaceinvoke $r0.<android.database.Cursor: long getLong(int)>($i0);

     label2:
        r2 = new java.util.HashSet;

     label3:
        $r3 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>($i2);

        $r5 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String[] splitTags(java.lang.String)>($r3);

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke r2.<java.util.HashSet: void <init>(java.util.Collection)>($r6);

     label4:
        $r7 = new com.ichi2.anki.api.NoteInfo;

     label5:
        specialinvoke $r7.<com.ichi2.anki.api.NoteInfo: void <init>(long,java.lang.String[],java.util.Set)>($l3, $r4, r2);

     label6:
        return $r7;

     label7:
        r1 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }
    public java.lang.String[] getFields()
    {
        com.ichi2.anki.api.NoteInfo r0;
        java.lang.String[] r1;

        r0 := @this: com.ichi2.anki.api.NoteInfo;

        r1 = r0.<com.ichi2.anki.api.NoteInfo: java.lang.String[] mFields>;

        return r1;
    }
    public long getId()
    {
        com.ichi2.anki.api.NoteInfo r0;
        long l0;

        r0 := @this: com.ichi2.anki.api.NoteInfo;

        l0 = r0.<com.ichi2.anki.api.NoteInfo: long mId>;

        return l0;
    }
    public java.lang.String getKey()
    {
        com.ichi2.anki.api.NoteInfo r0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.anki.api.NoteInfo;

        $r1 = virtualinvoke r0.<com.ichi2.anki.api.NoteInfo: java.lang.String[] getFields()>();

        $r2 = $r1[0];

        return $r2;
    }
    public java.util.Set getTags()
    {
        com.ichi2.anki.api.NoteInfo r0;
        java.util.Set r1;

        r0 := @this: com.ichi2.anki.api.NoteInfo;

        r1 = r0.<com.ichi2.anki.api.NoteInfo: java.util.Set mTags>;

        return r1;
    }
