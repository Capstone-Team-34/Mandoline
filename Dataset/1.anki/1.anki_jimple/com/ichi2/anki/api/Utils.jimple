com.ichi2.anki.api.Utils extends java.lang.Object
private static final java.util.regex.Pattern htmlEntitiesPattern
private static final java.util.regex.Pattern imgPattern
private static final java.util.regex.Pattern scriptPattern
private static final java.util.regex.Pattern stylePattern
private static final java.util.regex.Pattern tagPattern
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?s)<style.*?>.*?</style>");

        <com.ichi2.anki.api.Utils: java.util.regex.Pattern stylePattern> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?s)<script.*?>.*?</script>");

        <com.ichi2.anki.api.Utils: java.util.regex.Pattern scriptPattern> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("<.*?>");

        <com.ichi2.anki.api.Utils: java.util.regex.Pattern tagPattern> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("<img src=[\\\"\']?([^\\\"\'>]+)[\\\"\']? ?/?>");

        <com.ichi2.anki.api.Utils: java.util.regex.Pattern imgPattern> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&#?\\w+;");

        <com.ichi2.anki.api.Utils: java.util.regex.Pattern htmlEntitiesPattern> = $r0;

        return;
    }
    void <init>()
    {
        com.ichi2.anki.api.Utils r0;

        r0 := @this: com.ichi2.anki.api.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.lang.String entsToTxt(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        android.text.Spanned $r4;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&nbsp;", " ");

        $r2 = <com.ichi2.anki.api.Utils: java.util.regex.Pattern htmlEntitiesPattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        r0 = new java.lang.StringBuffer;

        specialinvoke r0.<java.lang.StringBuffer: void <init>()>();

     label1:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group()>();

        $r4 = staticinvoke <android.text.Html: android.text.Spanned fromHtml(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r0, $r1);

        goto label1;

     label2:
        virtualinvoke $r3.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r0);

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }
    static java.lang.Long fieldChecksum(java.lang.String)
    {
        java.math.BigInteger r0;
        java.lang.Exception r1;
        java.lang.String r2, $r3;
        java.security.MessageDigest $r4;
        byte[] $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r6;
        java.lang.Long $r7;
        java.lang.IllegalStateException $r8;

        $r3 := @parameter0: java.lang.String;

        $r3 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String stripHTMLMedia(java.lang.String)>($r3);

     label01:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA1");

        $r5 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r5);

     label02:
        r0 = new java.math.BigInteger;

     label03:
        specialinvoke r0.<java.math.BigInteger: void <init>(int,byte[])>(1, $r5);

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString(int)>(16);

     label04:
        r2 = $r3;

     label05:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

     label06:
        if $i0 >= 40 goto label11;

        r2 = "0000000000000000000000000000000000000000";

        $r6 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

     label08:
        $i0 = $i0 - $i1;

     label09:
        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        r2 = $r3;

     label11:
        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 8);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>($r3, 16);

     label12:
        return $r7;

     label13:
        r1 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error making field checksum with SHA1 algorithm and UTF-8 encoding", r1);

        throw $r8;

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }
    static java.lang.String joinFields(java.lang.String[])
    {
        java.lang.String[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.String[];

        if $r0 == null goto label1;

        $r1 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>("\u001f", $r0);

        return $r1;

     label1:
        return null;
    }
    static java.lang.String joinTags(java.util.Set)
    {
        java.util.Set r0;
        boolean $z0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        java.lang.String r3;

        r0 := @parameter0: java.util.Set;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return "";

     label2:
        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "_");

        goto label3;

     label4:
        r3 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" ", r0);

        return r3;
    }
    static java.lang.String[] splitFields(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\x1f", -1);

        return $r1;

     label1:
        return null;
    }
    static java.lang.String[] splitTags(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        return $r1;
    }
    private static java.lang.String stripHTML(java.lang.String)
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = <com.ichi2.anki.api.Utils: java.util.regex.Pattern stylePattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $r1 = <com.ichi2.anki.api.Utils: java.util.regex.Pattern scriptPattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $r1 = <com.ichi2.anki.api.Utils: java.util.regex.Pattern tagPattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $r0 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String entsToTxt(java.lang.String)>($r0);

        return $r0;
    }
    private static java.lang.String stripHTMLMedia(java.lang.String)
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = <com.ichi2.anki.api.Utils: java.util.regex.Pattern imgPattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(" $1 ");

        $r0 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String stripHTML(java.lang.String)>($r0);

        return $r0;
    }
