com.ichi2.anki.api.AddContentApi extends java.lang.Object
public static final long DEFAULT_DECK_ID
private static final int DEFAULT_PROVIDER_SPEC_VALUE
private static final java.lang.String[] PROJECTION
private static final java.lang.String PROVIDER_SPEC_META_DATA_KEY
public static final java.lang.String READ_WRITE_PERMISSION
private static final java.lang.String TEST_TAG
private final android.content.Context mContext
private final android.content.ContentResolver mResolver
    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "_id";

        $r0[1] = "flds";

        $r0[2] = "tags";

        <com.ichi2.anki.api.AddContentApi: java.lang.String[] PROJECTION> = $r0;

        return;
    }
    public void <init>(android.content.Context)
    {
        com.ichi2.anki.api.AddContentApi r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<com.ichi2.anki.api.AddContentApi: android.content.Context mContext> = $r1;

        $r1 = r0.<com.ichi2.anki.api.AddContentApi: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver> = $r2;

        return;
    }
    static java.lang.String[] access$200()
    {
        java.lang.String[] r0;

        r0 = <com.ichi2.anki.api.AddContentApi: java.lang.String[] PROJECTION>;

        return r0;
    }
    static android.content.ContentResolver access$300(com.ichi2.anki.api.AddContentApi)
    {
        com.ichi2.anki.api.AddContentApi $r0;
        android.content.ContentResolver r1;

        $r0 := @parameter0: com.ichi2.anki.api.AddContentApi;

        r1 = $r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        return r1;
    }
    static android.net.Uri access$400(com.ichi2.anki.api.AddContentApi, long, android.content.ContentValues)
    {
        com.ichi2.anki.api.AddContentApi $r0;
        long $l0;
        android.content.ContentValues $r1;
        android.net.Uri $r2;

        $r0 := @parameter0: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter1: long;

        $r1 := @parameter2: android.content.ContentValues;

        $r2 = specialinvoke $r0.<com.ichi2.anki.api.AddContentApi: android.net.Uri addNoteForContentValues(long,android.content.ContentValues)>($l0, $r1);

        return $r2;
    }
    private android.net.Uri addNoteForContentValues(long, android.content.ContentValues)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        android.content.ContentValues $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3, $r4;
        android.database.Cursor $r5;
        boolean $z0;
        int $i1;
        java.lang.String $r6;
        java.lang.Long $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 := @parameter1: android.content.ContentValues;

        $r2 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r3 = <com.ichi2.anki.FlashCardsContract$Note: android.net.Uri CONTENT_URI>;

        $r3 = virtualinvoke $r2.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r3, $r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r3, "cards");

        $r2 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r5 = virtualinvoke $r2.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r4, null, null, null, null);

        if $r5 == null goto label8;

     label2:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label7;

     label4:
        $i1 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndex(java.lang.String)>("ord");

        $r6 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i1);

        $r1 = new android.content.ContentValues;

        specialinvoke $r1.<android.content.ContentValues: void <init>()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("deck_id", $r7);

        $r4 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r3, "cards");

        $r4 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r4, $r6);

        $r2 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        virtualinvoke $r2.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r4, $r1, null, null);

     label5:
        goto label2;

     label6:
        $r8 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r8;

     label7:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $r3;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    private android.net.Uri addNoteInternal(long, long, java.lang.String[], java.util.Set)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0, $l1;
        java.lang.String[] $r1;
        java.util.Set r2;
        android.content.ContentValues r3;
        java.lang.Long $r4;
        java.lang.String $r5;
        android.net.Uri $r6;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.util.Set;

        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("mid", $r4);

        $r5 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String joinFields(java.lang.String[])>($r1);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("flds", $r5);

        if r2 == null goto label1;

        $r5 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String joinTags(java.util.Set)>(r2);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tags", $r5);

     label1:
        $r6 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: android.net.Uri addNoteForContentValues(long,android.content.ContentValues)>($l1, r3);

        return $r6;
    }
    public static java.lang.String getAnkiDroidPackageName(android.content.Context)
    {
        android.content.Context $r0;
        android.content.pm.PackageManager $r1;
        android.content.pm.ProviderInfo $r2;
        java.lang.String r3;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r2 = virtualinvoke $r1.<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>("com.ichi2.anki.flashcards", 0);

        if $r2 == null goto label1;

        r3 = $r2.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        return r3;

     label1:
        return null;
    }
    private com.ichi2.anki.api.AddContentApi$Compat getCompat()
    {
        com.ichi2.anki.api.AddContentApi r0;
        int $i0;
        com.ichi2.anki.api.AddContentApi$CompatV1 $r1;
        com.ichi2.anki.api.AddContentApi$CompatV2 $r2;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $i0 = virtualinvoke r0.<com.ichi2.anki.api.AddContentApi: int getApiHostSpecVersion()>();

        if $i0 >= 2 goto label1;

        $r1 = new com.ichi2.anki.api.AddContentApi$CompatV1;

        specialinvoke $r1.<com.ichi2.anki.api.AddContentApi$CompatV1: void <init>(com.ichi2.anki.api.AddContentApi,com.ichi2.anki.api.AddContentApi$1)>(r0, null);

        return $r1;

     label1:
        $r2 = new com.ichi2.anki.api.AddContentApi$CompatV2;

        specialinvoke $r2.<com.ichi2.anki.api.AddContentApi$CompatV2: void <init>(com.ichi2.anki.api.AddContentApi,com.ichi2.anki.api.AddContentApi$1)>(r0, null);

        return $r2;
    }
    private boolean hasReadWritePermission()
    {
        com.ichi2.anki.api.AddContentApi r0;
        android.content.Context $r1;
        int $i0, $i1;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 = r0.<com.ichi2.anki.api.AddContentApi: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $i0 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("com.ichi2.anki.permission.READ_WRITE_DATABASE", $i0, $i1);

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean updateNote(long, java.lang.String[], java.util.Set)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        java.lang.String[] $r1;
        java.util.Set r2;
        android.content.ContentValues r3;
        android.net.Uri $r4;
        android.net.Uri$Builder $r5;
        java.lang.String $r6;
        android.content.ContentResolver $r7;
        int $i1;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.util.Set;

        $r4 = <com.ichi2.anki.FlashCardsContract$Note: android.net.Uri CONTENT_URI>;

        $r5 = virtualinvoke $r4.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r5 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>($r6);

        $r4 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

        if $r1 == null goto label1;

        $r6 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String joinFields(java.lang.String[])>($r1);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("flds", $r6);

     label1:
        if r2 == null goto label2;

        $r6 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String joinTags(java.util.Set)>(r2);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tags", $r6);

     label2:
        $r7 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $i1 = virtualinvoke $r7.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r4, r3, null, null);

        if $i1 <= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public java.lang.Long addNewBasic2Model(java.lang.String)
    {
        com.ichi2.anki.api.AddContentApi r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r3, $r4, $r5;
        java.lang.Long $r6;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 := @parameter0: java.lang.String;

        $r2 = <com.ichi2.anki.api.Basic2Model: java.lang.String[] FIELDS>;

        $r3 = <com.ichi2.anki.api.Basic2Model: java.lang.String[] CARD_NAMES>;

        $r4 = <com.ichi2.anki.api.Basic2Model: java.lang.String[] QFMT>;

        $r5 = <com.ichi2.anki.api.Basic2Model: java.lang.String[] AFMT>;

        $r6 = virtualinvoke r0.<com.ichi2.anki.api.AddContentApi: java.lang.Long addNewCustomModel(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.Long,java.lang.Integer)>($r1, $r2, $r3, $r4, $r5, null, null, null);

        return $r6;
    }
    public java.lang.Long addNewBasicModel(java.lang.String)
    {
        com.ichi2.anki.api.AddContentApi r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r3, $r4, $r5;
        java.lang.Long $r6;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 := @parameter0: java.lang.String;

        $r2 = <com.ichi2.anki.api.BasicModel: java.lang.String[] FIELDS>;

        $r3 = <com.ichi2.anki.api.BasicModel: java.lang.String[] CARD_NAMES>;

        $r4 = <com.ichi2.anki.api.BasicModel: java.lang.String[] QFMT>;

        $r5 = <com.ichi2.anki.api.BasicModel: java.lang.String[] AFMT>;

        $r6 = virtualinvoke r0.<com.ichi2.anki.api.AddContentApi: java.lang.Long addNewCustomModel(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.Long,java.lang.Integer)>($r1, $r2, $r3, $r4, $r5, null, null, null);

        return $r6;
    }
    public java.lang.Long addNewCustomModel(java.lang.String, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.lang.Long, java.lang.Integer)
    {
        com.ichi2.anki.api.AddContentApi r0;
        java.lang.String $r1, $r6;
        java.lang.String[] $r2, $r3, $r4, $r5;
        java.lang.Long $r7;
        java.lang.Integer $r8, $r11;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r9;
        android.content.ContentValues r10;
        android.content.ContentResolver $r12;
        android.net.Uri $r13, $r14, $r15;
        long $l2;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String[];

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String[];

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.Long;

        $r8 := @parameter7: java.lang.Integer;

        $i0 = lengthof $r4;

        $i1 = lengthof $r3;

        if $i0 != $i1 goto label1;

        $i0 = lengthof $r5;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label2;

     label1:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cards, qfmt, and afmt arrays must all be same length");

        throw $r9;

     label2:
        r10 = new android.content.ContentValues;

        specialinvoke r10.<android.content.ContentValues: void <init>()>();

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r1);

        $r1 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String joinFields(java.lang.String[])>($r2);

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("field_names", $r1);

        $i0 = lengthof $r3;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("num_cards", $r11);

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("css", $r6);

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("deck_id", $r7);

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("sort_field_index", $r8);

        $r12 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r13 = <com.ichi2.anki.FlashCardsContract$Model: android.net.Uri CONTENT_URI>;

        $r13 = virtualinvoke $r12.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r13, r10);

        if $r13 != null goto label3;

        return null;

     label3:
        $r14 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r13, "templates");

        $i0 = 0;

     label4:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label5;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r15 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r14, $r1);

        r10 = new android.content.ContentValues;

        specialinvoke r10.<android.content.ContentValues: void <init>()>();

        $r1 = $r3[$i0];

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("card_template_name", $r1);

        $r1 = $r4[$i0];

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("question_format", $r1);

        $r1 = $r5[$i0];

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("answer_format", $r1);

        $r1 = $r5[$i0];

        virtualinvoke r10.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("answer_format", $r1);

        $r12 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        virtualinvoke $r12.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r15, r10, null, null);

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r1 = virtualinvoke $r13.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        return $r7;
    }
    public java.lang.Long addNewDeck(java.lang.String)
    {
        com.ichi2.anki.api.AddContentApi r0;
        java.lang.String $r1;
        android.content.ContentValues r2;
        android.net.Uri $r3;
        android.content.ContentResolver $r4;
        long $l0;
        java.lang.Long $r5;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 := @parameter0: java.lang.String;

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("deck_name", $r1);

        $r4 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r3 = <com.ichi2.anki.FlashCardsContract$Deck: android.net.Uri CONTENT_ALL_URI>;

        $r3 = virtualinvoke $r4.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r3, r2);

        if $r3 == null goto label1;

        $r1 = virtualinvoke $r3.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r5;

     label1:
        return null;
    }
    public java.lang.Long addNote(long, long, java.lang.String[], java.util.Set)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0, $l1;
        java.lang.String[] $r1;
        java.util.Set r2;
        android.net.Uri $r3;
        java.lang.String $r4;
        java.lang.Long $r5;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.util.Set;

        $r3 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: android.net.Uri addNoteInternal(long,long,java.lang.String[],java.util.Set)>($l0, $l1, $r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r5;
    }
    public int addNotes(long, long, java.util.List, java.util.List)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0, $l1;
        java.util.List r1, r2;
        java.util.ArrayList r3;
        android.content.ContentValues r4;
        int $i2, $i3;
        java.lang.IllegalArgumentException $r5;
        java.lang.Long $r6;
        java.lang.Object $r7;
        java.lang.String[] $r8;
        java.lang.String $r9;
        java.util.Set $r10;
        boolean $z0;
        com.ichi2.anki.api.AddContentApi$Compat $r11;
        android.content.ContentValues[] $r12;
        java.lang.Object[] $r13;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: java.util.List;

        if r2 == null goto label1;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 == $i3 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fieldsList and tagsList different length");

        throw $r5;

     label1:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $i2 = 0;

     label2:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 >= $i3 goto label4;

        r4 = new android.content.ContentValues;

        specialinvoke r4.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("mid", $r6);

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r8 = (java.lang.String[]) $r7;

        $r9 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String joinFields(java.lang.String[])>($r8);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("flds", $r9);

        if r2 == null goto label3;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i2);

        if $r7 == null goto label3;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r10 = (java.util.Set) $r7;

        $r9 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String joinTags(java.util.Set)>($r10);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tags", $r9);

     label3:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4);

        $i2 = $i2 + 1;

        goto label2;

     label4:
        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        return 0;

     label5:
        $r11 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: com.ichi2.anki.api.AddContentApi$Compat getCompat()>();

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        $r12 = newarray (android.content.ContentValues)[$i2];

        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r12 = (android.content.ContentValues[]) $r13;

        $i2 = interfaceinvoke $r11.<com.ichi2.anki.api.AddContentApi$Compat: int insertNotes(long,android.content.ContentValues[])>($l1, $r12);

        return $i2;
    }
    public android.util.SparseArray findDuplicateNotes(long, java.util.List)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        java.util.List r1;
        com.ichi2.anki.api.AddContentApi$Compat $r2;
        android.util.SparseArray $r3;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        r1 := @parameter1: java.util.List;

        $r2 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: com.ichi2.anki.api.AddContentApi$Compat getCompat()>();

        $r3 = interfaceinvoke $r2.<com.ichi2.anki.api.AddContentApi$Compat: android.util.SparseArray findDuplicateNotes(long,java.util.List)>($l0, r1);

        return $r3;
    }
    public java.util.List findDuplicateNotes(long, java.lang.String)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        java.lang.String $r1;
        com.ichi2.anki.api.AddContentApi$Compat $r2;
        java.util.List $r3;
        android.util.SparseArray $r4;
        int $i1;
        java.lang.Object $r5;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: com.ichi2.anki.api.AddContentApi$Compat getCompat()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r4 = interfaceinvoke $r2.<com.ichi2.anki.api.AddContentApi$Compat: android.util.SparseArray findDuplicateNotes(long,java.util.List)>($l0, $r3);

        $i1 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if $i1 != 0 goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(0);

        $r3 = (java.util.List) $r5;

        return $r3;
    }
    public int getApiHostSpecVersion()
    {
        com.ichi2.anki.api.AddContentApi r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        android.content.pm.ProviderInfo $r3;
        android.os.Bundle $r4;
        boolean $z0;
        int $i0;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 = r0.<com.ichi2.anki.api.AddContentApi: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>("com.ichi2.anki.flashcards", 128);

        if $r3 != null goto label1;

        return -1;

     label1:
        $r4 = $r3.<android.content.pm.ProviderInfo: android.os.Bundle metaData>;

        if $r4 == null goto label2;

        $r4 = $r3.<android.content.pm.ProviderInfo: android.os.Bundle metaData>;

        $z0 = virtualinvoke $r4.<android.os.Bundle: boolean containsKey(java.lang.String)>("com.ichi2.anki.provider.spec");

        if $z0 == 0 goto label2;

        $r4 = $r3.<android.content.pm.ProviderInfo: android.os.Bundle metaData>;

        $i0 = virtualinvoke $r4.<android.os.Bundle: int getInt(java.lang.String)>("com.ichi2.anki.provider.spec");

        return $i0;

     label2:
        return 1;
    }
    public long getCurrentModelId()
    {
        com.ichi2.anki.api.AddContentApi r0;
        android.net.Uri $r1;
        android.content.ContentResolver $r2;
        android.database.Cursor $r3;
        int $i0;
        long $l1;
        java.lang.Throwable $r4;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 = <com.ichi2.anki.FlashCardsContract$Model: android.net.Uri CONTENT_URI>;

        $r1 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r1, "current");

        $r2 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r3 = virtualinvoke $r2.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r1, null, null, null, null);

        if $r3 != null goto label1;

        return -1L;

     label1:
        interfaceinvoke $r3.<android.database.Cursor: boolean moveToFirst()>();

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        $l1 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i0);

     label2:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return $l1;

     label3:
        $r4 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.util.Map getDeckList()
    {
        com.ichi2.anki.api.AddContentApi r0;
        android.net.Uri $r1;
        java.util.HashMap r2;
        android.content.ContentResolver $r3;
        android.database.Cursor $r4;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.String $r5;
        java.lang.Long $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r3 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r1 = <com.ichi2.anki.FlashCardsContract$Deck: android.net.Uri CONTENT_ALL_URI>;

        $r4 = virtualinvoke $r3.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r1, null, null, null, null);

        if $r4 != null goto label1;

        return null;

     label1:
        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

     label2:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label7;

     label4:
        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndex(java.lang.String)>("deck_id");

        $l1 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndex(java.lang.String)>("deck_name");

        $r5 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

     label5:
        goto label2;

     label6:
        $r7 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        throw $r7;

     label7:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public java.lang.String getDeckName(java.lang.Long)
    {
        com.ichi2.anki.api.AddContentApi r0;
        java.lang.Long $r1, $r7;
        java.util.Map $r2;
        long $l0;
        byte $b1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;
        java.lang.String $r8;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 := @parameter0: java.lang.Long;

        $r2 = virtualinvoke r0.<com.ichi2.anki.api.AddContentApi: java.util.Map getDeckList()>();

        if $r1 == null goto label2;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label2;

        if $r2 == null goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Long) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Long: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r5;

        return $r8;

     label2:
        return null;
    }
    public java.lang.String[] getFieldList(long)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        android.net.Uri $r1;
        java.lang.String $r2;
        android.content.ContentResolver $r3;
        android.database.Cursor $r4;
        java.lang.String[] r5;
        boolean $z0;
        int $i1;
        java.lang.Throwable $r6;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 = <com.ichi2.anki.FlashCardsContract$Model: android.net.Uri CONTENT_URI>;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r1 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r1, $r2);

        $r3 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r4 = virtualinvoke $r3.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r1, null, null, null, null);

        if $r4 != null goto label1;

        return null;

     label1:
        r5 = null;

     label2:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label5;

     label4:
        $i1 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndex(java.lang.String)>("field_names");

        $r2 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i1);

        r5 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String[] splitFields(java.lang.String)>($r2);

     label5:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return r5;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public java.util.Map getModelList()
    {
        com.ichi2.anki.api.AddContentApi r0;
        java.util.Map $r1;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 = virtualinvoke r0.<com.ichi2.anki.api.AddContentApi: java.util.Map getModelList(int)>(1);

        return $r1;
    }
    public java.util.Map getModelList(int)
    {
        com.ichi2.anki.api.AddContentApi r0;
        int $i0, i1;
        android.net.Uri $r1;
        java.util.HashMap r2;
        android.content.ContentResolver $r3;
        android.database.Cursor $r4;
        boolean $z0;
        long $l2;
        java.lang.String $r5, $r6;
        java.lang.String[] $r7;
        java.lang.Long $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $i0 := @parameter0: int;

        $r3 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r1 = <com.ichi2.anki.FlashCardsContract$Model: android.net.Uri CONTENT_URI>;

        $r4 = virtualinvoke $r3.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r1, null, null, null, null);

        if $r4 != null goto label1;

        return null;

     label1:
        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

     label2:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label9;

     label4:
        i1 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        $l2 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>(i1);

        i1 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndex(java.lang.String)>("name");

        $r5 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>(i1);

        i1 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndex(java.lang.String)>("field_names");

        $r6 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r7 = staticinvoke <com.ichi2.anki.api.Utils: java.lang.String[] splitFields(java.lang.String)>($r6);

        i1 = lengthof $r7;

     label5:
        if i1 < $i0 goto label2;

     label6:
        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r5);

     label7:
        goto label2;

     label8:
        $r9 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        throw $r9;

     label9:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
    public java.lang.String getModelName(java.lang.Long)
    {
        com.ichi2.anki.api.AddContentApi r0;
        java.lang.Long $r1, $r7;
        long $l0;
        byte $b1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;
        java.lang.String $r8;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r1 := @parameter0: java.lang.Long;

        if $r1 == null goto label2;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label2;

        $r2 = virtualinvoke r0.<com.ichi2.anki.api.AddContentApi: java.util.Map getModelList()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Long) $r5;

        $z0 = virtualinvoke $r7.<java.lang.Long: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r5;

        return $r8;

     label2:
        return null;
    }
    public com.ichi2.anki.api.NoteInfo getNote(long)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        android.net.Uri $r1;
        java.lang.String $r2;
        android.content.ContentResolver $r3;
        java.lang.String[] $r4;
        android.database.Cursor $r5;
        boolean $z0;
        com.ichi2.anki.api.NoteInfo $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 = <com.ichi2.anki.FlashCardsContract$Note: android.net.Uri CONTENT_URI>;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r1 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r1, $r2);

        $r3 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r4 = <com.ichi2.anki.api.AddContentApi: java.lang.String[] PROJECTION>;

        $r5 = virtualinvoke $r3.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r1, $r4, null, null, null);

        if $r5 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 != 0 goto label3;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return null;

     label3:
        $r6 = staticinvoke <com.ichi2.anki.api.NoteInfo: com.ichi2.anki.api.NoteInfo buildFromCursor(android.database.Cursor)>($r5);

     label4:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $r6;

     label5:
        $r7 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public int getNoteCount(long)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        com.ichi2.anki.api.AddContentApi$Compat $r1;
        android.database.Cursor $r2;
        int $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: com.ichi2.anki.api.AddContentApi$Compat getCompat()>();

        $r2 = interfaceinvoke $r1.<com.ichi2.anki.api.AddContentApi$Compat: android.database.Cursor queryNotes(long)>($l0);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i1 = interfaceinvoke $r2.<android.database.Cursor: int getCount()>();

     label2:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return $i1;

     label3:
        $r3 := @caughtexception;

        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.lang.String getSelectedDeckName()
    {
        com.ichi2.anki.api.AddContentApi r0;
        android.net.Uri $r1;
        android.content.ContentResolver $r2;
        android.database.Cursor $r3;
        java.lang.String r4;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $r2 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r1 = <com.ichi2.anki.FlashCardsContract$Deck: android.net.Uri CONTENT_SELECTED_URI>;

        $r3 = virtualinvoke $r2.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r1, null, null, null, null);

        if $r3 != null goto label1;

        return null;

     label1:
        r4 = null;

     label2:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label5;

     label4:
        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getColumnIndex(java.lang.String)>("deck_name");

        r4 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label5:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return r4;

     label6:
        $r5 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public java.util.Map previewNewNote(long, java.lang.String[])
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        java.lang.String[] $r1;
        java.util.HashMap r2, r6;
        int $i1;
        boolean $z0;
        java.lang.SecurityException $r3;
        java.util.Set $r4;
        android.net.Uri $r5, $r7;
        android.content.ContentResolver $r8;
        android.database.Cursor $r9;
        java.lang.String $r10, $r11, $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String[];

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 23 goto label1;

        $z0 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: boolean hasReadWritePermission()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("previewNewNote requires full read-write-permission");

        throw $r3;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("PREVIEW_NOTE");

        $r5 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: android.net.Uri addNoteInternal(long,long,java.lang.String[],java.util.Set)>($l0, 1L, $r1, $r4);

        r6 = new java.util.HashMap;

        specialinvoke r6.<java.util.HashMap: void <init>()>();

        $r7 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r5, "cards");

        $r8 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        $r9 = virtualinvoke $r8.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r7, null, null, null, null);

        if $r9 != null goto label2;

        return null;

     label2:
        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label7;

     label4:
        $i1 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("card_name");

        $r10 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i1);

        $i1 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("question");

        $r11 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i1);

        $i1 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("answer");

        $r12 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i1);

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("q", $r11);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", $r12);

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r2);

     label5:
        goto label2;

     label6:
        $r13 := @caughtexception;

        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        throw $r13;

     label7:
        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        $r8 = r0.<com.ichi2.anki.api.AddContentApi: android.content.ContentResolver mResolver>;

        virtualinvoke $r8.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r5, null, null);

        return r6;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public boolean updateNoteFields(long, java.lang.String[])
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        java.lang.String[] $r1;
        boolean $z0;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String[];

        $z0 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: boolean updateNote(long,java.lang.String[],java.util.Set)>($l0, $r1, null);

        return $z0;
    }
    public boolean updateNoteTags(long, java.util.Set)
    {
        com.ichi2.anki.api.AddContentApi r0;
        long $l0;
        java.util.Set r1;
        boolean $z0;

        r0 := @this: com.ichi2.anki.api.AddContentApi;

        $l0 := @parameter0: long;

        r1 := @parameter1: java.util.Set;

        $z0 = specialinvoke r0.<com.ichi2.anki.api.AddContentApi: boolean updateNote(long,java.lang.String[],java.util.Set)>($l0, null, r1);

        return $z0;
    }
