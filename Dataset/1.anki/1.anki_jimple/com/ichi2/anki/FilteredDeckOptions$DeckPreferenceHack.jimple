com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack extends java.lang.Object implements android.content.SharedPreferences
public java.util.List listeners
private java.util.Map mSummaries
private java.util.Map mValues
final com.ichi2.anki.FilteredDeckOptions this$0
    public void <init>(com.ichi2.anki.FilteredDeckOptions)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        com.ichi2.anki.FilteredDeckOptions $r1;
        java.util.HashMap $r2;
        java.util.LinkedList $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: com.ichi2.anki.FilteredDeckOptions;

        r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mSummaries> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.List listeners> = $r3;

        virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: void cacheValues()>();

        return;
    }
    static java.util.Map access$100(com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        r1 = $r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        return r1;
    }
    static java.util.Map access$500(com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        r1 = $r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mSummaries>;

        return r1;
    }
    protected void cacheValues()
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        org.json.JSONException r1;
        java.lang.Object[] $r2;
        com.ichi2.anki.FilteredDeckOptions $r3;
        org.json.JSONObject $r4;
        org.json.JSONArray $r5;
        java.util.Map $r6;
        java.lang.String $r7;
        boolean $z0;
        java.lang.RuntimeException $r8;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("cacheValues()", $r2);

        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label01:
        $r4 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r3);

        $r5 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("terms");

        $r5 = virtualinvoke $r5.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(0);

     label02:
        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label03:
        $r7 = virtualinvoke $r5.<org.json.JSONArray: java.lang.String getString(int)>(0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("search", $r7);

     label04:
        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label05:
        $r7 = virtualinvoke $r5.<org.json.JSONArray: java.lang.String getString(int)>(1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("limit", $r7);

     label06:
        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label07:
        $r7 = virtualinvoke $r5.<org.json.JSONArray: java.lang.String getString(int)>(2);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("order", $r7);

     label08:
        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label09:
        $r4 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r3);

        $r5 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>("delays");

     label10:
        if $r5 == null goto label17;

        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label11:
        $r7 = staticinvoke <com.ichi2.preferences.StepsPreference: java.lang.String convertFromJSON(org.json.JSONArray)>($r5);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("steps", $r7);

     label12:
        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label13:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("stepsOn", $r7);

     label14:
        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label15:
        $r4 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r3);

        $z0 = virtualinvoke $r4.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("resched");

        $r7 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resched", $r7);

     label16:
        return;

     label17:
        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label18:
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("steps", "1 10");

     label19:
        $r6 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label20:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("stepsOn", $r7);

     label21:
        goto label14;

     label22:
        r1 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

        catch org.json.JSONException from label01 to label02 with label22;
        catch org.json.JSONException from label03 to label04 with label22;
        catch org.json.JSONException from label05 to label06 with label22;
        catch org.json.JSONException from label07 to label08 with label22;
        catch org.json.JSONException from label09 to label10 with label22;
        catch org.json.JSONException from label11 to label12 with label22;
        catch org.json.JSONException from label13 to label14 with label22;
        catch org.json.JSONException from label15 to label16 with label22;
        catch org.json.JSONException from label18 to label19 with label22;
        catch org.json.JSONException from label20 to label21 with label22;
    }
    public boolean contains(java.lang.String)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public volatile android.content.SharedPreferences$Editor edit()
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor $r1;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 = virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor edit()>();

        return $r1;
    }
    public com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor edit()
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor $r1;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 = new com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        specialinvoke $r1.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: void <init>(com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack)>(r0);

        return $r1;
    }
    public java.util.Map getAll()
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.util.Map r1;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        r1 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        return r1;
    }
    public boolean getBoolean(java.lang.String, boolean)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }
    public float getFloat(java.lang.String, float)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        float $f0;
        java.lang.Float $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r1);

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        return $f0;
    }
    public int getInt(java.lang.String, int)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r1);

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    public long getLong(java.lang.String, long)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        long $l0;
        java.lang.Long $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r1);

        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        return $l0;
    }
    public java.lang.String getString(java.lang.String, java.lang.String)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, r2;
        java.lang.Object[] $r3;
        java.util.Map $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r1;

        $r3[1] = r2;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("getString(key=%s, defValue=%s)", $r3);

        $r4 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return r2;

     label1:
        $r4 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r5;

        return $r1;
    }
    public java.util.Set getStringSet(java.lang.String, java.util.Set)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1;
        java.util.Set r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        return null;
    }
    public void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        android.content.SharedPreferences$OnSharedPreferenceChangeListener $r1;
        java.util.List $r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: android.content.SharedPreferences$OnSharedPreferenceChangeListener;

        $r2 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack r0;
        android.content.SharedPreferences$OnSharedPreferenceChangeListener $r1;
        java.util.List $r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: android.content.SharedPreferences$OnSharedPreferenceChangeListener;

        $r2 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return;
    }
