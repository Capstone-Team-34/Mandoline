com.ichi2.anki.UIUtils$1 extends com.ichi2.async.DeckTask$TaskListener
    void <init>()
    {
        com.ichi2.anki.UIUtils$1 r0;

        r0 := @this: com.ichi2.anki.UIUtils$1;

        specialinvoke r0.<com.ichi2.async.DeckTask$TaskListener: void <init>()>();

        return;
    }
    public void onCancelled()
    {
        com.ichi2.anki.UIUtils$1 r0;

        r0 := @this: com.ichi2.anki.UIUtils$1;

        return;
    }
    public void onPostExecute(com.ichi2.async.DeckTask$TaskData)
    {
        com.ichi2.anki.UIUtils$1 r0;
        com.ichi2.async.DeckTask$TaskData $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.ichi2.anki.UIUtils$1;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("saveCollectionInBackground: finished", $r2);

        return;
    }
    public void onPreExecute()
    {
        com.ichi2.anki.UIUtils$1 r0;
        java.lang.Object[] $r1;

        r0 := @this: com.ichi2.anki.UIUtils$1;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("saveCollectionInBackground: start", $r1);

        return;
    }
    public transient void onProgressUpdate(com.ichi2.async.DeckTask$TaskData[])
    {
        com.ichi2.anki.UIUtils$1 r0;
        com.ichi2.async.DeckTask$TaskData[] $r1;

        r0 := @this: com.ichi2.anki.UIUtils$1;

        $r1 := @parameter0: com.ichi2.async.DeckTask$TaskData[];

        return;
    }
