com.ichi2.anki.AnkiFont extends java.lang.Object
private static java.util.Set corruptFonts
private static final java.lang.String fAssetPathPrefix
private java.util.List mAttributes
private java.lang.String mFamily
private java.lang.Boolean mIsDefault
private java.lang.Boolean mIsOverride
private java.lang.String mName
private java.lang.String mPath
    static void <clinit>()
    {
        java.util.HashSet $r0;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <com.ichi2.anki.AnkiFont: java.util.Set corruptFonts> = $r0;

        return;
    }
    private void <init>(java.lang.String, java.lang.String, java.util.List, java.lang.String)
    {
        com.ichi2.anki.AnkiFont r0;
        java.lang.String $r1, $r2, $r4;
        java.util.List r3;
        java.lang.Boolean $r5;

        r0 := @this: com.ichi2.anki.AnkiFont;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        $r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ichi2.anki.AnkiFont: java.lang.String mName> = $r1;

        r0.<com.ichi2.anki.AnkiFont: java.lang.String mFamily> = $r2;

        r0.<com.ichi2.anki.AnkiFont: java.util.List mAttributes> = r3;

        r0.<com.ichi2.anki.AnkiFont: java.lang.String mPath> = $r4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.ichi2.anki.AnkiFont: java.lang.Boolean mIsDefault> = $r5;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.ichi2.anki.AnkiFont: java.lang.Boolean mIsOverride> = $r5;

        return;
    }
    public static com.ichi2.anki.AnkiFont createAnkiFont(android.content.Context, java.lang.String, boolean)
    {
        android.content.Context $r0;
        boolean $z0, $z1;
        java.util.ArrayList r1;
        java.io.File r2;
        java.lang.String r3, $r4, r6, $r7;
        java.lang.String[] $r5;
        android.graphics.Typeface $r8;
        java.util.Locale $r9;
        com.ichi2.anki.AnkiFont r10;
        android.content.SharedPreferences $r11;

        $r0 := @parameter0: android.content.Context;

        $r4 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r4);

        r3 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r5 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFilename(java.lang.String)>(r3);

        r3 = $r5[0];

        r6 = r3;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        if $z0 == 0 goto label01;

        $r4 = "/android_asset/fonts/";

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r7);

     label01:
        $r8 = staticinvoke <com.ichi2.anki.AnkiFont: android.graphics.Typeface getTypeface(android.content.Context,java.lang.String)>($r0, $r4);

        if $r8 != null goto label02;

        return null;

     label02:
        $z0 = virtualinvoke $r8.<android.graphics.Typeface: boolean isBold()>();

        if $z0 != 0 goto label03;

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("bold");

        if $z0 == 0 goto label09;

     label03:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-weight: bolder;");

        r6 = virtualinvoke r3.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Bold", "");

     label04:
        $z0 = virtualinvoke $r8.<android.graphics.Typeface: boolean isItalic()>();

        if $z0 != 0 goto label05;

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("italic");

        if $z0 == 0 goto label11;

     label05:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-style: italic;");

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Italic", "");

     label06:
        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("condensed");

        if $z0 != 0 goto label07;

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("narrow");

        if $z0 == 0 goto label13;

     label07:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-stretch: condensed;");

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Condensed", "");

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Narrow(er)?", "");

     label08:
        r10 = new com.ichi2.anki.AnkiFont;

        specialinvoke r10.<com.ichi2.anki.AnkiFont: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.String)>(r3, r6, r1, $r4);

        $r11 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r0);

        $r4 = interfaceinvoke $r11.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("defaultFont", "");

        r6 = interfaceinvoke $r11.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("overrideFontBehavior", "0");

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("1");

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z1 == 0 goto label16;

        if $z0 == 0 goto label15;

        specialinvoke r10.<com.ichi2.anki.AnkiFont: void setAsOverride()>();

        return r10;

     label09:
        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("light");

        if $z0 == 0 goto label10;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-weight: lighter;");

        r6 = virtualinvoke r3.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Light", "");

        goto label04;

     label10:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-weight: normal;");

        goto label04;

     label11:
        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("oblique");

        if $z0 == 0 goto label12;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-style: oblique;");

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Oblique", "");

        goto label06;

     label12:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-style: normal;");

        goto label06;

     label13:
        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("expanded");

        if $z0 != 0 goto label14;

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("wide");

        if $z0 == 0 goto label08;

     label14:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("font-stretch: expanded;");

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Expanded", "");

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("(?i)-?Wide(r)?", "");

        goto label08;

     label15:
        specialinvoke r10.<com.ichi2.anki.AnkiFont: void setAsDefault()>();

     label16:
        return r10;
    }
    public static android.graphics.Typeface getTypeface(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r4;
        java.lang.RuntimeException r2;
        boolean $z0;
        android.content.res.AssetManager $r3;
        android.graphics.Typeface $r5;
        java.lang.Object[] $r6;
        java.util.Set $r7;
        java.io.File $r8;
        android.content.res.Resources $r9;
        android.widget.Toast $r10;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("/android_asset/fonts/");

     label2:
        if $z0 == 0 goto label5;

     label3:
        $r3 = virtualinvoke $r0.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("/android_asset/", "");

        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>($r3, $r4);

     label4:
        return $r5;

     label5:
        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($r1);

     label6:
        return $r5;

     label7:
        r2 := @caughtexception;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        staticinvoke <timber.log.Timber: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Runtime error in getTypeface for File: %s", $r6);

        $r7 = <com.ichi2.anki.AnkiFont: java.util.Set corruptFonts>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label8;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r1);

        $r4 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        $r9 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.res.Resources getAppResources()>();

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r4;

        $r4 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131230860, $r6);

        $r10 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>($r0, $r4, 1);

        virtualinvoke $r10.<android.widget.Toast: void show()>();

        $r7 = <com.ichi2.anki.AnkiFont: java.util.Set corruptFonts>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r1);

     label8:
        return null;

        catch java.lang.RuntimeException from label1 to label2 with label7;
        catch java.lang.RuntimeException from label3 to label4 with label7;
        catch java.lang.RuntimeException from label5 to label6 with label7;
    }
    private void setAsDefault()
    {
        com.ichi2.anki.AnkiFont r0;
        java.lang.Boolean $r1;

        r0 := @this: com.ichi2.anki.AnkiFont;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r0.<com.ichi2.anki.AnkiFont: java.lang.Boolean mIsDefault> = $r1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.ichi2.anki.AnkiFont: java.lang.Boolean mIsOverride> = $r1;

        return;
    }
    private void setAsOverride()
    {
        com.ichi2.anki.AnkiFont r0;
        java.lang.Boolean $r1;

        r0 := @this: com.ichi2.anki.AnkiFont;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r0.<com.ichi2.anki.AnkiFont: java.lang.Boolean mIsOverride> = $r1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.ichi2.anki.AnkiFont: java.lang.Boolean mIsDefault> = $r1;

        return;
    }
    public java.lang.String getCSS(boolean)
    {
        com.ichi2.anki.AnkiFont r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r6;
        java.lang.String $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        int $i0;
        char $c1;
        java.lang.Object[] $r7;

        r0 := @this: com.ichi2.anki.AnkiFont;

        $z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("font-family: \"");

        $r2 = r0.<com.ichi2.anki.AnkiFont: java.lang.String mFamily>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" !important;");

     label1:
        $r3 = r0.<com.ichi2.anki.AnkiFont: java.util.List mAttributes>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r5;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r1.<java.lang.StringBuilder: char charAt(int)>($i0);

        if $c1 != 59 goto label4;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !important;");

        goto label2;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";");

        goto label1;

     label4:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("AnkiFont.getCSS() - unable to set a font attribute important while override is set.", $r7);

        goto label2;

     label5:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public java.lang.String getDeclaration()
    {
        com.ichi2.anki.AnkiFont r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.anki.AnkiFont;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@font-face {");

        $r2 = virtualinvoke r0.<com.ichi2.anki.AnkiFont: java.lang.String getCSS(boolean)>(0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" src: url(\"file://");

        $r2 = r0.<com.ichi2.anki.AnkiFont: java.lang.String mPath>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\");}");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public java.lang.String getName()
    {
        com.ichi2.anki.AnkiFont r0;
        java.lang.String r1;

        r0 := @this: com.ichi2.anki.AnkiFont;

        r1 = r0.<com.ichi2.anki.AnkiFont: java.lang.String mName>;

        return r1;
    }
    public java.lang.String getPath()
    {
        com.ichi2.anki.AnkiFont r0;
        java.lang.String r1;

        r0 := @this: com.ichi2.anki.AnkiFont;

        r1 = r0.<com.ichi2.anki.AnkiFont: java.lang.String mPath>;

        return r1;
    }
