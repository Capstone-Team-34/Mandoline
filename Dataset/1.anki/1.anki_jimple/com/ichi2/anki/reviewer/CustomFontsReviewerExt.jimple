com.ichi2.anki.reviewer.CustomFontsReviewerExt extends java.lang.Object implements com.ichi2.anki.reviewer.ReviewerExt
private final java.lang.String mCustomStyle
private java.lang.String mDefaultFontStyle
private java.lang.String mDominantFontStyle
private java.lang.String mOverrideFontStyle
private java.lang.String mThemeFontStyle
    public void <init>(android.content.Context)
    {
        com.ichi2.anki.reviewer.CustomFontsReviewerExt r0;
        android.content.Context $r1;
        java.util.Map $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.ichi2.anki.reviewer.CustomFontsReviewerExt;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.util.Map getCustomFontsMap(android.content.Context)>($r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String getCustomFontsStyle(java.util.Map)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = specialinvoke r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String getDominantFontStyle(android.content.Context,java.util.Map)>($r1, $r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mCustomStyle> = $r4;

        return;
    }
    private static java.util.Map getCustomFontsMap(android.content.Context)
    {
        android.content.Context $r0;
        java.util.HashMap r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.ichi2.anki.AnkiFont r5;
        java.lang.String $r6;

        $r0 := @parameter0: android.content.Context;

        $r2 = staticinvoke <com.ichi2.libanki.Utils: java.util.List getCustomFonts(android.content.Context)>($r0);

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.ichi2.anki.AnkiFont) $r4;

        $r6 = virtualinvoke r5.<com.ichi2.anki.AnkiFont: java.lang.String getName()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r5);

        goto label1;

     label2:
        return r1;
    }
    private static java.lang.String getCustomFontsStyle(java.util.Map)
    {
        java.util.Map r0;
        java.lang.StringBuilder r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.ichi2.anki.AnkiFont r5;
        java.lang.String $r6;

        r0 := @parameter0: java.util.Map;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.ichi2.anki.AnkiFont) $r4;

        $r6 = virtualinvoke r5.<com.ichi2.anki.AnkiFont: java.lang.String getDeclaration()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
    private java.lang.String getDefaultFontStyle(android.content.Context, java.util.Map)
    {
        com.ichi2.anki.reviewer.CustomFontsReviewerExt r0;
        android.content.Context $r1;
        java.util.Map r2;
        java.lang.String $r3;
        android.content.SharedPreferences $r4;
        java.lang.Object $r5;
        com.ichi2.anki.AnkiFont r6;
        java.lang.StringBuilder $r7;

        r0 := @this: com.ichi2.anki.reviewer.CustomFontsReviewerExt;

        $r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.Map;

        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDefaultFontStyle>;

        if $r3 != null goto label1;

        $r4 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r1);

        $r3 = interfaceinvoke $r4.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("defaultFont", null);

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.ichi2.anki.AnkiFont) $r5;

        if r6 == null goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BODY { ");

        $r3 = virtualinvoke r6.<com.ichi2.anki.AnkiFont: java.lang.String getCSS(boolean)>(0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }\n");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDefaultFontStyle> = $r3;

     label1:
        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDefaultFontStyle>;

        return $r3;

     label2:
        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDefaultFontStyle> = "";

        goto label1;
    }
    private java.lang.String getDominantFontStyle(android.content.Context, java.util.Map)
    {
        com.ichi2.anki.reviewer.CustomFontsReviewerExt r0;
        android.content.Context $r1;
        java.util.Map r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.ichi2.anki.reviewer.CustomFontsReviewerExt;

        $r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.Map;

        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDominantFontStyle>;

        if $r3 != null goto label1;

        $r3 = specialinvoke r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String getOverrideFontStyle(android.content.Context,java.util.Map)>($r1, r2);

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDominantFontStyle> = $r3;

        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDominantFontStyle>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String getDefaultFontStyle(android.content.Context,java.util.Map)>($r1, r2);

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDominantFontStyle> = $r3;

        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDominantFontStyle>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String getThemeFontStyle()>();

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDominantFontStyle> = $r3;

     label1:
        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mDominantFontStyle>;

        return $r3;
    }
    private java.lang.String getOverrideFontStyle(android.content.Context, java.util.Map)
    {
        com.ichi2.anki.reviewer.CustomFontsReviewerExt r0;
        android.content.Context $r1;
        java.util.Map r2;
        java.lang.String $r3;
        android.content.SharedPreferences $r4;
        java.lang.Object $r5;
        com.ichi2.anki.AnkiFont r6;
        boolean $z0;
        java.lang.StringBuilder $r7;

        r0 := @this: com.ichi2.anki.reviewer.CustomFontsReviewerExt;

        $r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.Map;

        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mOverrideFontStyle>;

        if $r3 != null goto label1;

        $r4 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r1);

        $r3 = interfaceinvoke $r4.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("defaultFont", null);

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.ichi2.anki.AnkiFont) $r5;

        $r3 = interfaceinvoke $r4.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("overrideFontBehavior", "0");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if r6 == null goto label2;

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BODY, .card, * { ");

        $r3 = virtualinvoke r6.<com.ichi2.anki.AnkiFont: java.lang.String getCSS(boolean)>(1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }\n");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mOverrideFontStyle> = $r3;

     label1:
        $r3 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mOverrideFontStyle>;

        return $r3;

     label2:
        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mOverrideFontStyle> = "";

        goto label1;
    }
    private java.lang.String getThemeFontStyle()
    {
        com.ichi2.anki.reviewer.CustomFontsReviewerExt r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Object[] $r2;

        r0 := @this: com.ichi2.anki.reviewer.CustomFontsReviewerExt;

        $r1 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mThemeFontStyle>;

        if $r1 != null goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>("OpenSans");

        if $z0 == 0 goto label2;

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mThemeFontStyle> = "";

     label1:
        $r1 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mThemeFontStyle>;

        return $r1;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "OpenSans";

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("BODY {font-family: \'%s\';font-weight: normal;font-style: normal;font-stretch: normal;}\n", $r2);

        r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mThemeFontStyle> = $r1;

        goto label1;
    }
    public void updateCssStyle(java.lang.StringBuilder)
    {
        com.ichi2.anki.reviewer.CustomFontsReviewerExt r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.anki.reviewer.CustomFontsReviewerExt;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<com.ichi2.anki.reviewer.CustomFontsReviewerExt: java.lang.String mCustomStyle>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        return;
    }
