com.ichi2.anki.BackupManager extends java.lang.Object
public static final int BACKUP_INTERVAL
public static final java.lang.String BACKUP_SUFFIX
public static final java.lang.String BROKEN_DECKS_SUFFIX
public static final int MIN_BACKUP_COL_SIZE
public static final int MIN_FREE_SPACE
private static boolean mUseBackups
    static void <clinit>()
    {
        <com.ichi2.anki.BackupManager: boolean mUseBackups> = 1;

        return;
    }
    private void <init>()
    {
        com.ichi2.anki.BackupManager r0;

        r0 := @this: com.ichi2.anki.BackupManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean deleteDeckBackups(java.io.File, int)
    {
        java.io.File $r0;
        int $i0;
        java.io.File[] $r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File[] getBackups(java.io.File)>($r0);

        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean deleteDeckBackups(java.io.File[],int)>($r1, $i0);

        return $z0;
    }
    public static boolean deleteDeckBackups(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        java.io.File $r1;
        java.io.File[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $r2 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File[] getBackups(java.io.File)>($r1);

        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean deleteDeckBackups(java.io.File[],int)>($r2, $i0);

        return $z0;
    }
    public static boolean deleteDeckBackups(java.io.File[], int)
    {
        java.io.File[] $r0;
        int $i0, i1, $i2;
        java.io.File $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;

        $r0 := @parameter0: java.io.File[];

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        $i2 = lengthof $r0;

        $i2 = $i2 - $i0;

        if i1 >= $i2 goto label3;

        $r1 = $r0[i1];

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleteDeckBackups: backup file ");

        $r1 = $r0[i1];

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deleted.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>($r3, $r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return 1;
    }
    public static boolean enoughDiscSpace(java.lang.String)
    {
        java.lang.String $r0;
        long $l0;
        byte $b1;

        $r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <com.ichi2.anki.BackupManager: long getFreeDiscSpace(java.lang.String)>($r0);

        $b1 = $l0 cmp 10485760L;

        if $b1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static java.io.File getBackupDirectory(java.io.File)
    {
        java.io.File $r0, r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, "backup");

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

     label1:
        return r1;
    }
    public static java.io.File[] getBackups(java.io.File)
    {
        java.io.File $r0, r1;
        java.util.ArrayList r2;
        java.io.File[] r3, r4;
        int $i0, $i1;
        java.lang.String $r5, $r6;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $i0 = 0;

        r1 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        r1 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File getBackupDirectory(java.io.File)>(r1);

        r3 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        r4 = r3;

        if r3 != null goto label1;

        r4 = newarray (java.io.File)[0];

     label1:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $i1 = lengthof r4;

     label2:
        if $i0 >= $i1 goto label4;

        r1 = r4[$i0];

        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^(.*)-\\d{4}-\\d{2}-\\d{2}-\\d{2}-\\d{2}.apkg$", "$1.apkg");

        $r6 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".anki2", ".apkg");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r2);

        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r3 = newarray (java.io.File)[$i0];

        virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return r3;
    }
    private static java.io.File getBrokenDirectory(java.io.File)
    {
        java.io.File $r0, r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, "broken");

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

     label1:
        return r1;
    }
    private static long getFreeDiscSpace(java.io.File)
    {
        java.io.File $r0;
        long l0, l1;
        java.lang.IllegalArgumentException r1;
        android.os.StatFs r2;
        java.lang.String $r3;
        int $i2;
        java.lang.Object[] $r4;

        $r0 := @parameter0: java.io.File;

        r2 = new android.os.StatFs;

     label1:
        $r0 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        $r3 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        specialinvoke r2.<android.os.StatFs: void <init>(java.lang.String)>($r3);

        $i2 = virtualinvoke r2.<android.os.StatFs: int getAvailableBlocks()>();

     label2:
        l0 = (long) $i2;

     label3:
        $i2 = virtualinvoke r2.<android.os.StatFs: int getBlockSize()>();

     label4:
        l1 = (long) $i2;

        l0 = l0 * l1;

        return l0;

     label5:
        r1 := @caughtexception;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Free space could not be retrieved", $r4);

        return 10485760L;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }
    public static long getFreeDiscSpace(java.lang.String)
    {
        java.lang.String $r0;
        long $l0;
        java.io.File $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $l0 = staticinvoke <com.ichi2.anki.BackupManager: long getFreeDiscSpace(java.io.File)>($r1);

        return $l0;
    }
    public static boolean isActivated()
    {
        boolean z0;

        z0 = <com.ichi2.anki.BackupManager: boolean mUseBackups>;

        return z0;
    }
    public static boolean moveDatabaseToBrokenFolder(java.lang.String, boolean)
    {
        java.lang.String $r0, $r8, $r9;
        boolean $z0, $z1;
        java.io.File r1, r2, $r7, $r11;
        double $d0;
        java.sql.Date $r3;
        java.util.Locale $r4;
        java.lang.StringBuilder $r5;
        java.lang.Object[] $r6;
        int i0, $i1;
        java.io.File[] $r10;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $d0 = staticinvoke <com.ichi2.libanki.Utils: double utcOffset()>();

        $r3 = staticinvoke <com.ichi2.libanki.Utils: java.sql.Date genToday(double)>($d0);

        $r4 = <com.ichi2.libanki.Utils: java.util.Locale ENGLISH_LOCALE>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".anki2", "");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-corrupt-%tF.anki2");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, $r0, $r6);

        r2 = new java.io.File;

        $r7 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $r7 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File getBrokenDirectory(java.io.File)>($r7);

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r0);

        i0 = 1;

     label1:
        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        r2 = new java.io.File;

        $r7 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $r7 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File getBrokenDirectory(java.io.File)>($r7);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".anki2");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".anki2", $r8);

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r8);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r0 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.io.File: boolean renameTo(java.io.File)>(r2);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        if $z0 == 0 goto label6;

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        r2 = new java.io.File;

        $r9 = virtualinvoke r1.<java.io.File: java.lang.String getParent()>();

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r10;

        $i1 = 0;

     label4:
        if $i1 >= i0 goto label6;

        r2 = $r10[$i1];

        $r9 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>($r8);

        if $z0 == 0 goto label5;

        $r7 = new java.io.File;

        $r11 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $r11 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File getBrokenDirectory(java.io.File)>($r11);

        $r9 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r8, $r0);

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, $r9);

        $z0 = virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>($r7);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        return 1;
    }
    public static boolean performBackupInBackground(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean performBackupInBackground(java.lang.String,int,boolean)>($r0, 5, 0);

        return $z0;
    }
    public static boolean performBackupInBackground(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean performBackupInBackground(java.lang.String,int,boolean)>($r0, $i0, 0);

        return $z0;
    }
    public static boolean performBackupInBackground(java.lang.String, int, boolean)
    {
        java.lang.String $r0, $r13, $r16;
        int $i0, $i1, $i2;
        boolean $z0;
        java.io.File r1, r3, $r17;
        java.util.GregorianCalendar r2;
        java.text.SimpleDateFormat r4;
        com.ichi2.anki.BackupManager$1 r5;
        com.ichi2.anki.AnkiDroidApp $r6;
        android.content.Context $r7;
        android.content.SharedPreferences $r8;
        java.lang.Object[] $r9;
        java.io.File[] $r10;
        long $l3, $l4;
        byte $b5;
        java.util.Locale $r11;
        java.util.Date r12;
        java.text.ParseException r14;
        java.lang.StringBuilder $r15;
        java.util.UnknownFormatConversionException r18;
        android.content.SharedPreferences$Editor $r19;
        com.ichi2.anki.CollectionHelper $r20;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r6 = staticinvoke <com.ichi2.anki.AnkiDroidApp: com.ichi2.anki.AnkiDroidApp getInstance()>();

        $r7 = virtualinvoke $r6.<com.ichi2.anki.AnkiDroidApp: android.content.Context getBaseContext()>();

        $r8 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r7);

        $i1 = interfaceinvoke $r8.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("backupMax", 8);

        if $i1 != 0 goto label01;

        if $z0 != 0 goto label01;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("backups are disabled", $r9);

        return 0;

     label01:
        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r0);

        $r10 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File[] getBackups(java.io.File)>(r3);

        $i1 = lengthof $r10;

        if $i1 <= 0 goto label02;

        $i2 = $i1 + -1;

        r1 = $r10[$i2];

        $l3 = virtualinvoke r1.<java.io.File: long lastModified()>();

        $l4 = virtualinvoke r3.<java.io.File: long lastModified()>();

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label02;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("performBackup: No backup necessary due to no collection changes", $r9);

        return 0;

     label02:
        r4 = new java.text.SimpleDateFormat;

        $r11 = <java.util.Locale: java.util.Locale US>;

        specialinvoke r4.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd-HH-mm", $r11);

        r2 = new java.util.GregorianCalendar;

        specialinvoke r2.<java.util.GregorianCalendar: void <init>()>();

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r2.<java.util.Calendar: void setTimeInMillis(long)>($l3);

        r12 = null;

     label03:
        if r12 != null goto label07;

        if $i1 <= 0 goto label07;

        $i1 = $i1 + -1;

        r1 = $r10[$i1];

     label04:
        $r13 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $r13 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^.*-(\\d{4}-\\d{2}-\\d{2}-\\d{2}-\\d{2}).apkg$", "$1");

        r12 = virtualinvoke r4.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r13);

     label05:
        goto label03;

     label06:
        r14 := @caughtexception;

        r12 = null;

        goto label03;

     label07:
        if r12 == null goto label08;

        $l3 = virtualinvoke r12.<java.util.Date: long getTime()>();

        $l4 = (long) $i0;

        $l4 = $l4 * 3600000L;

        $l3 = $l3 + $l4;

        $l4 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

        $b5 = $l3 cmp $l4;

        if $b5 <= 0 goto label08;

        if $z0 != 0 goto label08;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("performBackup: No backup created. Last backup younger than 5 hours", $r9);

        return 0;

     label08:
        $r11 = <com.ichi2.libanki.Utils: java.util.Locale ENGLISH_LOCALE>;

        $r15 = new java.lang.StringBuilder;

     label09:
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $r13 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".anki2", "");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-%s.apkg");

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r9 = newarray (java.lang.Object)[1];

     label11:
        r12 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $r16 = virtualinvoke r4.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r12);

     label12:
        $r9[0] = $r16;

     label13:
        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r11, $r13, $r9);

     label14:
        r1 = new java.io.File;

        $r17 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        $r17 = staticinvoke <com.ichi2.anki.BackupManager: java.io.File getBackupDirectory(java.io.File)>($r17);

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r13);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label16;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("performBackup: No new backup created. File already exists", $r9);

        return 0;

     label15:
        r18 := @caughtexception;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r18, "performBackup: error on creating backup filename", $r9);

        return 0;

     label16:
        $l3 = staticinvoke <com.ichi2.anki.BackupManager: long getFreeDiscSpace(java.io.File)>(r3);

        $l4 = virtualinvoke r3.<java.io.File: long length()>();

        $l4 = $l4 + 10485760L;

        $b5 = $l3 cmp $l4;

        if $b5 >= 0 goto label17;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("performBackup: Not enough space on sd card to backup.", $r9);

        $r19 = interfaceinvoke $r8.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r19 = interfaceinvoke $r19.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("noSpaceLeft", 1);

        interfaceinvoke $r19.<android.content.SharedPreferences$Editor: boolean commit()>();

        return 0;

     label17:
        $l3 = virtualinvoke r3.<java.io.File: long length()>();

        $b5 = $l3 cmp 10000L;

        if $b5 >= 0 goto label18;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("performBackup: No backup created as the collection is too small to be valid", $r9);

        return 0;

     label18:
        $r20 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $z0 = virtualinvoke $r20.<com.ichi2.anki.CollectionHelper: boolean colIsOpen()>();

        if $z0 == 0 goto label19;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("Collection is already open during backup... we probably shouldn\'t be doing this", $r9);

     label19:
        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r0;

        $r13 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $r9[1] = $r13;

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Launching new thread to backup %s to %s", $r9);

        r5 = new com.ichi2.anki.BackupManager$1;

        specialinvoke r5.<com.ichi2.anki.BackupManager$1: void <init>(java.lang.String,java.io.File,java.io.File)>($r0, r1, r3);

        virtualinvoke r5.<java.lang.Thread: void start()>();

        return 1;

        catch java.text.ParseException from label04 to label05 with label06;
        catch java.util.UnknownFormatConversionException from label09 to label10 with label15;
        catch java.util.UnknownFormatConversionException from label11 to label12 with label15;
        catch java.util.UnknownFormatConversionException from label13 to label14 with label15;
    }
    public static boolean performBackupInBackground(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean performBackupInBackground(java.lang.String,int,boolean)>($r0, 5, $z0);

        return $z0;
    }
    public static boolean removeDir(java.io.File)
    {
        java.io.File $r0, r1;
        int $i0, $i1;
        boolean $z0;
        java.io.File[] $r2;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r1 = $r2[$i1];

        staticinvoke <com.ichi2.anki.BackupManager: boolean removeDir(java.io.File)>(r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        return $z0;
    }
    public static boolean repairCollection(com.ichi2.libanki.Collection)
    {
        com.ichi2.libanki.Collection $r0;
        java.lang.String[] r1;
        java.io.File r2, r3;
        java.lang.String $r4, $r6, $r7;
        java.lang.StringBuilder $r5;
        java.lang.Object[] $r8;
        java.lang.Runtime $r9;
        java.lang.Process $r10;
        boolean $z0;
        java.lang.Exception r11;

        $r0 := @parameter0: com.ichi2.libanki.Collection;

        $r4 = virtualinvoke $r0.<com.ichi2.libanki.Collection: java.lang.String getPath()>();

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r4);

        if $r0 == null goto label01;

        virtualinvoke $r0.<com.ichi2.libanki.Collection: void close()>();

     label01:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sqlite3 ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" .dump | sqlite3 ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repairCollection - Execute: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>($r7, $r8);

        r1 = newarray (java.lang.String)[3];

        r1[0] = "/system/bin/sh";

        r1[1] = "-c";

        r1[2] = $r6;

     label02:
        $r9 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r10 = virtualinvoke $r9.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r1);

        virtualinvoke $r10.<java.lang.Process: int waitFor()>();

     label03:
        r3 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

     label05:
        if $z0 != 0 goto label10;

        $r5 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repairCollection - dump to ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp failed");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $r8 = newarray (java.lang.Object)[0];

     label08:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>($r4, $r8);

     label09:
        return 0;

     label10:
        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean moveDatabaseToBrokenFolder(java.lang.String,boolean)>($r4, 0);

     label11:
        if $z0 != 0 goto label16;

        $r8 = newarray (java.lang.Object)[0];

     label12:
        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("repairCollection - could not move corrupt file to broken folder", $r8);

     label13:
        return 0;

     label14:
        r11 := @caughtexception;

     label15:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repairCollection - error: ");

        $r4 = virtualinvoke r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>($r4, $r8);

        return 0;

     label16:
        $r8 = newarray (java.lang.Object)[0];

     label17:
        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("repairCollection - moved corrupt file to broken folder", $r8);

     label18:
        r3 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

     label19:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r2);

     label20:
        return $z0;

     label21:
        r11 := @caughtexception;

        goto label15;

        catch java.io.IOException from label02 to label03 with label14;
        catch java.io.IOException from label04 to label05 with label14;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.io.IOException from label08 to label09 with label14;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.InterruptedException from label02 to label03 with label21;
        catch java.lang.InterruptedException from label04 to label05 with label21;
        catch java.lang.InterruptedException from label06 to label07 with label21;
        catch java.lang.InterruptedException from label08 to label09 with label21;
        catch java.lang.InterruptedException from label10 to label11 with label21;
        catch java.lang.InterruptedException from label12 to label13 with label21;
        catch java.io.IOException from label17 to label18 with label14;
        catch java.io.IOException from label19 to label20 with label14;
        catch java.lang.InterruptedException from label17 to label18 with label21;
        catch java.lang.InterruptedException from label19 to label20 with label21;
    }
