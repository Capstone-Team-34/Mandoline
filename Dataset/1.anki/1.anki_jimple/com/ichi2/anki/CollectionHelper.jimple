com.ichi2.anki.CollectionHelper extends java.lang.Object
public static final java.lang.String COLLECTION_FILENAME
private com.ichi2.libanki.Collection mCollection
private boolean mCollectionLocked
private java.lang.String mPath
    public void <init>()
    {
        com.ichi2.anki.CollectionHelper r0;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String getCollectionPath(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 = new java.io.File;

        $r2 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getCurrentAnkiDroidDirectory(android.content.Context)>($r0);

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r2, "collection.anki2");

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r2;
    }
    public static java.lang.String getCurrentAnkiDroidDirectory(android.content.Context)
    {
        android.content.Context $r0;
        android.content.SharedPreferences $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.content.Context;

        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context getApplicationContext()>();

        $r1 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r0);

        $r2 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getDefaultAnkiDroidDirectory()>();

        $r2 = interfaceinvoke $r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("deckPath", $r2);

        return $r2;
    }
    public static java.lang.String getDefaultAnkiDroidDirectory()
    {
        java.io.File $r0, $r1;
        java.lang.String $r2;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "AnkiDroid");

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r2;
    }
    public static com.ichi2.anki.CollectionHelper getInstance()
    {
        com.ichi2.anki.CollectionHelper $r0;

        $r0 = staticinvoke <com.ichi2.anki.CollectionHelper$LazyHolder: com.ichi2.anki.CollectionHelper access$000()>();

        return $r0;
    }
    private static java.lang.String getParentDirectory(java.lang.String)
    {
        java.lang.String $r0;
        java.io.File $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        $r0 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r0;
    }
    public static boolean hasStorageAccessPermission(android.content.Context)
    {
        android.content.Context $r0;
        int $i0;

        $r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.support.v4.content.ContextCompat: int checkSelfPermission(android.content.Context,java.lang.String)>($r0, "android.permission.WRITE_EXTERNAL_STORAGE");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static void initializeAnkiDroidDirectory(java.lang.String) throws com.ichi2.anki.exception.StorageAccessException
    {
        java.lang.String $r0;
        java.io.File r1, r3;
        java.io.IOException r2;
        boolean $z0;
        com.ichi2.anki.exception.StorageAccessException $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/ichi2/anki/CollectionHelper;";

     label01:
        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label03;

        $z0 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label03;

        $r4 = new com.ichi2.anki.exception.StorageAccessException;

        specialinvoke $r4.<com.ichi2.anki.exception.StorageAccessException: void <init>(java.lang.String)>("Failed to create AnkiDroid directory");

        throw $r4;

     label02:
        $r5 := @caughtexception;

        exitmonitor class "Lcom/ichi2/anki/CollectionHelper;";

        throw $r5;

     label03:
        $z0 = virtualinvoke r1.<java.io.File: boolean canWrite()>();

        if $z0 != 0 goto label04;

        $r4 = new com.ichi2.anki.exception.StorageAccessException;

        specialinvoke $r4.<com.ichi2.anki.exception.StorageAccessException: void <init>(java.lang.String)>("No write access to AnkiDroid directory");

        throw $r4;

     label04:
        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, ".nomedia");

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

     label05:
        if $z0 != 0 goto label07;

     label06:
        virtualinvoke r3.<java.io.File: boolean createNewFile()>();

     label07:
        exitmonitor class "Lcom/ichi2/anki/CollectionHelper;";

        return;

     label08:
        r2 := @caughtexception;

     label09:
        $r4 = new com.ichi2.anki.exception.StorageAccessException;

        specialinvoke $r4.<com.ichi2.anki.exception.StorageAccessException: void <init>(java.lang.String)>("Failed to create .nomedia file");

        throw $r4;

     label10:
        nop;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label05 with label02;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
    }
    public static boolean isCurrentAnkiDroidDirAccessible(android.content.Context)
    {
        android.content.Context $r0;
        com.ichi2.anki.exception.StorageAccessException r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getCurrentAnkiDroidDirectory(android.content.Context)>($r0);

        staticinvoke <com.ichi2.anki.CollectionHelper: void initializeAnkiDroidDirectory(java.lang.String)>($r2);

     label2:
        return 1;

     label3:
        r1 := @caughtexception;

        return 0;

        catch com.ichi2.anki.exception.StorageAccessException from label1 to label2 with label3;
    }
    public void closeCollection(boolean)
    {
        com.ichi2.anki.CollectionHelper r0;
        boolean $z0;
        java.lang.Object[] $r1;
        com.ichi2.libanki.Collection $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        $z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("closeCollection", $r1);

        $r2 = r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection>;

        if $r2 == null goto label2;

        $r2 = r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection>;

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void close(boolean)>($z0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean colIsOpen()
    {
        com.ichi2.anki.CollectionHelper r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.DB $r2;
        io.requery.android.database.sqlite.SQLiteDatabase $r3;
        boolean $z0;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        $r1 = r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection>;

        if $r1 == null goto label1;

        $r1 = r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        if $r2 == null goto label1;

        $r1 = r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        if $r3 == null goto label1;

        $r1 = r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection>;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $z0 = virtualinvoke $r3.<io.requery.android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean exceededCursorSizeLimit(android.content.Context)
    {
        com.ichi2.anki.CollectionHelper r0;
        android.content.Context $r1;
        java.lang.IllegalStateException r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        $r1 := @parameter0: android.content.Context;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r1);

     label2:
        $z0 = 0;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        r2 := @caughtexception;

        $z0 = 1;

        goto label3;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }
    public com.ichi2.libanki.Collection getCol(android.content.Context)
    {
        com.ichi2.anki.CollectionHelper r0;
        android.content.Context $r1;
        com.ichi2.anki.exception.StorageAccessException r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.Object[] $r5;
        com.ichi2.libanki.Collection $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        $r1 := @parameter0: android.content.Context;

        entermonitor r0;

     label01:
        $r3 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getCollectionPath(android.content.Context)>($r1);

        $z0 = virtualinvoke r0.<com.ichi2.anki.CollectionHelper: boolean colIsOpen()>();

     label02:
        if $z0 != 0 goto label06;

     label03:
        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getParentDirectory(java.lang.String)>($r3);

        staticinvoke <com.ichi2.anki.CollectionHelper: void initializeAnkiDroidDirectory(java.lang.String)>($r4);

     label04:
        r0.<com.ichi2.anki.CollectionHelper: java.lang.String mPath> = $r3;

     label05:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r3;

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("openCollection: %s", $r5);

        $r6 = staticinvoke <com.ichi2.libanki.Storage: com.ichi2.libanki.Collection Collection(android.content.Context,java.lang.String,boolean,boolean)>($r1, $r3, 0, 1);

        r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection> = $r6;

     label06:
        $r6 = r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection mCollection>;

     label07:
        exitmonitor r0;

        return $r6;

     label08:
        r2 := @caughtexception;

     label09:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Could not initialize AnkiDroid directory", $r5);

     label10:
        $r6 = null;

        goto label07;

     label11:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch com.ichi2.anki.exception.StorageAccessException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label05 with label11;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }
    public com.ichi2.libanki.Collection getColSafe(android.content.Context)
    {
        com.ichi2.anki.CollectionHelper r0;
        android.content.Context $r1;
        java.lang.Exception r2;
        com.ichi2.libanki.Collection $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        $r1 := @parameter0: android.content.Context;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r1);

     label2:
        exitmonitor r0;

        return $r3;

     label3:
        r2 := @caughtexception;

     label4:
        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r2, "CollectionHelper.getColSafe");

     label5:
        $r3 = null;

        goto label2;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public boolean isCollectionLocked()
    {
        com.ichi2.anki.CollectionHelper r0;
        java.lang.Throwable $r1;
        boolean z0;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        entermonitor r0;

     label1:
        z0 = r0.<com.ichi2.anki.CollectionHelper: boolean mCollectionLocked>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void lockCollection()
    {
        com.ichi2.anki.CollectionHelper r0;
        java.lang.Throwable $r1;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        entermonitor r0;

     label1:
        r0.<com.ichi2.anki.CollectionHelper: boolean mCollectionLocked> = 1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void unlockCollection()
    {
        com.ichi2.anki.CollectionHelper r0;
        java.lang.Throwable $r1;

        r0 := @this: com.ichi2.anki.CollectionHelper;

        entermonitor r0;

     label1:
        r0.<com.ichi2.anki.CollectionHelper: boolean mCollectionLocked> = 0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
