com.ichi2.anki.DeckOptions$DeckPreferenceHack extends java.lang.Object implements android.content.SharedPreferences
public java.util.List listeners
private com.afollestad.materialdialogs.MaterialDialog mProgressDialog
private java.util.Map mSummaries
private java.util.Map mValues
final com.ichi2.anki.DeckOptions this$0
    public void <init>(com.ichi2.anki.DeckOptions)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        com.ichi2.anki.DeckOptions $r1;
        java.util.HashMap $r2;
        java.util.LinkedList $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: com.ichi2.anki.DeckOptions;

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mSummaries> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.List listeners> = $r3;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: void cacheValues()>();

        return;
    }
    static com.afollestad.materialdialogs.MaterialDialog access$400(com.ichi2.anki.DeckOptions$DeckPreferenceHack)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r0;
        com.afollestad.materialdialogs.MaterialDialog r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        r1 = $r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.afollestad.materialdialogs.MaterialDialog mProgressDialog>;

        return r1;
    }
    static com.afollestad.materialdialogs.MaterialDialog access$402(com.ichi2.anki.DeckOptions$DeckPreferenceHack, com.afollestad.materialdialogs.MaterialDialog)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r0;
        com.afollestad.materialdialogs.MaterialDialog $r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter1: com.afollestad.materialdialogs.MaterialDialog;

        $r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.afollestad.materialdialogs.MaterialDialog mProgressDialog> = $r1;

        return $r1;
    }
    static java.util.Map access$600(com.ichi2.anki.DeckOptions$DeckPreferenceHack)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        r1 = $r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        return r1;
    }
    static java.util.Map access$700(com.ichi2.anki.DeckOptions$DeckPreferenceHack)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        r1 = $r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mSummaries>;

        return r1;
    }
    protected void cacheValues()
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        org.json.JSONException r1;
        boolean $z0;
        java.lang.Object[] $r2;
        com.ichi2.anki.DeckOptions $r3, $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Decks $r6;
        org.json.JSONObject $r7;
        long $l0;
        java.util.Map $r8;
        java.lang.String $r9;
        int $i1;
        org.json.JSONArray $r10;
        double $d0;
        java.lang.Object $r11;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $z0 = 1;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckOptions - CacheValues", $r2);

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        $r4 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label01:
        $r5 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r4);

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

     label02:
        $r4 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label03:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r4);

        $l0 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

        staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$002(com.ichi2.anki.DeckOptions,org.json.JSONObject)>($r3, $r7);

     label04:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label05:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r3);

        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", $r9);

     label06:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label07:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r3);

        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("desc");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desc", $r9);

     label08:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label09:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r3);

        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("conf");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("deckConf", $r9);

     label10:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label11:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("maxTaken");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxAnswerTime", $r9);

     label12:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label13:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $i1 = virtualinvoke $r7.<org.json.JSONObject: int getInt(java.lang.String)>("timer");

     label14:
        if $i1 != 1 goto label85;

     label15:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("showAnswerTimer", $r9);

     label16:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label17:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $z0 = virtualinvoke $r7.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("autoplay");

        $r9 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("autoPlayAudio", $r9);

     label18:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label19:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $z0 = virtualinvoke $r7.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("replayq", 1);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("replayQuestion", $r9);

     label20:
        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label21:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $r7 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

     label22:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label23:
        $r10 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $r9 = staticinvoke <com.ichi2.preferences.StepsPreference: java.lang.String convertFromJSON(org.json.JSONArray)>($r10);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("newSteps", $r9);

     label24:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label25:
        $r10 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("ints");

        $r9 = virtualinvoke $r10.<org.json.JSONArray: java.lang.String getString(int)>(0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("newGradIvl", $r9);

     label26:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label27:
        $r10 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("ints");

        $r9 = virtualinvoke $r10.<org.json.JSONArray: java.lang.String getString(int)>(1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("newEasy", $r9);

     label28:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label29:
        $i1 = virtualinvoke $r7.<org.json.JSONObject: int getInt(java.lang.String)>("initialFactor");

     label30:
        $i1 = $i1 / 10;

     label31:
        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("newFactor", $r9);

     label32:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label33:
        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("order");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("newOrder", $r9);

     label34:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label35:
        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("perDay");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("newPerDay", $r9);

     label36:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label37:
        $z0 = virtualinvoke $r7.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("bury", 1);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("newBury", $r9);

     label38:
        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label39:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $r7 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

     label40:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label41:
        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("perDay");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("revPerDay", $r9);

     label42:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label43:
        $d0 = virtualinvoke $r7.<org.json.JSONObject: double getDouble(java.lang.String)>("ease4");

     label44:
        $d0 = $d0 * 100.0;

        $i1 = (int) $d0;

     label45:
        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("easyBonus", $r9);

     label46:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label47:
        $d0 = virtualinvoke $r7.<org.json.JSONObject: double getDouble(java.lang.String)>("ivlFct");

     label48:
        $d0 = $d0 * 100.0;

        $i1 = (int) $d0;

     label49:
        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("revIvlFct", $r9);

     label50:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label51:
        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("maxIvl");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("revMaxIvl", $r9);

     label52:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label53:
        $z0 = virtualinvoke $r7.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>("bury", 1);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("revBury", $r9);

     label54:
        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label55:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $r7 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

     label56:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label57:
        $r10 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("delays");

        $r9 = staticinvoke <com.ichi2.preferences.StepsPreference: java.lang.String convertFromJSON(org.json.JSONArray)>($r10);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lapSteps", $r9);

     label58:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label59:
        $d0 = virtualinvoke $r7.<org.json.JSONObject: double getDouble(java.lang.String)>("mult");

     label60:
        $d0 = $d0 * 100.0;

        $i1 = (int) $d0;

     label61:
        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lapNewIvl", $r9);

     label62:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label63:
        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("minInt");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lapMinIvl", $r9);

     label64:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label65:
        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("leechFails");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lapLeechThres", $r9);

     label66:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label67:
        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("leechAction");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lapLeechAct", $r9);

     label68:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label69:
        $r5 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r3);

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

     label70:
        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label71:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r3);

        $l0 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("conf");

        $r7 = virtualinvoke $r6.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l0);

        $r9 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("currentConf", $r9);

     label72:
        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label73:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $z0 = virtualinvoke $r7.<org.json.JSONObject: boolean has(java.lang.String)>("reminder");

     label74:
        if $z0 == 0 goto label86;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label75:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r3);

        $r7 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("reminder");

        $r10 = virtualinvoke $r7.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("time");

     label76:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label77:
        $z0 = virtualinvoke $r7.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("enabled");

        $r9 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reminderEnabled", $r9);

     label78:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r2 = newarray (java.lang.Object)[2];

     label79:
        $r11 = virtualinvoke $r10.<org.json.JSONArray: java.lang.Object get(int)>(0);

     label80:
        $r2[0] = $r11;

     label81:
        $r11 = virtualinvoke $r10.<org.json.JSONArray: java.lang.Object get(int)>(1);

     label82:
        $r2[1] = $r11;

     label83:
        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1$02d:%2$02d", $r2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reminderTime", $r9);

     label84:
        return;

     label85:
        $z0 = 0;

        goto label15;

     label86:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label87:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reminderEnabled", "false");

     label88:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

     label89:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reminderTime", "00:00");

     label90:
        return;

     label91:
        r1 := @caughtexception;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        virtualinvoke $r3.<com.ichi2.anki.DeckOptions: void finish()>();

        return;

        catch org.json.JSONException from label01 to label02 with label91;
        catch org.json.JSONException from label03 to label04 with label91;
        catch org.json.JSONException from label05 to label06 with label91;
        catch org.json.JSONException from label07 to label08 with label91;
        catch org.json.JSONException from label09 to label10 with label91;
        catch org.json.JSONException from label11 to label12 with label91;
        catch org.json.JSONException from label13 to label14 with label91;
        catch org.json.JSONException from label15 to label16 with label91;
        catch org.json.JSONException from label17 to label18 with label91;
        catch org.json.JSONException from label19 to label20 with label91;
        catch org.json.JSONException from label21 to label22 with label91;
        catch org.json.JSONException from label23 to label24 with label91;
        catch org.json.JSONException from label25 to label26 with label91;
        catch org.json.JSONException from label27 to label28 with label91;
        catch org.json.JSONException from label29 to label30 with label91;
        catch org.json.JSONException from label31 to label32 with label91;
        catch org.json.JSONException from label33 to label34 with label91;
        catch org.json.JSONException from label35 to label36 with label91;
        catch org.json.JSONException from label37 to label38 with label91;
        catch org.json.JSONException from label39 to label40 with label91;
        catch org.json.JSONException from label41 to label42 with label91;
        catch org.json.JSONException from label43 to label44 with label91;
        catch org.json.JSONException from label45 to label46 with label91;
        catch org.json.JSONException from label47 to label48 with label91;
        catch org.json.JSONException from label49 to label50 with label91;
        catch org.json.JSONException from label51 to label52 with label91;
        catch org.json.JSONException from label53 to label54 with label91;
        catch org.json.JSONException from label55 to label56 with label91;
        catch org.json.JSONException from label57 to label58 with label91;
        catch org.json.JSONException from label59 to label60 with label91;
        catch org.json.JSONException from label61 to label62 with label91;
        catch org.json.JSONException from label63 to label64 with label91;
        catch org.json.JSONException from label65 to label66 with label91;
        catch org.json.JSONException from label67 to label68 with label91;
        catch org.json.JSONException from label69 to label70 with label91;
        catch org.json.JSONException from label71 to label72 with label91;
        catch org.json.JSONException from label73 to label74 with label91;
        catch org.json.JSONException from label75 to label76 with label91;
        catch org.json.JSONException from label77 to label78 with label91;
        catch org.json.JSONException from label79 to label80 with label91;
        catch org.json.JSONException from label81 to label82 with label91;
        catch org.json.JSONException from label83 to label84 with label91;
        catch org.json.JSONException from label87 to label88 with label91;
        catch org.json.JSONException from label89 to label90 with label91;
    }
    public boolean contains(java.lang.String)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public volatile android.content.SharedPreferences$Editor edit()
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor $r1;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor edit()>();

        return $r1;
    }
    public com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor edit()
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor $r1;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 = new com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        specialinvoke $r1.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: void <init>(com.ichi2.anki.DeckOptions$DeckPreferenceHack)>(r0);

        return $r1;
    }
    public java.util.Map getAll()
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.util.Map r1;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        r1 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        return r1;
    }
    public boolean getBoolean(java.lang.String, boolean)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }
    public float getFloat(java.lang.String, float)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        float $f0;
        java.lang.Float $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r1);

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        return $f0;
    }
    public int getInt(java.lang.String, int)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r1);

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    public long getLong(java.lang.String, long)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, $r2;
        long $l0;
        java.lang.Long $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.lang.String getString(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r1);

        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        return $l0;
    }
    public java.lang.String getString(java.lang.String, java.lang.String)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1, r2;
        java.lang.Object[] $r3;
        java.util.Map $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r1;

        $r3[1] = r2;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("getString(key=%s, defValue=%s)", $r3);

        $r4 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return r2;

     label1:
        $r4 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.Map mValues>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r5;

        return $r1;
    }
    public java.util.Set getStringSet(java.lang.String, java.util.Set)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        java.lang.String $r1;
        java.util.Set r2;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        return null;
    }
    public void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        android.content.SharedPreferences$OnSharedPreferenceChangeListener $r1;
        java.util.List $r2;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: android.content.SharedPreferences$OnSharedPreferenceChangeListener;

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack r0;
        android.content.SharedPreferences$OnSharedPreferenceChangeListener $r1;
        java.util.List $r2;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        $r1 := @parameter0: android.content.SharedPreferences$OnSharedPreferenceChangeListener;

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return;
    }
