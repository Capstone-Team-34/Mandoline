com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor extends java.lang.Object implements android.content.SharedPreferences$Editor
private android.content.ContentValues mUpdate
final com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1
    public void <init>(com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack $r1;
        android.content.ContentValues $r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack;

        r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate> = $r2;

        return;
    }
    public void apply()
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        boolean $z0;
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack $r1;
        com.ichi2.anki.FilteredDeckOptions $r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r2 = $r1.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

        $z0 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: boolean access$400(com.ichi2.anki.FilteredDeckOptions)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: boolean commit()>();

     label1:
        return;
    }
    public android.content.SharedPreferences$Editor clear()
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.Object[] $r1;
        android.content.ContentValues $r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("clear()", $r1);

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate> = $r2;

        return r0;
    }
    public boolean commit()
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        org.json.JSONObject r1;
        java.lang.Object[] $r2;
        android.content.ContentValues $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9, $r19;
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack $r10;
        com.ichi2.anki.FilteredDeckOptions $r11;
        org.json.JSONArray $r12, $r13;
        org.json.JSONException r14;
        java.lang.RuntimeException $r15;
        int $i0, $i1;
        java.lang.Boolean $r16;
        java.util.Map $r17;
        java.lang.String[] $r18;
        com.ichi2.libanki.Collection $r20;
        com.ichi2.libanki.Decks $r21;
        java.util.List $r22;
        android.content.SharedPreferences$OnSharedPreferenceChangeListener r23;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("commit() changes back to database", $r2);

        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

     label001:
        $r4 = virtualinvoke $r3.<android.content.ContentValues: java.util.Set valueSet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label002:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label003:
        if $z0 == 0 goto label101;

     label004:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label005:
        r7 = (java.util.Map$Entry) $r6;

        $r8 = new java.lang.StringBuilder;

     label006:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Change value for key \'");

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label007:
        $r9 = (java.lang.String) $r6;

     label008:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label009:
        $r2 = newarray (java.lang.Object)[0];

     label010:
        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>($r9, $r2);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label011:
        $r9 = (java.lang.String) $r6;

     label012:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("search");

     label013:
        if $z0 == 0 goto label019;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label014:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        $r12 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("terms");

        $r13 = virtualinvoke $r12.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(0);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r13.<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>(0, $r6);

     label015:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label016:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("terms", $r12);

     label017:
        goto label002;

     label018:
        r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r14);

        throw $r15;

     label019:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label020:
        $r9 = (java.lang.String) $r6;

     label021:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("limit");

     label022:
        if $z0 == 0 goto label027;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label023:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        $r12 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("terms");

        $r13 = virtualinvoke $r12.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(0);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r13.<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>(1, $r6);

     label024:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label025:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("terms", $r12);

     label026:
        goto label002;

     label027:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label028:
        $r9 = (java.lang.String) $r6;

     label029:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("order");

     label030:
        if $z0 == 0 goto label037;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label031:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        $r12 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("terms");

        $r13 = virtualinvoke $r12.<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>(0);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

     label032:
        $r9 = (java.lang.String) $r6;

     label033:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        virtualinvoke $r13.<org.json.JSONArray: org.json.JSONArray put(int,int)>(2, $i0);

     label034:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label035:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("terms", $r12);

     label036:
        goto label002;

     label037:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label038:
        $r9 = (java.lang.String) $r6;

     label039:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("resched");

     label040:
        if $z0 == 0 goto label043;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label041:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("resched", $r6);

     label042:
        goto label002;

     label043:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label044:
        $r9 = (java.lang.String) $r6;

     label045:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("stepsOn");

     label046:
        if $z0 == 0 goto label062;

     label047:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

     label048:
        $r16 = (java.lang.Boolean) $r6;

     label049:
        $z0 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

     label050:
        if $z0 == 0 goto label057;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

     label051:
        $r17 = staticinvoke <com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map access$100(com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack)>($r10);

        $r6 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>("steps");

     label052:
        $r9 = (java.lang.String) $r6;

     label053:
        $r12 = staticinvoke <com.ichi2.preferences.StepsPreference: org.json.JSONArray convertToJSON(java.lang.String)>($r9);

        $i0 = virtualinvoke $r12.<org.json.JSONArray: int length()>();

     label054:
        if $i0 <= 0 goto label002;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label055:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("delays", $r12);

     label056:
        goto label002;

     label057:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label058:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

     label059:
        $r6 = <org.json.JSONObject: java.lang.Object NULL>;

     label060:
        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("delays", $r6);

     label061:
        goto label002;

     label062:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label063:
        $r9 = (java.lang.String) $r6;

     label064:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("steps");

     label065:
        if $z0 == 0 goto label070;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label066:
        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

     label067:
        $r9 = (java.lang.String) $r6;

     label068:
        $r12 = staticinvoke <com.ichi2.preferences.StepsPreference: org.json.JSONArray convertToJSON(java.lang.String)>($r9);

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("delays", $r12);

     label069:
        goto label002;

     label070:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

     label071:
        $r9 = (java.lang.String) $r6;

     label072:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("preset");

     label073:
        if $z0 == 0 goto label002;

     label074:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

     label075:
        $r9 = (java.lang.String) $r6;

     label076:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

     label077:
        if $i0 <= 0 goto label002;

        r1 = new org.json.JSONObject;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

     label078:
        $r18 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: java.lang.String[] access$200(com.ichi2.anki.FilteredDeckOptions)>($r11);

     label079:
        $r9 = $r18[$i0];

     label080:
        specialinvoke r1.<org.json.JSONObject: void <init>(java.lang.String)>($r9);

        $r12 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray names()>();

     label081:
        $i0 = 0;

     label082:
        $i1 = virtualinvoke $r12.<org.json.JSONArray: int length()>();

     label083:
        if $i0 >= $i1 goto label098;

     label084:
        $r9 = virtualinvoke $r12.<org.json.JSONArray: java.lang.String getString(int)>($i0);

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("steps");

     label085:
        if $z0 == 0 goto label087;

        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

     label086:
        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("stepsOn", $r16);

     label087:
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("resched");

     label088:
        if $z0 == 0 goto label093;

        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

     label089:
        $z0 = virtualinvoke r1.<org.json.JSONObject: boolean getBoolean(java.lang.String)>($r9);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>($r9, $r16);

     label090:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

     label091:
        $r17 = staticinvoke <com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map access$100(com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack)>($r10);

        $z0 = virtualinvoke r1.<org.json.JSONObject: boolean getBoolean(java.lang.String)>($r9);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r19);

     label092:
        $i0 = $i0 + 1;

        goto label082;

     label093:
        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

     label094:
        $r19 = virtualinvoke r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>($r9);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r9, $r19);

     label095:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

     label096:
        $r17 = staticinvoke <com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.Map access$100(com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack)>($r10);

        $r19 = virtualinvoke r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>($r9);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r19);

     label097:
        goto label092;

     label098:
        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

     label099:
        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("preset", "0");

        virtualinvoke r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: boolean commit()>();

     label100:
        goto label002;

     label101:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

        $r20 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: com.ichi2.libanki.Collection access$300(com.ichi2.anki.FilteredDeckOptions)>($r11);

        $r21 = virtualinvoke $r20.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

        r1 = staticinvoke <com.ichi2.anki.FilteredDeckOptions: org.json.JSONObject access$000(com.ichi2.anki.FilteredDeckOptions)>($r11);

        virtualinvoke $r21.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>(r1);

     label102:
        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        virtualinvoke $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: void cacheValues()>();

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

        virtualinvoke $r11.<com.ichi2.anki.FilteredDeckOptions: void updateSummaries()>();

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r22 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: java.util.List listeners>;

        $r5 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label103:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label105;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.content.SharedPreferences$OnSharedPreferenceChangeListener) $r6;

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        interfaceinvoke r23.<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>($r10, null);

        goto label103;

     label104:
        $r15 := @caughtexception;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r15, "RuntimeException on saving deck", $r2);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>($r15, "FilteredDeckOptionsSaveDeck");

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

        virtualinvoke $r11.<com.ichi2.anki.FilteredDeckOptions: void setResult(int)>(203);

        $r10 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack: com.ichi2.anki.FilteredDeckOptions this$0>;

        virtualinvoke $r11.<com.ichi2.anki.FilteredDeckOptions: void finish()>();

        goto label102;

     label105:
        return 1;

        catch org.json.JSONException from label001 to label003 with label018;
        catch org.json.JSONException from label004 to label005 with label018;
        catch org.json.JSONException from label006 to label007 with label018;
        catch org.json.JSONException from label008 to label009 with label018;
        catch org.json.JSONException from label010 to label011 with label018;
        catch org.json.JSONException from label012 to label013 with label018;
        catch org.json.JSONException from label014 to label015 with label018;
        catch org.json.JSONException from label016 to label017 with label018;
        catch org.json.JSONException from label019 to label020 with label018;
        catch org.json.JSONException from label021 to label022 with label018;
        catch org.json.JSONException from label023 to label024 with label018;
        catch org.json.JSONException from label025 to label026 with label018;
        catch org.json.JSONException from label027 to label028 with label018;
        catch org.json.JSONException from label029 to label030 with label018;
        catch org.json.JSONException from label031 to label032 with label018;
        catch org.json.JSONException from label033 to label034 with label018;
        catch org.json.JSONException from label035 to label036 with label018;
        catch org.json.JSONException from label037 to label038 with label018;
        catch org.json.JSONException from label039 to label040 with label018;
        catch org.json.JSONException from label041 to label042 with label018;
        catch org.json.JSONException from label043 to label044 with label018;
        catch org.json.JSONException from label045 to label046 with label018;
        catch org.json.JSONException from label047 to label048 with label018;
        catch org.json.JSONException from label049 to label050 with label018;
        catch org.json.JSONException from label051 to label052 with label018;
        catch org.json.JSONException from label053 to label054 with label018;
        catch org.json.JSONException from label055 to label056 with label018;
        catch org.json.JSONException from label058 to label059 with label018;
        catch org.json.JSONException from label060 to label061 with label018;
        catch org.json.JSONException from label062 to label063 with label018;
        catch org.json.JSONException from label064 to label065 with label018;
        catch org.json.JSONException from label066 to label067 with label018;
        catch org.json.JSONException from label068 to label069 with label018;
        catch org.json.JSONException from label070 to label071 with label018;
        catch org.json.JSONException from label072 to label073 with label018;
        catch org.json.JSONException from label074 to label075 with label018;
        catch org.json.JSONException from label076 to label077 with label018;
        catch org.json.JSONException from label078 to label079 with label018;
        catch org.json.JSONException from label080 to label081 with label018;
        catch org.json.JSONException from label082 to label083 with label018;
        catch org.json.JSONException from label084 to label085 with label018;
        catch org.json.JSONException from label086 to label088 with label018;
        catch org.json.JSONException from label089 to label090 with label018;
        catch org.json.JSONException from label091 to label092 with label018;
        catch org.json.JSONException from label094 to label095 with label018;
        catch org.json.JSONException from label096 to label097 with label018;
        catch org.json.JSONException from label099 to label100 with label018;
        catch java.lang.RuntimeException from label101 to label102 with label104;
    }
    public android.content.SharedPreferences$Editor putBoolean(java.lang.String, boolean)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        boolean $z0;
        android.content.ContentValues $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putFloat(java.lang.String, float)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        float $f0;
        android.content.ContentValues $r2;
        java.lang.Float $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $r2 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putInt(java.lang.String, int)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        int $i0;
        android.content.ContentValues $r2;
        java.lang.Integer $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putLong(java.lang.String, long)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        long $l0;
        android.content.ContentValues $r2;
        java.lang.Long $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putString(java.lang.String, java.lang.String)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public android.content.SharedPreferences$Editor putStringSet(java.lang.String, java.util.Set)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        java.util.Set r2;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        return null;
    }
    public android.content.SharedPreferences$Editor remove(java.lang.String)
    {
        com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.content.ContentValues $r3;

        r0 := @this: com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Editor.remove(key=%s)", $r2);

        $r3 = r0.<com.ichi2.anki.FilteredDeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        virtualinvoke $r3.<android.content.ContentValues: void remove(java.lang.String)>($r1);

        return r0;
    }
