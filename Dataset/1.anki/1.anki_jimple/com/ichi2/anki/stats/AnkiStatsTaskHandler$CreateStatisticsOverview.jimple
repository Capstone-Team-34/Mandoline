com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview extends android.os.AsyncTask
private boolean mIsRunning
private android.widget.ProgressBar mProgressBar
private android.webkit.WebView mWebView
final com.ichi2.anki.stats.AnkiStatsTaskHandler this$0
    public void <init>(com.ichi2.anki.stats.AnkiStatsTaskHandler)
    {
        com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview r0;
        com.ichi2.anki.stats.AnkiStatsTaskHandler $r1;

        r0 := @this: com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview;

        $r1 := @parameter0: com.ichi2.anki.stats.AnkiStatsTaskHandler;

        r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: com.ichi2.anki.stats.AnkiStatsTaskHandler this$0> = $r1;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: boolean mIsRunning> = 0;

        r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: boolean mIsRunning> = 1;

        return;
    }
    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.view.View[] $r3;

        r0 := @this: com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview;

        $r2 := @parameter0: java.lang.Object[];

        $r3 = (android.view.View[]) $r2;

        $r1 = virtualinvoke r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: java.lang.String doInBackground(android.view.View[])>($r3);

        return $r1;
    }
    protected transient java.lang.String doInBackground(android.view.View[])
    {
        com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview r0;
        android.view.View[] $r1;
        com.ichi2.anki.stats.OverviewStatsBuilder r2;
        java.util.concurrent.locks.Lock $r3;
        boolean $z0;
        java.lang.Object[] $r4;
        android.view.View $r5;
        android.webkit.WebView $r6;
        android.widget.ProgressBar $r7;
        com.ichi2.anki.stats.AnkiStatsTaskHandler $r8;
        com.ichi2.libanki.Collection $r9;
        com.ichi2.libanki.Stats$AxisType $r10;
        java.lang.String $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview;

        $r1 := @parameter0: android.view.View[];

        $r3 = staticinvoke <com.ichi2.anki.stats.AnkiStatsTaskHandler: java.util.concurrent.locks.Lock access$000()>();

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: boolean mIsRunning>;

     label2:
        if $z0 != 0 goto label5;

     label3:
        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Quitting CreateStatisticsOverview before execution", $r4);

     label4:
        $r3 = staticinvoke <com.ichi2.anki.stats.AnkiStatsTaskHandler: java.util.concurrent.locks.Lock access$000()>();

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return null;

     label5:
        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Starting CreateStatisticsOverview", $r4);

        $r5 = $r1[0];

        $r6 = (android.webkit.WebView) $r5;

        r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.webkit.WebView mWebView> = $r6;

        $r5 = $r1[1];

        $r7 = (android.widget.ProgressBar) $r5;

        r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.widget.ProgressBar mProgressBar> = $r7;

        r2 = new com.ichi2.anki.stats.OverviewStatsBuilder;

        $r6 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.webkit.WebView mWebView>;

        $r8 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: com.ichi2.anki.stats.AnkiStatsTaskHandler this$0>;

        $r9 = staticinvoke <com.ichi2.anki.stats.AnkiStatsTaskHandler: com.ichi2.libanki.Collection access$100(com.ichi2.anki.stats.AnkiStatsTaskHandler)>($r8);

        $r8 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: com.ichi2.anki.stats.AnkiStatsTaskHandler this$0>;

        $z0 = staticinvoke <com.ichi2.anki.stats.AnkiStatsTaskHandler: boolean access$200(com.ichi2.anki.stats.AnkiStatsTaskHandler)>($r8);

        $r8 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: com.ichi2.anki.stats.AnkiStatsTaskHandler this$0>;

        $r10 = staticinvoke <com.ichi2.anki.stats.AnkiStatsTaskHandler: com.ichi2.libanki.Stats$AxisType access$300(com.ichi2.anki.stats.AnkiStatsTaskHandler)>($r8);

        specialinvoke r2.<com.ichi2.anki.stats.OverviewStatsBuilder: void <init>(android.webkit.WebView,com.ichi2.libanki.Collection,boolean,com.ichi2.libanki.Stats$AxisType)>($r6, $r9, $z0, $r10);

        $r11 = virtualinvoke r2.<com.ichi2.anki.stats.OverviewStatsBuilder: java.lang.String createInfoHtmlString()>();

     label6:
        $r3 = staticinvoke <com.ichi2.anki.stats.AnkiStatsTaskHandler: java.util.concurrent.locks.Lock access$000()>();

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r11;

     label7:
        $r12 := @caughtexception;

        $r3 = staticinvoke <com.ichi2.anki.stats.AnkiStatsTaskHandler: java.util.concurrent.locks.Lock access$000()>();

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
    protected void onCancelled()
    {
        com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview r0;

        r0 := @this: com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview;

        r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: boolean mIsRunning> = 0;

        return;
    }
    protected volatile void onPostExecute(java.lang.Object)
    {
        com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) $r1;

        virtualinvoke r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: void onPostExecute(java.lang.String)>($r2);

        return;
    }
    protected void onPostExecute(java.lang.String)
    {
        com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview r0;
        java.lang.String $r1;
        java.io.UnsupportedEncodingException r2;
        boolean $z0;
        android.webkit.WebView $r3;
        android.widget.ProgressBar $r4;
        android.content.Context $r5;
        int $i0;

        r0 := @this: com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label4;

        $z0 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: boolean mIsRunning>;

        if $z0 == 0 goto label4;

        $r3 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.webkit.WebView mWebView>;

     label1:
        $r1 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r1, "UTF-8");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\+", " ");

        virtualinvoke $r3.<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>($r1, "text/html; charset=utf-8", "utf-8");

     label2:
        $r4 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.widget.ProgressBar mProgressBar>;

        virtualinvoke $r4.<android.widget.ProgressBar: void setVisibility(int)>(8);

        $r3 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.webkit.WebView mWebView>;

        $r5 = virtualinvoke $r3.<android.webkit.WebView: android.content.Context getContext()>();

        $i0 = staticinvoke <com.ichi2.themes.Themes: int getColorFromAttr(android.content.Context,int)>($r5, 16842801);

        $r3 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.webkit.WebView mWebView>;

        virtualinvoke $r3.<android.webkit.WebView: void setBackgroundColor(int)>($i0);

        $r3 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.webkit.WebView mWebView>;

        virtualinvoke $r3.<android.webkit.WebView: void setVisibility(int)>(0);

        $r3 = r0.<com.ichi2.anki.stats.AnkiStatsTaskHandler$CreateStatisticsOverview: android.webkit.WebView mWebView>;

        virtualinvoke $r3.<android.webkit.WebView: void invalidate()>();

        return;

     label3:
        r2 := @caughtexception;

        virtualinvoke r2.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label2;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
