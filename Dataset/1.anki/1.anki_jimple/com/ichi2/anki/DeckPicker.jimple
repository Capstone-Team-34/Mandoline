com.ichi2.anki.DeckPicker extends com.ichi2.anki.NavigationDrawerActivity implements android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback com.ichi2.anki.StudyOptionsFragment$StudyOptionsListener com.ichi2.anki.dialogs.CustomStudyDialog$CustomStudyListener com.ichi2.anki.dialogs.ExportDialog$ExportDialogListener com.ichi2.anki.dialogs.ImportDialog$ImportDialogListener com.ichi2.anki.dialogs.MediaCheckDialog$MediaCheckDialogListener com.ichi2.anki.dialogs.SyncErrorDialog$SyncErrorDialogListener
private static final int ADD_NOTE
public static final long AUTOMATIC_SYNC_MIN_INTERVAL
private static final int LOG_IN_FOR_SYNC
private static final int REPORT_ERROR
public static final int REPORT_FEEDBACK
private static final int REQUEST_PATH_UPDATE
private static final int REQUEST_STORAGE_PERMISSION
public static final int RESULT_DB_ERROR
public static final int RESULT_MEDIA_EJECTED
private static final int SHOW_INFO_NEW_VERSION
private static final int SHOW_INFO_WELCOME
public static final int SHOW_STUDYOPTIONS
private static final int SWIPE_TO_SYNC_TRIGGER_DISTANCE
private com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu
private boolean mActivityPaused
private long mContextMenuDid
private final android.view.View$OnClickListener mCountsClickListener
private final android.view.View$OnClickListener mDeckClickListener
private final android.view.View$OnClickListener mDeckExpanderClickListener
private com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter
private final android.view.View$OnLongClickListener mDeckLongClickListener
private android.widget.EditText mDialogEditText
com.ichi2.async.DeckTask$TaskListener mExportListener
private long mFocusedDeck
com.ichi2.async.DeckTask$TaskListener mImportAddListener
com.ichi2.async.DeckTask$TaskListener mImportReplaceListener
private com.afollestad.materialdialogs.MaterialDialog mProgressDialog
private android.support.v4.widget.SwipeRefreshLayout mPullToSyncWrapper
boolean mRecommendFullSync
private android.support.v7.widget.RecyclerView mRecyclerView
private android.support.v7.widget.LinearLayoutManager mRecyclerViewLayoutManager
private android.widget.TextView mReviewSummaryTextView
com.ichi2.async.DeckTask$TaskListener mSimpleProgressListener
android.support.design.widget.Snackbar$Callback mSnackbarShowHideCallback
private android.view.View mStudyoptionsFrame
private com.ichi2.async.Connection$TaskListener mSyncListener
private boolean mSyncOnResume
private android.content.BroadcastReceiver mUnmountReceiver
    public void <init>()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.DeckPicker$1 $r1;
        com.ichi2.anki.DeckPicker$2 $r2;
        com.ichi2.anki.DeckPicker$3 $r3;
        com.ichi2.anki.DeckPicker$4 $r4;
        com.ichi2.anki.DeckPicker$5 $r5;
        com.ichi2.anki.DeckPicker$6 $r6;
        com.ichi2.anki.DeckPicker$7 $r7;
        com.ichi2.anki.DeckPicker$18 $r8;
        com.ichi2.anki.DeckPicker$26 $r9;
        com.ichi2.anki.DeckPicker$27 $r10;

        r0 := @this: com.ichi2.anki.DeckPicker;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void <init>()>();

        r0.<com.ichi2.anki.DeckPicker: android.content.BroadcastReceiver mUnmountReceiver> = null;

        r0.<com.ichi2.anki.DeckPicker: boolean mRecommendFullSync> = 0;

        r0.<com.ichi2.anki.DeckPicker: boolean mActivityPaused> = 0;

        r0.<com.ichi2.anki.DeckPicker: boolean mSyncOnResume> = 0;

        $r1 = new com.ichi2.anki.DeckPicker$1;

        specialinvoke $r1.<com.ichi2.anki.DeckPicker$1: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.view.View$OnClickListener mDeckExpanderClickListener> = $r1;

        $r2 = new com.ichi2.anki.DeckPicker$2;

        specialinvoke $r2.<com.ichi2.anki.DeckPicker$2: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.view.View$OnClickListener mDeckClickListener> = $r2;

        $r3 = new com.ichi2.anki.DeckPicker$3;

        specialinvoke $r3.<com.ichi2.anki.DeckPicker$3: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.view.View$OnClickListener mCountsClickListener> = $r3;

        $r4 = new com.ichi2.anki.DeckPicker$4;

        specialinvoke $r4.<com.ichi2.anki.DeckPicker$4: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.view.View$OnLongClickListener mDeckLongClickListener> = $r4;

        $r5 = new com.ichi2.anki.DeckPicker$5;

        specialinvoke $r5.<com.ichi2.anki.DeckPicker$5: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mImportAddListener> = $r5;

        $r6 = new com.ichi2.anki.DeckPicker$6;

        specialinvoke $r6.<com.ichi2.anki.DeckPicker$6: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mImportReplaceListener> = $r6;

        $r7 = new com.ichi2.anki.DeckPicker$7;

        specialinvoke $r7.<com.ichi2.anki.DeckPicker$7: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mExportListener> = $r7;

        $r8 = new com.ichi2.anki.DeckPicker$18;

        specialinvoke $r8.<com.ichi2.anki.DeckPicker$18: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.Connection$TaskListener mSyncListener> = $r8;

        $r9 = new com.ichi2.anki.DeckPicker$26;

        specialinvoke $r9.<com.ichi2.anki.DeckPicker$26: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mSimpleProgressListener> = $r9;

        $r10 = new com.ichi2.anki.DeckPicker$27;

        specialinvoke $r10.<com.ichi2.anki.DeckPicker$27: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.support.design.widget.Snackbar$Callback mSnackbarShowHideCallback> = $r10;

        return;
    }
    static void access$000(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        return;
    }
    static com.getbase.floatingactionbutton.FloatingActionsMenu access$100(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        com.getbase.floatingactionbutton.FloatingActionsMenu r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        r1 = $r0.<com.ichi2.anki.DeckPicker: com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu>;

        return r1;
    }
    static void access$1000(com.ichi2.anki.DeckPicker, int, java.lang.String)
    {
        com.ichi2.anki.DeckPicker $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void showSyncLogMessage(int,java.lang.String)>($i0, $r1);

        return;
    }
    static java.lang.String access$1100(com.ichi2.anki.DeckPicker, java.lang.String, java.lang.String)
    {
        com.ichi2.anki.DeckPicker $r0;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r1 = specialinvoke $r0.<com.ichi2.anki.DeckPicker: java.lang.String joinSyncMessages(java.lang.String,java.lang.String)>($r1, $r2);

        return $r1;
    }
    static void access$1200(com.ichi2.anki.DeckPicker, java.lang.String)
    {
        com.ichi2.anki.DeckPicker $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void showSyncErrorMessage(java.lang.String)>($r1);

        return;
    }
    static void access$1300(com.ichi2.anki.DeckPicker, boolean)
    {
        com.ichi2.anki.DeckPicker $r0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void loadStudyOptionsFragment(boolean)>($z0);

        return;
    }
    static android.view.View access$1400(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        android.view.View r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        r1 = $r0.<com.ichi2.anki.DeckPicker: android.view.View mStudyoptionsFrame>;

        return r1;
    }
    static long access$1500(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        long l0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        l0 = $r0.<com.ichi2.anki.DeckPicker: long mFocusedDeck>;

        return l0;
    }
    static long access$1502(com.ichi2.anki.DeckPicker, long)
    {
        com.ichi2.anki.DeckPicker $r0;
        long $l0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $l0 := @parameter1: long;

        $r0.<com.ichi2.anki.DeckPicker: long mFocusedDeck> = $l0;

        return $l0;
    }
    static void access$1600(com.ichi2.anki.DeckPicker, long)
    {
        com.ichi2.anki.DeckPicker $r0;
        long $l0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $l0 := @parameter1: long;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void scrollDecklistToDeck(long)>($l0);

        return;
    }
    static android.widget.TextView access$1700(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        android.widget.TextView r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        r1 = $r0.<com.ichi2.anki.DeckPicker: android.widget.TextView mReviewSummaryTextView>;

        return r1;
    }
    static void access$200(com.ichi2.anki.DeckPicker, long, boolean)
    {
        com.ichi2.anki.DeckPicker $r0;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $l0 := @parameter1: long;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void handleDeckSelection(long,boolean)>($l0, $z0);

        return;
    }
    static com.ichi2.anki.widgets.DeckAdapter access$300(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        com.ichi2.anki.widgets.DeckAdapter r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        r1 = $r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        return r1;
    }
    static long access$402(com.ichi2.anki.DeckPicker, long)
    {
        com.ichi2.anki.DeckPicker $r0;
        long $l0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $l0 := @parameter1: long;

        $r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid> = $l0;

        return $l0;
    }
    static com.afollestad.materialdialogs.MaterialDialog access$500(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        com.afollestad.materialdialogs.MaterialDialog r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        r1 = $r0.<com.ichi2.anki.DeckPicker: com.afollestad.materialdialogs.MaterialDialog mProgressDialog>;

        return r1;
    }
    static com.afollestad.materialdialogs.MaterialDialog access$502(com.ichi2.anki.DeckPicker, com.afollestad.materialdialogs.MaterialDialog)
    {
        com.ichi2.anki.DeckPicker $r0;
        com.afollestad.materialdialogs.MaterialDialog $r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $r1 := @parameter1: com.afollestad.materialdialogs.MaterialDialog;

        $r0.<com.ichi2.anki.DeckPicker: com.afollestad.materialdialogs.MaterialDialog mProgressDialog> = $r1;

        return $r1;
    }
    static android.support.v4.widget.SwipeRefreshLayout access$600(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        android.support.v4.widget.SwipeRefreshLayout r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        r1 = $r0.<com.ichi2.anki.DeckPicker: android.support.v4.widget.SwipeRefreshLayout mPullToSyncWrapper>;

        return r1;
    }
    static android.widget.EditText access$700(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;
        android.widget.EditText r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        r1 = $r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        return r1;
    }
    static android.widget.EditText access$702(com.ichi2.anki.DeckPicker, android.widget.EditText)
    {
        com.ichi2.anki.DeckPicker $r0;
        android.widget.EditText $r1;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $r1 := @parameter1: android.widget.EditText;

        $r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText> = $r1;

        return $r1;
    }
    static void access$800(com.ichi2.anki.DeckPicker, boolean)
    {
        com.ichi2.anki.DeckPicker $r0;
        boolean $z0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>($z0);

        return;
    }
    static void access$900(com.ichi2.anki.DeckPicker)
    {
        com.ichi2.anki.DeckPicker $r0;

        $r0 := @parameter0: com.ichi2.anki.DeckPicker;

        specialinvoke $r0.<com.ichi2.anki.DeckPicker: void openReviewer()>();

        return;
    }
    private void automaticSync()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.Context $r1;
        android.content.SharedPreferences $r2;
        java.lang.String $r3;
        long $l0, $l2;
        int $i1;
        boolean $z0;
        byte $b3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Context getBaseContext()>();

        $r2 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r1);

        $r3 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("hkey", "");

        $l0 = interfaceinvoke $r2.<android.content.SharedPreferences: long getLong(java.lang.String,long)>("lastSyncTime", 0L);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 == 0 goto label1;

        $z0 = interfaceinvoke $r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("automaticSyncMode", 0);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <com.ichi2.async.Connection: boolean isOnline()>();

        if $z0 == 0 goto label1;

        $l2 = staticinvoke <com.ichi2.libanki.Utils: long intNow(int)>(1000);

        $l0 = $l2 - $l0;

        $b3 = $l0 cmp 600000L;

        if $b3 <= 0 goto label1;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void sync()>();

     label1:
        return;
    }
    private void configureFloatingActionsMenu()
    {
        com.ichi2.anki.DeckPicker r0;
        android.view.View $r1;
        com.getbase.floatingactionbutton.FloatingActionButton r2, r3, r4;
        com.ichi2.anki.DeckPicker$10 $r5;
        com.ichi2.anki.DeckPicker$11 $r6;
        com.ichi2.anki.DeckPicker$12 $r7;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755187);

        r2 = (com.getbase.floatingactionbutton.FloatingActionButton) $r1;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755188);

        r3 = (com.getbase.floatingactionbutton.FloatingActionButton) $r1;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755185);

        r4 = (com.getbase.floatingactionbutton.FloatingActionButton) $r1;

        $r5 = new com.ichi2.anki.DeckPicker$10;

        specialinvoke $r5.<com.ichi2.anki.DeckPicker$10: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        virtualinvoke r2.<com.getbase.floatingactionbutton.FloatingActionButton: void setOnClickListener(android.view.View$OnClickListener)>($r5);

        $r6 = new com.ichi2.anki.DeckPicker$11;

        specialinvoke $r6.<com.ichi2.anki.DeckPicker$11: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        virtualinvoke r3.<com.getbase.floatingactionbutton.FloatingActionButton: void setOnClickListener(android.view.View$OnClickListener)>($r6);

        $r7 = new com.ichi2.anki.DeckPicker$12;

        specialinvoke $r7.<com.ichi2.anki.DeckPicker$12: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        virtualinvoke r4.<com.getbase.floatingactionbutton.FloatingActionButton: void setOnClickListener(android.view.View$OnClickListener)>($r7);

        return;
    }
    private void finishWithAnimation()
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int DOWN>;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void finishWithAnimation(int)>($i0);

        return;
    }
    private boolean firstCollectionOpen()
    {
        com.ichi2.anki.DeckPicker r0;
        boolean $z0;
        com.ichi2.anki.CollectionHelper $r1;
        com.ichi2.libanki.Collection $r2;
        java.lang.String[] $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $z0 = staticinvoke <com.ichi2.anki.CollectionHelper: boolean hasStorageAccessPermission(android.content.Context)>(r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r2 = virtualinvoke $r1.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getColSafe(android.content.Context)>(r0);

        if $r2 != null goto label2;

        return 0;

     label1:
        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "android.permission.WRITE_EXTERNAL_STORAGE";

        staticinvoke <android.support.v4.app.ActivityCompat: void requestPermissions(android.app.Activity,java.lang.String[],int)>(r0, $r3, 0);

        return 0;

     label2:
        return 1;
    }
    private void handleDeckSelection(long, boolean)
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0, $l1;
        boolean $z0, $z1;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Decks $r2;
        byte $b2;
        com.ichi2.libanki.Sched $r3;
        com.ichi2.anki.widgets.DeckAdapter $r4;
        int $i3, $i4;
        java.util.List $r5;
        java.lang.Object $r6;
        com.ichi2.libanki.Sched$DeckDueTreeNode r7;
        int[] $r8;
        java.lang.Boolean $r9;
        com.ichi2.anki.DeckPicker$20 $r10;
        android.view.View $r11;
        android.support.design.widget.Snackbar$Callback $r12;
        java.lang.Long[] $r13;
        java.lang.Long $r14;
        android.content.res.Resources $r15;
        java.lang.String $r16;
        android.net.Uri $r17;
        com.ichi2.anki.DeckPicker$21 $r18;
        com.ichi2.anki.DeckPicker$22 $r19;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke $r2.<com.ichi2.libanki.Decks: long selected()>();

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label01;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        virtualinvoke $r1.<com.ichi2.libanki.Collection: void clearUndo()>();

     label01:
        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r2.<com.ichi2.libanki.Decks: void select(long)>($l0);

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r3.<com.ichi2.libanki.Sched: void reset()>();

        r0.<com.ichi2.anki.DeckPicker: long mFocusedDeck> = $l0;

        $r4 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        $i3 = virtualinvoke $r4.<com.ichi2.anki.widgets.DeckAdapter: int findDeckPosition(long)>($l0);

        $r4 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        $r5 = virtualinvoke $r4.<com.ichi2.anki.widgets.DeckAdapter: java.util.List getDeckList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i3);

        r7 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r6;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r8 = virtualinvoke $r3.<com.ichi2.libanki.Sched: int[] counts()>();

        $i3 = r7.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        $i4 = r7.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        $i3 = $i3 + $i4;

        $i4 = r7.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        $i3 = $i3 + $i4;

        if $i3 <= 0 goto label04;

        $r9 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z1 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label02;

        if $z0 == 0 goto label03;

     label02:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>(0);

        return;

     label03:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openReviewer()>();

        return;

     label04:
        $i3 = $r8[0];

        $i4 = $r8[1];

        $i3 = $i3 + $i4;

        $i4 = $r8[2];

        $i3 = $i3 + $i4;

        if $i3 <= 0 goto label05;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>(0);

        return;

     label05:
        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $z0 = virtualinvoke $r3.<com.ichi2.libanki.Sched: boolean newDue()>();

        if $z0 != 0 goto label06;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $z0 = virtualinvoke $r3.<com.ichi2.libanki.Sched: boolean revDue()>();

        if $z0 == 0 goto label08;

     label06:
        $r10 = new com.ichi2.anki.DeckPicker$20;

        specialinvoke $r10.<com.ichi2.anki.DeckPicker$20: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r11 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755129);

        $r12 = r0.<com.ichi2.anki.DeckPicker: android.support.design.widget.Snackbar$Callback mSnackbarShowHideCallback>;

        staticinvoke <com.ichi2.anki.UIUtils: void showSnackbar(android.app.Activity,int,boolean,int,android.view.View$OnClickListener,android.view.View,android.support.design.widget.Snackbar$Callback)>(r0, 2131231378, 0, 2131231367, $r10, $r11, $r12);

        $r9 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label07;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>(0);

        return;

     label07:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        return;

     label08:
        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $z0 = virtualinvoke $r2.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l0);

        if $z0 == 0 goto label09;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>(0);

        return;

     label09:
        $r5 = r7.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.util.List children>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i3 != 0 goto label11;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r13 = newarray (java.lang.Long)[1];

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r13[0] = $r14;

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Collection: int cardCount(java.lang.Long[])>($r13);

        if $i3 != 0 goto label11;

        $r15 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r16 = virtualinvoke $r15.<android.content.res.Resources: java.lang.String getString(int)>(2131231544);

        $r17 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r16);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void mayOpenUrl(android.net.Uri)>($r17);

        $r18 = new com.ichi2.anki.DeckPicker$21;

        specialinvoke $r18.<com.ichi2.anki.DeckPicker$21: void <init>(com.ichi2.anki.DeckPicker,android.net.Uri)>(r0, $r17);

        $r11 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755129);

        $r12 = r0.<com.ichi2.anki.DeckPicker: android.support.design.widget.Snackbar$Callback mSnackbarShowHideCallback>;

        staticinvoke <com.ichi2.anki.UIUtils: void showSnackbar(android.app.Activity,int,boolean,int,android.view.View$OnClickListener,android.view.View,android.support.design.widget.Snackbar$Callback)>(r0, 2131231002, 0, 2131231065, $r18, $r11, $r12);

        $r9 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label10;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>(0);

        return;

     label10:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        return;

     label11:
        $r19 = new com.ichi2.anki.DeckPicker$22;

        specialinvoke $r19.<com.ichi2.anki.DeckPicker$22: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r11 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755129);

        $r12 = r0.<com.ichi2.anki.DeckPicker: android.support.design.widget.Snackbar$Callback mSnackbarShowHideCallback>;

        staticinvoke <com.ichi2.anki.UIUtils: void showSnackbar(android.app.Activity,int,boolean,int,android.view.View$OnClickListener,android.view.View,android.support.design.widget.Snackbar$Callback)>(r0, 2131231376, 0, 2131230868, $r19, $r11, $r12);

        $r9 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label12;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>(0);

        return;

     label12:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        return;
    }
    private java.lang.String joinSyncMessages(java.lang.String, java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1, r2;
        boolean $z0;
        java.lang.StringBuilder $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return r2;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        return r2;
    }
    private void loadStudyOptionsFragment(boolean)
    {
        com.ichi2.anki.DeckPicker r0;
        boolean $z0;
        com.ichi2.anki.StudyOptionsFragment $r1;
        android.support.v4.app.FragmentManager $r2;
        android.support.v4.app.FragmentTransaction $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.ichi2.anki.StudyOptionsFragment: com.ichi2.anki.StudyOptionsFragment newInstance(boolean)>($z0);

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.support.v4.app.FragmentManager getSupportFragmentManager()>();

        $r3 = virtualinvoke $r2.<android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()>();

        virtualinvoke $r3.<android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment)>(2131755193, $r1);

        virtualinvoke $r3.<android.support.v4.app.FragmentTransaction: int commit()>();

        return;
    }
    private void onFinishedStartup()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.exception.ConfirmModSchemaException r1;
        android.os.Bundle r2;
        com.ichi2.libanki.Collection $r3;
        java.lang.String $r4;
        boolean $z0;
        java.lang.Boolean $r5;
        android.content.res.Resources $r6;
        android.os.Message $r7;
        java.lang.StringBuilder $r8;
        com.ichi2.anki.dialogs.DialogHandler $r9;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: java.lang.String getPath()>();

        staticinvoke <com.ichi2.anki.BackupManager: boolean performBackupInBackground(java.lang.String)>($r4);

        $z0 = r0.<com.ichi2.anki.DeckPicker: boolean mRecommendFullSync>;

        if $z0 == 0 goto label2;

        r0.<com.ichi2.anki.DeckPicker: boolean mRecommendFullSync> = 0;

     label1:
        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        virtualinvoke $r3.<com.ichi2.libanki.Collection: void modSchema()>();

     label2:
        $r5 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void loadStudyOptionsFragment(boolean)>(0);

     label3:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void automaticSync()>();

        return;

     label4:
        r1 := @caughtexception;

        $r6 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r7 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        $r7.<android.os.Message: int what> = 7;

        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int)>(2131231052);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r4 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int)>(2131231051);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("message", $r4);

        virtualinvoke $r7.<android.os.Message: void setData(android.os.Bundle)>(r2);

        $r9 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.dialogs.DialogHandler getDialogHandler()>();

        virtualinvoke $r9.<com.ichi2.anki.dialogs.DialogHandler: boolean sendMessage(android.os.Message)>($r7);

        goto label2;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label1 to label2 with label4;
    }
    private void openReviewer()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.Intent r1;
        int $i0;
        com.ichi2.libanki.Collection $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/Reviewer;");

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r1, 901, $i0);

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        virtualinvoke $r2.<com.ichi2.libanki.Collection: void startTimebox()>();

        return;
    }
    private void openStudyOptions(boolean)
    {
        com.ichi2.anki.DeckPicker r0;
        boolean $z0, $z1;
        android.content.Intent r1;
        int $i0;
        java.lang.Boolean $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $z0 := @parameter0: boolean;

        $r2 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z1 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void loadStudyOptionsFragment(boolean)>($z0);

        return;

     label1:
        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("withDeckOptions", $z0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/StudyOptionsActivity;");

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r1, 11, $i0);

        return;
    }
    private void registerExternalStorageListener()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.IntentFilter r1;
        android.content.BroadcastReceiver $r2;
        com.ichi2.anki.DeckPicker$19 $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r2 = r0.<com.ichi2.anki.DeckPicker: android.content.BroadcastReceiver mUnmountReceiver>;

        if $r2 != null goto label1;

        $r3 = new com.ichi2.anki.DeckPicker$19;

        specialinvoke $r3.<com.ichi2.anki.DeckPicker$19: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.content.BroadcastReceiver mUnmountReceiver> = $r3;

        r1 = new android.content.IntentFilter;

        specialinvoke r1.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("com.ichi2.anki.action.MEDIA_EJECT");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("com.ichi2.anki.action.MEDIA_MOUNT");

        $r2 = r0.<com.ichi2.anki.DeckPicker: android.content.BroadcastReceiver mUnmountReceiver>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r2, r1);

     label1:
        return;
    }
    private void scrollDecklistToDeck(long)
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;
        com.ichi2.anki.widgets.DeckAdapter $r1;
        int $i1, $i2;
        android.support.v7.widget.LinearLayoutManager $r2;
        android.support.v7.widget.RecyclerView $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 := @parameter0: long;

        $r1 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        $i1 = virtualinvoke $r1.<com.ichi2.anki.widgets.DeckAdapter: int findDeckPosition(long)>($l0);

        $r2 = r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.LinearLayoutManager mRecyclerViewLayoutManager>;

        $r3 = r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.RecyclerView mRecyclerView>;

        $i2 = virtualinvoke $r3.<android.support.v7.widget.RecyclerView: int getHeight()>();

        $i2 = $i2 / 2;

        virtualinvoke $r2.<android.support.v7.widget.LinearLayoutManager: void scrollToPositionWithOffset(int,int)>($i1, $i2);

        return;
    }
    private void showStartupScreensAndDialogs(android.content.SharedPreferences, int)
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.SharedPreferences $r1;
        int $i0, $i1, i2;
        android.content.Intent r2;
        java.io.File r3;
        java.lang.String $r4, $r8;
        boolean $z0;
        com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog $r5;
        com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog $r6;
        android.content.SharedPreferences$Editor $r7;
        com.ichi2.libanki.Collection $r9;
        com.ichi2.libanki.Models $r10;
        java.util.ArrayList $r11;
        java.util.Iterator $r12;
        java.lang.Object $r13;
        org.json.JSONObject r14;
        org.json.JSONException r15;
        java.lang.Object[] $r16;
        android.content.Context $r17;
        java.lang.ClassCastException r18;
        android.content.res.Resources $r19;
        android.view.View $r20;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: android.content.SharedPreferences;

        $i0 := @parameter1: int;

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getCurrentAnkiDroidDirectory(android.content.Context)>(r0);

        $z0 = staticinvoke <com.ichi2.anki.BackupManager: boolean enoughDiscSpace(java.lang.String)>($r4);

        if $z0 != 0 goto label01;

        $r5 = staticinvoke <com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog: com.ichi2.anki.dialogs.DeckPickerNoSpaceLeftDialog newInstance()>();

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDialogFragment(android.support.v4.app.DialogFragment)>($r5);

        return;

     label01:
        $z0 = interfaceinvoke $r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("noSpaceLeft", 0);

        if $z0 == 0 goto label02;

        $r6 = staticinvoke <com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog: com.ichi2.anki.dialogs.DeckPickerBackupNoSpaceLeftDialog newInstance()>();

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDialogFragment(android.support.v4.app.DialogFragment)>($r6);

        $r7 = interfaceinvoke $r1.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r7 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("noSpaceLeft");

        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: boolean commit()>();

        return;

     label02:
        $r4 = interfaceinvoke $r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("lastVersion", "");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label03;

        $r7 = interfaceinvoke $r1.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = staticinvoke <com.ichi2.utils.VersionUtils: java.lang.String getPkgVersionName()>();

        $r7 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("lastVersion", $r4);

        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: boolean commit()>();

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void onFinishedStartup()>();

        return;

     label03:
        if $i0 >= 2 goto label30;

        $r4 = interfaceinvoke $r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("lastVersion", "");

        $r8 = staticinvoke <com.ichi2.utils.VersionUtils: java.lang.String getPkgVersionName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label30;

        $i1 = staticinvoke <com.ichi2.utils.VersionUtils: int getPkgVersionCode()>();

        $z0 = interfaceinvoke $r1.<android.content.SharedPreferences: boolean contains(java.lang.String)>("lastUpgradeVersion");

        if $z0 != 0 goto label20;

        i2 = $i1;

     label04:
        $r7 = interfaceinvoke $r1.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r7 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("lastUpgradeVersion", $i1);

        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: boolean commit()>();

        $r7 = interfaceinvoke $r1.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r7 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("sentExceptionReports");

        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: boolean commit()>();

        if i2 >= 20300200 goto label05;

        r3 = new java.io.File;

        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getCurrentAnkiDroidDirectory(android.content.Context)>(r0);

        specialinvoke r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r4, "collection.media.ad.db2");

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label05;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label05:
        if i2 >= 20301208 goto label06;

        r0.<com.ichi2.anki.DeckPicker: boolean mRecommendFullSync> = 1;

     label06:
        if i2 >= 20600123 goto label17;

     label07:
        $r9 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r11 = virtualinvoke $r10.<com.ichi2.libanki.Models: java.util.ArrayList all()>();

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

     label09:
        if $z0 == 0 goto label24;

     label10:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

     label11:
        r14 = (org.json.JSONObject) $r13;

     label12:
        $r4 = virtualinvoke r14.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("css");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("font-familiy");

     label13:
        if $z0 == 0 goto label08;

     label14:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("font-familiy", "font-family");

        virtualinvoke r14.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("css", $r4);

        virtualinvoke $r10.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>(r14);

     label15:
        goto label08;

     label16:
        r15 := @caughtexception;

        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r15, "Failed to upgrade css definitions.", $r16);

     label17:
        if i2 < 40 goto label18;

        if i2 >= 20500225 goto label27;

     label18:
        if i2 >= 20500225 goto label19;

        if $i1 < 20500225 goto label19;

        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Upgrading preferences", $r16);

        $r17 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Context getApplicationContext()>();

        staticinvoke <com.ichi2.compat.CompatHelper: void removeHiddenPreferences(android.content.Context)>($r17);

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void upgradePreferences(int)>(i2);

     label19:
        if i2 >= 40 goto label26;

        if $i1 < 40 goto label26;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void integrityCheck()>();

        return;

     label20:
        i2 = interfaceinvoke $r1.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("lastUpgradeVersion", $i1);

     label21:
        goto label04;

     label22:
        r18 := @caughtexception;

        $r4 = interfaceinvoke $r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("lastUpgradeVersion", "");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("2.0.2");

        if $z0 == 0 goto label23;

        i2 = 40;

        goto label04;

     label23:
        i2 = 0;

        goto label04;

     label24:
        virtualinvoke $r10.<com.ichi2.libanki.Models: void flush()>();

     label25:
        goto label17;

     label26:
        if i2 >= 20500225 goto label31;

        if $i1 < 20500225 goto label31;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void restartActivity()>();

        return;

     label27:
        $z0 = staticinvoke <com.ichi2.utils.VersionUtils: boolean isReleaseVersion()>();

        if $z0 == 0 goto label29;

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/Info;");

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("infoType", 2);

        if $i0 == 0 goto label28;

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r2, 9, $i0);

        return;

     label28:
        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithoutAnimation(android.content.Intent,int)>(r2, 9);

        return;

     label29:
        $r7 = interfaceinvoke $r1.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = staticinvoke <com.ichi2.utils.VersionUtils: java.lang.String getPkgVersionName()>();

        $r7 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("lastVersion", $r4);

        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: void apply()>();

        $r19 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r16 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <com.ichi2.utils.VersionUtils: java.lang.String getPkgVersionName()>();

        $r16[0] = $r4;

        $r4 = virtualinvoke $r19.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231490, $r16);

        $r20 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755129);

        staticinvoke <com.ichi2.anki.UIUtils: void showSnackbar(android.app.Activity,java.lang.String,boolean,int,android.view.View$OnClickListener,android.view.View,android.support.design.widget.Snackbar$Callback)>(r0, $r4, 1, -1, null, $r20, null);

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void showStartupScreensAndDialogs(android.content.SharedPreferences,int)>($r1, 2);

        return;

     label30:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void onFinishedStartup()>();

     label31:
        return;

        catch org.json.JSONException from label07 to label09 with label16;
        catch org.json.JSONException from label10 to label11 with label16;
        catch org.json.JSONException from label12 to label13 with label16;
        catch org.json.JSONException from label14 to label15 with label16;
        catch java.lang.ClassCastException from label20 to label21 with label22;
        catch org.json.JSONException from label24 to label25 with label16;
    }
    private void showSyncErrorMessage(java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1, $r3;
        android.content.res.Resources $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>(2131231407);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showSimpleMessageDialog(java.lang.String,java.lang.String,boolean)>($r3, $r1, 1);

        return;
    }
    private void showSyncLogMessage(int, java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        boolean $z0;
        android.content.res.Resources $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $z0 = r0.<com.ichi2.anki.DeckPicker: boolean mActivityPaused>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.res.Resources getAppResources()>();

        $r1 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>(2131231527);

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showSimpleNotification(java.lang.String,java.lang.String)>($r1, $r3);

        return;

     label1:
        if $r1 == null goto label2;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

     label2:
        staticinvoke <com.ichi2.anki.UIUtils: void showSimpleSnackbar(android.app.Activity,int,boolean)>(r0, $i0, 0);

        return;

     label3:
        $r2 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.res.Resources getAppResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showSimpleMessageDialog(java.lang.String,java.lang.String,boolean)>($r3, $r1, 0);

        return;
    }
    private void undo()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.res.Resources $r1;
        java.lang.String $r2, $r4;
        com.ichi2.libanki.Collection $r3;
        boolean $z0;
        com.ichi2.anki.DeckPicker$14 $r5;
        com.ichi2.async.DeckTask$TaskData[] $r6;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(2131231486);

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: java.lang.String undoName(android.content.res.Resources)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        $r5 = new com.ichi2.anki.DeckPicker$14;

        specialinvoke $r5.<com.ichi2.anki.DeckPicker$14: void <init>(com.ichi2.anki.DeckPicker,boolean)>(r0, $z0);

        $r6 = newarray (com.ichi2.async.DeckTask$TaskData)[0];

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(8, $r5, $r6);

        return;
    }
    private void updateDeckList()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.DeckPicker$23 $r1;
        com.ichi2.async.DeckTask$TaskData[] $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = new com.ichi2.anki.DeckPicker$23;

        specialinvoke $r1.<com.ichi2.anki.DeckPicker$23: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r2 = newarray (com.ichi2.async.DeckTask$TaskData)[0];

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(22, $r1, $r2);

        return;
    }
    private void upgradePreferences(int)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0, $i1;
        java.lang.ClassCastException r1;
        android.content.Context $r2;
        android.content.SharedPreferences $r3;
        android.content.SharedPreferences$Editor $r4;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Context getBaseContext()>();

        $r3 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r2);

        if $i0 >= 20300130 goto label01;

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()>();

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

     label01:
        if $i0 >= 20500135 goto label03;

        $i0 = interfaceinvoke $r3.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("relativeDisplayFontSize", 100);

        $i1 = interfaceinvoke $r3.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("relativeImageSize", 100);

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("cardZoom", $i0);

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("imageZoom", $i1);

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

        $z0 = interfaceinvoke $r3.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("useBackup", 1);

        if $z0 != 0 goto label02;

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("backupMax", 0);

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

     label02:
        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("useBackup");

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("intentAdditionInstantAdd");

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

     label03:
        $z0 = interfaceinvoke $r3.<android.content.SharedPreferences: boolean contains(java.lang.String)>("fullscreenReview");

        if $z0 == 0 goto label10;

     label04:
        $z0 = interfaceinvoke $r3.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("fullscreenReview", 0);

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

     label05:
        if $z0 == 0 goto label08;

        $r5 = "1";

     label06:
        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("fullscreenMode", $r5);

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

     label07:
        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("fullscreenReview");

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

        return;

     label08:
        $r5 = "0";

        goto label06;

     label09:
        r1 := @caughtexception;

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("fullscreenMode");

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

        goto label07;

     label10:
        return;

        catch java.lang.ClassCastException from label04 to label05 with label09;
        catch java.lang.ClassCastException from label06 to label07 with label09;
    }
    public void addNote()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.Intent r1;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/NoteEditor;");

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("CALLER", 3);

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r1, 12, $i0);

        return;
    }
    public void addSharedDeck()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.res.Resources $r1;
        java.lang.String $r2;
        android.net.Uri $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(2131231559);

        $r3 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r2);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void openUrl(android.net.Uri)>($r3);

        return;
    }
    public void confirmDeckDeletion()
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void confirmDeckDeletion(long)>($l0);

        return;
    }
    public void confirmDeckDeletion(long)
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0, $l4;
        long[] r1;
        int i1, i3;
        android.content.res.Resources $r2;
        boolean $z0;
        byte $b2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        java.util.TreeMap $r5;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        java.lang.Long r9;
        java.lang.String $r10;
        com.ichi2.libanki.DB $r11;
        java.lang.StringBuilder $r12;
        java.lang.Object[] $r13;
        com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog $r14;
        java.lang.Integer $r15;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 := @parameter0: long;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: boolean colIsOpen()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $b2 = $l0 cmp 1L;

        if $b2 != 0 goto label2;

        staticinvoke <com.ichi2.anki.UIUtils: void showSimpleSnackbar(android.app.Activity,int,boolean)>(r0, 2131230964, 1);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void dismissAllDialogFragments()>();

        return;

     label2:
        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.util.TreeMap children(long)>($l0);

        i1 = virtualinvoke $r5.<java.util.TreeMap: int size()>();

        i1 = i1 + 1;

        r1 = newarray (long)[i1];

        r1[0] = $l0;

        i3 = 1;

        $r6 = virtualinvoke $r5.<java.util.TreeMap: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.Long) $r8;

        $l4 = virtualinvoke r9.<java.lang.Long: long longValue()>();

        r1[i3] = $l4;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r10 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String ids2str(long[])>(r1);

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r11 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select count() from cards where did in ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or odid in ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = virtualinvoke $r11.<com.ichi2.libanki.DB: int queryScalar(java.lang.String)>($r10);

        if i1 != 0 goto label5;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void deleteDeck(long)>($l0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void dismissAllDialogFragments()>();

        return;

     label5:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.lang.String name(long)>($l0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $z0 = virtualinvoke $r4.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l0);

        if $z0 == 0 goto label7;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = $r10;

        $r10 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131230962, $r13);

     label6:
        $r14 = staticinvoke <com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog: com.ichi2.anki.dialogs.DeckPickerConfirmDeleteDeckDialog newInstance(java.lang.String)>($r10);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDialogFragment(android.support.v4.app.DialogFragment)>($r14);

        return;

     label7:
        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = $r10;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13[1] = $r15;

        $r10 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>(2131361797, i1, $r13);

        goto label6;
    }
    public void deleteContextMenuDeck()
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void deleteDeck(long)>($l0);

        return;
    }
    public void deleteDeck(long)
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;
        com.ichi2.anki.DeckPicker$25 $r1;
        com.ichi2.async.DeckTask$TaskData $r2;
        com.ichi2.async.DeckTask$TaskData[] $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 := @parameter0: long;

        $r1 = new com.ichi2.anki.DeckPicker$25;

        specialinvoke $r1.<com.ichi2.anki.DeckPicker$25: void <init>(com.ichi2.anki.DeckPicker,long)>(r0, $l0);

        $r3 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r2 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r2.<com.ichi2.async.DeckTask$TaskData: void <init>(long)>($l0);

        $r3[0] = $r2;

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(25, $r1, $r3);

        return;
    }
    public void deleteUnused(java.util.List)
    {
        com.ichi2.anki.DeckPicker r0;
        java.util.List r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Media $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String r6;
        android.content.res.Resources $r7;
        java.lang.Object[] $r8;
        int $i0;
        java.lang.Integer $r9;

        r0 := @this: com.ichi2.anki.DeckPicker;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        virtualinvoke $r3.<com.ichi2.libanki.Media: void removeFile(java.lang.String)>(r6);

        goto label1;

     label2:
        $r7 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        r6 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131230837);

        $r8 = newarray (java.lang.Object)[1];

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[0] = $r9;

        r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r6, $r8);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showSimpleMessageDialog(java.lang.String)>(r6);

        return;
    }
    public void emailFile(java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1;
        java.io.File r2;
        java.lang.IllegalArgumentException r3;
        boolean $z0;
        java.lang.Object[] $r4;
        android.content.res.Resources $r5;
        com.ichi2.compat.Compat $r6;
        android.net.Uri $r7;
        android.support.v4.app.ShareCompat$IntentBuilder $r8;
        android.content.Intent $r9;
        android.content.pm.PackageManager $r10;
        android.content.ComponentName $r11;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Specified apkg file %s does not exist", $r4);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131230762);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r1, 0);

        return;

     label1:
        $r6 = staticinvoke <com.ichi2.compat.CompatHelper: com.ichi2.compat.Compat getCompat()>();

        $r7 = interfaceinvoke $r6.<com.ichi2.compat.Compat: android.net.Uri getExportUri(android.content.Context,java.io.File)>(r0, r2);

     label2:
        $r8 = staticinvoke <android.support.v4.app.ShareCompat$IntentBuilder: android.support.v4.app.ShareCompat$IntentBuilder 'from'(android.app.Activity)>(r0);

        $r8 = virtualinvoke $r8.<android.support.v4.app.ShareCompat$IntentBuilder: android.support.v4.app.ShareCompat$IntentBuilder setType(java.lang.String)>("application/apkg");

        $r8 = virtualinvoke $r8.<android.support.v4.app.ShareCompat$IntentBuilder: android.support.v4.app.ShareCompat$IntentBuilder setStream(android.net.Uri)>($r7);

        $r4 = newarray (java.lang.Object)[1];

        $r1 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r4[0] = $r1;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: java.lang.String getString(int,java.lang.Object[])>(2131231019, $r4);

        $r8 = virtualinvoke $r8.<android.support.v4.app.ShareCompat$IntentBuilder: android.support.v4.app.ShareCompat$IntentBuilder setSubject(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: java.lang.String getString(int)>(2131231020);

        $r8 = virtualinvoke $r8.<android.support.v4.app.ShareCompat$IntentBuilder: android.support.v4.app.ShareCompat$IntentBuilder setHtmlText(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<android.support.v4.app.ShareCompat$IntentBuilder: android.content.Intent getIntent()>();

        $r10 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.pm.PackageManager getPackageManager()>();

        $r11 = virtualinvoke $r9.<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>($r10);

        if $r11 == null goto label4;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityWithoutAnimation(android.content.Intent)>($r9);

        return;

     label3:
        r3 := @caughtexception;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Could not generate a valid URI for the apkg file", $r4);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131230762);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r1, 0);

        return;

     label4:
        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Could not find appropriate application to share apkg with", $r4);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131230762);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r1, 0);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }
    public void emptyFiltered()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.async.DeckTask$TaskListener $r1;
        com.ichi2.async.DeckTask$TaskData $r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        long $l0;
        com.ichi2.async.DeckTask$TaskData[] $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke $r4.<com.ichi2.libanki.Decks: void select(long)>($l0);

        $r1 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mSimpleProgressListener>;

        $r5 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r2 = new com.ichi2.async.DeckTask$TaskData;

        $r6 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke $r2.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>($z0);

        $r5[0] = $r2;

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(27, $r1, $r5);

        return;
    }
    public void exit()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.CollectionHelper $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        virtualinvoke $r1.<com.ichi2.anki.CollectionHelper: void closeCollection(boolean)>(0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void finishWithoutAnimation()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }
    public void exportApkg(java.lang.String, java.lang.Long, boolean, boolean)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1, $r8;
        java.lang.Long $r2;
        boolean $z0, $z1;
        java.io.File r3, r5, r9;
        org.json.JSONException r4;
        java.lang.Object[] r6;
        com.ichi2.async.DeckTask$TaskData $r7;
        com.ichi2.libanki.Collection $r10;
        java.lang.Boolean $r11;
        com.ichi2.async.DeckTask$TaskListener $r12;
        com.ichi2.async.DeckTask$TaskData[] $r13;
        java.lang.StringBuilder $r14;
        com.ichi2.libanki.Decks $r15;
        long $l0;
        org.json.JSONObject $r16;
        java.lang.RuntimeException $r17;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Long;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        r5 = new java.io.File;

        $r8 = staticinvoke <com.ichi2.anki.CollectionHelper: java.lang.String getDefaultAnkiDroidDirectory()>();

        specialinvoke r5.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r8, "export");

        virtualinvoke r5.<java.io.File: boolean mkdirs()>();

        if $r1 == null goto label2;

        r9 = new java.io.File;

        specialinvoke r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, $r1);

     label1:
        r6 = newarray (java.lang.Object)[5];

        $r10 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        r6[0] = $r10;

        $r1 = virtualinvoke r9.<java.io.File: java.lang.String getPath()>();

        r6[1] = $r1;

        r6[2] = $r2;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r6[3] = $r11;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r6[4] = $r11;

        $r12 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mExportListener>;

        $r13 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r7 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r7.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>(r6);

        $r13[0] = $r7;

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(31, $r12, $r13);

        return;

     label2:
        if $r2 == null goto label6;

        r9 = new java.io.File;

        $r14 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r15 = virtualinvoke $r10.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r16 = virtualinvoke $r15.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r1 = virtualinvoke $r16.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\W+", "_");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apkg");

        $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, $r1);

     label4:
        goto label1;

     label5:
        r4 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r17;

     label6:
        if $z0 != 0 goto label7;

        r9 = new java.io.File;

        specialinvoke r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, "All Decks.apkg");

        goto label1;

     label7:
        r3 = new java.io.File;

        $r10 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r1 = virtualinvoke $r10.<com.ichi2.libanki.Collection: java.lang.String getPath()>();

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r1);

        r9 = new java.io.File;

        $r1 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".anki2", ".apkg");

        specialinvoke r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, $r1);

        goto label1;

        catch org.json.JSONException from label3 to label4 with label5;
    }
    public void exportDeck(long)
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;
        org.json.JSONException r1;
        android.content.res.Resources $r2;
        java.lang.Object[] $r3;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Decks $r5;
        org.json.JSONObject $r6;
        java.lang.Object $r7;
        java.lang.String $r8;
        java.lang.Long $r9;
        com.ichi2.anki.dialogs.ExportDialog $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 := @parameter0: long;

     label1:
        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

     label2:
        $r3 = newarray (java.lang.Object)[1];

     label3:
        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l0);

        $r7 = virtualinvoke $r6.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("name");

     label4:
        $r3[0] = $r7;

     label5:
        $r8 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131230852, $r3);

     label6:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r10 = staticinvoke <com.ichi2.anki.dialogs.ExportDialog: com.ichi2.anki.dialogs.ExportDialog newInstance(java.lang.String,java.lang.Long)>($r8, $r9);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDialogFragment(android.support.v4.app.DialogFragment)>($r10);

        return;

     label7:
        r1 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r11;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }
    public com.ichi2.anki.StudyOptionsFragment getFragment()
    {
        com.ichi2.anki.DeckPicker r0;
        android.support.v4.app.FragmentManager $r1;
        android.support.v4.app.Fragment $r2;
        boolean $z0;
        com.ichi2.anki.StudyOptionsFragment r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.support.v4.app.FragmentManager getSupportFragmentManager()>();

        $r2 = virtualinvoke $r1.<android.support.v4.app.FragmentManager: android.support.v4.app.Fragment findFragmentById(int)>(2131755193);

        if $r2 == null goto label1;

        $z0 = $r2 instanceof com.ichi2.anki.StudyOptionsFragment;

        if $z0 == 0 goto label1;

        r3 = (com.ichi2.anki.StudyOptionsFragment) $r2;

        return r3;

     label1:
        return null;
    }
    public void handleDbError()
    {
        com.ichi2.anki.DeckPicker r0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDatabaseErrorDialog(int)>(0);

        return;
    }
    public void handleEmptyCards()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.DeckPicker$28 $r1;
        com.ichi2.async.DeckTask$TaskData[] $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = new com.ichi2.anki.DeckPicker$28;

        specialinvoke $r1.<com.ichi2.anki.DeckPicker$28: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r2 = newarray (com.ichi2.async.DeckTask$TaskData)[0];

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(48, $r1, $r2);

        return;
    }
    public boolean hasErrorFiles()
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        boolean $z0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: java.lang.String[] fileList()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r1 = $r2[$i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".stacktrace");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    public void importAdd(java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1;
        com.ichi2.async.DeckTask$TaskListener $r2;
        com.ichi2.async.DeckTask$TaskData $r3;
        com.ichi2.async.DeckTask$TaskData[] $r4;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mImportAddListener>;

        $r4 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.String,boolean)>($r1, 0);

        $r4[0] = $r3;

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(28, $r2, $r4);

        return;
    }
    public void importReplace(java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1;
        com.ichi2.async.DeckTask$TaskListener $r2;
        com.ichi2.async.DeckTask$TaskData $r3;
        com.ichi2.async.DeckTask$TaskData[] $r4;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mImportReplaceListener>;

        $r4 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r3 = new com.ichi2.async.DeckTask$TaskData;

        specialinvoke $r3.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.String)>($r1);

        $r4[0] = $r3;

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(29, $r2, $r4);

        return;
    }
    public void integrityCheck()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.DeckPicker$16 $r1;
        com.ichi2.async.DeckTask$TaskData[] $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = new com.ichi2.anki.DeckPicker$16;

        specialinvoke $r1.<com.ichi2.anki.DeckPicker$16: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r2 = newarray (com.ichi2.async.DeckTask$TaskData)[0];

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(14, $r1, $r2);

        return;
    }
    public void loginToSyncServer()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.Intent r1;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/MyAccount;");

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("notLoggedIn", 1);

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int FADE>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r1, 6, $i0);

        return;
    }
    public void mediaCheck()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.DeckPicker$17 $r1;
        com.ichi2.async.DeckTask$TaskData[] $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = new com.ichi2.anki.DeckPicker$17;

        specialinvoke $r1.<com.ichi2.anki.DeckPicker$17: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r2 = newarray (com.ichi2.async.DeckTask$TaskData)[0];

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(38, $r1, $r2);

        return;
    }
    protected void onActivityResult(int, int, android.content.Intent)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0, $i1;
        android.content.Intent $r1;
        byte $b2;
        android.content.Context $r2;
        android.content.SharedPreferences $r3;
        com.ichi2.libanki.Collection $r4;
        com.ichi2.libanki.Sched $r5;
        int[] $r6;
        boolean $z0;
        android.content.SharedPreferences$Editor $r7;
        com.ichi2.libanki.Decks $r8;
        long $l3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.content.Intent;

        $b2 = 2;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onActivityResult(int,int,android.content.Intent)>($i0, $i1, $r1);

        if $i1 != 202 goto label01;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void onSdCardNotMounted()>();

        return;

     label01:
        if $i1 != 203 goto label02;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void handleDbError()>();

        return;

     label02:
        if $i0 != 10 goto label03;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Context getBaseContext()>();

        $r3 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r2);

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void showStartupScreensAndDialogs(android.content.SharedPreferences,int)>($r3, 4);

        return;

     label03:
        if $i0 == 8 goto label04;

        if $i0 != 9 goto label08;

     label04:
        if $i1 != -1 goto label07;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Context getBaseContext()>();

        $r3 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r2);

        if $i0 != 8 goto label06;

     label05:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void showStartupScreensAndDialogs(android.content.SharedPreferences,int)>($r3, $b2);

        return;

     label06:
        $b2 = 3;

        goto label05;

     label07:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void finishWithAnimation()>();

        return;

     label08:
        if $i0 != 6 goto label09;

        if $i1 != -1 goto label09;

        r0.<com.ichi2.anki.DeckPicker: boolean mSyncOnResume> = 1;

        return;

     label09:
        if $i0 == 901 goto label10;

        if $i0 != 11 goto label12;

     label10:
        if $i1 != 52 goto label12;

        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Sched: int[] counts()>();

        $i0 = $r6[0];

        $i1 = $r6[1];

        $i0 = $i0 + $i1;

        $i1 = $r6[2];

        $i0 = $i1 + $i0;

        if $i0 != 0 goto label11;

        staticinvoke <com.ichi2.anki.UIUtils: void showSimpleSnackbar(android.app.Activity,int,boolean)>(r0, 2131231370, 0);

        return;

     label11:
        staticinvoke <com.ichi2.anki.UIUtils: void showSimpleSnackbar(android.app.Activity,int,boolean)>(r0, 2131231381, 0);

        return;

     label12:
        if $i0 != 101 goto label14;

        if $r1 == null goto label13;

        $z0 = virtualinvoke $r1.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>("allDecksSelected", 0);

        if $z0 == 0 goto label13;

        $r3 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>(r0);

        $r7 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r7 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("browserDeckIdFromDeckPicker", -1L);

        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: void apply()>();

        return;

     label13:
        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r8 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l3 = virtualinvoke $r8.<com.ichi2.libanki.Decks: long selected()>();

        $r3 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>(r0);

        $r7 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r7 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("browserDeckIdFromDeckPicker", $l3);

        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: void apply()>();

        return;

     label14:
        if $i0 != 1 goto label15;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void finishWithoutAnimation()>();

     label15:
        return;
    }
    public void onAttachedToWindow()
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.Boolean $r1;
        boolean $z0;
        android.view.Window $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.Window getWindow()>();

        virtualinvoke $r2.<android.view.Window: void setFormat(int)>(1);

     label1:
        return;
    }
    public void onBackPressed()
    {
        com.ichi2.anki.DeckPicker r0;
        boolean $z0;
        java.lang.Object[] $r1;
        com.getbase.floatingactionbutton.FloatingActionsMenu $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $z0 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: boolean isDrawerOpen()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onBackPressed()>();

        return;

     label1:
        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Back key pressed", $r1);

        $r2 = r0.<com.ichi2.anki.DeckPicker: com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu>;

        if $r2 == null goto label2;

        $r2 = r0.<com.ichi2.anki.DeckPicker: com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu>;

        $z0 = virtualinvoke $r2.<com.getbase.floatingactionbutton.FloatingActionsMenu: boolean isExpanded()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.ichi2.anki.DeckPicker: com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu>;

        virtualinvoke $r2.<com.getbase.floatingactionbutton.FloatingActionsMenu: void collapse()>();

        return;

     label2:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void automaticSync()>();

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void finishWithAnimation()>();

        return;
    }
    protected void onCollectionLoadError()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.dialogs.DialogHandler $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.dialogs.DialogHandler getDialogHandler()>();

        virtualinvoke $r1.<com.ichi2.anki.dialogs.DialogHandler: boolean sendEmptyMessage(int)>(0);

        return;
    }
    protected void onCreate(android.os.Bundle) throws android.database.SQLException
    {
        com.ichi2.anki.DeckPicker r0;
        android.os.Bundle $r1;
        java.lang.Object[] $r2;
        android.content.Context $r3;
        android.content.SharedPreferences $r4;
        boolean $z0, $z1;
        android.view.View $r5, $r6;
        int $i0;
        java.lang.Boolean $r7;
        android.content.res.Resources $r8;
        java.lang.String $r9;
        android.support.v7.widget.RecyclerView $r10;
        com.ichi2.ui.DividerItemDecoration $r11;
        android.support.v7.widget.LinearLayoutManager $r12;
        com.ichi2.anki.widgets.DeckAdapter $r13;
        android.view.LayoutInflater $r14;
        android.view.View$OnClickListener $r15;
        android.view.View$OnLongClickListener $r16;
        android.support.v4.widget.SwipeRefreshLayout $r17;
        com.ichi2.anki.DeckPicker$8 $r18;
        com.getbase.floatingactionbutton.FloatingActionsMenu $r19;
        android.widget.TextView $r20;
        android.support.design.widget.FloatingActionButton r21;
        com.ichi2.anki.DeckPicker$9 $r22;
        com.ichi2.compat.Compat $r23;
        android.content.Intent $r24;
        android.widget.Toast $r25;
        com.ichi2.anki.CollectionHelper $r26;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("onCreate()", $r2);

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Context getBaseContext()>();

        $r4 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r3);

        $z0 = specialinvoke r0.<com.ichi2.anki.DeckPicker: boolean firstCollectionOpen()>();

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onCreate(android.os.Bundle)>($r1);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void setContentView(int)>(2130903099);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(16908290);

        $r6 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755193);

        r0.<com.ichi2.anki.DeckPicker: android.view.View mStudyoptionsFrame> = $r6;

        $r6 = r0.<com.ichi2.anki.DeckPicker: android.view.View mStudyoptionsFrame>;

        if $r6 == null goto label04;

        $r6 = r0.<com.ichi2.anki.DeckPicker: android.view.View mStudyoptionsFrame>;

        $i0 = virtualinvoke $r6.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label04;

        $z1 = 1;

     label01:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented> = $r7;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void registerExternalStorageListener()>();

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void initNavigationDrawer(android.view.View)>($r5);

        $r8 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String getString(int)>(2131231527);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void setTitle(java.lang.CharSequence)>($r9);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755166);

        $r10 = (android.support.v7.widget.RecyclerView) $r5;

        r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.RecyclerView mRecyclerView> = $r10;

        $r10 = r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.RecyclerView mRecyclerView>;

        $r11 = new com.ichi2.ui.DividerItemDecoration;

        specialinvoke $r11.<com.ichi2.ui.DividerItemDecoration: void <init>(android.content.Context)>(r0);

        virtualinvoke $r10.<android.support.v7.widget.RecyclerView: void addItemDecoration(android.support.v7.widget.RecyclerView$ItemDecoration)>($r11);

        $r12 = new android.support.v7.widget.LinearLayoutManager;

        specialinvoke $r12.<android.support.v7.widget.LinearLayoutManager: void <init>(android.content.Context)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.LinearLayoutManager mRecyclerViewLayoutManager> = $r12;

        $r10 = r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.RecyclerView mRecyclerView>;

        $r12 = r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.LinearLayoutManager mRecyclerViewLayoutManager>;

        virtualinvoke $r10.<android.support.v7.widget.RecyclerView: void setLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager)>($r12);

        $r13 = new com.ichi2.anki.widgets.DeckAdapter;

        $r14 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.LayoutInflater getLayoutInflater()>();

        specialinvoke $r13.<com.ichi2.anki.widgets.DeckAdapter: void <init>(android.view.LayoutInflater,android.content.Context)>($r14, r0);

        r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter> = $r13;

        $r13 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        $r15 = r0.<com.ichi2.anki.DeckPicker: android.view.View$OnClickListener mDeckClickListener>;

        virtualinvoke $r13.<com.ichi2.anki.widgets.DeckAdapter: void setDeckClickListener(android.view.View$OnClickListener)>($r15);

        $r13 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        $r15 = r0.<com.ichi2.anki.DeckPicker: android.view.View$OnClickListener mCountsClickListener>;

        virtualinvoke $r13.<com.ichi2.anki.widgets.DeckAdapter: void setCountsClickListener(android.view.View$OnClickListener)>($r15);

        $r13 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        $r15 = r0.<com.ichi2.anki.DeckPicker: android.view.View$OnClickListener mDeckExpanderClickListener>;

        virtualinvoke $r13.<com.ichi2.anki.widgets.DeckAdapter: void setDeckExpanderClickListener(android.view.View$OnClickListener)>($r15);

        $r13 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        $r16 = r0.<com.ichi2.anki.DeckPicker: android.view.View$OnLongClickListener mDeckLongClickListener>;

        virtualinvoke $r13.<com.ichi2.anki.widgets.DeckAdapter: void setDeckLongClickListener(android.view.View$OnLongClickListener)>($r16);

        $r10 = r0.<com.ichi2.anki.DeckPicker: android.support.v7.widget.RecyclerView mRecyclerView>;

        $r13 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.widgets.DeckAdapter mDeckListAdapter>;

        virtualinvoke $r10.<android.support.v7.widget.RecyclerView: void setAdapter(android.support.v7.widget.RecyclerView$Adapter)>($r13);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755163);

        $r17 = (android.support.v4.widget.SwipeRefreshLayout) $r5;

        r0.<com.ichi2.anki.DeckPicker: android.support.v4.widget.SwipeRefreshLayout mPullToSyncWrapper> = $r17;

        $r17 = r0.<com.ichi2.anki.DeckPicker: android.support.v4.widget.SwipeRefreshLayout mPullToSyncWrapper>;

        virtualinvoke $r17.<android.support.v4.widget.SwipeRefreshLayout: void setDistanceToTriggerSync(int)>(400);

        $r17 = r0.<com.ichi2.anki.DeckPicker: android.support.v4.widget.SwipeRefreshLayout mPullToSyncWrapper>;

        $r18 = new com.ichi2.anki.DeckPicker$8;

        specialinvoke $r18.<com.ichi2.anki.DeckPicker$8: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        virtualinvoke $r17.<android.support.v4.widget.SwipeRefreshLayout: void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener)>($r18);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755186);

        $r19 = (com.getbase.floatingactionbutton.FloatingActionsMenu) $r5;

        r0.<com.ichi2.anki.DeckPicker: com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu> = $r19;

        $r19 = r0.<com.ichi2.anki.DeckPicker: com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu>;

        if $r19 == null goto label05;

        $r19 = r0.<com.ichi2.anki.DeckPicker: com.getbase.floatingactionbutton.FloatingActionsMenu mActionsMenu>;

        $r5 = virtualinvoke $r19.<com.getbase.floatingactionbutton.FloatingActionsMenu: android.view.View findViewById(int)>(2131755012);

        $r9 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: java.lang.String getString(int)>(2131231108);

        virtualinvoke $r5.<android.view.View: void setContentDescription(java.lang.CharSequence)>($r9);

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void configureFloatingActionsMenu()>();

     label02:
        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755164);

        $r20 = (android.widget.TextView) $r5;

        r0.<com.ichi2.anki.DeckPicker: android.widget.TextView mReviewSummaryTextView> = $r20;

        $r7 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label03;

        $r5 = r0.<com.ichi2.anki.DeckPicker: android.view.View mStudyoptionsFrame>;

        virtualinvoke $r5.<android.view.View: void setVisibility(int)>(8);

     label03:
        if $z0 == 0 goto label06;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void showStartupScreensAndDialogs(android.content.SharedPreferences,int)>($r4, 0);

        return;

     label04:
        $z1 = 0;

        goto label01;

     label05:
        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("Falling back on design support library FloatingActionButton", $r2);

        $r5 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.View findViewById(int)>(2131755185);

        r21 = (android.support.design.widget.FloatingActionButton) $r5;

        $r22 = new com.ichi2.anki.DeckPicker$9;

        specialinvoke $r22.<com.ichi2.anki.DeckPicker$9: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        virtualinvoke r21.<android.support.design.widget.FloatingActionButton: void setOnClickListener(android.view.View$OnClickListener)>($r22);

        goto label02;

     label06:
        $z0 = staticinvoke <com.ichi2.anki.CollectionHelper: boolean hasStorageAccessPermission(android.content.Context)>(r0);

        if $z0 == 0 goto label10;

        $z0 = staticinvoke <com.ichi2.anki.AnkiDroidApp: boolean isSdCardMounted()>();

        if $z0 != 0 goto label07;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void onSdCardNotMounted()>();

        return;

     label07:
        $z0 = staticinvoke <com.ichi2.anki.CollectionHelper: boolean isCurrentAnkiDroidDirAccessible(android.content.Context)>(r0);

        if $z0 != 0 goto label08;

        $r23 = staticinvoke <com.ichi2.compat.CompatHelper: com.ichi2.compat.Compat getCompat()>();

        $r24 = interfaceinvoke $r23.<com.ichi2.compat.Compat: android.content.Intent getPreferenceSubscreenIntent(android.content.Context,java.lang.String)>(r0, "com.ichi2.anki.prefs.advanced");

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithoutAnimation(android.content.Intent,int)>($r24, 1);

        $r25 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>(r0, 2131230981, 1);

        virtualinvoke $r25.<android.widget.Toast: void show()>();

        return;

     label08:
        $r26 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $z0 = virtualinvoke $r26.<com.ichi2.anki.CollectionHelper: boolean exceededCursorSizeLimit(android.content.Context)>(r0);

        if $z0 == 0 goto label09;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDatabaseErrorDialog(int)>(9);

        return;

     label09:
        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDatabaseErrorDialog(int)>(0);

     label10:
        return;
    }
    public void onCreateCustomStudySession()
    {
        com.ichi2.anki.DeckPicker r0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void openStudyOptions(boolean)>(0);

        return;
    }
    public boolean onCreateOptionsMenu(android.view.Menu)
    {
        com.ichi2.anki.DeckPicker r0;
        android.view.Menu $r1;
        android.view.MenuInflater $r2;
        boolean $z0;
        android.view.MenuItem $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: android.view.Menu;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.view.MenuInflater getMenuInflater()>();

        virtualinvoke $r2.<android.view.MenuInflater: void inflate(int,android.view.Menu)>(2131820551, $r1);

        $z0 = staticinvoke <com.ichi2.anki.AnkiDroidApp: boolean isSdCardMounted()>();

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755359);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>($z0);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755361);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>($z0);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755362);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>($z0);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755363);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>($z0);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755364);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>($z0);

        $z0 = staticinvoke <com.ichi2.compat.CompatHelper: boolean isChromebook()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755365);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(0);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755367);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(0);

        $r3 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755368);

        interfaceinvoke $r3.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(0);

     label1:
        $z0 = specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: boolean onCreateOptionsMenu(android.view.Menu)>($r1);

        return $z0;
    }
    protected void onDestroy()
    {
        com.ichi2.anki.DeckPicker r0;
        boolean $z0;
        android.content.BroadcastReceiver $r1;
        com.afollestad.materialdialogs.MaterialDialog $r2;
        java.lang.Object[] $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onDestroy()>();

        $r1 = r0.<com.ichi2.anki.DeckPicker: android.content.BroadcastReceiver mUnmountReceiver>;

        if $r1 == null goto label1;

        $r1 = r0.<com.ichi2.anki.DeckPicker: android.content.BroadcastReceiver mUnmountReceiver>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

     label1:
        $r2 = r0.<com.ichi2.anki.DeckPicker: com.afollestad.materialdialogs.MaterialDialog mProgressDialog>;

        if $r2 == null goto label2;

        $r2 = r0.<com.ichi2.anki.DeckPicker: com.afollestad.materialdialogs.MaterialDialog mProgressDialog>;

        $z0 = virtualinvoke $r2.<com.afollestad.materialdialogs.MaterialDialog: boolean isShowing()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.ichi2.anki.DeckPicker: com.afollestad.materialdialogs.MaterialDialog mProgressDialog>;

        virtualinvoke $r2.<com.afollestad.materialdialogs.MaterialDialog: void dismiss()>();

     label2:
        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("onDestroy()", $r3);

        return;
    }
    public void onExtendStudyLimits()
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.Boolean $r1;
        boolean $z0;
        com.ichi2.anki.StudyOptionsFragment $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.anki.StudyOptionsFragment getFragment()>();

        virtualinvoke $r2.<com.ichi2.anki.StudyOptionsFragment: void refreshInterface(boolean)>(1);

     label1:
        specialinvoke r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        return;
    }
    public boolean onOptionsItemSelected(android.view.MenuItem)
    {
        com.ichi2.anki.DeckPicker r0;
        android.view.MenuItem $r1;
        android.content.Intent r2;
        android.content.res.Resources $r3;
        android.support.v7.app.ActionBarDrawerToggle $r4;
        boolean $z0;
        int $i0;
        java.lang.Object[] $r5;
        android.widget.EditText $r6;
        com.ichi2.libanki.Collection $r7;
        com.ichi2.libanki.Decks $r8;
        java.util.ArrayList $r9;
        java.util.Locale $r10;
        java.lang.String $r11;
        java.lang.Integer $r12;
        com.afollestad.materialdialogs.MaterialDialog$Builder $r13;
        com.ichi2.anki.DeckPicker$13 $r14;
        com.ichi2.anki.dialogs.ExportDialog $r15;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: android.view.MenuItem;

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.support.v7.app.ActionBarDrawerToggle getDrawerToggle()>();

        $z0 = virtualinvoke $r4.<android.support.v7.app.ActionBarDrawerToggle: boolean onOptionsItemSelected(android.view.MenuItem)>($r1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $i0 = interfaceinvoke $r1.<android.view.MenuItem: int getItemId()>();

        lookupswitch($i0)
        {
            case 2131755359: goto label04;
            case 2131755360: goto label03;
            case 2131755361: goto label06;
            case 2131755362: goto label09;
            case 2131755363: goto label10;
            case 2131755364: goto label11;
            case 2131755365: goto label13;
            case 2131755366: goto label12;
            case 2131755367: goto label05;
            case 2131755368: goto label14;
            default: goto label02;
        };

     label02:
        $z0 = specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: boolean onOptionsItemSelected(android.view.MenuItem)>($r1);

        return $z0;

     label03:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Undo button pressed", $r5);

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void undo()>();

        return 1;

     label04:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Sync button pressed", $r5);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void sync()>();

        return 1;

     label05:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Import button pressed", $r5);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showImportDialog(int)>(0);

        return 1;

     label06:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: New filtered deck button pressed", $r5);

        $r6 = new android.widget.EditText;

        specialinvoke $r6.<android.widget.EditText: void <init>(android.content.Context)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText> = $r6;

        $r7 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r9 = virtualinvoke $r8.<com.ichi2.libanki.Decks: java.util.ArrayList allNames()>();

        $i0 = 1;

        $r10 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = newarray (java.lang.Object)[2];

        $r11 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131231040);

        $r5[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[1] = $r12;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r10, "%s %d", $r5);

     label07:
        $z0 = virtualinvoke $r9.<java.util.ArrayList: boolean contains(java.lang.Object)>($r11);

        if $z0 == 0 goto label08;

        $i0 = $i0 + 1;

        $r10 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = newarray (java.lang.Object)[2];

        $r11 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131231040);

        $r5[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r12;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r10, "%s %d", $r5);

        goto label07;

     label08:
        $r6 = r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        virtualinvoke $r6.<android.widget.EditText: void setText(java.lang.CharSequence)>($r11);

        $r13 = new com.afollestad.materialdialogs.MaterialDialog$Builder;

        specialinvoke $r13.<com.afollestad.materialdialogs.MaterialDialog$Builder: void <init>(android.content.Context)>(r0);

        $r11 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131231195);

        $r13 = virtualinvoke $r13.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder title(java.lang.CharSequence)>($r11);

        $r6 = r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        $r13 = virtualinvoke $r13.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder customView(android.view.View,boolean)>($r6, 1);

        $r11 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131230861);

        $r13 = virtualinvoke $r13.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder positiveText(java.lang.CharSequence)>($r11);

        $r11 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131230967);

        $r13 = virtualinvoke $r13.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder negativeText(java.lang.CharSequence)>($r11);

        $r14 = new com.ichi2.anki.DeckPicker$13;

        specialinvoke $r14.<com.ichi2.anki.DeckPicker$13: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r13 = virtualinvoke $r13.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder callback(com.afollestad.materialdialogs.MaterialDialog$ButtonCallback)>($r14);

        virtualinvoke $r13.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog show()>();

        return 1;

     label09:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Check database button pressed", $r5);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDatabaseErrorDialog(int)>(6);

        return 1;

     label10:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Check media button pressed", $r5);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showMediaCheckDialog(int)>(0);

        return 1;

     label11:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Empty cards button pressed", $r5);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void handleEmptyCards()>();

        return 1;

     label12:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Model browser button pressed", $r5);

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/ModelBrowser;");

        $i0 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r2, 0, $i0);

        return 1;

     label13:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Restore from backup button pressed", $r5);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDatabaseErrorDialog(int)>(7);

        return 1;

     label14:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("DeckPicker:: Export collection button pressed", $r5);

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r11 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131230851);

        $r15 = staticinvoke <com.ichi2.anki.dialogs.ExportDialog: com.ichi2.anki.dialogs.ExportDialog newInstance(java.lang.String)>($r11);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDialogFragment(android.support.v4.app.DialogFragment)>($r15);

        return 1;
    }
    protected void onPause()
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.Object[] $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("onPause()", $r1);

        r0.<com.ichi2.anki.DeckPicker: boolean mActivityPaused> = 1;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onPause()>();

        return;
    }
    public boolean onPrepareOptionsMenu(android.view.Menu)
    {
        com.ichi2.anki.DeckPicker r0;
        android.view.Menu $r1;
        com.ichi2.anki.CollectionHelper $r2;
        com.ichi2.libanki.Collection $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        android.view.MenuItem $r5;
        android.content.res.Resources $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: android.view.Menu;

        $r2 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r3 = virtualinvoke $r2.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getColSafe(android.content.Context)>(r0);

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $z0 = virtualinvoke $r3.<com.ichi2.libanki.Collection: boolean undoAvailable()>();

        if $z0 != 0 goto label4;

     label2:
        $r5 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755360);

        interfaceinvoke $r5.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(0);

     label3:
        $z0 = specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: boolean onPrepareOptionsMenu(android.view.Menu)>($r1);

        return $z0;

     label4:
        $r6 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r5 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755360);

        interfaceinvoke $r5.<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>(1);

        $r7 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r8 = virtualinvoke $r3.<com.ichi2.libanki.Collection: java.lang.String undoName(android.content.res.Resources)>($r6);

        $r7[0] = $r8;

        $r8 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131231373, $r7);

        $r5 = interfaceinvoke $r1.<android.view.Menu: android.view.MenuItem findItem(int)>(2131755360);

        interfaceinvoke $r5.<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>($r8);

        goto label3;
    }
    public void onRequestPermissionsResult(int, java.lang.String[], int[])
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;
        java.lang.String[] $r1;
        int[] $r2;
        android.content.Intent r3;
        android.content.SharedPreferences $r4;
        android.widget.Toast $r5;
        java.lang.String $r6;
        android.net.Uri $r7;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String[];

        $r2 := @parameter2: int[];

        if $i0 != 0 goto label2;

        $i0 = lengthof $r1;

        if $i0 != 1 goto label2;

        $i0 = $r2[0];

        if $i0 != 0 goto label1;

        $r4 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>(r0);

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void showStartupScreensAndDialogs(android.content.SharedPreferences,int)>($r4, 0);

        return;

     label1:
        $r5 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>(r0, 2131230981, 1);

        virtualinvoke $r5.<android.widget.Toast: void show()>();

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void finishWithoutAnimation()>();

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.settings.APPLICATION_DETAILS_SETTINGS");

        $r6 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: java.lang.String getPackageName()>();

        $r7 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", $r6, null);

        virtualinvoke r3.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r7);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityWithoutAnimation(android.content.Intent)>(r3);

     label2:
        return;
    }
    public void onRequireDeckListUpdate()
    {
        com.ichi2.anki.DeckPicker r0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        return;
    }
    public void onRestoreInstanceState(android.os.Bundle)
    {
        com.ichi2.anki.DeckPicker r0;
        android.os.Bundle $r1;
        long $l0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onRestoreInstanceState(android.os.Bundle)>($r1);

        $l0 = virtualinvoke $r1.<android.os.Bundle: long getLong(java.lang.String)>("mContextMenuDid");

        r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid> = $l0;

        return;
    }
    protected void onResume()
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.Object[] $r1;
        boolean $z0;
        android.content.res.Resources $r2;
        java.lang.String $r3;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("onResume()", $r1);

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onResume()>();

        r0.<com.ichi2.anki.DeckPicker: boolean mActivityPaused> = 0;

        $z0 = r0.<com.ichi2.anki.DeckPicker: boolean mSyncOnResume>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void sync()>();

        r0.<com.ichi2.anki.DeckPicker: boolean mSyncOnResume> = 0;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: boolean colIsOpen()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void selectNavigationItem(int)>(2131755372);

        specialinvoke r0.<com.ichi2.anki.DeckPicker: void updateDeckList()>();

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>(2131231527);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void setTitle(java.lang.CharSequence)>($r3);

     label2:
        return;
    }
    public void onSaveInstanceState(android.os.Bundle)
    {
        com.ichi2.anki.DeckPicker r0;
        android.os.Bundle $r1;
        long $l0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onSaveInstanceState(android.os.Bundle)>($r1);

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke $r1.<android.os.Bundle: void putLong(java.lang.String,long)>("mContextMenuDid", $l0);

        return;
    }
    public void onSdCardNotMounted()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.res.Resources $r1;
        java.lang.String $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(2131231280);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>(r0, $r2, 0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void finishWithoutAnimation()>();

        return;
    }
    protected void onStop()
    {
        com.ichi2.anki.DeckPicker r0;
        boolean $z0;
        java.lang.Object[] $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("onStop()", $r1);

        specialinvoke r0.<com.ichi2.anki.NavigationDrawerActivity: void onStop()>();

        $z0 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: boolean colIsOpen()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.ichi2.widget.WidgetStatus: void update(android.content.Context)>(r0);

        staticinvoke <com.ichi2.anki.UIUtils: void saveCollectionInBackground(android.content.Context)>(r0);

     label1:
        return;
    }
    protected void openCardBrowser()
    {
        com.ichi2.anki.DeckPicker r0;
        android.content.Intent r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Decks $r3;
        long $l0;
        android.content.SharedPreferences $r4;
        int $i1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/CardBrowser;");

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = virtualinvoke $r3.<com.ichi2.libanki.Decks: long selected()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("selectedDeck", $l0);

        $r4 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>(r0);

        $l0 = interfaceinvoke $r4.<android.content.SharedPreferences: long getLong(java.lang.String,long)>("browserDeckIdFromDeckPicker", -1L);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("defaultDeckId", $l0);

        $i1 = <com.ichi2.anim.ActivityTransitionAnimation: int LEFT>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityForResultWithAnimation(android.content.Intent,int,int)>(r1, 101, $i1);

        return;
    }
    public void rebuildFiltered()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.async.DeckTask$TaskListener $r1;
        com.ichi2.async.DeckTask$TaskData $r2;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        long $l0;
        com.ichi2.async.DeckTask$TaskData[] $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke $r4.<com.ichi2.libanki.Decks: void select(long)>($l0);

        $r1 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.DeckTask$TaskListener mSimpleProgressListener>;

        $r5 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r2 = new com.ichi2.async.DeckTask$TaskData;

        $r6 = r0.<com.ichi2.anki.DeckPicker: java.lang.Boolean mFragmented>;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke $r2.<com.ichi2.async.DeckTask$TaskData: void <init>(boolean)>($z0);

        $r5[0] = $r2;

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(26, $r1, $r5);

        return;
    }
    public void renameDeckDialog()
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void renameDeckDialog(long)>($l0);

        return;
    }
    public void renameDeckDialog(long)
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;
        android.content.res.Resources $r1;
        android.widget.EditText $r2, $r6;
        com.ichi2.libanki.Collection $r3;
        com.ichi2.libanki.Decks $r4;
        java.lang.String $r5, $r9;
        android.text.Editable $r7;
        int $i1;
        com.afollestad.materialdialogs.MaterialDialog$Builder $r8;
        com.ichi2.anki.DeckPicker$24 $r10;
        com.afollestad.materialdialogs.MaterialDialog $r11;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.res.Resources getResources()>();

        $r2 = new android.widget.EditText;

        specialinvoke $r2.<android.widget.EditText: void <init>(android.content.Context)>(r0);

        r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText> = $r2;

        $r2 = r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        virtualinvoke $r2.<android.widget.EditText: void setSingleLine()>();

        $r3 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r5 = virtualinvoke $r4.<com.ichi2.libanki.Decks: java.lang.String name(long)>($l0);

        $r2 = r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        virtualinvoke $r2.<android.widget.EditText: void setText(java.lang.CharSequence)>($r5);

        $r2 = r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        $r6 = r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        $r7 = virtualinvoke $r6.<android.widget.EditText: android.text.Editable getText()>();

        $i1 = interfaceinvoke $r7.<android.text.Editable: int length()>();

        virtualinvoke $r2.<android.widget.EditText: void setSelection(int)>($i1);

        $r8 = new com.afollestad.materialdialogs.MaterialDialog$Builder;

        specialinvoke $r8.<com.afollestad.materialdialogs.MaterialDialog$Builder: void <init>(android.content.Context)>(r0);

        $r9 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(2131231249);

        $r8 = virtualinvoke $r8.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder title(java.lang.CharSequence)>($r9);

        $r2 = r0.<com.ichi2.anki.DeckPicker: android.widget.EditText mDialogEditText>;

        $r8 = virtualinvoke $r8.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder customView(android.view.View,boolean)>($r2, 1);

        $r9 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(2131231248);

        $r8 = virtualinvoke $r8.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder positiveText(java.lang.CharSequence)>($r9);

        $r9 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(2131230967);

        $r8 = virtualinvoke $r8.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder negativeText(java.lang.CharSequence)>($r9);

        $r10 = new com.ichi2.anki.DeckPicker$24;

        specialinvoke $r10.<com.ichi2.anki.DeckPicker$24: void <init>(com.ichi2.anki.DeckPicker,java.lang.String,long,android.content.res.Resources)>(r0, $r5, $l0, $r1);

        $r8 = virtualinvoke $r8.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder callback(com.afollestad.materialdialogs.MaterialDialog$ButtonCallback)>($r10);

        $r11 = virtualinvoke $r8.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog build()>();

        virtualinvoke $r11.<com.afollestad.materialdialogs.MaterialDialog: void show()>();

        return;
    }
    public void repairDeck()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.anki.DeckPicker$15 $r1;
        com.ichi2.async.DeckTask$TaskData[] $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = new com.ichi2.anki.DeckPicker$15;

        specialinvoke $r1.<com.ichi2.anki.DeckPicker$15: void <init>(com.ichi2.anki.DeckPicker)>(r0);

        $r2 = newarray (com.ichi2.async.DeckTask$TaskData)[0];

        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(20, $r1, $r2);

        return;
    }
    public void restoreFromBackup(java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void importReplace(java.lang.String)>($r1);

        return;
    }
    public void sendErrorReport()
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>($r1, "DeckPicker.sendErrorReport");

        return;
    }
    public void showContextMenuDeckOptions()
    {
        com.ichi2.anki.DeckPicker r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Decks $r2;
        long $l0;
        boolean $z0;
        android.content.Intent r3;
        int $i1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: com.ichi2.libanki.Collection getCol()>();

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        $z0 = virtualinvoke $r2.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l0);

        if $z0 == 0 goto label1;

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/FilteredDeckOptions;");

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("did", $l0);

        $i1 = <com.ichi2.anim.ActivityTransitionAnimation: int FADE>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityWithAnimation(android.content.Intent,int)>(r3, $i1);

        return;

     label1:
        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/ichi2/anki/DeckOptions;");

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("did", $l0);

        $i1 = <com.ichi2.anim.ActivityTransitionAnimation: int FADE>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void startActivityWithAnimation(android.content.Intent,int)>(r3, $i1);

        return;
    }
    public void showContextMenuExportDialog()
    {
        com.ichi2.anki.DeckPicker r0;
        long $l0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $l0 = r0.<com.ichi2.anki.DeckPicker: long mContextMenuDid>;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void exportDeck(long)>($l0);

        return;
    }
    public void showDatabaseErrorDialog(int)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;
        com.ichi2.anki.dialogs.DatabaseErrorDialog $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <com.ichi2.anki.dialogs.DatabaseErrorDialog: com.ichi2.anki.dialogs.DatabaseErrorDialog newInstance(int)>($i0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showAsyncDialogFragment(com.ichi2.anki.dialogs.AsyncDialogFragment)>($r1);

        return;
    }
    public void showImportDialog(int)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showImportDialog(int,java.lang.String)>($i0, "");

        return;
    }
    public void showImportDialog(int, java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;
        java.lang.String $r1;
        com.ichi2.anki.dialogs.ImportDialog $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.ichi2.anki.dialogs.ImportDialog: com.ichi2.anki.dialogs.ImportDialog newInstance(int,java.lang.String)>($i0, $r1);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showDialogFragment(android.support.v4.app.DialogFragment)>($r2);

        return;
    }
    public void showMediaCheckDialog(int)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;
        com.ichi2.anki.dialogs.MediaCheckDialog $r1;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <com.ichi2.anki.dialogs.MediaCheckDialog: com.ichi2.anki.dialogs.MediaCheckDialog newInstance(int)>($i0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showAsyncDialogFragment(com.ichi2.anki.dialogs.AsyncDialogFragment)>($r1);

        return;
    }
    public void showMediaCheckDialog(int, java.util.List)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;
        java.util.List r1;
        com.ichi2.anki.dialogs.MediaCheckDialog $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <com.ichi2.anki.dialogs.MediaCheckDialog: com.ichi2.anki.dialogs.MediaCheckDialog newInstance(int,java.util.List)>($i0, r1);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showAsyncDialogFragment(com.ichi2.anki.dialogs.AsyncDialogFragment)>($r2);

        return;
    }
    public void showSyncErrorDialog(int)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showSyncErrorDialog(int,java.lang.String)>($i0, "");

        return;
    }
    public void showSyncErrorDialog(int, java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        int $i0;
        java.lang.String $r1;
        com.ichi2.anki.dialogs.SyncErrorDialog $r2;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.ichi2.anki.dialogs.SyncErrorDialog: com.ichi2.anki.dialogs.SyncErrorDialog newInstance(int,java.lang.String)>($i0, $r1);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showAsyncDialogFragment(com.ichi2.anki.dialogs.AsyncDialogFragment)>($r2);

        return;
    }
    public void sync()
    {
        com.ichi2.anki.DeckPicker r0;

        r0 := @this: com.ichi2.anki.DeckPicker;

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void sync(java.lang.String)>(null);

        return;
    }
    public void sync(java.lang.String)
    {
        com.ichi2.anki.DeckPicker r0;
        java.lang.String $r1, $r4;
        android.content.Context $r2;
        android.content.SharedPreferences $r3;
        int $i0;
        android.support.v4.widget.SwipeRefreshLayout $r5;
        com.ichi2.async.Connection$TaskListener $r6;
        com.ichi2.async.Connection$Payload $r7;
        java.lang.Object[] $r8;
        boolean $z0;
        java.lang.Boolean $r9;

        r0 := @this: com.ichi2.anki.DeckPicker;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.ichi2.anki.DeckPicker: android.content.Context getBaseContext()>();

        $r3 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r2);

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("hkey", "");

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r5 = r0.<com.ichi2.anki.DeckPicker: android.support.v4.widget.SwipeRefreshLayout mPullToSyncWrapper>;

        virtualinvoke $r5.<android.support.v4.widget.SwipeRefreshLayout: void setRefreshing(boolean)>(0);

        virtualinvoke r0.<com.ichi2.anki.DeckPicker: void showSyncErrorDialog(int)>(0);

        return;

     label1:
        $r6 = r0.<com.ichi2.anki.DeckPicker: com.ichi2.async.Connection$TaskListener mSyncListener>;

        $r7 = new com.ichi2.async.Connection$Payload;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = $r4;

        $z0 = interfaceinvoke $r3.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("syncFetchesMedia", 1);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r8[1] = $r9;

        $r8[2] = $r1;

        specialinvoke $r7.<com.ichi2.async.Connection$Payload: void <init>(java.lang.Object[])>($r8);

        staticinvoke <com.ichi2.async.Connection: com.ichi2.async.Connection sync(com.ichi2.async.Connection$TaskListener,com.ichi2.async.Connection$Payload)>($r6, $r7);

        return;
    }
