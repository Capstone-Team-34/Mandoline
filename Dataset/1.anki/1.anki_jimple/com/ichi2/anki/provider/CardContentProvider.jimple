com.ichi2.anki.provider.CardContentProvider extends android.content.ContentProvider
private static final java.lang.String COL_NULL_ERROR_MSG
private static final int DECKS
private static final int DECKS_ID
private static final int DECK_SELECTED
private static final int MODELS
private static final int MODELS_ID
private static final int MODELS_ID_EMPTY_CARDS
private static final int MODELS_ID_FIELDS
private static final int MODELS_ID_TEMPLATES
private static final int MODELS_ID_TEMPLATES_ID
private static final int NOTES
private static final int NOTES_ID
private static final int NOTES_ID_CARDS
private static final int NOTES_ID_CARDS_ORD
private static final int NOTES_V2
private static final int SCHEDULE
private static final java.lang.String[] sDefaultNoteProjectionDBAccess
private static final android.content.UriMatcher sUriMatcher
private android.content.Context mContext
    static void <clinit>()
    {
        android.content.UriMatcher $r0;
        java.lang.String[] $r1;
        java.lang.Object $r2;
        int i0, $i1;
        java.lang.String $r3;
        boolean $z0;

        $r0 = new android.content.UriMatcher;

        specialinvoke $r0.<android.content.UriMatcher: void <init>(int)>(-1);

        <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher> = $r0;

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "notes", 1000);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "notes_v2", 1005);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "notes/#", 1001);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "notes/#/cards", 1003);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "notes/#/cards/#", 1004);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "models", 2000);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "models/*", 2001);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "models/*/empty_cards", 2002);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "models/*/templates", 2003);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "models/*/templates/#", 2004);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "models/*/fields", 2005);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "schedule/", 3000);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "decks/", 4000);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "decks/#", 4002);

        $r0 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.ichi2.anki.flashcards", "selected_deck/", 4001);

        $r1 = <com.ichi2.anki.FlashCardsContract$Note: java.lang.String[] DEFAULT_PROJECTION>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (java.lang.String[]) $r2;

        <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sDefaultNoteProjectionDBAccess> = $r1;

        i0 = 0;

     label1:
        $r1 = <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sDefaultNoteProjectionDBAccess>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r1 = <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sDefaultNoteProjectionDBAccess>;

        $r3 = $r1[i0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("_id");

        if $z0 == 0 goto label2;

        $r1 = <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sDefaultNoteProjectionDBAccess>;

        $r1[i0] = "id as _id";

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    public void <init>()
    {
        com.ichi2.anki.provider.CardContentProvider r0;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        specialinvoke r0.<android.content.ContentProvider: void <init>()>();

        return;
    }
    private void addCardToCursor(com.ichi2.libanki.Card, android.database.MatrixCursor, com.ichi2.libanki.Collection, java.lang.String[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        com.ichi2.libanki.Card $r1;
        android.database.MatrixCursor $r2;
        com.ichi2.libanki.Collection $r3;
        java.lang.String[] $r4;
        java.lang.String r5, $r8, $r9, $r10;
        org.json.JSONException r6;
        org.json.JSONObject $r7;
        android.database.MatrixCursor$RowBuilder $r11;
        int $i0, $i1, $i3;
        boolean $z0;
        com.ichi2.libanki.Note $r12;
        long $l2;
        java.lang.Long $r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.Integer $r15;
        java.util.HashMap $r16;
        java.lang.Object $r17;
        java.lang.UnsupportedOperationException $r18;
        java.lang.StringBuilder $r19;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: android.database.MatrixCursor;

        $r3 := @parameter2: com.ichi2.libanki.Collection;

        $r4 := @parameter3: java.lang.String[];

     label01:
        $r7 = virtualinvoke $r1.<com.ichi2.libanki.Card: org.json.JSONObject template()>();

        $r8 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label02:
        $r9 = virtualinvoke $r1.<com.ichi2.libanki.Card: java.lang.String q()>();

        $r10 = virtualinvoke $r1.<com.ichi2.libanki.Card: java.lang.String a()>();

        $r11 = virtualinvoke $r2.<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label15;

        r5 = $r4[$i1];

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("note_id");

        if $z0 == 0 goto label06;

        $r12 = virtualinvoke $r1.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        $l2 = virtualinvoke $r12.<com.ichi2.libanki.Note: long getId()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r13);

     label04:
        $i1 = $i1 + 1;

        goto label03;

     label05:
        r6 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Card is using an invalid template", r6);

        throw $r14;

     label06:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("ord");

        if $z0 == 0 goto label07;

        $i3 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getOrd()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r15);

        goto label04;

     label07:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("card_name");

        if $z0 == 0 goto label08;

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r8);

        goto label04;

     label08:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("deck_id");

        if $z0 == 0 goto label09;

        $l2 = virtualinvoke $r1.<com.ichi2.libanki.Card: long getDid()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r13);

        goto label04;

     label09:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("question");

        if $z0 == 0 goto label10;

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r9);

        goto label04;

     label10:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("answer");

        if $z0 == 0 goto label11;

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r10);

        goto label04;

     label11:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("question_simple");

        if $z0 == 0 goto label12;

        r5 = virtualinvoke $r1.<com.ichi2.libanki.Card: java.lang.String qSimple()>();

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r5);

        goto label04;

     label12:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("answer_simple");

        if $z0 == 0 goto label13;

        $r16 = virtualinvoke $r1.<com.ichi2.libanki.Card: java.util.HashMap _getQA(boolean)>(0);

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("a");

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r17);

        goto label04;

     label13:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("answer_pure");

        if $z0 == 0 goto label14;

        r5 = virtualinvoke $r1.<com.ichi2.libanki.Card: java.lang.String getPureAnswer()>();

        virtualinvoke $r11.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r5);

        goto label04;

     label14:
        $r18 = new java.lang.UnsupportedOperationException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Column \"");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is unknown");

        $r8 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r18;

     label15:
        return;

        catch org.json.JSONException from label01 to label02 with label05;
    }
    private void addDeckToCursor(long, java.lang.String, org.json.JSONArray, android.database.MatrixCursor, com.ichi2.libanki.Collection, java.lang.String[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        long $l0;
        java.lang.String $r1, r6;
        org.json.JSONArray $r2;
        android.database.MatrixCursor $r3;
        com.ichi2.libanki.Collection $r4;
        java.lang.String[] $r5;
        int $i1, $i2;
        android.database.MatrixCursor$RowBuilder $r7;
        boolean $z0;
        java.lang.Long $r8;
        com.ichi2.libanki.Decks $r9;
        org.json.JSONObject $r10;
        java.lang.Boolean $r11;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.json.JSONArray;

        $r3 := @parameter3: android.database.MatrixCursor;

        $r4 := @parameter4: com.ichi2.libanki.Collection;

        $r5 := @parameter5: java.lang.String[];

        $r7 = virtualinvoke $r3.<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>();

        $i1 = lengthof $r5;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label8;

        r6 = $r5[$i2];

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("deck_name");

        if $z0 == 0 goto label3;

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r1);

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("deck_id");

        if $z0 == 0 goto label4;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r8);

        goto label2;

     label4:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("deck_count");

        if $z0 == 0 goto label5;

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r2);

        goto label2;

     label5:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("options");

        if $z0 == 0 goto label6;

        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = virtualinvoke $r9.<com.ichi2.libanki.Decks: org.json.JSONObject confForDid(long)>($l0);

        r6 = virtualinvoke $r10.<org.json.JSONObject: java.lang.String toString()>();

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

        goto label2;

     label6:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("deck_dyn");

        if $z0 == 0 goto label7;

        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $z0 = virtualinvoke $r9.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l0);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r11);

        goto label2;

     label7:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("deck_desc");

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        r6 = virtualinvoke $r9.<com.ichi2.libanki.Decks: java.lang.String getActualDescription()>();

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

        goto label2;

     label8:
        return;
    }
    private void addModelToCursor(java.lang.Long, com.ichi2.libanki.Models, android.database.MatrixCursor, java.lang.String[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        java.lang.Long $r1, $r16;
        com.ichi2.libanki.Models $r2;
        android.database.MatrixCursor $r3;
        java.lang.String[] $r4, r5;
        java.lang.String r6;
        org.json.JSONException r7;
        long $l0;
        org.json.JSONObject $r8, $r14;
        android.database.MatrixCursor$RowBuilder $r9;
        int $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.Object[] $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12;
        org.json.JSONArray $r13;
        java.lang.Integer $r15;
        java.lang.UnsupportedOperationException $r17;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: java.lang.Long;

        $r2 := @parameter1: com.ichi2.libanki.Models;

        $r3 := @parameter2: android.database.MatrixCursor;

        $r4 := @parameter3: java.lang.String[];

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $r8 = virtualinvoke $r2.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

        $r9 = virtualinvoke $r3.<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>();

        $i1 = lengthof $r4;

        $i2 = 0;

     label01:
        if $i2 >= $i1 goto label56;

        r6 = $r4[$i2];

     label02:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("_id");

     label03:
        if $z0 == 0 goto label06;

     label04:
        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r1);

     label05:
        $i2 = $i2 + 1;

        goto label01;

     label06:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("name");

     label07:
        if $z0 == 0 goto label11;

     label08:
        r6 = virtualinvoke $r8.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label09:
        goto label05;

     label10:
        r7 := @caughtexception;

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r7, "Error parsing JSONArray", $r10);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Model ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is malformed");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(r6, r7);

        throw $r11;

     label11:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("field_names");

     label12:
        if $z0 == 0 goto label21;

     label13:
        $r13 = virtualinvoke $r8.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

        $i3 = virtualinvoke $r13.<org.json.JSONArray: int length()>();

     label14:
        r5 = newarray (java.lang.String)[$i3];

        $i3 = 0;

     label15:
        $i4 = virtualinvoke $r13.<org.json.JSONArray: int length()>();

     label16:
        if $i3 >= $i4 goto label19;

     label17:
        $r14 = virtualinvoke $r13.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i3);

        r6 = virtualinvoke $r14.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>("name", "");

     label18:
        r5[$i3] = r6;

        $i3 = $i3 + 1;

        goto label15;

     label19:
        r6 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String joinFields(java.lang.String[])>(r5);

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label20:
        goto label05;

     label21:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("num_cards");

     label22:
        if $z0 == 0 goto label25;

     label23:
        $r13 = virtualinvoke $r8.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i3 = virtualinvoke $r13.<org.json.JSONArray: int length()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r15);

     label24:
        goto label05;

     label25:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("css");

     label26:
        if $z0 == 0 goto label29;

     label27:
        r6 = virtualinvoke $r8.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("css");

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label28:
        goto label05;

     label29:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("deck_id");

     label30:
        if $z0 == 0 goto label33;

     label31:
        $l0 = virtualinvoke $r8.<org.json.JSONObject: long getLong(java.lang.String)>("did");

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r16);

     label32:
        goto label05;

     label33:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("sort_field_index");

     label34:
        if $z0 == 0 goto label37;

     label35:
        $l0 = virtualinvoke $r8.<org.json.JSONObject: long getLong(java.lang.String)>("sortf");

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r16);

     label36:
        goto label05;

     label37:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("type");

     label38:
        if $z0 == 0 goto label41;

     label39:
        $l0 = virtualinvoke $r8.<org.json.JSONObject: long getLong(java.lang.String)>("type");

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r16);

     label40:
        goto label05;

     label41:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("latex_post");

     label42:
        if $z0 == 0 goto label45;

     label43:
        r6 = virtualinvoke $r8.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("latexPost");

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label44:
        goto label05;

     label45:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("latex_pre");

     label46:
        if $z0 == 0 goto label49;

     label47:
        r6 = virtualinvoke $r8.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("latexPre");

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label48:
        goto label05;

     label49:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("note_count");

     label50:
        if $z0 == 0 goto label53;

     label51:
        $i3 = virtualinvoke $r2.<com.ichi2.libanki.Models: int useCount(org.json.JSONObject)>($r8);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r9.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r15);

     label52:
        goto label05;

     label53:
        $r17 = new java.lang.UnsupportedOperationException;

        $r12 = new java.lang.StringBuilder;

     label54:
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Column \"");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is unknown");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r6);

     label55:
        throw $r17;

     label56:
        return;

        catch org.json.JSONException from label02 to label03 with label10;
        catch org.json.JSONException from label04 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
        catch org.json.JSONException from label11 to label12 with label10;
        catch org.json.JSONException from label13 to label14 with label10;
        catch org.json.JSONException from label15 to label16 with label10;
        catch org.json.JSONException from label17 to label18 with label10;
        catch org.json.JSONException from label19 to label20 with label10;
        catch org.json.JSONException from label21 to label22 with label10;
        catch org.json.JSONException from label23 to label24 with label10;
        catch org.json.JSONException from label25 to label26 with label10;
        catch org.json.JSONException from label27 to label28 with label10;
        catch org.json.JSONException from label29 to label30 with label10;
        catch org.json.JSONException from label31 to label32 with label10;
        catch org.json.JSONException from label33 to label34 with label10;
        catch org.json.JSONException from label35 to label36 with label10;
        catch org.json.JSONException from label37 to label38 with label10;
        catch org.json.JSONException from label39 to label40 with label10;
        catch org.json.JSONException from label41 to label42 with label10;
        catch org.json.JSONException from label43 to label44 with label10;
        catch org.json.JSONException from label45 to label46 with label10;
        catch org.json.JSONException from label47 to label48 with label10;
        catch org.json.JSONException from label49 to label50 with label10;
        catch org.json.JSONException from label51 to label52 with label10;
        catch org.json.JSONException from label54 to label55 with label10;
    }
    private void addReviewInfoToCursor(com.ichi2.libanki.Card, org.json.JSONArray, int, android.database.MatrixCursor, com.ichi2.libanki.Collection, java.lang.String[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        com.ichi2.libanki.Card $r1;
        org.json.JSONArray $r2, $r11;
        int $i0, $i1, $i2, $i4;
        android.database.MatrixCursor $r3;
        com.ichi2.libanki.Collection $r4;
        java.lang.String[] $r5;
        java.lang.String r6;
        android.database.MatrixCursor$RowBuilder $r7;
        boolean $z0;
        com.ichi2.libanki.Note $r8;
        long $l3;
        java.lang.Long $r9;
        java.lang.Integer $r10;
        com.ichi2.libanki.Media $r12;
        java.lang.StringBuilder $r13;
        java.util.List $r14;
        java.lang.UnsupportedOperationException $r15;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: com.ichi2.libanki.Card;

        $r2 := @parameter1: org.json.JSONArray;

        $i0 := @parameter2: int;

        $r3 := @parameter3: android.database.MatrixCursor;

        $r4 := @parameter4: com.ichi2.libanki.Collection;

        $r5 := @parameter5: java.lang.String[];

        $r7 = virtualinvoke $r3.<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>();

        $i1 = lengthof $r5;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label8;

        r6 = $r5[$i2];

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("note_id");

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke $r1.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        $l3 = virtualinvoke $r8.<com.ichi2.libanki.Note: long getId()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r9);

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("ord");

        if $z0 == 0 goto label4;

        $i4 = virtualinvoke $r1.<com.ichi2.libanki.Card: int getOrd()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r10);

        goto label2;

     label4:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("button_count");

        if $z0 == 0 goto label5;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r10);

        goto label2;

     label5:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("next_review_times");

        if $z0 == 0 goto label6;

        r6 = virtualinvoke $r2.<org.json.JSONArray: java.lang.String toString()>();

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

        goto label2;

     label6:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("media_files");

        if $z0 == 0 goto label7;

        $r11 = new org.json.JSONArray;

        $r12 = virtualinvoke $r4.<com.ichi2.libanki.Collection: com.ichi2.libanki.Media getMedia()>();

        $r8 = virtualinvoke $r1.<com.ichi2.libanki.Card: com.ichi2.libanki.Note note()>();

        $l3 = virtualinvoke $r8.<com.ichi2.libanki.Note: long getMid()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        r6 = virtualinvoke $r1.<com.ichi2.libanki.Card: java.lang.String q()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r1.<com.ichi2.libanki.Card: java.lang.String a()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<com.ichi2.libanki.Media: java.util.List filesInStr(java.lang.Long,java.lang.String)>($r9, r6);

        specialinvoke $r11.<org.json.JSONArray: void <init>(java.util.Collection)>($r14);

        virtualinvoke $r7.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r11);

        goto label2;

     label7:
        $r15 = new java.lang.UnsupportedOperationException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Column \"");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is unknown");

        r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r6);

        throw $r15;

     label8:
        return;
    }
    private void addTemplateToCursor(org.json.JSONObject, org.json.JSONObject, int, com.ichi2.libanki.Models, android.database.MatrixCursor, java.lang.String[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        org.json.JSONObject $r1, $r2;
        int $i0, $i1, $i2, $i4;
        com.ichi2.libanki.Models $r3;
        android.database.MatrixCursor $r4;
        java.lang.String[] $r5;
        java.lang.String r6;
        org.json.JSONException r7;
        android.database.MatrixCursor$RowBuilder $r8;
        boolean $z0;
        java.lang.Integer $r9;
        long $l3;
        java.lang.Long $r10;
        java.lang.Object[] $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.UnsupportedOperationException $r13;
        java.lang.StringBuilder $r14;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: org.json.JSONObject;

        $i0 := @parameter2: int;

        $r3 := @parameter3: com.ichi2.libanki.Models;

        $r4 := @parameter4: android.database.MatrixCursor;

        $r5 := @parameter5: java.lang.String[];

     label01:
        $r8 = virtualinvoke $r4.<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>();

     label02:
        $i1 = lengthof $r5;

        $i2 = 0;

     label03:
        if $i2 >= $i1 goto label44;

        r6 = $r5[$i2];

     label04:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("_id");

     label05:
        if $z0 == 0 goto label08;

     label06:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r9);

     label07:
        $i2 = $i2 + 1;

        goto label03;

     label08:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("model_id");

     label09:
        if $z0 == 0 goto label13;

     label10:
        $l3 = virtualinvoke $r2.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r10);

     label11:
        goto label07;

     label12:
        r7 := @caughtexception;

        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r7, "Error adding template to cursor", $r11);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Template is malformed", r7);

        throw $r12;

     label13:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("ord");

     label14:
        if $z0 == 0 goto label17;

     label15:
        $i4 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r9);

     label16:
        goto label07;

     label17:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("card_template_name");

     label18:
        if $z0 == 0 goto label21;

     label19:
        r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label20:
        goto label07;

     label21:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("question_format");

     label22:
        if $z0 == 0 goto label25;

     label23:
        r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("qfmt");

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label24:
        goto label07;

     label25:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("answer_format");

     label26:
        if $z0 == 0 goto label29;

     label27:
        r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("afmt");

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label28:
        goto label07;

     label29:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("browser_question_format");

     label30:
        if $z0 == 0 goto label33;

     label31:
        r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("bqfmt");

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label32:
        goto label07;

     label33:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("browser_answer_format");

     label34:
        if $z0 == 0 goto label37;

     label35:
        r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("bafmt");

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>(r6);

     label36:
        goto label07;

     label37:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("card_count");

     label38:
        if $z0 == 0 goto label41;

     label39:
        $i4 = virtualinvoke $r1.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

        $i4 = virtualinvoke $r3.<com.ichi2.libanki.Models: int tmplUseCount(org.json.JSONObject,int)>($r2, $i4);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r8.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>($r9);

     label40:
        goto label07;

     label41:
        $r13 = new java.lang.UnsupportedOperationException;

        $r14 = new java.lang.StringBuilder;

     label42:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Support for column \"");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not implemented");

        r6 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r6);

     label43:
        throw $r13;

     label44:
        return;

        catch org.json.JSONException from label01 to label02 with label12;
        catch org.json.JSONException from label04 to label05 with label12;
        catch org.json.JSONException from label06 to label07 with label12;
        catch org.json.JSONException from label08 to label09 with label12;
        catch org.json.JSONException from label10 to label11 with label12;
        catch org.json.JSONException from label13 to label14 with label12;
        catch org.json.JSONException from label15 to label16 with label12;
        catch org.json.JSONException from label17 to label18 with label12;
        catch org.json.JSONException from label19 to label20 with label12;
        catch org.json.JSONException from label21 to label22 with label12;
        catch org.json.JSONException from label23 to label24 with label12;
        catch org.json.JSONException from label25 to label26 with label12;
        catch org.json.JSONException from label27 to label28 with label12;
        catch org.json.JSONException from label29 to label30 with label12;
        catch org.json.JSONException from label31 to label32 with label12;
        catch org.json.JSONException from label33 to label34 with label12;
        catch org.json.JSONException from label35 to label36 with label12;
        catch org.json.JSONException from label37 to label38 with label12;
        catch org.json.JSONException from label39 to label40 with label12;
        catch org.json.JSONException from label42 to label43 with label12;
    }
    private void answerCard(com.ichi2.libanki.Collection, com.ichi2.libanki.Sched, com.ichi2.libanki.Card, int, long)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Sched $r2;
        com.ichi2.libanki.Card $r3;
        int $i0;
        long $l1;
        java.lang.RuntimeException r4;
        com.ichi2.libanki.DB $r5;
        io.requery.android.database.sqlite.SQLiteDatabase $r6;
        byte $b2;
        double $d0, $d1;
        java.lang.Throwable $r7;
        java.lang.Object[] $r8;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        $r2 := @parameter1: com.ichi2.libanki.Sched;

        $r3 := @parameter2: com.ichi2.libanki.Card;

        $i0 := @parameter3: int;

        $l1 := @parameter4: long;

     label01:
        $r5 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label02:
        if $r3 == null goto label07;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label06;

     label03:
        $d0 = staticinvoke <com.ichi2.libanki.Utils: double now()>();

     label04:
        $l1 = $l1 / 1000L;

        $d1 = (double) $l1;

        $d0 = $d0 - $d1;

     label05:
        virtualinvoke $r3.<com.ichi2.libanki.Card: void setTimerStarted(double)>($d0);

     label06:
        virtualinvoke $r2.<com.ichi2.libanki.Sched: void answerCard(com.ichi2.libanki.Card,int)>($r3, $i0);

     label07:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label08:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label09:
        return;

     label10:
        $r7 := @caughtexception;

     label11:
        $r6 = virtualinvoke $r5.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r6.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r7;

     label12:
        r4 := @caughtexception;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r4, "answerCard - RuntimeException on answering card", $r8);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>(r4, "doInBackgroundAnswerCard");

        return;

        catch java.lang.RuntimeException from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label08 with label10;
        catch java.lang.RuntimeException from label08 to label09 with label12;
        catch java.lang.RuntimeException from label11 to label12 with label12;
    }
    private int bulkInsertNotes(android.content.ContentValues[], long)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.content.ContentValues[] $r1;
        long $l0, l2, $l5;
        com.ichi2.libanki.Note r2;
        android.content.ContentValues r3;
        int $i1, i3, $i4, $i7;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        java.lang.IllegalStateException $r7;
        com.ichi2.libanki.Decks $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.lang.Object[] $r10, $r12;
        java.util.Locale $r11;
        java.lang.Integer $r13;
        java.lang.String $r14;
        org.json.JSONObject r15;
        com.ichi2.libanki.DB $r16;
        io.requery.android.database.sqlite.SQLiteDatabase $r17;
        java.lang.Long $r18;
        byte $b6;
        java.lang.StringBuilder $r19;
        java.lang.Throwable $r20;
        java.lang.String[] $r21, $r23;
        com.ichi2.libanki.Models $r22;
        java.util.ArrayList $r24;
        java.util.Iterator $r25;
        java.lang.Object $r26;
        com.ichi2.libanki.Card r27;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.content.ContentValues[];

        $l0 := @parameter1: long;

        if $r1 == null goto label01;

        $i1 = lengthof $r1;

        if $i1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        if $r6 != null goto label03;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AnkiDroid database inaccessible. Open AnkiDroid to see what\'s wrong.");

        throw $r7;

     label03:
        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $z0 = virtualinvoke $r8.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l0);

        if $z0 == 0 goto label04;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A filtered deck cannot be specified as the deck in bulkInsertNotes");

        throw $r9;

     label04:
        $r10 = newarray (java.lang.Object)[1];

        $r11 = <java.util.Locale: java.util.Locale US>;

        $r12 = newarray (java.lang.Object)[2];

        $i1 = lengthof $r1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r12[0] = $r13;

        $r14 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getLogMessage(java.lang.String,android.net.Uri)>("bulkInsert", null);

        $r12[1] = $r14;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r11, "bulkInsertNotes: %d items.\n%s", $r12);

        $r10[0] = $r14;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r10);

        l2 = -1L;

        r15 = null;

        $r8 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r8.<com.ichi2.libanki.Decks: void flush()>();

        $r16 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $i1 = 0;

     label05:
        virtualinvoke $r17.<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label06:
        i3 = 0;

     label07:
        $i4 = lengthof $r1;

     label08:
        if i3 >= $i4 goto label44;

     label09:
        r3 = $r1[i3];

     label10:
        if r3 != null goto label12;

     label11:
        i3 = i3 + 1;

        goto label07;

     label12:
        $r14 = virtualinvoke r3.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("flds");

     label13:
        if $r14 == null goto label11;

     label14:
        $r18 = virtualinvoke r3.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>("mid");

     label15:
        if $r18 == null goto label18;

     label16:
        $l5 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

     label17:
        $b6 = $l5 cmp 0L;

        if $b6 >= 0 goto label21;

     label18:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get model at index: ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r14, $r10);

     label19:
        goto label11;

     label20:
        $r20 := @caughtexception;

        virtualinvoke $r17.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r20;

     label21:
        $r21 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r14);

     label22:
        if r15 == null goto label25;

     label23:
        $l5 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

     label24:
        $b6 = $l5 cmp l2;

        if $b6 == 0 goto label27;

     label25:
        $r22 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        l2 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

        r15 = virtualinvoke $r22.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>(l2);

     label26:
        l2 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

     label27:
        r2 = new com.ichi2.libanki.Note;

        specialinvoke r2.<com.ichi2.libanki.Note: void <init>(com.ichi2.libanki.Collection,org.json.JSONObject)>($r6, r15);

        $i4 = lengthof $r21;

        $r23 = virtualinvoke r2.<com.ichi2.libanki.Note: java.lang.String[] getFields()>();

        $i7 = lengthof $r23;

     label28:
        if $i4 == $i7 goto label30;

     label29:
        $r9 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect flds argument : ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label30:
        $i4 = 0;

     label31:
        $i7 = lengthof $r21;

     label32:
        if $i4 >= $i7 goto label35;

     label33:
        $r14 = $r21[$i4];

        virtualinvoke r2.<com.ichi2.libanki.Note: void setField(int,java.lang.String)>($i4, $r14);

     label34:
        $i4 = $i4 + 1;

        goto label31;

     label35:
        $r14 = virtualinvoke r3.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("tags");

     label36:
        if $r14 == null goto label38;

     label37:
        virtualinvoke r2.<com.ichi2.libanki.Note: void setTagsFromStr(java.lang.String)>($r14);

     label38:
        virtualinvoke $r6.<com.ichi2.libanki.Collection: int addNote(com.ichi2.libanki.Note)>(r2);

        $r24 = virtualinvoke r2.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $r25 = virtualinvoke $r24.<java.util.ArrayList: java.util.Iterator iterator()>();

     label39:
        $z0 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

     label40:
        if $z0 == 0 goto label43;

     label41:
        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.ichi2.libanki.Card) $r26;

        virtualinvoke r27.<com.ichi2.libanki.Card: void setDid(long)>($l0);

        virtualinvoke r27.<com.ichi2.libanki.Card: void flush()>();

     label42:
        goto label39;

     label43:
        $i1 = $i1 + 1;

        goto label11;

     label44:
        virtualinvoke $r6.<com.ichi2.libanki.Collection: void save()>();

        virtualinvoke $r17.<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label45:
        virtualinvoke $r17.<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return $i1;

        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label23 to label24 with label20;
        catch java.lang.Throwable from label25 to label26 with label20;
        catch java.lang.Throwable from label26 to label27 with label20;
        catch java.lang.Throwable from label27 to label28 with label20;
        catch java.lang.Throwable from label29 to label30 with label20;
        catch java.lang.Throwable from label31 to label32 with label20;
        catch java.lang.Throwable from label33 to label34 with label20;
        catch java.lang.Throwable from label35 to label36 with label20;
        catch java.lang.Throwable from label37 to label40 with label20;
        catch java.lang.Throwable from label41 to label42 with label20;
        catch java.lang.Throwable from label44 to label45 with label20;
    }
    private java.lang.String getCallingPackageSafe()
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        int $i0;
        java.lang.String $r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        java.lang.String[] $r4;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label1;

        $r1 = virtualinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getCallingPackage()>();

        return $r1;

     label1:
        $r2 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>($i0);

        $i0 = lengthof $r4;

        if $i0 != 1 goto label2;

        $r1 = $r4[0];

        return $r1;

     label2:
        return null;
    }
    private com.ichi2.libanki.Card getCard(long, int, com.ichi2.libanki.Collection)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        long $l0;
        int $i1, $i2;
        com.ichi2.libanki.Collection $r1;
        com.ichi2.libanki.Note $r2;
        com.ichi2.libanki.Card r3, r7;
        java.util.ArrayList $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 := @parameter2: com.ichi2.libanki.Collection;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Note getNote(long)>($l0);

        r3 = null;

        $r4 = virtualinvoke $r2.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.ichi2.libanki.Card) $r6;

        $i2 = virtualinvoke r7.<com.ichi2.libanki.Card: int getOrd()>();

        if $i2 != $i1 goto label1;

        r3 = r7;

        goto label1;

     label2:
        if r3 != null goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Card with ord ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist for note ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label3:
        return r3;
    }
    private com.ichi2.libanki.Card getCardFromUri(android.net.Uri, com.ichi2.libanki.Collection)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        com.ichi2.libanki.Collection $r2;
        java.util.List $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        long $l0;
        int $i1;
        com.ichi2.libanki.Card $r6;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: com.ichi2.libanki.Collection;

        $r3 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(1);

        $r5 = (java.lang.String) $r4;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(3);

        $r5 = (java.lang.String) $r4;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: com.ichi2.libanki.Card getCard(long,int,com.ichi2.libanki.Collection)>($l0, $i1, $r2);

        return $r6;
    }
    private org.json.JSONArray getDeckCountsFromDueTreeNode(com.ichi2.libanki.Sched$DeckDueTreeNode)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        com.ichi2.libanki.Sched$DeckDueTreeNode $r1;
        org.json.JSONArray r2;
        int $i0;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: com.ichi2.libanki.Sched$DeckDueTreeNode;

        r2 = new org.json.JSONArray;

        specialinvoke r2.<org.json.JSONArray: void <init>()>();

        $i0 = $r1.<com.ichi2.libanki.Sched$DeckDueTreeNode: int lrnCount>;

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>($i0);

        $i0 = $r1.<com.ichi2.libanki.Sched$DeckDueTreeNode: int revCount>;

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>($i0);

        $i0 = $r1.<com.ichi2.libanki.Sched$DeckDueTreeNode: int newCount>;

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(int)>($i0);

        return r2;
    }
    private java.lang.String getLogMessage(java.lang.String, android.net.Uri)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        java.lang.String $r1, r3, $r6;
        android.net.Uri $r2;
        java.lang.Object[] $r4;
        java.lang.Class $r5;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.net.Uri;

        if $r2 != null goto label2;

        r3 = null;

     label1:
        $r4 = newarray (java.lang.Object)[4];

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4[0] = $r6;

        $r4[1] = $r1;

        $r4[2] = r3;

        $r1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getCallingPackageSafe()>();

        $r4[3] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s %s (%s)", $r4);

        return $r1;

     label2:
        r3 = virtualinvoke $r2.<android.net.Uri: java.lang.String getPath()>();

        goto label1;
    }
    private long getModelIdFromUri(android.net.Uri, com.ichi2.libanki.Collection)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        com.ichi2.libanki.Collection $r2;
        java.lang.NumberFormatException r3;
        java.util.List $r4;
        java.lang.Object $r5;
        java.lang.String r6;
        boolean $z0;
        com.ichi2.libanki.Models $r7;
        org.json.JSONObject $r8;
        long $l0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: com.ichi2.libanki.Collection;

        $r4 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

        r6 = (java.lang.String) $r5;

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("current");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r8 = virtualinvoke $r7.<com.ichi2.libanki.Models: org.json.JSONObject current()>();

        $l0 = virtualinvoke $r8.<org.json.JSONObject: long optLong(java.lang.String,long)>("id", -1L);

        return $l0;

     label1:
        $r4 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

     label2:
        r6 = (java.lang.String) $r5;

     label3:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

     label4:
        return $l0;

     label5:
        r3 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Model ID must be either numeric or the String CURRENT_MODEL_ID");

        throw $r9;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }
    private com.ichi2.libanki.Note getNoteFromUri(android.net.Uri, com.ichi2.libanki.Collection)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        com.ichi2.libanki.Collection $r2;
        java.util.List $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        long $l0;
        com.ichi2.libanki.Note $r6;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: com.ichi2.libanki.Collection;

        $r3 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(1);

        $r5 = (java.lang.String) $r4;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

        $r6 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Note getNote(long)>($l0);

        return $r6;
    }
    private org.json.JSONObject getTemplateFromUri(android.net.Uri, com.ichi2.libanki.Collection) throws org.json.JSONException
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        com.ichi2.libanki.Collection $r2;
        com.ichi2.libanki.Models $r3;
        long $l0;
        org.json.JSONObject $r4;
        java.lang.String $r5;
        int $i1;
        java.lang.Integer $r6;
        org.json.JSONArray $r7;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: com.ichi2.libanki.Collection;

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r2);

        $r4 = virtualinvoke $r3.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l0);

        $r5 = virtualinvoke $r1.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r4 = virtualinvoke $r7.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i1);

        return $r4;
    }
    private boolean hasReadWritePermission()
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        int $i0;
        android.content.Context $r1;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingPermission(java.lang.String)>("com.ichi2.anki.permission.READ_WRITE_DATABASE");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean knownRogueClient()
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.content.pm.PackageManager$NameNotFoundException r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4;
        android.content.pm.PackageInfo $r5;
        java.lang.String[] $r6;
        java.util.List $r7;
        boolean $z0;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r2 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        $r4 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getCallingPackageSafe()>();

        $r5 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 4096);

     label2:
        if $r5 == null goto label7;

        $r6 = $r5.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        if $r6 != null goto label3;

        return 0;

     label3:
        $r6 = $r5.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

     label4:
        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $z0 = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>("com.ichi2.anki.permission.READ_WRITE_DATABASE");

     label5:
        if $z0 != 0 goto label7;

        return 1;

     label6:
        r1 := @caughtexception;

     label7:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label6;
        catch android.content.pm.PackageManager$NameNotFoundException from label4 to label5 with label6;
    }
    private static int projSearch(java.lang.String[], java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int i0, $i1;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $r2 = $r0[i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }
    private static java.lang.String[] sanitizeNoteProjection(java.lang.String[])
    {
        java.lang.String[] $r0, $r3;
        java.lang.String r1;
        java.util.ArrayList r2;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: java.lang.String[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        $r0 = <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sDefaultNoteProjectionDBAccess>;

        return $r0;

     label2:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r0;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        r1 = $r0[$i1];

        $r3 = <com.ichi2.anki.FlashCardsContract$Note: java.lang.String[] DEFAULT_PROJECTION>;

        $i2 = staticinvoke <com.ichi2.anki.provider.CardContentProvider: int projSearch(java.lang.String[],java.lang.String)>($r3, r1);

        if $i2 < 0 goto label4;

        $r3 = <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sDefaultNoteProjectionDBAccess>;

        r1 = $r3[$i2];

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown column ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label5:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r0 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r0 = (java.lang.String[]) $r6;

        return $r0;
    }
    private boolean selectDeckWithCheck(com.ichi2.libanki.Collection, long)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        com.ichi2.libanki.Collection $r1;
        long $l0;
        com.ichi2.libanki.Decks $r2;
        org.json.JSONObject $r3;
        java.lang.Object[] $r4;
        java.lang.Long $r5;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: com.ichi2.libanki.Collection;

        $l0 := @parameter1: long;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r3 = virtualinvoke $r2.<com.ichi2.libanki.Decks: org.json.JSONObject get(long,boolean)>($l0, 0);

        if $r3 == null goto label1;

        $r2 = virtualinvoke $r1.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r2.<com.ichi2.libanki.Decks: void select(long)>($l0);

        return 1;

     label1:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Requested deck with id %d was not found in deck list. Either the deckID provided was wrongor the deck has been deleted in the meantime.", $r4);

        return 0;
    }
    private boolean shouldEnforceQueryOrInsertSecurity()
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        boolean $z0;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $z0 = staticinvoke <com.ichi2.compat.CompatHelper: boolean isMarshmallow()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean knownRogueClient()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private boolean shouldEnforceUpdateSecurity(android.net.Uri)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        java.lang.Integer[] $r2;
        java.lang.Integer $r3;
        java.util.List $r4;
        boolean $z0;
        android.content.UriMatcher $r5;
        int $i0;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 = newarray (java.lang.Integer)[5];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1004);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2001);

        $r2[1] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2004);

        $r2[2] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3000);

        $r2[3] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4001);

        $r2[4] = $r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $z0 = staticinvoke <com.ichi2.compat.CompatHelper: boolean isMarshmallow()>();

        if $z0 != 0 goto label1;

        $r5 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        $i0 = virtualinvoke $r5.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean knownRogueClient()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private void throwSecurityException(java.lang.String, android.net.Uri)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        java.lang.String $r1;
        android.net.Uri $r2;
        java.lang.Object[] $r3;
        java.lang.SecurityException $r4;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.net.Uri;

        $r3 = newarray (java.lang.Object)[1];

        $r1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getLogMessage(java.lang.String,android.net.Uri)>($r1, $r2);

        $r3[0] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission not granted for: %s", $r3);

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>($r1, $r3);

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }
    public int bulkInsert(android.net.Uri, android.content.ContentValues[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        android.content.ContentValues[] $r2;
        java.lang.NumberFormatException r3;
        boolean $z0;
        android.content.UriMatcher $r4;
        int $i0;
        java.lang.String $r5;
        java.lang.Long $r6;
        long $l1;
        java.lang.Object[] $r7;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: android.content.ContentValues[];

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean hasReadWritePermission()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean shouldEnforceQueryOrInsertSecurity()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void throwSecurityException(java.lang.String,android.net.Uri)>("bulkInsert", $r1);

     label1:
        $r4 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        $i0 = virtualinvoke $r4.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        if $i0 != 1000 goto label5;

        $r5 = virtualinvoke $r1.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("deckId");

        if $r5 == null goto label5;

     label2:
        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r5);

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $i0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: int bulkInsertNotes(android.content.ContentValues[],long)>($r2, $l1);

     label3:
        return $i0;

     label4:
        r3 := @caughtexception;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = "deckId";

        $r7[1] = $r5;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Invalid %s: %s", $r7);

     label5:
        $i0 = specialinvoke r0.<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>($r1, $r2);

        return $i0;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }
    public int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        boolean $z0;
        com.ichi2.anki.CollectionHelper $r4;
        android.content.Context $r5;
        com.ichi2.libanki.Collection $r6;
        java.lang.IllegalStateException $r7;
        java.lang.Object[] $r8;
        android.content.UriMatcher $r9;
        int $i0;
        java.lang.UnsupportedOperationException $r10;
        long[] $r11;
        java.util.List $r12;
        java.lang.Object $r13;
        long $l1;
        com.ichi2.libanki.Models $r14;
        org.json.JSONObject $r15;
        java.util.ArrayList $r16;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean hasReadWritePermission()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void throwSecurityException(java.lang.String,android.net.Uri)>("delete", $r1);

     label1:
        $r4 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r5 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r5);

        if $r6 != null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AnkiDroid database inaccessible. Open AnkiDroid to see what\'s wrong.");

        throw $r7;

     label2:
        $r8 = newarray (java.lang.Object)[1];

        $r2 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getLogMessage(java.lang.String,android.net.Uri)>("delete", $r1);

        $r8[0] = $r2;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r8);

        $r9 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        $i0 = virtualinvoke $r9.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        lookupswitch($i0)
        {
            case 1001: goto label4;
            case 2002: goto label5;
            default: goto label3;
        };

     label3:
        $r10 = new java.lang.UnsupportedOperationException;

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r10;

     label4:
        $r11 = newarray (long)[1];

        $r12 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(1);

        $r2 = (java.lang.String) $r13;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $r11[0] = $l1;

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void remNotes(long[])>($r11);

        return 1;

     label5:
        $r14 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r6);

        $r15 = virtualinvoke $r14.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        if $r15 != null goto label6;

        return -1;

     label6:
        $r14 = virtualinvoke $r6.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r16 = virtualinvoke $r14.<com.ichi2.libanki.Models: java.util.ArrayList nids(org.json.JSONObject)>($r15);

        $r16 = virtualinvoke $r6.<com.ichi2.libanki.Collection: java.util.ArrayList genCards(java.util.List)>($r16);

        $r11 = staticinvoke <com.ichi2.libanki.Utils: long[] arrayList2array(java.util.List)>($r16);

        virtualinvoke $r6.<com.ichi2.libanki.Collection: void remCards(long[])>($r11);

        $i0 = interfaceinvoke $r16.<java.util.List: int size()>();

        return $i0;
    }
    public java.lang.String getType(android.net.Uri)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        android.content.UriMatcher $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        $i0 = virtualinvoke $r2.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        lookupswitch($i0)
        {
            case 1000: goto label02;
            case 1001: goto label03;
            case 1003: goto label04;
            case 1004: goto label05;
            case 1005: goto label02;
            case 2000: goto label06;
            case 2001: goto label07;
            case 2002: goto label08;
            case 2003: goto label09;
            case 2004: goto label10;
            case 3000: goto label11;
            case 4000: goto label12;
            case 4001: goto label14;
            case 4002: goto label13;
            default: goto label01;
        };

     label01:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uri ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label02:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.note";

     label03:
        return "vnd.android.cursor.item/vnd.com.ichi2.anki.note";

     label04:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.card";

     label05:
        return "vnd.android.cursor.item/vnd.com.ichi2.anki.card";

     label06:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.model";

     label07:
        return "vnd.android.cursor.item/vnd.com.ichi2.anki.model";

     label08:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.card";

     label09:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.model.template";

     label10:
        return "vnd.android.cursor.item/vnd.com.ichi2.anki.model.template";

     label11:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.review_info";

     label12:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.deck";

     label13:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.deck";

     label14:
        return "vnd.android.cursor.dir/vnd.com.ichi2.anki.deck";
    }
    public android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        android.content.ContentValues $r2;
        java.lang.String r3, $r10, $r15, $r23, $r24;
        com.ichi2.libanki.Note r4;
        boolean $z0;
        com.ichi2.anki.CollectionHelper $r5;
        android.content.Context $r6;
        com.ichi2.libanki.Collection $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Object[] $r9;
        android.content.UriMatcher $r11;
        int $i0, $i2;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13;
        java.lang.Long $r14;
        com.ichi2.libanki.Models $r16;
        long $l1;
        org.json.JSONObject $r17, $r26;
        java.lang.String[] $r18, $r19;
        java.lang.Integer $r20, $r21, $r22;
        com.ichi2.libanki.Decks $r25;
        com.ichi2.anki.exception.ConfirmModSchemaException r27, r31, r34;
        org.json.JSONException r28, r29, r32, r35, r36;
        java.lang.RuntimeException $r30;
        org.json.JSONArray $r33;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: android.content.ContentValues;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean hasReadWritePermission()>();

        if $z0 != 0 goto label01;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean shouldEnforceQueryOrInsertSecurity()>();

        if $z0 == 0 goto label01;

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void throwSecurityException(java.lang.String,android.net.Uri)>("insert", $r1);

     label01:
        $r5 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r6 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r6);

        if $r7 != null goto label02;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AnkiDroid database inaccessible. Open AnkiDroid to see what\'s wrong.");

        throw $r8;

     label02:
        $r9 = newarray (java.lang.Object)[1];

        $r10 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getLogMessage(java.lang.String,android.net.Uri)>("insert", $r1);

        $r9[0] = $r10;

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r9);

        $r11 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        $i0 = virtualinvoke $r11.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        lookupswitch($i0)
        {
            case 1000: goto label04;
            case 1001: goto label09;
            case 1003: goto label10;
            case 1004: goto label11;
            case 2000: goto label12;
            case 2001: goto label53;
            case 2003: goto label54;
            case 2004: goto label67;
            case 2005: goto label68;
            case 3000: goto label77;
            case 4000: goto label78;
            case 4001: goto label85;
            case 4002: goto label86;
            default: goto label03;
        };

     label03:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uri ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label04:
        $r14 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>("mid");

        $r15 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("flds");

        $r10 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("tags");

        r4 = new com.ichi2.libanki.Note;

        $r16 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l1 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        specialinvoke r4.<com.ichi2.libanki.Note: void <init>(com.ichi2.libanki.Collection,org.json.JSONObject)>($r7, $r17);

        $r18 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r15);

        $i0 = lengthof $r18;

        $r19 = virtualinvoke r4.<com.ichi2.libanki.Note: java.lang.String[] getFields()>();

        $i2 = lengthof $r19;

        if $i0 == $i2 goto label05;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect flds argument : ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label05:
        $i0 = 0;

     label06:
        $i2 = lengthof $r18;

        if $i0 >= $i2 goto label07;

        $r15 = $r18[$i0];

        virtualinvoke r4.<com.ichi2.libanki.Note: void setField(int,java.lang.String)>($i0, $r15);

        $i0 = $i0 + 1;

        goto label06;

     label07:
        if $r10 == null goto label08;

        virtualinvoke r4.<com.ichi2.libanki.Note: void setTagsFromStr(java.lang.String)>($r10);

     label08:
        virtualinvoke $r7.<com.ichi2.libanki.Collection: int addNote(com.ichi2.libanki.Note)>(r4);

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

        $r1 = <com.ichi2.anki.FlashCardsContract$Note: android.net.Uri CONTENT_URI>;

        $l1 = virtualinvoke r4.<com.ichi2.libanki.Note: long getId()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        $r1 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r1, $r10);

        return $r1;

     label09:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to insert note with specific ID");

        throw $r12;

     label10:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to insert cards directly (only through NOTES)");

        throw $r12;

     label11:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to insert cards directly (only through NOTES)");

        throw $r12;

     label12:
        $r10 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("name");

        $r15 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("css");

        $r14 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>("deck_id");

        r3 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("field_names");

        $r20 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>("num_cards");

        $r21 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>("sort_field_index");

        $r22 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>("type");

        $r23 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("latex_post");

        $r24 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("latex_pre");

        if $r10 == null goto label13;

        if r3 == null goto label13;

        if $r20 != null goto label14;

     label13:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Model name, field_names, and num_cards can\'t be empty");

        throw $r12;

     label14:
        if $r14 == null goto label15;

        $r25 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $z0 = virtualinvoke $r25.<com.ichi2.libanki.Decks: boolean isDyn(long)>($l1);

        if $z0 == 0 goto label15;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set a filtered deck as default deck for a model");

        throw $r12;

     label15:
        $r16 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject newModel(java.lang.String)>($r10);

     label16:
        $r18 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>(r3);

     label17:
        $i0 = lengthof $r18;

        $i2 = 0;

     label18:
        if $i2 >= $i0 goto label21;

        r3 = $r18[$i2];

     label19:
        $r26 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>(r3);

        virtualinvoke $r16.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>($r17, $r26);

     label20:
        $i2 = $i2 + 1;

        goto label18;

     label21:
        $i0 = 0;

     label22:
        $i2 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

     label23:
        if $i0 >= $i2 goto label33;

        $r13 = new java.lang.StringBuilder;

     label24:
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Card ");

     label25:
        $i2 = $i0 + 1;

     label26:
        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject newTemplate(java.lang.String)>(r3);

     label27:
        $r9 = newarray (java.lang.Object)[1];

        r3 = $r18[0];

        $r9[0] = r3;

     label28:
        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("{{%s}}", $r9);

        virtualinvoke $r26.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("qfmt", r3);

     label29:
        r3 = $r18[0];

        $i2 = lengthof $r18;

        if $i2 <= 1 goto label30;

        r3 = $r18[1];

     label30:
        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r3;

     label31:
        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("{{FrontSide}}\\n\\n<hr id=answer>\\n\\n{{%s}}", $r9);

        virtualinvoke $r26.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("afmt", r3);

        virtualinvoke $r16.<com.ichi2.libanki.Models: void addTemplate(org.json.JSONObject,org.json.JSONObject)>($r17, $r26);

     label32:
        $i0 = $i0 + 1;

        goto label22;

     label33:
        if $r15 == null goto label35;

     label34:
        virtualinvoke $r17.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("css", $r15);

     label35:
        if $r14 == null goto label37;

     label36:
        virtualinvoke $r17.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("did", $r14);

     label37:
        if $r21 == null goto label41;

     label38:
        $i0 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

     label39:
        $i2 = lengthof $r18;

        if $i0 >= $i2 goto label41;

     label40:
        virtualinvoke $r17.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("sortf", $r21);

     label41:
        if $r22 == null goto label43;

     label42:
        virtualinvoke $r17.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("type", $r22);

     label43:
        if $r23 == null goto label45;

     label44:
        virtualinvoke $r17.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("latexPost", $r23);

     label45:
        if $r24 == null goto label47;

     label46:
        virtualinvoke $r17.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("latexPre", $r24);

     label47:
        virtualinvoke $r16.<com.ichi2.libanki.Models: void add(org.json.JSONObject)>($r17);

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

        $l1 = virtualinvoke $r17.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r15 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

     label48:
        $r1 = <com.ichi2.anki.FlashCardsContract$Model: android.net.Uri CONTENT_URI>;

     label49:
        $r1 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r1, $r15);

     label50:
        return $r1;

     label51:
        r27 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r10;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r27, "Unexpected ConfirmModSchema exception adding new model %s", $r9);

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConfirmModSchema exception adding new model ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label52:
        r28 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r10;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r28, "Could not set a field of new model %s", $r9);

        return null;

     label53:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to insert model with specific ID");

        throw $r12;

     label54:
        $r16 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r7);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l1 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        if $r17 != null goto label55;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("model missing: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label55:
        $r10 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("card_template_name");

        $r15 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("question_format");

        $r23 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("answer_format");

        $r24 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("browser_question_format");

        r3 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("browser_answer_format");

     label56:
        $r26 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject newTemplate(java.lang.String)>($r10);

     label57:
        virtualinvoke $r26.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("qfmt", $r15);

        virtualinvoke $r26.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("afmt", $r23);

        virtualinvoke $r26.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("bqfmt", $r24);

        virtualinvoke $r26.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("bafmt", r3);

     label58:
        virtualinvoke $r16.<com.ichi2.libanki.Models: void addTemplate(org.json.JSONObject,org.json.JSONObject)>($r17, $r26);

        virtualinvoke $r16.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r17);

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

        $i0 = virtualinvoke $r26.<org.json.JSONObject: int getInt(java.lang.String)>("ord");

     label59:
        $l1 = (long) $i0;

     label60:
        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r1, $l1);

     label61:
        return $r1;

     label62:
        r29 := @caughtexception;

        $r30 = new java.lang.RuntimeException;

     label63:
        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r29);

     label64:
        throw $r30;

     label65:
        r31 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to add template", r31);

        throw $r12;

     label66:
        r32 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to get ord from new template", r32);

        throw $r12;

     label67:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to insert template with specific ORD");

        throw $r12;

     label68:
        $r16 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r7);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l1 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        if $r17 != null goto label69;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("model missing: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label69:
        $r10 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("field_name");

        if $r10 != null goto label70;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field name missing for model: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label70:
        $r26 = virtualinvoke $r16.<com.ichi2.libanki.Models: org.json.JSONObject newField(java.lang.String)>($r10);

     label71:
        virtualinvoke $r16.<com.ichi2.libanki.Models: void addField(org.json.JSONObject,org.json.JSONObject)>($r17, $r26);

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

        $r33 = virtualinvoke $r17.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("flds");

        $i0 = virtualinvoke $r33.<org.json.JSONArray: int length()>();

     label72:
        $i0 = $i0 + -1;

        $l1 = (long) $i0;

     label73:
        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r1, $l1);

     label74:
        return $r1;

     label75:
        r34 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to insert field: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r34);

        throw $r12;

     label76:
        r35 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get newly created field: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r35);

        throw $r12;

     label77:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to perform insert operation on schedule");

        throw $r12;

     label78:
        $r10 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("deck_name");

        $r25 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r14 = virtualinvoke $r25.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String,boolean)>($r10, 0);

        if $r14 == null goto label79;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deck name already exists: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label79:
        $r25 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r14 = virtualinvoke $r25.<com.ichi2.libanki.Decks: java.lang.Long id(java.lang.String,boolean)>($r10, 1);

        $r25 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $r17 = virtualinvoke $r25.<com.ichi2.libanki.Decks: org.json.JSONObject get(long)>($l1);

        if $r17 == null goto label83;

     label80:
        $r15 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("deck_desc");

     label81:
        if $r15 == null goto label83;

     label82:
        virtualinvoke $r17.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("desc", $r15);

     label83:
        $r25 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r25.<com.ichi2.libanki.Decks: void flush()>();

        $r1 = <com.ichi2.anki.FlashCardsContract$Deck: android.net.Uri CONTENT_ALL_URI>;

        $l1 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        $r1 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r1, $r10);

        return $r1;

     label84:
        r36 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r10;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r36, "Could not set a field of new deck %s", $r9);

        return null;

     label85:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Selected deck can only be queried and updated");

        throw $r12;

     label86:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to insert deck with specific ID");

        throw $r12;

        catch com.ichi2.anki.exception.ConfirmModSchemaException from label16 to label17 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label19 to label20 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label22 to label23 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label24 to label25 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label26 to label27 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label28 to label29 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label31 to label32 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label34 to label35 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label36 to label37 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label38 to label39 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label40 to label41 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label42 to label43 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label44 to label45 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label46 to label48 with label51;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label49 to label50 with label51;
        catch org.json.JSONException from label16 to label17 with label52;
        catch org.json.JSONException from label19 to label20 with label52;
        catch org.json.JSONException from label22 to label23 with label52;
        catch org.json.JSONException from label24 to label25 with label52;
        catch org.json.JSONException from label26 to label27 with label52;
        catch org.json.JSONException from label28 to label29 with label52;
        catch org.json.JSONException from label31 to label32 with label52;
        catch org.json.JSONException from label34 to label35 with label52;
        catch org.json.JSONException from label36 to label37 with label52;
        catch org.json.JSONException from label38 to label39 with label52;
        catch org.json.JSONException from label40 to label41 with label52;
        catch org.json.JSONException from label42 to label43 with label52;
        catch org.json.JSONException from label44 to label45 with label52;
        catch org.json.JSONException from label46 to label48 with label52;
        catch org.json.JSONException from label49 to label50 with label52;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label56 to label57 with label65;
        catch org.json.JSONException from label56 to label57 with label66;
        catch org.json.JSONException from label57 to label58 with label62;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label57 to label58 with label65;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label58 to label59 with label65;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label60 to label61 with label65;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label63 to label64 with label65;
        catch org.json.JSONException from label58 to label59 with label66;
        catch org.json.JSONException from label60 to label61 with label66;
        catch org.json.JSONException from label63 to label64 with label66;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label71 to label72 with label75;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label73 to label74 with label75;
        catch org.json.JSONException from label71 to label72 with label76;
        catch org.json.JSONException from label73 to label74 with label76;
        catch org.json.JSONException from label80 to label81 with label84;
        catch org.json.JSONException from label82 to label83 with label84;
    }
    public boolean onCreate()
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.content.Context $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CardContentProvider: onCreate", $r2);

        $r1 = virtualinvoke r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context getContext()>();

        r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext> = $r1;

        return 1;
    }
    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        java.lang.String[] $r2, $r4, $r35, $r36;
        java.lang.String $r3, $r5, $r11;
        org.json.JSONArray r6;
        boolean $z0;
        com.ichi2.anki.CollectionHelper $r7;
        android.content.Context $r8;
        com.ichi2.libanki.Collection $r9;
        java.lang.IllegalStateException $r10;
        java.lang.Object[] $r12;
        android.content.UriMatcher $r13;
        int $i0, $i2, $i4, i5, i6;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r15;
        com.ichi2.libanki.DB $r16;
        io.requery.android.database.sqlite.SQLiteDatabase $r17;
        android.database.Cursor $r18;
        java.util.List $r19, $r41;
        java.lang.Object $r20;
        com.ichi2.libanki.Note $r21;
        android.database.MatrixCursor r22;
        java.util.ArrayList $r23;
        java.util.Iterator $r24;
        com.ichi2.libanki.Card r25;
        com.ichi2.libanki.Models $r26;
        java.util.HashMap $r27;
        java.util.Set $r28;
        java.lang.Long r29;
        long $l1, l3, $l7;
        org.json.JSONObject $r30, $r31;
        org.json.JSONException r32, r33;
        com.ichi2.libanki.Decks $r34;
        java.lang.Integer $r37;
        java.lang.NumberFormatException r38;
        com.ichi2.libanki.Sched $r39;
        byte $b8;
        com.ichi2.libanki.Sched$DeckDueTreeNode r40;
        int[][] $r42;
        int[] $r43;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean hasReadWritePermission()>();

        if $z0 != 0 goto label01;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean shouldEnforceQueryOrInsertSecurity()>();

        if $z0 == 0 goto label01;

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void throwSecurityException(java.lang.String,android.net.Uri)>("query", $r1);

     label01:
        $r7 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r8 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r8);

        if $r9 != null goto label02;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AnkiDroid database inaccessible. Open AnkiDroid to see what\'s wrong.");

        throw $r10;

     label02:
        $r11 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getLogMessage(java.lang.String,android.net.Uri)>("query", $r1);

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r11, $r12);

        $r13 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        $i0 = virtualinvoke $r13.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        lookupswitch($i0)
        {
            case 1000: goto label05;
            case 1001: goto label09;
            case 1003: goto label10;
            case 1004: goto label14;
            case 1005: goto label04;
            case 2000: goto label17;
            case 2001: goto label21;
            case 2003: goto label24;
            case 2004: goto label36;
            case 3000: goto label44;
            case 4000: goto label71;
            case 4001: goto label79;
            case 4002: goto label75;
            default: goto label03;
        };

     label03:
        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uri ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r14;

     label04:
        $r2 = staticinvoke <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sanitizeNoteProjection(java.lang.String[])>($r2);

        $r16 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r18 = virtualinvoke $r17.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String)>("notes", $r2, $r3, $r4, null, null, $r5);

        return $r18;

     label05:
        $r2 = staticinvoke <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sanitizeNoteProjection(java.lang.String[])>($r2);

        if $r3 == null goto label07;

     label06:
        $r19 = virtualinvoke $r9.<com.ichi2.libanki.Collection: java.util.List findNotes(java.lang.String)>($r3);

        if $r19 == null goto label08;

        $z0 = interfaceinvoke $r19.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label08;

        $r12 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", $r19);

        $r12[0] = $r3;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("id in (%s)", $r12);

        $r16 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r18 = virtualinvoke $r17.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String)>("notes", $r2, $r3, null, null, null, $r5);

        return $r18;

     label07:
        $r3 = "";

        goto label06;

     label08:
        return null;

     label09:
        $r19 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(1);

        $r3 = (java.lang.String) $r20;

        $r2 = staticinvoke <com.ichi2.anki.provider.CardContentProvider: java.lang.String[] sanitizeNoteProjection(java.lang.String[])>($r2);

        $r16 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.DB getDb()>();

        $r17 = virtualinvoke $r16.<com.ichi2.libanki.DB: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r3;

        $r18 = virtualinvoke $r17.<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String)>("notes", $r2, "id=?", $r4, null, null, $r5);

        return $r18;

     label10:
        $r21 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: com.ichi2.libanki.Note getNoteFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r9);

        if $r2 == null goto label13;

     label11:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

        $r23 = virtualinvoke $r21.<com.ichi2.libanki.Note: java.util.ArrayList cards()>();

        $r24 = virtualinvoke $r23.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label83;

        $r20 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.ichi2.libanki.Card) $r20;

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addCardToCursor(com.ichi2.libanki.Card,android.database.MatrixCursor,com.ichi2.libanki.Collection,java.lang.String[])>(r25, r22, $r9, $r2);

        goto label12;

     label13:
        $r2 = <com.ichi2.anki.FlashCardsContract$Card: java.lang.String[] DEFAULT_PROJECTION>;

        goto label11;

     label14:
        r25 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: com.ichi2.libanki.Card getCardFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r9);

        if $r2 == null goto label16;

     label15:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addCardToCursor(com.ichi2.libanki.Card,android.database.MatrixCursor,com.ichi2.libanki.Collection,java.lang.String[])>(r25, r22, $r9, $r2);

        return r22;

     label16:
        $r2 = <com.ichi2.anki.FlashCardsContract$Card: java.lang.String[] DEFAULT_PROJECTION>;

        goto label15;

     label17:
        $r26 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        if $r2 == null goto label20;

     label18:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

        $r27 = virtualinvoke $r26.<com.ichi2.libanki.Models: java.util.HashMap getModels()>();

        $r28 = virtualinvoke $r27.<java.util.HashMap: java.util.Set keySet()>();

        $r24 = interfaceinvoke $r28.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label83;

        $r20 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.lang.Long) $r20;

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addModelToCursor(java.lang.Long,com.ichi2.libanki.Models,android.database.MatrixCursor,java.lang.String[])>(r29, $r26, r22, $r2);

        goto label19;

     label20:
        $r2 = <com.ichi2.anki.FlashCardsContract$Model: java.lang.String[] DEFAULT_PROJECTION>;

        goto label18;

     label21:
        $l1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r9);

        if $r2 == null goto label23;

     label22:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

        r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r26 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addModelToCursor(java.lang.Long,com.ichi2.libanki.Models,android.database.MatrixCursor,java.lang.String[])>(r29, $r26, r22, $r2);

        return r22;

     label23:
        $r2 = <com.ichi2.anki.FlashCardsContract$Model: java.lang.String[] DEFAULT_PROJECTION>;

        goto label22;

     label24:
        $r26 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $l1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r9);

        $r30 = virtualinvoke $r26.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        if $r2 == null goto label34;

     label25:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

     label26:
        r6 = virtualinvoke $r30.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

     label27:
        $i0 = 0;

     label28:
        $i2 = virtualinvoke r6.<org.json.JSONArray: int length()>();

     label29:
        if $i0 >= $i2 goto label83;

     label30:
        $r31 = virtualinvoke r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

     label31:
        $i2 = $i0 + 1;

     label32:
        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addTemplateToCursor(org.json.JSONObject,org.json.JSONObject,int,com.ichi2.libanki.Models,android.database.MatrixCursor,java.lang.String[])>($r31, $r30, $i2, $r26, r22, $r2);

     label33:
        $i0 = $i0 + 1;

        goto label28;

     label34:
        $r2 = <com.ichi2.anki.FlashCardsContract$CardTemplate: java.lang.String[] DEFAULT_PROJECTION>;

        goto label25;

     label35:
        r32 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Model is malformed", r32);

        throw $r14;

     label36:
        $r26 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $l1 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r9);

        $r30 = virtualinvoke $r26.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>($l1);

        if $r2 == null goto label43;

     label37:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

     label38:
        $r31 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: org.json.JSONObject getTemplateFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r9);

     label39:
        $i0 = $i0 + 1;

     label40:
        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addTemplateToCursor(org.json.JSONObject,org.json.JSONObject,int,com.ichi2.libanki.Models,android.database.MatrixCursor,java.lang.String[])>($r31, $r30, $i0, $r26, r22, $r2);

     label41:
        return r22;

     label42:
        r33 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Model is malformed", r33);

        throw $r14;

     label43:
        $r2 = <com.ichi2.anki.FlashCardsContract$CardTemplate: java.lang.String[] DEFAULT_PROJECTION>;

        goto label37;

     label44:
        if $r2 == null goto label55;

     label45:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

        $r34 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke $r34.<com.ichi2.libanki.Decks: long selected()>();

        l3 = -1L;

        $i0 = 1;

        if $r3 == null goto label66;

        $r35 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i2 = lengthof $r35;

        $i4 = 0;

        i5 = 0;

     label46:
        if $i4 >= $i2 goto label66;

        $r3 = $r35[$i4];

        $r36 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $r3 = $r36[1];

     label47:
        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("?");

     label48:
        if $z0 == 0 goto label56;

        i6 = i5 + 1;

        $r3 = $r4[i5];

     label49:
        $r5 = $r36[0];

     label50:
        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("limit");

     label51:
        if $z0 == 0 goto label57;

     label52:
        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

        i5 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

     label53:
        $i0 = i5;

     label54:
        $i4 = $i4 + 1;

        i5 = i6;

        goto label46;

     label55:
        $r2 = <com.ichi2.anki.FlashCardsContract$ReviewInfo: java.lang.String[] DEFAULT_PROJECTION>;

        goto label45;

     label56:
        $r3 = $r36[1];

        i6 = i5;

        goto label49;

     label57:
        $r5 = $r36[0];

     label58:
        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("deckID");

     label59:
        if $z0 == 0 goto label54;

     label60:
        r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r3);

        $l7 = virtualinvoke r29.<java.lang.Long: long longValue()>();

     label61:
        l3 = $l7;

     label62:
        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean selectDeckWithCheck(com.ichi2.libanki.Collection,long)>($r9, $l7);

     label63:
        if $z0 != 0 goto label54;

        return r22;

     label64:
        r38 := @caughtexception;

        i6 = i5;

     label65:
        virtualinvoke r38.<java.lang.NumberFormatException: void printStackTrace()>();

        goto label54;

     label66:
        $r39 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        virtualinvoke $r39.<com.ichi2.libanki.Sched: void reset()>();

        $i2 = 0;

     label67:
        if $i2 >= $i0 goto label70;

        $r39 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        r25 = virtualinvoke $r39.<com.ichi2.libanki.Sched: com.ichi2.libanki.Card getCard()>();

        if r25 == null goto label70;

        $r39 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $i4 = virtualinvoke $r39.<com.ichi2.libanki.Sched: int answerButtons(com.ichi2.libanki.Card)>(r25);

        r6 = new org.json.JSONArray;

        specialinvoke r6.<org.json.JSONArray: void <init>()>();

        i6 = 0;

     label68:
        if i6 >= $i4 goto label69;

        $r39 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r8 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        i5 = i6 + 1;

        $r3 = virtualinvoke $r39.<com.ichi2.libanki.Sched: java.lang.String nextIvlStr(android.content.Context,com.ichi2.libanki.Card,int)>($r8, r25, i5);

        virtualinvoke r6.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r3);

        i6 = i6 + 1;

        goto label68;

     label69:
        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addReviewInfoToCursor(com.ichi2.libanki.Card,org.json.JSONArray,int,android.database.MatrixCursor,com.ichi2.libanki.Collection,java.lang.String[])>(r25, r6, $i4, r22, $r9, $r2);

        $i2 = $i2 + 1;

        goto label67;

     label70:
        $b8 = l3 cmp -1L;

        if $b8 == 0 goto label83;

        $r34 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r34.<com.ichi2.libanki.Decks: void select(long)>($l1);

        return r22;

     label71:
        $r39 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r19 = virtualinvoke $r39.<com.ichi2.libanki.Sched: java.util.List deckDueList()>();

        if $r2 == null goto label74;

     label72:
        r22 = new android.database.MatrixCursor;

        $i0 = interfaceinvoke $r19.<java.util.List: int size()>();

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, $i0);

        $r24 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label73:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label83;

        $r20 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r40 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r20;

        $l1 = r40.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $r4 = r40.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r3 = $r4[0];

        r6 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: org.json.JSONArray getDeckCountsFromDueTreeNode(com.ichi2.libanki.Sched$DeckDueTreeNode)>(r40);

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addDeckToCursor(long,java.lang.String,org.json.JSONArray,android.database.MatrixCursor,com.ichi2.libanki.Collection,java.lang.String[])>($l1, $r3, r6, r22, $r9, $r2);

        goto label73;

     label74:
        $r2 = <com.ichi2.anki.FlashCardsContract$Deck: java.lang.String[] DEFAULT_PROJECTION>;

        goto label72;

     label75:
        if $r2 == null goto label78;

     label76:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

        $r39 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r19 = virtualinvoke $r39.<com.ichi2.libanki.Sched: java.util.List deckDueList()>();

        $r41 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r20 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(1);

        $r3 = (java.lang.String) $r20;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        $r24 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label77:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label83;

        $r20 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r40 = (com.ichi2.libanki.Sched$DeckDueTreeNode) $r20;

        l3 = r40.<com.ichi2.libanki.Sched$DeckDueTreeNode: long did>;

        $b8 = l3 cmp $l1;

        if $b8 != 0 goto label77;

        $r4 = r40.<com.ichi2.libanki.Sched$DeckDueTreeNode: java.lang.String[] names>;

        $r3 = $r4[0];

        r6 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: org.json.JSONArray getDeckCountsFromDueTreeNode(com.ichi2.libanki.Sched$DeckDueTreeNode)>(r40);

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addDeckToCursor(long,java.lang.String,org.json.JSONArray,android.database.MatrixCursor,com.ichi2.libanki.Collection,java.lang.String[])>($l1, $r3, r6, r22, $r9, $r2);

        return r22;

     label78:
        $r2 = <com.ichi2.anki.FlashCardsContract$Deck: java.lang.String[] DEFAULT_PROJECTION>;

        goto label76;

     label79:
        $r34 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $l1 = virtualinvoke $r34.<com.ichi2.libanki.Decks: long selected()>();

        $r34 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r3 = virtualinvoke $r34.<com.ichi2.libanki.Decks: java.lang.String name(long)>($l1);

        if $r2 == null goto label81;

     label80:
        r22 = new android.database.MatrixCursor;

        specialinvoke r22.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r2, 1);

        r6 = new org.json.JSONArray;

        $r42 = newarray (int[])[1];

        $r39 = virtualinvoke $r9.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        $r43 = virtualinvoke $r39.<com.ichi2.libanki.Sched: int[] counts()>();

        $r42[0] = $r43;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r42);

        specialinvoke r6.<org.json.JSONArray: void <init>(java.util.Collection)>($r19);

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void addDeckToCursor(long,java.lang.String,org.json.JSONArray,android.database.MatrixCursor,com.ichi2.libanki.Collection,java.lang.String[])>($l1, $r3, r6, r22, $r9, $r2);

        return r22;

     label81:
        $r2 = <com.ichi2.anki.FlashCardsContract$Deck: java.lang.String[] DEFAULT_PROJECTION>;

        goto label80;

     label82:
        r38 := @caughtexception;

        goto label65;

     label83:
        return r22;

        catch org.json.JSONException from label26 to label27 with label35;
        catch org.json.JSONException from label28 to label29 with label35;
        catch org.json.JSONException from label30 to label31 with label35;
        catch org.json.JSONException from label32 to label33 with label35;
        catch org.json.JSONException from label38 to label39 with label42;
        catch org.json.JSONException from label40 to label41 with label42;
        catch java.lang.NumberFormatException from label47 to label48 with label64;
        catch java.lang.NumberFormatException from label50 to label51 with label82;
        catch java.lang.NumberFormatException from label52 to label53 with label82;
        catch java.lang.NumberFormatException from label58 to label59 with label82;
        catch java.lang.NumberFormatException from label60 to label61 with label82;
        catch java.lang.NumberFormatException from label62 to label63 with label82;
    }
    public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        com.ichi2.anki.provider.CardContentProvider r0;
        android.net.Uri $r1;
        android.content.ContentValues $r2;
        java.lang.String $r3, $r23, $r24, $r25, $r28, $r32;
        java.lang.String[] $r4, $r18;
        boolean $z0, $z1;
        com.ichi2.anki.CollectionHelper $r5;
        android.content.Context $r6;
        com.ichi2.libanki.Collection $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Object[] $r9;
        android.content.UriMatcher $r10;
        int $i0, i1, $i2;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12;
        com.ichi2.libanki.Note $r13;
        java.util.Set $r14;
        java.util.Iterator $r15;
        java.lang.Object $r16;
        java.util.Map$Entry r17;
        java.lang.UnsupportedOperationException $r19;
        com.ichi2.libanki.Card $r20;
        long l3, l5;
        java.lang.Long $r21;
        com.ichi2.libanki.Decks $r22;
        byte $b4;
        java.lang.Integer $r26, $r27;
        com.ichi2.libanki.Models $r29;
        org.json.JSONObject $r30, $r34;
        org.json.JSONException r31, r35;
        org.json.JSONArray $r33;
        com.ichi2.libanki.Sched $r36;

        r0 := @this: com.ichi2.anki.provider.CardContentProvider;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: android.content.ContentValues;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean hasReadWritePermission()>();

        if $z0 != 0 goto label01;

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean shouldEnforceUpdateSecurity(android.net.Uri)>($r1);

        if $z0 == 0 goto label01;

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void throwSecurityException(java.lang.String,android.net.Uri)>("update", $r1);

     label01:
        $r5 = staticinvoke <com.ichi2.anki.CollectionHelper: com.ichi2.anki.CollectionHelper getInstance()>();

        $r6 = r0.<com.ichi2.anki.provider.CardContentProvider: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<com.ichi2.anki.CollectionHelper: com.ichi2.libanki.Collection getCol(android.content.Context)>($r6);

        if $r7 != null goto label02;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AnkiDroid database inaccessible. Open AnkiDroid to see what\'s wrong.");

        throw $r8;

     label02:
        $r9 = newarray (java.lang.Object)[1];

        $r3 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: java.lang.String getLogMessage(java.lang.String,android.net.Uri)>("update", $r1);

        $r9[0] = $r3;

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void log(java.lang.Object[])>($r9);

        $r10 = <com.ichi2.anki.provider.CardContentProvider: android.content.UriMatcher sUriMatcher>;

        $i0 = virtualinvoke $r10.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        i1 = 0;

        lookupswitch($i0)
        {
            case 1000: goto label04;
            case 1001: goto label05;
            case 1003: goto label14;
            case 1004: goto label15;
            case 1005: goto label04;
            case 2000: goto label20;
            case 2001: goto label21;
            case 2003: goto label50;
            case 2004: goto label51;
            case 3000: goto label72;
            case 4000: goto label79;
            case 4001: goto label81;
            case 4002: goto label80;
            default: goto label03;
        };

     label03:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uri ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label04:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not possible to update notes directly (only through data URI)");

        throw $r11;

     label05:
        $r13 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: com.ichi2.libanki.Note getNoteFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r7);

        $r14 = virtualinvoke $r2.<android.content.ContentValues: java.util.Set valueSet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r16;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("flds");

        if $z0 == 0 goto label10;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CardContentProvider: flds update...", $r9);

        $r16 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r16;

        $r4 = staticinvoke <com.ichi2.libanki.Utils: java.lang.String[] splitFields(java.lang.String)>($r3);

        $i0 = lengthof $r4;

        $r18 = virtualinvoke $r13.<com.ichi2.libanki.Note: java.lang.String[] getFields()>();

        $i2 = lengthof $r18;

        if $i0 == $i2 goto label07;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect flds argument : ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label07:
        $i0 = 0;

     label08:
        $i2 = lengthof $r4;

        if $i0 >= $i2 goto label09;

        $r3 = $r4[$i0];

        virtualinvoke $r13.<com.ichi2.libanki.Note: void setField(int,java.lang.String)>($i0, $r3);

        $i0 = $i0 + 1;

        goto label08;

     label09:
        i1 = i1 + 1;

        goto label06;

     label10:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("tags");

        if $z0 == 0 goto label12;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CardContentProvider: tags update...", $r9);

        $r16 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r16 == null goto label11;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        virtualinvoke $r13.<com.ichi2.libanki.Note: void setTagsFromStr(java.lang.String)>($r3);

     label11:
        i1 = i1 + 1;

        goto label06;

     label12:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported column: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label13:
        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CardContentProvider: Saving note...", $r9);

        virtualinvoke $r13.<com.ichi2.libanki.Note: void flush()>();

        return i1;

     label14:
        $r19 = new java.lang.UnsupportedOperationException;

        specialinvoke $r19.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not yet implemented");

        throw $r19;

     label15:
        $r20 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: com.ichi2.libanki.Card getCardFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r7);

        $z0 = 0;

        l3 = -1L;

        $r14 = virtualinvoke $r2.<android.content.ContentValues: java.util.Set valueSet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r16;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("deck_id");

        $r21 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>($r3);

        l3 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        goto label16;

     label17:
        $r22 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $z1 = virtualinvoke $r22.<com.ichi2.libanki.Decks: boolean isDyn(long)>(l3);

        if $z1 == 0 goto label18;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cards cannot be moved to a filtered deck");

        throw $r11;

     label18:
        if $z0 == 0 goto label19;

        $b4 = l3 cmp 0L;

        if $b4 < 0 goto label19;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("CardContentProvider: Moving card to other deck...", $r9);

        $r22 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        virtualinvoke $r22.<com.ichi2.libanki.Decks: void flush()>();

        virtualinvoke $r20.<com.ichi2.libanki.Card: void setDid(long)>(l3);

        virtualinvoke $r20.<com.ichi2.libanki.Card: void flush()>();

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

        return 1;

     label19:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Currently only updates of decks are supported");

        throw $r11;

     label20:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot update models in bulk");

        throw $r11;

     label21:
        $r3 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("name");

        $r23 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("css");

        $r24 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("deck_id");

        $r25 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("field_names");

        if $r25 == null goto label22;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field names cannot be changed via provider");

        throw $r11;

     label22:
        $r26 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>("sort_field_index");

        $r27 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>("type");

        $r25 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("latex_post");

        $r28 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("latex_pre");

        $r29 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        l3 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r7);

        $r30 = virtualinvoke $r29.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>(l3);

        if $r3 == null goto label25;

     label23:
        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r3);

     label24:
        i1 = 1;

     label25:
        if $r23 == null goto label28;

     label26:
        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("css", $r23);

     label27:
        i1 = i1 + 1;

     label28:
        if $r24 == null goto label36;

     label29:
        $r22 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r24);

        $z0 = virtualinvoke $r22.<com.ichi2.libanki.Decks: boolean isDyn(long)>(l3);

     label30:
        if $z0 == 0 goto label34;

        $r11 = new java.lang.IllegalArgumentException;

     label31:
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set a filtered deck as default deck for a model");

     label32:
        throw $r11;

     label33:
        r31 := @caughtexception;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r31, "JSONException updating model", $r9);

        return i1;

     label34:
        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("did", $r24);

     label35:
        i1 = i1 + 1;

     label36:
        if $r26 == null goto label39;

     label37:
        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("sortf", $r26);

     label38:
        i1 = i1 + 1;

     label39:
        if $r27 == null goto label42;

     label40:
        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("type", $r27);

     label41:
        i1 = i1 + 1;

     label42:
        if $r25 == null goto label45;

     label43:
        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("latexPost", $r25);

     label44:
        i1 = i1 + 1;

     label45:
        if $r28 == null goto label48;

     label46:
        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("latexPre", $r28);

     label47:
        i1 = i1 + 1;

     label48:
        $r29 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r29.<com.ichi2.libanki.Models: void save(org.json.JSONObject)>($r30);

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

     label49:
        return i1;

     label50:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot update templates in bulk");

        throw $r11;

     label51:
        $r21 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>("model_id");

        $r26 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>("ord");

        $r3 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("card_template_name");

        $r23 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("question_format");

        $r24 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("answer_format");

        $r25 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("browser_question_format");

        $r28 = virtualinvoke $r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("browser_answer_format");

        if $r21 != null goto label52;

        if $r26 == null goto label53;

     label52:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Updates to mid or ord are not allowed");

        throw $r11;

     label53:
        $r32 = virtualinvoke $r1.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r32);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r29 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        l3 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: long getModelIdFromUri(android.net.Uri,com.ichi2.libanki.Collection)>($r1, $r7);

        $r30 = virtualinvoke $r29.<com.ichi2.libanki.Models: org.json.JSONObject get(long)>(l3);

        $r33 = virtualinvoke $r30.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("tmpls");

        $i0 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        $r34 = virtualinvoke $r33.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

     label54:
        if $r3 == null goto label57;

     label55:
        virtualinvoke $r34.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r3);

     label56:
        i1 = 1;

     label57:
        if $r23 == null goto label60;

     label58:
        virtualinvoke $r34.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("qfmt", $r23);

     label59:
        i1 = i1 + 1;

     label60:
        if $r24 == null goto label63;

     label61:
        virtualinvoke $r34.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("afmt", $r24);

     label62:
        i1 = i1 + 1;

     label63:
        if $r25 == null goto label66;

     label64:
        virtualinvoke $r34.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("bqfmt", $r25);

     label65:
        i1 = i1 + 1;

     label66:
        if $r28 == null goto label69;

     label67:
        virtualinvoke $r34.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("bafmt", $r28);

     label68:
        i1 = i1 + 1;

     label69:
        $i0 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        virtualinvoke $r33.<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>($i0, $r34);

        virtualinvoke $r30.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("tmpls", $r33);

        $r29 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Models getModels()>();

        virtualinvoke $r29.<com.ichi2.libanki.Models: void save(org.json.JSONObject,boolean)>($r30, 1);

        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

     label70:
        return i1;

     label71:
        r35 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Model is malformed", r35);

        throw $r11;

     label72:
        $r14 = virtualinvoke $r2.<android.content.ContentValues: java.util.Set valueSet()>();

        i1 = -1;

        l3 = -1L;

        $i0 = -1;

        l5 = -1L;

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label73:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label77;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r16;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("note_id");

        if $z0 == 0 goto label74;

        $r21 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>($r3);

        l3 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        goto label73;

     label74:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("ord");

        if $z0 == 0 goto label75;

        $r26 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>($r3);

        i1 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        goto label73;

     label75:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("answer_ease");

        if $z0 == 0 goto label76;

        $r26 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>($r3);

        $i0 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        goto label73;

     label76:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("time_taken");

        if $z0 == 0 goto label73;

        $r21 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>($r3);

        l5 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        goto label73;

     label77:
        if i1 == -1 goto label84;

        $b4 = l3 cmp -1L;

        if $b4 == 0 goto label84;

        $r20 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: com.ichi2.libanki.Card getCard(long,int,com.ichi2.libanki.Collection)>(l3, i1, $r7);

        if $r20 == null goto label78;

        $r36 = virtualinvoke $r7.<com.ichi2.libanki.Collection: com.ichi2.libanki.Sched getSched()>();

        specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: void answerCard(com.ichi2.libanki.Collection,com.ichi2.libanki.Sched,com.ichi2.libanki.Card,int,long)>($r7, $r36, $r20, $i0, l5);

        return 1;

     label78:
        $r9 = newarray (java.lang.Object)[2];

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r9[0] = $r21;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9[1] = $r26;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Requested card with noteId %d and cardOrd %d was not found. Either the provided noteId/cardOrd were wrong or the card has been deleted in the meantime.", $r9);

        return 0;

     label79:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t update decks in bulk");

        throw $r11;

     label80:
        $r19 = new java.lang.UnsupportedOperationException;

        specialinvoke $r19.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not yet implemented");

        throw $r19;

     label81:
        $r14 = virtualinvoke $r2.<android.content.ContentValues: java.util.Set valueSet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label82:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label83;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r16;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("deck_id");

        if $z0 == 0 goto label82;

        $r21 = virtualinvoke $r2.<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>($r3);

        l3 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        $z0 = specialinvoke r0.<com.ichi2.anki.provider.CardContentProvider: boolean selectDeckWithCheck(com.ichi2.libanki.Collection,long)>($r7, l3);

        if $z0 == 0 goto label82;

        i1 = i1 + 1;

        goto label82;

     label83:
        virtualinvoke $r7.<com.ichi2.libanki.Collection: void save()>();

        return i1;

     label84:
        return 0;

        catch org.json.JSONException from label23 to label24 with label33;
        catch org.json.JSONException from label26 to label27 with label33;
        catch org.json.JSONException from label29 to label30 with label33;
        catch org.json.JSONException from label31 to label32 with label33;
        catch org.json.JSONException from label34 to label35 with label33;
        catch org.json.JSONException from label37 to label38 with label33;
        catch org.json.JSONException from label40 to label41 with label33;
        catch org.json.JSONException from label43 to label44 with label33;
        catch org.json.JSONException from label46 to label47 with label33;
        catch org.json.JSONException from label48 to label49 with label33;
        catch org.json.JSONException from label53 to label54 with label71;
        catch org.json.JSONException from label55 to label56 with label71;
        catch org.json.JSONException from label58 to label59 with label71;
        catch org.json.JSONException from label61 to label62 with label71;
        catch org.json.JSONException from label64 to label65 with label71;
        catch org.json.JSONException from label67 to label68 with label71;
        catch org.json.JSONException from label69 to label70 with label71;
    }
