com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor extends java.lang.Object implements android.content.SharedPreferences$Editor
private com.ichi2.async.DeckTask$TaskListener mConfChangeHandler
private android.content.ContentValues mUpdate
final com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1
    public void <init>(com.ichi2.anki.DeckOptions$DeckPreferenceHack)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r1;
        android.content.ContentValues $r2;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2 $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: com.ichi2.anki.DeckOptions$DeckPreferenceHack;

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate> = $r2;

        $r3 = new com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2;

        specialinvoke $r3.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$2: void <init>(com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor)>(r0);

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.async.DeckTask$TaskListener mConfChangeHandler> = $r3;

        return;
    }
    static void access$300(com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor) throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor $r0;

        $r0 := @parameter0: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        specialinvoke $r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: void remConf()>();

        return;
    }
    private void remConf() throws com.ichi2.anki.exception.ConfirmModSchemaException
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        org.json.JSONException r1;
        com.ichi2.async.DeckTask$TaskData $r2;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r3;
        com.ichi2.anki.DeckOptions $r4;
        com.ichi2.libanki.Collection $r5;
        com.ichi2.libanki.Decks $r6;
        org.json.JSONObject $r7;
        long $l0;
        com.ichi2.async.DeckTask$TaskListener $r8;
        com.ichi2.async.DeckTask$TaskData[] $r9;
        java.lang.Object[] $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r4 = $r3.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label01:
        $r5 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r4);

        $r6 = virtualinvoke $r5.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

     label02:
        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r4 = $r3.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label03:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r4);

        $l0 = virtualinvoke $r7.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        virtualinvoke $r6.<com.ichi2.libanki.Decks: void remConf(long)>($l0);

     label04:
        $r8 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.async.DeckTask$TaskListener mConfChangeHandler>;

        $r9 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r2 = new com.ichi2.async.DeckTask$TaskData;

        $r10 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r4 = $r3.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label05:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r4);

     label06:
        $r10[0] = $r7;

     label07:
        specialinvoke $r2.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r10);

     label08:
        $r9[0] = $r2;

     label09:
        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(35, $r8, $r9);

     label10:
        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r4 = $r3.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label11:
        $r7 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r4);

        virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("conf", 1);

     label12:
        return;

     label13:
        r1 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r11;

        catch org.json.JSONException from label01 to label02 with label13;
        catch org.json.JSONException from label03 to label04 with label13;
        catch org.json.JSONException from label05 to label06 with label13;
        catch org.json.JSONException from label07 to label08 with label13;
        catch org.json.JSONException from label09 to label10 with label13;
        catch org.json.JSONException from label11 to label12 with label13;
    }
    public void apply()
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        virtualinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: boolean commit()>();

        return;
    }
    public android.content.SharedPreferences$Editor clear()
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.Object[] $r1;
        android.content.ContentValues $r2;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("clear()", $r1);

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate> = $r2;

        return r0;
    }
    public boolean commit()
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.Object[] $r1;
        android.content.ContentValues $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r21;
        java.util.Map$Entry r6;
        java.lang.String r7, $r9;
        java.lang.StringBuilder $r8;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack $r10;
        com.ichi2.anki.DeckOptions $r11, $r25;
        org.json.JSONObject $r12, $r31;
        org.json.JSONException r13;
        java.lang.RuntimeException $r14;
        java.lang.Integer r15;
        int $i0, $i1;
        com.ichi2.async.DeckTask$TaskListener $r16;
        com.ichi2.async.DeckTask$TaskData[] $r17;
        com.ichi2.async.DeckTask$TaskData $r18;
        org.json.JSONArray r19, $r20;
        float $f0;
        double $d0;
        java.lang.Boolean r22;
        byte $b2;
        com.ichi2.libanki.Collection $r23;
        com.ichi2.libanki.Decks $r24;
        long $l3;
        android.content.res.Resources $r26;
        com.ichi2.anki.exception.ConfirmModSchemaException r27;
        com.afollestad.materialdialogs.MaterialDialog$Builder $r28;
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$1 $r29;
        com.afollestad.materialdialogs.MaterialDialog $r30;
        android.app.AlarmManager r32;
        android.content.Context $r33, $r35;
        android.content.Intent $r34;
        android.app.PendingIntent $r36;
        java.util.Calendar $r37;
        java.util.List $r38;
        android.content.SharedPreferences$OnSharedPreferenceChangeListener r39;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("DeckOptions - commit() changes back to database", $r1);

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

     label001:
        $r3 = virtualinvoke $r2.<android.content.ContentValues: java.util.Set valueSet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label002:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

     label003:
        if $z0 == 0 goto label272;

     label004:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

     label005:
        r6 = (java.util.Map$Entry) $r5;

     label006:
        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

     label007:
        r7 = (java.lang.String) $r5;

     label008:
        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

     label009:
        $r8 = new java.lang.StringBuilder;

     label010:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Change value for key \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label011:
        $r1 = newarray (java.lang.Object)[0];

     label012:
        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>($r9, $r1);

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("maxAnswerTime");

     label013:
        if $z0 == 0 goto label017;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label014:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("maxTaken", $r5);

     label015:
        goto label002;

     label016:
        r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r13);

        throw $r14;

     label017:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("newFactor");

     label018:
        if $z0 == 0 goto label025;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label019:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

     label020:
        r15 = (java.lang.Integer) $r5;

     label021:
        $i0 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

     label022:
        $i0 = $i0 * 10;

     label023:
        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("initialFactor", $i0);

     label024:
        goto label002;

     label025:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("newOrder");

     label026:
        if $z0 == 0 goto label043;

        r7 = (java.lang.String) $r5;

     label027:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r7);

     label028:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label029:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $i1 = virtualinvoke $r12.<org.json.JSONObject: int getInt(java.lang.String)>("order");

     label030:
        if $i1 == $i0 goto label038;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label031:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("order", $i0);

     label032:
        $r16 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.async.DeckTask$TaskListener mConfChangeHandler>;

        $r17 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r18 = new com.ichi2.async.DeckTask$TaskData;

        $r1 = newarray (java.lang.Object)[1];

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label033:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

     label034:
        $r1[0] = $r12;

     label035:
        specialinvoke $r18.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r1);

     label036:
        $r17[0] = $r18;

     label037:
        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(32, $r16, $r17);

     label038:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label039:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

     label040:
        r7 = (java.lang.String) $r5;

     label041:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r7);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("order", $i0);

     label042:
        goto label002;

     label043:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("newPerDay");

     label044:
        if $z0 == 0 goto label047;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label045:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("perDay", $r5);

     label046:
        goto label002;

     label047:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("newGradIvl");

     label048:
        if $z0 == 0 goto label055;

        r19 = new org.json.JSONArray;

     label049:
        specialinvoke r19.<org.json.JSONArray: void <init>()>();

        virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r5);

     label050:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label051:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $r20 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("ints");

        $r5 = virtualinvoke $r20.<org.json.JSONArray: java.lang.Object get(int)>(1);

        virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r5);

     label052:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label053:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("ints", r19);

     label054:
        goto label002;

     label055:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("newEasy");

     label056:
        if $z0 == 0 goto label063;

        r19 = new org.json.JSONArray;

     label057:
        specialinvoke r19.<org.json.JSONArray: void <init>()>();

     label058:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label059:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        $r20 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("ints");

        $r21 = virtualinvoke $r20.<org.json.JSONArray: java.lang.Object get(int)>(0);

        virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r21);

        virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r5);

     label060:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label061:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("ints", r19);

     label062:
        goto label002;

     label063:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("newBury");

     label064:
        if $z0 == 0 goto label067;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label065:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("bury", $r5);

     label066:
        goto label002;

     label067:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("revPerDay");

     label068:
        if $z0 == 0 goto label071;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label069:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("perDay", $r5);

     label070:
        goto label002;

     label071:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("easyBonus");

     label072:
        if $z0 == 0 goto label079;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label073:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

     label074:
        r15 = (java.lang.Integer) $r5;

     label075:
        $i0 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

     label076:
        $f0 = (float) $i0;

        $f0 = $f0 / 100.0F;

        $d0 = (double) $f0;

     label077:
        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>("ease4", $d0);

     label078:
        goto label002;

     label079:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("revIvlFct");

     label080:
        if $z0 == 0 goto label087;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label081:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

     label082:
        r15 = (java.lang.Integer) $r5;

     label083:
        $i0 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

     label084:
        $f0 = (float) $i0;

        $f0 = $f0 / 100.0F;

        $d0 = (double) $f0;

     label085:
        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>("ivlFct", $d0);

     label086:
        goto label002;

     label087:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("revMaxIvl");

     label088:
        if $z0 == 0 goto label091;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label089:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("maxIvl", $r5);

     label090:
        goto label002;

     label091:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("revBury");

     label092:
        if $z0 == 0 goto label095;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label093:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("rev");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("bury", $r5);

     label094:
        goto label002;

     label095:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("lapMinIvl");

     label096:
        if $z0 == 0 goto label099;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label097:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("minInt", $r5);

     label098:
        goto label002;

     label099:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("lapLeechThres");

     label100:
        if $z0 == 0 goto label103;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label101:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("leechFails", $r5);

     label102:
        goto label002;

     label103:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("lapLeechAct");

     label104:
        if $z0 == 0 goto label109;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label105:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

     label106:
        r7 = (java.lang.String) $r5;

     label107:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r7);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("leechAction", $i0);

     label108:
        goto label002;

     label109:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("lapNewIvl");

     label110:
        if $z0 == 0 goto label117;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label111:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

     label112:
        r15 = (java.lang.Integer) $r5;

     label113:
        $i0 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

     label114:
        $f0 = (float) $i0;

        $f0 = $f0 / 100.0F;

        $d0 = (double) $f0;

     label115:
        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>("mult", $d0);

     label116:
        goto label002;

     label117:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("showAnswerTimer");

     label118:
        if $z0 == 0 goto label126;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label119:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

     label120:
        r22 = (java.lang.Boolean) $r5;

     label121:
        $z0 = virtualinvoke r22.<java.lang.Boolean: boolean booleanValue()>();

     label122:
        if $z0 == 0 goto label125;

        $b2 = 1;

     label123:
        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("timer", $b2);

     label124:
        goto label002;

     label125:
        $b2 = 0;

        goto label123;

     label126:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("autoPlayAudio");

     label127:
        if $z0 == 0 goto label130;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label128:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("autoplay", $r5);

     label129:
        goto label002;

     label130:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("replayQuestion");

     label131:
        if $z0 == 0 goto label134;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label132:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("replayq", $r5);

     label133:
        goto label002;

     label134:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("desc");

     label135:
        if $z0 == 0 goto label142;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label136:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("desc", $r5);

     label137:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label138:
        $r23 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r11);

        $r24 = virtualinvoke $r23.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

     label139:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label140:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r24.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r12);

     label141:
        goto label002;

     label142:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("newSteps");

     label143:
        if $z0 == 0 goto label148;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label144:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("new");

     label145:
        r7 = (java.lang.String) $r5;

     label146:
        r19 = staticinvoke <com.ichi2.preferences.StepsPreference: org.json.JSONArray convertToJSON(java.lang.String)>(r7);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("delays", r19);

     label147:
        goto label002;

     label148:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("lapSteps");

     label149:
        if $z0 == 0 goto label154;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label150:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r12 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("lapse");

     label151:
        r7 = (java.lang.String) $r5;

     label152:
        r19 = staticinvoke <com.ichi2.preferences.StepsPreference: org.json.JSONArray convertToJSON(java.lang.String)>(r7);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("delays", r19);

     label153:
        goto label002;

     label154:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("deckConf");

     label155:
        if $z0 == 0 goto label168;

        r7 = (java.lang.String) $r5;

     label156:
        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7);

     label157:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r25 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label158:
        $r23 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r25);

        $r24 = virtualinvoke $r23.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r12 = virtualinvoke $r24.<com.ichi2.libanki.Decks: org.json.JSONObject getConf(long)>($l3);

        staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$002(com.ichi2.anki.DeckOptions,org.json.JSONObject)>($r11, $r12);

     label159:
        $r16 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.async.DeckTask$TaskListener mConfChangeHandler>;

        $r17 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r18 = new com.ichi2.async.DeckTask$TaskData;

        $r1 = newarray (java.lang.Object)[2];

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label160:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

     label161:
        $r1[0] = $r12;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label162:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

     label163:
        $r1[1] = $r12;

     label164:
        specialinvoke $r18.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r1);

     label165:
        $r17[0] = $r18;

     label166:
        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(33, $r16, $r17);

     label167:
        goto label002;

     label168:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("confRename");

     label169:
        if $z0 == 0 goto label174;

        r7 = (java.lang.String) $r5;

     label170:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

     label171:
        if $z0 != 0 goto label002;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label172:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", r7);

     label173:
        goto label002;

     label174:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("confReset");

     label175:
        if $z0 == 0 goto label184;

        r22 = (java.lang.Boolean) $r5;

     label176:
        $z0 = virtualinvoke r22.<java.lang.Boolean: boolean booleanValue()>();

     label177:
        if $z0 == 0 goto label002;

        $r16 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.async.DeckTask$TaskListener mConfChangeHandler>;

        $r17 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r18 = new com.ichi2.async.DeckTask$TaskData;

        $r1 = newarray (java.lang.Object)[1];

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label178:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

     label179:
        $r1[0] = $r12;

     label180:
        specialinvoke $r18.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r1);

     label181:
        $r17[0] = $r18;

     label182:
        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(34, $r16, $r17);

     label183:
        goto label002;

     label184:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("confAdd");

     label185:
        if $z0 == 0 goto label198;

        r7 = (java.lang.String) $r5;

     label186:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

     label187:
        if $z0 != 0 goto label002;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label188:
        $r23 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r11);

        $r24 = virtualinvoke $r23.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

     label189:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label190:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r9 = virtualinvoke $r12.<org.json.JSONObject: java.lang.String toString()>();

        $l3 = virtualinvoke $r24.<com.ichi2.libanki.Decks: long confId(java.lang.String,java.lang.String)>(r7, $r9);

     label191:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label192:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>("conf", $l3);

     label193:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label194:
        $r23 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r11);

        $r24 = virtualinvoke $r23.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

     label195:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label196:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r24.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r12);

     label197:
        goto label002;

     label198:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("confRemove");

     label199:
        if $z0 == 0 goto label211;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label200:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $l3 = virtualinvoke $r12.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label201:
        $b2 = $l3 cmp 1L;

        if $b2 != 0 goto label204;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r25 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label202:
        $r26 = virtualinvoke $r25.<com.ichi2.anki.DeckOptions: android.content.res.Resources getResources()>();

        r7 = virtualinvoke $r26.<android.content.res.Resources: java.lang.String getString(int)>(2131230958);

        staticinvoke <com.ichi2.anki.UIUtils: void showThemedToast(android.content.Context,java.lang.String,boolean)>($r11, r7, 0);

     label203:
        goto label002;

     label204:
        specialinvoke r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: void remConf()>();

     label205:
        goto label002;

     label206:
        r27 := @caughtexception;

        $r28 = new com.afollestad.materialdialogs.MaterialDialog$Builder;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label207:
        specialinvoke $r28.<com.afollestad.materialdialogs.MaterialDialog$Builder: void <init>(android.content.Context)>($r11);

        $r28 = virtualinvoke $r28.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder content(int)>(2131231051);

        $r28 = virtualinvoke $r28.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder positiveText(int)>(2131230970);

        $r28 = virtualinvoke $r28.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder negativeText(int)>(2131230967);

     label208:
        $r29 = new com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$1;

     label209:
        specialinvoke $r29.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor$1: void <init>(com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor)>(r0);

        $r28 = virtualinvoke $r28.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog$Builder callback(com.afollestad.materialdialogs.MaterialDialog$ButtonCallback)>($r29);

        $r30 = virtualinvoke $r28.<com.afollestad.materialdialogs.MaterialDialog$Builder: com.afollestad.materialdialogs.MaterialDialog build()>();

        virtualinvoke $r30.<com.afollestad.materialdialogs.MaterialDialog: void show()>();

     label210:
        goto label002;

     label211:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("confSetSubdecks");

     label212:
        if $z0 == 0 goto label223;

        r22 = (java.lang.Boolean) $r5;

     label213:
        $z0 = virtualinvoke r22.<java.lang.Boolean: boolean booleanValue()>();

     label214:
        if $z0 == 0 goto label002;

        $r16 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.async.DeckTask$TaskListener mConfChangeHandler>;

        $r17 = newarray (com.ichi2.async.DeckTask$TaskData)[1];

        $r18 = new com.ichi2.async.DeckTask$TaskData;

        $r1 = newarray (java.lang.Object)[2];

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label215:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

     label216:
        $r1[0] = $r12;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label217:
        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

     label218:
        $r1[1] = $r12;

     label219:
        specialinvoke $r18.<com.ichi2.async.DeckTask$TaskData: void <init>(java.lang.Object[])>($r1);

     label220:
        $r17[0] = $r18;

     label221:
        staticinvoke <com.ichi2.async.DeckTask: com.ichi2.async.DeckTask launchDeckTask(int,com.ichi2.async.DeckTask$Listener,com.ichi2.async.DeckTask$TaskData[])>(36, $r16, $r17);

     label222:
        goto label002;

     label223:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("reminderEnabled");

     label224:
        if $z0 == 0 goto label250;

        $r12 = new org.json.JSONObject;

     label225:
        specialinvoke $r12.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("enabled", $r5);

     label226:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label227:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $z0 = virtualinvoke $r31.<org.json.JSONObject: boolean has(java.lang.String)>("reminder");

     label228:
        if $z0 == 0 goto label247;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label229:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        $r31 = virtualinvoke $r31.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("reminder");

        r19 = virtualinvoke $r31.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("time");

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("time", r19);

     label230:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label231:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r31.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("reminder", $r12);

     label232:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label233:
        $r21 = virtualinvoke $r11.<com.ichi2.anki.DeckOptions: java.lang.Object getSystemService(java.lang.String)>("alarm");

     label234:
        r32 = (android.app.AlarmManager) $r21;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label235:
        $r33 = virtualinvoke $r11.<com.ichi2.anki.DeckOptions: android.content.Context getApplicationContext()>();

     label236:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label237:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        $l3 = virtualinvoke $r31.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label238:
        $i0 = (int) $l3;

        $r34 = new android.content.Intent;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label239:
        $r35 = virtualinvoke $r11.<com.ichi2.anki.DeckOptions: android.content.Context getApplicationContext()>();

        specialinvoke $r34.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r35, class "Lcom/ichi2/anki/receiver/ReminderReceiver;");

     label240:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label241:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        $l3 = virtualinvoke $r31.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r34 = virtualinvoke $r34.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("EXTRA_DECK_ID", $l3);

        $r36 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r33, $i0, $r34, 0);

        virtualinvoke r32.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r36);

     label242:
        r22 = (java.lang.Boolean) $r5;

     label243:
        $z0 = virtualinvoke r22.<java.lang.Boolean: boolean booleanValue()>();

     label244:
        if $z0 == 0 goto label002;

     label245:
        $r37 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        r19 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("time");

        $i0 = virtualinvoke r19.<org.json.JSONArray: int getInt(int)>(0);

        virtualinvoke $r37.<java.util.Calendar: void set(int,int)>(11, $i0);

        r19 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("time");

        $i0 = virtualinvoke r19.<org.json.JSONArray: int getInt(int)>(1);

        virtualinvoke $r37.<java.util.Calendar: void set(int,int)>(12, $i0);

        virtualinvoke $r37.<java.util.Calendar: void set(int,int)>(13, 0);

        $l3 = virtualinvoke $r37.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke r32.<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)>(0, $l3, 86400000L, $r36);

     label246:
        goto label002;

     label247:
        r19 = new org.json.JSONArray;

     label248:
        specialinvoke r19.<org.json.JSONArray: void <init>()>();

        $i0 = staticinvoke <com.ichi2.preferences.TimePreference: int parseHours(java.lang.String)>("00:00");

        r19 = virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(int)>($i0);

        $i0 = staticinvoke <com.ichi2.preferences.TimePreference: int parseMinutes(java.lang.String)>("00:00");

        r19 = virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(int)>($i0);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("time", r19);

     label249:
        goto label230;

     label250:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("reminderTime");

     label251:
        if $z0 == 0 goto label002;

        $r12 = new org.json.JSONObject;

     label252:
        specialinvoke $r12.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>("enabled", 1);

     label253:
        r19 = new org.json.JSONArray;

     label254:
        specialinvoke r19.<org.json.JSONArray: void <init>()>();

     label255:
        r7 = (java.lang.String) $r5;

     label256:
        $i0 = staticinvoke <com.ichi2.preferences.TimePreference: int parseHours(java.lang.String)>(r7);

        r19 = virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(int)>($i0);

     label257:
        r7 = (java.lang.String) $r5;

     label258:
        $i0 = staticinvoke <com.ichi2.preferences.TimePreference: int parseMinutes(java.lang.String)>(r7);

        r19 = virtualinvoke r19.<org.json.JSONArray: org.json.JSONArray put(int)>($i0);

        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("time", r19);

     label259:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label260:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r31.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("reminder", $r12);

     label261:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label262:
        $r5 = virtualinvoke $r11.<com.ichi2.anki.DeckOptions: java.lang.Object getSystemService(java.lang.String)>("alarm");

     label263:
        r32 = (android.app.AlarmManager) $r5;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label264:
        $r33 = virtualinvoke $r11.<com.ichi2.anki.DeckOptions: android.content.Context getApplicationContext()>();

     label265:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label266:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        $l3 = virtualinvoke $r31.<org.json.JSONObject: long getLong(java.lang.String)>("id");

     label267:
        $i0 = (int) $l3;

        $r34 = new android.content.Intent;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label268:
        $r35 = virtualinvoke $r11.<com.ichi2.anki.DeckOptions: android.content.Context getApplicationContext()>();

        specialinvoke $r34.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r35, class "Lcom/ichi2/anki/receiver/ReminderReceiver;");

     label269:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

     label270:
        $r31 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$100(com.ichi2.anki.DeckOptions)>($r11);

        $l3 = virtualinvoke $r31.<org.json.JSONObject: long getLong(java.lang.String)>("id");

        $r34 = virtualinvoke $r34.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("EXTRA_DECK_ID", $l3);

        $r36 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r33, $i0, $r34, 0);

        virtualinvoke r32.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r36);

        $r37 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        r19 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("time");

        $i0 = virtualinvoke r19.<org.json.JSONArray: int getInt(int)>(0);

        virtualinvoke $r37.<java.util.Calendar: void set(int,int)>(11, $i0);

        r19 = virtualinvoke $r12.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("time");

        $i0 = virtualinvoke r19.<org.json.JSONArray: int getInt(int)>(1);

        virtualinvoke $r37.<java.util.Calendar: void set(int,int)>(12, $i0);

        virtualinvoke $r37.<java.util.Calendar: void set(int,int)>(13, 0);

        $l3 = virtualinvoke $r37.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke r32.<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)>(0, $l3, 86400000L, $r36);

     label271:
        goto label002;

     label272:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        $r23 = staticinvoke <com.ichi2.anki.DeckOptions: com.ichi2.libanki.Collection access$200(com.ichi2.anki.DeckOptions)>($r11);

        $r24 = virtualinvoke $r23.<com.ichi2.libanki.Collection: com.ichi2.libanki.Decks getDecks()>();

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        $r12 = staticinvoke <com.ichi2.anki.DeckOptions: org.json.JSONObject access$000(com.ichi2.anki.DeckOptions)>($r11);

        virtualinvoke $r24.<com.ichi2.libanki.Decks: void save(org.json.JSONObject)>($r12);

     label273:
        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        virtualinvoke $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: void cacheValues()>();

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        virtualinvoke $r11.<com.ichi2.anki.DeckOptions: void buildLists()>();

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        virtualinvoke $r11.<com.ichi2.anki.DeckOptions: void updateSummaries()>();

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r38 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: java.util.List listeners>;

        $r4 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label274:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label276;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r39 = (android.content.SharedPreferences$OnSharedPreferenceChangeListener) $r5;

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        interfaceinvoke r39.<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>($r10, null);

        goto label274;

     label275:
        $r14 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DeckOptions - RuntimeException on saving conf: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>(r7, $r1);

        staticinvoke <com.ichi2.anki.AnkiDroidApp: void sendExceptionReport(java.lang.Throwable,java.lang.String)>($r14, "DeckOptionsSaveConf");

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        virtualinvoke $r11.<com.ichi2.anki.DeckOptions: void setResult(int)>(203);

        $r10 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: com.ichi2.anki.DeckOptions$DeckPreferenceHack this$1>;

        $r11 = $r10.<com.ichi2.anki.DeckOptions$DeckPreferenceHack: com.ichi2.anki.DeckOptions this$0>;

        virtualinvoke $r11.<com.ichi2.anki.DeckOptions: void finish()>();

        goto label273;

     label276:
        return 1;

        catch org.json.JSONException from label001 to label003 with label016;
        catch org.json.JSONException from label004 to label005 with label016;
        catch org.json.JSONException from label006 to label007 with label016;
        catch org.json.JSONException from label008 to label009 with label016;
        catch org.json.JSONException from label010 to label011 with label016;
        catch org.json.JSONException from label012 to label013 with label016;
        catch org.json.JSONException from label014 to label015 with label016;
        catch org.json.JSONException from label017 to label018 with label016;
        catch org.json.JSONException from label019 to label020 with label016;
        catch org.json.JSONException from label021 to label022 with label016;
        catch org.json.JSONException from label023 to label024 with label016;
        catch org.json.JSONException from label025 to label026 with label016;
        catch org.json.JSONException from label027 to label028 with label016;
        catch org.json.JSONException from label029 to label030 with label016;
        catch org.json.JSONException from label031 to label032 with label016;
        catch org.json.JSONException from label033 to label034 with label016;
        catch org.json.JSONException from label035 to label036 with label016;
        catch org.json.JSONException from label037 to label038 with label016;
        catch org.json.JSONException from label039 to label040 with label016;
        catch org.json.JSONException from label041 to label042 with label016;
        catch org.json.JSONException from label043 to label044 with label016;
        catch org.json.JSONException from label045 to label046 with label016;
        catch org.json.JSONException from label047 to label048 with label016;
        catch org.json.JSONException from label049 to label050 with label016;
        catch org.json.JSONException from label051 to label052 with label016;
        catch org.json.JSONException from label053 to label054 with label016;
        catch org.json.JSONException from label055 to label056 with label016;
        catch org.json.JSONException from label057 to label058 with label016;
        catch org.json.JSONException from label059 to label060 with label016;
        catch org.json.JSONException from label061 to label062 with label016;
        catch org.json.JSONException from label063 to label064 with label016;
        catch org.json.JSONException from label065 to label066 with label016;
        catch org.json.JSONException from label067 to label068 with label016;
        catch org.json.JSONException from label069 to label070 with label016;
        catch org.json.JSONException from label071 to label072 with label016;
        catch org.json.JSONException from label073 to label074 with label016;
        catch org.json.JSONException from label075 to label076 with label016;
        catch org.json.JSONException from label077 to label078 with label016;
        catch org.json.JSONException from label079 to label080 with label016;
        catch org.json.JSONException from label081 to label082 with label016;
        catch org.json.JSONException from label083 to label084 with label016;
        catch org.json.JSONException from label085 to label086 with label016;
        catch org.json.JSONException from label087 to label088 with label016;
        catch org.json.JSONException from label089 to label090 with label016;
        catch org.json.JSONException from label091 to label092 with label016;
        catch org.json.JSONException from label093 to label094 with label016;
        catch org.json.JSONException from label095 to label096 with label016;
        catch org.json.JSONException from label097 to label098 with label016;
        catch org.json.JSONException from label099 to label100 with label016;
        catch org.json.JSONException from label101 to label102 with label016;
        catch org.json.JSONException from label103 to label104 with label016;
        catch org.json.JSONException from label105 to label106 with label016;
        catch org.json.JSONException from label107 to label108 with label016;
        catch org.json.JSONException from label109 to label110 with label016;
        catch org.json.JSONException from label111 to label112 with label016;
        catch org.json.JSONException from label113 to label114 with label016;
        catch org.json.JSONException from label115 to label116 with label016;
        catch org.json.JSONException from label117 to label118 with label016;
        catch org.json.JSONException from label119 to label120 with label016;
        catch org.json.JSONException from label121 to label122 with label016;
        catch org.json.JSONException from label123 to label124 with label016;
        catch org.json.JSONException from label126 to label127 with label016;
        catch org.json.JSONException from label128 to label129 with label016;
        catch org.json.JSONException from label130 to label131 with label016;
        catch org.json.JSONException from label132 to label133 with label016;
        catch org.json.JSONException from label134 to label135 with label016;
        catch org.json.JSONException from label136 to label137 with label016;
        catch org.json.JSONException from label138 to label139 with label016;
        catch org.json.JSONException from label140 to label141 with label016;
        catch org.json.JSONException from label142 to label143 with label016;
        catch org.json.JSONException from label144 to label145 with label016;
        catch org.json.JSONException from label146 to label147 with label016;
        catch org.json.JSONException from label148 to label149 with label016;
        catch org.json.JSONException from label150 to label151 with label016;
        catch org.json.JSONException from label152 to label153 with label016;
        catch org.json.JSONException from label154 to label155 with label016;
        catch org.json.JSONException from label156 to label157 with label016;
        catch org.json.JSONException from label158 to label159 with label016;
        catch org.json.JSONException from label160 to label161 with label016;
        catch org.json.JSONException from label162 to label163 with label016;
        catch org.json.JSONException from label164 to label165 with label016;
        catch org.json.JSONException from label166 to label167 with label016;
        catch org.json.JSONException from label168 to label169 with label016;
        catch org.json.JSONException from label170 to label171 with label016;
        catch org.json.JSONException from label172 to label173 with label016;
        catch org.json.JSONException from label174 to label175 with label016;
        catch org.json.JSONException from label176 to label177 with label016;
        catch org.json.JSONException from label178 to label179 with label016;
        catch org.json.JSONException from label180 to label181 with label016;
        catch org.json.JSONException from label182 to label183 with label016;
        catch org.json.JSONException from label184 to label185 with label016;
        catch org.json.JSONException from label186 to label187 with label016;
        catch org.json.JSONException from label188 to label189 with label016;
        catch org.json.JSONException from label190 to label191 with label016;
        catch org.json.JSONException from label192 to label193 with label016;
        catch org.json.JSONException from label194 to label195 with label016;
        catch org.json.JSONException from label196 to label197 with label016;
        catch org.json.JSONException from label198 to label199 with label016;
        catch org.json.JSONException from label200 to label201 with label016;
        catch org.json.JSONException from label202 to label203 with label016;
        catch com.ichi2.anki.exception.ConfirmModSchemaException from label204 to label205 with label206;
        catch org.json.JSONException from label204 to label205 with label016;
        catch org.json.JSONException from label207 to label208 with label016;
        catch org.json.JSONException from label209 to label210 with label016;
        catch org.json.JSONException from label211 to label212 with label016;
        catch org.json.JSONException from label213 to label214 with label016;
        catch org.json.JSONException from label215 to label216 with label016;
        catch org.json.JSONException from label217 to label218 with label016;
        catch org.json.JSONException from label219 to label220 with label016;
        catch org.json.JSONException from label221 to label222 with label016;
        catch org.json.JSONException from label223 to label224 with label016;
        catch org.json.JSONException from label225 to label226 with label016;
        catch org.json.JSONException from label227 to label228 with label016;
        catch org.json.JSONException from label229 to label230 with label016;
        catch org.json.JSONException from label231 to label232 with label016;
        catch org.json.JSONException from label233 to label234 with label016;
        catch org.json.JSONException from label235 to label236 with label016;
        catch org.json.JSONException from label237 to label238 with label016;
        catch org.json.JSONException from label239 to label240 with label016;
        catch org.json.JSONException from label241 to label242 with label016;
        catch org.json.JSONException from label243 to label244 with label016;
        catch org.json.JSONException from label245 to label246 with label016;
        catch org.json.JSONException from label248 to label249 with label016;
        catch org.json.JSONException from label250 to label251 with label016;
        catch org.json.JSONException from label252 to label253 with label016;
        catch org.json.JSONException from label254 to label255 with label016;
        catch org.json.JSONException from label256 to label257 with label016;
        catch org.json.JSONException from label258 to label259 with label016;
        catch org.json.JSONException from label260 to label261 with label016;
        catch org.json.JSONException from label262 to label263 with label016;
        catch org.json.JSONException from label264 to label265 with label016;
        catch org.json.JSONException from label266 to label267 with label016;
        catch org.json.JSONException from label268 to label269 with label016;
        catch org.json.JSONException from label270 to label271 with label016;
        catch java.lang.RuntimeException from label272 to label273 with label275;
    }
    public android.content.SharedPreferences$Editor putBoolean(java.lang.String, boolean)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        boolean $z0;
        android.content.ContentValues $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putFloat(java.lang.String, float)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        float $f0;
        android.content.ContentValues $r2;
        java.lang.Float $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putInt(java.lang.String, int)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        int $i0;
        android.content.ContentValues $r2;
        java.lang.Integer $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putLong(java.lang.String, long)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        long $l0;
        android.content.ContentValues $r2;
        java.lang.Long $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>($r1, $r3);

        return r0;
    }
    public android.content.SharedPreferences$Editor putString(java.lang.String, java.lang.String)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public android.content.SharedPreferences$Editor putStringSet(java.lang.String, java.util.Set)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        java.util.Set r2;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        return null;
    }
    public android.content.SharedPreferences$Editor remove(java.lang.String)
    {
        com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        android.content.ContentValues $r3;

        r0 := @this: com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor;

        $r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Editor.remove(key=%s)", $r2);

        $r3 = r0.<com.ichi2.anki.DeckOptions$DeckPreferenceHack$Editor: android.content.ContentValues mUpdate>;

        virtualinvoke $r3.<android.content.ContentValues: void remove(java.lang.String)>($r1);

        return r0;
    }
