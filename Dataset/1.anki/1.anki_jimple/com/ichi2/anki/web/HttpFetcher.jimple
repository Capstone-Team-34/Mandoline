com.ichi2.anki.web.HttpFetcher extends java.lang.Object
    public void <init>()
    {
        com.ichi2.anki.web.HttpFetcher r0;

        r0 := @this: com.ichi2.anki.web.HttpFetcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String downloadFileToSdCard(java.lang.String, android.content.Context, java.lang.String)
    {
        java.lang.String $r0, $r2, $r3;
        android.content.Context $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.Context;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <com.ichi2.anki.web.HttpFetcher: java.lang.String downloadFileToSdCardMethod(java.lang.String,android.content.Context,java.lang.String,java.lang.String)>($r0, $r1, $r2, "GET");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("FAIL");

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <com.ichi2.anki.web.HttpFetcher: java.lang.String downloadFileToSdCardMethod(java.lang.String,android.content.Context,java.lang.String,java.lang.String)>($r0, $r1, $r2, "POST");

        return $r0;

     label1:
        return $r3;
    }
    public static java.lang.String downloadFileToSdCardMethod(java.lang.String, android.content.Context, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r2, $r3;
        android.content.Context $r1;
        byte[] r4;
        java.lang.Exception r5;
        java.io.FileOutputStream r6;
        java.net.URL r7;
        int $i0;
        java.net.URLConnection $r8;
        java.net.HttpURLConnection r9;
        java.io.File $r10;
        java.io.InputStream $r11;
        java.lang.StringBuilder $r12;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.Context;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        r7 = new java.net.URL;

     label01:
        specialinvoke r7.<java.net.URL: void <init>(java.lang.String)>($r0);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

     label02:
        $i0 = $i0 + -4;

     label03:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r8 = virtualinvoke r7.<java.net.URL: java.net.URLConnection openConnection()>();

        r9 = (java.net.HttpURLConnection) $r8;

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r3);

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Referer", "com.ichi2.anki");

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("User-Agent", "Mozilla/5.0 ( compatible ) ");

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Accept", "*/*");

        virtualinvoke r9.<java.net.HttpURLConnection: void setConnectTimeout(int)>(10000);

        virtualinvoke r9.<java.net.HttpURLConnection: void setReadTimeout(int)>(60000);

        virtualinvoke r9.<java.net.HttpURLConnection: void connect()>();

        $r10 = virtualinvoke $r1.<android.content.Context: java.io.File getCacheDir()>();

        $r10 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r2, $r0, $r10);

     label04:
        r6 = new java.io.FileOutputStream;

     label05:
        specialinvoke r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        $r11 = virtualinvoke r9.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

        r4 = newarray (byte)[1024];

     label06:
        $i0 = virtualinvoke $r11.<java.io.InputStream: int read(byte[])>(r4);

     label07:
        if $i0 <= 0 goto label11;

     label08:
        virtualinvoke r6.<java.io.FileOutputStream: void write(byte[],int,int)>(r4, 0, $i0);

     label09:
        goto label06;

     label10:
        r5 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FAILED ");

        $r0 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label11:
        virtualinvoke r6.<java.io.FileOutputStream: void close()>();

        $r0 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

     label12:
        return $r0;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label10;
    }
    public static java.lang.String fetchThroughHttp(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.ichi2.anki.web.HttpFetcher: java.lang.String fetchThroughHttp(java.lang.String,java.lang.String)>($r0, "utf-8");

        return $r0;
    }
    public static java.lang.String fetchThroughHttp(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.Exception r2;
        java.lang.StringBuilder r7, $r20;
        org.apache.http.params.HttpParams $r8;
        org.apache.http.HttpResponse $r9;
        org.apache.http.StatusLine $r10;
        int $i0;
        org.apache.http.HttpEntity $r12;
        java.io.InputStream $r13;
        java.nio.charset.Charset $r14;
        org.apache.http.impl.client.DefaultHttpClient $r15;
        org.apache.http.protocol.BasicHttpContext $r16;
        org.apache.http.client.methods.HttpGet $r17;
        java.io.InputStreamReader $r18;
        java.io.BufferedReader $r19;
        org.apache.http.client.HttpClient $r21;
        org.apache.http.client.methods.HttpUriRequest $r22;
        org.apache.http.protocol.HttpContext $r23;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r15 = new org.apache.http.impl.client.DefaultHttpClient;

     label01:
        specialinvoke $r15.<org.apache.http.impl.client.DefaultHttpClient: void <init>()>();

        $r21 = (org.apache.http.client.HttpClient) $r15;

        $r8 = interfaceinvoke $r21.<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>();

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>($r8, 10000);

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>($r8, 60000);

     label02:
        $r16 = new org.apache.http.protocol.BasicHttpContext;

     label03:
        specialinvoke $r16.<org.apache.http.protocol.BasicHttpContext: void <init>()>();

     label04:
        $r17 = new org.apache.http.client.methods.HttpGet;

     label05:
        specialinvoke $r17.<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>($r0);

        $r21 = (org.apache.http.client.HttpClient) $r15;

        $r22 = (org.apache.http.client.methods.HttpUriRequest) $r17;

        $r23 = (org.apache.http.protocol.HttpContext) $r16;

        $r9 = interfaceinvoke $r21.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>($r22, $r23);

        $r10 = interfaceinvoke $r9.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r10.<org.apache.http.StatusLine: int getStatusCode()>();

     label06:
        if $i0 == 200 goto label07;

        return "FAILED";

     label07:
        $r19 = new java.io.BufferedReader;

        $r18 = new java.io.InputStreamReader;

     label08:
        $r12 = interfaceinvoke $r9.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $r13 = interfaceinvoke $r12.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        $r14 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r1);

        specialinvoke $r18.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r13, $r14);

        specialinvoke $r19.<java.io.BufferedReader: void <init>(java.io.Reader)>($r18);

     label09:
        $r20 = new java.lang.StringBuilder;

        r7 = $r20;

     label10:
        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

     label11:
        $r0 = virtualinvoke $r19.<java.io.BufferedReader: java.lang.String readLine()>();

     label12:
        if $r0 == null goto label16;

     label13:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label14:
        goto label11;

     label15:
        r2 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        r7 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FAILED with exception: ");

        $r0 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label16:
        $r0 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        return $r0;

        catch java.lang.Exception from label01 to label02 with label15;
        catch java.lang.Exception from label03 to label04 with label15;
        catch java.lang.Exception from label05 to label06 with label15;
        catch java.lang.Exception from label08 to label09 with label15;
        catch java.lang.Exception from label10 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label15;
    }
