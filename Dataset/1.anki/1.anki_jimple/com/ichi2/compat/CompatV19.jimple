com.ichi2.compat.CompatV19 extends com.ichi2.compat.CompatV17 implements com.ichi2.compat.Compat
private static final int ANIMATION_DURATION
private static final float TRANSPARENCY
    public void <init>()
    {
        com.ichi2.compat.CompatV19 r0;

        r0 := @this: com.ichi2.compat.CompatV19;

        specialinvoke r0.<com.ichi2.compat.CompatV17: void <init>()>();

        return;
    }
    static void access$000(com.ichi2.compat.CompatV19, android.view.View)
    {
        com.ichi2.compat.CompatV19 $r0;
        android.view.View $r1;

        $r0 := @parameter0: com.ichi2.compat.CompatV19;

        $r1 := @parameter1: android.view.View;

        specialinvoke $r0.<com.ichi2.compat.CompatV19: void showViewWithAnimation(android.view.View)>($r1);

        return;
    }
    static void access$100(com.ichi2.compat.CompatV19, android.view.View)
    {
        com.ichi2.compat.CompatV19 $r0;
        android.view.View $r1;

        $r0 := @parameter0: com.ichi2.compat.CompatV19;

        $r1 := @parameter1: android.view.View;

        specialinvoke $r0.<com.ichi2.compat.CompatV19: void hideViewWithAnimation(android.view.View)>($r1);

        return;
    }
    private void hideViewWithAnimation(android.view.View)
    {
        com.ichi2.compat.CompatV19 r0;
        android.view.View $r1;
        android.view.ViewPropertyAnimator $r2;
        com.ichi2.compat.CompatV19$2 $r3;

        r0 := @this: com.ichi2.compat.CompatV19;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewPropertyAnimator animate()>();

        $r2 = virtualinvoke $r2.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>(0.0F);

        $r2 = virtualinvoke $r2.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>(200L);

        $r3 = new com.ichi2.compat.CompatV19$2;

        specialinvoke $r3.<com.ichi2.compat.CompatV19$2: void <init>(com.ichi2.compat.CompatV19,android.view.View)>(r0, $r1);

        virtualinvoke $r2.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>($r3);

        return;
    }
    private void showViewWithAnimation(android.view.View)
    {
        com.ichi2.compat.CompatV19 r0;
        android.view.View $r1;
        android.view.ViewPropertyAnimator $r2;

        r0 := @this: com.ichi2.compat.CompatV19;

        $r1 := @parameter0: android.view.View;

        virtualinvoke $r1.<android.view.View: void setAlpha(float)>(0.0F);

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(0);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewPropertyAnimator animate()>();

        $r2 = virtualinvoke $r2.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>(0.9F);

        $r2 = virtualinvoke $r2.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>(200L);

        virtualinvoke $r2.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>(null);

        return;
    }
    public boolean isImmersiveSystemUiVisible(com.ichi2.anki.AnkiActivity)
    {
        com.ichi2.compat.CompatV19 r0;
        com.ichi2.anki.AnkiActivity $r1;
        android.view.Window $r2;
        android.view.View $r3;
        int $i0;

        r0 := @this: com.ichi2.compat.CompatV19;

        $r1 := @parameter0: com.ichi2.anki.AnkiActivity;

        $r2 = virtualinvoke $r1.<com.ichi2.anki.AnkiActivity: android.view.Window getWindow()>();

        $r3 = virtualinvoke $r2.<android.view.Window: android.view.View getDecorView()>();

        $i0 = virtualinvoke $r3.<android.view.View: int getSystemUiVisibility()>();

        $i0 = $i0 & 2;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void setFullScreen(com.ichi2.anki.AbstractFlashcardViewer)
    {
        com.ichi2.compat.CompatV19 r0;
        com.ichi2.anki.AbstractFlashcardViewer $r1;
        android.view.Window $r2;
        android.view.View $r3;
        android.content.SharedPreferences $r4;
        java.lang.String $r5;
        int $i0, $i1;
        com.ichi2.compat.Compat $r6;
        com.ichi2.compat.CompatV19$1 $r7;

        r0 := @this: com.ichi2.compat.CompatV19;

        $r1 := @parameter0: com.ichi2.anki.AbstractFlashcardViewer;

        $r2 = virtualinvoke $r1.<com.ichi2.anki.AbstractFlashcardViewer: android.view.Window getWindow()>();

        $r3 = virtualinvoke $r2.<android.view.Window: android.view.View getDecorView()>();

        virtualinvoke $r3.<android.view.View: void setSystemUiVisibility(int)>(3847);

        $r4 = staticinvoke <com.ichi2.anki.AnkiDroidApp: android.content.SharedPreferences getSharedPrefs(android.content.Context)>($r1);

        $r5 = interfaceinvoke $r4.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("fullscreenMode", "0");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = staticinvoke <com.ichi2.compat.CompatHelper: com.ichi2.compat.Compat getCompat()>();

        $r2 = virtualinvoke $r1.<com.ichi2.anki.AbstractFlashcardViewer: android.view.Window getWindow()>();

        $i1 = staticinvoke <com.ichi2.themes.Themes: int getColorFromAttr(android.content.Context,int)>($r1, 2130772184);

        interfaceinvoke $r6.<com.ichi2.compat.Compat: void setStatusBarColor(android.view.Window,int)>($r2, $i1);

        $r2 = virtualinvoke $r1.<com.ichi2.anki.AbstractFlashcardViewer: android.view.Window getWindow()>();

        $r3 = virtualinvoke $r2.<android.view.Window: android.view.View getDecorView()>();

        $r7 = new com.ichi2.compat.CompatV19$1;

        specialinvoke $r7.<com.ichi2.compat.CompatV19$1: void <init>(com.ichi2.compat.CompatV19,com.ichi2.anki.AbstractFlashcardViewer,int)>(r0, $r1, $i0);

        virtualinvoke $r3.<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>($r7);

        return;
    }
