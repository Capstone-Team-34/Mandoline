com.wildplot.android.rendering.XGrid extends java.lang.Object implements com.wildplot.android.rendering.interfaces.Drawable
private com.wildplot.android.rendering.graphics.wrapper.ColorWrap color
private boolean gridOnDownside
private boolean gridOnRight
private boolean gridOnUpside
private boolean gridkOnLeft
public boolean hasVariableLimits
private boolean isAutoTic
private int pixelDistance
private com.wildplot.android.rendering.PlotSheet plotSheet
private double tic
private double ticStart
private double xLength
private double yLength
    public void <init>(com.wildplot.android.rendering.PlotSheet, double, double)
    {
        com.wildplot.android.rendering.XGrid r0;
        com.wildplot.android.rendering.PlotSheet $r1;
        double $d0, $d1;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r2;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.XGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.XGrid: int pixelDistance> = 25;

        $r2 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r2;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.XGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.XGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.XGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r1;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.XGrid: double tic> = $d1;

        return;
    }
    public void <init>(com.wildplot.android.rendering.PlotSheet, double, int)
    {
        com.wildplot.android.rendering.XGrid r0;
        com.wildplot.android.rendering.PlotSheet $r1;
        double $d0;
        int $i0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r2;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.XGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.XGrid: int pixelDistance> = 25;

        $r2 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r2;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.XGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.XGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.XGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r1;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.XGrid: int pixelDistance> = $i0;

        r0.<com.wildplot.android.rendering.XGrid: boolean isAutoTic> = 1;

        return;
    }
    public void <init>(com.wildplot.android.rendering.graphics.wrapper.ColorWrap, com.wildplot.android.rendering.PlotSheet, double, double)
    {
        com.wildplot.android.rendering.XGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1, $r3;
        com.wildplot.android.rendering.PlotSheet $r2;
        double $d0, $d1;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        $r2 := @parameter1: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.XGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.XGrid: int pixelDistance> = 25;

        $r3 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r3;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.XGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.XGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.XGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r1;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r2;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.XGrid: double tic> = $d1;

        return;
    }
    public void <init>(com.wildplot.android.rendering.graphics.wrapper.ColorWrap, com.wildplot.android.rendering.PlotSheet, double, int)
    {
        com.wildplot.android.rendering.XGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1, $r3;
        com.wildplot.android.rendering.PlotSheet $r2;
        double $d0;
        int $i0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        $r2 := @parameter1: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter2: double;

        $i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.XGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.XGrid: int pixelDistance> = 25;

        $r3 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r3;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.XGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.XGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.XGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r1;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r2;

        r0.<com.wildplot.android.rendering.XGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.XGrid: int pixelDistance> = $i0;

        r0.<com.wildplot.android.rendering.XGrid: boolean isAutoTic> = 1;

        return;
    }
    private void drawGridLine(double, com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.XGrid r0;
        double $d0, $d1;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r2;
        boolean $z0;
        com.wildplot.android.rendering.PlotSheet $r3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $r2 := @parameter2: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $z0 = r0.<com.wildplot.android.rendering.XGrid: boolean gridkOnLeft>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f0 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>(0.0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f1 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $d1 = r0.<com.wildplot.android.rendering.XGrid: double xLength>;

        $d1 = neg $d1;

        $f2 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d1, $r2);

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f3 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void drawLine(float,float,float,float)>($f0, $f1, $f2, $f3);

     label1:
        $z0 = r0.<com.wildplot.android.rendering.XGrid: boolean gridOnRight>;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f0 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>(0.0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f1 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $d1 = r0.<com.wildplot.android.rendering.XGrid: double xLength>;

        $f2 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d1, $r2);

        $r3 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f3 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void drawLine(float,float,float,float)>($f0, $f1, $f2, $f3);

     label2:
        return;
    }
    public void abortAndReset()
    {
        com.wildplot.android.rendering.XGrid r0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        return;
    }
    public boolean isClusterable()
    {
        com.wildplot.android.rendering.XGrid r0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        return 1;
    }
    public boolean isCritical()
    {
        com.wildplot.android.rendering.XGrid r0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        return 1;
    }
    public boolean isOnFrame()
    {
        com.wildplot.android.rendering.XGrid r0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        return 0;
    }
    public void paint(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)
    {
        com.wildplot.android.rendering.XGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        int i0;
        boolean $z0;
        com.wildplot.android.rendering.PlotSheet $r2;
        double[] $r3;
        double $d0, $d1, $d2;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r4, $r6;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r5;
        float $f0;
        byte $b1;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $z0 = r0.<com.wildplot.android.rendering.XGrid: boolean hasVariableLimits>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r3 = virtualinvoke $r2.<com.wildplot.android.rendering.PlotSheet: double[] getxRange()>();

        $d0 = $r3[0];

        $d0 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $r2 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r3 = virtualinvoke $r2.<com.wildplot.android.rendering.PlotSheet: double[] getxRange()>();

        $d1 = $r3[1];

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        r0.<com.wildplot.android.rendering.XGrid: double xLength> = $d0;

        $r2 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r3 = virtualinvoke $r2.<com.wildplot.android.rendering.PlotSheet: double[] getyRange()>();

        $d0 = $r3[0];

        $d0 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $r2 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r3 = virtualinvoke $r2.<com.wildplot.android.rendering.PlotSheet: double[] getyRange()>();

        $d1 = $r3[1];

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        r0.<com.wildplot.android.rendering.XGrid: double yLength> = $d0;

     label1:
        $r4 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap getColor()>();

        $r5 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap getClipBounds()>();

        $r6 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r6);

        $z0 = r0.<com.wildplot.android.rendering.XGrid: boolean isAutoTic>;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        i0 = r0.<com.wildplot.android.rendering.XGrid: int pixelDistance>;

        $f0 = (float) i0;

        $d0 = virtualinvoke $r2.<com.wildplot.android.rendering.PlotSheet: double ticsCalcY(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f0, $r5);

        r0.<com.wildplot.android.rendering.XGrid: double tic> = $d0;

     label2:
        $d0 = r0.<com.wildplot.android.rendering.XGrid: double ticStart>;

        $d1 = r0.<com.wildplot.android.rendering.XGrid: double yLength>;

        $d1 = 0.0 - $d1;

        $d0 = $d0 - $d1;

        $d1 = r0.<com.wildplot.android.rendering.XGrid: double tic>;

        $d0 = $d0 / $d1;

        i0 = (int) $d0;

        $d0 = r0.<com.wildplot.android.rendering.XGrid: double ticStart>;

        $d1 = r0.<com.wildplot.android.rendering.XGrid: double tic>;

        $d2 = (double) i0;

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label4;

        $z0 = r0.<com.wildplot.android.rendering.XGrid: boolean gridOnDownside>;

        if $z0 != 0 goto label4;

     label3:
        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label4;

        $d1 = r0.<com.wildplot.android.rendering.XGrid: double tic>;

        $d0 = $d0 + $d1;

        goto label3;

     label4:
        $d1 = r0.<com.wildplot.android.rendering.XGrid: double yLength>;

        $b1 = $d0 cmpg $d1;

        if $b1 > 0 goto label6;

        $b1 = $d0 cmpl 0.0;

        if $b1 <= 0 goto label5;

        $z0 = r0.<com.wildplot.android.rendering.XGrid: boolean gridOnUpside>;

        if $z0 == 0 goto label6;

     label5:
        specialinvoke r0.<com.wildplot.android.rendering.XGrid: void drawGridLine(double,com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r1, $r5);

        $d1 = r0.<com.wildplot.android.rendering.XGrid: double tic>;

        $d0 = $d0 + $d1;

        goto label4;

     label6:
        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r4);

        return;
    }
    public void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)
    {
        com.wildplot.android.rendering.XGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        r0.<com.wildplot.android.rendering.XGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r1;

        return;
    }
    public void setGridOnDownside(boolean)
    {
        com.wildplot.android.rendering.XGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnDownside> = $z0;

        return;
    }
    public void setGridOnRight(boolean)
    {
        com.wildplot.android.rendering.XGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnRight> = $z0;

        return;
    }
    public void setGridOnUpside(boolean)
    {
        com.wildplot.android.rendering.XGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridOnUpside> = $z0;

        return;
    }
    public void setGridkOnLeft(boolean)
    {
        com.wildplot.android.rendering.XGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.XGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.XGrid: boolean gridkOnLeft> = $z0;

        return;
    }
