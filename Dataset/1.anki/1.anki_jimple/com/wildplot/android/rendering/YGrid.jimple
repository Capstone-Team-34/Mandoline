com.wildplot.android.rendering.YGrid extends java.lang.Object implements com.wildplot.android.rendering.interfaces.Drawable
private com.wildplot.android.rendering.graphics.wrapper.ColorWrap color
private boolean gridOnDownside
private boolean gridOnRight
private boolean gridOnUpside
private boolean gridkOnLeft
public boolean hasVariableLimits
private boolean isAutoTic
private double[] mTickPositions
private int pixelDistance
private com.wildplot.android.rendering.PlotSheet plotSheet
private double tic
private double ticStart
private double xLength
private double yLength
    public void <init>(com.wildplot.android.rendering.PlotSheet, double, double)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.PlotSheet $r1;
        double $d0, $d1;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r2;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.YGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.YGrid: int pixelDistance> = 25;

        $r2 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r2;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.YGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.YGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.YGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r1;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.YGrid: double tic> = $d1;

        return;
    }
    public void <init>(com.wildplot.android.rendering.PlotSheet, double, int)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.PlotSheet $r1;
        double $d0;
        int $i0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r2;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.YGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.YGrid: int pixelDistance> = 25;

        $r2 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r2;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.YGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.YGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.YGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r1;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.YGrid: int pixelDistance> = $i0;

        r0.<com.wildplot.android.rendering.YGrid: boolean isAutoTic> = 1;

        return;
    }
    public void <init>(com.wildplot.android.rendering.graphics.wrapper.ColorWrap, com.wildplot.android.rendering.PlotSheet, double, double)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1, $r3;
        com.wildplot.android.rendering.PlotSheet $r2;
        double $d0, $d1;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        $r2 := @parameter1: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.YGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.YGrid: int pixelDistance> = 25;

        $r3 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r3;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.YGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.YGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.YGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r1;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r2;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.YGrid: double tic> = $d1;

        return;
    }
    public void <init>(com.wildplot.android.rendering.graphics.wrapper.ColorWrap, com.wildplot.android.rendering.PlotSheet, double, int)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1, $r3;
        com.wildplot.android.rendering.PlotSheet $r2;
        double $d0;
        int $i0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        $r2 := @parameter1: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter2: double;

        $i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.YGrid: boolean hasVariableLimits> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean isAutoTic> = 0;

        r0.<com.wildplot.android.rendering.YGrid: int pixelDistance> = 25;

        $r3 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap LIGHT_GRAY>;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r3;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = 0.0;

        r0.<com.wildplot.android.rendering.YGrid: double tic> = 1.0;

        r0.<com.wildplot.android.rendering.YGrid: double xLength> = 10.0;

        r0.<com.wildplot.android.rendering.YGrid: double yLength> = 2.0;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridkOnLeft> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnRight> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnDownside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnUpside> = 1;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r1;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet> = $r2;

        r0.<com.wildplot.android.rendering.YGrid: double ticStart> = $d0;

        r0.<com.wildplot.android.rendering.YGrid: int pixelDistance> = $i0;

        r0.<com.wildplot.android.rendering.YGrid: boolean isAutoTic> = 1;

        return;
    }
    private void drawExplicitLines(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        double d0;
        double[] $r2;
        int $i0, $i1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r3;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $r3 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap getClipBounds()>();

        $r2 = r0.<com.wildplot.android.rendering.YGrid: double[] mTickPositions>;

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        d0 = $r2[$i1];

        specialinvoke r0.<com.wildplot.android.rendering.YGrid: void drawGridLine(double,com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>(d0, $r1, $r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void drawGridLine(double, com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.YGrid r0;
        double $d0, $d1;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r2;
        boolean $z0;
        com.wildplot.android.rendering.PlotSheet $r3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $r2 := @parameter2: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $z0 = r0.<com.wildplot.android.rendering.YGrid: boolean gridOnUpside>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f0 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f1 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>(0.0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f2 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $d1 = r0.<com.wildplot.android.rendering.YGrid: double yLength>;

        $f3 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d1, $r2);

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void drawLine(float,float,float,float)>($f0, $f1, $f2, $f3);

     label1:
        $z0 = r0.<com.wildplot.android.rendering.YGrid: boolean gridOnDownside>;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f0 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f1 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>(0.0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $f2 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        $r3 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $d0 = r0.<com.wildplot.android.rendering.YGrid: double yLength>;

        $d0 = neg $d0;

        $f3 = virtualinvoke $r3.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r2);

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void drawLine(float,float,float,float)>($f0, $f1, $f2, $f3);

     label2:
        return;
    }
    private void drawImplicitLines(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap, double)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        double $d0, $d1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r2;
        byte $b0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $d0 := @parameter1: double;

        $r2 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap getClipBounds()>();

     label1:
        $d1 = r0.<com.wildplot.android.rendering.YGrid: double xLength>;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label3;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $z0 = r0.<com.wildplot.android.rendering.YGrid: boolean gridOnRight>;

        if $z0 == 0 goto label3;

     label2:
        specialinvoke r0.<com.wildplot.android.rendering.YGrid: void drawGridLine(double,com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r1, $r2);

        $d1 = r0.<com.wildplot.android.rendering.YGrid: double tic>;

        $d0 = $d0 + $d1;

        goto label1;

     label3:
        return;
    }
    public void abortAndReset()
    {
        com.wildplot.android.rendering.YGrid r0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        return;
    }
    public boolean isClusterable()
    {
        com.wildplot.android.rendering.YGrid r0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        return 1;
    }
    public boolean isCritical()
    {
        com.wildplot.android.rendering.YGrid r0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        return 1;
    }
    public boolean isOnFrame()
    {
        com.wildplot.android.rendering.YGrid r0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        return 0;
    }
    public void paint(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        int i0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r2, $r4;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r3;
        boolean $z0;
        com.wildplot.android.rendering.PlotSheet $r5;
        double[] $r6;
        double $d0, $d1, $d2;
        float $f0;
        byte $b1;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $r2 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap getColor()>();

        $r3 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap getClipBounds()>();

        $r4 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r4);

        $z0 = r0.<com.wildplot.android.rendering.YGrid: boolean hasVariableLimits>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r6 = virtualinvoke $r5.<com.wildplot.android.rendering.PlotSheet: double[] getxRange()>();

        $d0 = $r6[0];

        $d0 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $r5 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r6 = virtualinvoke $r5.<com.wildplot.android.rendering.PlotSheet: double[] getxRange()>();

        $d1 = $r6[1];

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        r0.<com.wildplot.android.rendering.YGrid: double xLength> = $d0;

        $r5 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r6 = virtualinvoke $r5.<com.wildplot.android.rendering.PlotSheet: double[] getyRange()>();

        $d0 = $r6[0];

        $d0 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $r5 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        $r6 = virtualinvoke $r5.<com.wildplot.android.rendering.PlotSheet: double[] getyRange()>();

        $d1 = $r6[1];

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        r0.<com.wildplot.android.rendering.YGrid: double yLength> = $d0;

     label1:
        $z0 = r0.<com.wildplot.android.rendering.YGrid: boolean isAutoTic>;

        if $z0 == 0 goto label2;

        $r5 = r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.PlotSheet plotSheet>;

        i0 = r0.<com.wildplot.android.rendering.YGrid: int pixelDistance>;

        $f0 = (float) i0;

        $d0 = virtualinvoke $r5.<com.wildplot.android.rendering.PlotSheet: double ticsCalcX(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f0, $r3);

        r0.<com.wildplot.android.rendering.YGrid: double tic> = $d0;

     label2:
        $d0 = r0.<com.wildplot.android.rendering.YGrid: double ticStart>;

        $d1 = r0.<com.wildplot.android.rendering.YGrid: double xLength>;

        $d1 = 0.0 - $d1;

        $d0 = $d0 - $d1;

        $d1 = r0.<com.wildplot.android.rendering.YGrid: double tic>;

        $d0 = $d0 / $d1;

        i0 = (int) $d0;

        $d0 = r0.<com.wildplot.android.rendering.YGrid: double ticStart>;

        $d1 = r0.<com.wildplot.android.rendering.YGrid: double tic>;

        $d2 = (double) i0;

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label4;

        $z0 = r0.<com.wildplot.android.rendering.YGrid: boolean gridkOnLeft>;

        if $z0 != 0 goto label4;

     label3:
        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label4;

        $d1 = r0.<com.wildplot.android.rendering.YGrid: double tic>;

        $d0 = $d0 + $d1;

        goto label3;

     label4:
        $r6 = r0.<com.wildplot.android.rendering.YGrid: double[] mTickPositions>;

        if $r6 != null goto label6;

        specialinvoke r0.<com.wildplot.android.rendering.YGrid: void drawImplicitLines(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap,double)>($r1, $d0);

     label5:
        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r2);

        return;

     label6:
        specialinvoke r0.<com.wildplot.android.rendering.YGrid: void drawExplicitLines(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)>($r1);

        goto label5;
    }
    public void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)
    {
        com.wildplot.android.rendering.YGrid r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        r0.<com.wildplot.android.rendering.YGrid: com.wildplot.android.rendering.graphics.wrapper.ColorWrap color> = $r1;

        return;
    }
    public void setExplicitTicks(double[])
    {
        com.wildplot.android.rendering.YGrid r0;
        double[] $r1;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $r1 := @parameter0: double[];

        r0.<com.wildplot.android.rendering.YGrid: double[] mTickPositions> = $r1;

        return;
    }
    public void setGridOnDownside(boolean)
    {
        com.wildplot.android.rendering.YGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnDownside> = $z0;

        return;
    }
    public void setGridOnRight(boolean)
    {
        com.wildplot.android.rendering.YGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnRight> = $z0;

        return;
    }
    public void setGridOnUpside(boolean)
    {
        com.wildplot.android.rendering.YGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridOnUpside> = $z0;

        return;
    }
    public void setGridkOnLeft(boolean)
    {
        com.wildplot.android.rendering.YGrid r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.YGrid: boolean gridkOnLeft> = $z0;

        return;
    }
    public void unsetExplicitTics()
    {
        com.wildplot.android.rendering.YGrid r0;

        r0 := @this: com.wildplot.android.rendering.YGrid;

        r0.<com.wildplot.android.rendering.YGrid: double[] mTickPositions> = null;

        return;
    }
