com.wildplot.android.rendering.PlotSheet extends java.lang.Object implements com.wildplot.android.rendering.interfaces.Drawable
public static final int BOTTOM_FRAME_THICKNESS_INDEX
public static final int LEFT_FRAME_THICKNESS_INDEX
public static final int RIGHT_FRAME_THICKNESS_INDEX
public static final int UPPER_FRAME_THICKNESS_INDEX
protected com.wildplot.android.rendering.graphics.wrapper.ColorWrap backgroundColor
protected float borderThickness
protected float bottomFrameThickness
protected int currentScreen
protected float fontSize
protected boolean fontSizeSet
protected boolean hasTitle
protected boolean isBackwards
protected boolean isBordered
protected boolean isLogX
protected boolean isLogY
protected boolean isMultiMode
protected float leftFrameThickness
private boolean mDrawablesPrepared
private java.util.Map mLegendMap
protected float rightFrameThickness
java.util.Vector screenParts
protected com.wildplot.android.rendering.graphics.wrapper.ColorWrap textColor
protected java.lang.String title
protected android.graphics.Typeface typeface
protected float upperFrameThickness
    public void <init>(double, double, double, double)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, $d1, $d2, $d3;
        double[] r1, r2;
        android.graphics.Typeface $r3;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r4;
        java.util.Vector $r5;
        java.util.LinkedHashMap $r6;
        com.wildplot.android.rendering.MultiScreenPart $r7;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogX> = 0;

        $r3 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        r0.<com.wildplot.android.rendering.PlotSheet: android.graphics.Typeface typeface> = $r3;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogY> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean hasTitle> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: float fontSize> = 10.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean fontSizeSet> = 0;

        $r4 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap white>;

        r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap backgroundColor> = $r4;

        $r4 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap black>;

        r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap textColor> = $r4;

        r0.<com.wildplot.android.rendering.PlotSheet: java.lang.String title> = "PlotSheet";

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isMultiMode> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBackwards> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBordered> = 1;

        r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness> = 1.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen> = 0;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts> = $r5;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.wildplot.android.rendering.PlotSheet: java.util.Map mLegendMap> = $r6;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean mDrawablesPrepared> = 0;

        r1 = newarray (double)[2];

        r1[0] = $d0;

        r1[1] = $d1;

        r2 = newarray (double)[2];

        r2[0] = $d2;

        r2[1] = $d3;

        $r5 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r7 = new com.wildplot.android.rendering.MultiScreenPart;

        specialinvoke $r7.<com.wildplot.android.rendering.MultiScreenPart: void <init>(double[],double[])>(r1, r2);

        virtualinvoke $r5.<java.util.Vector: void add(int,java.lang.Object)>(0, $r7);

        return;
    }
    public void <init>(double, double, double, double, java.util.Vector)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, $d1, $d2, $d3;
        java.util.Vector r1, $r7;
        double[] r2, r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        android.graphics.Typeface $r5;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r6;
        java.util.LinkedHashMap $r8;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        r1 := @parameter4: java.util.Vector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogX> = 0;

        $r5 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        r0.<com.wildplot.android.rendering.PlotSheet: android.graphics.Typeface typeface> = $r5;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogY> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean hasTitle> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: float fontSize> = 10.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean fontSizeSet> = 0;

        $r6 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap white>;

        r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap backgroundColor> = $r6;

        $r6 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap black>;

        r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap textColor> = $r6;

        r0.<com.wildplot.android.rendering.PlotSheet: java.lang.String title> = "PlotSheet";

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isMultiMode> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBackwards> = 0;

        r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness> = 0.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBordered> = 1;

        r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness> = 1.0F;

        r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen> = 0;

        $r7 = new java.util.Vector;

        specialinvoke $r7.<java.util.Vector: void <init>()>();

        r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts> = $r7;

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.wildplot.android.rendering.PlotSheet: java.util.Map mLegendMap> = $r8;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean mDrawablesPrepared> = 0;

        r2 = newarray (double)[2];

        r2[0] = $d0;

        r2[1] = $d1;

        r3 = newarray (double)[2];

        r3[0] = $d2;

        r3[1] = $d3;

        $r7 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r4 = new com.wildplot.android.rendering.MultiScreenPart;

        specialinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: void <init>(double[],double[],java.util.Vector)>(r2, r3, r1);

        virtualinvoke $r7.<java.util.Vector: void add(int,java.lang.Object)>(0, $r4);

        return;
    }
    private void drawMultiMode(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        return;
    }
    private void drawSingleMode(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap, int)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        int $i0, $i1;
        java.util.Vector r2, r3, $r7;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r4;
        android.graphics.Typeface $r5;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r6, $r12;
        boolean $z0;
        java.lang.Object $r8;
        com.wildplot.android.rendering.MultiScreenPart $r9;
        java.util.Iterator $r10;
        com.wildplot.android.rendering.interfaces.Drawable r11;
        byte $b2;
        com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap $r13;
        java.lang.String $r14, $r20;
        java.util.Map $r15;
        java.util.Set $r16;
        java.lang.Object[] $r17;
        java.lang.Integer $r18;
        java.lang.StringBuilder $r19;
        java.lang.Float $r21;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $i0 := @parameter1: int;

        $r4 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap getClipBounds()>();

        r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen> = $i0;

        specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: void prepareDrawables()>();

        r2 = new java.util.Vector;

        specialinvoke r2.<java.util.Vector: void <init>()>();

        r3 = new java.util.Vector;

        specialinvoke r3.<java.util.Vector: void <init>()>();

        $r5 = r0.<com.wildplot.android.rendering.PlotSheet: android.graphics.Typeface typeface>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setTypeface(android.graphics.Typeface)>($r5);

        $r6 = r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap backgroundColor>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r6);

        $i1 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f1 = (float) $i1;

        $i1 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        f0 = (float) $i1;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>(0.0F, 0.0F, $f1, f0);

        $r6 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap BLACK>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r6);

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean fontSizeSet>;

        if $z0 == 0 goto label01;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float fontSize>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setFontSize(float)>($f1);

     label01:
        $r7 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r9 = (com.wildplot.android.rendering.MultiScreenPart) $r8;

        $r7 = virtualinvoke $r9.<com.wildplot.android.rendering.MultiScreenPart: java.util.Vector getDrawables()>();

        if $r7 == null goto label04;

        $r7 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r9 = (com.wildplot.android.rendering.MultiScreenPart) $r8;

        $r7 = virtualinvoke $r9.<com.wildplot.android.rendering.MultiScreenPart: java.util.Vector getDrawables()>();

        $i1 = virtualinvoke $r7.<java.util.Vector: int size()>();

        if $i1 == 0 goto label04;

        $r7 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r9 = (com.wildplot.android.rendering.MultiScreenPart) $r8;

        $r7 = virtualinvoke $r9.<com.wildplot.android.rendering.MultiScreenPart: java.util.Vector getDrawables()>();

        $r10 = virtualinvoke $r7.<java.util.Vector: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r8 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.wildplot.android.rendering.interfaces.Drawable) $r8;

        $z0 = interfaceinvoke r11.<com.wildplot.android.rendering.interfaces.Drawable: boolean isOnFrame()>();

        if $z0 != 0 goto label03;

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r11);

        goto label02;

     label03:
        virtualinvoke r3.<java.util.Vector: boolean add(java.lang.Object)>(r11);

        goto label02;

     label04:
        $r10 = virtualinvoke r2.<java.util.Vector: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r8 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.wildplot.android.rendering.interfaces.Drawable) $r8;

        interfaceinvoke r11.<com.wildplot.android.rendering.interfaces.Drawable: void paint(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)>($r1);

        goto label05;

     label06:
        $r6 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap getColor()>();

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $b2 = $f1 cmpl 0.0F;

        if $b2 > 0 goto label07;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $b2 = $f1 cmpl 0.0F;

        if $b2 > 0 goto label07;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $b2 = $f1 cmpl 0.0F;

        if $b2 > 0 goto label07;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $b2 = $f1 cmpl 0.0F;

        if $b2 <= 0 goto label14;

     label07:
        $r12 = r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap backgroundColor>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r12);

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f1 = (float) $i0;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>(0.0F, 0.0F, $f1, f0);

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f2 = (float) $i0;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>(0.0F, $f1, f0, $f2);

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $i0 = $i0 + 1;

        $f1 = (float) $i0;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f1 = $f1 - f0;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f2 = $f2 + $f3;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f3 = (float) $i0;

        $f4 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f3 = $f3 - $f4;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>($f1, f0, $f2, $f3);

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        f0 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        f0 = f0 - $f2;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f2 = (float) $i0;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f2 = $f2 - $f3;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f3 = $f3 + 1.0F;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>($f1, f0, $f2, $f3);

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isBordered>;

        if $z0 == 0 goto label08;

        $r12 = <com.wildplot.android.rendering.graphics.wrapper.ColorWrap: com.wildplot.android.rendering.graphics.wrapper.ColorWrap black>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r12);

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $f1 = $f1 - f0;

        $f1 = $f1 + 1.0F;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        f0 = f0 - $f2;

        f0 = f0 + 1.0F;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f2 = (float) $i0;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f2 = $f2 - $f3;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f2 = $f2 - $f3;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $f3 = 2.0F * $f3;

        $f2 = $f2 + $f3;

        $f2 = $f2 - 2.0F;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>($f1, f0, $f2, $f3);

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $f1 = $f1 - f0;

        $f1 = $f1 + 1.0F;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        f0 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        f0 = f0 - $f2;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f2 = (float) $i0;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f2 = $f2 - $f3;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f2 = $f2 - $f3;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $f3 = 2.0F * $f3;

        $f2 = $f2 + $f3;

        $f2 = $f2 - 2.0F;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>($f1, f0, $f2, $f3);

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $f1 = $f1 - f0;

        $f1 = $f1 + 1.0F;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        f0 = f0 - $f2;

        f0 = f0 + 1.0F;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f3 = (float) $i0;

        $f4 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f3 = $f3 - $f4;

        $f4 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f3 = $f3 - $f4;

        $f4 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $f4 = 2.0F * $f4;

        $f3 = $f3 + $f4;

        $f3 = $f3 - 2.0F;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>($f1, f0, $f2, $f3);

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f1 = (float) $i0;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f1 = $f1 - f0;

        f0 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        f0 = f0 - $f2;

        f0 = f0 + 1.0F;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f3 = (float) $i0;

        $f4 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f3 = $f3 - $f4;

        $f4 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f3 = $f3 - $f4;

        $f4 = r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness>;

        $f4 = 2.0F * $f4;

        $f3 = $f3 + $f4;

        $f3 = $f3 - 2.0F;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>($f1, f0, $f2, $f3);

     label08:
        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r6);

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean hasTitle>;

        if $z0 == 0 goto label09;

        $f1 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: float getFontSize()>();

        f0 = $f1 * 2.0F;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setFontSize(float)>(f0);

        $r13 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap getFontMetrics()>();

        f0 = virtualinvoke $r13.<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: float getHeight()>();

        $r14 = r0.<com.wildplot.android.rendering.PlotSheet: java.lang.String title>;

        $f3 = virtualinvoke $r13.<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: float stringWidth(java.lang.String)>($r14);

        $r14 = r0.<com.wildplot.android.rendering.PlotSheet: java.lang.String title>;

        $i0 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $i0 = $i0 / 2;

        $f2 = (float) $i0;

        $f3 = $f3 / 2.0F;

        $f2 = $f2 - $f3;

        $f3 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f3 = $f3 - 10.0F;

        f0 = $f3 - f0;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void drawString(java.lang.String,float,float)>($r14, $f2, f0);

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setFontSize(float)>($f1);

     label09:
        r2 = new java.util.Vector;

        $r15 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Map mLegendMap>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Set keySet()>();

        specialinvoke r2.<java.util.Vector: void <init>(java.util.Collection)>($r16);

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isBackwards>;

        if $z0 == 0 goto label10;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r2);

     label10:
        $f1 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: float getFontSize()>();

        f0 = 0.9F * $f1;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setFontSize(float)>(f0);

        $r13 = virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap getFontMetrics()>();

        $f2 = virtualinvoke $r13.<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: float getHeight()>();

        f0 = $f2 * 0.5F;

        $f3 = f0;

        $f4 = f0;

        $i1 = 0;

        $r17 = newarray (java.lang.Object)[1];

        $r15 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Map mLegendMap>;

        $i0 = interfaceinvoke $r15.<java.util.Map: int size()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r17[0] = $r18;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("should draw legend now, number of legend entries: %d", $r17);

        $r10 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r8 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r8;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $f5 = virtualinvoke $r13.<com.wildplot.android.rendering.graphics.wrapper.FontMetricsWrap: float stringWidth(java.lang.String)>($r20);

        $r15 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Map mLegendMap>;

        $r8 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r6 = (com.wildplot.android.rendering.graphics.wrapper.ColorWrap) $r8;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r6);

        $i0 = $i1 + 1;

        if $i1 == 0 goto label12;

        $f6 = 2.0F * $f2;

        $f6 = $f6 + $f3;

        $f6 = $f6 + $f5;

        $i1 = $r4.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f7 = (float) $i1;

        $b2 = $f6 cmpl $f7;

        if $b2 < 0 goto label12;

        $f3 = f0;

        $f6 = $f2 + f0;

        $f4 = $f4 + $f6;

     label12:
        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void fillRect(float,float,float,float)>($f3, $f4, $f2, $f2);

        $r6 = r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap textColor>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r6);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $f6 = $f3 + $f2;

        $f7 = $f4 + $f2;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void drawString(java.lang.String,float,float)>($r20, $f6, $f7);

        $f6 = 1.3F * $f2;

        $f5 = $f6 + $f5;

        $f3 = $f3 + $f5;

        $r17 = newarray (java.lang.Object)[4];

        $r17[0] = $r14;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r17[1] = $r18;

        $f5 = $f3 + $f2;

        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        $r17[2] = $r21;

        $f5 = $f4 + $f2;

        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        $r17[3] = $r21;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("drawing a legend Item: (%s) %d, x: %,.2f , y: %,.2f", $r17);

        $i1 = $i0;

        goto label11;

     label13:
        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setFontSize(float)>($f1);

        $r6 = r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap textColor>;

        virtualinvoke $r1.<com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap: void setColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)>($r6);

     label14:
        $r10 = virtualinvoke r3.<java.util.Vector: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r8 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.wildplot.android.rendering.interfaces.Drawable) $r8;

        interfaceinvoke r11.<com.wildplot.android.rendering.interfaces.Drawable: void paint(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)>($r1);

        goto label15;

     label16:
        return;
    }
    private void prepareDrawables()
    {
        com.wildplot.android.rendering.PlotSheet r0;
        java.util.Vector r1, r2, $r5;
        boolean $z0, $z1;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        com.wildplot.android.rendering.DrawableContainer r6, r7;
        java.util.Iterator $r8;
        com.wildplot.android.rendering.interfaces.Drawable r9;
        com.wildplot.android.rendering.interfaces.Legendable $r10;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r11;
        java.lang.String $r12;
        java.util.Map $r13;
        int $i0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean mDrawablesPrepared>;

        if $z0 != 0 goto label15;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean mDrawablesPrepared> = 1;

        r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: java.util.Vector getDrawables()>();

        r2 = new java.util.Vector;

        specialinvoke r2.<java.util.Vector: void <init>()>();

        r1 = new java.util.Vector;

        specialinvoke r1.<java.util.Vector: void <init>()>();

        r6 = new com.wildplot.android.rendering.DrawableContainer;

        specialinvoke r6.<com.wildplot.android.rendering.DrawableContainer: void <init>(boolean,boolean)>(1, 0);

        r7 = new com.wildplot.android.rendering.DrawableContainer;

        specialinvoke r7.<com.wildplot.android.rendering.DrawableContainer: void <init>(boolean,boolean)>(0, 0);

        $r8 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r3 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.wildplot.android.rendering.interfaces.Drawable) $r3;

        $z0 = r9 instanceof com.wildplot.android.rendering.interfaces.Legendable;

        if $z0 == 0 goto label02;

        $r10 = (com.wildplot.android.rendering.interfaces.Legendable) r9;

        $z0 = interfaceinvoke $r10.<com.wildplot.android.rendering.interfaces.Legendable: boolean nameIsSet()>();

        if $z0 == 0 goto label02;

        $r10 = (com.wildplot.android.rendering.interfaces.Legendable) r9;

        $r11 = interfaceinvoke $r10.<com.wildplot.android.rendering.interfaces.Legendable: com.wildplot.android.rendering.graphics.wrapper.ColorWrap getColor()>();

        $r10 = (com.wildplot.android.rendering.interfaces.Legendable) r9;

        $r12 = interfaceinvoke $r10.<com.wildplot.android.rendering.interfaces.Legendable: java.lang.String getName()>();

        $r13 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Map mLegendMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

     label02:
        $z0 = interfaceinvoke r9.<com.wildplot.android.rendering.interfaces.Drawable: boolean isOnFrame()>();

        if $z0 == 0 goto label07;

        $z0 = interfaceinvoke r9.<com.wildplot.android.rendering.interfaces.Drawable: boolean isClusterable()>();

        if $z0 == 0 goto label05;

        $z0 = virtualinvoke r6.<com.wildplot.android.rendering.DrawableContainer: boolean isCritical()>();

        $z1 = interfaceinvoke r9.<com.wildplot.android.rendering.interfaces.Drawable: boolean isCritical()>();

        if $z0 != $z1 goto label03;

        virtualinvoke r6.<com.wildplot.android.rendering.DrawableContainer: void addDrawable(com.wildplot.android.rendering.interfaces.Drawable)>(r9);

        goto label01;

     label03:
        $i0 = virtualinvoke r6.<com.wildplot.android.rendering.DrawableContainer: int getSize()>();

        if $i0 <= 0 goto label04;

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r6);

     label04:
        r6 = new com.wildplot.android.rendering.DrawableContainer;

        $z0 = interfaceinvoke r9.<com.wildplot.android.rendering.interfaces.Drawable: boolean isCritical()>();

        specialinvoke r6.<com.wildplot.android.rendering.DrawableContainer: void <init>(boolean,boolean)>(1, $z0);

        virtualinvoke r6.<com.wildplot.android.rendering.DrawableContainer: void addDrawable(com.wildplot.android.rendering.interfaces.Drawable)>(r9);

        goto label01;

     label05:
        $i0 = virtualinvoke r6.<com.wildplot.android.rendering.DrawableContainer: int getSize()>();

        if $i0 <= 0 goto label06;

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r6);

     label06:
        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r9);

        r6 = new com.wildplot.android.rendering.DrawableContainer;

        specialinvoke r6.<com.wildplot.android.rendering.DrawableContainer: void <init>(boolean,boolean)>(1, 0);

        goto label01;

     label07:
        $z0 = interfaceinvoke r9.<com.wildplot.android.rendering.interfaces.Drawable: boolean isClusterable()>();

        if $z0 == 0 goto label10;

        $z0 = virtualinvoke r7.<com.wildplot.android.rendering.DrawableContainer: boolean isCritical()>();

        $z1 = interfaceinvoke r9.<com.wildplot.android.rendering.interfaces.Drawable: boolean isCritical()>();

        if $z0 != $z1 goto label08;

        virtualinvoke r7.<com.wildplot.android.rendering.DrawableContainer: void addDrawable(com.wildplot.android.rendering.interfaces.Drawable)>(r9);

        goto label01;

     label08:
        $i0 = virtualinvoke r7.<com.wildplot.android.rendering.DrawableContainer: int getSize()>();

        if $i0 <= 0 goto label09;

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r7);

     label09:
        r7 = new com.wildplot.android.rendering.DrawableContainer;

        $z0 = interfaceinvoke r9.<com.wildplot.android.rendering.interfaces.Drawable: boolean isCritical()>();

        specialinvoke r7.<com.wildplot.android.rendering.DrawableContainer: void <init>(boolean,boolean)>(0, $z0);

        virtualinvoke r7.<com.wildplot.android.rendering.DrawableContainer: void addDrawable(com.wildplot.android.rendering.interfaces.Drawable)>(r9);

        goto label01;

     label10:
        $i0 = virtualinvoke r7.<com.wildplot.android.rendering.DrawableContainer: int getSize()>();

        if $i0 <= 0 goto label11;

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r7);

     label11:
        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r9);

        r7 = new com.wildplot.android.rendering.DrawableContainer;

        specialinvoke r7.<com.wildplot.android.rendering.DrawableContainer: void <init>(boolean,boolean)>(0, 0);

        goto label01;

     label12:
        $i0 = virtualinvoke r6.<com.wildplot.android.rendering.DrawableContainer: int getSize()>();

        if $i0 <= 0 goto label13;

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r6);

     label13:
        $i0 = virtualinvoke r7.<com.wildplot.android.rendering.DrawableContainer: int getSize()>();

        if $i0 <= 0 goto label14;

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r7);

     label14:
        $r5 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r3 = virtualinvoke $r5.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: java.util.Vector getDrawables()>();

        virtualinvoke $r5.<java.util.Vector: void removeAllElements()>();

        $r5 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r3 = virtualinvoke $r5.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: java.util.Vector getDrawables()>();

        virtualinvoke $r5.<java.util.Vector: boolean addAll(java.util.Collection)>(r1);

        r1 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r3 = virtualinvoke r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        r1 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: java.util.Vector getDrawables()>();

        virtualinvoke r1.<java.util.Vector: boolean addAll(java.util.Collection)>(r2);

     label15:
        return;
    }
    private double xToCoordinateLinear(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, $f1, $f2;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        double d0, d1, $d2;
        java.util.Vector $r2;
        int $i0;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d2 = $r5[1];

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        d0 = $r5[0];

        $d2 = $d2 - d0;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f1 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f1 = $f1 - $f2;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f1 = $f1 - $f2;

        d0 = (double) $f1;

        d1 = $d2 / d0;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int x>;

        $f1 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f1 = $f1 - $f2;

        $f0 = $f1 + $f0;

        d0 = (double) $f0;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d2 = $r5[0];

        d0 = d0 * d1;

        $d2 = $d2 + d0;

        return $d2;
    }
    private double xToCoordinateLog(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, $f1, $f2;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        double d0, $d1;
        java.util.Vector $r2;
        int $i0;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        d0 = $r5[1];

        d0 = staticinvoke <java.lang.Math: double log10(double)>(d0);

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d1 = $r5[0];

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        d0 = d0 - $d1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int x>;

        $f1 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $d1 = (double) $f0;

        $d1 = $d1 * 1.0;

        d0 = $d1 * d0;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f0 = $f0 - $f1;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f0 = $f0 - $f1;

        $d1 = (double) $f0;

        d0 = d0 / $d1;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d1 = $r5[0];

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        d0 = $d1 + d0;

        d0 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, d0);

        return d0;
    }
    private float xToGraphicLinear(double, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, d1, $d2, $d3;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        int $i0;
        float $f0, $f1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f0 = $f0 - $f1;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f0 = $f0 - $f1;

        d1 = (double) $f0;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d2 = $r5[1];

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d3 = $r5[0];

        $d2 = $d2 - $d3;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        d1 = d1 / $d2;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d2 = $r5[0];

        $d0 = $d0 - $d2;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int x>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f0 = $f0 + $f1;

        $d0 = $d0 * d1;

        $f1 = (float) $d0;

        $f0 = $f0 + $f1;

        return $f0;
    }
    private float xToGraphicLog(double, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, d1, $d2, $d3;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        java.util.Vector $r2;
        int $i0;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;
        float $f0, $f1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d2 = $r5[1];

        $d2 = staticinvoke <java.lang.Math: double log10(double)>($d2);

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        d1 = $r5[0];

        d1 = staticinvoke <java.lang.Math: double log10(double)>(d1);

        d1 = $d2 - d1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int x>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f0 = $f0 + $f1;

        $d2 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d3 = $r5[0];

        $d3 = staticinvoke <java.lang.Math: double log10(double)>($d3);

        $d0 = $d0 - $d3;

        $d0 = $d0 / d1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $f0 = $f0 - $f1;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $f0 = $f0 - $f1;

        d1 = (double) $f0;

        $d0 = $d0 * d1;

        $d0 = $d0 + $d2;

        $f0 = (float) $d0;

        return $f0;
    }
    private float yToGraphicLinear(double, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, d1, d2, $d3;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        int $i0;
        float $f0, $f1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f0 = $f0 - $f1;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f0 = $f0 - $f1;

        d2 = (double) $f0;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        d1 = $r5[1];

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d3 = $r5[0];

        d1 = d1 - $d3;

        d1 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        d2 = d2 / d1;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        d1 = $r5[1];

        d1 = d1 - $d0;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int y>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f0 = $f0 + $f1;

        $d0 = (double) $f0;

        d2 = d1 * d2;

        $d0 = $d0 + d2;

        $f0 = (float) $d0;

        return $f0;
    }
    private float yToGraphicLog(double, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, $d1, $d2;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        java.util.Vector $r2;
        int $i0;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;
        float $f0, $f1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $d0 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d1 = $r5[0];

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        $d0 = $d0 - $d1;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d1 = $r5[1];

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d2 = $r5[0];

        $d2 = staticinvoke <java.lang.Math: double log10(double)>($d2);

        $d1 = $d1 - $d2;

        $d0 = $d0 / $d1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f0 = $f0 - $f1;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f0 = $f0 - $f1;

        $d1 = (double) $f0;

        $d0 = $d0 * $d1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f0 = (float) $i0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f0 = $f0 - $f1;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f0 = $f0 - $f1;

        $d1 = (double) $f0;

        $d0 = $d0 - $d1;

        $f0 = (float) $d0;

        $f0 = $f0 * -1.0F;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f0 = $f0 + $f1;

        return $f0;
    }
    public void abortAndReset()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        return;
    }
    public void addDrawable(com.wildplot.android.rendering.interfaces.Drawable)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        com.wildplot.android.rendering.interfaces.Drawable $r1;
        java.lang.Object $r2;
        java.util.Vector $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: com.wildplot.android.rendering.interfaces.Drawable;

        $r3 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r2 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r2;

        virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: void addDrawable(com.wildplot.android.rendering.interfaces.Drawable)>($r1);

        r0.<com.wildplot.android.rendering.PlotSheet: boolean mDrawablesPrepared> = 0;

        return;
    }
    public float[] getFrameThickness()
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float[] $r1;
        float $f0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 = newarray (float)[4];

        $f0 = r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness>;

        $r1[0] = $f0;

        $f0 = r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness>;

        $r1[1] = $f0;

        $f0 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $r1[2] = $f0;

        $f0 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $r1[3] = $f0;

        return $r1;
    }
    public double[] getxRange()
    {
        com.wildplot.android.rendering.PlotSheet r0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        com.wildplot.android.rendering.MultiScreenPart $r3;
        double[] $r4;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (com.wildplot.android.rendering.MultiScreenPart) $r2;

        $r4 = virtualinvoke $r3.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        return $r4;
    }
    public double[] getyRange()
    {
        com.wildplot.android.rendering.PlotSheet r0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        com.wildplot.android.rendering.MultiScreenPart $r3;
        double[] $r4;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (com.wildplot.android.rendering.MultiScreenPart) $r2;

        $r4 = virtualinvoke $r3.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        return $r4;
    }
    public boolean isClusterable()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        return 1;
    }
    public boolean isCritical()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        return 0;
    }
    public boolean isMultiMode()
    {
        com.wildplot.android.rendering.PlotSheet r0;
        boolean z0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isMultiMode>;

        return z0;
    }
    public boolean isOnFrame()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        return 0;
    }
    public void paint(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isMultiMode>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: void drawMultiMode(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)>($r1);

        return;

     label1:
        specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: void drawSingleMode(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap,int)>($r1, 0);

        return;
    }
    public void setBackgroundColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap backgroundColor> = $r1;

        return;
    }
    public void setBorder()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBordered> = 1;

        return;
    }
    public void setBorderThickness(float)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        r0.<com.wildplot.android.rendering.PlotSheet: float borderThickness> = $f0;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBordered> = 1;

        return;
    }
    public void setFontSize(float)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean fontSizeSet> = 1;

        r0.<com.wildplot.android.rendering.PlotSheet: float fontSize> = $f0;

        return;
    }
    public void setFrameThickness(float, float, float, float)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, $f1, $f2, $f3;
        byte $b0;
        java.io.PrintStream $r1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        $b0 = $f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $b0 = $f1 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $b0 = $f2 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $b0 = $f3 cmpg 0.0F;

        if $b0 >= 0 goto label2;

     label1:
        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("PlotSheet:Error::Wrong Frame size (smaller than 0)");

        staticinvoke <java.lang.System: void exit(int)>(-1);

     label2:
        r0.<com.wildplot.android.rendering.PlotSheet: float leftFrameThickness> = $f0;

        r0.<com.wildplot.android.rendering.PlotSheet: float rightFrameThickness> = $f1;

        r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness> = $f2;

        r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness> = $f3;

        return;
    }
    public void setIsBackwards(boolean)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        boolean $z0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $z0 := @parameter0: boolean;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBackwards> = $z0;

        return;
    }
    public void setLogX()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogX> = 1;

        return;
    }
    public void setLogY()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogY> = 1;

        return;
    }
    public void setTextColor(com.wildplot.android.rendering.graphics.wrapper.ColorWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        com.wildplot.android.rendering.graphics.wrapper.ColorWrap $r1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.ColorWrap;

        r0.<com.wildplot.android.rendering.PlotSheet: com.wildplot.android.rendering.graphics.wrapper.ColorWrap textColor> = $r1;

        return;
    }
    public void setTitle(java.lang.String)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        java.lang.String $r1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: java.lang.String;

        r0.<com.wildplot.android.rendering.PlotSheet: java.lang.String title> = $r1;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean hasTitle> = 1;

        return;
    }
    public void setTypeface(android.graphics.Typeface)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        android.graphics.Typeface $r1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: android.graphics.Typeface;

        r0.<com.wildplot.android.rendering.PlotSheet: android.graphics.Typeface typeface> = $r1;

        return;
    }
    public void setxRange(double[])
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double[] $r1;
        java.lang.Object $r2;
        java.util.Vector $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: double[];

        $r3 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r2 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r2;

        virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: void setxRange(double[])>($r1);

        return;
    }
    public void setyRange(double[])
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double[] $r1;
        java.lang.Object $r2;
        java.util.Vector $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $r1 := @parameter0: double[];

        $r3 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r2 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r2;

        virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: void setyRange(double[])>($r1);

        return;
    }
    public double ticsCalcX(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, $f1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        double d0, $d1, $d2, $d3;
        java.util.Vector $r2;
        int $i0;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;
        byte $b1;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        d0 = $r5[1];

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getxRange()>();

        $d1 = $r5[0];

        d0 = d0 - $d1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int width>;

        $f1 = (float) $i0;

        $f0 = $f1 / $f0;

        $d1 = (double) $f0;

        $d1 = d0 / $d1;

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        $i0 = (int) $d1;

        $d1 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d1);

     label1:
        $d2 = d0 / $d1;

        $d2 = $d2 * 2.0;

        $d3 = (double) $f0;

        $b1 = $d2 cmpg $d3;

        if $b1 > 0 goto label2;

        $d1 = $d1 / 2.0;

        goto label1;

     label2:
        $d2 = d0 / $d1;

        $d2 = $d2 / 2.0;

        $d3 = (double) $f0;

        $b1 = $d2 cmpl $d3;

        if $b1 < 0 goto label3;

        $d1 = $d1 * 2.0;

        goto label2;

     label3:
        return $d1;
    }
    public double ticsCalcY(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, f1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        double d0, $d1, $d2, $d3;
        java.util.Vector $r2;
        int $i0;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;
        byte $b1;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.lang.Object[] $r8;
        java.lang.Double $r9;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        d0 = $r5[1];

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d1 = $r5[0];

        d0 = d0 - $d1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        f1 = (float) $i0;

        f1 = f1 / $f0;

        $d1 = (double) f1;

        $d1 = d0 / $d1;

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        $i0 = (int) $d1;

        $d1 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d1);

     label1:
        $d2 = d0 / $d1;

        $d2 = 2.0 * $d2;

        $d3 = (double) f1;

        $b1 = $d2 cmpg $d3;

        if $b1 > 0 goto label2;

        $d1 = $d1 / 2.0;

        goto label1;

     label2:
        $d2 = d0 / $d1;

        $d2 = $d2 / 2.0;

        $d3 = (double) f1;

        $b1 = $d2 cmpl $d3;

        if $b1 < 0 goto label3;

        $d1 = $d1 * 2.0;

        goto label2;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PlotSheet ticksCalcY: pixelDistance: %d, ticks: %d");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r8[0] = $r9;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>($r7, $r8);

        return $d1;
    }
    public double[] toCoordinatePoint(float, float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, $f1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        double[] r2;
        double $d0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $r1 := @parameter2: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        r2 = newarray (double)[2];

        $d0 = virtualinvoke r0.<com.wildplot.android.rendering.PlotSheet: double xToCoordinate(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f0, $r1);

        r2[0] = $d0;

        $d0 = virtualinvoke r0.<com.wildplot.android.rendering.PlotSheet: double yToCoordinate(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f1, $r1);

        r2[1] = $d0;

        return r2;
    }
    public float[] toGraphicPoint(double, double, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, $d1;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        float[] r2;
        float $f0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        r2 = newarray (float)[2];

        $f0 = virtualinvoke r0.<com.wildplot.android.rendering.PlotSheet: float xToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r1);

        r2[0] = $f0;

        $f0 = virtualinvoke r0.<com.wildplot.android.rendering.PlotSheet: float yToGraphic(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d1, $r1);

        r2[1] = $f0;

        return r2;
    }
    public void unsetBorder()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isBordered> = 0;

        return;
    }
    public void unsetFontSize()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean fontSizeSet> = 0;

        return;
    }
    public void unsetLogX()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogX> = 0;

        return;
    }
    public void unsetLogY()
    {
        com.wildplot.android.rendering.PlotSheet r0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogY> = 0;

        return;
    }
    public void updateX(double, double)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, $d1;
        double[] r1;
        java.lang.Object $r2;
        java.util.Vector $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r1 = newarray (double)[2];

        r1[0] = $d0;

        r1[1] = $d1;

        $r3 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r2 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r2;

        virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: void setxRange(double[])>(r1);

        return;
    }
    public void updateY(double, double)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0, $d1;
        double[] r1;
        java.lang.Object $r2;
        java.util.Vector $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r1 = newarray (double)[2];

        r1[0] = $d0;

        r1[1] = $d1;

        $r3 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $r2 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r2;

        virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: void setyRange(double[])>(r1);

        return;
    }
    public double xToCoordinate(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        boolean $z0;
        double $d0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogX>;

        if $z0 == 0 goto label1;

        $d0 = specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: double xToCoordinateLog(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f0, $r1);

        return $d0;

     label1:
        $d0 = specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: double xToCoordinateLinear(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f0, $r1);

        return $d0;
    }
    public float xToGraphic(double, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        boolean $z0;
        float $f0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogX>;

        if $z0 == 0 goto label1;

        $f0 = specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: float xToGraphicLog(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r1);

        return $f0;

     label1:
        $f0 = specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: float xToGraphicLinear(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r1);

        return $f0;
    }
    public double yToCoordinate(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        boolean $z0;
        double $d0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogY>;

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke r0.<com.wildplot.android.rendering.PlotSheet: double yToCoordinateLog(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f0, $r1);

        return $d0;

     label1:
        $d0 = virtualinvoke r0.<com.wildplot.android.rendering.PlotSheet: double yToCoordinateLinear(float,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($f0, $r1);

        return $d0;
    }
    public double yToCoordinateLinear(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, $f1, $f2;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        double d0, d1, $d2;
        java.util.Vector $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d2 = $r5[1];

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        d0 = $r5[0];

        $d2 = $d2 - d0;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f1 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f1 = $f1 - $f2;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f1 = $f1 - $f2;

        d0 = (double) $f1;

        d1 = $d2 / d0;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int y>;

        $i1 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $i0 = $i0 + $i1;

        $i0 = $i0 + -1;

        $f1 = (float) $i0;

        $f0 = $f1 - $f0;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f0 = $f0 - $f1;

        d0 = (double) $f0;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d2 = $r5[0];

        d0 = d0 * d1;

        $d2 = $d2 + d0;

        return $d2;
    }
    public double yToCoordinateLog(float, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        float $f0, $f1, $f2;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        int $i0;
        double $d0, $d1, $d2;
        java.util.Vector $r2;
        java.lang.Object $r3;
        com.wildplot.android.rendering.MultiScreenPart $r4;
        double[] $r5;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $f1 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f0 = $f0 - $f1;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f1 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f1 = $f1 - $f2;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f1 = $f1 - $f2;

        $f0 = $f0 + $f1;

        $f0 = $f0 * -1.0F;

        $i0 = $r1.<com.wildplot.android.rendering.graphics.wrapper.RectangleWrap: int height>;

        $f1 = (float) $i0;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float upperFrameThickness>;

        $f1 = $f1 - $f2;

        $f2 = r0.<com.wildplot.android.rendering.PlotSheet: float bottomFrameThickness>;

        $f1 = $f1 - $f2;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d1 = $r5[1];

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d2 = $r5[0];

        $d2 = staticinvoke <java.lang.Math: double log10(double)>($d2);

        $d1 = $d1 - $d2;

        $d0 = $d0 * $d1;

        $r2 = r0.<com.wildplot.android.rendering.PlotSheet: java.util.Vector screenParts>;

        $i0 = r0.<com.wildplot.android.rendering.PlotSheet: int currentScreen>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i0);

        $r4 = (com.wildplot.android.rendering.MultiScreenPart) $r3;

        $r5 = virtualinvoke $r4.<com.wildplot.android.rendering.MultiScreenPart: double[] getyRange()>();

        $d1 = $r5[0];

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        $d0 = $d1 + $d0;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0);

        return $d0;
    }
    public float yToGraphic(double, com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)
    {
        com.wildplot.android.rendering.PlotSheet r0;
        double $d0;
        com.wildplot.android.rendering.graphics.wrapper.RectangleWrap $r1;
        boolean $z0;
        float $f0;

        r0 := @this: com.wildplot.android.rendering.PlotSheet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.wildplot.android.rendering.graphics.wrapper.RectangleWrap;

        $z0 = r0.<com.wildplot.android.rendering.PlotSheet: boolean isLogY>;

        if $z0 == 0 goto label1;

        $f0 = specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: float yToGraphicLog(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r1);

        return $f0;

     label1:
        $f0 = specialinvoke r0.<com.wildplot.android.rendering.PlotSheet: float yToGraphicLinear(double,com.wildplot.android.rendering.graphics.wrapper.RectangleWrap)>($d0, $r1);

        return $f0;
    }
