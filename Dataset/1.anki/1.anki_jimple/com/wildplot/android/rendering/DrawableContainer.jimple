com.wildplot.android.rendering.DrawableContainer extends java.lang.Object implements com.wildplot.android.rendering.interfaces.Drawable
private com.wildplot.android.rendering.interfaces.Drawable currentDrawable
java.util.Vector drawableVector
private boolean isCritical
private boolean isOnAbort
private boolean isOnFrame
    public void <init>(boolean, boolean)
    {
        com.wildplot.android.rendering.DrawableContainer r0;
        boolean $z0, $z1;
        java.util.Vector $r1;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<com.wildplot.android.rendering.DrawableContainer: java.util.Vector drawableVector> = $r1;

        r0.<com.wildplot.android.rendering.DrawableContainer: boolean isOnFrame> = 0;

        r0.<com.wildplot.android.rendering.DrawableContainer: boolean isOnAbort> = 0;

        r0.<com.wildplot.android.rendering.DrawableContainer: boolean isCritical> = 0;

        r0.<com.wildplot.android.rendering.DrawableContainer: com.wildplot.android.rendering.interfaces.Drawable currentDrawable> = null;

        r0.<com.wildplot.android.rendering.DrawableContainer: boolean isOnFrame> = $z0;

        r0.<com.wildplot.android.rendering.DrawableContainer: boolean isCritical> = $z1;

        return;
    }
    public void abortAndReset()
    {
        com.wildplot.android.rendering.DrawableContainer r0;
        com.wildplot.android.rendering.interfaces.Drawable $r1;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        r0.<com.wildplot.android.rendering.DrawableContainer: boolean isOnAbort> = 1;

        $r1 = r0.<com.wildplot.android.rendering.DrawableContainer: com.wildplot.android.rendering.interfaces.Drawable currentDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<com.wildplot.android.rendering.DrawableContainer: com.wildplot.android.rendering.interfaces.Drawable currentDrawable>;

        interfaceinvoke $r1.<com.wildplot.android.rendering.interfaces.Drawable: void abortAndReset()>();

     label1:
        return;
    }
    public void addDrawable(com.wildplot.android.rendering.interfaces.Drawable)
    {
        com.wildplot.android.rendering.DrawableContainer r0;
        com.wildplot.android.rendering.interfaces.Drawable $r1;
        java.util.Vector $r2;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        $r1 := @parameter0: com.wildplot.android.rendering.interfaces.Drawable;

        $r2 = r0.<com.wildplot.android.rendering.DrawableContainer: java.util.Vector drawableVector>;

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>($r1);

        return;
    }
    public int getSize()
    {
        com.wildplot.android.rendering.DrawableContainer r0;
        int $i0;
        java.util.Vector $r1;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        $r1 = r0.<com.wildplot.android.rendering.DrawableContainer: java.util.Vector drawableVector>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }
    public boolean isClusterable()
    {
        com.wildplot.android.rendering.DrawableContainer r0;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        return 0;
    }
    public boolean isCritical()
    {
        com.wildplot.android.rendering.DrawableContainer r0;
        boolean z0;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        z0 = r0.<com.wildplot.android.rendering.DrawableContainer: boolean isCritical>;

        return z0;
    }
    public boolean isOnFrame()
    {
        com.wildplot.android.rendering.DrawableContainer r0;
        boolean z0;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        z0 = r0.<com.wildplot.android.rendering.DrawableContainer: boolean isOnFrame>;

        return z0;
    }
    public void paint(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)
    {
        com.wildplot.android.rendering.DrawableContainer r0;
        com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap $r1;
        java.util.Vector $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.wildplot.android.rendering.interfaces.Drawable r5;

        r0 := @this: com.wildplot.android.rendering.DrawableContainer;

        $r1 := @parameter0: com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap;

        r0.<com.wildplot.android.rendering.DrawableContainer: boolean isOnAbort> = 0;

        r0.<com.wildplot.android.rendering.DrawableContainer: com.wildplot.android.rendering.interfaces.Drawable currentDrawable> = null;

        $r2 = r0.<com.wildplot.android.rendering.DrawableContainer: java.util.Vector drawableVector>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.wildplot.android.rendering.interfaces.Drawable) $r4;

        r0.<com.wildplot.android.rendering.DrawableContainer: com.wildplot.android.rendering.interfaces.Drawable currentDrawable> = r5;

        $z0 = r0.<com.wildplot.android.rendering.DrawableContainer: boolean isOnAbort>;

        if $z0 == 0 goto label2;

        return;

     label2:
        interfaceinvoke r5.<com.wildplot.android.rendering.interfaces.Drawable: void paint(com.wildplot.android.rendering.graphics.wrapper.GraphicsWrap)>($r1);

        goto label1;

     label3:
        return;
    }
