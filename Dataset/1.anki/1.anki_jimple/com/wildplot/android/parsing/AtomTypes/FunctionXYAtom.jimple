com.wildplot.android.parsing.AtomTypes.FunctionXYAtom extends java.lang.Object implements com.wildplot.android.parsing.TreeElement
private com.wildplot.android.parsing.Atom$AtomType atomType
private com.wildplot.android.parsing.Expression expressionLeft
private com.wildplot.android.parsing.Expression expressionRight
private java.lang.String funcName
private com.wildplot.android.parsing.TopLevelParser parser
    public void <init>(java.lang.String, com.wildplot.android.parsing.TopLevelParser)
    {
        com.wildplot.android.parsing.AtomTypes.FunctionXYAtom r0;
        java.lang.String $r1;
        com.wildplot.android.parsing.TopLevelParser $r2;
        boolean $z0;
        com.wildplot.android.parsing.Atom$AtomType $r3;

        r0 := @this: com.wildplot.android.parsing.AtomTypes.FunctionXYAtom;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.wildplot.android.parsing.TopLevelParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <com.wildplot.android.parsing.Atom$AtomType: com.wildplot.android.parsing.Atom$AtomType FUNCTION_X>;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Atom$AtomType atomType> = $r3;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.TopLevelParser parser> = $r2;

        $z0 = specialinvoke r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: boolean init(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r3 = <com.wildplot.android.parsing.Atom$AtomType: com.wildplot.android.parsing.Atom$AtomType INVALID>;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Atom$AtomType atomType> = $r3;

     label1:
        return;
    }
    private boolean init(java.lang.String)
    {
        com.wildplot.android.parsing.AtomTypes.FunctionXYAtom r0;
        java.lang.String $r1, $r4, $r8, $r9;
        com.wildplot.android.parsing.Expression r2, r3;
        int $i0, $i1, $i2, i3, $i4;
        char $c5;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;
        boolean $z0, z1;
        com.wildplot.android.parsing.Atom$AtomType $r7;
        com.wildplot.android.parsing.TopLevelParser $r10;
        com.wildplot.android.parsing.Expression$ExpressionType $r11, $r12;

        r0 := @this: com.wildplot.android.parsing.AtomTypes.FunctionXYAtom;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("(");

        $i1 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>(")");

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(",");

        i3 = $i2;

        if $i0 <= 1 goto label10;

        $i4 = $i0 + 1;

        if $i1 <= $i4 goto label10;

        if $i2 <= $i0 goto label10;

        if $i2 >= $i1 goto label10;

        $i2 = $i0 + 1;

     label01:
        if $i2 >= $i1 goto label10;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        if $c5 != 44 goto label02;

        i3 = $i2;

     label02:
        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^a-zA-Z0-9]");

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z0 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label03;

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i4 > 0 goto label04;

     label03:
        $r7 = <com.wildplot.android.parsing.Atom$AtomType: com.wildplot.android.parsing.Atom$AtomType INVALID>;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Atom$AtomType atomType> = $r7;

        return 0;

     label04:
        $i4 = $i0 + 1;

        $r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i4, i3);

        $i4 = i3 + 1;

        $r9 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i4, $i1);

        r2 = new com.wildplot.android.parsing.Expression;

        $r10 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.TopLevelParser parser>;

        specialinvoke r2.<com.wildplot.android.parsing.Expression: void <init>(java.lang.String,com.wildplot.android.parsing.TopLevelParser)>($r8, $r10);

        r3 = new com.wildplot.android.parsing.Expression;

        $r10 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.TopLevelParser parser>;

        specialinvoke r3.<com.wildplot.android.parsing.Expression: void <init>(java.lang.String,com.wildplot.android.parsing.TopLevelParser)>($r9, $r10);

        $r11 = virtualinvoke r2.<com.wildplot.android.parsing.Expression: com.wildplot.android.parsing.Expression$ExpressionType getExpressionType()>();

        $r12 = <com.wildplot.android.parsing.Expression$ExpressionType: com.wildplot.android.parsing.Expression$ExpressionType INVALID>;

        if $r11 == $r12 goto label07;

        $z0 = 1;

     label05:
        $r11 = virtualinvoke r3.<com.wildplot.android.parsing.Expression: com.wildplot.android.parsing.Expression$ExpressionType getExpressionType()>();

        $r12 = <com.wildplot.android.parsing.Expression$ExpressionType: com.wildplot.android.parsing.Expression$ExpressionType INVALID>;

        if $r11 == $r12 goto label08;

        z1 = 1;

     label06:
        if $z0 == 0 goto label09;

        if z1 == 0 goto label09;

        $r7 = <com.wildplot.android.parsing.Atom$AtomType: com.wildplot.android.parsing.Atom$AtomType FUNCTION_X>;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Atom$AtomType atomType> = $r7;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: java.lang.String funcName> = $r4;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Expression expressionLeft> = r2;

        r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Expression expressionRight> = r3;

        return 1;

     label07:
        $z0 = 0;

        goto label05;

     label08:
        z1 = 0;

        goto label06;

     label09:
        $i2 = $i2 + 1;

        goto label01;

     label10:
        return 0;
    }
    public com.wildplot.android.parsing.Atom$AtomType getAtomType()
    {
        com.wildplot.android.parsing.AtomTypes.FunctionXYAtom r0;
        com.wildplot.android.parsing.Atom$AtomType r1;

        r0 := @this: com.wildplot.android.parsing.AtomTypes.FunctionXYAtom;

        r1 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Atom$AtomType atomType>;

        return r1;
    }
    public double getValue() throws com.wildplot.android.parsing.ExpressionFormatException
    {
        com.wildplot.android.parsing.AtomTypes.FunctionXYAtom r0;
        com.wildplot.android.parsing.Atom$AtomType $r1, $r2;
        com.wildplot.android.parsing.TopLevelParser $r3;
        java.lang.String $r4;
        com.wildplot.android.parsing.Expression $r5;
        double $d0, $d1;
        com.wildplot.android.parsing.ExpressionFormatException $r6;

        r0 := @this: com.wildplot.android.parsing.AtomTypes.FunctionXYAtom;

        $r1 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Atom$AtomType atomType>;

        $r2 = <com.wildplot.android.parsing.Atom$AtomType: com.wildplot.android.parsing.Atom$AtomType INVALID>;

        if $r1 == $r2 goto label1;

        $r3 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.TopLevelParser parser>;

        $r4 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: java.lang.String funcName>;

        $r5 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Expression expressionLeft>;

        $d0 = virtualinvoke $r5.<com.wildplot.android.parsing.Expression: double getValue()>();

        $r5 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Expression expressionRight>;

        $d1 = virtualinvoke $r5.<com.wildplot.android.parsing.Expression: double getValue()>();

        $d0 = virtualinvoke $r3.<com.wildplot.android.parsing.TopLevelParser: double getFuncVal(java.lang.String,double,double)>($r4, $d0, $d1);

        return $d0;

     label1:
        $r6 = new com.wildplot.android.parsing.ExpressionFormatException;

        specialinvoke $r6.<com.wildplot.android.parsing.ExpressionFormatException: void <init>(java.lang.String)>("Number is Invalid, cannot parse");

        throw $r6;
    }
    public boolean isVariable() throws com.wildplot.android.parsing.ExpressionFormatException
    {
        com.wildplot.android.parsing.AtomTypes.FunctionXYAtom r0;
        com.wildplot.android.parsing.Atom$AtomType $r1, $r2;
        com.wildplot.android.parsing.Expression $r3;
        boolean $z0;
        com.wildplot.android.parsing.ExpressionFormatException $r4;

        r0 := @this: com.wildplot.android.parsing.AtomTypes.FunctionXYAtom;

        $r1 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Atom$AtomType atomType>;

        $r2 = <com.wildplot.android.parsing.Atom$AtomType: com.wildplot.android.parsing.Atom$AtomType INVALID>;

        if $r1 == $r2 goto label3;

        $r3 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Expression expressionLeft>;

        $z0 = virtualinvoke $r3.<com.wildplot.android.parsing.Expression: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<com.wildplot.android.parsing.AtomTypes.FunctionXYAtom: com.wildplot.android.parsing.Expression expressionRight>;

        $z0 = virtualinvoke $r3.<com.wildplot.android.parsing.Expression: boolean isVariable()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;

     label3:
        $r4 = new com.wildplot.android.parsing.ExpressionFormatException;

        specialinvoke $r4.<com.wildplot.android.parsing.ExpressionFormatException: void <init>(java.lang.String)>("Number is Invalid, cannot parse");

        throw $r4;
    }
