timber.log.Timber$DebugTree extends java.lang.Object implements timber.log.Timber$TaggedTree
private static final java.util.regex.Pattern ANONYMOUS_CLASS
private static final int MAX_LOG_LENGTH
private static final java.lang.ThreadLocal NEXT_TAG
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        java.lang.ThreadLocal $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$\\d+$");

        <timber.log.Timber$DebugTree: java.util.regex.Pattern ANONYMOUS_CLASS> = $r0;

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        <timber.log.Timber$DebugTree: java.lang.ThreadLocal NEXT_TAG> = $r1;

        return;
    }
    public void <init>()
    {
        timber.log.Timber$DebugTree r0;

        r0 := @this: timber.log.Timber$DebugTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static transient java.lang.String maybeFormat(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Object[];

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return $r1;

     label1:
        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r0);

        return $r1;
    }
    private void throwShade(int, java.lang.String, java.lang.Throwable)
    {
        timber.log.Timber$DebugTree r0;
        int $i0, $i1;
        java.lang.Throwable $r1;
        java.lang.String $r2, $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: timber.log.Timber$DebugTree;

        $i0 := @parameter0: int;

        $r2 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Throwable;

        if $r2 == null goto label1;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

     label1:
        if $r1 != null goto label2;

        return;

     label2:
        $r2 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

     label3:
        $r3 = virtualinvoke r0.<timber.log.Timber$DebugTree: java.lang.String createTag()>();

        virtualinvoke r0.<timber.log.Timber$DebugTree: void logMessage(int,java.lang.String,java.lang.String)>($i0, $r3, $r2);

        return;

     label4:
        if $r1 == null goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r2 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;
    }
    protected java.lang.String createTag()
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1, r6;
        java.lang.Throwable $r2;
        java.lang.StackTraceElement[] $r3;
        int $i0;
        java.lang.IllegalStateException $r4;
        java.lang.StackTraceElement $r5;
        java.util.regex.Pattern $r7;
        java.util.regex.Matcher $r8;
        boolean $z0;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 = virtualinvoke r0.<timber.log.Timber$DebugTree: java.lang.String nextTag()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r3;

        if $i0 >= 6 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Synthetic stacktrace didn\'t have enough elements: are you using proguard?");

        throw $r4;

     label2:
        $r5 = $r3[5];

        $r1 = virtualinvoke $r5.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        r6 = $r1;

        $r7 = <timber.log.Timber$DebugTree: java.util.regex.Pattern ANONYMOUS_CLASS>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        r6 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

     label3:
        $i0 = virtualinvoke r6.<java.lang.String: int lastIndexOf(int)>(46);

        $i0 = $i0 + 1;

        $r1 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;
    }
    public final transient void d(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r1, $r2);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(3, $r1, null);

        return;
    }
    public final transient void d(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r2, $r3);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(3, $r2, $r1);

        return;
    }
    public final transient void e(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r1, $r2);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(6, $r1, null);

        return;
    }
    public final transient void e(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r2, $r3);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(6, $r2, $r1);

        return;
    }
    public final transient void i(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r1, $r2);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(4, $r1, null);

        return;
    }
    public final transient void i(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r2, $r3);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(4, $r2, $r1);

        return;
    }
    protected void logMessage(int, java.lang.String, java.lang.String)
    {
        timber.log.Timber$DebugTree r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 >= 4000 goto label1;

        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r1, $r2);

        return;

     label1:
        $i1 = 0;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

     label2:
        if $i1 >= $i2 goto label5;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(10, $i1);

        i4 = $i3;

        if $i3 == -1 goto label4;

     label3:
        $i3 = $i1 + 4000;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i3);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3);

        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r1, $r3);

        $i1 = $i3;

        if $i3 < i4 goto label3;

        $i1 = $i3 + 1;

        goto label2;

     label4:
        i4 = $i2;

        goto label3;

     label5:
        return;
    }
    protected final java.lang.String nextTag()
    {
        timber.log.Timber$DebugTree r0;
        java.lang.Object $r1;
        java.lang.ThreadLocal $r2;
        java.lang.String r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $r2 = <timber.log.Timber$DebugTree: java.lang.ThreadLocal NEXT_TAG>;

        $r1 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.lang.String) $r1;

        if r3 == null goto label1;

        $r2 = <timber.log.Timber$DebugTree: java.lang.ThreadLocal NEXT_TAG>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void remove()>();

     label1:
        return r3;
    }
    public final void tag(java.lang.String)
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1;
        java.lang.ThreadLocal $r2;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.String;

        $r2 = <timber.log.Timber$DebugTree: java.lang.ThreadLocal NEXT_TAG>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        return;
    }
    public final transient void v(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r1, $r2);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(2, $r1, null);

        return;
    }
    public final transient void v(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r2, $r3);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(2, $r2, $r1);

        return;
    }
    public final transient void w(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r1, $r2);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(5, $r1, null);

        return;
    }
    public final transient void w(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$DebugTree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <timber.log.Timber$DebugTree: java.lang.String maybeFormat(java.lang.String,java.lang.Object[])>($r2, $r3);

        specialinvoke r0.<timber.log.Timber$DebugTree: void throwShade(int,java.lang.String,java.lang.Throwable)>(5, $r2, $r1);

        return;
    }
