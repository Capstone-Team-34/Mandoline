timber.log.Timber extends java.lang.Object
static final java.util.List FOREST
static final android.util.SparseBooleanArray TAGGED_TREES
private static final timber.log.Timber$Tree TREE_OF_SOULS
    static void <clinit>()
    {
        java.util.concurrent.CopyOnWriteArrayList $r0;
        android.util.SparseBooleanArray $r1;
        timber.log.Timber$1 $r2;

        $r0 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        <timber.log.Timber: java.util.List FOREST> = $r0;

        $r1 = new android.util.SparseBooleanArray;

        specialinvoke $r1.<android.util.SparseBooleanArray: void <init>()>();

        <timber.log.Timber: android.util.SparseBooleanArray TAGGED_TREES> = $r1;

        $r2 = new timber.log.Timber$1;

        specialinvoke $r2.<timber.log.Timber$1: void <init>()>();

        <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS> = $r2;

        return;
    }
    private void <init>()
    {
        timber.log.Timber r0;
        java.lang.AssertionError $r1;

        r0 := @this: timber.log.Timber;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("No instances.");

        throw $r1;
    }
    public static timber.log.Timber$Tree asTree()
    {
        timber.log.Timber$Tree r0;

        r0 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        return r0;
    }
    public static transient void d(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r2.<timber.log.Timber$Tree: void d(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static transient void d(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r3.<timber.log.Timber$Tree: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static transient void e(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r2.<timber.log.Timber$Tree: void e(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static transient void e(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r3.<timber.log.Timber$Tree: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static transient void i(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r2.<timber.log.Timber$Tree: void i(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static transient void i(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r3.<timber.log.Timber$Tree: void i(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static void plant(timber.log.Timber$Tree)
    {
        timber.log.Timber$Tree $r0, $r2;
        int $i0;
        java.lang.NullPointerException $r1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        android.util.SparseBooleanArray $r4;
        java.util.List $r5;

        $r0 := @parameter0: timber.log.Timber$Tree;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("tree == null");

        throw $r1;

     label1:
        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        if $r0 != $r2 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot plant Timber into itself.");

        throw $r3;

     label2:
        $z0 = $r0 instanceof timber.log.Timber$TaggedTree;

        if $z0 == 0 goto label3;

        $r4 = <timber.log.Timber: android.util.SparseBooleanArray TAGGED_TREES>;

        $r5 = <timber.log.Timber: java.util.List FOREST>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        virtualinvoke $r4.<android.util.SparseBooleanArray: void append(int,boolean)>($i0, 1);

     label3:
        $r5 = <timber.log.Timber: java.util.List FOREST>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r0);

        return;
    }
    public static timber.log.Timber$Tree tag(java.lang.String)
    {
        java.lang.String $r0;
        int i0, $i1, $i2;
        android.util.SparseBooleanArray $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        timber.log.Timber$TaggedTree $r4;
        timber.log.Timber$Tree r5;

        $r0 := @parameter0: java.lang.String;

        i0 = 0;

        $r1 = <timber.log.Timber: android.util.SparseBooleanArray TAGGED_TREES>;

        $i1 = virtualinvoke $r1.<android.util.SparseBooleanArray: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r2 = <timber.log.Timber: java.util.List FOREST>;

        $r1 = <timber.log.Timber: android.util.SparseBooleanArray TAGGED_TREES>;

        $i2 = virtualinvoke $r1.<android.util.SparseBooleanArray: int keyAt(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (timber.log.Timber$TaggedTree) $r3;

        interfaceinvoke $r4.<timber.log.Timber$TaggedTree: void tag(java.lang.String)>($r0);

        i0 = i0 + 1;

        goto label1;

     label2:
        r5 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        return r5;
    }
    public static void uproot(timber.log.Timber$Tree)
    {
        timber.log.Timber$Tree $r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        android.util.SparseBooleanArray $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @parameter0: timber.log.Timber$Tree;

        i0 = 0;

        $r1 = <timber.log.Timber: java.util.List FOREST>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r1 = <timber.log.Timber: java.util.List FOREST>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        if $r2 != $r0 goto label2;

        $r3 = <timber.log.Timber: android.util.SparseBooleanArray TAGGED_TREES>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r1 = <timber.log.Timber: java.util.List FOREST>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        return;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot uproot tree which is not planted: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }
    public static void uprootAll()
    {
        android.util.SparseBooleanArray $r0;
        java.util.List $r1;

        $r0 = <timber.log.Timber: android.util.SparseBooleanArray TAGGED_TREES>;

        virtualinvoke $r0.<android.util.SparseBooleanArray: void clear()>();

        $r1 = <timber.log.Timber: java.util.List FOREST>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }
    public static transient void v(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r2.<timber.log.Timber$Tree: void v(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static transient void v(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r3.<timber.log.Timber$Tree: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static transient void w(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r2.<timber.log.Timber$Tree: void w(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static transient void w(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        interfaceinvoke $r3.<timber.log.Timber$Tree: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
