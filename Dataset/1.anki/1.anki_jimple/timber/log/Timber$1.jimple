timber.log.Timber$1 extends java.lang.Object implements timber.log.Timber$Tree
    void <init>()
    {
        timber.log.Timber$1 r0;

        r0 := @this: timber.log.Timber$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public transient void d(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.util.List r3;
        int i0, $i1;
        java.lang.Object $r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (timber.log.Timber$Tree) $r4;

        interfaceinvoke $r5.<timber.log.Timber$Tree: void d(java.lang.String,java.lang.Object[])>($r1, $r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void d(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        java.util.List r4;
        int i0, $i1;
        java.lang.Object $r5;
        timber.log.Timber$Tree $r6;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (timber.log.Timber$Tree) $r5;

        interfaceinvoke $r6.<timber.log.Timber$Tree: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void e(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.util.List r3;
        int i0, $i1;
        java.lang.Object $r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (timber.log.Timber$Tree) $r4;

        interfaceinvoke $r5.<timber.log.Timber$Tree: void e(java.lang.String,java.lang.Object[])>($r1, $r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void e(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        java.util.List r4;
        int i0, $i1;
        java.lang.Object $r5;
        timber.log.Timber$Tree $r6;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (timber.log.Timber$Tree) $r5;

        interfaceinvoke $r6.<timber.log.Timber$Tree: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void i(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.util.List r3;
        int i0, $i1;
        java.lang.Object $r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (timber.log.Timber$Tree) $r4;

        interfaceinvoke $r5.<timber.log.Timber$Tree: void i(java.lang.String,java.lang.Object[])>($r1, $r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void i(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        java.util.List r4;
        int i0, $i1;
        java.lang.Object $r5;
        timber.log.Timber$Tree $r6;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (timber.log.Timber$Tree) $r5;

        interfaceinvoke $r6.<timber.log.Timber$Tree: void i(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void v(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.util.List r3;
        int i0, $i1;
        java.lang.Object $r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (timber.log.Timber$Tree) $r4;

        interfaceinvoke $r5.<timber.log.Timber$Tree: void v(java.lang.String,java.lang.Object[])>($r1, $r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void v(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        java.util.List r4;
        int i0, $i1;
        java.lang.Object $r5;
        timber.log.Timber$Tree $r6;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (timber.log.Timber$Tree) $r5;

        interfaceinvoke $r6.<timber.log.Timber$Tree: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void w(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.util.List r3;
        int i0, $i1;
        java.lang.Object $r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (timber.log.Timber$Tree) $r4;

        interfaceinvoke $r5.<timber.log.Timber$Tree: void w(java.lang.String,java.lang.Object[])>($r1, $r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void w(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        java.util.List r4;
        int i0, $i1;
        java.lang.Object $r5;
        timber.log.Timber$Tree $r6;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: java.util.List FOREST>;

        i0 = 0;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (timber.log.Timber$Tree) $r5;

        interfaceinvoke $r6.<timber.log.Timber$Tree: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
