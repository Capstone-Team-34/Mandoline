android.support.v4.graphics.drawable.DrawableCompat$DrawableImpl extends java.lang.Object
public abstract void applyTheme(android.graphics.drawable.Drawable, android.content.res.Resources$Theme) { 
// no body
} 
public abstract boolean canApplyTheme(android.graphics.drawable.Drawable) { 
// no body
} 
public abstract void clearColorFilter(android.graphics.drawable.Drawable) { 
// no body
} 
public abstract int getAlpha(android.graphics.drawable.Drawable) { 
// no body
} 
public abstract android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable) { 
// no body
} 
public abstract int getLayoutDirection(android.graphics.drawable.Drawable) { 
// no body
} 
public abstract void inflate(android.graphics.drawable.Drawable, android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { 
// no body
} 
public abstract boolean isAutoMirrored(android.graphics.drawable.Drawable) { 
// no body
} 
public abstract void jumpToCurrentState(android.graphics.drawable.Drawable) { 
// no body
} 
public abstract void setAutoMirrored(android.graphics.drawable.Drawable, boolean) { 
// no body
} 
public abstract void setHotspot(android.graphics.drawable.Drawable, float, float) { 
// no body
} 
public abstract void setHotspotBounds(android.graphics.drawable.Drawable, int, int, int, int) { 
// no body
} 
public abstract boolean setLayoutDirection(android.graphics.drawable.Drawable, int) { 
// no body
} 
public abstract void setTint(android.graphics.drawable.Drawable, int) { 
// no body
} 
public abstract void setTintList(android.graphics.drawable.Drawable, android.content.res.ColorStateList) { 
// no body
} 
public abstract void setTintMode(android.graphics.drawable.Drawable, android.graphics.PorterDuff$Mode) { 
// no body
} 
public abstract android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) { 
// no body
} 
