org.acra.collector.MediaCodecListCollector extends java.lang.Object
private static final java.lang.String[] AAC_TYPES
private static final java.lang.String[] AVC_TYPES
private static final java.lang.String COLOR_FORMAT_PREFIX
private static final java.lang.String[] H263_TYPES
private static final java.lang.String[] MPEG4_TYPES
private static java.lang.Class codecCapabilitiesClass
private static java.lang.reflect.Field colorFormatsField
private static java.lang.reflect.Method getCapabilitiesForTypeMethod
private static java.lang.reflect.Method getCodecInfoAtMethod
private static java.lang.reflect.Method getNameMethod
private static java.lang.reflect.Method getSupportedTypesMethod
private static java.lang.reflect.Method isEncoderMethod
private static java.lang.reflect.Field levelField
private static android.util.SparseArray mAACProfileValues
private static android.util.SparseArray mAVCLevelValues
private static android.util.SparseArray mAVCProfileValues
private static android.util.SparseArray mColorFormatValues
private static android.util.SparseArray mH263LevelValues
private static android.util.SparseArray mH263ProfileValues
private static android.util.SparseArray mMPEG4LevelValues
private static android.util.SparseArray mMPEG4ProfileValues
private static java.lang.Class mediaCodecInfoClass
private static java.lang.Class mediaCodecListClass
private static java.lang.reflect.Field profileField
private static java.lang.reflect.Field profileLevelsField
    static void <clinit>()
    {
        java.lang.String[] $r0;
        android.util.SparseArray $r1;
        java.lang.Class $r2, $r4;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r5;
        java.lang.reflect.Field $r6;
        java.lang.reflect.Field[] $r7;
        int i0, i1, $i2;
        boolean $z0;
        java.lang.String $r8;
        java.lang.ClassNotFoundException $r9;
        java.lang.NoSuchMethodException $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.IllegalAccessException $r12;
        java.lang.SecurityException $r13;
        java.lang.NoSuchFieldException $r14;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "mp4";

        $r0[1] = "mpeg4";

        $r0[2] = "MP4";

        $r0[3] = "MPEG4";

        <org.acra.collector.MediaCodecListCollector: java.lang.String[] MPEG4_TYPES> = $r0;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "avc";

        $r0[1] = "h264";

        $r0[2] = "AVC";

        $r0[3] = "H264";

        <org.acra.collector.MediaCodecListCollector: java.lang.String[] AVC_TYPES> = $r0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "h263";

        $r0[1] = "H263";

        <org.acra.collector.MediaCodecListCollector: java.lang.String[] H263_TYPES> = $r0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "aac";

        $r0[1] = "AAC";

        <org.acra.collector.MediaCodecListCollector: java.lang.String[] AAC_TYPES> = $r0;

        <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecListClass> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getCodecInfoAtMethod> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecInfoClass> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getNameMethod> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method isEncoderMethod> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getSupportedTypesMethod> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getCapabilitiesForTypeMethod> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.Class codecCapabilitiesClass> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field colorFormatsField> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field profileLevelsField> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field profileField> = null;

        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field levelField> = null;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mColorFormatValues> = $r1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAVCLevelValues> = $r1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAVCProfileValues> = $r1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mH263LevelValues> = $r1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mH263ProfileValues> = $r1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mMPEG4LevelValues> = $r1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mMPEG4ProfileValues> = $r1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAACProfileValues> = $r1;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.media.MediaCodecList");

     label02:
        <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecListClass> = $r2;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecListClass>;

        $r3 = newarray (java.lang.Class)[1];

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[0] = $r4;

     label03:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCodecInfoAt", $r3);

     label04:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getCodecInfoAtMethod> = $r5;

     label05:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.media.MediaCodecInfo");

     label06:
        <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecInfoClass> = $r2;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecInfoClass>;

        $r3 = newarray (java.lang.Class)[0];

     label07:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getName", $r3);

     label08:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getNameMethod> = $r5;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecInfoClass>;

        $r3 = newarray (java.lang.Class)[0];

     label09:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isEncoder", $r3);

     label10:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method isEncoderMethod> = $r5;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecInfoClass>;

        $r3 = newarray (java.lang.Class)[0];

     label11:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getSupportedTypes", $r3);

     label12:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getSupportedTypesMethod> = $r5;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecInfoClass>;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/String;";

     label13:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCapabilitiesForType", $r3);

     label14:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getCapabilitiesForTypeMethod> = $r5;

     label15:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.media.MediaCodecInfo$CodecCapabilities");

     label16:
        <org.acra.collector.MediaCodecListCollector: java.lang.Class codecCapabilitiesClass> = $r2;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class codecCapabilitiesClass>;

     label17:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("colorFormats");

     label18:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field colorFormatsField> = $r6;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class codecCapabilitiesClass>;

     label19:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("profileLevels");

     label20:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field profileLevelsField> = $r6;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class codecCapabilitiesClass>;

     label21:
        $r7 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

     label22:
        i0 = lengthof $r7;

        i1 = 0;

     label23:
        if i1 >= i0 goto label32;

        $r6 = $r7[i1];

     label24:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

     label25:
        if $z0 == 0 goto label31;

     label26:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i2);

     label27:
        if $z0 == 0 goto label31;

     label28:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("COLOR_");

     label29:
        if $z0 == 0 goto label31;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mColorFormatValues>;

     label30:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label31:
        i1 = i1 + 1;

        goto label23;

     label32:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.media.MediaCodecInfo$CodecProfileLevel");

        $r7 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

     label33:
        i0 = lengthof $r7;

        i1 = 0;

     label34:
        if i1 >= i0 goto label73;

        $r6 = $r7[i1];

     label35:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

     label36:
        if $z0 == 0 goto label42;

     label37:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i2);

     label38:
        if $z0 == 0 goto label42;

     label39:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("AVCLevel");

     label40:
        if $z0 == 0 goto label43;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAVCLevelValues>;

     label41:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label42:
        i1 = i1 + 1;

        goto label34;

     label43:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("AVCProfile");

     label44:
        if $z0 == 0 goto label48;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAVCProfileValues>;

     label45:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label46:
        goto label42;

     label47:
        $r9 := @caughtexception;

        return;

     label48:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("H263Level");

     label49:
        if $z0 == 0 goto label53;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mH263LevelValues>;

     label50:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label51:
        goto label42;

     label52:
        $r10 := @caughtexception;

        return;

     label53:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("H263Profile");

     label54:
        if $z0 == 0 goto label58;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mH263ProfileValues>;

     label55:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label56:
        goto label42;

     label57:
        $r11 := @caughtexception;

        return;

     label58:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("MPEG4Level");

     label59:
        if $z0 == 0 goto label63;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mMPEG4LevelValues>;

     label60:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label61:
        goto label42;

     label62:
        $r12 := @caughtexception;

        return;

     label63:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("MPEG4Profile");

     label64:
        if $z0 == 0 goto label68;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mMPEG4ProfileValues>;

     label65:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label66:
        goto label42;

     label67:
        $r13 := @caughtexception;

        return;

     label68:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("AAC");

     label69:
        if $z0 == 0 goto label42;

        $r1 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAACProfileValues>;

     label70:
        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r8 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8);

     label71:
        goto label42;

     label72:
        $r14 := @caughtexception;

        return;

     label73:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("profile");

     label74:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field profileField> = $r6;

     label75:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("level");

     label76:
        <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field levelField> = $r6;

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label47;
        catch java.lang.ClassNotFoundException from label03 to label04 with label47;
        catch java.lang.ClassNotFoundException from label05 to label06 with label47;
        catch java.lang.ClassNotFoundException from label07 to label08 with label47;
        catch java.lang.ClassNotFoundException from label09 to label10 with label47;
        catch java.lang.ClassNotFoundException from label11 to label12 with label47;
        catch java.lang.ClassNotFoundException from label13 to label14 with label47;
        catch java.lang.ClassNotFoundException from label15 to label16 with label47;
        catch java.lang.ClassNotFoundException from label17 to label18 with label47;
        catch java.lang.ClassNotFoundException from label19 to label20 with label47;
        catch java.lang.ClassNotFoundException from label21 to label22 with label47;
        catch java.lang.ClassNotFoundException from label24 to label25 with label47;
        catch java.lang.ClassNotFoundException from label26 to label27 with label47;
        catch java.lang.ClassNotFoundException from label28 to label29 with label47;
        catch java.lang.ClassNotFoundException from label30 to label31 with label47;
        catch java.lang.ClassNotFoundException from label32 to label33 with label47;
        catch java.lang.ClassNotFoundException from label35 to label36 with label47;
        catch java.lang.ClassNotFoundException from label37 to label38 with label47;
        catch java.lang.ClassNotFoundException from label39 to label40 with label47;
        catch java.lang.ClassNotFoundException from label41 to label42 with label47;
        catch java.lang.ClassNotFoundException from label43 to label44 with label47;
        catch java.lang.ClassNotFoundException from label45 to label46 with label47;
        catch java.lang.ClassNotFoundException from label48 to label49 with label47;
        catch java.lang.ClassNotFoundException from label50 to label51 with label47;
        catch java.lang.ClassNotFoundException from label53 to label54 with label47;
        catch java.lang.ClassNotFoundException from label55 to label56 with label47;
        catch java.lang.ClassNotFoundException from label58 to label59 with label47;
        catch java.lang.ClassNotFoundException from label60 to label61 with label47;
        catch java.lang.ClassNotFoundException from label63 to label64 with label47;
        catch java.lang.ClassNotFoundException from label65 to label66 with label47;
        catch java.lang.ClassNotFoundException from label68 to label69 with label47;
        catch java.lang.ClassNotFoundException from label70 to label71 with label47;
        catch java.lang.ClassNotFoundException from label73 to label74 with label47;
        catch java.lang.ClassNotFoundException from label75 to label76 with label47;
        catch java.lang.NoSuchMethodException from label01 to label02 with label52;
        catch java.lang.NoSuchMethodException from label03 to label04 with label52;
        catch java.lang.NoSuchMethodException from label05 to label06 with label52;
        catch java.lang.NoSuchMethodException from label07 to label08 with label52;
        catch java.lang.NoSuchMethodException from label09 to label10 with label52;
        catch java.lang.NoSuchMethodException from label11 to label12 with label52;
        catch java.lang.NoSuchMethodException from label13 to label14 with label52;
        catch java.lang.NoSuchMethodException from label15 to label16 with label52;
        catch java.lang.NoSuchMethodException from label17 to label18 with label52;
        catch java.lang.NoSuchMethodException from label19 to label20 with label52;
        catch java.lang.NoSuchMethodException from label21 to label22 with label52;
        catch java.lang.NoSuchMethodException from label24 to label25 with label52;
        catch java.lang.NoSuchMethodException from label26 to label27 with label52;
        catch java.lang.NoSuchMethodException from label28 to label29 with label52;
        catch java.lang.NoSuchMethodException from label30 to label31 with label52;
        catch java.lang.NoSuchMethodException from label32 to label33 with label52;
        catch java.lang.NoSuchMethodException from label35 to label36 with label52;
        catch java.lang.NoSuchMethodException from label37 to label38 with label52;
        catch java.lang.NoSuchMethodException from label39 to label40 with label52;
        catch java.lang.NoSuchMethodException from label41 to label42 with label52;
        catch java.lang.NoSuchMethodException from label43 to label44 with label52;
        catch java.lang.NoSuchMethodException from label45 to label46 with label52;
        catch java.lang.NoSuchMethodException from label48 to label49 with label52;
        catch java.lang.NoSuchMethodException from label50 to label51 with label52;
        catch java.lang.NoSuchMethodException from label53 to label54 with label52;
        catch java.lang.NoSuchMethodException from label55 to label56 with label52;
        catch java.lang.NoSuchMethodException from label58 to label59 with label52;
        catch java.lang.NoSuchMethodException from label60 to label61 with label52;
        catch java.lang.NoSuchMethodException from label63 to label64 with label52;
        catch java.lang.NoSuchMethodException from label65 to label66 with label52;
        catch java.lang.NoSuchMethodException from label68 to label69 with label52;
        catch java.lang.NoSuchMethodException from label70 to label71 with label52;
        catch java.lang.NoSuchMethodException from label73 to label74 with label52;
        catch java.lang.NoSuchMethodException from label75 to label76 with label52;
        catch java.lang.IllegalArgumentException from label01 to label02 with label57;
        catch java.lang.IllegalArgumentException from label03 to label04 with label57;
        catch java.lang.IllegalArgumentException from label05 to label06 with label57;
        catch java.lang.IllegalArgumentException from label07 to label08 with label57;
        catch java.lang.IllegalArgumentException from label09 to label10 with label57;
        catch java.lang.IllegalArgumentException from label11 to label12 with label57;
        catch java.lang.IllegalArgumentException from label13 to label14 with label57;
        catch java.lang.IllegalArgumentException from label15 to label16 with label57;
        catch java.lang.IllegalArgumentException from label17 to label18 with label57;
        catch java.lang.IllegalArgumentException from label19 to label20 with label57;
        catch java.lang.IllegalArgumentException from label21 to label22 with label57;
        catch java.lang.IllegalArgumentException from label24 to label25 with label57;
        catch java.lang.IllegalArgumentException from label26 to label27 with label57;
        catch java.lang.IllegalArgumentException from label28 to label29 with label57;
        catch java.lang.IllegalArgumentException from label30 to label31 with label57;
        catch java.lang.IllegalArgumentException from label32 to label33 with label57;
        catch java.lang.IllegalArgumentException from label35 to label36 with label57;
        catch java.lang.IllegalArgumentException from label37 to label38 with label57;
        catch java.lang.IllegalArgumentException from label39 to label40 with label57;
        catch java.lang.IllegalArgumentException from label41 to label42 with label57;
        catch java.lang.IllegalArgumentException from label43 to label44 with label57;
        catch java.lang.IllegalArgumentException from label45 to label46 with label57;
        catch java.lang.IllegalArgumentException from label48 to label49 with label57;
        catch java.lang.IllegalArgumentException from label50 to label51 with label57;
        catch java.lang.IllegalArgumentException from label53 to label54 with label57;
        catch java.lang.IllegalArgumentException from label55 to label56 with label57;
        catch java.lang.IllegalArgumentException from label58 to label59 with label57;
        catch java.lang.IllegalArgumentException from label60 to label61 with label57;
        catch java.lang.IllegalArgumentException from label63 to label64 with label57;
        catch java.lang.IllegalArgumentException from label65 to label66 with label57;
        catch java.lang.IllegalArgumentException from label68 to label69 with label57;
        catch java.lang.IllegalArgumentException from label70 to label71 with label57;
        catch java.lang.IllegalArgumentException from label73 to label74 with label57;
        catch java.lang.IllegalArgumentException from label75 to label76 with label57;
        catch java.lang.IllegalAccessException from label01 to label02 with label62;
        catch java.lang.IllegalAccessException from label03 to label04 with label62;
        catch java.lang.IllegalAccessException from label05 to label06 with label62;
        catch java.lang.IllegalAccessException from label07 to label08 with label62;
        catch java.lang.IllegalAccessException from label09 to label10 with label62;
        catch java.lang.IllegalAccessException from label11 to label12 with label62;
        catch java.lang.IllegalAccessException from label13 to label14 with label62;
        catch java.lang.IllegalAccessException from label15 to label16 with label62;
        catch java.lang.IllegalAccessException from label17 to label18 with label62;
        catch java.lang.IllegalAccessException from label19 to label20 with label62;
        catch java.lang.IllegalAccessException from label21 to label22 with label62;
        catch java.lang.IllegalAccessException from label24 to label25 with label62;
        catch java.lang.IllegalAccessException from label26 to label27 with label62;
        catch java.lang.IllegalAccessException from label28 to label29 with label62;
        catch java.lang.IllegalAccessException from label30 to label31 with label62;
        catch java.lang.IllegalAccessException from label32 to label33 with label62;
        catch java.lang.IllegalAccessException from label35 to label36 with label62;
        catch java.lang.IllegalAccessException from label37 to label38 with label62;
        catch java.lang.IllegalAccessException from label39 to label40 with label62;
        catch java.lang.IllegalAccessException from label41 to label42 with label62;
        catch java.lang.IllegalAccessException from label43 to label44 with label62;
        catch java.lang.IllegalAccessException from label45 to label46 with label62;
        catch java.lang.IllegalAccessException from label48 to label49 with label62;
        catch java.lang.IllegalAccessException from label50 to label51 with label62;
        catch java.lang.IllegalAccessException from label53 to label54 with label62;
        catch java.lang.IllegalAccessException from label55 to label56 with label62;
        catch java.lang.IllegalAccessException from label58 to label59 with label62;
        catch java.lang.IllegalAccessException from label60 to label61 with label62;
        catch java.lang.IllegalAccessException from label63 to label64 with label62;
        catch java.lang.IllegalAccessException from label65 to label66 with label62;
        catch java.lang.IllegalAccessException from label68 to label69 with label62;
        catch java.lang.IllegalAccessException from label70 to label71 with label62;
        catch java.lang.IllegalAccessException from label73 to label74 with label62;
        catch java.lang.IllegalAccessException from label75 to label76 with label62;
        catch java.lang.SecurityException from label01 to label02 with label67;
        catch java.lang.SecurityException from label03 to label04 with label67;
        catch java.lang.SecurityException from label05 to label06 with label67;
        catch java.lang.SecurityException from label07 to label08 with label67;
        catch java.lang.SecurityException from label09 to label10 with label67;
        catch java.lang.SecurityException from label11 to label12 with label67;
        catch java.lang.SecurityException from label13 to label14 with label67;
        catch java.lang.SecurityException from label15 to label16 with label67;
        catch java.lang.SecurityException from label17 to label18 with label67;
        catch java.lang.SecurityException from label19 to label20 with label67;
        catch java.lang.SecurityException from label21 to label22 with label67;
        catch java.lang.SecurityException from label24 to label25 with label67;
        catch java.lang.SecurityException from label26 to label27 with label67;
        catch java.lang.SecurityException from label28 to label29 with label67;
        catch java.lang.SecurityException from label30 to label31 with label67;
        catch java.lang.SecurityException from label32 to label33 with label67;
        catch java.lang.SecurityException from label35 to label36 with label67;
        catch java.lang.SecurityException from label37 to label38 with label67;
        catch java.lang.SecurityException from label39 to label40 with label67;
        catch java.lang.SecurityException from label41 to label42 with label67;
        catch java.lang.SecurityException from label43 to label44 with label67;
        catch java.lang.SecurityException from label45 to label46 with label67;
        catch java.lang.SecurityException from label48 to label49 with label67;
        catch java.lang.SecurityException from label50 to label51 with label67;
        catch java.lang.SecurityException from label53 to label54 with label67;
        catch java.lang.SecurityException from label55 to label56 with label67;
        catch java.lang.SecurityException from label58 to label59 with label67;
        catch java.lang.SecurityException from label60 to label61 with label67;
        catch java.lang.SecurityException from label63 to label64 with label67;
        catch java.lang.SecurityException from label65 to label66 with label67;
        catch java.lang.SecurityException from label68 to label69 with label67;
        catch java.lang.SecurityException from label70 to label71 with label67;
        catch java.lang.SecurityException from label73 to label74 with label67;
        catch java.lang.SecurityException from label75 to label76 with label67;
        catch java.lang.NoSuchFieldException from label01 to label02 with label72;
        catch java.lang.NoSuchFieldException from label03 to label04 with label72;
        catch java.lang.NoSuchFieldException from label05 to label06 with label72;
        catch java.lang.NoSuchFieldException from label07 to label08 with label72;
        catch java.lang.NoSuchFieldException from label09 to label10 with label72;
        catch java.lang.NoSuchFieldException from label11 to label12 with label72;
        catch java.lang.NoSuchFieldException from label13 to label14 with label72;
        catch java.lang.NoSuchFieldException from label15 to label16 with label72;
        catch java.lang.NoSuchFieldException from label17 to label18 with label72;
        catch java.lang.NoSuchFieldException from label19 to label20 with label72;
        catch java.lang.NoSuchFieldException from label21 to label22 with label72;
        catch java.lang.NoSuchFieldException from label24 to label25 with label72;
        catch java.lang.NoSuchFieldException from label26 to label27 with label72;
        catch java.lang.NoSuchFieldException from label28 to label29 with label72;
        catch java.lang.NoSuchFieldException from label30 to label31 with label72;
        catch java.lang.NoSuchFieldException from label32 to label33 with label72;
        catch java.lang.NoSuchFieldException from label35 to label36 with label72;
        catch java.lang.NoSuchFieldException from label37 to label38 with label72;
        catch java.lang.NoSuchFieldException from label39 to label40 with label72;
        catch java.lang.NoSuchFieldException from label41 to label42 with label72;
        catch java.lang.NoSuchFieldException from label43 to label44 with label72;
        catch java.lang.NoSuchFieldException from label45 to label46 with label72;
        catch java.lang.NoSuchFieldException from label48 to label49 with label72;
        catch java.lang.NoSuchFieldException from label50 to label51 with label72;
        catch java.lang.NoSuchFieldException from label53 to label54 with label72;
        catch java.lang.NoSuchFieldException from label55 to label56 with label72;
        catch java.lang.NoSuchFieldException from label58 to label59 with label72;
        catch java.lang.NoSuchFieldException from label60 to label61 with label72;
        catch java.lang.NoSuchFieldException from label63 to label64 with label72;
        catch java.lang.NoSuchFieldException from label65 to label66 with label72;
        catch java.lang.NoSuchFieldException from label68 to label69 with label72;
        catch java.lang.NoSuchFieldException from label70 to label71 with label72;
        catch java.lang.NoSuchFieldException from label73 to label74 with label72;
        catch java.lang.NoSuchFieldException from label75 to label76 with label72;
    }
    public void <init>()
    {
        org.acra.collector.MediaCodecListCollector r0;

        r0 := @this: org.acra.collector.MediaCodecListCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String collecMediaCodecList()
    {
        int i0, $i1, i2, i3;
        java.lang.StringBuilder r0, $r8;
        java.lang.String r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6, $r9;
        java.lang.Integer $r7;
        java.lang.String[] $r10;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.IllegalAccessException $r12;
        java.lang.NoSuchMethodException $r13;

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecListClass>;

        if $r2 == null goto label28;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecInfoClass>;

        if $r2 == null goto label28;

        $r2 = <org.acra.collector.MediaCodecListCollector: java.lang.Class mediaCodecListClass>;

        $r3 = newarray (java.lang.Class)[0];

     label01:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCodecCount", $r3);

     label02:
        $r5 = newarray (java.lang.Object)[0];

     label03:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label04:
        $r7 = (java.lang.Integer) $r6;

     label05:
        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

     label06:
        i2 = 0;

     label07:
        if i2 >= $i1 goto label28;

     label08:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label09:
        $r4 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getCodecInfoAtMethod>;

        $r5 = newarray (java.lang.Object)[1];

     label10:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

     label11:
        $r5[0] = $r7;

     label12:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

        $r8 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

     label13:
        $r4 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getNameMethod>;

        $r5 = newarray (java.lang.Object)[0];

     label14:
        $r9 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isEncoder: ");

     label15:
        $r4 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method isEncoderMethod>;

        $r5 = newarray (java.lang.Object)[0];

     label16:
        $r9 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label17:
        $r4 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getSupportedTypesMethod>;

        $r5 = newarray (java.lang.Object)[0];

     label18:
        $r9 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

     label19:
        $r10 = (java.lang.String[]) $r9;

     label20:
        $r8 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Supported types: ");

        r1 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r10);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label21:
        i0 = lengthof $r10;

        i3 = 0;

     label22:
        if i3 >= i0 goto label25;

        r1 = $r10[i3];

     label23:
        r1 = staticinvoke <org.acra.collector.MediaCodecListCollector: java.lang.String collectCapabilitiesForType(java.lang.Object,java.lang.String)>($r6, r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label24:
        i3 = i3 + 1;

        goto label22;

     label25:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label26:
        i2 = i2 + 1;

        goto label07;

     label27:
        $r11 := @caughtexception;

     label28:
        r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;

     label29:
        $r12 := @caughtexception;

        goto label28;

     label30:
        $r13 := @caughtexception;

        goto label28;

        catch java.lang.NoSuchMethodException from label01 to label02 with label30;
        catch java.lang.NoSuchMethodException from label03 to label04 with label30;
        catch java.lang.NoSuchMethodException from label05 to label06 with label30;
        catch java.lang.NoSuchMethodException from label08 to label09 with label30;
        catch java.lang.NoSuchMethodException from label10 to label11 with label30;
        catch java.lang.NoSuchMethodException from label12 to label13 with label30;
        catch java.lang.NoSuchMethodException from label14 to label15 with label30;
        catch java.lang.NoSuchMethodException from label16 to label17 with label30;
        catch java.lang.NoSuchMethodException from label18 to label19 with label30;
        catch java.lang.NoSuchMethodException from label20 to label21 with label30;
        catch java.lang.NoSuchMethodException from label23 to label24 with label30;
        catch java.lang.NoSuchMethodException from label25 to label26 with label30;
        catch java.lang.IllegalAccessException from label01 to label02 with label29;
        catch java.lang.IllegalAccessException from label03 to label04 with label29;
        catch java.lang.IllegalAccessException from label05 to label06 with label29;
        catch java.lang.IllegalAccessException from label08 to label09 with label29;
        catch java.lang.IllegalAccessException from label10 to label11 with label29;
        catch java.lang.IllegalAccessException from label12 to label13 with label29;
        catch java.lang.IllegalAccessException from label14 to label15 with label29;
        catch java.lang.IllegalAccessException from label16 to label17 with label29;
        catch java.lang.IllegalAccessException from label18 to label19 with label29;
        catch java.lang.IllegalAccessException from label20 to label21 with label29;
        catch java.lang.IllegalAccessException from label23 to label24 with label29;
        catch java.lang.IllegalAccessException from label25 to label26 with label29;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label27;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label27;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label27;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label27;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label27;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label27;
        catch java.lang.reflect.InvocationTargetException from label14 to label15 with label27;
        catch java.lang.reflect.InvocationTargetException from label16 to label17 with label27;
        catch java.lang.reflect.InvocationTargetException from label18 to label19 with label27;
        catch java.lang.reflect.InvocationTargetException from label20 to label21 with label27;
        catch java.lang.reflect.InvocationTargetException from label23 to label24 with label27;
        catch java.lang.reflect.InvocationTargetException from label25 to label26 with label27;
    }
    private static java.lang.String collectCapabilitiesForType(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object $r0, $r5, $r7;
        java.lang.String $r1, $r11;
        java.lang.StringBuilder r2, $r9;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.reflect.Field $r6;
        int[] $r8;
        int $i0, $i1, $i2, $i3;
        android.util.SparseArray $r10;
        org.acra.collector.MediaCodecListCollector$CodecType $r12;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getCapabilitiesForTypeMethod>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r4);

        $r6 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field colorFormatsField>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (int[]) $r7;

        $i0 = lengthof $r8;

        if $i0 <= 0 goto label04;

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" color formats:");

        $i0 = 0;

     label01:
        $i1 = lengthof $r8;

        if $i0 >= $i1 goto label03;

        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mColorFormatValues>;

        $i1 = $r8[$i0];

        $r7 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r11 = (java.lang.String) $r7;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $i1 = lengthof $r8;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label02;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label02:
        $i0 = $i0 + 1;

        goto label01;

     label03:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label04:
        $r6 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field profileLevelsField>;

        $r5 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r5);

        $r4 = (java.lang.Object[]) $r5;

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label14;

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" profile levels:");

        $i0 = 0;

     label05:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label13;

        $r12 = staticinvoke <org.acra.collector.MediaCodecListCollector: org.acra.collector.MediaCodecListCollector$CodecType identifyCodecType(java.lang.Object)>($r0);

        $r6 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field profileField>;

        $r5 = $r4[$i0];

        $i1 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>($r5);

        $r6 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Field levelField>;

        $r5 = $r4[$i0];

        $i2 = virtualinvoke $r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>($r5);

        if $r12 != null goto label06;

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

     label06:
        $r8 = <org.acra.collector.MediaCodecListCollector$1: int[] $SwitchMap$org$acra$collector$MediaCodecListCollector$CodecType>;

        $i3 = virtualinvoke $r12.<org.acra.collector.MediaCodecListCollector$CodecType: int ordinal()>();

        $i3 = $r8[$i3];

        lookupswitch($i3)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label12;
            default: goto label07;
        };

     label07:
        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label08;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label08:
        $i0 = $i0 + 1;

        goto label05;

     label09:
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAVCProfileValues>;

        $r5 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r1 = (java.lang.String) $r5;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAVCLevelValues>;

        $r5 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        $r1 = (java.lang.String) $r5;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label07;

     label10:
        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mH263ProfileValues>;

        $r5 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r1 = (java.lang.String) $r5;

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mH263LevelValues>;

        $r5 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        $r1 = (java.lang.String) $r5;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label07;

     label11:
        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mMPEG4ProfileValues>;

        $r5 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r1 = (java.lang.String) $r5;

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mMPEG4LevelValues>;

        $r5 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        $r1 = (java.lang.String) $r5;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label07;

     label12:
        $r10 = <org.acra.collector.MediaCodecListCollector: android.util.SparseArray mAACProfileValues>;

        $r5 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r1 = (java.lang.String) $r5;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label07;

     label13:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label14:
        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    private static org.acra.collector.MediaCodecListCollector$CodecType identifyCodecType(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object $r0;
        java.lang.reflect.Method $r1;
        java.lang.Object[] $r2;
        java.lang.String r3, r5;
        java.lang.String[] r4;
        int i0, i1;
        boolean $z0;
        org.acra.collector.MediaCodecListCollector$CodecType r6;

        $r0 := @parameter0: java.lang.Object;

        $r1 = <org.acra.collector.MediaCodecListCollector: java.lang.reflect.Method getNameMethod>;

        $r2 = newarray (java.lang.Object)[0];

        $r0 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r2);

        r3 = (java.lang.String) $r0;

        r4 = <org.acra.collector.MediaCodecListCollector: java.lang.String[] AVC_TYPES>;

        i0 = lengthof r4;

        i1 = 0;

     label01:
        if i1 >= i0 goto label03;

        r5 = r4[i1];

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(r5);

        if $z0 == 0 goto label02;

        r6 = <org.acra.collector.MediaCodecListCollector$CodecType: org.acra.collector.MediaCodecListCollector$CodecType AVC>;

        return r6;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        r4 = <org.acra.collector.MediaCodecListCollector: java.lang.String[] H263_TYPES>;

        i0 = lengthof r4;

        i1 = 0;

     label04:
        if i1 >= i0 goto label06;

        r5 = r4[i1];

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(r5);

        if $z0 == 0 goto label05;

        r6 = <org.acra.collector.MediaCodecListCollector$CodecType: org.acra.collector.MediaCodecListCollector$CodecType H263>;

        return r6;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        r4 = <org.acra.collector.MediaCodecListCollector: java.lang.String[] MPEG4_TYPES>;

        i0 = lengthof r4;

        i1 = 0;

     label07:
        if i1 >= i0 goto label09;

        r5 = r4[i1];

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(r5);

        if $z0 == 0 goto label08;

        r6 = <org.acra.collector.MediaCodecListCollector$CodecType: org.acra.collector.MediaCodecListCollector$CodecType MPEG4>;

        return r6;

     label08:
        i1 = i1 + 1;

        goto label07;

     label09:
        r4 = <org.acra.collector.MediaCodecListCollector: java.lang.String[] AAC_TYPES>;

        i0 = lengthof r4;

        i1 = 0;

     label10:
        if i1 >= i0 goto label12;

        r5 = r4[i1];

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(r5);

        if $z0 == 0 goto label11;

        r6 = <org.acra.collector.MediaCodecListCollector$CodecType: org.acra.collector.MediaCodecListCollector$CodecType AAC>;

        return r6;

     label11:
        i1 = i1 + 1;

        goto label10;

     label12:
        return null;
    }
