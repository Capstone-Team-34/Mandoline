org.acra.util.TlsSniSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.LayeredSocketFactory
private static final java.util.List ALLOWED_CIPHERS
private static final java.lang.String TAG
private static final int VERSION_CODES_JELLY_BEAN_MR1
private static final int VERSION_CODES_LOLLIPOP
private static final javax.net.ssl.HostnameVerifier hostnameVerifier
private final android.net.SSLCertificateSocketFactory sslSocketFactory
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.apache.http.conn.ssl.BrowserCompatHostnameVerifier $r2;
        java.lang.String[] $r3;
        java.util.List $r4;

        $r0 = class "Lorg/acra/util/TlsSniSocketFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <org.acra.util.TlsSniSocketFactory: java.lang.String TAG> = $r1;

        $r2 = new org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;

        specialinvoke $r2.<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>();

        <org.acra.util.TlsSniSocketFactory: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r2;

        $r3 = newarray (java.lang.String)[14];

        $r3[0] = "TLS_RSA_WITH_AES_256_GCM_SHA384";

        $r3[1] = "TLS_RSA_WITH_AES_128_GCM_SHA256";

        $r3[2] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";

        $r3[3] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";

        $r3[4] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";

        $r3[5] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";

        $r3[6] = "TLS_ECHDE_RSA_WITH_AES_128_GCM_SHA256";

        $r3[7] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";

        $r3[8] = "TLS_RSA_WITH_AES_128_CBC_SHA";

        $r3[9] = "TLS_RSA_WITH_AES_256_CBC_SHA";

        $r3[10] = "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA";

        $r3[11] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";

        $r3[12] = "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA";

        $r3[13] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        <org.acra.util.TlsSniSocketFactory: java.util.List ALLOWED_CIPHERS> = $r4;

        return;
    }
    public void <init>()
    {
        org.acra.util.TlsSniSocketFactory r0;
        javax.net.SocketFactory $r1;
        android.net.SSLCertificateSocketFactory $r2;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>(0);

        $r2 = (android.net.SSLCertificateSocketFactory) $r1;

        r0.<org.acra.util.TlsSniSocketFactory: android.net.SSLCertificateSocketFactory sslSocketFactory> = $r2;

        return;
    }
    private void establishAndVerify(javax.net.ssl.SSLSocket, java.lang.String) throws java.io.IOException
    {
        org.acra.util.TlsSniSocketFactory r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2, $r8;
        javax.net.ssl.SSLSession $r3;
        javax.net.ssl.HostnameVerifier $r4;
        boolean $z0;
        javax.net.ssl.SSLPeerUnverifiedException $r5;
        org.acra.log.ACRALog $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.acra.util.TlsSniSocketFactory: void setTlsParameters(javax.net.ssl.SSLSocket)>($r1);

        specialinvoke r0.<org.acra.util.TlsSniSocketFactory: void setSniHostname(javax.net.ssl.SSLSocket,java.lang.String)>($r1, $r2);

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r4 = <org.acra.util.TlsSniSocketFactory: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        $z0 = interfaceinvoke $r4.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>($r2, $r3);

        if $z0 != 0 goto label1;

        $r5 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r5.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label1:
        $r6 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r2 = <org.acra.util.TlsSniSocketFactory: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Established ");

        $r8 = interfaceinvoke $r3.<javax.net.ssl.SSLSession: java.lang.String getProtocol()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" connection with ");

        $r8 = interfaceinvoke $r3.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using ");

        $r8 = interfaceinvoke $r3.<javax.net.ssl.SSLSession: java.lang.String getCipherSuite()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.acra.log.ACRALog: int i(java.lang.String,java.lang.String)>($r2, $r8);

        return;
    }
    private void setSniHostname(javax.net.ssl.SSLSocket, java.lang.String)
    {
        org.acra.util.TlsSniSocketFactory r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2, $r5, $r7;
        java.lang.Exception r3;
        int $i0;
        org.acra.log.ACRALog $r4;
        java.lang.StringBuilder $r6;
        android.net.SSLCertificateSocketFactory $r8;
        java.lang.Class $r9;
        java.lang.Class[] $r10;
        java.lang.reflect.Method $r11;
        java.lang.Object[] $r12;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label1;

        $r4 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r5 = <org.acra.util.TlsSniSocketFactory: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using documented SNI with host name ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.acra.log.ACRALog: int d(java.lang.String,java.lang.String)>($r5, $r7);

        $r8 = r0.<org.acra.util.TlsSniSocketFactory: android.net.SSLCertificateSocketFactory sslSocketFactory>;

        virtualinvoke $r8.<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)>($r1, $r2);

        return;

     label1:
        $r4 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r5 = <org.acra.util.TlsSniSocketFactory: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No documented SNI support on Android <4.2, trying reflection method with host name ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.acra.log.ACRALog: int d(java.lang.String,java.lang.String)>($r5, $r7);

     label2:
        $r9 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = newarray (java.lang.Class)[1];

        $r10[0] = class "Ljava/lang/String;";

        $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setHostname", $r10);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = $r2;

        virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r12);

     label3:
        return;

     label4:
        r3 := @caughtexception;

        $r4 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r2 = <org.acra.util.TlsSniSocketFactory: java.lang.String TAG>;

        interfaceinvoke $r4.<org.acra.log.ACRALog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, "SNI not usable", r3);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
    private void setTlsParameters(javax.net.ssl.SSLSocket)
    {
        org.acra.util.TlsSniSocketFactory r0;
        javax.net.ssl.SSLSocket $r1;
        int i0, i1;
        java.util.HashSet r2;
        java.lang.String r3, $r6;
        java.util.LinkedList r4;
        java.lang.String[] $r5;
        boolean $z0;
        org.acra.log.ACRALog $r7;
        java.lang.StringBuilder $r8;
        java.lang.Object[] $r9;
        java.util.List $r10, $r11;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        r4 = new java.util.LinkedList;

        specialinvoke r4.<java.util.LinkedList: void <init>()>();

        $r5 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>();

        i0 = lengthof $r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = $r5[i1];

        $r6 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("SSL");

        if $z0 != 0 goto label2;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r7 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        r3 = <org.acra.util.TlsSniSocketFactory: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting allowed TLS protocols: ");

        $r6 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.acra.log.ACRALog: int v(java.lang.String,java.lang.String)>(r3, $r6);

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[i0];

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r5 = (java.lang.String[]) $r9;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r5);

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 >= 21 goto label4;

        $r5 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        r2 = new java.util.HashSet;

        $r11 = <org.acra.util.TlsSniSocketFactory: java.util.List ALLOWED_CIPHERS>;

        specialinvoke r2.<java.util.HashSet: void <init>(java.util.Collection)>($r11);

        interfaceinvoke r2.<java.util.Set: boolean retainAll(java.util.Collection)>($r10);

        $r5 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

        $r7 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        r3 = <org.acra.util.TlsSniSocketFactory: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting allowed TLS ciphers: ");

        $r6 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.acra.log.ACRALog: int v(java.lang.String,java.lang.String)>(r3, $r6);

        i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        $r5 = newarray (java.lang.String)[i0];

        $r9 = interfaceinvoke r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r5 = (java.lang.String[]) $r9;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>($r5);

     label4:
        return;
    }
    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.acra.util.TlsSniSocketFactory r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.net.InetAddress $r3;
        org.apache.http.params.HttpParams $r4;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.net.InetAddress;

        $i1 := @parameter4: int;

        $r4 := @parameter5: org.apache.http.params.HttpParams;

        return null;
    }
    public java.net.Socket createSocket() throws java.io.IOException
    {
        org.acra.util.TlsSniSocketFactory r0;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        return null;
    }
    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException
    {
        org.acra.util.TlsSniSocketFactory r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        android.net.SSLCertificateSocketFactory $r3;
        java.net.InetAddress $r4;
        javax.net.ssl.SSLSocket r5;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<java.net.Socket: void close()>();

     label1:
        $r3 = r0.<org.acra.util.TlsSniSocketFactory: android.net.SSLCertificateSocketFactory sslSocketFactory>;

        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>($r4, $i0);

        r5 = (javax.net.ssl.SSLSocket) $r1;

        specialinvoke r0.<org.acra.util.TlsSniSocketFactory: void establishAndVerify(javax.net.ssl.SSLSocket,java.lang.String)>(r5, $r2);

        return r5;
    }
    public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.acra.util.TlsSniSocketFactory r0;
        java.net.Socket $r1;
        boolean $z0;

        r0 := @this: org.acra.util.TlsSniSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isConnected()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
