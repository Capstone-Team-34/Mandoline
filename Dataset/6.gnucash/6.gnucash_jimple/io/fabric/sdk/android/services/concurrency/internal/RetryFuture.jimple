io.fabric.sdk.android.services.concurrency.internal.RetryFuture extends io.fabric.sdk.android.services.concurrency.internal.AbstractFuture implements java.lang.Runnable
private final io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor executor
io.fabric.sdk.android.services.concurrency.internal.RetryState retryState
private final java.util.concurrent.atomic.AtomicReference runner
private final java.util.concurrent.Callable task
    void <init>(java.util.concurrent.Callable, io.fabric.sdk.android.services.concurrency.internal.RetryState, io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor)
    {
        io.fabric.sdk.android.services.concurrency.internal.RetryFuture r0;
        java.util.concurrent.Callable r1;
        io.fabric.sdk.android.services.concurrency.internal.RetryState $r2;
        io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor $r3;
        java.util.concurrent.atomic.AtomicReference $r4;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.RetryFuture;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 := @parameter1: io.fabric.sdk.android.services.concurrency.internal.RetryState;

        $r3 := @parameter2: io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor;

        specialinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.AbstractFuture: void <init>()>();

        r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.Callable task> = r1;

        r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryState retryState> = $r2;

        r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor executor> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.atomic.AtomicReference runner> = $r4;

        return;
    }
    private io.fabric.sdk.android.services.concurrency.internal.Backoff getBackoff()
    {
        io.fabric.sdk.android.services.concurrency.internal.RetryFuture r0;
        io.fabric.sdk.android.services.concurrency.internal.Backoff $r1;
        io.fabric.sdk.android.services.concurrency.internal.RetryState $r2;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.RetryFuture;

        $r2 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryState retryState>;

        $r1 = virtualinvoke $r2.<io.fabric.sdk.android.services.concurrency.internal.RetryState: io.fabric.sdk.android.services.concurrency.internal.Backoff getBackoff()>();

        return $r1;
    }
    private int getRetryCount()
    {
        io.fabric.sdk.android.services.concurrency.internal.RetryFuture r0;
        int $i0;
        io.fabric.sdk.android.services.concurrency.internal.RetryState $r1;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.RetryFuture;

        $r1 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryState retryState>;

        $i0 = virtualinvoke $r1.<io.fabric.sdk.android.services.concurrency.internal.RetryState: int getRetryCount()>();

        return $i0;
    }
    private io.fabric.sdk.android.services.concurrency.internal.RetryPolicy getRetryPolicy()
    {
        io.fabric.sdk.android.services.concurrency.internal.RetryFuture r0;
        io.fabric.sdk.android.services.concurrency.internal.RetryPolicy $r1;
        io.fabric.sdk.android.services.concurrency.internal.RetryState $r2;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.RetryFuture;

        $r2 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryState retryState>;

        $r1 = virtualinvoke $r2.<io.fabric.sdk.android.services.concurrency.internal.RetryState: io.fabric.sdk.android.services.concurrency.internal.RetryPolicy getRetryPolicy()>();

        return $r1;
    }
    protected void interruptTask()
    {
        io.fabric.sdk.android.services.concurrency.internal.RetryFuture r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        java.lang.Thread r3;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.RetryFuture;

        $r1 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.atomic.AtomicReference runner>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r3 = (java.lang.Thread) $r2;

        if r3 == null goto label1;

        virtualinvoke r3.<java.lang.Thread: void interrupt()>();

     label1:
        return;
    }
    public void run()
    {
        io.fabric.sdk.android.services.concurrency.internal.RetryFuture r0;
        java.lang.Throwable r1, $r11;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Thread $r3;
        java.util.concurrent.Callable $r4;
        java.lang.Object $r5;
        io.fabric.sdk.android.services.concurrency.internal.RetryPolicy $r6;
        int $i0;
        io.fabric.sdk.android.services.concurrency.internal.Backoff $r7;
        long $l1;
        io.fabric.sdk.android.services.concurrency.internal.RetryState $r8;
        io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor $r9;
        java.util.concurrent.TimeUnit $r10;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.RetryFuture;

        $z0 = virtualinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: boolean isDone()>();

        if $z0 != 0 goto label11;

        $r2 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.atomic.AtomicReference runner>;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r3);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r4 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.Callable task>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.Callable: java.lang.Object call()>();

        virtualinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: boolean set(java.lang.Object)>($r5);

     label02:
        $r2 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.atomic.AtomicReference runner>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        return;

     label03:
        r1 := @caughtexception;

     label04:
        $r6 = specialinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryPolicy getRetryPolicy()>();

        $i0 = specialinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: int getRetryCount()>();

        $z0 = interfaceinvoke $r6.<io.fabric.sdk.android.services.concurrency.internal.RetryPolicy: boolean shouldRetry(int,java.lang.Throwable)>($i0, r1);

     label05:
        if $z0 == 0 goto label08;

     label06:
        $r7 = specialinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.Backoff getBackoff()>();

        $i0 = specialinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: int getRetryCount()>();

        $l1 = interfaceinvoke $r7.<io.fabric.sdk.android.services.concurrency.internal.Backoff: long getDelayMillis(int)>($i0);

        $r8 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryState retryState>;

        $r8 = virtualinvoke $r8.<io.fabric.sdk.android.services.concurrency.internal.RetryState: io.fabric.sdk.android.services.concurrency.internal.RetryState nextRetryState()>();

        r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryState retryState> = $r8;

        $r9 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor executor>;

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r9.<io.fabric.sdk.android.services.concurrency.internal.RetryThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r0, $l1, $r10);

     label07:
        $r2 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.atomic.AtomicReference runner>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        return;

     label08:
        virtualinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: boolean setException(java.lang.Throwable)>(r1);

     label09:
        goto label07;

     label10:
        $r11 := @caughtexception;

        $r2 = r0.<io.fabric.sdk.android.services.concurrency.internal.RetryFuture: java.util.concurrent.atomic.AtomicReference runner>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        throw $r11;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
