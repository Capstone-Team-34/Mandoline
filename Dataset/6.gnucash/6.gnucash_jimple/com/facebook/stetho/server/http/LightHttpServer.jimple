com.facebook.stetho.server.http.LightHttpServer extends java.lang.Object
private static final java.lang.String TAG
private final com.facebook.stetho.server.http.HandlerRegistry mHandlerRegistry
    public void <init>(com.facebook.stetho.server.http.HandlerRegistry)
    {
        com.facebook.stetho.server.http.LightHttpServer r0;
        com.facebook.stetho.server.http.HandlerRegistry $r1;

        r0 := @this: com.facebook.stetho.server.http.LightHttpServer;

        $r1 := @parameter0: com.facebook.stetho.server.http.HandlerRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.facebook.stetho.server.http.LightHttpServer: com.facebook.stetho.server.http.HandlerRegistry mHandlerRegistry> = $r1;

        return;
    }
    private boolean dispatchToHandler(com.facebook.stetho.server.SocketLike, com.facebook.stetho.server.http.LightHttpRequest, com.facebook.stetho.server.http.LightHttpResponse) throws java.io.IOException
    {
        com.facebook.stetho.server.http.LightHttpServer r0;
        com.facebook.stetho.server.SocketLike $r1;
        com.facebook.stetho.server.http.LightHttpRequest $r2;
        com.facebook.stetho.server.http.LightHttpResponse $r3;
        java.lang.RuntimeException r4;
        java.io.StringWriter r5;
        java.io.PrintWriter r6;
        com.facebook.stetho.server.http.HandlerRegistry $r7;
        android.net.Uri $r8;
        java.lang.String $r9;
        com.facebook.stetho.server.http.HttpHandler $r10;
        com.facebook.stetho.server.http.LightHttpBody $r11;
        boolean $z0;
        java.lang.Throwable $r12;

        r0 := @this: com.facebook.stetho.server.http.LightHttpServer;

        $r1 := @parameter0: com.facebook.stetho.server.SocketLike;

        $r2 := @parameter1: com.facebook.stetho.server.http.LightHttpRequest;

        $r3 := @parameter2: com.facebook.stetho.server.http.LightHttpResponse;

        $r7 = r0.<com.facebook.stetho.server.http.LightHttpServer: com.facebook.stetho.server.http.HandlerRegistry mHandlerRegistry>;

        $r8 = $r2.<com.facebook.stetho.server.http.LightHttpRequest: android.net.Uri uri>;

        $r9 = virtualinvoke $r8.<android.net.Uri: java.lang.String getPath()>();

        $r10 = virtualinvoke $r7.<com.facebook.stetho.server.http.HandlerRegistry: com.facebook.stetho.server.http.HttpHandler lookup(java.lang.String)>($r9);

        if $r10 != null goto label1;

        $r3.<com.facebook.stetho.server.http.LightHttpResponse: int code> = 404;

        $r3.<com.facebook.stetho.server.http.LightHttpResponse: java.lang.String reasonPhrase> = "Not found";

        $r11 = staticinvoke <com.facebook.stetho.server.http.LightHttpBody: com.facebook.stetho.server.http.LightHttpBody create(java.lang.String,java.lang.String)>("No handler found\n", "text/plain");

        $r3.<com.facebook.stetho.server.http.LightHttpResponse: com.facebook.stetho.server.http.LightHttpBody body> = $r11;

        return 1;

     label1:
        $z0 = interfaceinvoke $r10.<com.facebook.stetho.server.http.HttpHandler: boolean handleRequest(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>($r1, $r2, $r3);

     label2:
        return $z0;

     label3:
        r4 := @caughtexception;

        $r3.<com.facebook.stetho.server.http.LightHttpResponse: int code> = 500;

        $r3.<com.facebook.stetho.server.http.LightHttpResponse: java.lang.String reasonPhrase> = "Internal Server Error";

        r5 = new java.io.StringWriter;

        specialinvoke r5.<java.io.StringWriter: void <init>()>();

        r6 = new java.io.PrintWriter;

        specialinvoke r6.<java.io.PrintWriter: void <init>(java.io.Writer)>(r5);

     label4:
        virtualinvoke r4.<java.lang.RuntimeException: void printStackTrace(java.io.PrintWriter)>(r6);

     label5:
        virtualinvoke r6.<java.io.PrintWriter: void close()>();

        $r9 = virtualinvoke r5.<java.io.StringWriter: java.lang.String toString()>();

        $r11 = staticinvoke <com.facebook.stetho.server.http.LightHttpBody: com.facebook.stetho.server.http.LightHttpBody create(java.lang.String,java.lang.String)>($r9, "text/plain");

        $r3.<com.facebook.stetho.server.http.LightHttpResponse: com.facebook.stetho.server.http.LightHttpBody body> = $r11;

        return 1;

     label6:
        $r12 := @caughtexception;

        virtualinvoke r6.<java.io.PrintWriter: void close()>();

        throw $r12;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    private static void readHeaders(com.facebook.stetho.server.http.LightHttpMessage, com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader) throws java.io.IOException
    {
        com.facebook.stetho.server.http.LightHttpMessage $r0;
        com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader $r1;
        java.lang.String r2, r3;
        java.io.EOFException $r4;
        boolean $z0;
        java.lang.String[] $r5;
        int $i0;
        java.io.IOException $r6;
        java.lang.StringBuilder $r7;
        java.util.ArrayList $r8;

        $r0 := @parameter0: com.facebook.stetho.server.http.LightHttpMessage;

        $r1 := @parameter1: com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader;

     label1:
        r2 = virtualinvoke $r1.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader: java.lang.String readLine()>();

        if r2 != null goto label2;

        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;

     label2:
        r3 = "";

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(": ", 2);

        $i0 = lengthof $r5;

        if $i0 == 2 goto label4;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed header: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>(r2);

        throw $r6;

     label4:
        r2 = $r5[0];

        r3 = $r5[1];

        $r8 = $r0.<com.facebook.stetho.server.http.LightHttpMessage: java.util.ArrayList headerNames>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r8 = $r0.<com.facebook.stetho.server.http.LightHttpMessage: java.util.ArrayList headerValues>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label1;
    }
    private static com.facebook.stetho.server.http.LightHttpRequest readRequestMessage(com.facebook.stetho.server.http.LightHttpRequest, com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader) throws java.io.IOException
    {
        com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader $r0;
        com.facebook.stetho.server.http.LightHttpRequest r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        int $i0;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5;
        android.net.Uri $r6;

        r1 := @parameter0: com.facebook.stetho.server.http.LightHttpRequest;

        $r0 := @parameter1: com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader;

        virtualinvoke r1.<com.facebook.stetho.server.http.LightHttpRequest: void reset()>();

        $r2 = virtualinvoke $r0.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader: java.lang.String readLine()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(" ", 3);

        $i0 = lengthof $r3;

        if $i0 == 3 goto label2;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r4;

     label2:
        $r2 = $r3[0];

        r1.<com.facebook.stetho.server.http.LightHttpRequest: java.lang.String method> = $r2;

        $r2 = $r3[1];

        $r6 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r2);

        r1.<com.facebook.stetho.server.http.LightHttpRequest: android.net.Uri uri> = $r6;

        $r2 = $r3[2];

        r1.<com.facebook.stetho.server.http.LightHttpRequest: java.lang.String protocol> = $r2;

        staticinvoke <com.facebook.stetho.server.http.LightHttpServer: void readHeaders(com.facebook.stetho.server.http.LightHttpMessage,com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader)>(r1, $r0);

        return r1;
    }
    private static void writeFullResponse(com.facebook.stetho.server.http.LightHttpResponse, com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter, java.io.OutputStream) throws java.io.IOException
    {
        com.facebook.stetho.server.http.LightHttpResponse $r0;
        com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter $r1;
        java.io.OutputStream $r2;
        com.facebook.stetho.server.http.LightHttpBody $r3;

        $r0 := @parameter0: com.facebook.stetho.server.http.LightHttpResponse;

        $r1 := @parameter1: com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter;

        $r2 := @parameter2: java.io.OutputStream;

        virtualinvoke $r0.<com.facebook.stetho.server.http.LightHttpResponse: void prepare()>();

        staticinvoke <com.facebook.stetho.server.http.LightHttpServer: void writeResponseMessage(com.facebook.stetho.server.http.LightHttpResponse,com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter)>($r0, $r1);

        $r3 = $r0.<com.facebook.stetho.server.http.LightHttpResponse: com.facebook.stetho.server.http.LightHttpBody body>;

        if $r3 == null goto label1;

        $r3 = $r0.<com.facebook.stetho.server.http.LightHttpResponse: com.facebook.stetho.server.http.LightHttpBody body>;

        virtualinvoke $r3.<com.facebook.stetho.server.http.LightHttpBody: void writeTo(java.io.OutputStream)>($r2);

     label1:
        return;
    }
    public static void writeResponseMessage(com.facebook.stetho.server.http.LightHttpResponse, com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter) throws java.io.IOException
    {
        com.facebook.stetho.server.http.LightHttpResponse $r0;
        com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter $r1;
        java.lang.StringBuilder $r2;
        int $i0, $i1;
        java.lang.String $r3, r6;
        java.util.ArrayList $r4;
        java.lang.Object $r5;

        $r0 := @parameter0: com.facebook.stetho.server.http.LightHttpResponse;

        $r1 := @parameter1: com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HTTP/1.1 ");

        $i0 = $r0.<com.facebook.stetho.server.http.LightHttpResponse: int code>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r3 = $r0.<com.facebook.stetho.server.http.LightHttpResponse: java.lang.String reasonPhrase>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void writeLine(java.lang.String)>($r3);

        $i0 = 0;

        $r4 = $r0.<com.facebook.stetho.server.http.LightHttpResponse: java.util.ArrayList headerNames>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label1:
        if $i0 >= $i1 goto label2;

        $r4 = $r0.<com.facebook.stetho.server.http.LightHttpResponse: java.util.ArrayList headerNames>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r5;

        $r4 = $r0.<com.facebook.stetho.server.http.LightHttpResponse: java.util.ArrayList headerValues>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        r6 = (java.lang.String) $r5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void writeLine(java.lang.String)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke $r1.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void writeLine()>();

        virtualinvoke $r1.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void flush()>();

        return;
    }
    public void serve(com.facebook.stetho.server.SocketLike) throws java.io.IOException
    {
        com.facebook.stetho.server.http.LightHttpServer r0;
        com.facebook.stetho.server.SocketLike $r1, r2;
        com.facebook.stetho.server.LeakyBufferedInputStream r3;
        com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader r4;
        com.facebook.stetho.server.http.LightHttpRequest r5, $r11;
        com.facebook.stetho.server.http.LightHttpResponse r6;
        com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter r7;
        java.io.InputStream $r8;
        java.io.OutputStream $r9;
        java.io.BufferedOutputStream $r10;
        boolean $z0;

        r0 := @this: com.facebook.stetho.server.http.LightHttpServer;

        $r1 := @parameter0: com.facebook.stetho.server.SocketLike;

        r3 = new com.facebook.stetho.server.LeakyBufferedInputStream;

        $r8 = virtualinvoke $r1.<com.facebook.stetho.server.SocketLike: java.io.InputStream getInput()>();

        specialinvoke r3.<com.facebook.stetho.server.LeakyBufferedInputStream: void <init>(java.io.InputStream,int)>($r8, 1024);

        $r9 = virtualinvoke $r1.<com.facebook.stetho.server.SocketLike: java.io.OutputStream getOutput()>();

        r4 = new com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader;

        specialinvoke r4.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader: void <init>(java.io.BufferedInputStream)>(r3);

        r7 = new com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter;

        $r10 = new java.io.BufferedOutputStream;

        specialinvoke $r10.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r9);

        specialinvoke r7.<com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter: void <init>(java.io.BufferedOutputStream)>($r10);

        r2 = new com.facebook.stetho.server.SocketLike;

        specialinvoke r2.<com.facebook.stetho.server.SocketLike: void <init>(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.LeakyBufferedInputStream)>($r1, r3);

        r5 = new com.facebook.stetho.server.http.LightHttpRequest;

        specialinvoke r5.<com.facebook.stetho.server.http.LightHttpRequest: void <init>()>();

        r6 = new com.facebook.stetho.server.http.LightHttpResponse;

        specialinvoke r6.<com.facebook.stetho.server.http.LightHttpResponse: void <init>()>();

     label1:
        $r11 = staticinvoke <com.facebook.stetho.server.http.LightHttpServer: com.facebook.stetho.server.http.LightHttpRequest readRequestMessage(com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpServer$HttpMessageReader)>(r5, r4);

        if $r11 == null goto label3;

        virtualinvoke r6.<com.facebook.stetho.server.http.LightHttpResponse: void reset()>();

        $z0 = specialinvoke r0.<com.facebook.stetho.server.http.LightHttpServer: boolean dispatchToHandler(com.facebook.stetho.server.SocketLike,com.facebook.stetho.server.http.LightHttpRequest,com.facebook.stetho.server.http.LightHttpResponse)>(r2, $r11, r6);

        if $z0 != 0 goto label2;

        return;

     label2:
        staticinvoke <com.facebook.stetho.server.http.LightHttpServer: void writeFullResponse(com.facebook.stetho.server.http.LightHttpResponse,com.facebook.stetho.server.http.LightHttpServer$HttpMessageWriter,java.io.OutputStream)>(r6, r7, $r9);

        goto label1;

     label3:
        return;
    }
