com.facebook.stetho.json.ObjectMapper extends java.lang.Object
private final java.util.Map mJsonValueMethodCache
    public void <init>()
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.util.IdentityHashMap $r1;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.IdentityHashMap;

        specialinvoke $r1.<java.util.IdentityHashMap: void <init>()>();

        r0.<com.facebook.stetho.json.ObjectMapper: java.util.Map mJsonValueMethodCache> = $r1;

        return;
    }
    private java.lang.Object _convertFromJSONObject(org.json.JSONObject, java.lang.Class) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException, org.json.JSONException
    {
        com.facebook.stetho.json.ObjectMapper r0;
        org.json.JSONObject $r1;
        java.lang.Class r2;
        java.lang.IllegalArgumentException r3, $r11;
        java.lang.reflect.Field r4;
        java.lang.reflect.Constructor $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7, $r10;
        java.lang.reflect.Field[] $r8;
        int i0, $i1;
        java.lang.String $r9;
        java.lang.StringBuilder $r12;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        $r1 := @parameter0: org.json.JSONObject;

        r2 := @parameter1: java.lang.Class;

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(null);

        virtualinvoke $r5.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r8;

        if i0 >= $i1 goto label5;

        r4 = $r8[i0];

        $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke $r1.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r9);

        $r10 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Object getValueForField(java.lang.reflect.Field,java.lang.Object)>(r4, $r10);

     label2:
        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r7, $r10);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        r3 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class: ");

        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field: ");

        $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type ");

        r2 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r3);

        throw $r11;

     label5:
        return $r7;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }
    private org.json.JSONObject _convertToJSONObject(java.lang.Object) throws org.json.JSONException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.Object $r1, $r8, r9, $r11;
        org.json.JSONObject r2;
        java.lang.Class $r3;
        java.lang.reflect.Field[] $r4;
        int i0, $i1;
        java.lang.reflect.Field $r5;
        java.lang.'annotation'.Annotation $r6;
        com.facebook.stetho.json.'annotation'.JsonProperty r7;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        $r1 := @parameter0: java.lang.Object;

        r2 = new org.json.JSONObject;

        specialinvoke r2.<org.json.JSONObject: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label6;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/facebook/stetho/json/annotation/JsonProperty;");

        r7 = (com.facebook.stetho.json.'annotation'.JsonProperty) $r6;

        if r7 == null goto label4;

        $r5 = $r4[i0];

        $r8 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

        r9 = $r8;

        $r5 = $r4[i0];

        $r3 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r8 == null goto label2;

        $r3 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $r5 = $r4[i0];

        $r10 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = interfaceinvoke r7.<com.facebook.stetho.json.'annotation'.JsonProperty: boolean required()>();

        if $z0 == 0 goto label5;

        if $r8 != null goto label5;

        r9 = <org.json.JSONObject: java.lang.Object NULL>;

     label3:
        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r10, r9);

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        $r11 = <org.json.JSONObject: java.lang.Object NULL>;

        if $r8 == $r11 goto label3;

        $r5 = $r4[i0];

        r9 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Object getJsonValue(java.lang.Object,java.lang.Class,java.lang.reflect.Field)>($r8, $r3, $r5);

        goto label3;

     label6:
        return r2;
    }
    private static boolean canDirectlySerializeClass(java.lang.Class)
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <com.facebook.stetho.json.ObjectMapper: boolean isWrapperOrPrimitiveType(java.lang.Class)>($r0);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private java.util.List convertArrayToList(java.lang.reflect.Field, org.json.JSONArray) throws java.lang.IllegalAccessException, org.json.JSONException
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.reflect.Field $r1;
        org.json.JSONArray $r2;
        java.util.ArrayList r3;
        java.lang.Class $r4, $r5;
        boolean $z0;
        java.lang.reflect.Type $r6;
        java.lang.reflect.ParameterizedType r7;
        java.lang.reflect.Type[] $r8;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        java.lang.Enum $r12;
        java.lang.Object $r13;
        org.json.JSONObject $r14;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        $r1 := @parameter0: java.lang.reflect.Field;

        $r2 := @parameter1: org.json.JSONArray;

        $r4 = class "Ljava/util/List;";

        $r5 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label7;

        $r6 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        r7 = (java.lang.reflect.ParameterizedType) $r6;

        $r8 = interfaceinvoke r7.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r8;

        if $i0 == 1 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only able to handle a single type in a list ");

        $r11 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label1:
        $r6 = $r8[0];

        $r4 = (java.lang.Class) $r6;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label2:
        $i1 = virtualinvoke $r2.<org.json.JSONArray: int length()>();

        if $i0 >= $i1 goto label8;

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label4;

        $r11 = virtualinvoke $r2.<org.json.JSONArray: java.lang.String getString(int)>($i0);

        $r12 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Enum getEnumValue(java.lang.String,java.lang.Class)>($r11, $r4);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $z0 = staticinvoke <com.facebook.stetho.json.ObjectMapper: boolean canDirectlySerializeClass(java.lang.Class)>($r4);

        if $z0 == 0 goto label5;

        $r13 = virtualinvoke $r2.<org.json.JSONArray: java.lang.Object get(int)>($i0);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label3;

     label5:
        $r14 = virtualinvoke $r2.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        if $r14 != null goto label6;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label3;

     label6:
        $r13 = virtualinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>($r14, $r4);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label3;

     label7:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("only know how to deserialize List<?> on field ");

        $r11 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label8:
        return r3;
    }
    private org.json.JSONArray convertListToJsonArray(java.lang.Object) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.Object $r1;
        org.json.JSONArray r2;
        java.util.List r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Class $r5;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        $r1 := @parameter0: java.lang.Object;

        r2 = new org.json.JSONArray;

        specialinvoke r2.<org.json.JSONArray: void <init>()>();

        r3 = (java.util.List) $r1;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r1 == null goto label3;

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Object getJsonValue(java.lang.Object,java.lang.Class,java.lang.reflect.Field)>($r1, $r5, null);

     label2:
        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r1);

        goto label1;

     label3:
        $r1 = null;

        goto label2;

     label4:
        return r2;
    }
    private java.lang.Enum getEnumByMethod(java.lang.String, java.lang.Class, java.lang.reflect.Method)
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.String $r1, $r9;
        java.lang.Class r2;
        java.lang.reflect.Method $r3;
        java.lang.Enum r4;
        java.lang.Exception r5;
        java.lang.Object[] $r6;
        java.lang.Enum[] r7;
        int i0, $i1;
        java.lang.Object $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.reflect.Method;

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r7 = (java.lang.Enum[]) $r6;

        i0 = 0;

     label1:
        $i1 = lengthof r7;

        if i0 >= $i1 goto label8;

        r4 = r7[i0];

     label2:
        $r6 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r6);

     label3:
        if $r8 == null goto label7;

     label4:
        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r1);

     label5:
        if $z0 == 0 goto label7;

        return r4;

     label6:
        r5 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r5);

        throw $r10;

     label7:
        i0 = i0 + 1;

        goto label1;

     label8:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No enum constant ");

        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r10;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }
    private java.lang.Enum getEnumValue(java.lang.String, java.lang.Class)
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.String $r1;
        java.lang.Class r2;
        java.lang.reflect.Method $r3;
        java.lang.Enum $r4;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.reflect.Method getJsonValueMethod(java.lang.Class)>(r2);

        if $r3 == null goto label1;

        $r4 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Enum getEnumByMethod(java.lang.String,java.lang.Class,java.lang.reflect.Method)>($r1, r2, $r3);

        return $r4;

     label1:
        $r4 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(r2, $r1);

        return $r4;
    }
    private java.lang.Object getJsonValue(java.lang.Object, java.lang.Class, java.lang.reflect.Field) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.Class r1, $r4;
        java.lang.reflect.Field $r2;
        java.lang.Object r3;
        boolean $z0;
        org.json.JSONArray $r5;
        java.lang.reflect.Method $r6;
        java.lang.Object[] $r7;
        java.lang.Number $r8;
        double $d0;
        byte $b0;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        r3 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: java.lang.reflect.Field;

        if r3 != null goto label1;

        return null;

     label1:
        $r4 = class "Ljava/util/List;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

        $r5 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: org.json.JSONArray convertListToJsonArray(java.lang.Object)>(r3);

        return $r5;

     label2:
        $r6 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.reflect.Method getJsonValueMethod(java.lang.Class)>(r1);

        if $r6 == null goto label3;

        $r7 = newarray (java.lang.Object)[0];

        r3 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r7);

        return r3;

     label3:
        $z0 = staticinvoke <com.facebook.stetho.json.ObjectMapper: boolean canDirectlySerializeClass(java.lang.Class)>(r1);

        if $z0 != 0 goto label4;

        r3 = virtualinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>(r3, class "Lorg/json/JSONObject;");

        return r3;

     label4:
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Float;");

        if $z0 == 0 goto label8;

     label5:
        $r8 = (java.lang.Number) r3;

        $d0 = virtualinvoke $r8.<java.lang.Number: double doubleValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label6;

        return "NaN";

     label6:
        $b0 = $d0 cmpl #Infinity;

        if $b0 != 0 goto label7;

        return "Infinity";

     label7:
        $b0 = $d0 cmpl #-Infinity;

        if $b0 != 0 goto label8;

        return "-Infinity";

     label8:
        return r3;
    }
    private java.lang.reflect.Method getJsonValueMethod(java.lang.Class)
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.Class r1;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        java.lang.reflect.Method r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.facebook.stetho.json.ObjectMapper: java.util.Map mJsonValueMethodCache>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.facebook.stetho.json.ObjectMapper: java.util.Map mJsonValueMethodCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.reflect.Method) $r4;

        if r5 != null goto label2;

        $r3 = r0.<com.facebook.stetho.json.ObjectMapper: java.util.Map mJsonValueMethodCache>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r6 = staticinvoke <com.facebook.stetho.json.ObjectMapper: java.lang.reflect.Method getJsonValueMethodImpl(java.lang.Class)>(r1);

        r5 = $r6;

        $r3 = r0.<com.facebook.stetho.json.ObjectMapper: java.util.Map mJsonValueMethodCache>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label2:
        exitmonitor $r2;

     label3:
        return r5;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    private static java.lang.reflect.Method getJsonValueMethodImpl(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] $r1;
        int i0, $i1;
        java.lang.reflect.Method $r2;
        java.lang.'annotation'.Annotation $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r2 = $r1[i0];

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/facebook/stetho/json/annotation/JsonValue;");

        if $r3 == null goto label2;

        $r2 = $r1[i0];

        return $r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }
    private java.lang.Object getValueForField(java.lang.reflect.Field, java.lang.Object) throws org.json.JSONException
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.reflect.Field $r1;
        java.lang.IllegalAccessException r2;
        java.lang.Object r3, $r4;
        java.lang.Class $r5, $r6;
        boolean $z0;
        java.lang.String r7;
        java.lang.Enum $r8;
        org.json.JSONArray r9;
        java.util.List $r10;
        java.lang.Number $r11;
        int $i0;
        java.lang.Integer $r12;
        long $l1;
        java.lang.Long $r13;
        double $d0;
        java.lang.Double $r14;
        float $f0;
        java.lang.Float $r15;
        byte $b2;
        java.lang.Byte $r16;
        short $s3;
        java.lang.Short $r17;
        java.lang.IllegalArgumentException $r18;
        java.lang.StringBuilder $r19;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        $r1 := @parameter0: java.lang.reflect.Field;

        r3 := @parameter1: java.lang.Object;

        if r3 == null goto label36;

        $r4 = <org.json.JSONObject: java.lang.Object NULL>;

        if r3 != $r4 goto label01;

        return null;

     label01:
        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

     label02:
        if $r5 == $r6 goto label36;

        $z0 = r3 instanceof org.json.JSONObject;

        if $z0 == 0 goto label05;

     label03:
        $r5 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        r3 = virtualinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>(r3, $r5);

     label04:
        return r3;

     label05:
        $r5 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isEnum()>();

     label06:
        if $z0 == 0 goto label09;

        r7 = (java.lang.String) r3;

     label07:
        $r5 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r5 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Ljava/lang/Enum;");

        $r8 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Enum getEnumValue(java.lang.String,java.lang.Class)>(r7, $r5);

     label08:
        return $r8;

     label09:
        $z0 = r3 instanceof org.json.JSONArray;

        if $z0 == 0 goto label12;

        r9 = (org.json.JSONArray) r3;

     label10:
        $r10 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.util.List convertArrayToList(java.lang.reflect.Field,org.json.JSONArray)>($r1, r9);

     label11:
        return $r10;

     label12:
        $z0 = r3 instanceof java.lang.Number;

        if $z0 == 0 goto label36;

        $r11 = (java.lang.Number) r3;

     label13:
        $r5 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

     label14:
        if $r5 == class "Ljava/lang/Integer;" goto label15;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r5 != $r6 goto label17;

     label15:
        $i0 = virtualinvoke $r11.<java.lang.Number: int intValue()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label16:
        return $r12;

     label17:
        if $r5 == class "Ljava/lang/Long;" goto label18;

        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if $r5 != $r6 goto label20;

     label18:
        $l1 = virtualinvoke $r11.<java.lang.Number: long longValue()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label19:
        return $r13;

     label20:
        if $r5 == class "Ljava/lang/Double;" goto label21;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        if $r5 != $r6 goto label23;

     label21:
        $d0 = virtualinvoke $r11.<java.lang.Number: double doubleValue()>();

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label22:
        return $r14;

     label23:
        if $r5 == class "Ljava/lang/Float;" goto label24;

        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        if $r5 != $r6 goto label26;

     label24:
        $f0 = virtualinvoke $r11.<java.lang.Number: float floatValue()>();

        $r15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

     label25:
        return $r15;

     label26:
        if $r5 == class "Ljava/lang/Byte;" goto label27;

        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r5 != $r6 goto label29;

     label27:
        $b2 = virtualinvoke $r11.<java.lang.Number: byte byteValue()>();

        $r16 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

     label28:
        return $r16;

     label29:
        if $r5 == class "Ljava/lang/Short;" goto label30;

        $r6 = <java.lang.Short: java.lang.Class TYPE>;

        if $r5 != $r6 goto label32;

     label30:
        $s3 = virtualinvoke $r11.<java.lang.Number: short shortValue()>();

        $r17 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s3);

     label31:
        return $r17;

     label32:
        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

     label33:
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not setup to handle class ");

        r7 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r7 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r7);

     label34:
        throw $r18;

     label35:
        r2 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set value for field ");

        r7 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r7 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(r7, r2);

        throw $r18;

     label36:
        return r3;

        catch java.lang.IllegalAccessException from label01 to label02 with label35;
        catch java.lang.IllegalAccessException from label03 to label04 with label35;
        catch java.lang.IllegalAccessException from label05 to label06 with label35;
        catch java.lang.IllegalAccessException from label07 to label08 with label35;
        catch java.lang.IllegalAccessException from label10 to label11 with label35;
        catch java.lang.IllegalAccessException from label13 to label14 with label35;
        catch java.lang.IllegalAccessException from label15 to label16 with label35;
        catch java.lang.IllegalAccessException from label18 to label19 with label35;
        catch java.lang.IllegalAccessException from label21 to label22 with label35;
        catch java.lang.IllegalAccessException from label24 to label25 with label35;
        catch java.lang.IllegalAccessException from label27 to label28 with label35;
        catch java.lang.IllegalAccessException from label30 to label31 with label35;
        catch java.lang.IllegalAccessException from label33 to label34 with label35;
    }
    private static boolean isWrapperOrPrimitiveType(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Boolean;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Character;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Byte;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Short;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Long;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Float;");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public java.lang.Object convertValue(java.lang.Object, java.lang.Class) throws java.lang.IllegalArgumentException
    {
        com.facebook.stetho.json.ObjectMapper r0;
        java.lang.Class r1, $r3;
        java.lang.Object r2;
        boolean $z0;
        org.json.JSONObject r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.NoSuchMethodException r6;
        java.lang.IllegalAccessException r7;
        java.lang.InstantiationException r8;
        org.json.JSONException r9;
        java.lang.reflect.InvocationTargetException r10;
        java.lang.Throwable $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.facebook.stetho.json.ObjectMapper;

        r2 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        if r2 != null goto label01;

        return null;

     label01:
        if r1 == class "Ljava/lang/Object;" goto label02;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 != 0 goto label16;

     label02:
        $z0 = r2 instanceof org.json.JSONObject;

        if $z0 == 0 goto label05;

        r4 = (org.json.JSONObject) r2;

     label03:
        r2 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: java.lang.Object _convertFromJSONObject(org.json.JSONObject,java.lang.Class)>(r4, r1);

     label04:
        return r2;

     label05:
        if r1 != class "Lorg/json/JSONObject;" goto label08;

     label06:
        r4 = specialinvoke r0.<com.facebook.stetho.json.ObjectMapper: org.json.JSONObject _convertToJSONObject(java.lang.Object)>(r2);

     label07:
        return r4;

     label08:
        $r5 = new java.lang.IllegalArgumentException;

     label09:
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expecting either fromValue or toValueType to be a JSONObject");

     label10:
        throw $r5;

     label11:
        r6 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r6);

        throw $r5;

     label12:
        r7 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r7);

        throw $r5;

     label13:
        r8 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r8);

        throw $r5;

     label14:
        r9 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r9);

        throw $r5;

     label15:
        r10 := @caughtexception;

        $r11 = virtualinvoke r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r12 = staticinvoke <com.facebook.stetho.common.ExceptionUtil: java.lang.RuntimeException propagate(java.lang.Throwable)>($r11);

        throw $r12;

     label16:
        return r2;

        catch java.lang.NoSuchMethodException from label03 to label04 with label11;
        catch java.lang.NoSuchMethodException from label06 to label07 with label11;
        catch java.lang.NoSuchMethodException from label09 to label10 with label11;
        catch java.lang.IllegalAccessException from label03 to label04 with label12;
        catch java.lang.IllegalAccessException from label06 to label07 with label12;
        catch java.lang.IllegalAccessException from label09 to label10 with label12;
        catch java.lang.InstantiationException from label03 to label04 with label13;
        catch java.lang.InstantiationException from label06 to label07 with label13;
        catch java.lang.InstantiationException from label09 to label10 with label13;
        catch org.json.JSONException from label03 to label04 with label14;
        catch org.json.JSONException from label06 to label07 with label14;
        catch org.json.JSONException from label09 to label10 with label14;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label15;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label15;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label15;
    }
