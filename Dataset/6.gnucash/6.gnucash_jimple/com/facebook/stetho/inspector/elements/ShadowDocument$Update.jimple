com.facebook.stetho.inspector.elements.ShadowDocument$Update extends java.lang.Object implements com.facebook.stetho.inspector.elements.DocumentView
private final java.util.Map mElementToInfoChangesMap
private final java.util.Set mRootElementChangesSet
final com.facebook.stetho.inspector.elements.ShadowDocument this$0
    public void <init>(com.facebook.stetho.inspector.elements.ShadowDocument, java.util.Map, java.util.Set)
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        com.facebook.stetho.inspector.elements.ShadowDocument $r1;
        java.util.Map r2;
        java.util.Set r3;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.ShadowDocument;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Set;

        r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Map mElementToInfoChangesMap> = r2;

        r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Set mRootElementChangesSet> = r3;

        return;
    }
    private void removeSubTree(java.util.Map, java.lang.Object)
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        java.util.Map r1;
        java.lang.Object $r2, $r3;
        com.facebook.stetho.inspector.elements.ElementInfo r4;
        int i0, $i1;
        java.util.List $r5;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.lang.Object;

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (com.facebook.stetho.inspector.elements.ElementInfo) $r3;

        interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        i0 = 0;

        $r5 = r4.<com.facebook.stetho.inspector.elements.ElementInfo: java.util.List children>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r5 = r4.<com.facebook.stetho.inspector.elements.ElementInfo: java.util.List children>;

        $r2 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        specialinvoke r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void removeSubTree(java.util.Map,java.lang.Object)>(r1, $r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void abandon()
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        boolean $z0;
        com.facebook.stetho.inspector.elements.ShadowDocument $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r1 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: boolean access$200(com.facebook.stetho.inspector.elements.ShadowDocument)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: boolean access$202(com.facebook.stetho.inspector.elements.ShadowDocument,boolean)>($r1, 0);

        return;
    }
    public void commit()
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        com.facebook.stetho.inspector.elements.ShadowDocument $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.util.IdentityHashMap $r3;
        java.util.Map $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r1 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: boolean access$200(com.facebook.stetho.inspector.elements.ShadowDocument)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $r3 = staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: java.util.IdentityHashMap access$000(com.facebook.stetho.inspector.elements.ShadowDocument)>($r1);

        $r4 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Map mElementToInfoChangesMap>;

        virtualinvoke $r3.<java.util.IdentityHashMap: void putAll(java.util.Map)>($r4);

        $r5 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Set mRootElementChangesSet>;

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r1 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $r3 = staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: java.util.IdentityHashMap access$000(com.facebook.stetho.inspector.elements.ShadowDocument)>($r1);

        specialinvoke r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void removeSubTree(java.util.Map,java.lang.Object)>($r3, $r7);

        goto label2;

     label3:
        $r1 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: boolean access$202(com.facebook.stetho.inspector.elements.ShadowDocument,boolean)>($r1, 0);

        return;
    }
    public void getChangedElements(com.facebook.stetho.common.Accumulator)
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        com.facebook.stetho.common.Accumulator r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        r1 := @parameter0: com.facebook.stetho.common.Accumulator;

        $r2 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Map mElementToInfoChangesMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<com.facebook.stetho.common.Accumulator: void store(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }
    public com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        java.lang.Object $r1, $r3;
        java.util.Map $r2;
        com.facebook.stetho.inspector.elements.ElementInfo r4;
        com.facebook.stetho.inspector.elements.ShadowDocument $r5;
        java.util.IdentityHashMap $r6;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Map mElementToInfoChangesMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.facebook.stetho.inspector.elements.ElementInfo) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $r6 = staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: java.util.IdentityHashMap access$000(com.facebook.stetho.inspector.elements.ShadowDocument)>($r5);

        $r1 = virtualinvoke $r6.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.facebook.stetho.inspector.elements.ElementInfo) $r1;

        return r4;
    }
    public void getGarbageElements(com.facebook.stetho.common.Accumulator)
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        com.facebook.stetho.common.Accumulator r1;
        java.util.ArrayDeque r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8, $r9;
        com.facebook.stetho.inspector.elements.ElementInfo $r6;
        com.facebook.stetho.inspector.elements.ShadowDocument $r7;
        int i0, $i1;
        java.util.List $r10;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        r1 := @parameter0: com.facebook.stetho.common.Accumulator;

        r2 = new java.util.ArrayDeque;

        specialinvoke r2.<java.util.ArrayDeque: void <init>()>();

        $r3 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Set mRootElementChangesSet>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)>($r5);

        $r7 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $r8 = staticinvoke <com.facebook.stetho.inspector.elements.ShadowDocument: java.lang.Object access$100(com.facebook.stetho.inspector.elements.ShadowDocument)>($r7);

        if $r5 == $r8 goto label1;

        $r8 = $r6.<com.facebook.stetho.inspector.elements.ElementInfo: java.lang.Object parentElement>;

        if $r8 != null goto label1;

        interfaceinvoke r2.<java.util.Queue: boolean add(java.lang.Object)>($r5);

        interfaceinvoke r2.<java.util.Queue: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        $z0 = interfaceinvoke r2.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.Queue: java.lang.Object remove()>();

        $r8 = interfaceinvoke r2.<java.util.Queue: java.lang.Object remove()>();

        if $r5 != $r8 goto label5;

        $r8 = null;

     label3:
        $r6 = virtualinvoke r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)>($r5);

        $r9 = $r6.<com.facebook.stetho.inspector.elements.ElementInfo: java.lang.Object parentElement>;

        if $r9 != $r8 goto label2;

        interfaceinvoke r1.<com.facebook.stetho.common.Accumulator: void store(java.lang.Object)>($r5);

        $r7 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $r6 = virtualinvoke $r7.<com.facebook.stetho.inspector.elements.ShadowDocument: com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)>($r5);

        if $r6 == null goto label2;

        i0 = 0;

        $r10 = $r6.<com.facebook.stetho.inspector.elements.ElementInfo: java.util.List children>;

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

     label4:
        if i0 >= $i1 goto label2;

        $r10 = $r6.<com.facebook.stetho.inspector.elements.ElementInfo: java.util.List children>;

        $r8 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i0);

        interfaceinvoke r2.<java.util.Queue: boolean add(java.lang.Object)>($r8);

        interfaceinvoke r2.<java.util.Queue: boolean add(java.lang.Object)>($r5);

        i0 = i0 + 1;

        goto label4;

     label5:
        goto label3;

     label6:
        return;
    }
    public java.lang.Object getRootElement()
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        java.lang.Object $r1;
        com.facebook.stetho.inspector.elements.ShadowDocument $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r2 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: com.facebook.stetho.inspector.elements.ShadowDocument this$0>;

        $r1 = virtualinvoke $r2.<com.facebook.stetho.inspector.elements.ShadowDocument: java.lang.Object getRootElement()>();

        return $r1;
    }
    public boolean isElementChanged(java.lang.Object)
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Map mElementToInfoChangesMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean isEmpty()
    {
        com.facebook.stetho.inspector.elements.ShadowDocument$Update r0;
        boolean $z0;
        java.util.Map $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r1 = r0.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: java.util.Map mElementToInfoChangesMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }
