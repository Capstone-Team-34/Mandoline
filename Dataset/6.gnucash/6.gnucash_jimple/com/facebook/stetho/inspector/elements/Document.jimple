com.facebook.stetho.inspector.elements.Document extends com.facebook.stetho.inspector.helper.ThreadBoundProxy
private com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator mCachedAttributeAccumulator
private com.facebook.stetho.inspector.elements.Document$ChildEventingList mCachedChildEventingList
private com.facebook.stetho.common.ArrayListAccumulator mCachedChildrenAccumulator
private final java.util.Queue mCachedUpdateQueue
private com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider
private final com.facebook.stetho.inspector.elements.DocumentProviderFactory mFactory
private final com.facebook.stetho.inspector.helper.ObjectIdMapper mObjectIdMapper
private int mReferenceCounter
private com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument
private com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection mUpdateListeners
    public void <init>(com.facebook.stetho.inspector.elements.DocumentProviderFactory)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.DocumentProviderFactory $r1;
        com.facebook.stetho.inspector.elements.Document$DocumentObjectIdMapper $r2;
        com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection $r3;
        java.util.ArrayDeque $r4;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.DocumentProviderFactory;

        specialinvoke r0.<com.facebook.stetho.inspector.helper.ThreadBoundProxy: void <init>(com.facebook.stetho.common.ThreadBound)>($r1);

        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProviderFactory mFactory> = $r1;

        $r2 = new com.facebook.stetho.inspector.elements.Document$DocumentObjectIdMapper;

        specialinvoke $r2.<com.facebook.stetho.inspector.elements.Document$DocumentObjectIdMapper: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.Document$1)>(r0, null);

        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.helper.ObjectIdMapper mObjectIdMapper> = $r2;

        r0.<com.facebook.stetho.inspector.elements.Document: int mReferenceCounter> = 0;

        $r3 = new com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection;

        specialinvoke $r3.<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void <init>(com.facebook.stetho.inspector.elements.Document)>(r0);

        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection mUpdateListeners> = $r3;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<com.facebook.stetho.inspector.elements.Document: java.util.Queue mCachedUpdateQueue> = $r4;

        return;
    }
    static com.facebook.stetho.inspector.elements.ShadowDocument access$100(com.facebook.stetho.inspector.elements.Document)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.elements.ShadowDocument r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        r1 = $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument>;

        return r1;
    }
    static void access$1000(com.facebook.stetho.inspector.elements.Document$ChildEventingList, java.util.List, com.facebook.stetho.common.Accumulator)
    {
        com.facebook.stetho.inspector.elements.Document$ChildEventingList $r0;
        java.util.List $r1;
        com.facebook.stetho.common.Accumulator $r2;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document$ChildEventingList;

        $r1 := @parameter1: java.util.List;

        $r2 := @parameter2: com.facebook.stetho.common.Accumulator;

        staticinvoke <com.facebook.stetho.inspector.elements.Document: void updateListenerChildren(com.facebook.stetho.inspector.elements.Document$ChildEventingList,java.util.List,com.facebook.stetho.common.Accumulator)>($r0, $r1, $r2);

        return;
    }
    static com.facebook.stetho.inspector.elements.ShadowDocument access$102(com.facebook.stetho.inspector.elements.Document, com.facebook.stetho.inspector.elements.ShadowDocument)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.elements.ShadowDocument $r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter1: com.facebook.stetho.inspector.elements.ShadowDocument;

        $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument> = $r1;

        return $r1;
    }
    static void access$1100(com.facebook.stetho.inspector.elements.Document, com.facebook.stetho.inspector.elements.Document$ChildEventingList)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.elements.Document$ChildEventingList $r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter1: com.facebook.stetho.inspector.elements.Document$ChildEventingList;

        specialinvoke $r0.<com.facebook.stetho.inspector.elements.Document: void releaseChildEventingList(com.facebook.stetho.inspector.elements.Document$ChildEventingList)>($r1);

        return;
    }
    static void access$1200(com.facebook.stetho.inspector.elements.Document)
    {
        com.facebook.stetho.inspector.elements.Document $r0;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        specialinvoke $r0.<com.facebook.stetho.inspector.elements.Document: void updateTree()>();

        return;
    }
    static com.facebook.stetho.inspector.elements.DocumentProvider access$200(com.facebook.stetho.inspector.elements.Document)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.elements.DocumentProvider r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        r1 = $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        return r1;
    }
    static com.facebook.stetho.inspector.elements.DocumentProvider access$202(com.facebook.stetho.inspector.elements.Document, com.facebook.stetho.inspector.elements.DocumentProvider)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.elements.DocumentProvider $r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter1: com.facebook.stetho.inspector.elements.DocumentProvider;

        $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider> = $r1;

        return $r1;
    }
    static com.facebook.stetho.inspector.elements.ShadowDocument$Update access$300(com.facebook.stetho.inspector.elements.Document)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.elements.ShadowDocument$Update $r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        $r1 = specialinvoke $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument$Update createShadowDocumentUpdate()>();

        return $r1;
    }
    static com.facebook.stetho.inspector.helper.ObjectIdMapper access$500(com.facebook.stetho.inspector.elements.Document)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.helper.ObjectIdMapper r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        r1 = $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.helper.ObjectIdMapper mObjectIdMapper>;

        return r1;
    }
    static com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection access$700(com.facebook.stetho.inspector.elements.Document)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection r1;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        r1 = $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection mUpdateListeners>;

        return r1;
    }
    static com.facebook.stetho.inspector.elements.Document$ChildEventingList access$900(com.facebook.stetho.inspector.elements.Document, java.lang.Object, com.facebook.stetho.inspector.elements.DocumentView)
    {
        com.facebook.stetho.inspector.elements.Document $r0;
        java.lang.Object $r1;
        com.facebook.stetho.inspector.elements.DocumentView $r2;
        com.facebook.stetho.inspector.elements.Document$ChildEventingList $r3;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: com.facebook.stetho.inspector.elements.DocumentView;

        $r3 = specialinvoke $r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$ChildEventingList acquireChildEventingList(java.lang.Object,com.facebook.stetho.inspector.elements.DocumentView)>($r1, $r2);

        return $r3;
    }
    private com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator acquireCachedAttributeAccumulator()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator r1;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator mCachedAttributeAccumulator>;

        if r1 != null goto label1;

        r1 = new com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator;

        specialinvoke r1.<com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator: void <init>()>();

     label1:
        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.common.ArrayListAccumulator mCachedChildrenAccumulator> = null;

        return r1;
    }
    private com.facebook.stetho.inspector.elements.Document$ChildEventingList acquireChildEventingList(java.lang.Object, com.facebook.stetho.inspector.elements.DocumentView)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1;
        com.facebook.stetho.inspector.elements.DocumentView $r2;
        com.facebook.stetho.inspector.elements.Document$ChildEventingList r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.facebook.stetho.inspector.elements.DocumentView;

        r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$ChildEventingList mCachedChildEventingList>;

        if r3 != null goto label1;

        r3 = new com.facebook.stetho.inspector.elements.Document$ChildEventingList;

        specialinvoke r3.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.Document$1)>(r0, null);

     label1:
        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$ChildEventingList mCachedChildEventingList> = null;

        virtualinvoke r3.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void acquire(java.lang.Object,com.facebook.stetho.inspector.elements.DocumentView)>($r1, $r2);

        return r3;
    }
    private com.facebook.stetho.common.ArrayListAccumulator acquireChildrenAccumulator()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.common.ArrayListAccumulator r1;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.common.ArrayListAccumulator mCachedChildrenAccumulator>;

        if r1 != null goto label1;

        r1 = new com.facebook.stetho.common.ArrayListAccumulator;

        specialinvoke r1.<com.facebook.stetho.common.ArrayListAccumulator: void <init>()>();

     label1:
        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.common.ArrayListAccumulator mCachedChildrenAccumulator> = null;

        return r1;
    }
    private void applyDocumentUpdate(com.facebook.stetho.inspector.elements.ShadowDocument$Update)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.ShadowDocument$Update $r1;
        com.facebook.stetho.inspector.elements.Document$3 $r2;
        com.facebook.stetho.inspector.elements.Document$4 $r3;
        com.facebook.stetho.inspector.elements.Document$5 $r4;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.ShadowDocument$Update;

        $r2 = new com.facebook.stetho.inspector.elements.Document$3;

        specialinvoke $r2.<com.facebook.stetho.inspector.elements.Document$3: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.ShadowDocument$Update)>(r0, $r1);

        virtualinvoke $r1.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void getGarbageElements(com.facebook.stetho.common.Accumulator)>($r2);

        $r3 = new com.facebook.stetho.inspector.elements.Document$4;

        specialinvoke $r3.<com.facebook.stetho.inspector.elements.Document$4: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.ShadowDocument$Update)>(r0, $r1);

        virtualinvoke $r1.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void getChangedElements(com.facebook.stetho.common.Accumulator)>($r3);

        $r4 = new com.facebook.stetho.inspector.elements.Document$5;

        specialinvoke $r4.<com.facebook.stetho.inspector.elements.Document$5: void <init>(com.facebook.stetho.inspector.elements.Document,com.facebook.stetho.inspector.elements.ShadowDocument$Update)>(r0, $r1);

        virtualinvoke $r1.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void getChangedElements(com.facebook.stetho.common.Accumulator)>($r4);

        virtualinvoke $r1.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void commit()>();

        return;
    }
    private void cleanUp()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.Document$2 $r1;
        com.facebook.stetho.inspector.elements.DocumentProvider $r2;
        com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r1 = new com.facebook.stetho.inspector.elements.Document$2;

        specialinvoke $r1.<com.facebook.stetho.inspector.elements.Document$2: void <init>(com.facebook.stetho.inspector.elements.Document)>(r0);

        interfaceinvoke $r2.<com.facebook.stetho.inspector.elements.DocumentProvider: void postAndWait(java.lang.Runnable)>($r1);

        $r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection mUpdateListeners>;

        virtualinvoke $r3.<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void clear()>();

        return;
    }
    private com.facebook.stetho.inspector.elements.ShadowDocument$Update createShadowDocumentUpdate()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.DocumentProvider $r1;
        java.lang.Object $r2, $r4;
        com.facebook.stetho.inspector.elements.ShadowDocument $r3;
        java.lang.IllegalStateException $r5;
        com.facebook.stetho.common.ArrayListAccumulator $r6;
        com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder $r7;
        java.util.Queue $r8;
        boolean $z0;
        com.facebook.stetho.inspector.elements.NodeDescriptor $r9;
        com.facebook.stetho.inspector.helper.ObjectIdMapper $r10;
        int i0, $i1;
        java.lang.Object[] $r11;
        java.lang.Class $r12;
        java.lang.String $r13;
        com.facebook.stetho.inspector.elements.ShadowDocument$Update $r14;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r2 = interfaceinvoke $r1.<com.facebook.stetho.inspector.elements.DocumentProvider: java.lang.Object getRootElement()>();

        $r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument>;

        $r4 = virtualinvoke $r3.<com.facebook.stetho.inspector.elements.ShadowDocument: java.lang.Object getRootElement()>();

        if $r2 == $r4 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r6 = specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.common.ArrayListAccumulator acquireChildrenAccumulator()>();

        $r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument>;

        $r7 = virtualinvoke $r3.<com.facebook.stetho.inspector.elements.ShadowDocument: com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder beginUpdate()>();

        $r8 = r0.<com.facebook.stetho.inspector.elements.Document: java.util.Queue mCachedUpdateQueue>;

        $r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r2 = interfaceinvoke $r1.<com.facebook.stetho.inspector.elements.DocumentProvider: java.lang.Object getRootElement()>();

        interfaceinvoke $r8.<java.util.Queue: boolean add(java.lang.Object)>($r2);

     label2:
        $r8 = r0.<com.facebook.stetho.inspector.elements.Document: java.util.Queue mCachedUpdateQueue>;

        $z0 = interfaceinvoke $r8.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $r8 = r0.<com.facebook.stetho.inspector.elements.Document: java.util.Queue mCachedUpdateQueue>;

        $r2 = interfaceinvoke $r8.<java.util.Queue: java.lang.Object remove()>();

        $r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r9 = interfaceinvoke $r1.<com.facebook.stetho.inspector.elements.DocumentProvider: com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)>($r2);

        $r10 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.helper.ObjectIdMapper mObjectIdMapper>;

        virtualinvoke $r10.<com.facebook.stetho.inspector.helper.ObjectIdMapper: int putObject(java.lang.Object)>($r2);

        interfaceinvoke $r9.<com.facebook.stetho.inspector.elements.NodeDescriptor: void getChildren(java.lang.Object,com.facebook.stetho.common.Accumulator)>($r2, $r6);

        i0 = 0;

        $i1 = virtualinvoke $r6.<com.facebook.stetho.common.ArrayListAccumulator: int size()>();

     label3:
        if i0 >= $i1 goto label6;

        $r4 = virtualinvoke $r6.<com.facebook.stetho.common.ArrayListAccumulator: java.lang.Object get(int)>(i0);

        if $r4 == null goto label5;

        $r8 = r0.<com.facebook.stetho.inspector.elements.Document: java.util.Queue mCachedUpdateQueue>;

        interfaceinvoke $r8.<java.util.Queue: boolean add(java.lang.Object)>($r4);

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r11 = newarray (java.lang.Object)[3];

        $r12 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r11[0] = $r13;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r11[1] = $r13;

        $r11[2] = $r2;

        staticinvoke <com.facebook.stetho.common.LogUtil: void e(java.lang.String,java.lang.Object[])>("%s.getChildren() emitted a null child at position %s for element %s", $r11);

        virtualinvoke $r6.<com.facebook.stetho.common.ArrayListAccumulator: java.lang.Object remove(int)>(i0);

        i0 = i0 + -1;

        $i1 = $i1 + -1;

        goto label4;

     label6:
        virtualinvoke $r7.<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: void setElementChildren(java.lang.Object,java.util.List)>($r2, $r6);

        virtualinvoke $r6.<com.facebook.stetho.common.ArrayListAccumulator: void clear()>();

        goto label2;

     label7:
        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void releaseChildrenAccumulator(com.facebook.stetho.common.ArrayListAccumulator)>($r6);

        $r14 = virtualinvoke $r7.<com.facebook.stetho.inspector.elements.ShadowDocument$UpdateBuilder: com.facebook.stetho.inspector.elements.ShadowDocument$Update build()>();

        return $r14;
    }
    private boolean doesElementMatch(java.lang.Object, java.util.regex.Pattern)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1, $r6;
        java.util.regex.Pattern $r2;
        com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator $r3;
        com.facebook.stetho.inspector.elements.DocumentProvider $r4;
        com.facebook.stetho.inspector.elements.NodeDescriptor $r5;
        int i0, $i1;
        java.lang.CharSequence $r7;
        java.util.regex.Matcher $r8;
        boolean $z0;
        java.lang.String $r9;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.util.regex.Pattern;

        $r3 = specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator acquireCachedAttributeAccumulator()>();

        $r4 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r5 = interfaceinvoke $r4.<com.facebook.stetho.inspector.elements.DocumentProvider: com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)>($r1);

        interfaceinvoke $r5.<com.facebook.stetho.inspector.elements.NodeDescriptor: void getAttributes(java.lang.Object,com.facebook.stetho.inspector.elements.AttributeAccumulator)>($r1, $r3);

        i0 = 0;

        $i1 = virtualinvoke $r3.<com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r6 = virtualinvoke $r3.<com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator: java.lang.Object get(int)>(i0);

        $r7 = (java.lang.CharSequence) $r6;

        $r8 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r7);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void releaseCachedAttributeAccumulator(com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator)>($r3);

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void releaseCachedAttributeAccumulator(com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator)>($r3);

        $r9 = interfaceinvoke $r5.<com.facebook.stetho.inspector.elements.NodeDescriptor: java.lang.String getNodeName(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r9);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        return $z0;
    }
    private void findMatches(java.lang.Object, java.util.regex.Pattern, com.facebook.stetho.common.Accumulator)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1;
        java.util.regex.Pattern $r2;
        com.facebook.stetho.common.Accumulator r3;
        com.facebook.stetho.inspector.elements.ShadowDocument $r4;
        com.facebook.stetho.inspector.elements.ElementInfo $r5;
        int i0, $i1;
        java.util.List $r6;
        boolean $z0;
        com.facebook.stetho.inspector.helper.ObjectIdMapper $r7;
        java.lang.Integer $r8;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.util.regex.Pattern;

        r3 := @parameter2: com.facebook.stetho.common.Accumulator;

        $r4 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument>;

        $r5 = virtualinvoke $r4.<com.facebook.stetho.inspector.elements.ShadowDocument: com.facebook.stetho.inspector.elements.ElementInfo getElementInfo(java.lang.Object)>($r1);

        i0 = 0;

        $r6 = $r5.<com.facebook.stetho.inspector.elements.ElementInfo: java.util.List children>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r6 = $r5.<com.facebook.stetho.inspector.elements.ElementInfo: java.util.List children>;

        $r1 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        $z0 = specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: boolean doesElementMatch(java.lang.Object,java.util.regex.Pattern)>($r1, $r2);

        if $z0 == 0 goto label2;

        $r7 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.helper.ObjectIdMapper mObjectIdMapper>;

        $r8 = virtualinvoke $r7.<com.facebook.stetho.inspector.helper.ObjectIdMapper: java.lang.Integer getIdForObject(java.lang.Object)>($r1);

        interfaceinvoke r3.<com.facebook.stetho.common.Accumulator: void store(java.lang.Object)>($r8);

     label2:
        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void findMatches(java.lang.Object,java.util.regex.Pattern,com.facebook.stetho.common.Accumulator)>($r1, $r2, r3);

        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    private void init()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.Document$1 $r1;
        com.facebook.stetho.inspector.elements.DocumentProvider $r2;
        com.facebook.stetho.inspector.elements.DocumentProviderFactory $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProviderFactory mFactory>;

        $r2 = interfaceinvoke $r3.<com.facebook.stetho.inspector.elements.DocumentProviderFactory: com.facebook.stetho.inspector.elements.DocumentProvider create()>();

        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider> = $r2;

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r1 = new com.facebook.stetho.inspector.elements.Document$1;

        specialinvoke $r1.<com.facebook.stetho.inspector.elements.Document$1: void <init>(com.facebook.stetho.inspector.elements.Document)>(r0);

        interfaceinvoke $r2.<com.facebook.stetho.inspector.elements.DocumentProvider: void postAndWait(java.lang.Runnable)>($r1);

        return;
    }
    private void releaseCachedAttributeAccumulator(com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator $r1, $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator;

        virtualinvoke $r1.<com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator: void clear()>();

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator mCachedAttributeAccumulator>;

        if $r2 != null goto label1;

        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$AttributeListAccumulator mCachedAttributeAccumulator> = $r1;

     label1:
        return;
    }
    private void releaseChildEventingList(com.facebook.stetho.inspector.elements.Document$ChildEventingList)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.Document$ChildEventingList $r1, $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.Document$ChildEventingList;

        virtualinvoke $r1.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void release()>();

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$ChildEventingList mCachedChildEventingList>;

        if $r2 != null goto label1;

        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$ChildEventingList mCachedChildEventingList> = $r1;

     label1:
        return;
    }
    private void releaseChildrenAccumulator(com.facebook.stetho.common.ArrayListAccumulator)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.common.ArrayListAccumulator r1, $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        r1 := @parameter0: com.facebook.stetho.common.ArrayListAccumulator;

        virtualinvoke r1.<com.facebook.stetho.common.ArrayListAccumulator: void clear()>();

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.common.ArrayListAccumulator mCachedChildrenAccumulator>;

        if $r2 != null goto label1;

        r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.common.ArrayListAccumulator mCachedChildrenAccumulator> = r1;

     label1:
        return;
    }
    private static void updateListenerChildren(com.facebook.stetho.inspector.elements.Document$ChildEventingList, java.util.List, com.facebook.stetho.common.Accumulator)
    {
        com.facebook.stetho.inspector.elements.Document$ChildEventingList $r0;
        java.util.List r1;
        com.facebook.stetho.common.Accumulator r2;
        int i0, $i1;
        java.lang.Object $r3, $r4;

        $r0 := @parameter0: com.facebook.stetho.inspector.elements.Document$ChildEventingList;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.facebook.stetho.common.Accumulator;

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: int size()>();

        if i0 > $i1 goto label7;

        $i1 = virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: int size()>();

        if i0 != $i1 goto label3;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 != $i1 goto label2;

        return;

     label2:
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void addWithEvent(int,java.lang.Object,com.facebook.stetho.common.Accumulator)>(i0, $r3, r2);

        i0 = i0 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 != $i1 goto label4;

        virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void removeWithEvent(int)>(i0);

        goto label1;

     label4:
        $r3 = virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: java.lang.Object get(int)>(i0);

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        if $r3 != $r4 goto label5;

        i0 = i0 + 1;

        goto label1;

     label5:
        $i1 = virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: int indexOf(java.lang.Object)>($r4);

        if $i1 != -1 goto label6;

        virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void addWithEvent(int,java.lang.Object,com.facebook.stetho.common.Accumulator)>(i0, $r4, r2);

        i0 = i0 + 1;

        goto label1;

     label6:
        virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void removeWithEvent(int)>($i1);

        virtualinvoke $r0.<com.facebook.stetho.inspector.elements.Document$ChildEventingList: void addWithEvent(int,java.lang.Object,com.facebook.stetho.common.Accumulator)>(i0, $r4, r2);

        i0 = i0 + 1;

        goto label1;

     label7:
        return;
    }
    private void updateTree()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        long l0, $l1;
        java.lang.Object[] $r1;
        com.facebook.stetho.inspector.elements.ShadowDocument$Update $r2;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r2 = specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument$Update createShadowDocumentUpdate()>();

        $z0 = virtualinvoke $r2.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<com.facebook.stetho.inspector.elements.ShadowDocument$Update: void abandon()>();

     label1:
        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = $l1 - l0;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r1[0] = $r3;

        if $z0 == 0 goto label4;

        $r3 = " (no changes)";

     label2:
        $r1[1] = $r3;

        staticinvoke <com.facebook.stetho.common.LogUtil: void d(java.lang.String,java.lang.Object[])>("Document.updateTree() completed in %s ms%s", $r1);

        return;

     label3:
        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void applyDocumentUpdate(com.facebook.stetho.inspector.elements.ShadowDocument$Update)>($r2);

        goto label1;

     label4:
        $r3 = "";

        goto label2;
    }
    public void addRef()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        int $i0, $i1;
        java.lang.Throwable $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        entermonitor r0;

     label1:
        $i1 = r0.<com.facebook.stetho.inspector.elements.Document: int mReferenceCounter>;

        $i0 = $i1 + 1;

        r0.<com.facebook.stetho.inspector.elements.Document: int mReferenceCounter> = $i0;

        if $i1 != 0 goto label2;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void init()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void addUpdateListener(com.facebook.stetho.inspector.elements.Document$UpdateListener)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.Document$UpdateListener $r1;
        com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.Document$UpdateListener;

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection mUpdateListeners>;

        virtualinvoke $r2.<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void add(com.facebook.stetho.inspector.elements.Document$UpdateListener)>($r1);

        return;
    }
    public void findMatchingElements(java.lang.String, com.facebook.stetho.common.Accumulator)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.String $r1;
        com.facebook.stetho.common.Accumulator r2;
        java.util.regex.Pattern $r3;
        com.facebook.stetho.inspector.elements.DocumentProvider $r4;
        java.lang.Object $r5;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.facebook.stetho.common.Accumulator;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r1 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1);

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r1, 2);

        $r4 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r5 = interfaceinvoke $r4.<com.facebook.stetho.inspector.elements.DocumentProvider: java.lang.Object getRootElement()>();

        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void findMatches(java.lang.Object,java.util.regex.Pattern,com.facebook.stetho.common.Accumulator)>($r5, $r3, r2);

        return;
    }
    public com.facebook.stetho.inspector.elements.DocumentView getDocumentView()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.ShadowDocument r1;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument>;

        return r1;
    }
    public java.lang.Object getElementForNodeId(int)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        int $i0;
        java.lang.Object $r1;
        com.facebook.stetho.inspector.helper.ObjectIdMapper $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $i0 := @parameter0: int;

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.helper.ObjectIdMapper mObjectIdMapper>;

        $r1 = virtualinvoke $r2.<com.facebook.stetho.inspector.helper.ObjectIdMapper: java.lang.Object getObjectForId(int)>($i0);

        return $r1;
    }
    public void getElementStyles(java.lang.Object, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r2;
        com.facebook.stetho.inspector.elements.NodeDescriptor $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.facebook.stetho.inspector.elements.StyleAccumulator;

        $r3 = virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)>($r1);

        interfaceinvoke $r3.<com.facebook.stetho.inspector.elements.NodeDescriptor: void getStyles(java.lang.Object,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r1, $r2);

        return;
    }
    public com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1;
        com.facebook.stetho.inspector.elements.NodeDescriptor $r2;
        com.facebook.stetho.inspector.elements.DocumentProvider $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r2 = interfaceinvoke $r3.<com.facebook.stetho.inspector.elements.DocumentProvider: com.facebook.stetho.inspector.elements.NodeDescriptor getNodeDescriptor(java.lang.Object)>($r1);

        return $r2;
    }
    public java.lang.Integer getNodeIdForElement(java.lang.Object)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1;
        java.lang.Integer $r2;
        com.facebook.stetho.inspector.helper.ObjectIdMapper $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.helper.ObjectIdMapper mObjectIdMapper>;

        $r2 = virtualinvoke $r3.<com.facebook.stetho.inspector.helper.ObjectIdMapper: java.lang.Integer getIdForObject(java.lang.Object)>($r1);

        return $r2;
    }
    public java.lang.Object getRootElement()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.DocumentProvider $r1;
        java.lang.Object $r2, $r5;
        java.lang.IllegalStateException $r3;
        com.facebook.stetho.inspector.elements.ShadowDocument $r4;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        $r2 = interfaceinvoke $r1.<com.facebook.stetho.inspector.elements.DocumentProvider: java.lang.Object getRootElement()>();

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r4 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.ShadowDocument mShadowDocument>;

        $r5 = virtualinvoke $r4.<com.facebook.stetho.inspector.elements.ShadowDocument: java.lang.Object getRootElement()>();

        if $r2 == $r5 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label2:
        return $r2;
    }
    public void hideHighlight()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.DocumentProvider $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        interfaceinvoke $r1.<com.facebook.stetho.inspector.elements.DocumentProvider: void hideHighlight()>();

        return;
    }
    public void highlightElement(java.lang.Object, int)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1;
        int $i0;
        com.facebook.stetho.inspector.elements.DocumentProvider $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        interfaceinvoke $r2.<com.facebook.stetho.inspector.elements.DocumentProvider: void highlightElement(java.lang.Object,int)>($r1, $i0);

        return;
    }
    public void release()
    {
        com.facebook.stetho.inspector.elements.Document r0;
        int $i0;
        java.lang.Throwable $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        entermonitor r0;

     label1:
        $i0 = r0.<com.facebook.stetho.inspector.elements.Document: int mReferenceCounter>;

        if $i0 <= 0 goto label2;

        $i0 = r0.<com.facebook.stetho.inspector.elements.Document: int mReferenceCounter>;

        $i0 = $i0 + -1;

        r0.<com.facebook.stetho.inspector.elements.Document: int mReferenceCounter> = $i0;

        if $i0 != 0 goto label2;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.Document: void cleanUp()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void removeUpdateListener(com.facebook.stetho.inspector.elements.Document$UpdateListener)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        com.facebook.stetho.inspector.elements.Document$UpdateListener $r1;
        com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.Document$UpdateListener;

        $r2 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection mUpdateListeners>;

        virtualinvoke $r2.<com.facebook.stetho.inspector.elements.Document$UpdateListenerCollection: void remove(com.facebook.stetho.inspector.elements.Document$UpdateListener)>($r1);

        return;
    }
    public void setAttributesAsText(java.lang.Object, java.lang.String)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        com.facebook.stetho.inspector.elements.DocumentProvider $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r3 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        interfaceinvoke $r3.<com.facebook.stetho.inspector.elements.DocumentProvider: void setAttributesAsText(java.lang.Object,java.lang.String)>($r1, $r2);

        return;
    }
    public void setInspectModeEnabled(boolean)
    {
        com.facebook.stetho.inspector.elements.Document r0;
        boolean $z0;
        com.facebook.stetho.inspector.elements.DocumentProvider $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.Document;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.Document: void verifyThreadAccess()>();

        $r1 = r0.<com.facebook.stetho.inspector.elements.Document: com.facebook.stetho.inspector.elements.DocumentProvider mDocumentProvider>;

        interfaceinvoke $r1.<com.facebook.stetho.inspector.elements.DocumentProvider: void setInspectModeEnabled(boolean)>($z0);

        return;
    }
