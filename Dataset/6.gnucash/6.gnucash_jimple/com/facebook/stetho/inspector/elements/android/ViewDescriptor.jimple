com.facebook.stetho.inspector.elements.android.ViewDescriptor extends com.facebook.stetho.inspector.elements.AbstractChainedDescriptor implements com.facebook.stetho.inspector.elements.android.HighlightableDescriptor
private static final java.lang.String ID_NAME
private static final java.lang.String NONE_MAPPING
private static final java.lang.String NONE_VALUE
private final com.facebook.stetho.inspector.elements.android.MethodInvoker mMethodInvoker
private volatile java.util.List mViewProperties
private java.util.regex.Pattern mWordBoundaryPattern
    public void <init>()
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        com.facebook.stetho.inspector.elements.android.MethodInvoker $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 = new com.facebook.stetho.inspector.elements.android.MethodInvoker;

        specialinvoke $r1.<com.facebook.stetho.inspector.elements.android.MethodInvoker: void <init>()>();

        specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void <init>(com.facebook.stetho.inspector.elements.android.MethodInvoker)>($r1);

        return;
    }
    public void <init>(com.facebook.stetho.inspector.elements.android.MethodInvoker)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        com.facebook.stetho.inspector.elements.android.MethodInvoker $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.android.MethodInvoker;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.AbstractChainedDescriptor: void <init>()>();

        r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: com.facebook.stetho.inspector.elements.android.MethodInvoker mMethodInvoker> = $r1;

        return;
    }
    private static boolean canFlagsBeMappedToString(android.view.ViewDebug$ExportedProperty)
    {
        android.view.ViewDebug$ExportedProperty $r0;
        android.view.ViewDebug$FlagToString[] $r1;
        int $i0;

        $r0 := @parameter0: android.view.ViewDebug$ExportedProperty;

        if $r0 == null goto label1;

        $r1 = interfaceinvoke $r0.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>();

        if $r1 == null goto label1;

        $r1 = interfaceinvoke $r0.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>();

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean canIntBeMappedToString(android.view.ViewDebug$ExportedProperty)
    {
        android.view.ViewDebug$ExportedProperty $r0;
        android.view.ViewDebug$IntToString[] $r1;
        int $i0;

        $r0 := @parameter0: android.view.ViewDebug$ExportedProperty;

        if $r0 == null goto label1;

        $r1 = interfaceinvoke $r0.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        if $r1 == null goto label1;

        $r1 = interfaceinvoke $r0.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static java.lang.String capitalize(java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int $i0;
        char $c1;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>($c1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        $c1 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toTitleCase(char)>($c1);

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(0, $c1);

        r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r1;
    }
    private java.lang.String convertViewPropertyNameToCSSName(java.lang.String)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.lang.String $r1;
        java.lang.StringBuilder r2;
        java.util.regex.Pattern $r3;
        java.lang.String[] $r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: java.lang.String;

        $r3 = specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.regex.Pattern getWordBoundaryPattern()>();

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r1);

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label4;

        $r1 = $r4[i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("get");

        if $z0 != 0 goto label2;

        $r1 = $r4[i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("m");

        if $z0 == 0 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r1 = $r4[i0];

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        if i0 >= $i1 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        goto label2;

     label4:
        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    private static java.lang.String getIdAttribute(android.view.View)
    {
        android.view.View $r0;
        int $i0;
        android.content.res.Resources $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getId()>();

        if $i0 != -1 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r0.<android.view.View: android.content.res.Resources getResources()>();

        $r2 = staticinvoke <com.facebook.stetho.common.android.ResourcesUtil: java.lang.String getIdStringQuietly(java.lang.Object,android.content.res.Resources,int)>($r0, $r1, $i0);

        return $r2;
    }
    private void getIdStyle(android.view.View, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        android.view.View $r1;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r2;
        java.lang.String $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: com.facebook.stetho.inspector.elements.StyleAccumulator;

        $r3 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String getIdAttribute(android.view.View)>($r1);

        if $r3 != null goto label1;

        interfaceinvoke $r2.<com.facebook.stetho.inspector.elements.StyleAccumulator: void store(java.lang.String,java.lang.String,boolean)>("id", "(none)", 0);

        return;

     label1:
        interfaceinvoke $r2.<com.facebook.stetho.inspector.elements.StyleAccumulator: void store(java.lang.String,java.lang.String,boolean)>("id", $r3, 0);

        return;
    }
    private void getStyleFromFloat(java.lang.String, java.lang.Float, android.view.ViewDebug$ExportedProperty, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.lang.String $r1, $r5;
        java.lang.Float $r2;
        android.view.ViewDebug$ExportedProperty $r3;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r4;
        boolean $z0;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Float;

        $r3 := @parameter2: android.view.ViewDebug$ExportedProperty;

        $r4 := @parameter3: com.facebook.stetho.inspector.elements.StyleAccumulator;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean isDefaultValue(java.lang.Float)>($r2);

        interfaceinvoke $r4.<com.facebook.stetho.inspector.elements.StyleAccumulator: void store(java.lang.String,java.lang.String,boolean)>($r1, $r5, $z0);

        return;
    }
    private void getStyleFromInteger(java.lang.String, java.lang.Integer, android.view.ViewDebug$ExportedProperty, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.lang.String $r1, $r6;
        java.lang.Integer $r2;
        android.view.ViewDebug$ExportedProperty $r3;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r4;
        com.facebook.stetho.inspector.helper.IntegerFormatter $r5;
        boolean $z0;
        java.lang.StringBuilder $r7;
        int $i0;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Integer;

        $r3 := @parameter2: android.view.ViewDebug$ExportedProperty;

        $r4 := @parameter3: com.facebook.stetho.inspector.elements.StyleAccumulator;

        $r5 = staticinvoke <com.facebook.stetho.inspector.helper.IntegerFormatter: com.facebook.stetho.inspector.helper.IntegerFormatter getInstance()>();

        $r6 = virtualinvoke $r5.<com.facebook.stetho.inspector.helper.IntegerFormatter: java.lang.String format(java.lang.Integer,android.view.ViewDebug$ExportedProperty)>($r2, $r3);

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canIntBeMappedToString(android.view.ViewDebug$ExportedProperty)>($r3);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r6 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String mapIntToStringUsingAnnotation(int,android.view.ViewDebug$ExportedProperty)>($i0, $r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<com.facebook.stetho.inspector.elements.StyleAccumulator: void store(java.lang.String,java.lang.String,boolean)>($r1, $r6, 0);

        return;

     label1:
        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canFlagsBeMappedToString(android.view.ViewDebug$ExportedProperty)>($r3);

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r6 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String mapFlagsToStringUsingAnnotation(int,android.view.ViewDebug$ExportedProperty)>($i0, $r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<com.facebook.stetho.inspector.elements.StyleAccumulator: void store(java.lang.String,java.lang.String,boolean)>($r1, $r6, 0);

        return;

     label2:
        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean isDefaultValue(java.lang.Integer,android.view.ViewDebug$ExportedProperty)>($r2, $r3);

        interfaceinvoke $r4.<com.facebook.stetho.inspector.elements.StyleAccumulator: void store(java.lang.String,java.lang.String,boolean)>($r1, $r6, $z0);

        return;
    }
    private void getStyleFromValue(android.view.View, java.lang.String, java.lang.Object, android.view.ViewDebug$ExportedProperty, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        android.view.View $r1;
        java.lang.String $r2;
        android.view.ViewDebug$ExportedProperty $r3;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r4;
        boolean $z0;
        java.lang.Object r5;
        java.lang.Integer r6;
        java.lang.Float r7;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Object;

        $r3 := @parameter3: android.view.ViewDebug$ExportedProperty;

        $r4 := @parameter4: com.facebook.stetho.inspector.elements.StyleAccumulator;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("id");

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getIdStyle(android.view.View,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r1, $r4);

        return;

     label1:
        $z0 = r5 instanceof java.lang.Integer;

        if $z0 == 0 goto label2;

        r6 = (java.lang.Integer) r5;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStyleFromInteger(java.lang.String,java.lang.Integer,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r2, r6, $r3, $r4);

        return;

     label2:
        $z0 = r5 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

        r7 = (java.lang.Float) r5;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStyleFromFloat(java.lang.String,java.lang.Float,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r2, r7, $r3, $r4);

        return;

     label3:
        specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStylesFromObject(android.view.View,java.lang.String,java.lang.Object,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r1, $r2, r5, $r3, $r4);

        return;
    }
    private void getStylesFromObject(android.view.View, java.lang.String, java.lang.Object, android.view.ViewDebug$ExportedProperty, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        android.view.View $r1;
        java.lang.String $r2, $r11, r12, $r13;
        java.lang.Object $r3, $r10;
        android.view.ViewDebug$ExportedProperty $r4, r15;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r5;
        java.lang.IllegalAccessException r6;
        java.lang.reflect.Field r7;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Class $r8;
        java.lang.reflect.Field[] $r9;
        byte $b3;
        java.lang.'annotation'.Annotation $r14;
        java.lang.StringBuilder $r16;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: android.view.ViewDebug$ExportedProperty;

        $r5 := @parameter4: com.facebook.stetho.inspector.elements.StyleAccumulator;

        if $r4 == null goto label20;

        $z0 = interfaceinvoke $r4.<android.view.ViewDebug$ExportedProperty: boolean deepExport()>();

        if $z0 == 0 goto label20;

        if $r3 != null goto label01;

        return;

     label01:
        $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        $i0 = lengthof $r9;

        $i1 = 0;

     label02:
        if $i1 >= $i0 goto label20;

        r7 = $r9[$i1];

        $i2 = virtualinvoke r7.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z0 == 0 goto label04;

     label03:
        $i1 = $i1 + 1;

        goto label02;

     label04:
        virtualinvoke r7.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r10 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r3);

     label05:
        $r11 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.String getName()>();

        r12 = $r11;

        $b3 = -1;

        $i2 = virtualinvoke $r11.<java.lang.String: int hashCode()>();

        lookupswitch($i2)
        {
            case -599904534: goto label14;
            case -414179485: goto label12;
            case 1928835221: goto label13;
            case 2064613305: goto label11;
            default: goto label06;
        };

     label06:
        lookupswitch($b3)
        {
            case 0: goto label15;
            case 1: goto label16;
            case 2: goto label17;
            case 3: goto label18;
            default: goto label07;
        };

     label07:
        $r13 = interfaceinvoke $r4.<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>();

        if $r13 != null goto label19;

     label08:
        $r11 = specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String convertViewPropertyNameToCSSName(java.lang.String)>(r12);

     label09:
        $r14 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/view/ViewDebug$ExportedProperty;");

        r15 = (android.view.ViewDebug$ExportedProperty) $r14;

        specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStyleFromValue(android.view.View,java.lang.String,java.lang.Object,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r1, $r11, $r10, r15, $r5);

        goto label03;

     label10:
        r6 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to get property of name: \"");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" of object: ");

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.facebook.stetho.common.LogUtil: void e(java.lang.Throwable,java.lang.String)>(r6, $r2);

        return;

     label11:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("bottomMargin");

        if $z0 == 0 goto label06;

        $b3 = 0;

        goto label06;

     label12:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("topMargin");

        if $z0 == 0 goto label06;

        $b3 = 1;

        goto label06;

     label13:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("leftMargin");

        if $z0 == 0 goto label06;

        $b3 = 2;

        goto label06;

     label14:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("rightMargin");

        if $z0 == 0 goto label06;

        $b3 = 3;

        goto label06;

     label15:
        $r11 = "margin-bottom";

        goto label09;

     label16:
        $r11 = "margin-top";

        goto label09;

     label17:
        $r11 = "margin-left";

        goto label09;

     label18:
        $r11 = "margin-right";

        goto label09;

     label19:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r12 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label20:
        return;

        catch java.lang.IllegalAccessException from label04 to label05 with label10;
    }
    private java.util.List getViewProperties()
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.lang.reflect.Field r1;
        java.lang.reflect.Method r2;
        java.util.ArrayList r3;
        int $i0, $i1, $i2;
        java.util.List $r4;
        java.lang.Class $r5;
        java.lang.reflect.Method[] $r6;
        java.lang.'annotation'.Annotation $r7;
        android.view.ViewDebug$ExportedProperty r8;
        com.facebook.stetho.inspector.elements.android.ViewDescriptor$MethodBackedCSSProperty $r9;
        java.lang.String $r10;
        java.lang.reflect.Field[] $r11;
        com.facebook.stetho.inspector.elements.android.ViewDescriptor$FieldBackedCSSProperty $r12;
        com.facebook.stetho.inspector.elements.android.ViewDescriptor$1 $r13;
        java.lang.Throwable $r14;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $i0 = 0;

        $r4 = r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.List mViewProperties>;

        if $r4 != null goto label09;

        entermonitor r0;

     label01:
        $r4 = r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.List mViewProperties>;

        if $r4 != null goto label08;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r5 = class "Landroid/view/View;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i1 = lengthof $r6;

        $i2 = 0;

     label02:
        if $i2 >= $i1 goto label04;

        r2 = $r6[$i2];

        $r7 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/view/ViewDebug$ExportedProperty;");

        r8 = (android.view.ViewDebug$ExportedProperty) $r7;

        if r8 == null goto label03;

        $r9 = new com.facebook.stetho.inspector.elements.android.ViewDescriptor$MethodBackedCSSProperty;

        $r10 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r10 = specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String convertViewPropertyNameToCSSName(java.lang.String)>($r10);

        specialinvoke $r9.<com.facebook.stetho.inspector.elements.android.ViewDescriptor$MethodBackedCSSProperty: void <init>(com.facebook.stetho.inspector.elements.android.ViewDescriptor,java.lang.reflect.Method,java.lang.String,android.view.ViewDebug$ExportedProperty)>(r0, r2, $r10, r8);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

     label03:
        $i2 = $i2 + 1;

        goto label02;

     label04:
        $r5 = class "Landroid/view/View;";

        $r11 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i1 = lengthof $r11;

     label05:
        if $i0 >= $i1 goto label07;

        r1 = $r11[$i0];

        $r7 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/view/ViewDebug$ExportedProperty;");

        r8 = (android.view.ViewDebug$ExportedProperty) $r7;

        if r8 == null goto label06;

        $r12 = new com.facebook.stetho.inspector.elements.android.ViewDescriptor$FieldBackedCSSProperty;

        $r10 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String convertViewPropertyNameToCSSName(java.lang.String)>($r10);

        specialinvoke $r12.<com.facebook.stetho.inspector.elements.android.ViewDescriptor$FieldBackedCSSProperty: void <init>(com.facebook.stetho.inspector.elements.android.ViewDescriptor,java.lang.reflect.Field,java.lang.String,android.view.ViewDebug$ExportedProperty)>(r0, r1, $r10, r8);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label06:
        $i0 = $i0 + 1;

        goto label05;

     label07:
        $r13 = new com.facebook.stetho.inspector.elements.android.ViewDescriptor$1;

        specialinvoke $r13.<com.facebook.stetho.inspector.elements.android.ViewDescriptor$1: void <init>(com.facebook.stetho.inspector.elements.android.ViewDescriptor)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r3, $r13);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);

        r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.List mViewProperties> = $r4;

     label08:
        exitmonitor r0;

     label09:
        $r4 = r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.List mViewProperties>;

        return $r4;

     label10:
        $r14 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r14;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }
    private java.util.regex.Pattern getWordBoundaryPattern()
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.util.regex.Pattern $r1;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 = r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.regex.Pattern mWordBoundaryPattern>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?<=\\p{Lower})(?=\\p{Upper})");

        r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.regex.Pattern mWordBoundaryPattern> = $r1;

     label1:
        $r1 = r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.regex.Pattern mWordBoundaryPattern>;

        return $r1;
    }
    private static boolean isDefaultValue(java.lang.Float)
    {
        java.lang.Float $r0;
        float $f0;
        byte $b0;

        $r0 := @parameter0: java.lang.Float;

        $f0 = virtualinvoke $r0.<java.lang.Float: float floatValue()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean isDefaultValue(java.lang.Integer, android.view.ViewDebug$ExportedProperty)
    {
        java.lang.Integer $r0;
        android.view.ViewDebug$ExportedProperty $r1;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.Integer;

        $r1 := @parameter1: android.view.ViewDebug$ExportedProperty;

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canFlagsBeMappedToString(android.view.ViewDebug$ExportedProperty)>($r1);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canIntBeMappedToString(android.view.ViewDebug$ExportedProperty)>($r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    private static java.lang.String mapFlagsToStringUsingAnnotation(int, android.view.ViewDebug$ExportedProperty)
    {
        int $i0, $i1, $i2, $i3, $i4;
        android.view.ViewDebug$ExportedProperty $r0;
        android.view.ViewDebug$FlagToString r1;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder r3;
        android.view.ViewDebug$FlagToString[] $r4;
        java.lang.String $r5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: android.view.ViewDebug$ExportedProperty;

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canFlagsBeMappedToString(android.view.ViewDebug$ExportedProperty)>($r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot map using this annotation");

        throw $r2;

     label1:
        r3 = null;

        $z0 = 0;

        $r4 = interfaceinvoke $r0.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>();

        $i1 = lengthof $r4;

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label8;

        r1 = $r4[$i2];

        $z1 = interfaceinvoke r1.<android.view.ViewDebug$FlagToString: boolean outputIf()>();

        $i3 = interfaceinvoke r1.<android.view.ViewDebug$FlagToString: int mask()>();

        $i3 = $i3 & $i0;

        $i4 = interfaceinvoke r1.<android.view.ViewDebug$FlagToString: int equals()>();

        if $i3 != $i4 goto label7;

        $z2 = 1;

     label3:
        if $z1 != $z2 goto label6;

        if r3 != null goto label4;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

     label4:
        if $z0 == 0 goto label5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

     label5:
        $r5 = interfaceinvoke r1.<android.view.ViewDebug$FlagToString: java.lang.String name()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $z0 = 1;

     label6:
        $i2 = $i2 + 1;

        goto label2;

     label7:
        $z2 = 0;

        goto label3;

     label8:
        if $z0 == 0 goto label9;

        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label9:
        return "<no mapping>";
    }
    private static java.lang.String mapIntToStringUsingAnnotation(int, android.view.ViewDebug$ExportedProperty)
    {
        int $i0, $i1, $i2, $i3;
        android.view.ViewDebug$ExportedProperty $r0;
        android.view.ViewDebug$IntToString r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        android.view.ViewDebug$IntToString[] $r3;
        java.lang.String $r4;

        $i0 := @parameter0: int;

        $r0 := @parameter1: android.view.ViewDebug$ExportedProperty;

        $z0 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: boolean canIntBeMappedToString(android.view.ViewDebug$ExportedProperty)>($r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot map using this annotation");

        throw $r2;

     label1:
        $r3 = interfaceinvoke $r0.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        $i1 = lengthof $r3;

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label4;

        r1 = $r3[$i2];

        $i3 = interfaceinvoke r1.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i3 != $i0 goto label3;

        $r4 = interfaceinvoke r1.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        return $r4;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        return "<no mapping>";
    }
    public android.view.View getViewForHighlighting(java.lang.Object)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.lang.Object $r1;
        android.view.View $r2;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) $r1;

        return $r2;
    }
    protected void onGetAttributes(android.view.View, com.facebook.stetho.inspector.elements.AttributeAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        android.view.View $r1;
        com.facebook.stetho.inspector.elements.AttributeAccumulator $r2;
        java.lang.String $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: com.facebook.stetho.inspector.elements.AttributeAccumulator;

        $r3 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String getIdAttribute(android.view.View)>($r1);

        if $r3 == null goto label1;

        interfaceinvoke $r2.<com.facebook.stetho.inspector.elements.AttributeAccumulator: void store(java.lang.String,java.lang.String)>("id", $r3);

     label1:
        return;
    }
    protected volatile void onGetAttributes(java.lang.Object, com.facebook.stetho.inspector.elements.AttributeAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        com.facebook.stetho.inspector.elements.AttributeAccumulator $r1;
        java.lang.Object $r2;
        android.view.View $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.facebook.stetho.inspector.elements.AttributeAccumulator;

        $r3 = (android.view.View) $r2;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetAttributes(android.view.View,com.facebook.stetho.inspector.elements.AttributeAccumulator)>($r3, $r1);

        return;
    }
    protected java.lang.String onGetNodeName(android.view.View)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        android.view.View $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <com.facebook.stetho.common.StringUtil: java.lang.String removePrefix(java.lang.String,java.lang.String)>($r3, "android.widget.");

        $r3 = staticinvoke <com.facebook.stetho.common.StringUtil: java.lang.String removePrefix(java.lang.String,java.lang.String,java.lang.String)>($r3, "android.view.", $r4);

        return $r3;
    }
    protected volatile java.lang.String onGetNodeName(java.lang.Object)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        android.view.View $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r2 := @parameter0: java.lang.Object;

        $r3 = (android.view.View) $r2;

        $r1 = virtualinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String onGetNodeName(android.view.View)>($r3);

        return $r1;
    }
    protected void onGetStyles(android.view.View, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        android.view.View $r1;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r2;
        java.util.List $r3;
        int i0, $i1;
        java.lang.Object $r4;
        com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty r5;
        java.lang.String $r6;
        android.view.ViewDebug$ExportedProperty $r7;
        java.lang.ReflectiveOperationException r8;
        java.lang.StringBuilder $r9;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: com.facebook.stetho.inspector.elements.StyleAccumulator;

        $r3 = specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.List getViewProperties()>();

        i0 = 0;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty) $r4;

     label2:
        $r6 = virtualinvoke r5.<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: java.lang.String getCSSName()>();

        $r4 = virtualinvoke r5.<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: java.lang.Object getValue(android.view.View)>($r1);

        $r7 = virtualinvoke r5.<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: android.view.ViewDebug$ExportedProperty getAnnotation()>();

        specialinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void getStyleFromValue(android.view.View,java.lang.String,java.lang.Object,android.view.ViewDebug$ExportedProperty,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r1, $r6, $r4, $r7, $r2);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        r8 := @caughtexception;

     label5:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to get style property ");

        $r6 = virtualinvoke r5.<com.facebook.stetho.inspector.elements.android.ViewDescriptor$ViewCSSProperty: java.lang.String getCSSName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of element= ");

        $r6 = virtualinvoke $r1.<android.view.View: java.lang.String toString()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.facebook.stetho.common.LogUtil: void e(java.lang.Throwable,java.lang.String)>(r8, $r6);

        goto label3;

     label6:
        return;

     label7:
        r8 := @caughtexception;

        goto label5;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label7;
    }
    protected volatile void onGetStyles(java.lang.Object, com.facebook.stetho.inspector.elements.StyleAccumulator)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        com.facebook.stetho.inspector.elements.StyleAccumulator $r1;
        java.lang.Object $r2;
        android.view.View $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.facebook.stetho.inspector.elements.StyleAccumulator;

        $r3 = (android.view.View) $r2;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onGetStyles(android.view.View,com.facebook.stetho.inspector.elements.StyleAccumulator)>($r3, $r1);

        return;
    }
    protected void onSetAttributesAsText(android.view.View, java.lang.String)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        android.view.View $r1;
        java.lang.String $r2, r9;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.StringBuilder $r8;
        com.facebook.stetho.inspector.elements.android.MethodInvoker $r10;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.util.Map parseSetAttributesAsTextArg(java.lang.String)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = (java.lang.String) $r6;

        $r2 = staticinvoke <com.facebook.stetho.inspector.elements.android.ViewDescriptor: java.lang.String capitalize(java.lang.String)>($r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r6;

        $r10 = r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: com.facebook.stetho.inspector.elements.android.MethodInvoker mMethodInvoker>;

        virtualinvoke $r10.<com.facebook.stetho.inspector.elements.android.MethodInvoker: void invoke(java.lang.Object,java.lang.String,java.lang.String)>($r1, $r2, r9);

        goto label1;

     label2:
        return;
    }
    protected volatile void onSetAttributesAsText(java.lang.Object, java.lang.String)
    {
        com.facebook.stetho.inspector.elements.android.ViewDescriptor r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        android.view.View $r3;

        r0 := @this: com.facebook.stetho.inspector.elements.android.ViewDescriptor;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r3 = (android.view.View) $r2;

        virtualinvoke r0.<com.facebook.stetho.inspector.elements.android.ViewDescriptor: void onSetAttributesAsText(android.view.View,java.lang.String)>($r3, $r1);

        return;
    }
