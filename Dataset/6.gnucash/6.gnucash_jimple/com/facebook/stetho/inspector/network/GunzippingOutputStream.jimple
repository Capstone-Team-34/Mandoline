com.facebook.stetho.inspector.network.GunzippingOutputStream extends java.io.FilterOutputStream
private static final java.util.concurrent.ExecutorService sExecutor
private final java.util.concurrent.Future mCopyFuture
    static void <clinit>()
    {
        java.util.concurrent.ExecutorService $r0;

        $r0 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        <com.facebook.stetho.inspector.network.GunzippingOutputStream: java.util.concurrent.ExecutorService sExecutor> = $r0;

        return;
    }
    private void <init>(java.io.OutputStream, java.util.concurrent.Future) throws java.io.IOException
    {
        com.facebook.stetho.inspector.network.GunzippingOutputStream r0;
        java.io.OutputStream $r1;
        java.util.concurrent.Future r2;

        r0 := @this: com.facebook.stetho.inspector.network.GunzippingOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.concurrent.Future;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        r0.<com.facebook.stetho.inspector.network.GunzippingOutputStream: java.util.concurrent.Future mCopyFuture> = r2;

        return;
    }
    public static com.facebook.stetho.inspector.network.GunzippingOutputStream create(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        java.io.PipedInputStream r1;
        java.io.PipedOutputStream r2;
        com.facebook.stetho.inspector.network.GunzippingOutputStream$GunzippingCallable $r3;
        java.util.concurrent.Future $r4;
        java.util.concurrent.ExecutorService $r5;
        com.facebook.stetho.inspector.network.GunzippingOutputStream $r6;

        $r0 := @parameter0: java.io.OutputStream;

        r1 = new java.io.PipedInputStream;

        specialinvoke r1.<java.io.PipedInputStream: void <init>()>();

        r2 = new java.io.PipedOutputStream;

        specialinvoke r2.<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>(r1);

        $r5 = <com.facebook.stetho.inspector.network.GunzippingOutputStream: java.util.concurrent.ExecutorService sExecutor>;

        $r3 = new com.facebook.stetho.inspector.network.GunzippingOutputStream$GunzippingCallable;

        specialinvoke $r3.<com.facebook.stetho.inspector.network.GunzippingOutputStream$GunzippingCallable: void <init>(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        $r4 = interfaceinvoke $r5.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r3);

        $r6 = new com.facebook.stetho.inspector.network.GunzippingOutputStream;

        specialinvoke $r6.<com.facebook.stetho.inspector.network.GunzippingOutputStream: void <init>(java.io.OutputStream,java.util.concurrent.Future)>(r2, $r4);

        return $r6;
    }
    private static java.lang.Object getAndRethrow(java.util.concurrent.Future) throws java.io.IOException
    {
        java.util.concurrent.Future r0;
        java.util.concurrent.ExecutionException r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        java.lang.InterruptedException $r4;

        r0 := @parameter0: java.util.concurrent.Future;

     label1:
        $r2 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = virtualinvoke r1.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.facebook.stetho.common.ExceptionUtil: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>($r3, class "Ljava/io/IOException;");

        staticinvoke <com.facebook.stetho.common.ExceptionUtil: java.lang.RuntimeException propagate(java.lang.Throwable)>($r3);

        goto label1;

     label4:
        $r4 := @caughtexception;

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }
    public void close() throws java.io.IOException
    {
        com.facebook.stetho.inspector.network.GunzippingOutputStream r0;
        java.util.concurrent.Future $r1;
        java.io.IOException r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: com.facebook.stetho.inspector.network.GunzippingOutputStream;

     label1:
        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

     label2:
        $r1 = r0.<com.facebook.stetho.inspector.network.GunzippingOutputStream: java.util.concurrent.Future mCopyFuture>;

     label3:
        staticinvoke <com.facebook.stetho.inspector.network.GunzippingOutputStream: java.lang.Object getAndRethrow(java.util.concurrent.Future)>($r1);

     label4:
        return;

     label5:
        r2 := @caughtexception;

        throw r2;

     label6:
        $r3 := @caughtexception;

        $r1 = r0.<com.facebook.stetho.inspector.network.GunzippingOutputStream: java.util.concurrent.Future mCopyFuture>;

     label7:
        staticinvoke <com.facebook.stetho.inspector.network.GunzippingOutputStream: java.lang.Object getAndRethrow(java.util.concurrent.Future)>($r1);

     label8:
        throw $r3;

     label9:
        r4 := @caughtexception;

        goto label8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.io.IOException from label7 to label8 with label9;
    }
