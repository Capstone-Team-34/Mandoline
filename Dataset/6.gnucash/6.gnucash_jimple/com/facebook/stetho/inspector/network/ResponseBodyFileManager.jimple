com.facebook.stetho.inspector.network.ResponseBodyFileManager extends java.lang.Object
private static final java.lang.String FILENAME_PREFIX
private static final int PRETTY_PRINT_TIMEOUT_SEC
private static final java.lang.String TAG
private final android.content.Context mContext
private final java.util.Map mRequestIdMap
    public void <init>(android.content.Context)
    {
        com.facebook.stetho.inspector.network.ResponseBodyFileManager r0;
        android.content.Context $r1;
        java.util.Map $r2;
        java.util.HashMap $r3;

        r0 := @this: com.facebook.stetho.inspector.network.ResponseBodyFileManager;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r3);

        r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.util.Map mRequestIdMap> = $r2;

        r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: android.content.Context mContext> = $r1;

        return;
    }
    private static java.lang.String getFilename(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network-response-body-");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    private java.lang.String prettyPrintContentWithTimeOut(com.facebook.stetho.inspector.network.AsyncPrettyPrinter, java.io.InputStream) throws java.io.IOException
    {
        com.facebook.stetho.inspector.network.ResponseBodyFileManager r0;
        com.facebook.stetho.inspector.network.AsyncPrettyPrinter $r1;
        java.io.InputStream $r2;
        com.facebook.stetho.inspector.network.ResponseBodyFileManager$AsyncPrettyPrintingCallable r3;
        java.util.concurrent.ExecutorService $r4;
        java.util.concurrent.Future $r5;
        java.util.concurrent.TimeUnit $r6;
        java.lang.Object $r7;
        java.lang.String $r8;
        java.util.concurrent.TimeoutException r9;
        java.lang.StringBuilder $r10;
        java.util.concurrent.ExecutionException r11;
        java.lang.Throwable $r12;
        java.lang.RuntimeException $r13;

        r0 := @this: com.facebook.stetho.inspector.network.ResponseBodyFileManager;

        $r1 := @parameter0: com.facebook.stetho.inspector.network.AsyncPrettyPrinter;

        $r2 := @parameter1: java.io.InputStream;

        r3 = new com.facebook.stetho.inspector.network.ResponseBodyFileManager$AsyncPrettyPrintingCallable;

        specialinvoke r3.<com.facebook.stetho.inspector.network.ResponseBodyFileManager$AsyncPrettyPrintingCallable: void <init>(com.facebook.stetho.inspector.network.ResponseBodyFileManager,java.io.InputStream,com.facebook.stetho.inspector.network.AsyncPrettyPrinter)>(r0, $r2, $r1);

        $r4 = staticinvoke <com.facebook.stetho.inspector.network.AsyncPrettyPrinterExecutorHolder: java.util.concurrent.ExecutorService getExecutorService()>();

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r3);

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

     label2:
        $r7 = staticinvoke <com.facebook.stetho.common.Util: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>($r5, 10L, $r6);

     label3:
        $r8 = (java.lang.String) $r7;

        return $r8;

     label4:
        r9 := @caughtexception;

        interfaceinvoke $r5.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time out after 10 seconds of attempting to pretty print\n");

        $r8 = staticinvoke <com.facebook.stetho.common.Util: java.lang.String readAsUTF8(java.io.InputStream)>($r2);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label5:
        r11 := @caughtexception;

        $r12 = virtualinvoke r11.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.facebook.stetho.common.ExceptionUtil: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>($r12, class "Ljava/io/IOException;");

        $r13 = staticinvoke <com.facebook.stetho.common.ExceptionUtil: java.lang.RuntimeException propagate(java.lang.Throwable)>($r12);

        throw $r13;

        catch java.util.concurrent.TimeoutException from label2 to label3 with label4;
        catch java.util.concurrent.ExecutionException from label2 to label3 with label5;
    }
    public void associateAsyncPrettyPrinterWithId(java.lang.String, com.facebook.stetho.inspector.network.AsyncPrettyPrinter)
    {
        com.facebook.stetho.inspector.network.ResponseBodyFileManager r0;
        java.lang.String $r1;
        com.facebook.stetho.inspector.network.AsyncPrettyPrinter $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.facebook.stetho.inspector.network.ResponseBodyFileManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.facebook.stetho.inspector.network.AsyncPrettyPrinter;

        $r3 = r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.util.Map mRequestIdMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $r4 == null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot associate different pretty printers with the same request id: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label1:
        return;
    }
    public void cleanupFiles()
    {
        com.facebook.stetho.inspector.network.ResponseBodyFileManager r0;
        java.io.File r1;
        int $i0, $i1;
        android.content.Context $r2;
        java.io.File[] $r3;
        java.lang.String $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: com.facebook.stetho.inspector.network.ResponseBodyFileManager;

        $r2 = r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: java.io.File getFilesDir()>();

        $r3 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r1 = $r3[$i1];

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("network-response-body-");

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete ");

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.facebook.stetho.common.LogRedirector: void w(java.lang.String,java.lang.String)>("ResponseBodyFileManager", $r4);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        staticinvoke <com.facebook.stetho.common.LogRedirector: void i(java.lang.String,java.lang.String)>("ResponseBodyFileManager", "Cleaned up temporary network files.");

        return;
    }
    public java.io.OutputStream openResponseBodyFile(java.lang.String, boolean) throws java.io.IOException
    {
        com.facebook.stetho.inspector.network.ResponseBodyFileManager r0;
        java.lang.String $r1;
        boolean $z0;
        android.content.Context $r2;
        java.io.FileOutputStream $r3;
        byte $b0;
        android.util.Base64OutputStream $r4;

        r0 := @this: com.facebook.stetho.inspector.network.ResponseBodyFileManager;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: android.content.Context mContext>;

        $r1 = staticinvoke <com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.lang.String getFilename(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r1, 0);

        if $z0 == 0 goto label2;

        $b0 = 1;

     label1:
        virtualinvoke $r3.<java.io.OutputStream: void write(int)>($b0);

        if $z0 == 0 goto label3;

        $r4 = new android.util.Base64OutputStream;

        specialinvoke $r4.<android.util.Base64OutputStream: void <init>(java.io.OutputStream,int)>($r3, 0);

        return $r4;

     label2:
        $b0 = 0;

        goto label1;

     label3:
        return $r3;
    }
    public com.facebook.stetho.inspector.network.ResponseBodyData readFile(java.lang.String) throws java.io.IOException
    {
        com.facebook.stetho.inspector.network.ResponseBodyFileManager r0;
        java.lang.String $r1, $r4;
        com.facebook.stetho.inspector.network.ResponseBodyData r2;
        android.content.Context $r3;
        java.io.FileInputStream $r5;
        int $i0;
        java.io.EOFException $r6;
        java.lang.Throwable $r7;
        boolean $z0;
        java.util.Map $r8;
        java.lang.Object $r9;
        com.facebook.stetho.inspector.network.AsyncPrettyPrinter r10;

        r0 := @this: com.facebook.stetho.inspector.network.ResponseBodyFileManager;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: android.content.Context mContext>;

        $r4 = staticinvoke <com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.lang.String getFilename(java.lang.String)>($r1);

        $r5 = virtualinvoke $r3.<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>($r4);

     label01:
        $i0 = virtualinvoke $r5.<java.io.InputStream: int read()>();

     label02:
        if $i0 != -1 goto label05;

     label03:
        $r6 = new java.io.EOFException;

        specialinvoke $r6.<java.io.EOFException: void <init>(java.lang.String)>("Failed to read base64Encode byte");

        throw $r6;

     label04:
        $r7 := @caughtexception;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        throw $r7;

     label05:
        r2 = new com.facebook.stetho.inspector.network.ResponseBodyData;

        specialinvoke r2.<com.facebook.stetho.inspector.network.ResponseBodyData: void <init>()>();

     label06:
        if $i0 == 0 goto label11;

        $z0 = 1;

     label07:
        r2.<com.facebook.stetho.inspector.network.ResponseBodyData: boolean base64Encoded> = $z0;

        $r8 = r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.util.Map mRequestIdMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r10 = (com.facebook.stetho.inspector.network.AsyncPrettyPrinter) $r9;

     label08:
        if r10 == null goto label12;

     label09:
        $r1 = specialinvoke r0.<com.facebook.stetho.inspector.network.ResponseBodyFileManager: java.lang.String prettyPrintContentWithTimeOut(com.facebook.stetho.inspector.network.AsyncPrettyPrinter,java.io.InputStream)>(r10, $r5);

        r2.<com.facebook.stetho.inspector.network.ResponseBodyData: java.lang.String data> = $r1;

     label10:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return r2;

     label11:
        $z0 = 0;

        goto label07;

     label12:
        $r1 = staticinvoke <com.facebook.stetho.common.Util: java.lang.String readAsUTF8(java.io.InputStream)>($r5);

        r2.<com.facebook.stetho.inspector.network.ResponseBodyData: java.lang.String data> = $r1;

     label13:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
    }
