com.facebook.stetho.inspector.protocol.module.Database$1 extends java.lang.Object implements com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler
final com.facebook.stetho.inspector.protocol.module.Database this$0
    void <init>(com.facebook.stetho.inspector.protocol.module.Database)
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        com.facebook.stetho.inspector.protocol.module.Database $r1;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $r1 := @parameter0: com.facebook.stetho.inspector.protocol.module.Database;

        r0.<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleInsert(long) throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        long $l0;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse r1;
        java.util.List $r2;
        java.lang.String $r3;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $l0 := @parameter0: long;

        r1 = new com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse;

        specialinvoke r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("ID of last inserted row");

        r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List columnNames> = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List values> = $r2;

        return r1;
    }
    public volatile java.lang.Object handleInsert(long) throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        long $l0;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse $r1;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleInsert(long)>($l0);

        return $r1;
    }
    public com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleRawQuery() throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse r1;
        java.util.List $r2;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        r1 = new com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse;

        specialinvoke r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("success");

        r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List columnNames> = $r2;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("true");

        r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List values> = $r2;

        return r1;
    }
    public volatile java.lang.Object handleRawQuery() throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse $r1;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $r1 = virtualinvoke r0.<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleRawQuery()>();

        return $r1;
    }
    public com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleSelect(android.database.Cursor) throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        android.database.Cursor $r1;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse r2;
        java.lang.String[] $r3;
        java.util.List $r4;
        java.util.ArrayList $r5;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $r1 := @parameter0: android.database.Cursor;

        r2 = new com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse;

        specialinvoke r2.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: void <init>()>();

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        r2.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List columnNames> = $r4;

        $r5 = staticinvoke <com.facebook.stetho.inspector.protocol.module.Database: java.util.ArrayList access$200(android.database.Cursor,int)>($r1, 250);

        r2.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List values> = $r5;

        return r2;
    }
    public volatile java.lang.Object handleSelect(android.database.Cursor) throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        android.database.Cursor $r1;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse $r2;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $r1 := @parameter0: android.database.Cursor;

        $r2 = virtualinvoke r0.<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleSelect(android.database.Cursor)>($r1);

        return $r2;
    }
    public com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleUpdateDelete(int) throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        int $i0;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse r1;
        java.util.List $r2;
        java.lang.String $r3;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $i0 := @parameter0: int;

        r1 = new com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse;

        specialinvoke r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("Modified rows");

        r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List columnNames> = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r1.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: java.util.List values> = $r2;

        return r1;
    }
    public volatile java.lang.Object handleUpdateDelete(int) throws android.database.sqlite.SQLiteException
    {
        com.facebook.stetho.inspector.protocol.module.Database$1 r0;
        int $i0;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse $r1;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database$1;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.facebook.stetho.inspector.protocol.module.Database$1: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse handleUpdateDelete(int)>($i0);

        return $r1;
    }
