com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener extends java.lang.Object implements com.facebook.stetho.inspector.elements.Document$UpdateListener
final com.facebook.stetho.inspector.protocol.module.DOM this$0
    private void <init>(com.facebook.stetho.inspector.protocol.module.DOM)
    {
        com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener r0;
        com.facebook.stetho.inspector.protocol.module.DOM $r1;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener;

        $r1 := @parameter0: com.facebook.stetho.inspector.protocol.module.DOM;

        r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(com.facebook.stetho.inspector.protocol.module.DOM, com.facebook.stetho.inspector.protocol.module.DOM$1)
    {
        com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener r0;
        com.facebook.stetho.inspector.protocol.module.DOM $r1;
        com.facebook.stetho.inspector.protocol.module.DOM$1 $r2;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener;

        $r1 := @parameter0: com.facebook.stetho.inspector.protocol.module.DOM;

        $r2 := @parameter1: com.facebook.stetho.inspector.protocol.module.DOM$1;

        specialinvoke r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: void <init>(com.facebook.stetho.inspector.protocol.module.DOM)>($r1);

        return;
    }
    public void onAttributeModified(java.lang.Object, java.lang.String, java.lang.String)
    {
        com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r3;
        com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent r4;
        com.facebook.stetho.inspector.protocol.module.DOM $r5;
        com.facebook.stetho.inspector.elements.Document $r6;
        java.lang.Integer $r7;
        int $i0;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r8;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        r4 = new com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent;

        specialinvoke r4.<com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>(null);

        $r5 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r6 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.elements.Document access$300(com.facebook.stetho.inspector.protocol.module.DOM)>($r5);

        $r7 = virtualinvoke $r6.<com.facebook.stetho.inspector.elements.Document: java.lang.Integer getNodeIdForElement(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        r4.<com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent: int nodeId> = $i0;

        r4.<com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent: java.lang.String name> = $r2;

        r4.<com.facebook.stetho.inspector.protocol.module.DOM$AttributeModifiedEvent: java.lang.String value> = $r3;

        $r5 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r8 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.helper.ChromePeerManager access$1200(com.facebook.stetho.inspector.protocol.module.DOM)>($r5);

        virtualinvoke $r8.<com.facebook.stetho.inspector.helper.ChromePeerManager: void sendNotificationToPeers(java.lang.String,java.lang.Object)>("DOM.onAttributeModified", r4);

        return;
    }
    public void onAttributeRemoved(java.lang.Object, java.lang.String)
    {
        com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        com.facebook.stetho.inspector.protocol.module.DOM$AttributeRemovedEvent r3;
        com.facebook.stetho.inspector.protocol.module.DOM $r4;
        com.facebook.stetho.inspector.elements.Document $r5;
        java.lang.Integer $r6;
        int $i0;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r7;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        r3 = new com.facebook.stetho.inspector.protocol.module.DOM$AttributeRemovedEvent;

        specialinvoke r3.<com.facebook.stetho.inspector.protocol.module.DOM$AttributeRemovedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>(null);

        $r4 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r5 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.elements.Document access$300(com.facebook.stetho.inspector.protocol.module.DOM)>($r4);

        $r6 = virtualinvoke $r5.<com.facebook.stetho.inspector.elements.Document: java.lang.Integer getNodeIdForElement(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r3.<com.facebook.stetho.inspector.protocol.module.DOM$AttributeRemovedEvent: int nodeId> = $i0;

        r3.<com.facebook.stetho.inspector.protocol.module.DOM$AttributeRemovedEvent: java.lang.String name> = $r2;

        $r4 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r7 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.helper.ChromePeerManager access$1200(com.facebook.stetho.inspector.protocol.module.DOM)>($r4);

        virtualinvoke $r7.<com.facebook.stetho.inspector.helper.ChromePeerManager: void sendNotificationToPeers(java.lang.String,java.lang.Object)>("DOM.attributeRemoved", r3);

        return;
    }
    public void onChildNodeInserted(com.facebook.stetho.inspector.elements.DocumentView, java.lang.Object, int, int, com.facebook.stetho.common.Accumulator)
    {
        com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener r0;
        com.facebook.stetho.inspector.elements.DocumentView $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        com.facebook.stetho.common.Accumulator r3;
        com.facebook.stetho.inspector.protocol.module.DOM $r4;
        com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent $r5;
        com.facebook.stetho.inspector.protocol.module.DOM$Node $r6;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r7;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener;

        $r1 := @parameter0: com.facebook.stetho.inspector.elements.DocumentView;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        r3 := @parameter4: com.facebook.stetho.common.Accumulator;

        $r4 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r5 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent access$1700(com.facebook.stetho.inspector.protocol.module.DOM)>($r4);

        $r5.<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent: int parentNodeId> = $i0;

        $r5.<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent: int previousNodeId> = $i1;

        $r4 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r6 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$Node access$400(com.facebook.stetho.inspector.protocol.module.DOM,java.lang.Object,com.facebook.stetho.inspector.elements.DocumentView,com.facebook.stetho.common.Accumulator)>($r4, $r2, $r1, r3);

        $r5.<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent: com.facebook.stetho.inspector.protocol.module.DOM$Node node> = $r6;

        $r4 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r7 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.helper.ChromePeerManager access$1200(com.facebook.stetho.inspector.protocol.module.DOM)>($r4);

        virtualinvoke $r7.<com.facebook.stetho.inspector.helper.ChromePeerManager: void sendNotificationToPeers(java.lang.String,java.lang.Object)>("DOM.childNodeInserted", $r5);

        $r4 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: void access$1800(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeInsertedEvent)>($r4, $r5);

        return;
    }
    public void onChildNodeRemoved(int, int)
    {
        com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener r0;
        int $i0, $i1;
        com.facebook.stetho.inspector.protocol.module.DOM $r1;
        com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent $r2;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r3;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r2 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent access$1500(com.facebook.stetho.inspector.protocol.module.DOM)>($r1);

        $r2.<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent: int parentNodeId> = $i0;

        $r2.<com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent: int nodeId> = $i1;

        $r1 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r3 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.helper.ChromePeerManager access$1200(com.facebook.stetho.inspector.protocol.module.DOM)>($r1);

        virtualinvoke $r3.<com.facebook.stetho.inspector.helper.ChromePeerManager: void sendNotificationToPeers(java.lang.String,java.lang.Object)>("DOM.childNodeRemoved", $r2);

        $r1 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: void access$1600(com.facebook.stetho.inspector.protocol.module.DOM,com.facebook.stetho.inspector.protocol.module.DOM$ChildNodeRemovedEvent)>($r1, $r2);

        return;
    }
    public void onInspectRequested(java.lang.Object)
    {
        com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener r0;
        java.lang.Object $r1;
        com.facebook.stetho.inspector.protocol.module.DOM$InspectNodeRequestedEvent r2;
        com.facebook.stetho.inspector.protocol.module.DOM $r3;
        com.facebook.stetho.inspector.elements.Document $r4;
        java.lang.Integer $r5;
        java.lang.Object[] $r6;
        int $i0;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r7;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r4 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.elements.Document access$300(com.facebook.stetho.inspector.protocol.module.DOM)>($r3);

        $r5 = virtualinvoke $r4.<com.facebook.stetho.inspector.elements.Document: java.lang.Integer getNodeIdForElement(java.lang.Object)>($r1);

        if $r5 != null goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        staticinvoke <com.facebook.stetho.common.LogUtil: void d(java.lang.String,java.lang.Object[])>("DocumentProvider.Listener.onInspectRequested() called for a non-mapped node: element=%s", $r6);

        return;

     label1:
        r2 = new com.facebook.stetho.inspector.protocol.module.DOM$InspectNodeRequestedEvent;

        specialinvoke r2.<com.facebook.stetho.inspector.protocol.module.DOM$InspectNodeRequestedEvent: void <init>(com.facebook.stetho.inspector.protocol.module.DOM$1)>(null);

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r2.<com.facebook.stetho.inspector.protocol.module.DOM$InspectNodeRequestedEvent: int nodeId> = $i0;

        $r3 = r0.<com.facebook.stetho.inspector.protocol.module.DOM$DocumentUpdateListener: com.facebook.stetho.inspector.protocol.module.DOM this$0>;

        $r7 = staticinvoke <com.facebook.stetho.inspector.protocol.module.DOM: com.facebook.stetho.inspector.helper.ChromePeerManager access$1200(com.facebook.stetho.inspector.protocol.module.DOM)>($r3);

        virtualinvoke $r7.<com.facebook.stetho.inspector.helper.ChromePeerManager: void sendNotificationToPeers(java.lang.String,java.lang.Object)>("DOM.inspectNodeRequested", r2);

        return;
    }
