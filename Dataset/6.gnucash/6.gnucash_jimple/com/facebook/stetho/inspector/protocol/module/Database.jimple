com.facebook.stetho.inspector.protocol.module.Database extends java.lang.Object implements com.facebook.stetho.inspector.protocol.ChromeDevtoolsDomain
private static final int MAX_BLOB_LENGTH
private static final int MAX_EXECUTE_RESULTS
private static final java.lang.String UNKNOWN_BLOB_LABEL
private final com.facebook.stetho.inspector.helper.ChromePeerManager mChromePeerManager
private java.util.List mDatabaseDrivers
private final com.facebook.stetho.json.ObjectMapper mObjectMapper
private final com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener mPeerListener
    public void <init>()
    {
        com.facebook.stetho.inspector.protocol.module.Database r0;
        java.util.ArrayList $r1;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r2;
        com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener $r3;
        java.util.List $r4;
        com.facebook.stetho.json.ObjectMapper $r5;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.facebook.stetho.inspector.protocol.module.Database: java.util.List mDatabaseDrivers> = $r1;

        $r2 = new com.facebook.stetho.inspector.helper.ChromePeerManager;

        specialinvoke $r2.<com.facebook.stetho.inspector.helper.ChromePeerManager: void <init>()>();

        r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.helper.ChromePeerManager mChromePeerManager> = $r2;

        $r3 = new com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener;

        $r4 = r0.<com.facebook.stetho.inspector.protocol.module.Database: java.util.List mDatabaseDrivers>;

        specialinvoke $r3.<com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener: void <init>(java.util.List,com.facebook.stetho.inspector.protocol.module.Database$1)>($r4, null);

        r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener mPeerListener> = $r3;

        $r2 = r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.helper.ChromePeerManager mChromePeerManager>;

        $r3 = r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.protocol.module.Database$DatabasePeerRegistrationListener mPeerListener>;

        virtualinvoke $r2.<com.facebook.stetho.inspector.helper.ChromePeerManager: void setListener(com.facebook.stetho.inspector.helper.PeerRegistrationListener)>($r3);

        $r5 = new com.facebook.stetho.json.ObjectMapper;

        specialinvoke $r5.<com.facebook.stetho.json.ObjectMapper: void <init>()>();

        r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.json.ObjectMapper mObjectMapper> = $r5;

        return;
    }
    static java.util.ArrayList access$200(android.database.Cursor, int)
    {
        android.database.Cursor $r0;
        int $i0;
        java.util.ArrayList $r1;

        $r0 := @parameter0: android.database.Cursor;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <com.facebook.stetho.inspector.protocol.module.Database: java.util.ArrayList flattenRows(android.database.Cursor,int)>($r0, $i0);

        return $r1;
    }
    private static java.lang.String blobToString(byte[])
    {
        byte[] $r0;
        boolean $z0;
        int $i0;
        java.lang.String $r1;
        java.io.UnsupportedEncodingException $r2;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 > 512 goto label4;

        $z0 = staticinvoke <com.facebook.stetho.inspector.protocol.module.Database: boolean fastIsAscii(byte[])>($r0);

        if $z0 == 0 goto label4;

        $r1 = new java.lang.String;

     label1:
        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r0, "US-ASCII");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

     label4:
        return "{blob}";

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    private static boolean fastIsAscii(byte[])
    {
        byte[] $r0;
        byte b0;
        int $i1, $i2, $i3;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label3;

        b0 = $r0[$i3];

        $i2 = b0 & -128;

        if $i2 == 0 goto label2;

        return 0;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return 1;
    }
    private static java.util.ArrayList flattenRows(android.database.Cursor, int)
    {
        android.database.Cursor $r0;
        int $i0, $i1, i2, i3, $i4;
        java.util.ArrayList r1;
        boolean $z0;
        java.lang.String $r2;
        long $l5;
        double $d0;
        byte[] $r3;

        $r0 := @parameter0: android.database.Cursor;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label06;

        $z0 = 1;

     label01:
        staticinvoke <com.facebook.stetho.common.Util: void throwIfNot(boolean)>($z0);

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $i1 = interfaceinvoke $r0.<android.database.Cursor: int getColumnCount()>();

        i2 = 0;

     label02:
        if i2 >= $i0 goto label12;

        $z0 = interfaceinvoke $r0.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label12;

        i3 = 0;

     label03:
        if i3 >= $i1 goto label11;

        $i4 = interfaceinvoke $r0.<android.database.Cursor: int getType(int)>(i3);

        lookupswitch($i4)
        {
            case 0: goto label07;
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label04;
            case 4: goto label10;
            default: goto label04;
        };

     label04:
        $r2 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>(i3);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        $z0 = 0;

        goto label01;

     label07:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        goto label05;

     label08:
        $l5 = interfaceinvoke $r0.<android.database.Cursor: long getLong(int)>(i3);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l5);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        goto label05;

     label09:
        $d0 = interfaceinvoke $r0.<android.database.Cursor: double getDouble(int)>(i3);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        goto label05;

     label10:
        $r3 = interfaceinvoke $r0.<android.database.Cursor: byte[] getBlob(int)>(i3);

        $r2 = staticinvoke <com.facebook.stetho.inspector.protocol.module.Database: java.lang.String blobToString(byte[])>($r3);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        goto label05;

     label11:
        i2 = i2 + 1;

        goto label02;

     label12:
        $z0 = interfaceinvoke $r0.<android.database.Cursor: boolean isAfterLast()>();

        if $z0 != 0 goto label14;

        $i0 = 0;

     label13:
        if $i0 >= $i1 goto label14;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>("{truncated}");

        $i0 = $i0 + 1;

        goto label13;

     label14:
        return r1;
    }
    private com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver getDatabasePeer(java.lang.String)
    {
        com.facebook.stetho.inspector.protocol.module.Database r0;
        java.lang.String $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver r5;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.facebook.stetho.inspector.protocol.module.Database: java.util.List mDatabaseDrivers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver) $r4;

        $r2 = virtualinvoke r5.<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: java.util.List getDatabaseNames()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r5;

     label2:
        return null;
    }
    public void add(com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver)
    {
        com.facebook.stetho.inspector.protocol.module.Database r0;
        com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver $r1;
        java.util.List $r2;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database;

        $r1 := @parameter0: com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver;

        $r2 = r0.<com.facebook.stetho.inspector.protocol.module.Database: java.util.List mDatabaseDrivers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void disable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer, org.json.JSONObject)
    {
        com.facebook.stetho.inspector.protocol.module.Database r0;
        com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer $r1;
        org.json.JSONObject $r2;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r3;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database;

        $r1 := @parameter0: com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer;

        $r2 := @parameter1: org.json.JSONObject;

        $r3 = r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.helper.ChromePeerManager mChromePeerManager>;

        virtualinvoke $r3.<com.facebook.stetho.inspector.helper.ChromePeerManager: void removePeer(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>($r1);

        return;
    }
    public void enable(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer, org.json.JSONObject)
    {
        com.facebook.stetho.inspector.protocol.module.Database r0;
        com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer $r1;
        org.json.JSONObject $r2;
        com.facebook.stetho.inspector.helper.ChromePeerManager $r3;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database;

        $r1 := @parameter0: com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer;

        $r2 := @parameter1: org.json.JSONObject;

        $r3 = r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.helper.ChromePeerManager mChromePeerManager>;

        virtualinvoke $r3.<com.facebook.stetho.inspector.helper.ChromePeerManager: boolean addPeer(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer)>($r1);

        return;
    }
    public com.facebook.stetho.inspector.jsonrpc.JsonRpcResult executeSQL(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer, org.json.JSONObject)
    {
        com.facebook.stetho.inspector.protocol.module.Database r0;
        com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer $r1;
        org.json.JSONObject $r2;
        java.lang.String r3, r6;
        android.database.sqlite.SQLiteException r4;
        com.facebook.stetho.inspector.protocol.module.Database$Error r5;
        com.facebook.stetho.inspector.protocol.module.Database$1 $r7;
        com.facebook.stetho.json.ObjectMapper $r8;
        java.lang.Object $r9;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLRequest r10;
        com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver $r11;
        com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse $r12;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database;

        $r1 := @parameter0: com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer;

        $r2 := @parameter1: org.json.JSONObject;

        $r8 = r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.json.ObjectMapper mObjectMapper>;

        $r9 = virtualinvoke $r8.<com.facebook.stetho.json.ObjectMapper: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>($r2, class "Lcom/facebook/stetho/inspector/protocol/module/Database$ExecuteSQLRequest;");

        r10 = (com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLRequest) $r9;

        r3 = r10.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLRequest: java.lang.String databaseId>;

        r6 = r10.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLRequest: java.lang.String query>;

        $r11 = specialinvoke r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver getDatabasePeer(java.lang.String)>(r3);

        r3 = r10.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLRequest: java.lang.String databaseId>;

        r6 = r10.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLRequest: java.lang.String query>;

        $r7 = new com.facebook.stetho.inspector.protocol.module.Database$1;

     label1:
        specialinvoke $r7.<com.facebook.stetho.inspector.protocol.module.Database$1: void <init>(com.facebook.stetho.inspector.protocol.module.Database)>(r0);

        $r12 = virtualinvoke $r11.<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse executeSQL(java.lang.String,java.lang.String,com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver$ExecuteResultHandler)>(r3, r6, $r7);

     label2:
        return $r12;

     label3:
        r4 := @caughtexception;

        r5 = new com.facebook.stetho.inspector.protocol.module.Database$Error;

        specialinvoke r5.<com.facebook.stetho.inspector.protocol.module.Database$Error: void <init>()>();

        r5.<com.facebook.stetho.inspector.protocol.module.Database$Error: int code> = 0;

        r3 = virtualinvoke r4.<android.database.sqlite.SQLiteException: java.lang.String getMessage()>();

        r5.<com.facebook.stetho.inspector.protocol.module.Database$Error: java.lang.String message> = r3;

        $r12 = new com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse;

        specialinvoke $r12.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: void <init>()>();

        $r12.<com.facebook.stetho.inspector.protocol.module.Database$ExecuteSQLResponse: com.facebook.stetho.inspector.protocol.module.Database$Error sqlError> = r5;

        return $r12;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }
    public com.facebook.stetho.inspector.jsonrpc.JsonRpcResult getDatabaseTableNames(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer, org.json.JSONObject) throws com.facebook.stetho.inspector.jsonrpc.JsonRpcException
    {
        com.facebook.stetho.inspector.protocol.module.Database r0;
        com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer $r1;
        org.json.JSONObject $r2;
        java.lang.String r3;
        android.database.sqlite.SQLiteException r4;
        com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesResponse r5;
        com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode $r6;
        com.facebook.stetho.json.ObjectMapper $r7;
        java.lang.Object $r8;
        com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesRequest r9;
        com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver $r10;
        java.util.List $r11;
        com.facebook.stetho.inspector.jsonrpc.JsonRpcException $r12;
        com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError $r13;

        r0 := @this: com.facebook.stetho.inspector.protocol.module.Database;

        $r1 := @parameter0: com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer;

        $r2 := @parameter1: org.json.JSONObject;

        $r7 = r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.json.ObjectMapper mObjectMapper>;

        $r8 = virtualinvoke $r7.<com.facebook.stetho.json.ObjectMapper: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>($r2, class "Lcom/facebook/stetho/inspector/protocol/module/Database$GetDatabaseTableNamesRequest;");

        r9 = (com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesRequest) $r8;

        r3 = r9.<com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesRequest: java.lang.String databaseId>;

        $r10 = specialinvoke r0.<com.facebook.stetho.inspector.protocol.module.Database: com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver getDatabasePeer(java.lang.String)>(r3);

        r5 = new com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesResponse;

     label1:
        specialinvoke r5.<com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesResponse: void <init>(com.facebook.stetho.inspector.protocol.module.Database$1)>(null);

     label2:
        r3 = r9.<com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesRequest: java.lang.String databaseId>;

     label3:
        $r11 = virtualinvoke $r10.<com.facebook.stetho.inspector.protocol.module.Database$DatabaseDriver: java.util.List getTableNames(java.lang.String)>(r3);

     label4:
        r5.<com.facebook.stetho.inspector.protocol.module.Database$GetDatabaseTableNamesResponse: java.util.List tableNames> = $r11;

        return r5;

     label5:
        r4 := @caughtexception;

        $r12 = new com.facebook.stetho.inspector.jsonrpc.JsonRpcException;

        $r13 = new com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError;

        $r6 = <com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode INVALID_REQUEST>;

        r3 = virtualinvoke r4.<android.database.sqlite.SQLiteException: java.lang.String toString()>();

        specialinvoke $r13.<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode,java.lang.String,org.json.JSONObject)>($r6, r3, null);

        specialinvoke $r12.<com.facebook.stetho.inspector.jsonrpc.JsonRpcException: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError)>($r13);

        throw $r12;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label5;
        catch android.database.sqlite.SQLiteException from label3 to label4 with label5;
    }
