com.facebook.stetho.inspector.MethodDispatcher extends java.lang.Object
private final java.lang.Iterable mDomainHandlers
private java.util.Map mMethods
private final com.facebook.stetho.json.ObjectMapper mObjectMapper
    public void <init>(com.facebook.stetho.json.ObjectMapper, java.lang.Iterable)
    {
        com.facebook.stetho.inspector.MethodDispatcher r0;
        com.facebook.stetho.json.ObjectMapper $r1;
        java.lang.Iterable r2;

        r0 := @this: com.facebook.stetho.inspector.MethodDispatcher;

        $r1 := @parameter0: com.facebook.stetho.json.ObjectMapper;

        r2 := @parameter1: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.facebook.stetho.inspector.MethodDispatcher: com.facebook.stetho.json.ObjectMapper mObjectMapper> = $r1;

        r0.<com.facebook.stetho.inspector.MethodDispatcher: java.lang.Iterable mDomainHandlers> = r2;

        return;
    }
    private static java.util.Map buildDispatchTable(com.facebook.stetho.json.ObjectMapper, java.lang.Iterable)
    {
        com.facebook.stetho.json.ObjectMapper $r0;
        java.lang.Iterable r1;
        com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper r2;
        java.lang.reflect.Method r3;
        java.util.HashMap r4;
        int $i0, $i1;
        java.lang.Object $r5;
        java.util.Iterator $r6;
        boolean $z0;
        com.facebook.stetho.inspector.protocol.ChromeDevtoolsDomain r7;
        java.lang.Class $r8;
        java.lang.String $r9, $r12;
        java.lang.reflect.Method[] $r10;
        java.lang.StringBuilder $r11;
        java.util.Map $r13;

        $r0 := @parameter0: com.facebook.stetho.json.ObjectMapper;

        r1 := @parameter1: java.lang.Iterable;

        staticinvoke <com.facebook.stetho.common.Util: java.lang.Object throwIfNull(java.lang.Object)>($r0);

        r4 = new java.util.HashMap;

        specialinvoke r4.<java.util.HashMap: void <init>()>();

        $r5 = staticinvoke <com.facebook.stetho.common.Util: java.lang.Object throwIfNull(java.lang.Object)>(r1);

        r1 = (java.lang.Iterable) $r5;

        $r6 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.facebook.stetho.inspector.protocol.ChromeDevtoolsDomain) $r5;

        $r8 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r10;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label1;

        r3 = $r10[$i1];

        $z0 = staticinvoke <com.facebook.stetho.inspector.MethodDispatcher: boolean isDevtoolsMethod(java.lang.reflect.Method)>(r3);

        if $z0 == 0 goto label3;

        r2 = new com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper;

        specialinvoke r2.<com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper: void <init>(com.facebook.stetho.json.ObjectMapper,com.facebook.stetho.inspector.protocol.ChromeDevtoolsDomain,java.lang.reflect.Method)>($r0, r7, r3);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r2);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r13 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r4);

        return $r13;
    }
    private com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper findMethodDispatcher(java.lang.String)
    {
        com.facebook.stetho.inspector.MethodDispatcher r0;
        java.lang.String $r1;
        java.lang.Iterable $r2;
        java.util.Map $r3;
        com.facebook.stetho.json.ObjectMapper $r4;
        java.lang.Object $r5;
        com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.facebook.stetho.inspector.MethodDispatcher;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = r0.<com.facebook.stetho.inspector.MethodDispatcher: java.util.Map mMethods>;

        if $r3 != null goto label2;

        $r4 = r0.<com.facebook.stetho.inspector.MethodDispatcher: com.facebook.stetho.json.ObjectMapper mObjectMapper>;

        $r2 = r0.<com.facebook.stetho.inspector.MethodDispatcher: java.lang.Iterable mDomainHandlers>;

        $r3 = staticinvoke <com.facebook.stetho.inspector.MethodDispatcher: java.util.Map buildDispatchTable(com.facebook.stetho.json.ObjectMapper,java.lang.Iterable)>($r4, $r2);

        r0.<com.facebook.stetho.inspector.MethodDispatcher: java.util.Map mMethods> = $r3;

     label2:
        $r3 = r0.<com.facebook.stetho.inspector.MethodDispatcher: java.util.Map mMethods>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper) $r5;

     label3:
        exitmonitor r0;

        return $r6;

     label4:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    private static boolean isDevtoolsMethod(java.lang.reflect.Method) throws java.lang.IllegalArgumentException
    {
        java.lang.reflect.Method $r0;
        boolean $z0;
        java.lang.Class[] $r1;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3, $r8;
        java.lang.String $r4, $r7;
        int $i0;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;

        $r0 := @parameter0: java.lang.reflect.Method;

        $z0 = virtualinvoke $r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/facebook/stetho/inspector/protocol/ChromeDevtoolsMethod;");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = lengthof $r1;

        if $i0 != 2 goto label4;

        $z0 = 1;

     label2:
        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r4;

        $i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        staticinvoke <com.facebook.stetho.common.Util: void throwIfNot(boolean,java.lang.String,java.lang.Object[])>($z0, "%s: expected 2 args, got %s", $r5);

        $r3 = $r1[0];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/facebook/stetho/inspector/jsonrpc/JsonRpcPeer;");

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r4;

        $r3 = $r1[0];

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r7;

        staticinvoke <com.facebook.stetho.common.Util: void throwIfNot(boolean,java.lang.String,java.lang.Object[])>($z0, "%s: expected 1st arg of JsonRpcPeer, got %s", $r5);

        $r3 = $r1[1];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/json/JSONObject;");

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r4;

        $r3 = $r1[1];

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r7;

        staticinvoke <com.facebook.stetho.common.Util: void throwIfNot(boolean,java.lang.String,java.lang.Object[])>($z0, "%s: expected 2nd arg of JSONObject, got %s", $r5);

        $r3 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r8 = <java.lang.Void: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

        $r8 = class "Lcom/facebook/stetho/inspector/jsonrpc/JsonRpcResult;";

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r4;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r4;

        staticinvoke <com.facebook.stetho.common.Util: void throwIfNot(boolean,java.lang.String,java.lang.Object[])>($z0, "%s: expected JsonRpcResult return type, got %s", $r5);

     label3:
        return 1;

     label4:
        $z0 = 0;

        goto label2;
    }
    public org.json.JSONObject dispatch(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer, java.lang.String, org.json.JSONObject) throws com.facebook.stetho.inspector.jsonrpc.JsonRpcException
    {
        com.facebook.stetho.inspector.MethodDispatcher r0;
        com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer $r1;
        java.lang.String $r2;
        org.json.JSONObject $r3;
        com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper $r4;
        com.facebook.stetho.inspector.jsonrpc.JsonRpcException $r5;
        com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError $r6;
        com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode $r7;
        java.lang.StringBuilder $r8;
        java.lang.reflect.InvocationTargetException r9;
        java.lang.Throwable $r10;
        java.lang.RuntimeException $r11;
        java.lang.IllegalAccessException r12;
        org.json.JSONException r13;

        r0 := @this: com.facebook.stetho.inspector.MethodDispatcher;

        $r1 := @parameter0: com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.json.JSONObject;

        $r4 = specialinvoke r0.<com.facebook.stetho.inspector.MethodDispatcher: com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper findMethodDispatcher(java.lang.String)>($r2);

        if $r4 != null goto label1;

        $r5 = new com.facebook.stetho.inspector.jsonrpc.JsonRpcException;

        $r6 = new com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError;

        $r7 = <com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode METHOD_NOT_FOUND>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not implemented: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode,java.lang.String,org.json.JSONObject)>($r7, $r2, null);

        specialinvoke $r5.<com.facebook.stetho.inspector.jsonrpc.JsonRpcException: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError)>($r6);

        throw $r5;

     label1:
        $r3 = virtualinvoke $r4.<com.facebook.stetho.inspector.MethodDispatcher$MethodDispatchHelper: org.json.JSONObject invoke(com.facebook.stetho.inspector.jsonrpc.JsonRpcPeer,org.json.JSONObject)>($r1, $r3);

     label2:
        return $r3;

     label3:
        r9 := @caughtexception;

        $r10 = virtualinvoke r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        staticinvoke <com.facebook.stetho.common.ExceptionUtil: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>($r10, class "Lcom/facebook/stetho/inspector/jsonrpc/JsonRpcException;");

        $r11 = staticinvoke <com.facebook.stetho.common.ExceptionUtil: java.lang.RuntimeException propagate(java.lang.Throwable)>($r10);

        throw $r11;

     label4:
        r12 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r12);

        throw $r11;

     label5:
        r13 := @caughtexception;

        $r5 = new com.facebook.stetho.inspector.jsonrpc.JsonRpcException;

        $r6 = new com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError;

        $r7 = <com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode: com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode INTERNAL_ERROR>;

        $r2 = virtualinvoke r13.<org.json.JSONException: java.lang.String toString()>();

        specialinvoke $r6.<com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError$ErrorCode,java.lang.String,org.json.JSONObject)>($r7, $r2, null);

        specialinvoke $r5.<com.facebook.stetho.inspector.jsonrpc.JsonRpcException: void <init>(com.facebook.stetho.inspector.jsonrpc.protocol.JsonRpcError)>($r6);

        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch org.json.JSONException from label1 to label2 with label5;
    }
