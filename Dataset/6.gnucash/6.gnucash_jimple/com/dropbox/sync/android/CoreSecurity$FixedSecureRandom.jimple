com.dropbox.sync.android.CoreSecurity$FixedSecureRandom extends java.security.SecureRandom
private static final byte[] BUILD_FINGERPRINT_AND_DEVICE_SERIAL
public static final long serialVersionUID
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = staticinvoke <com.dropbox.sync.android.CoreSecurity$FixedSecureRandom: byte[] getBuildFingerprintAndDeviceSerial()>();

        <com.dropbox.sync.android.CoreSecurity$FixedSecureRandom: byte[] BUILD_FINGERPRINT_AND_DEVICE_SERIAL> = $r0;

        return;
    }
    void <init>()
    {
        com.dropbox.sync.android.CoreSecurity$FixedSecureRandom r0;
        com.dropbox.sync.android.CoreSecurity$FixedSecureRandom$LinuxPRNGSecureRandom $r1;
        com.dropbox.sync.android.CoreSecurity$FixedSecureRandom$LinuxPRNGSecureRandomProvider $r2;

        r0 := @this: com.dropbox.sync.android.CoreSecurity$FixedSecureRandom;

        $r1 = new com.dropbox.sync.android.CoreSecurity$FixedSecureRandom$LinuxPRNGSecureRandom;

        specialinvoke $r1.<com.dropbox.sync.android.CoreSecurity$FixedSecureRandom$LinuxPRNGSecureRandom: void <init>()>();

        $r2 = new com.dropbox.sync.android.CoreSecurity$FixedSecureRandom$LinuxPRNGSecureRandomProvider;

        specialinvoke $r2.<com.dropbox.sync.android.CoreSecurity$FixedSecureRandom$LinuxPRNGSecureRandomProvider: void <init>()>();

        specialinvoke r0.<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider)>($r1, $r2);

        return;
    }
    static byte[] access$100()
    {
        byte[] $r0;

        $r0 = staticinvoke <com.dropbox.sync.android.CoreSecurity$FixedSecureRandom: byte[] generateSeed()>();

        return $r0;
    }
    private static byte[] generateSeed()
    {
        java.io.IOException r0;
        java.io.ByteArrayOutputStream r1;
        java.io.DataOutputStream r2;
        long $l0;
        int $i1;
        byte[] $r3;
        java.lang.SecurityException $r4;

        r1 = new java.io.ByteArrayOutputStream;

     label1:
        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label2:
        r2 = new java.io.DataOutputStream;

     label3:
        specialinvoke r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeLong(long)>($l0);

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeLong(long)>($l0);

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i1);

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i1);

     label4:
        $r3 = <com.dropbox.sync.android.CoreSecurity$FixedSecureRandom: byte[] BUILD_FINGERPRINT_AND_DEVICE_SERIAL>;

     label5:
        virtualinvoke r2.<java.io.DataOutputStream: void write(byte[])>($r3);

        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

        $r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label6:
        return $r3;

     label7:
        r0 := @caughtexception;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to generate seed", r0);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }
    private static byte[] getBuildFingerprintAndDeviceSerial()
    {
        java.io.UnsupportedEncodingException r0;
        java.lang.String r1;
        java.lang.StringBuilder r2;
        byte[] $r3;
        com.dropbox.sync.android.DbxRuntimeException$System $r4;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r1 = <android.os.Build: java.lang.String FINGERPRINT>;

        if r1 == null goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label1:
        r1 = staticinvoke <com.dropbox.sync.android.CoreSecurity$FixedSecureRandom: java.lang.String getDeviceSerialNumber()>();

        if r1 == null goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label2:
        r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label3:
        return $r3;

     label4:
        r0 := @caughtexception;

        $r4 = new com.dropbox.sync.android.DbxRuntimeException$System;

        specialinvoke $r4.<com.dropbox.sync.android.DbxRuntimeException$System: void <init>(java.lang.String)>("UTF-8 encoding not supported");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }
    private static java.lang.String getDeviceSerialNumber()
    {
        java.lang.Exception r0;
        java.lang.Class $r1;
        java.lang.reflect.Field $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        $r1 = class "Landroid/os/Build;";

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("SERIAL");

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r4 = (java.lang.String) $r3;

     label2:
        return $r4;

     label3:
        r0 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
