com.dropbox.sync.android.CoreSecurity extends java.lang.Object
private static final java.lang.String TAG
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lcom/dropbox/sync/android/CoreSecurity;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <com.dropbox.sync.android.CoreSecurity: java.lang.String TAG> = $r0;

        return;
    }
    private void <init>()
    {
        com.dropbox.sync.android.CoreSecurity r0;

        r0 := @this: com.dropbox.sync.android.CoreSecurity;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.String access$000()
    {
        java.lang.String r0;

        r0 = <com.dropbox.sync.android.CoreSecurity: java.lang.String TAG>;

        return r0;
    }
    public static java.security.SecureRandom getSecureRandom()
    {
        com.dropbox.sync.android.CoreLogger $r0;
        int $i0;
        java.lang.String $r1;
        com.dropbox.sync.android.CoreSecurity$FixedSecureRandom $r2;
        java.security.SecureRandom $r3;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 > 18 goto label1;

        $r0 = staticinvoke <com.dropbox.sync.android.CoreLogger: com.dropbox.sync.android.CoreLogger getGlobal()>();

        $r1 = <com.dropbox.sync.android.CoreSecurity: java.lang.String TAG>;

        virtualinvoke $r0.<com.dropbox.sync.android.CoreLogger: void d(java.lang.String,java.lang.String)>($r1, "Using LinuxPRNGSecureRandom to work around OpenSSL seeding issue.");

        $r2 = new com.dropbox.sync.android.CoreSecurity$FixedSecureRandom;

        specialinvoke $r2.<com.dropbox.sync.android.CoreSecurity$FixedSecureRandom: void <init>()>();

        return $r2;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        return $r3;
    }
