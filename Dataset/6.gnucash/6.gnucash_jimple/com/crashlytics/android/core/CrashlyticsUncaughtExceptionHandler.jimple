com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler
private static final int ANALYZER_VERSION
static final java.io.FilenameFilter ANY_SESSION_FILENAME_FILTER
static final java.lang.String CLS_CRASH_MARKER_FILE_NAME
private static final java.lang.String EVENT_TYPE_CRASH
private static final java.lang.String EVENT_TYPE_LOGGED
private static final java.lang.String GENERATOR_FORMAT
static final java.lang.String INVALID_CLS_CACHE_DIR
static final java.util.Comparator LARGEST_FILE_NAME_FIRST
private static final int MAX_COMPLETE_SESSIONS_COUNT
private static final int MAX_LOCAL_LOGGED_EXCEPTIONS
static final int MAX_OPEN_SESSIONS
private static final java.util.Map SEND_AT_CRASHTIME_HEADER
static final java.lang.String SESSION_APP_TAG
static final java.lang.String SESSION_BEGIN_TAG
static final java.lang.String SESSION_DEVICE_TAG
static final java.lang.String SESSION_FATAL_TAG
static final java.io.FilenameFilter SESSION_FILE_FILTER
private static final java.util.regex.Pattern SESSION_FILE_PATTERN
private static final int SESSION_ID_LENGTH
static final java.lang.String SESSION_NON_FATAL_TAG
static final java.lang.String SESSION_OS_TAG
static final java.lang.String SESSION_USER_TAG
static final java.util.Comparator SMALLEST_FILE_NAME_FIRST
private final com.crashlytics.android.core.CrashlyticsCore crashlyticsCore
private final java.lang.Thread$UncaughtExceptionHandler defaultHandler
private final java.util.concurrent.atomic.AtomicInteger eventCounter
private final com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper
private final java.io.File filesDir
private final io.fabric.sdk.android.services.common.IdManager idManager
private final java.util.concurrent.atomic.AtomicBoolean isHandlingException
private final com.crashlytics.android.core.LogFileManager logFileManager
private boolean powerConnected
private final android.content.BroadcastReceiver powerConnectedReceiver
private final android.content.BroadcastReceiver powerDisconnectedReceiver
private final java.util.concurrent.atomic.AtomicBoolean receiversRegistered
private final com.crashlytics.android.core.SessionDataWriter sessionDataWriter
    static void <clinit>()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$1 $r0;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$2 $r1;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$3 $r2;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$4 $r3;
        java.util.regex.Pattern $r4;
        java.util.Map $r5;

        $r0 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$1;

        specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$1: void <init>()>();

        <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.FilenameFilter SESSION_FILE_FILTER> = $r0;

        $r1 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$2;

        specialinvoke $r1.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$2: void <init>()>();

        <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator LARGEST_FILE_NAME_FIRST> = $r1;

        $r2 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$3;

        specialinvoke $r2.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$3: void <init>()>();

        <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator SMALLEST_FILE_NAME_FIRST> = $r2;

        $r3 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$4;

        specialinvoke $r3.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$4: void <init>()>();

        <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.FilenameFilter ANY_SESSION_FILENAME_FILTER> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([\\d|A-Z|a-z]{12}\\-[\\d|A-Z|a-z]{4}\\-[\\d|A-Z|a-z]{4}\\-[\\d|A-Z|a-z]{12}).+");

        <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.regex.Pattern SESSION_FILE_PATTERN> = $r4;

        $r5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("X-CRASHLYTICS-SEND-FLAGS", "1");

        <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Map SEND_AT_CRASHTIME_HEADER> = $r5;

        return;
    }
    void <init>(java.lang.Thread$UncaughtExceptionHandler, com.crashlytics.android.core.CrashlyticsListener, com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper, io.fabric.sdk.android.services.common.IdManager, com.crashlytics.android.core.SessionDataWriter, com.crashlytics.android.core.CrashlyticsCore)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;
        com.crashlytics.android.core.CrashlyticsListener $r2;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r3;
        io.fabric.sdk.android.services.common.IdManager $r4;
        com.crashlytics.android.core.SessionDataWriter $r5;
        com.crashlytics.android.core.CrashlyticsCore $r6;
        android.content.IntentFilter r7, r8;
        java.io.File $r9;
        java.util.concurrent.atomic.AtomicInteger $r10;
        java.util.concurrent.atomic.AtomicBoolean $r11;
        com.crashlytics.android.core.LogFileManager $r12;
        android.content.Context $r13;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$5 $r14;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$6 $r15;
        android.content.BroadcastReceiver $r16;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        $r2 := @parameter1: com.crashlytics.android.core.CrashlyticsListener;

        $r3 := @parameter2: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper;

        $r4 := @parameter3: io.fabric.sdk.android.services.common.IdManager;

        $r5 := @parameter4: com.crashlytics.android.core.SessionDataWriter;

        $r6 := @parameter5: com.crashlytics.android.core.CrashlyticsCore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicInteger eventCounter> = $r10;

        $r11 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean receiversRegistered> = $r11;

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.Thread$UncaughtExceptionHandler defaultHandler> = $r1;

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper> = $r3;

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: io.fabric.sdk.android.services.common.IdManager idManager> = $r4;

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore> = $r6;

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.SessionDataWriter sessionDataWriter> = $r5;

        $r11 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean isHandlingException> = $r11;

        $r9 = virtualinvoke $r6.<com.crashlytics.android.core.CrashlyticsCore: java.io.File getSdkDirectory()>();

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir> = $r9;

        $r12 = new com.crashlytics.android.core.LogFileManager;

        $r13 = virtualinvoke $r6.<com.crashlytics.android.core.CrashlyticsCore: android.content.Context getContext()>();

        $r9 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        specialinvoke $r12.<com.crashlytics.android.core.LogFileManager: void <init>(android.content.Context,java.io.File)>($r13, $r9);

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.LogFileManager logFileManager> = $r12;

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void notifyCrashlyticsListenerOfPreviousCrash(com.crashlytics.android.core.CrashlyticsListener)>($r2);

        $r14 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$5;

        specialinvoke $r14.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$5: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)>(r0);

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: android.content.BroadcastReceiver powerConnectedReceiver> = $r14;

        r7 = new android.content.IntentFilter;

        specialinvoke r7.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.ACTION_POWER_CONNECTED");

        $r15 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$6;

        specialinvoke $r15.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$6: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)>(r0);

        r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: android.content.BroadcastReceiver powerDisconnectedReceiver> = $r15;

        r8 = new android.content.IntentFilter;

        specialinvoke r8.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.ACTION_POWER_DISCONNECTED");

        $r13 = virtualinvoke $r6.<com.crashlytics.android.core.CrashlyticsCore: android.content.Context getContext()>();

        $r16 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: android.content.BroadcastReceiver powerConnectedReceiver>;

        virtualinvoke $r13.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r16, r7);

        $r16 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: android.content.BroadcastReceiver powerDisconnectedReceiver>;

        virtualinvoke $r13.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r16, r8);

        $r11 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean receiversRegistered>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }
    static java.util.regex.Pattern access$000()
    {
        java.util.regex.Pattern r0;

        r0 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.regex.Pattern SESSION_FILE_PATTERN>;

        return r0;
    }
    static void access$1000(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler, com.crashlytics.android.core.internal.models.SessionEventData) throws java.io.IOException
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        com.crashlytics.android.core.internal.models.SessionEventData $r1;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter1: com.crashlytics.android.core.internal.models.SessionEventData;

        specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeExternalCrashEvent(com.crashlytics.android.core.internal.models.SessionEventData)>($r1);

        return;
    }
    static boolean access$102(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler, boolean)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        boolean $z0;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $z0 := @parameter1: boolean;

        $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: boolean powerConnected> = $z0;

        return $z0;
    }
    static void access$1100(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler, boolean) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        boolean $z0;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void doCloseSessions(boolean)>($z0);

        return;
    }
    static java.io.File[] access$1300(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler, java.io.FilenameFilter)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        java.io.FilenameFilter $r1;
        java.io.File[] $r2;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter1: java.io.FilenameFilter;

        $r2 = specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r1);

        return $r2;
    }
    static java.util.Map access$1400()
    {
        java.util.Map r0;

        r0 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Map SEND_AT_CRASHTIME_HEADER>;

        return r0;
    }
    static void access$200(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler, java.util.Date, java.lang.Thread, java.lang.Throwable) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        java.util.Date $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter1: java.util.Date;

        $r2 := @parameter2: java.lang.Thread;

        $r3 := @parameter3: java.lang.Throwable;

        specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void handleUncaughtException(java.util.Date,java.lang.Thread,java.lang.Throwable)>($r1, $r2, $r3);

        return;
    }
    static java.util.concurrent.atomic.AtomicBoolean access$300(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        java.util.concurrent.atomic.AtomicBoolean r1;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        r1 = $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean isHandlingException>;

        return r1;
    }
    static com.crashlytics.android.core.LogFileManager access$400(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        com.crashlytics.android.core.LogFileManager r1;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        r1 = $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.LogFileManager logFileManager>;

        return r1;
    }
    static void access$500(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler, java.util.Date, java.lang.Thread, java.lang.Throwable)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        java.util.Date $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter1: java.util.Date;

        $r2 := @parameter2: java.lang.Thread;

        $r3 := @parameter3: java.lang.Throwable;

        specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void doWriteNonFatal(java.util.Date,java.lang.Thread,java.lang.Throwable)>($r1, $r2, $r3);

        return;
    }
    static java.lang.String access$600(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getCurrentSessionId()>();

        return $r1;
    }
    static java.io.File access$700(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        java.io.File r1;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        r1 = $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        return r1;
    }
    static void access$800(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        specialinvoke $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void doOpenSession()>();

        return;
    }
    static com.crashlytics.android.core.CrashlyticsCore access$900(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler $r0;
        com.crashlytics.android.core.CrashlyticsCore r1;

        $r0 := @parameter0: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        r1 = $r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        return r1;
    }
    private void closeWithoutRenamingOrLog(com.crashlytics.android.core.ClsFileOutputStream)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.ClsFileOutputStream $r1;
        java.io.IOException r2;
        io.fabric.sdk.android.Logger $r3;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: com.crashlytics.android.core.ClsFileOutputStream;

        if $r1 == null goto label4;

     label1:
        virtualinvoke $r1.<com.crashlytics.android.core.ClsFileOutputStream: void closeInProgressStream()>();

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r3.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Error closing session file stream in the presence of an exception", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    private void deleteLegacyInvalidCacheDir()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File r1, r2;
        int i0, i1;
        com.crashlytics.android.core.CrashlyticsCore $r3;
        boolean $z0;
        java.io.File[] $r4;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        r1 = new java.io.File;

        $r3 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        r2 = virtualinvoke $r3.<com.crashlytics.android.core.CrashlyticsCore: java.io.File getSdkDirectory()>();

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "invalidClsFiles");

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r4[i1];

        virtualinvoke r2.<java.io.File: boolean delete()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.File: boolean delete()>();

     label3:
        return;
    }
    private void deleteSessionPartFilesFor(java.lang.String)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1;
        java.io.File r2;
        int i0, i1;
        java.io.File[] $r3;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        $r3 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listSessionPartFilesFor(java.lang.String)>($r1);

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r3[i1];

        virtualinvoke r2.<java.io.File: boolean delete()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void doCloseSessions(boolean) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        boolean $z0;
        int i0, i2, $i3;
        java.io.File r1;
        byte b1;
        java.io.File[] $r2;
        java.util.Comparator $r3;
        java.lang.String $r4, $r9;
        com.crashlytics.android.core.CrashlyticsCore $r5;
        io.fabric.sdk.android.services.settings.SessionSettingsData $r6;
        io.fabric.sdk.android.Logger $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label3;

        b1 = 1;

     label1:
        i0 = b1 + 8;

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void trimOpenSessions(int)>(i0);

        $r2 = virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listSessionBeginFiles()>();

        $r3 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator LARGEST_FILE_NAME_FIRST>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r3);

        i0 = lengthof $r2;

        if i0 <= b1 goto label5;

        r1 = $r2[b1];

        $r4 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getSessionIdFromSessionFile(java.io.File)>(r1);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeSessionUser(java.lang.String)>($r4);

        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r6 = virtualinvoke $r5.<com.crashlytics.android.core.CrashlyticsCore: io.fabric.sdk.android.services.settings.SessionSettingsData getSessionSettingsData()>();

        if $r6 == null goto label4;

        i0 = $r6.<io.fabric.sdk.android.services.settings.SessionSettingsData: int maxCustomExceptionEvents>;

        $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "Closing open sessions.");

        i2 = b1;

     label2:
        $i3 = lengthof $r2;

        if i2 >= $i3 goto label6;

        r1 = $r2[i2];

        $r4 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getSessionIdFromSessionFile(java.io.File)>(r1);

        $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing session: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r9);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeSessionPartsToSessionFile(java.io.File,java.lang.String,int)>(r1, $r4, i0);

        i2 = i2 + 1;

        goto label2;

     label3:
        b1 = 0;

        goto label1;

     label4:
        $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "Unable to close session. Settings are not loaded.");

        return;

     label5:
        $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "No open sessions to be closed.");

     label6:
        return;
    }
    private void doOpenSession() throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.util.Date r1;
        com.crashlytics.android.core.CLSUUID $r2;
        io.fabric.sdk.android.services.common.IdManager $r3;
        java.lang.String $r4, $r7;
        io.fabric.sdk.android.Logger $r5;
        java.lang.StringBuilder $r6;
        com.crashlytics.android.core.LogFileManager $r8;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        r1 = new java.util.Date;

        specialinvoke r1.<java.util.Date: void <init>()>();

        $r2 = new com.crashlytics.android.core.CLSUUID;

        $r3 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: io.fabric.sdk.android.services.common.IdManager idManager>;

        specialinvoke $r2.<com.crashlytics.android.core.CLSUUID: void <init>(io.fabric.sdk.android.services.common.IdManager)>($r3);

        $r4 = virtualinvoke $r2.<com.crashlytics.android.core.CLSUUID: java.lang.String toString()>();

        $r5 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening an new session with ID ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r7);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeBeginSession(java.lang.String,java.util.Date)>($r4, r1);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeSessionApp(java.lang.String)>($r4);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeSessionOS(java.lang.String)>($r4);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeSessionDevice(java.lang.String)>($r4);

        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.LogFileManager logFileManager>;

        virtualinvoke $r8.<com.crashlytics.android.core.LogFileManager: void setCurrentSession(java.lang.String)>($r4);

        return;
    }
    private void doWriteNonFatal(java.util.Date, java.lang.Thread, java.lang.Throwable)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.util.Date $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3, $r15;
        com.crashlytics.android.core.ClsFileOutputStream r4, r6;
        java.lang.String $r5, $r10;
        com.crashlytics.android.core.CodedOutputStream r7, $r13;
        io.fabric.sdk.android.Logger $r8;
        java.lang.StringBuilder $r9;
        java.util.concurrent.atomic.AtomicInteger $r11;
        int $i0;
        java.io.File $r12;
        java.lang.Exception r14, r16;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.util.Date;

        $r2 := @parameter1: java.lang.Thread;

        $r3 := @parameter2: java.lang.Throwable;

        $r5 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getCurrentSessionId()>();

        if $r5 == null goto label20;

        staticinvoke <com.crashlytics.android.core.CrashlyticsCore: void recordLoggedExceptionEvent(java.lang.String)>($r5);

        r6 = null;

        r7 = null;

     label01:
        $r8 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

     label02:
        $r9 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crashlytics is logging non-fatal exception \"");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" from thread ");

        $r10 = virtualinvoke $r2.<java.lang.Thread: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r10);

        $r11 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicInteger eventCounter>;

        $i0 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r10 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: java.lang.String padWithZerosToMaxIntWidth(int)>($i0);

     label04:
        $r9 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionEvent");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        r4 = new com.crashlytics.android.core.ClsFileOutputStream;

     label07:
        $r12 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        specialinvoke r4.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r12, $r10);

     label08:
        $r13 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r4);

     label09:
        r7 = $r13;

     label10:
        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeSessionEvent(com.crashlytics.android.core.CodedOutputStream,java.util.Date,java.lang.Thread,java.lang.Throwable,java.lang.String,boolean)>($r13, $r1, $r2, $r3, "error", 0);

     label11:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r13, "Failed to flush to non-fatal file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r4, "Failed to close non-fatal file output stream.");

     label12:
        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void trimSessionEventFiles(java.lang.String,int)>($r5, 64);

     label13:
        return;

     label14:
        r14 := @caughtexception;

     label15:
        $r8 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r8.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "An error occurred in the non-fatal exception logger", r14);

        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r14, r6);

     label16:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r7, "Failed to flush to non-fatal file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r6, "Failed to close non-fatal file output stream.");

        goto label12;

     label17:
        $r15 := @caughtexception;

     label18:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r7, "Failed to flush to non-fatal file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r6, "Failed to close non-fatal file output stream.");

        throw $r15;

     label19:
        r16 := @caughtexception;

        $r8 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r8.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "An error occurred when trimming non-fatal files.", r16);

        return;

     label20:
        $r8 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r8.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Tried to write a non-fatal exception while no session was open.", null);

        return;

     label21:
        $r15 := @caughtexception;

        r6 = r4;

        goto label18;

     label22:
        r14 := @caughtexception;

        r6 = r4;

        goto label15;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Throwable from label01 to label08 with label17;
        catch java.lang.Exception from label08 to label09 with label22;
        catch java.lang.Exception from label10 to label11 with label22;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Exception from label12 to label13 with label19;
        catch java.lang.Throwable from label15 to label16 with label17;
    }
    private java.io.File[] ensureFileArrayNotNull(java.io.File[])
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File[] $r1;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.io.File[];

        if $r1 != null goto label1;

        $r1 = newarray (java.io.File)[0];

     label1:
        return $r1;
    }
    private java.lang.String getCurrentSessionId()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File[] $r1;
        java.util.Comparator $r2;
        int $i0;
        java.io.File $r3;
        java.lang.String $r4;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listSessionBeginFiles()>();

        $r2 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator LARGEST_FILE_NAME_FIRST>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r1, $r2);

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $r3 = $r1[0];

        $r4 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getSessionIdFromSessionFile(java.io.File)>($r3);

        return $r4;

     label1:
        return null;
    }
    private java.lang.String getPreviousSessionId()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File[] $r1;
        java.util.Comparator $r2;
        int $i0;
        java.io.File $r3;
        java.lang.String $r4;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listSessionBeginFiles()>();

        $r2 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator LARGEST_FILE_NAME_FIRST>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r1, $r2);

        $i0 = lengthof $r1;

        if $i0 <= 1 goto label1;

        $r3 = $r1[1];

        $r4 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getSessionIdFromSessionFile(java.io.File)>($r3);

        return $r4;

     label1:
        return null;
    }
    private java.lang.String getSessionIdFromSessionFile(java.io.File)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, 35);

        return $r2;
    }
    private com.crashlytics.android.core.UserMetaData getUserMetaData(java.lang.String)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1, $r4, $r5;
        boolean $z0;
        com.crashlytics.android.core.UserMetaData $r2;
        com.crashlytics.android.core.CrashlyticsCore $r3;
        com.crashlytics.android.core.MetaDataStore $r6;
        java.io.File $r7;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: boolean isHandlingException()>();

        if $z0 == 0 goto label1;

        $r2 = new com.crashlytics.android.core.UserMetaData;

        $r3 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r1 = virtualinvoke $r3.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getUserIdentifier()>();

        $r3 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r4 = virtualinvoke $r3.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getUserName()>();

        $r3 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r5 = virtualinvoke $r3.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getUserEmail()>();

        specialinvoke $r2.<com.crashlytics.android.core.UserMetaData: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, $r4, $r5);

        return $r2;

     label1:
        $r6 = new com.crashlytics.android.core.MetaDataStore;

        $r7 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        specialinvoke $r6.<com.crashlytics.android.core.MetaDataStore: void <init>(java.io.File)>($r7);

        $r2 = virtualinvoke $r6.<com.crashlytics.android.core.MetaDataStore: com.crashlytics.android.core.UserMetaData readUserData(java.lang.String)>($r1);

        return $r2;
    }
    private void handleUncaughtException(java.util.Date, java.lang.Thread, java.lang.Throwable) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.util.Date $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        com.crashlytics.android.core.CrashlyticsCore $r4;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.util.Date;

        $r2 := @parameter1: java.lang.Thread;

        $r3 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeFatal(java.util.Date,java.lang.Thread,java.lang.Throwable)>($r1, $r2, $r3);

        virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void doCloseSessions()>();

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void doOpenSession()>();

        virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void trimSessionFiles()>();

        $r4 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $z0 = virtualinvoke $r4.<com.crashlytics.android.core.CrashlyticsCore: boolean shouldPromptUserBeforeSendingCrashReports()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void sendSessionReports()>();

     label1:
        return;
    }
    private java.io.File[] listCompleteSessionFiles()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File[] $r1;
        java.io.FilenameFilter $r2;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r2 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.FilenameFilter SESSION_FILE_FILTER>;

        $r1 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r2);

        return $r1;
    }
    private java.io.File[] listFilesMatching(java.io.FilenameFilter)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.FilenameFilter $r1;
        java.io.File $r2;
        java.io.File[] $r3;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.io.FilenameFilter;

        $r2 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r1);

        $r3 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] ensureFileArrayNotNull(java.io.File[])>($r3);

        return $r3;
    }
    private java.io.File[] listSessionPartFilesFor(java.lang.String)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1;
        java.io.File[] $r2;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$SessionPartFileFilter $r3;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$SessionPartFileFilter;

        specialinvoke $r3.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$SessionPartFileFilter: void <init>(java.lang.String)>($r1);

        $r2 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r3);

        return $r2;
    }
    private void notifyCrashlyticsListenerOfPreviousCrash(com.crashlytics.android.core.CrashlyticsListener)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CrashlyticsListener $r1;
        java.lang.Exception r2;
        java.io.File r3, $r6;
        io.fabric.sdk.android.Logger $r4;
        com.crashlytics.android.core.CrashlyticsCore $r5;
        boolean $z0;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: com.crashlytics.android.core.CrashlyticsListener;

        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "Checking for previous crash marker.");

        r3 = new java.io.File;

        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r6 = virtualinvoke $r5.<com.crashlytics.android.core.CrashlyticsCore: java.io.File getSdkDirectory()>();

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "crash_marker");

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        virtualinvoke r3.<java.io.File: boolean delete()>();

        if $r1 == null goto label4;

     label1:
        interfaceinvoke $r1.<com.crashlytics.android.core.CrashlyticsListener: void crashlyticsDidDetectCrashDuringPreviousExecution()>();

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Exception thrown by CrashlyticsListener while notifying of previous crash.", r2);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    private void sendSessionReports()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File r1;
        int i0, i1;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r2;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$16 $r3;
        java.io.File[] $r4;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r4 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listCompleteSessionFiles()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = $r4[i1];

        $r2 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r3 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$16;

        specialinvoke $r3.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$16: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler,java.io.File)>(r0, r1);

        virtualinvoke $r2.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.util.concurrent.Future executeAsync(java.lang.Runnable)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void trimOpenSessions(int)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        int $i0, $i1;
        java.util.HashSet r1;
        java.io.File r2;
        java.io.File[] $r3;
        java.util.Comparator $r4;
        java.lang.String $r5, $r10;
        com.crashlytics.android.core.LogFileManager $r6;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$AnySessionPartFileFilter $r7;
        java.util.regex.Pattern $r8;
        java.util.regex.Matcher $r9;
        boolean $z0;
        io.fabric.sdk.android.Logger $r11;
        java.lang.StringBuilder $r12;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $i0 := @parameter0: int;

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listSessionBeginFiles()>();

        $r4 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator LARGEST_FILE_NAME_FIRST>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r3, $r4);

        $i1 = lengthof $r3;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r2 = $r3[$i1];

        $r5 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getSessionIdFromSessionFile(java.io.File)>(r2);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r6 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.LogFileManager logFileManager>;

        virtualinvoke $r6.<com.crashlytics.android.core.LogFileManager: void discardOldLogFiles(java.util.Set)>(r1);

        $r7 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$AnySessionPartFileFilter;

        specialinvoke $r7.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$AnySessionPartFileFilter: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$1)>(null);

        $r3 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r7);

        $i0 = lengthof $r3;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        r2 = $r3[$i1];

        $r5 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r8 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.regex.Pattern SESSION_FILE_PATTERN>;

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

        virtualinvoke $r9.<java.util.regex.Matcher: boolean matches()>();

        $r10 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z0 != 0 goto label4;

        $r11 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trimming open session file: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r5);

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return;
    }
    private void trimSessionEventFiles(java.lang.String, int)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1;
        int $i0;
        java.io.File $r2;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter $r3;
        java.lang.StringBuilder $r4;
        java.util.Comparator $r5;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        $r3 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionEvent");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter: void <init>(java.lang.String)>($r1);

        $r5 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator SMALLEST_FILE_NAME_FIRST>;

        staticinvoke <com.crashlytics.android.core.Utils: void capFileCount(java.io.File,java.io.FilenameFilter,int,java.util.Comparator)>($r2, $r3, $i0, $r5);

        return;
    }
    private void writeBeginSession(java.lang.String, java.util.Date) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1, $r8;
        java.util.Date $r2;
        long l0;
        com.crashlytics.android.core.ClsFileOutputStream r3, r4;
        com.crashlytics.android.core.CodedOutputStream r5, $r9;
        java.io.File $r6;
        java.lang.StringBuilder $r7;
        java.util.Locale $r10;
        java.lang.Object[] $r11;
        com.crashlytics.android.core.CrashlyticsCore $r12;
        com.crashlytics.android.core.SessionDataWriter $r13;
        java.lang.Exception r14;
        java.lang.Throwable $r15;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Date;

        r4 = null;

        r5 = null;

     label01:
        r3 = new com.crashlytics.android.core.ClsFileOutputStream;

     label02:
        $r6 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

     label03:
        $r7 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BeginSession");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r6, $r8);

     label05:
        $r9 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r3);

     label06:
        r5 = $r9;

     label07:
        $r10 = <java.util.Locale: java.util.Locale US>;

     label08:
        $r11 = newarray (java.lang.Object)[1];

        $r12 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r8 = virtualinvoke $r12.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getVersion()>();

     label09:
        $r11[0] = $r8;

     label10:
        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r10, "Crashlytics Android SDK/%s", $r11);

        l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

     label11:
        l0 = l0 / 1000L;

     label12:
        $r13 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.SessionDataWriter sessionDataWriter>;

        virtualinvoke $r13.<com.crashlytics.android.core.SessionDataWriter: void writeBeginSession(com.crashlytics.android.core.CodedOutputStream,java.lang.String,java.lang.String,long)>($r9, $r1, $r8, l0);

     label13:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r9, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r3, "Failed to close begin session file.");

        return;

     label14:
        r14 := @caughtexception;

     label15:
        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r14, r4);

        throw r14;

     label16:
        $r15 := @caughtexception;

     label17:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r5, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r4, "Failed to close begin session file.");

        throw $r15;

     label18:
        $r15 := @caughtexception;

        r4 = r3;

        goto label17;

     label19:
        r14 := @caughtexception;

        r4 = r3;

        goto label15;

        catch java.lang.Exception from label02 to label03 with label14;
        catch java.lang.Exception from label04 to label05 with label14;
        catch java.lang.Throwable from label01 to label05 with label16;
        catch java.lang.Exception from label05 to label06 with label19;
        catch java.lang.Exception from label08 to label11 with label19;
        catch java.lang.Exception from label12 to label13 with label19;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label16;
    }
    private void writeExternalCrashEvent(com.crashlytics.android.core.internal.models.SessionEventData) throws java.io.IOException
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.internal.models.SessionEventData $r1;
        com.crashlytics.android.core.ClsFileOutputStream r2, r4;
        com.crashlytics.android.core.LogFileManager r3;
        com.crashlytics.android.core.CodedOutputStream r5, $r10;
        java.lang.String $r6, $r9;
        java.io.File $r7;
        java.lang.StringBuilder $r8;
        com.crashlytics.android.core.MetaDataStore $r11;
        java.util.Map $r12;
        com.crashlytics.android.core.CrashlyticsCore $r13;
        android.content.Context $r14;
        io.fabric.sdk.android.Logger $r15;
        java.lang.Exception r16;
        java.lang.Throwable $r17;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: com.crashlytics.android.core.internal.models.SessionEventData;

        r4 = null;

        r5 = null;

     label01:
        $r6 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getPreviousSessionId()>();

     label02:
        if $r6 == null goto label16;

     label03:
        staticinvoke <com.crashlytics.android.core.CrashlyticsCore: void recordFatalExceptionEvent(java.lang.String)>($r6);

     label04:
        r2 = new com.crashlytics.android.core.ClsFileOutputStream;

     label05:
        $r7 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

     label06:
        $r8 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionCrash");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r7, $r9);

     label08:
        $r10 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r2);

     label09:
        r5 = $r10;

     label10:
        $r11 = new com.crashlytics.android.core.MetaDataStore;

     label11:
        $r7 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        specialinvoke $r11.<com.crashlytics.android.core.MetaDataStore: void <init>(java.io.File)>($r7);

        $r12 = virtualinvoke $r11.<com.crashlytics.android.core.MetaDataStore: java.util.Map readKeyData(java.lang.String)>($r6);

     label12:
        r3 = new com.crashlytics.android.core.LogFileManager;

     label13:
        $r13 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r14 = virtualinvoke $r13.<com.crashlytics.android.core.CrashlyticsCore: android.content.Context getContext()>();

        $r7 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        specialinvoke r3.<com.crashlytics.android.core.LogFileManager: void <init>(android.content.Context,java.io.File,java.lang.String)>($r14, $r7, $r6);

        staticinvoke <com.crashlytics.android.core.NativeCrashWriter: void writeNativeCrash(com.crashlytics.android.core.internal.models.SessionEventData,com.crashlytics.android.core.LogFileManager,java.util.Map,com.crashlytics.android.core.CodedOutputStream)>($r1, r3, $r12, $r10);

     label14:
        r4 = r2;

     label15:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r5, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r4, "Failed to close fatal exception file output stream.");

        return;

     label16:
        $r15 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r15.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Tried to write a native crash while no session was open.", null);

     label17:
        goto label15;

     label18:
        r16 := @caughtexception;

     label19:
        $r15 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r15.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "An error occurred in the native crash logger", r16);

        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r16, r4);

     label20:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r5, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r4, "Failed to close fatal exception file output stream.");

        return;

     label21:
        $r17 := @caughtexception;

     label22:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r5, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r4, "Failed to close fatal exception file output stream.");

        throw $r17;

     label23:
        $r17 := @caughtexception;

        r4 = r2;

        goto label22;

     label24:
        r16 := @caughtexception;

        r4 = r2;

        goto label19;

        catch java.lang.Exception from label01 to label02 with label18;
        catch java.lang.Exception from label03 to label04 with label18;
        catch java.lang.Exception from label05 to label06 with label18;
        catch java.lang.Exception from label07 to label08 with label18;
        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label08 with label21;
        catch java.lang.Exception from label08 to label09 with label24;
        catch java.lang.Exception from label11 to label12 with label24;
        catch java.lang.Exception from label13 to label14 with label24;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.lang.Throwable from label10 to label14 with label23;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
    }
    private void writeFatal(java.util.Date, java.lang.Thread, java.lang.Throwable)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.util.Date $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3, $r14;
        com.crashlytics.android.core.ClsFileOutputStream r4, r5;
        com.crashlytics.android.core.CodedOutputStream r6, $r11;
        java.io.File $r7, $r8;
        java.lang.String $r9;
        java.lang.StringBuilder $r10;
        io.fabric.sdk.android.Logger $r12;
        java.lang.Exception r13;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.util.Date;

        $r2 := @parameter1: java.lang.Thread;

        $r3 := @parameter2: java.lang.Throwable;

        r5 = null;

        r6 = null;

     label01:
        $r7 = new java.io.File;

     label02:
        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "crash_marker");

        virtualinvoke $r7.<java.io.File: boolean createNewFile()>();

        $r9 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getCurrentSessionId()>();

     label03:
        if $r9 == null goto label14;

     label04:
        staticinvoke <com.crashlytics.android.core.CrashlyticsCore: void recordFatalExceptionEvent(java.lang.String)>($r9);

     label05:
        r4 = new com.crashlytics.android.core.ClsFileOutputStream;

     label06:
        $r7 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

     label07:
        $r10 = new java.lang.StringBuilder;

     label08:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionCrash");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r7, $r9);

     label09:
        $r11 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r4);

     label10:
        r6 = $r11;

     label11:
        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeSessionEvent(com.crashlytics.android.core.CodedOutputStream,java.util.Date,java.lang.Thread,java.lang.Throwable,java.lang.String,boolean)>($r11, $r1, $r2, $r3, "crash", 1);

     label12:
        r5 = r4;

     label13:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r6, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r5, "Failed to close fatal exception file output stream.");

        return;

     label14:
        $r12 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r12.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Tried to write a fatal exception while no session was open.", null);

     label15:
        goto label13;

     label16:
        r13 := @caughtexception;

     label17:
        $r12 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r12.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "An error occurred in the fatal exception logger", r13);

        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r13, r5);

     label18:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r6, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r5, "Failed to close fatal exception file output stream.");

        return;

     label19:
        $r14 := @caughtexception;

     label20:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r6, "Failed to flush to session begin file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r5, "Failed to close fatal exception file output stream.");

        throw $r14;

     label21:
        $r14 := @caughtexception;

        r5 = r4;

        goto label20;

     label22:
        r13 := @caughtexception;

        r5 = r4;

        goto label17;

        catch java.lang.Exception from label02 to label03 with label16;
        catch java.lang.Exception from label04 to label05 with label16;
        catch java.lang.Exception from label06 to label07 with label16;
        catch java.lang.Exception from label08 to label09 with label16;
        catch java.lang.Throwable from label01 to label03 with label19;
        catch java.lang.Throwable from label04 to label09 with label19;
        catch java.lang.Exception from label09 to label10 with label22;
        catch java.lang.Exception from label11 to label12 with label22;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
    }
    private void writeInitialPartsTo(com.crashlytics.android.core.CodedOutputStream, java.lang.String) throws java.io.IOException
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CodedOutputStream $r1;
        java.lang.String $r2, r3, $r7;
        int i0, i1, $i2;
        java.lang.String[] r4;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter $r5;
        java.lang.StringBuilder $r6;
        java.io.File[] $r8;
        io.fabric.sdk.android.Logger $r9;
        java.io.File $r10;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: com.crashlytics.android.core.CodedOutputStream;

        $r2 := @parameter1: java.lang.String;

        r4 = newarray (java.lang.String)[4];

        r4[0] = "SessionUser";

        r4[1] = "SessionApp";

        r4[2] = "SessionOS";

        r4[3] = "SessionDevice";

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r4[i1];

        $r5 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter: void <init>(java.lang.String)>($r7);

        $r8 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r5);

        $i2 = lengthof $r8;

        if $i2 != 0 goto label3;

        $r9 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data for session ID ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", r3, null);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r9 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collecting ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data for session ID ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", r3);

        $r10 = $r8[0];

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeToCosFromFile(com.crashlytics.android.core.CodedOutputStream,java.io.File)>($r1, $r10);

        goto label2;

     label4:
        return;
    }
    private void writeNonFatalEventsTo(com.crashlytics.android.core.CodedOutputStream, java.io.File[], java.lang.String)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CodedOutputStream $r1;
        java.io.File[] $r2;
        java.lang.String $r3, $r10;
        java.lang.Exception r4;
        int i0, i1;
        java.io.File r5;
        java.util.Comparator $r6;
        io.fabric.sdk.android.Logger $r7;
        java.util.Locale $r8;
        java.lang.Object[] $r9;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: com.crashlytics.android.core.CodedOutputStream;

        $r2 := @parameter1: java.io.File[];

        $r3 := @parameter2: java.lang.String;

        $r6 = <io.fabric.sdk.android.services.common.CommonUtils: java.util.Comparator FILE_MODIFIED_COMPARATOR>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r6);

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r5 = $r2[i1];

     label2:
        $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

     label3:
        $r8 = <java.util.Locale: java.util.Locale US>;

     label4:
        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r3;

        $r10 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $r9[1] = $r10;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r8, "Found Non Fatal for session ID %s in %s ", $r9);

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r10);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeToCosFromFile(com.crashlytics.android.core.CodedOutputStream,java.io.File)>($r1, r5);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        r4 := @caughtexception;

        $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "Error writting non-fatal to session.", r4);

        goto label5;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }
    private void writeSessionApp(java.lang.String) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1, $r9, $r10, $r12, $r13;
        com.crashlytics.android.core.ClsFileOutputStream r2, r3;
        com.crashlytics.android.core.CodedOutputStream r4, $r7;
        java.io.File $r5;
        java.lang.StringBuilder $r6;
        com.crashlytics.android.core.CrashlyticsCore $r8;
        io.fabric.sdk.android.services.common.IdManager $r11;
        io.fabric.sdk.android.services.common.DeliveryMechanism $r14;
        int $i0;
        com.crashlytics.android.core.SessionDataWriter $r15;
        java.lang.Exception r16;
        java.lang.Throwable $r17;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        r3 = null;

        r4 = null;

     label01:
        r2 = new com.crashlytics.android.core.ClsFileOutputStream;

     label02:
        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

     label03:
        $r6 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionApp");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r5, $r1);

     label05:
        $r7 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r2);

     label06:
        r4 = $r7;

     label07:
        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r1 = virtualinvoke $r8.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getPackageName()>();

        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r9 = virtualinvoke $r8.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getVersionCode()>();

        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r10 = virtualinvoke $r8.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getVersionName()>();

        $r11 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: io.fabric.sdk.android.services.common.IdManager idManager>;

        $r12 = virtualinvoke $r11.<io.fabric.sdk.android.services.common.IdManager: java.lang.String getAppInstallIdentifier()>();

        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r13 = virtualinvoke $r8.<com.crashlytics.android.core.CrashlyticsCore: java.lang.String getInstallerPackageName()>();

        $r14 = staticinvoke <io.fabric.sdk.android.services.common.DeliveryMechanism: io.fabric.sdk.android.services.common.DeliveryMechanism determineFrom(java.lang.String)>($r13);

        $i0 = virtualinvoke $r14.<io.fabric.sdk.android.services.common.DeliveryMechanism: int getId()>();

        $r15 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.SessionDataWriter sessionDataWriter>;

        virtualinvoke $r15.<com.crashlytics.android.core.SessionDataWriter: void writeSessionApp(com.crashlytics.android.core.CodedOutputStream,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r7, $r1, $r9, $r10, $r12, $i0);

     label08:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r7, "Failed to flush to session app file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r2, "Failed to close session app file.");

        return;

     label09:
        r16 := @caughtexception;

     label10:
        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r16, r3);

        throw r16;

     label11:
        $r17 := @caughtexception;

     label12:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r4, "Failed to flush to session app file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r3, "Failed to close session app file.");

        throw $r17;

     label13:
        $r17 := @caughtexception;

        r3 = r2;

        goto label12;

     label14:
        r16 := @caughtexception;

        r3 = r2;

        goto label10;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Throwable from label01 to label05 with label11;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label11;
    }
    private void writeSessionDevice(java.lang.String) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1, $r12, $r16, $r17;
        long l0, $l3, $l5;
        com.crashlytics.android.core.ClsFileOutputStream r2, r4;
        android.os.StatFs r3;
        com.crashlytics.android.core.CodedOutputStream r5, $r8;
        java.io.File $r6;
        java.lang.StringBuilder $r7;
        com.crashlytics.android.core.CrashlyticsCore $r9;
        android.content.Context $r10;
        io.fabric.sdk.android.services.common.IdManager $r11;
        int $i1, $i2, $i4;
        java.lang.Runtime $r13;
        boolean $z0;
        java.util.Map $r14;
        com.crashlytics.android.core.SessionDataWriter $r15;
        java.lang.Exception r18;
        java.lang.Throwable $r19;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        r4 = null;

        r5 = null;

     label01:
        r2 = new com.crashlytics.android.core.ClsFileOutputStream;

     label02:
        $r6 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

     label03:
        $r7 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionDevice");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r6, $r1);

     label05:
        $r8 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r2);

     label06:
        r5 = $r8;

     label07:
        $r9 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r10 = virtualinvoke $r9.<com.crashlytics.android.core.CrashlyticsCore: android.content.Context getContext()>();

     label08:
        r3 = new android.os.StatFs;

     label09:
        $r6 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r1 = virtualinvoke $r6.<java.io.File: java.lang.String getPath()>();

        specialinvoke r3.<android.os.StatFs: void <init>(java.lang.String)>($r1);

        $r11 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: io.fabric.sdk.android.services.common.IdManager idManager>;

        $r12 = virtualinvoke $r11.<io.fabric.sdk.android.services.common.IdManager: java.lang.String getDeviceUUID()>();

        $i1 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: int getCpuArchitectureInt()>();

        $r13 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i2 = virtualinvoke $r13.<java.lang.Runtime: int availableProcessors()>();

        $l3 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: long getTotalRamInBytes()>();

        $i4 = virtualinvoke r3.<android.os.StatFs: int getBlockCount()>();

     label10:
        l0 = (long) $i4;

     label11:
        $i4 = virtualinvoke r3.<android.os.StatFs: int getBlockSize()>();

     label12:
        $l5 = (long) $i4;

        l0 = l0 * $l5;

     label13:
        $z0 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: boolean isEmulator(android.content.Context)>($r10);

        $r11 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: io.fabric.sdk.android.services.common.IdManager idManager>;

        $r14 = virtualinvoke $r11.<io.fabric.sdk.android.services.common.IdManager: java.util.Map getDeviceIdentifiers()>();

        $i4 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: int getDeviceState(android.content.Context)>($r10);

        $r15 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.SessionDataWriter sessionDataWriter>;

     label14:
        $r16 = <android.os.Build: java.lang.String MODEL>;

        $r17 = <android.os.Build: java.lang.String MANUFACTURER>;

        $r1 = <android.os.Build: java.lang.String PRODUCT>;

     label15:
        virtualinvoke $r15.<com.crashlytics.android.core.SessionDataWriter: void writeSessionDevice(com.crashlytics.android.core.CodedOutputStream,java.lang.String,int,java.lang.String,int,long,long,boolean,java.util.Map,int,java.lang.String,java.lang.String)>($r8, $r12, $i1, $r16, $i2, $l3, l0, $z0, $r14, $i4, $r17, $r1);

     label16:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r8, "Failed to flush session device info.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r2, "Failed to close session device file.");

        return;

     label17:
        r18 := @caughtexception;

     label18:
        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r18, r4);

        throw r18;

     label19:
        $r19 := @caughtexception;

     label20:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r5, "Failed to flush session device info.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r4, "Failed to close session device file.");

        throw $r19;

     label21:
        $r19 := @caughtexception;

        r4 = r2;

        goto label20;

     label22:
        r18 := @caughtexception;

        r4 = r2;

        goto label18;

        catch java.lang.Exception from label02 to label03 with label17;
        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Throwable from label01 to label05 with label19;
        catch java.lang.Exception from label05 to label06 with label22;
        catch java.lang.Exception from label07 to label08 with label22;
        catch java.lang.Exception from label09 to label10 with label22;
        catch java.lang.Exception from label11 to label12 with label22;
        catch java.lang.Exception from label13 to label14 with label22;
        catch java.lang.Exception from label15 to label16 with label22;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label10 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label16 with label21;
        catch java.lang.Throwable from label18 to label19 with label19;
    }
    private void writeSessionEvent(com.crashlytics.android.core.CodedOutputStream, java.util.Date, java.lang.Thread, java.lang.Throwable, java.lang.String, boolean) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CodedOutputStream $r1;
        java.util.Date $r2;
        java.lang.Thread $r3, $r22;
        java.lang.Throwable $r4;
        java.lang.String $r5, $r13;
        boolean $z0, $z1;
        long l0, l2, $l4;
        int i1, $i3, $i5;
        java.util.TreeMap r7, $r27;
        com.crashlytics.android.core.CrashlyticsCore $r8;
        android.content.Context $r9;
        float $f0;
        android.content.res.Resources $r10;
        android.content.res.Configuration $r11;
        java.io.File $r12;
        android.app.ActivityManager$RunningAppProcessInfo $r14;
        java.lang.StackTraceElement[] $r15;
        java.util.Map $r16, $r25;
        java.lang.Thread[] r17;
        java.util.Set $r18;
        java.util.Iterator $r19;
        java.lang.Object $r20;
        java.util.Map$Entry r21;
        com.crashlytics.android.core.SessionDataWriter $r23;
        com.crashlytics.android.core.LogFileManager $r24;
        java.util.LinkedList $r26;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: com.crashlytics.android.core.CodedOutputStream;

        $r2 := @parameter1: java.util.Date;

        $r3 := @parameter2: java.lang.Thread;

        $r4 := @parameter3: java.lang.Throwable;

        $r5 := @parameter4: java.lang.String;

        $z0 := @parameter5: boolean;

        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r9 = virtualinvoke $r8.<com.crashlytics.android.core.CrashlyticsCore: android.content.Context getContext()>();

        l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        l0 = l0 / 1000L;

        $f0 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: float getBatteryLevel(android.content.Context)>($r9);

        $z1 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: boolean powerConnected>;

        $i3 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: int getBatteryVelocity(android.content.Context,boolean)>($r9, $z1);

        $z1 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: boolean getProximitySensorEnabled(android.content.Context)>($r9);

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r11 = virtualinvoke $r10.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        i1 = $r11.<android.content.res.Configuration: int orientation>;

        l2 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: long getTotalRamInBytes()>();

        $l4 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: long calculateFreeRamInBytes(android.content.Context)>($r9);

        l2 = l2 - $l4;

        $r12 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r13 = virtualinvoke $r12.<java.io.File: java.lang.String getPath()>();

        $l4 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: long calculateUsedDiskSpaceInBytes(java.lang.String)>($r13);

        $r13 = virtualinvoke $r9.<android.content.Context: java.lang.String getPackageName()>();

        $r14 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: android.app.ActivityManager$RunningAppProcessInfo getAppProcessInfo(java.lang.String,android.content.Context)>($r13, $r9);

        $r26 = new java.util.LinkedList;

        specialinvoke $r26.<java.util.LinkedList: void <init>()>();

        $r15 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        if $z0 == 0 goto label2;

        $r16 = staticinvoke <java.lang.Thread: java.util.Map getAllStackTraces()>();

        $i5 = interfaceinvoke $r16.<java.util.Map: int size()>();

        r17 = newarray (java.lang.Thread)[$i5];

        $i5 = 0;

        $r18 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.util.Map$Entry) $r20;

        $r20 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (java.lang.Thread) $r20;

        r17[$i5] = $r22;

        $r20 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r20);

        $i5 = $i5 + 1;

        goto label1;

     label2:
        r17 = newarray (java.lang.Thread)[0];

     label3:
        $z0 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: boolean getBooleanResourceValue(android.content.Context,java.lang.String,boolean)>($r9, "com.crashlytics.CollectCustomKeys", 1);

        if $z0 != 0 goto label5;

        r7 = new java.util.TreeMap;

        $r16 = r7;

        specialinvoke r7.<java.util.TreeMap: void <init>()>();

     label4:
        $r23 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.SessionDataWriter sessionDataWriter>;

        $r24 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.LogFileManager logFileManager>;

        virtualinvoke $r23.<com.crashlytics.android.core.SessionDataWriter: void writeSessionEvent(com.crashlytics.android.core.CodedOutputStream,long,java.lang.Thread,java.lang.Throwable,java.lang.String,java.lang.Thread[],float,int,boolean,int,long,long,android.app.ActivityManager$RunningAppProcessInfo,java.util.List,java.lang.StackTraceElement[],com.crashlytics.android.core.LogFileManager,java.util.Map)>($r1, l0, $r3, $r4, $r5, r17, $f0, $i3, $z1, i1, l2, $l4, $r14, $r26, $r15, $r24, $r16);

        return;

     label5:
        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r25 = virtualinvoke $r8.<com.crashlytics.android.core.CrashlyticsCore: java.util.Map getAttributes()>();

        $r16 = $r25;

        if $r25 == null goto label4;

        $i5 = interfaceinvoke $r25.<java.util.Map: int size()>();

        if $i5 <= 1 goto label4;

        $r27 = new java.util.TreeMap;

        specialinvoke $r27.<java.util.TreeMap: void <init>(java.util.Map)>($r25);

        $r16 = $r27;

        goto label4;
    }
    private void writeSessionOS(java.lang.String) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1;
        com.crashlytics.android.core.ClsFileOutputStream r2, r3;
        com.crashlytics.android.core.CodedOutputStream r4, $r7;
        java.io.File $r5;
        java.lang.StringBuilder $r6;
        com.crashlytics.android.core.CrashlyticsCore $r8;
        android.content.Context $r9;
        boolean $z0;
        com.crashlytics.android.core.SessionDataWriter $r10;
        java.lang.Exception r11;
        java.lang.Throwable $r12;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        r3 = null;

        r4 = null;

     label01:
        r2 = new com.crashlytics.android.core.ClsFileOutputStream;

     label02:
        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

     label03:
        $r6 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionOS");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r5, $r1);

     label05:
        $r7 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r2);

     label06:
        r4 = $r7;

     label07:
        $r8 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r9 = virtualinvoke $r8.<com.crashlytics.android.core.CrashlyticsCore: android.content.Context getContext()>();

        $z0 = staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: boolean isRooted(android.content.Context)>($r9);

        $r10 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.SessionDataWriter sessionDataWriter>;

        virtualinvoke $r10.<com.crashlytics.android.core.SessionDataWriter: void writeSessionOS(com.crashlytics.android.core.CodedOutputStream,boolean)>($r7, $z0);

     label08:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r7, "Failed to flush to session OS file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r2, "Failed to close session OS file.");

        return;

     label09:
        r11 := @caughtexception;

     label10:
        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r11, r3);

        throw r11;

     label11:
        $r12 := @caughtexception;

     label12:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r4, "Failed to flush to session OS file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r3, "Failed to close session OS file.");

        throw $r12;

     label13:
        $r12 := @caughtexception;

        r3 = r2;

        goto label12;

     label14:
        r11 := @caughtexception;

        r3 = r2;

        goto label10;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Throwable from label01 to label05 with label11;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label11;
    }
    private void writeSessionPartsToSessionFile(java.io.File, java.lang.String, int)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File $r1, $r16;
        java.lang.String $r2, $r6;
        int $i0, $i1;
        com.crashlytics.android.core.ClsFileOutputStream r3, r14;
        io.fabric.sdk.android.Logger $r4;
        java.lang.StringBuilder $r5;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter $r7;
        java.io.File[] $r8, $r12, r13;
        boolean z0, z1;
        java.util.Locale $r9;
        java.lang.Object[] $r10;
        java.lang.Boolean $r11;
        com.crashlytics.android.core.CodedOutputStream r15, $r17;
        java.util.Date $r18;
        long $l2;
        java.lang.Integer $r19;
        java.lang.Exception r20;
        java.lang.Throwable $r21;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collecting session parts for ID ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        $r7 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionCrash");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter: void <init>(java.lang.String)>($r6);

        $r8 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r7);

        if $r8 == null goto label33;

        $i1 = lengthof $r8;

        if $i1 <= 0 goto label33;

        z0 = 1;

     label01:
        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r2;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r10[1] = $r11;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r9, "Session %s has fatal exception: %s", $r10);

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        $r7 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionEvent");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter: void <init>(java.lang.String)>($r6);

        $r12 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r7);

        r13 = $r12;

        if $r12 == null goto label34;

        $i1 = lengthof $r12;

        if $i1 <= 0 goto label34;

        z1 = 1;

     label02:
        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r2;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r10[1] = $r11;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r9, "Session %s has non-fatal exceptions: %s", $r10);

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        if z0 != 0 goto label03;

        if z1 == 0 goto label43;

     label03:
        r14 = null;

        r15 = null;

     label04:
        r3 = new com.crashlytics.android.core.ClsFileOutputStream;

     label05:
        $r16 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        specialinvoke r3.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r16, $r2);

     label06:
        $r17 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r3);

     label07:
        r15 = $r17;

     label08:
        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

     label09:
        $r5 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collecting SessionStart data for session ID ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeToCosFromFile(com.crashlytics.android.core.CodedOutputStream,java.io.File)>($r17, $r1);

     label11:
        $r18 = new java.util.Date;

     label12:
        specialinvoke $r18.<java.util.Date: void <init>()>();

        $l2 = virtualinvoke $r18.<java.util.Date: long getTime()>();

     label13:
        $l2 = $l2 / 1000L;

     label14:
        virtualinvoke $r17.<com.crashlytics.android.core.CodedOutputStream: void writeUInt64(int,long)>(4, $l2);

        virtualinvoke $r17.<com.crashlytics.android.core.CodedOutputStream: void writeBool(int,boolean)>(5, z0);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeInitialPartsTo(com.crashlytics.android.core.CodedOutputStream,java.lang.String)>($r17, $r2);

     label15:
        if z1 == 0 goto label27;

     label16:
        $i1 = lengthof $r12;

     label17:
        if $i1 <= $i0 goto label26;

     label18:
        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

     label19:
        $r9 = <java.util.Locale: java.util.Locale US>;

     label20:
        $r10 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label21:
        $r10[0] = $r19;

     label22:
        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r9, "Trimming down to %d logged exceptions.", $r10);

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void trimSessionEventFiles(java.lang.String,int)>($r2, $i0);

     label23:
        $r7 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter;

        $r5 = new java.lang.StringBuilder;

     label24:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionEvent");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter: void <init>(java.lang.String)>($r6);

        $r12 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r7);

     label25:
        r13 = $r12;

     label26:
        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeNonFatalEventsTo(com.crashlytics.android.core.CodedOutputStream,java.io.File[],java.lang.String)>($r17, r13, $r2);

     label27:
        if z0 == 0 goto label30;

     label28:
        $r1 = $r8[0];

     label29:
        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void writeToCosFromFile(com.crashlytics.android.core.CodedOutputStream,java.io.File)>($r17, $r1);

     label30:
        virtualinvoke $r17.<com.crashlytics.android.core.CodedOutputStream: void writeUInt32(int,int)>(11, 1);

        virtualinvoke $r17.<com.crashlytics.android.core.CodedOutputStream: void writeEnum(int,int)>(12, 3);

     label31:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r17, "Error flushing session file stream");

        goto label35;

     label32:
        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing session part files for ID ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void deleteSessionPartFilesFor(java.lang.String)>($r2);

        return;

     label33:
        z0 = 0;

        goto label01;

     label34:
        z1 = 0;

        goto label02;

     label35:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r3, "Failed to close CLS file");

        goto label32;

     label36:
        r20 := @caughtexception;

     label37:
        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write session file for session ID: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", $r6, r20);

        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r20, r14);

     label38:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r15, "Error flushing session file stream");

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void closeWithoutRenamingOrLog(com.crashlytics.android.core.ClsFileOutputStream)>(r14);

        goto label32;

     label39:
        $r21 := @caughtexception;

     label40:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r15, "Error flushing session file stream");

        goto label42;

     label41:
        throw $r21;

     label42:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r14, "Failed to close CLS file");

        goto label41;

     label43:
        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No events present for session ID ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        goto label32;

     label44:
        $r21 := @caughtexception;

        r14 = r3;

        goto label40;

     label45:
        r20 := @caughtexception;

        r14 = r3;

        goto label37;

        catch java.lang.Exception from label05 to label06 with label36;
        catch java.lang.Throwable from label04 to label06 with label39;
        catch java.lang.Exception from label06 to label07 with label45;
        catch java.lang.Exception from label08 to label09 with label45;
        catch java.lang.Exception from label10 to label11 with label45;
        catch java.lang.Exception from label12 to label13 with label45;
        catch java.lang.Exception from label14 to label15 with label45;
        catch java.lang.Exception from label16 to label17 with label45;
        catch java.lang.Exception from label18 to label19 with label45;
        catch java.lang.Exception from label20 to label23 with label45;
        catch java.lang.Exception from label24 to label25 with label45;
        catch java.lang.Exception from label26 to label27 with label45;
        catch java.lang.Exception from label28 to label31 with label45;
        catch java.lang.Throwable from label06 to label07 with label44;
        catch java.lang.Throwable from label08 to label13 with label44;
        catch java.lang.Throwable from label14 to label15 with label44;
        catch java.lang.Throwable from label18 to label21 with label44;
        catch java.lang.Throwable from label22 to label25 with label44;
        catch java.lang.Throwable from label26 to label27 with label44;
        catch java.lang.Throwable from label29 to label31 with label44;
        catch java.lang.Throwable from label37 to label38 with label39;
    }
    private void writeSessionUser(java.lang.String) throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1, $r7, $r11;
        com.crashlytics.android.core.ClsFileOutputStream r2, r3;
        com.crashlytics.android.core.CodedOutputStream r4, $r8;
        java.io.File $r5;
        java.lang.StringBuilder $r6;
        com.crashlytics.android.core.UserMetaData $r9;
        boolean $z0;
        com.crashlytics.android.core.SessionDataWriter $r10;
        java.lang.Exception r12;
        java.lang.Throwable $r13;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        r3 = null;

        r4 = null;

     label01:
        r2 = new com.crashlytics.android.core.ClsFileOutputStream;

     label02:
        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

     label03:
        $r6 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SessionUser");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<com.crashlytics.android.core.ClsFileOutputStream: void <init>(java.io.File,java.lang.String)>($r5, $r7);

     label05:
        $r8 = staticinvoke <com.crashlytics.android.core.CodedOutputStream: com.crashlytics.android.core.CodedOutputStream newInstance(java.io.OutputStream)>(r2);

     label06:
        r4 = $r8;

     label07:
        $r9 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.UserMetaData getUserMetaData(java.lang.String)>($r1);

        $z0 = virtualinvoke $r9.<com.crashlytics.android.core.UserMetaData: boolean isEmpty()>();

     label08:
        if $z0 == 0 goto label09;

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r8, "Failed to flush session user file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r2, "Failed to close session user file.");

        return;

     label09:
        $r10 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.SessionDataWriter sessionDataWriter>;

        $r7 = $r9.<com.crashlytics.android.core.UserMetaData: java.lang.String id>;

        $r11 = $r9.<com.crashlytics.android.core.UserMetaData: java.lang.String name>;

        $r1 = $r9.<com.crashlytics.android.core.UserMetaData: java.lang.String email>;

        virtualinvoke $r10.<com.crashlytics.android.core.SessionDataWriter: void writeSessionUser(com.crashlytics.android.core.CodedOutputStream,java.lang.String,java.lang.String,java.lang.String)>($r8, $r7, $r11, $r1);

     label10:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>($r8, "Failed to flush session user file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r2, "Failed to close session user file.");

        return;

     label11:
        r12 := @caughtexception;

     label12:
        staticinvoke <com.crashlytics.android.core.ExceptionUtils: void writeStackTraceIfNotNull(java.lang.Throwable,java.io.OutputStream)>(r12, r3);

        throw r12;

     label13:
        $r13 := @caughtexception;

     label14:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void flushOrLog(java.io.Flushable,java.lang.String)>(r4, "Failed to flush session user file.");

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r3, "Failed to close session user file.");

        throw $r13;

     label15:
        $r13 := @caughtexception;

        r3 = r2;

        goto label14;

     label16:
        r12 := @caughtexception;

        r3 = r2;

        goto label12;

        catch java.lang.Exception from label02 to label03 with label11;
        catch java.lang.Exception from label04 to label05 with label11;
        catch java.lang.Throwable from label01 to label05 with label13;
        catch java.lang.Exception from label05 to label06 with label16;
        catch java.lang.Exception from label07 to label08 with label16;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Exception from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label12 to label13 with label13;
    }
    private void writeToCosFromFile(com.crashlytics.android.core.CodedOutputStream, java.io.File) throws java.io.IOException
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CodedOutputStream $r1;
        java.io.File $r2;
        byte[] r3;
        java.io.FileInputStream r4, r5;
        boolean $z0;
        long $l0;
        int $i1, $i2;
        java.lang.Throwable $r6;
        io.fabric.sdk.android.Logger $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: com.crashlytics.android.core.CodedOutputStream;

        $r2 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label12;

        $l0 = virtualinvoke $r2.<java.io.File: long length()>();

        $i1 = (int) $l0;

        r3 = newarray (byte)[$i1];

        r5 = null;

     label01:
        r4 = new java.io.FileInputStream;

        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

     label02:
        $i1 = 0;

     label03:
        $i2 = lengthof r3;

     label04:
        if $i1 >= $i2 goto label09;

     label05:
        $i2 = lengthof r3;

     label06:
        $i2 = $i2 - $i1;

     label07:
        $i2 = virtualinvoke r4.<java.io.FileInputStream: int read(byte[],int,int)>(r3, $i1, $i2);

     label08:
        if $i2 < 0 goto label09;

        $i1 = $i1 + $i2;

        goto label03;

     label09:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r4, "Failed to close file input stream.");

        virtualinvoke $r1.<com.crashlytics.android.core.CodedOutputStream: void writeRawBytes(byte[])>(r3);

        return;

     label10:
        $r6 := @caughtexception;

     label11:
        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void closeOrLog(java.io.Closeable,java.lang.String)>(r5, "Failed to close file input stream.");

        throw $r6;

     label12:
        $r7 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to include a file that doesn\'t exist: ");

        $r9 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", $r9, null);

        return;

     label13:
        $r6 := @caughtexception;

        r5 = r4;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
    }
    void cacheKeyData(java.util.Map)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.util.Map r1;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r2;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$11 $r3;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r3 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$11;

        specialinvoke $r3.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$11: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler,java.util.Map)>(r0, r1);

        virtualinvoke $r2.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.util.concurrent.Future executeAsync(java.util.concurrent.Callable)>($r3);

        return;
    }
    void cacheUserData(java.lang.String, java.lang.String, java.lang.String)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.String $r1, $r2, $r3;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r4;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$10 $r5;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r5 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$10;

        specialinvoke $r5.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$10: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler,java.lang.String,java.lang.String,java.lang.String)>(r0, $r1, $r2, $r3);

        virtualinvoke $r4.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.util.concurrent.Future executeAsync(java.util.concurrent.Callable)>($r5);

        return;
    }
    void cleanInvalidTempFiles()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r1;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$14 $r2;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r2 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$14;

        specialinvoke $r2.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$14: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)>(r0);

        virtualinvoke $r1.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.util.concurrent.Future executeAsync(java.lang.Runnable)>($r2);

        return;
    }
    void doCleanInvalidTempFiles(java.io.File[])
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File[] $r1, $r7;
        java.io.File r2;
        int i0, i1, i2, i3;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$15 r3;
        io.fabric.sdk.android.Logger $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.io.File[];

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void deleteLegacyInvalidCacheDir()>();

        i0 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r2 = $r1[i2];

        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found invalid session part file: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        $r6 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.String getSessionIdFromSessionFile(java.io.File)>(r2);

        r3 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$15;

        specialinvoke r3.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$15: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler,java.lang.String)>(r0, $r6);

        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting all part files for invalid session: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        $r7 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>(r3);

        i1 = lengthof $r7;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        r2 = $r7[i3];

        $r4 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting session file: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r6);

        virtualinvoke r2.<java.io.File: boolean delete()>();

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }
    void doCloseSessions() throws java.lang.Exception
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: void doCloseSessions(boolean)>(0);

        return;
    }
    boolean finalizeSessions()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$13 $r1;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r2 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r1 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$13;

        specialinvoke $r1.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$13: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)>(r0);

        $r3 = virtualinvoke $r2.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.lang.Object executeSyncLoggingException(java.util.concurrent.Callable)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }
    boolean hasOpenSession()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File[] $r1;
        int $i0;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = virtualinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listSessionBeginFiles()>();

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean isHandlingException()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean isHandlingException>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }
    java.io.File[] listSessionBeginFiles()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File[] $r1;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter $r2;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r2 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter;

        specialinvoke $r2.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$FileNameContainsFilter: void <init>(java.lang.String)>("BeginSession");

        $r1 = specialinvoke r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File[] listFilesMatching(java.io.FilenameFilter)>($r2);

        return $r1;
    }
    void openSession()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r1;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$12 $r2;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r2 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$12;

        specialinvoke $r2.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$12: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler)>(r0);

        virtualinvoke $r1.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.util.concurrent.Future executeAsync(java.util.concurrent.Callable)>($r2);

        return;
    }
    void trimSessionFiles()
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.io.File $r1;
        java.io.FilenameFilter $r2;
        java.util.Comparator $r3;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.File filesDir>;

        $r2 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.io.FilenameFilter SESSION_FILE_FILTER>;

        $r3 = <com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.Comparator SMALLEST_FILE_NAME_FIRST>;

        staticinvoke <com.crashlytics.android.core.Utils: void capFileCount(java.io.File,java.io.FilenameFilter,int,java.util.Comparator)>($r1, $r2, 4, $r3);

        return;
    }
    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.Thread $r1;
        java.lang.Throwable $r2, $r15, $r16;
        java.lang.Exception r3;
        java.util.Date r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        io.fabric.sdk.android.Logger $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        boolean $z0;
        com.crashlytics.android.core.CrashlyticsCore $r9;
        android.content.Context $r10;
        android.content.BroadcastReceiver $r11;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r12;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$7 $r13;
        java.lang.Thread$UncaughtExceptionHandler $r14;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.Thread;

        $r2 := @parameter1: java.lang.Throwable;

        entermonitor r0;

     label01:
        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean isHandlingException>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label02:
        $r6 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

     label03:
        $r7 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crashlytics is handling uncaught exception \"");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" from thread ");

        $r8 = virtualinvoke $r1.<java.lang.Thread: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", $r8);

        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean receiversRegistered>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

     label05:
        if $z0 != 0 goto label07;

     label06:
        $r6 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r6.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "Unregistering power receivers.");

        $r9 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsCore crashlyticsCore>;

        $r10 = virtualinvoke $r9.<com.crashlytics.android.core.CrashlyticsCore: android.content.Context getContext()>();

        $r11 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: android.content.BroadcastReceiver powerConnectedReceiver>;

        virtualinvoke $r10.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r11);

        $r11 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: android.content.BroadcastReceiver powerDisconnectedReceiver>;

        virtualinvoke $r10.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r11);

     label07:
        r4 = new java.util.Date;

     label08:
        specialinvoke r4.<java.util.Date: void <init>()>();

        $r12 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

     label09:
        $r13 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$7;

     label10:
        specialinvoke $r13.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$7: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler,java.util.Date,java.lang.Thread,java.lang.Throwable)>(r0, r4, $r1, $r2);

        virtualinvoke $r12.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.lang.Object executeSyncLoggingException(java.util.concurrent.Callable)>($r13);

     label11:
        $r6 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r6.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "Crashlytics completed exception processing. Invoking default exception handler.");

        $r14 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.Thread$UncaughtExceptionHandler defaultHandler>;

        interfaceinvoke $r14.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean isHandlingException>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

     label12:
        exitmonitor r0;

        return;

     label13:
        r3 := @caughtexception;

     label14:
        $r6 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r6.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrashlyticsCore", "An error occurred in the uncaught exception handler", r3);

     label15:
        $r6 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r6.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "Crashlytics completed exception processing. Invoking default exception handler.");

        $r14 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.Thread$UncaughtExceptionHandler defaultHandler>;

        interfaceinvoke $r14.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean isHandlingException>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

     label16:
        goto label12;

     label17:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

     label18:
        $r16 := @caughtexception;

     label19:
        $r6 = staticinvoke <io.fabric.sdk.android.Fabric: io.fabric.sdk.android.Logger getLogger()>();

        interfaceinvoke $r6.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("CrashlyticsCore", "Crashlytics completed exception processing. Invoking default exception handler.");

        $r14 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.lang.Thread$UncaughtExceptionHandler defaultHandler>;

        interfaceinvoke $r14.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

        $r5 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: java.util.concurrent.atomic.AtomicBoolean isHandlingException>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        throw $r16;

     label20:
        nop;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Exception from label02 to label03 with label13;
        catch java.lang.Exception from label04 to label05 with label13;
        catch java.lang.Exception from label06 to label07 with label13;
        catch java.lang.Exception from label08 to label09 with label13;
        catch java.lang.Exception from label10 to label11 with label13;
        catch java.lang.Throwable from label02 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label17;
    }
    void writeNonFatalException(java.lang.Thread, java.lang.Throwable)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        java.lang.Thread $r1;
        java.lang.Throwable $r2;
        java.util.Date r3;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r4;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$9 $r5;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $r1 := @parameter0: java.lang.Thread;

        $r2 := @parameter1: java.lang.Throwable;

        r3 = new java.util.Date;

        specialinvoke r3.<java.util.Date: void <init>()>();

        $r4 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r5 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$9;

        specialinvoke $r5.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$9: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler,java.util.Date,java.lang.Thread,java.lang.Throwable)>(r0, r3, $r1, $r2);

        virtualinvoke $r4.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.util.concurrent.Future executeAsync(java.lang.Runnable)>($r5);

        return;
    }
    void writeToLog(long, java.lang.String)
    {
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler r0;
        long $l0;
        java.lang.String $r1;
        com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper $r2;
        com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$8 $r3;

        r0 := @this: com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler: com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper executorServiceWrapper>;

        $r3 = new com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$8;

        specialinvoke $r3.<com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler$8: void <init>(com.crashlytics.android.core.CrashlyticsUncaughtExceptionHandler,long,java.lang.String)>(r0, $l0, $r1);

        virtualinvoke $r2.<com.crashlytics.android.core.CrashlyticsExecutorServiceWrapper: java.util.concurrent.Future executeAsync(java.util.concurrent.Callable)>($r3);

        return;
    }
