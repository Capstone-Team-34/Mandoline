com.github.mikephil.charting.matrix.Vector3 extends java.lang.Object
public static final com.github.mikephil.charting.matrix.Vector3 UNIT_X
public static final com.github.mikephil.charting.matrix.Vector3 UNIT_Y
public static final com.github.mikephil.charting.matrix.Vector3 UNIT_Z
public static final com.github.mikephil.charting.matrix.Vector3 ZERO
public float x
public float y
public float z
    static void <clinit>()
    {
        com.github.mikephil.charting.matrix.Vector3 $r0;

        $r0 = new com.github.mikephil.charting.matrix.Vector3;

        specialinvoke $r0.<com.github.mikephil.charting.matrix.Vector3: void <init>(float,float,float)>(0.0F, 0.0F, 0.0F);

        <com.github.mikephil.charting.matrix.Vector3: com.github.mikephil.charting.matrix.Vector3 ZERO> = $r0;

        $r0 = new com.github.mikephil.charting.matrix.Vector3;

        specialinvoke $r0.<com.github.mikephil.charting.matrix.Vector3: void <init>(float,float,float)>(1.0F, 0.0F, 0.0F);

        <com.github.mikephil.charting.matrix.Vector3: com.github.mikephil.charting.matrix.Vector3 UNIT_X> = $r0;

        $r0 = new com.github.mikephil.charting.matrix.Vector3;

        specialinvoke $r0.<com.github.mikephil.charting.matrix.Vector3: void <init>(float,float,float)>(0.0F, 1.0F, 0.0F);

        <com.github.mikephil.charting.matrix.Vector3: com.github.mikephil.charting.matrix.Vector3 UNIT_Y> = $r0;

        $r0 = new com.github.mikephil.charting.matrix.Vector3;

        specialinvoke $r0.<com.github.mikephil.charting.matrix.Vector3: void <init>(float,float,float)>(0.0F, 0.0F, 1.0F);

        <com.github.mikephil.charting.matrix.Vector3: com.github.mikephil.charting.matrix.Vector3 UNIT_Z> = $r0;

        return;
    }
    public void <init>()
    {
        com.github.mikephil.charting.matrix.Vector3 r0;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void <init>(float, float, float)
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0, $f1, $f2;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<com.github.mikephil.charting.matrix.Vector3: void set(float,float,float)>($f0, $f1, $f2);

        return;
    }
    public void <init>(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<com.github.mikephil.charting.matrix.Vector3: void set(com.github.mikephil.charting.matrix.Vector3)>($r1);

        return;
    }
    public void <init>(float[])
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float[] $r1;
        float $f0, $f1, $f2;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: float[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $f0 = $r1[0];

        $f1 = $r1[1];

        $f2 = $r1[2];

        virtualinvoke r0.<com.github.mikephil.charting.matrix.Vector3: void set(float,float,float)>($f0, $f1, $f2);

        return;
    }
    public final void add(float, float, float)
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $f3 + $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f0 = $f0 + $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f0 = $f0 + $f2;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

        return;
    }
    public final void add(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float $f0, $f1;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $f0 + $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f0 = $f0 + $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f0 = $f0 + $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

        return;
    }
    public final com.github.mikephil.charting.matrix.Vector3 cross(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1, $r2;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $r2 = new com.github.mikephil.charting.matrix.Vector3;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f2 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f1 = $f1 * $f2;

        $f2 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f3 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f2 = $f2 * $f3;

        $f1 = $f1 - $f2;

        $f2 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f3 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f2 = $f2 * $f3;

        $f3 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f3 = $f3 * $f0;

        $f2 = $f2 - $f3;

        $f3 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f3 = $f3 * $f0;

        $f4 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f0 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $f4 * $f0;

        $f3 = $f3 - $f0;

        specialinvoke $r2.<com.github.mikephil.charting.matrix.Vector3: void <init>(float,float,float)>($f1, $f2, $f3);

        return $r2;
    }
    public final float distance2(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float f0, f1, f2, $f3;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        f0 = f0 - f1;

        f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        f2 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        f1 = f1 - f2;

        f2 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f3 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        f2 = f2 - $f3;

        f0 = f0 * f0;

        f1 = f1 * f1;

        f0 = f0 + f1;

        f1 = f2 * f2;

        f0 = f0 + f1;

        return f0;
    }
    public final void divide(float)
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = $f1 / $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $f1 / $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f0 = $f1 / $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

     label1:
        return;
    }
    public final float dot(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float $f0, $f1, $f2;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $f0 * $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f2 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f2 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        return $f0;
    }
    public final float length()
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0;
        double $d0;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 = virtualinvoke r0.<com.github.mikephil.charting.matrix.Vector3: float length2()>();

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }
    public final float length2()
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0, $f1, $f2;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $f0 * $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f2 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f2 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        return $f0;
    }
    public final void multiply(float)
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0, $f1;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 := @parameter0: float;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = $f1 * $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $f1 * $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f0 = $f1 * $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

        return;
    }
    public final void multiply(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float $f0, $f1;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $f0 * $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f0 = $f0 * $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f0 = $f0 * $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

        return;
    }
    public final float normalize()
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 = virtualinvoke r0.<com.github.mikephil.charting.matrix.Vector3: float length()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = $f1 / $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $f1 / $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f1 = $f1 / $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f1;

     label1:
        return $f0;
    }
    public final boolean pointsInSameDirection(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float $f0;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $f0 = virtualinvoke r0.<com.github.mikephil.charting.matrix.Vector3: float dot(com.github.mikephil.charting.matrix.Vector3)>($r1);

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public final void set(float, float, float)
    {
        com.github.mikephil.charting.matrix.Vector3 r0;
        float $f0, $f1, $f2;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f2;

        return;
    }
    public final void set(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float $f0;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $f0 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f0;

        $f0 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f0;

        $f0 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

        return;
    }
    public final void subtract(com.github.mikephil.charting.matrix.Vector3)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float $f0, $f1;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f0 = $f0 - $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f0 = $f0 - $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f0;

        $f0 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f1 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f0 = $f0 - $f1;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

        return;
    }
    public final void subtractMultiple(com.github.mikephil.charting.matrix.Vector3, float)
    {
        com.github.mikephil.charting.matrix.Vector3 r0, $r1;
        float $f0, $f1, $f2;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        $r1 := @parameter0: com.github.mikephil.charting.matrix.Vector3;

        $f0 := @parameter1: float;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f2 = $r1.<com.github.mikephil.charting.matrix.Vector3: float x>;

        $f2 = $f2 * $f0;

        $f1 = $f1 - $f2;

        r0.<com.github.mikephil.charting.matrix.Vector3: float x> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f2 = $r1.<com.github.mikephil.charting.matrix.Vector3: float y>;

        $f2 = $f2 * $f0;

        $f1 = $f1 - $f2;

        r0.<com.github.mikephil.charting.matrix.Vector3: float y> = $f1;

        $f1 = r0.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f2 = $r1.<com.github.mikephil.charting.matrix.Vector3: float z>;

        $f0 = $f2 * $f0;

        $f0 = $f1 - $f0;

        r0.<com.github.mikephil.charting.matrix.Vector3: float z> = $f0;

        return;
    }
    public final void zero()
    {
        com.github.mikephil.charting.matrix.Vector3 r0;

        r0 := @this: com.github.mikephil.charting.matrix.Vector3;

        virtualinvoke r0.<com.github.mikephil.charting.matrix.Vector3: void set(float,float,float)>(0.0F, 0.0F, 0.0F);

        return;
    }
