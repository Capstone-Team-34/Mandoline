com.github.mikephil.charting.utils.ViewPortHandler extends java.lang.Object
protected float mChartHeight
protected float mChartWidth
protected android.graphics.RectF mContentRect
protected final android.graphics.Matrix mMatrixTouch
private float mMaxScaleX
private float mMinScaleX
private float mMinScaleY
private float mScaleX
private float mScaleY
private float mTransOffsetX
private float mTransOffsetY
    public void <init>()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.Matrix $r1;
        android.graphics.RectF $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.graphics.Matrix;

        specialinvoke $r1.<android.graphics.Matrix: void <init>()>();

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch> = $r1;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect> = $r2;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartWidth> = 0.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartHeight> = 0.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleY> = 1.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX> = 1.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMaxScaleX> = 3.4028235E38F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX> = 1.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleY> = 1.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetX> = 0.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetY> = 0.0F;

        return;
    }
    public boolean canZoomInMoreX()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX>;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMaxScaleX>;

        $b0 = $f1 cmpg $f0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean canZoomOutMoreX()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX>;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX>;

        $b0 = $f1 cmpl $f0;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void centerViewPort(float[], android.view.View)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float[] $r1;
        android.view.View $r2;
        android.graphics.Matrix r3, $r4;
        float f0, f1, $f2;
        java.lang.Throwable $r5;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 := @parameter0: float[];

        $r2 := @parameter1: android.view.View;

        entermonitor r0;

     label1:
        r3 = new android.graphics.Matrix;

        specialinvoke r3.<android.graphics.Matrix: void <init>()>();

        $r4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke r3.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r4);

        f0 = $r1[0];

        f1 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetLeft()>();

        f0 = f0 - f1;

        f1 = $r1[1];

        $f2 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetTop()>();

        f1 = f1 - $f2;

        f0 = neg f0;

        f1 = neg f1;

        virtualinvoke r3.<android.graphics.Matrix: boolean postTranslate(float,float)>(f0, f1);

        virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix refresh(android.graphics.Matrix,android.view.View,boolean)>(r3, $r2, 1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public float contentBottom()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        f0 = $r1.<android.graphics.RectF: float bottom>;

        return f0;
    }
    public float contentHeight()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;
        android.graphics.RectF $r1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f0 = virtualinvoke $r1.<android.graphics.RectF: float height()>();

        return $f0;
    }
    public float contentLeft()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        f0 = $r1.<android.graphics.RectF: float left>;

        return f0;
    }
    public float contentRight()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        f0 = $r1.<android.graphics.RectF: float right>;

        return f0;
    }
    public float contentTop()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        f0 = $r1.<android.graphics.RectF: float top>;

        return f0;
    }
    public float contentWidth()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;
        android.graphics.RectF $r1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f0 = virtualinvoke $r1.<android.graphics.RectF: float width()>();

        return $f0;
    }
    public android.graphics.Matrix fitScreen()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.Matrix r1, $r3;
        float[] r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX> = 1.0F;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleY> = 1.0F;

        r1 = new android.graphics.Matrix;

        specialinvoke r1.<android.graphics.Matrix: void <init>()>();

        $r3 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r3);

        r2 = newarray (float)[9];

        virtualinvoke r1.<android.graphics.Matrix: void getValues(float[])>(r2);

        r2[2] = 0.0F;

        r2[5] = 0.0F;

        r2[0] = 1.0F;

        r2[4] = 1.0F;

        virtualinvoke r1.<android.graphics.Matrix: void setValues(float[])>(r2);

        return r1;
    }
    public float getChartHeight()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartHeight>;

        return f0;
    }
    public float getChartWidth()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartWidth>;

        return f0;
    }
    public android.graphics.PointF getContentCenter()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.PointF $r1;
        android.graphics.RectF $r2;
        float $f0, $f1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = new android.graphics.PointF;

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f0 = virtualinvoke $r2.<android.graphics.RectF: float centerX()>();

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f1 = virtualinvoke $r2.<android.graphics.RectF: float centerY()>();

        specialinvoke $r1.<android.graphics.PointF: void <init>(float,float)>($f0, $f1);

        return $r1;
    }
    public android.graphics.RectF getContentRect()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF r1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        return r1;
    }
    public android.graphics.Matrix getMatrixTouch()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.Matrix r1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        return r1;
    }
    public float getScaleX()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX>;

        return f0;
    }
    public float getScaleY()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleY>;

        return f0;
    }
    public boolean hasChartDimens()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartHeight>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartWidth>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean hasNoDragOffset()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetX>;

        $b0 = $f0 cmpg 0.0F;

        if $b0 > 0 goto label1;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetY>;

        $b0 = $f0 cmpg 0.0F;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isFullyZoomedOut()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        boolean $z0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isFullyZoomedOutX()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isFullyZoomedOutY()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isFullyZoomedOutX()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX>;

        $f1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX>;

        $b0 = $f0 cmpl $f1;

        if $b0 > 0 goto label1;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 <= 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
    public boolean isFullyZoomedOutY()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleY>;

        $f1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleY>;

        $b0 = $f0 cmpl $f1;

        if $b0 > 0 goto label1;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleY>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 <= 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
    public boolean isInBounds(float, float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsX(float)>($f0);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsY(float)>($f1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInBoundsBottom(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        int $i0;
        android.graphics.RectF $r1;
        byte $b1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f0 = $f0 * 100.0F;

        $i0 = (int) $f0;

        $f0 = (float) $i0;

        $f0 = $f0 / 100.0F;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f1 = $r1.<android.graphics.RectF: float bottom>;

        $b1 = $f1 cmpl $f0;

        if $b1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInBoundsLeft(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        android.graphics.RectF $r1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f1 = $r1.<android.graphics.RectF: float left>;

        $b0 = $f1 cmpg $f0;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInBoundsRight(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        int $i0;
        android.graphics.RectF $r1;
        byte $b1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f0 = $f0 * 100.0F;

        $i0 = (int) $f0;

        $f0 = (float) $i0;

        $f0 = $f0 / 100.0F;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f1 = $r1.<android.graphics.RectF: float right>;

        $b1 = $f1 cmpl $f0;

        if $b1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInBoundsTop(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        android.graphics.RectF $r1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f1 = $r1.<android.graphics.RectF: float top>;

        $b0 = $f1 cmpg $f0;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInBoundsX(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;
        boolean $z0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsLeft(float)>($f0);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsRight(float)>($f0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInBoundsY(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;
        boolean $z0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsTop(float)>($f0);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: boolean isInBoundsBottom(float)>($f0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void limitTransAndScale(android.graphics.Matrix, android.graphics.RectF)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.Matrix $r1;
        android.graphics.RectF $r2;
        float f0, f1, f2, f3, $f4;
        float[] r3;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 := @parameter0: android.graphics.Matrix;

        $r2 := @parameter1: android.graphics.RectF;

        r3 = newarray (float)[9];

        virtualinvoke $r1.<android.graphics.Matrix: void getValues(float[])>(r3);

        f2 = r3[2];

        f0 = r3[0];

        f3 = r3[5];

        f1 = r3[4];

        $f4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX>;

        f0 = staticinvoke <java.lang.Math: float max(float,float)>($f4, f0);

        $f4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMaxScaleX>;

        f0 = staticinvoke <java.lang.Math: float min(float,float)>(f0, $f4);

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX> = f0;

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleY>;

        f1 = staticinvoke <java.lang.Math: float max(float,float)>(f0, f1);

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleY> = f1;

        f0 = 0.0F;

        f1 = 0.0F;

        if $r2 == null goto label1;

        f0 = virtualinvoke $r2.<android.graphics.RectF: float width()>();

        f1 = virtualinvoke $r2.<android.graphics.RectF: float height()>();

     label1:
        f0 = neg f0;

        $f4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX>;

        $f4 = $f4 - 1.0F;

        f0 = f0 * $f4;

        $f4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetX>;

        f0 = f0 - $f4;

        f2 = staticinvoke <java.lang.Math: float max(float,float)>(f2, f0);

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetX>;

        f2 = staticinvoke <java.lang.Math: float min(float,float)>(f2, f0);

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleY>;

        f0 = f0 - 1.0F;

        f1 = f1 * f0;

        f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetY>;

        f1 = f0 + f1;

        f3 = staticinvoke <java.lang.Math: float min(float,float)>(f3, f1);

        f1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetY>;

        f1 = neg f1;

        f3 = staticinvoke <java.lang.Math: float max(float,float)>(f3, f1);

        r3[2] = f2;

        f2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleX>;

        r3[0] = f2;

        r3[5] = f3;

        f3 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mScaleY>;

        r3[4] = f3;

        virtualinvoke $r1.<android.graphics.Matrix: void setValues(float[])>(r3);

        return;
    }
    public float offsetBottom()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        android.graphics.RectF $r1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartHeight>;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f1 = $r1.<android.graphics.RectF: float bottom>;

        $f0 = $f0 - $f1;

        return $f0;
    }
    public float offsetLeft()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        f0 = $r1.<android.graphics.RectF: float left>;

        return f0;
    }
    public float offsetRight()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        android.graphics.RectF $r1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartWidth>;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f1 = $r1.<android.graphics.RectF: float right>;

        $f0 = $f0 - $f1;

        return $f0;
    }
    public float offsetTop()
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        f0 = $r1.<android.graphics.RectF: float top>;

        return f0;
    }
    public android.graphics.Matrix refresh(android.graphics.Matrix, android.view.View, boolean)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.Matrix $r1, $r4;
        android.view.View $r2;
        boolean $z0;
        android.graphics.RectF $r3;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $r1 := @parameter0: android.graphics.Matrix;

        $r2 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $r4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke $r4.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r1);

        $r4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        $r3 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: void limitTransAndScale(android.graphics.Matrix,android.graphics.RectF)>($r4, $r3);

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<android.view.View: void invalidate()>();

     label1:
        $r4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke $r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r4);

        return $r1;
    }
    public void restrainViewPort(float, float, float, float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1, $f2, $f3, $f4;
        android.graphics.RectF $r1;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        $f4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartWidth>;

        $f2 = $f4 - $f2;

        $f4 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartHeight>;

        $f3 = $f4 - $f3;

        virtualinvoke $r1.<android.graphics.RectF: void set(float,float,float,float)>($f0, $f1, $f2, $f3);

        return;
    }
    public void setChartDimens(float, float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetLeft()>();

        $f3 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetTop()>();

        $f4 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetRight()>();

        $f5 = virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetBottom()>();

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartHeight> = $f1;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mChartWidth> = $f0;

        virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: void restrainViewPort(float,float,float,float)>($f2, $f3, $f4, $f5);

        return;
    }
    public void setDragOffsetX(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <com.github.mikephil.charting.utils.Utils: float convertDpToPixel(float)>($f0);

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetX> = $f0;

        return;
    }
    public void setDragOffsetY(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <com.github.mikephil.charting.utils.Utils: float convertDpToPixel(float)>($f0);

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mTransOffsetY> = $f0;

        return;
    }
    public void setMaximumScaleX(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0;
        android.graphics.Matrix $r1;
        android.graphics.RectF $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMaxScaleX> = $f0;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: void limitTransAndScale(android.graphics.Matrix,android.graphics.RectF)>($r1, $r2);

        return;
    }
    public void setMinMaxScaleX(float, float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        android.graphics.RectF $r1;
        byte $b0;
        android.graphics.Matrix $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $b0 = $f1 cmpg 1.0F;

        if $b0 >= 0 goto label1;

        $f1 = 1.0F;

     label1:
        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX> = $f1;

        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMaxScaleX> = $f0;

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: void limitTransAndScale(android.graphics.Matrix,android.graphics.RectF)>($r2, $r1);

        return;
    }
    public void setMinimumScaleX(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float $f0;
        byte $b0;
        android.graphics.Matrix $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpg 1.0F;

        if $b0 >= 0 goto label1;

        $f0 = 1.0F;

     label1:
        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleX> = $f0;

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: void limitTransAndScale(android.graphics.Matrix,android.graphics.RectF)>($r2, $r1);

        return;
    }
    public void setMinimumScaleY(float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        android.graphics.RectF $r1;
        float $f0;
        byte $b0;
        android.graphics.Matrix $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpg 1.0F;

        if $b0 >= 0 goto label1;

        $f0 = 1.0F;

     label1:
        r0.<com.github.mikephil.charting.utils.ViewPortHandler: float mMinScaleY> = $f0;

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        $r1 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.RectF mContentRect>;

        virtualinvoke r0.<com.github.mikephil.charting.utils.ViewPortHandler: void limitTransAndScale(android.graphics.Matrix,android.graphics.RectF)>($r2, $r1);

        return;
    }
    public android.graphics.Matrix zoom(float, float, float, float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1, $f2, $f3;
        android.graphics.Matrix r1, $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        r1 = new android.graphics.Matrix;

        specialinvoke r1.<android.graphics.Matrix: void <init>()>();

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r2);

        virtualinvoke r1.<android.graphics.Matrix: boolean postScale(float,float,float,float)>($f0, $f1, $f2, $f3);

        return r1;
    }
    public android.graphics.Matrix zoomIn(float, float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        android.graphics.Matrix r1, $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        r1 = new android.graphics.Matrix;

        specialinvoke r1.<android.graphics.Matrix: void <init>()>();

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r2);

        virtualinvoke r1.<android.graphics.Matrix: boolean postScale(float,float,float,float)>(1.4F, 1.4F, $f0, $f1);

        return r1;
    }
    public android.graphics.Matrix zoomOut(float, float)
    {
        com.github.mikephil.charting.utils.ViewPortHandler r0;
        float $f0, $f1;
        android.graphics.Matrix r1, $r2;

        r0 := @this: com.github.mikephil.charting.utils.ViewPortHandler;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        r1 = new android.graphics.Matrix;

        specialinvoke r1.<android.graphics.Matrix: void <init>()>();

        $r2 = r0.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r2);

        virtualinvoke r1.<android.graphics.Matrix: boolean postScale(float,float,float,float)>(0.7F, 0.7F, $f0, $f1);

        return r1;
    }
