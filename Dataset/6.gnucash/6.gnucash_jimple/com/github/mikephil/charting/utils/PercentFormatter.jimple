com.github.mikephil.charting.utils.PercentFormatter extends java.lang.Object implements com.github.mikephil.charting.utils.ValueFormatter
protected java.text.DecimalFormat mFormat
    public void <init>()
    {
        com.github.mikephil.charting.utils.PercentFormatter r0;
        java.text.DecimalFormat $r1;

        r0 := @this: com.github.mikephil.charting.utils.PercentFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.text.DecimalFormat;

        specialinvoke $r1.<java.text.DecimalFormat: void <init>(java.lang.String)>("###,###,##0.0");

        r0.<com.github.mikephil.charting.utils.PercentFormatter: java.text.DecimalFormat mFormat> = $r1;

        return;
    }
    public java.lang.String getFormattedValue(float)
    {
        com.github.mikephil.charting.utils.PercentFormatter r0;
        float $f0;
        double $d0;
        java.lang.StringBuilder $r1;
        java.text.DecimalFormat $r2;
        java.lang.String $r3;

        r0 := @this: com.github.mikephil.charting.utils.PercentFormatter;

        $f0 := @parameter0: float;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<com.github.mikephil.charting.utils.PercentFormatter: java.text.DecimalFormat mFormat>;

        $d0 = (double) $f0;

        $r3 = virtualinvoke $r2.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
