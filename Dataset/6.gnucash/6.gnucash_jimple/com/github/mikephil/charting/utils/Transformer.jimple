com.github.mikephil.charting.utils.Transformer extends java.lang.Object
private android.graphics.Matrix mMBuffer1
private android.graphics.Matrix mMBuffer2
protected android.graphics.Matrix mMatrixOffset
protected android.graphics.Matrix mMatrixValueToPx
protected com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler
    public void <init>(com.github.mikephil.charting.utils.ViewPortHandler)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        com.github.mikephil.charting.utils.ViewPortHandler $r1;
        android.graphics.Matrix $r2;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 := @parameter0: com.github.mikephil.charting.utils.ViewPortHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx> = $r2;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset> = $r2;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer1> = $r2;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer2> = $r2;

        r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler> = $r1;

        return;
    }
    public float[] generateTransformedValuesBarChart(java.util.List, int, com.github.mikephil.charting.data.BarData, float)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        int $i0, $i1, i2, $i3, $i4, $i5;
        com.github.mikephil.charting.data.BarData $r2;
        float $f0, f1, $f2, $f3;
        float[] r3;
        java.lang.Object $r4;
        com.github.mikephil.charting.data.Entry r5;
        android.graphics.Matrix $r6;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.github.mikephil.charting.data.BarData;

        $f0 := @parameter3: float;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = $i1 * 2;

        r3 = newarray (float)[$i1];

        $i1 = virtualinvoke $r2.<com.github.mikephil.charting.data.BarData: int getDataSetCount()>();

        $f2 = virtualinvoke $r2.<com.github.mikephil.charting.data.BarData: float getGroupSpace()>();

        i2 = 0;

     label1:
        $i3 = lengthof r3;

        if i2 >= $i3 goto label2;

        $i3 = i2 / 2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r5 = (com.github.mikephil.charting.data.Entry) $r4;

        $i3 = virtualinvoke r5.<com.github.mikephil.charting.data.Entry: int getXIndex()>();

        $i4 = virtualinvoke r5.<com.github.mikephil.charting.data.Entry: int getXIndex()>();

        $i5 = $i1 + -1;

        $i5 = $i5 * $i3;

        $i4 = $i4 + $i5;

        $i4 = $i4 + $i0;

        f1 = (float) $i4;

        $f3 = (float) $i3;

        $f3 = $f3 * $f2;

        f1 = f1 + $f3;

        $f3 = $f2 / 2.0F;

        f1 = f1 + $f3;

        $f3 = virtualinvoke r5.<com.github.mikephil.charting.data.Entry: float getVal()>();

        r3[i2] = f1;

        $i3 = i2 + 1;

        f1 = $f3 * $f0;

        r3[$i3] = f1;

        i2 = i2 + 2;

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>(r3);

        return r3;
    }
    public float[] generateTransformedValuesBubble(java.util.List, float, float, int, int)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        float $f0, $f1, $f2, $f3;
        int $i0, $i1, i2, $i3;
        float[] r2;
        double $d0;
        java.lang.Object $r3;
        com.github.mikephil.charting.data.Entry r4;
        android.graphics.Matrix $r5;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i1 = $i1 - $i0;

        $d0 = (double) $i1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        $i1 = $i1 * 2;

        r2 = newarray (float)[$i1];

        i2 = 0;

     label1:
        if i2 >= $i1 goto label3;

        $i3 = i2 / 2;

        $i3 = $i3 + $i0;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r4 = (com.github.mikephil.charting.data.Entry) $r3;

        if r4 == null goto label2;

        $i3 = virtualinvoke r4.<com.github.mikephil.charting.data.Entry: int getXIndex()>();

        $i3 = $i3 - $i0;

        $f2 = (float) $i3;

        $f2 = $f2 * $f0;

        $f3 = (float) $i0;

        $f2 = $f2 + $f3;

        r2[i2] = $f2;

        $i3 = i2 + 1;

        $f2 = virtualinvoke r4.<com.github.mikephil.charting.data.Entry: float getVal()>();

        $f2 = $f2 * $f1;

        r2[$i3] = $f2;

     label2:
        i2 = i2 + 2;

        goto label1;

     label3:
        $r5 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: void mapPoints(float[])>(r2);

        return r2;
    }
    public float[] generateTransformedValuesCandle(java.util.List, float, float, int, int)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        float $f0, $f1, $f2;
        int $i0, $i1, i2, $i3;
        float[] r2;
        double $d0;
        java.lang.Object $r3;
        com.github.mikephil.charting.data.CandleEntry r4;
        android.graphics.Matrix $r5;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i1 = $i1 - $i0;

        $f2 = (float) $i1;

        $f0 = $f2 * $f0;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        $i1 = $i1 * 2;

        r2 = newarray (float)[$i1];

        i2 = 0;

     label1:
        if i2 >= $i1 goto label3;

        $i3 = i2 / 2;

        $i3 = $i3 + $i0;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r4 = (com.github.mikephil.charting.data.CandleEntry) $r3;

        if r4 == null goto label2;

        $i3 = virtualinvoke r4.<com.github.mikephil.charting.data.CandleEntry: int getXIndex()>();

        $f0 = (float) $i3;

        r2[i2] = $f0;

        $i3 = i2 + 1;

        $f0 = virtualinvoke r4.<com.github.mikephil.charting.data.CandleEntry: float getHigh()>();

        $f0 = $f0 * $f1;

        r2[$i3] = $f0;

     label2:
        i2 = i2 + 2;

        goto label1;

     label3:
        $r5 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: void mapPoints(float[])>(r2);

        return r2;
    }
    public float[] generateTransformedValuesHorizontalBarChart(java.util.List, int, com.github.mikephil.charting.data.BarData, float)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        int $i0, $i1, i2, $i3, $i4, $i5;
        com.github.mikephil.charting.data.BarData $r2;
        float $f0, f1, $f2, $f3;
        float[] r3;
        java.lang.Object $r4;
        com.github.mikephil.charting.data.Entry r5;
        android.graphics.Matrix $r6;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.github.mikephil.charting.data.BarData;

        $f0 := @parameter3: float;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = $i1 * 2;

        r3 = newarray (float)[$i1];

        $i1 = virtualinvoke $r2.<com.github.mikephil.charting.data.BarData: int getDataSetCount()>();

        $f2 = virtualinvoke $r2.<com.github.mikephil.charting.data.BarData: float getGroupSpace()>();

        i2 = 0;

     label1:
        $i3 = lengthof r3;

        if i2 >= $i3 goto label2;

        $i3 = i2 / 2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r5 = (com.github.mikephil.charting.data.Entry) $r4;

        $i3 = virtualinvoke r5.<com.github.mikephil.charting.data.Entry: int getXIndex()>();

        $i4 = virtualinvoke r5.<com.github.mikephil.charting.data.Entry: int getXIndex()>();

        $i5 = $i1 + -1;

        $i5 = $i5 * $i3;

        $i4 = $i4 + $i5;

        $i4 = $i4 + $i0;

        f1 = (float) $i4;

        $f3 = (float) $i3;

        $f3 = $f3 * $f2;

        f1 = f1 + $f3;

        $f3 = $f2 / 2.0F;

        f1 = f1 + $f3;

        $f3 = virtualinvoke r5.<com.github.mikephil.charting.data.Entry: float getVal()>();

        $f3 = $f3 * $f0;

        r3[i2] = $f3;

        $i3 = i2 + 1;

        r3[$i3] = f1;

        i2 = i2 + 2;

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>(r3);

        return r3;
    }
    public float[] generateTransformedValuesLine(java.util.List, float, float, int, int)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        float $f0, $f1, $f2;
        int $i0, $i1, i2, $i3;
        float[] r2;
        double $d0;
        java.lang.Object $r3;
        com.github.mikephil.charting.data.Entry r4;
        android.graphics.Matrix $r5;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i1 = $i1 - $i0;

        $f2 = (float) $i1;

        $f0 = $f2 * $f0;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        $i1 = $i1 * 2;

        r2 = newarray (float)[$i1];

        i2 = 0;

     label1:
        if i2 >= $i1 goto label3;

        $i3 = i2 / 2;

        $i3 = $i3 + $i0;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r4 = (com.github.mikephil.charting.data.Entry) $r3;

        if r4 == null goto label2;

        $i3 = virtualinvoke r4.<com.github.mikephil.charting.data.Entry: int getXIndex()>();

        $f0 = (float) $i3;

        r2[i2] = $f0;

        $i3 = i2 + 1;

        $f0 = virtualinvoke r4.<com.github.mikephil.charting.data.Entry: float getVal()>();

        $f0 = $f0 * $f1;

        r2[$i3] = $f0;

     label2:
        i2 = i2 + 2;

        goto label1;

     label3:
        $r5 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: void mapPoints(float[])>(r2);

        return r2;
    }
    public float[] generateTransformedValuesScatter(java.util.List, float)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        float $f0, $f1;
        float[] r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.github.mikephil.charting.data.Entry r4;
        android.graphics.Matrix $r5;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        $f0 := @parameter1: float;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i0 = $i0 * 2;

        r2 = newarray (float)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label3;

        $i1 = $i0 / 2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i1);

        r4 = (com.github.mikephil.charting.data.Entry) $r3;

        if r4 == null goto label2;

        $i1 = virtualinvoke r4.<com.github.mikephil.charting.data.Entry: int getXIndex()>();

        $f1 = (float) $i1;

        r2[$i0] = $f1;

        $i1 = $i0 + 1;

        $f1 = virtualinvoke r4.<com.github.mikephil.charting.data.Entry: float getVal()>();

        $f1 = $f1 * $f0;

        r2[$i1] = $f1;

     label2:
        $i0 = $i0 + 2;

        goto label1;

     label3:
        $r5 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: void mapPoints(float[])>(r2);

        return r2;
    }
    public android.graphics.Matrix getOffsetMatrix()
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.Matrix r1;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        return r1;
    }
    public android.graphics.Matrix getPixelToValueMatrix()
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.Matrix $r1, $r2;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r2 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer2>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>($r1);

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer2>;

        return $r1;
    }
    public android.graphics.Matrix getValueMatrix()
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.Matrix r1;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        return r1;
    }
    public android.graphics.Matrix getValueToPixelMatrix()
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.Matrix $r1, $r2;
        com.github.mikephil.charting.utils.ViewPortHandler $r3;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer1>;

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r2);

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer1>;

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $r2 = $r3.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix mMatrixTouch>;

        virtualinvoke $r1.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r2);

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer1>;

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r1.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r2);

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMBuffer1>;

        return $r1;
    }
    public com.github.mikephil.charting.utils.PointD getValuesByTouchPoint(float, float)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        float $f0, $f1;
        float[] r1;
        double d0, d1;
        com.github.mikephil.charting.utils.PointD $r2;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        r1 = newarray (float)[2];

        r1[0] = $f0;

        r1[1] = $f1;

        virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: void pixelsToValue(float[])>(r1);

        $f0 = r1[0];

        d0 = (double) $f0;

        $f0 = r1[1];

        d1 = (double) $f0;

        $r2 = new com.github.mikephil.charting.utils.PointD;

        specialinvoke $r2.<com.github.mikephil.charting.utils.PointD: void <init>(double,double)>(d0, d1);

        return $r2;
    }
    public void pathValueToPixel(android.graphics.Path)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.Path $r1;
        android.graphics.Matrix $r2;
        com.github.mikephil.charting.utils.ViewPortHandler $r3;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 := @parameter0: android.graphics.Path;

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r1.<android.graphics.Path: void transform(android.graphics.Matrix)>($r2);

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $r2 = virtualinvoke $r3.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix getMatrixTouch()>();

        virtualinvoke $r1.<android.graphics.Path: void transform(android.graphics.Matrix)>($r2);

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r1.<android.graphics.Path: void transform(android.graphics.Matrix)>($r2);

        return;
    }
    public void pathValuesToPixel(java.util.List)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        int i0, $i1;
        java.lang.Object $r2;
        android.graphics.Path $r3;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        i0 = 0;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (android.graphics.Path) $r2;

        virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: void pathValueToPixel(android.graphics.Path)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void pixelsToValue(float[])
    {
        com.github.mikephil.charting.utils.Transformer r0;
        float[] $r1;
        android.graphics.Matrix r2, $r3;
        com.github.mikephil.charting.utils.ViewPortHandler $r4;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 := @parameter0: float[];

        r2 = new android.graphics.Matrix;

        specialinvoke r2.<android.graphics.Matrix: void <init>()>();

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r3.<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>(r2);

        virtualinvoke r2.<android.graphics.Matrix: void mapPoints(float[])>($r1);

        $r4 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $r3 = virtualinvoke $r4.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix getMatrixTouch()>();

        virtualinvoke $r3.<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>(r2);

        virtualinvoke r2.<android.graphics.Matrix: void mapPoints(float[])>($r1);

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r3.<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>(r2);

        virtualinvoke r2.<android.graphics.Matrix: void mapPoints(float[])>($r1);

        return;
    }
    public void pointValuesToPixel(float[])
    {
        com.github.mikephil.charting.utils.Transformer r0;
        float[] $r1;
        android.graphics.Matrix $r2;
        com.github.mikephil.charting.utils.ViewPortHandler $r3;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 := @parameter0: float[];

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r2.<android.graphics.Matrix: void mapPoints(float[])>($r1);

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $r2 = virtualinvoke $r3.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix getMatrixTouch()>();

        virtualinvoke $r2.<android.graphics.Matrix: void mapPoints(float[])>($r1);

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r2.<android.graphics.Matrix: void mapPoints(float[])>($r1);

        return;
    }
    public void prepareMatrixOffset(boolean)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        boolean $z0;
        android.graphics.Matrix $r1;
        com.github.mikephil.charting.utils.ViewPortHandler $r2;
        float $f0, $f1, $f2;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r1.<android.graphics.Matrix: void reset()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $f0 = virtualinvoke $r2.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetLeft()>();

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $f1 = virtualinvoke $r2.<com.github.mikephil.charting.utils.ViewPortHandler: float getChartHeight()>();

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $f2 = virtualinvoke $r2.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetBottom()>();

        $f1 = $f1 - $f2;

        virtualinvoke $r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f0, $f1);

        return;

     label1:
        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $f0 = virtualinvoke $r2.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetLeft()>();

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $f1 = virtualinvoke $r2.<com.github.mikephil.charting.utils.ViewPortHandler: float offsetTop()>();

        $f1 = neg $f1;

        virtualinvoke $r1.<android.graphics.Matrix: void setTranslate(float,float)>($f0, $f1);

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r1.<android.graphics.Matrix: boolean postScale(float,float)>(1.0F, -1.0F);

        return;
    }
    public void prepareMatrixValuePx(float, float, float, float)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        float $f0, $f1, $f2, $f3, $f4;
        com.github.mikephil.charting.utils.ViewPortHandler $r1;
        android.graphics.Matrix $r2;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $f4 = virtualinvoke $r1.<com.github.mikephil.charting.utils.ViewPortHandler: float contentWidth()>();

        $f1 = $f4 / $f1;

        $r1 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $f4 = virtualinvoke $r1.<com.github.mikephil.charting.utils.ViewPortHandler: float contentHeight()>();

        $f2 = $f4 / $f2;

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r2.<android.graphics.Matrix: void reset()>();

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        $f0 = neg $f0;

        $f3 = neg $f3;

        virtualinvoke $r2.<android.graphics.Matrix: boolean postTranslate(float,float)>($f0, $f3);

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        $f0 = neg $f2;

        virtualinvoke $r2.<android.graphics.Matrix: boolean postScale(float,float)>($f1, $f0);

        return;
    }
    public void rectValueToPixel(android.graphics.RectF)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.RectF $r1;
        android.graphics.Matrix $r2;
        com.github.mikephil.charting.utils.ViewPortHandler $r3;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 := @parameter0: android.graphics.RectF;

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $r2 = virtualinvoke $r3.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix getMatrixTouch()>();

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        return;
    }
    public void rectValueToPixel(android.graphics.RectF, float)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.RectF $r1;
        float $f0, $f1;
        android.graphics.Matrix $r2;
        byte $b0;
        com.github.mikephil.charting.utils.ViewPortHandler $r3;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 := @parameter0: android.graphics.RectF;

        $f0 := @parameter1: float;

        $f1 = $r1.<android.graphics.RectF: float top>;

        $b0 = $f1 cmpl 0.0F;

        if $b0 <= 0 goto label2;

        $f1 = $r1.<android.graphics.RectF: float top>;

        $f0 = $f1 * $f0;

        $r1.<android.graphics.RectF: float top> = $f0;

     label1:
        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $r2 = virtualinvoke $r3.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix getMatrixTouch()>();

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        return;

     label2:
        $f1 = $r1.<android.graphics.RectF: float bottom>;

        $f0 = $f1 * $f0;

        $r1.<android.graphics.RectF: float bottom> = $f0;

        goto label1;
    }
    public void rectValueToPixelHorizontal(android.graphics.RectF, float)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        android.graphics.RectF $r1;
        float $f0, $f1;
        android.graphics.Matrix $r2;
        byte $b0;
        com.github.mikephil.charting.utils.ViewPortHandler $r3;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        $r1 := @parameter0: android.graphics.RectF;

        $f0 := @parameter1: float;

        $f1 = $r1.<android.graphics.RectF: float left>;

        $b0 = $f1 cmpl 0.0F;

        if $b0 <= 0 goto label2;

        $f1 = $r1.<android.graphics.RectF: float left>;

        $f0 = $f1 * $f0;

        $r1.<android.graphics.RectF: float left> = $f0;

     label1:
        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixValueToPx>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        $r3 = r0.<com.github.mikephil.charting.utils.Transformer: com.github.mikephil.charting.utils.ViewPortHandler mViewPortHandler>;

        $r2 = virtualinvoke $r3.<com.github.mikephil.charting.utils.ViewPortHandler: android.graphics.Matrix getMatrixTouch()>();

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        $r2 = r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix mMatrixOffset>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r1);

        return;

     label2:
        $f1 = $r1.<android.graphics.RectF: float right>;

        $f0 = $f1 * $f0;

        $r1.<android.graphics.RectF: float right> = $f0;

        goto label1;
    }
    public void rectValuesToPixel(java.util.List)
    {
        com.github.mikephil.charting.utils.Transformer r0;
        java.util.List r1;
        android.graphics.Matrix $r2;
        int i0, $i1;
        java.lang.Object $r3;
        android.graphics.RectF $r4;

        r0 := @this: com.github.mikephil.charting.utils.Transformer;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<com.github.mikephil.charting.utils.Transformer: android.graphics.Matrix getValueToPixelMatrix()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (android.graphics.RectF) $r3;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r4);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
