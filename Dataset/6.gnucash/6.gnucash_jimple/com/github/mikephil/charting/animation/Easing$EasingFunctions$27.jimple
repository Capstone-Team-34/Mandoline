com.github.mikephil.charting.animation.Easing$EasingFunctions$27 extends java.lang.Object implements com.github.mikephil.charting.animation.EasingFunction
    void <init>()
    {
        com.github.mikephil.charting.animation.Easing$EasingFunctions$27 r0;

        r0 := @this: com.github.mikephil.charting.animation.Easing$EasingFunctions$27;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public float getInterpolation(float)
    {
        com.github.mikephil.charting.animation.Easing$EasingFunctions$27 r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.github.mikephil.charting.animation.Easing$EasingFunctions$27;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpg 0.36363637F;

        if $b0 >= 0 goto label1;

        $f1 = 7.5625F * $f0;

        $f0 = $f1 * $f0;

        return $f0;

     label1:
        $b0 = $f0 cmpg 0.72727275F;

        if $b0 >= 0 goto label2;

        $f0 = $f0 - 0.54545456F;

        $f1 = 7.5625F * $f0;

        $f0 = $f1 * $f0;

        $f0 = $f0 + 0.75F;

        return $f0;

     label2:
        $b0 = $f0 cmpg 0.90909094F;

        if $b0 >= 0 goto label3;

        $f0 = $f0 - 0.8181818F;

        $f1 = 7.5625F * $f0;

        $f0 = $f1 * $f0;

        $f0 = $f0 + 0.9375F;

        return $f0;

     label3:
        $f0 = $f0 - 0.95454544F;

        $f1 = 7.5625F * $f0;

        $f0 = $f1 * $f0;

        $f0 = $f0 + 0.984375F;

        return $f0;
    }
