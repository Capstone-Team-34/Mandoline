com.github.mikephil.charting.animation.Easing$EasingFunctions$21 extends java.lang.Object implements com.github.mikephil.charting.animation.EasingFunction
    void <init>()
    {
        com.github.mikephil.charting.animation.Easing$EasingFunctions$21 r0;

        r0 := @this: com.github.mikephil.charting.animation.Easing$EasingFunctions$21;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public float getInterpolation(float)
    {
        com.github.mikephil.charting.animation.Easing$EasingFunctions$21 r0;
        float $f0, f1, $f2;
        byte $b0;
        double $d0, $d1;

        r0 := @this: com.github.mikephil.charting.animation.Easing$EasingFunctions$21;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 0.0F;

     label1:
        $b0 = $f0 cmpl 1.0F;

        if $b0 != 0 goto label2;

        return 1.0F;

     label2:
        $f2 = 0.3F / 6.2831855F;

        $d0 = staticinvoke <java.lang.Math: double asin(double)>(1.0);

        f1 = (float) $d0;

        f1 = $f2 * f1;

        $f2 = -10.0F * $f0;

        $d0 = (double) $f2;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);

        $f2 = (float) $d0;

        $f0 = $f0 - f1;

        $d0 = (double) $f0;

        $d0 = $d0 * 6.283185307179586;

        $d1 = (double) 0.3F;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f0 = (float) $d0;

        $f0 = $f2 * $f0;

        $f0 = $f0 + 1.0F;

        return $f0;
    }
