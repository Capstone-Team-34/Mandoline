com.codetroopers.betterpickers.recurrencepicker.EventRecurrence extends java.lang.Object
private static final boolean ALLOW_LOWER_CASE
public static final int DAILY
public static final int FR
public static final int HOURLY
public static final int MINUTELY
public static final int MO
public static final int MONTHLY
private static final boolean ONLY_ONE_UNTIL_COUNT
private static final int PARSED_BYDAY
private static final int PARSED_BYHOUR
private static final int PARSED_BYMINUTE
private static final int PARSED_BYMONTH
private static final int PARSED_BYMONTHDAY
private static final int PARSED_BYSECOND
private static final int PARSED_BYSETPOS
private static final int PARSED_BYWEEKNO
private static final int PARSED_BYYEARDAY
private static final int PARSED_COUNT
private static final int PARSED_FREQ
private static final int PARSED_INTERVAL
private static final int PARSED_UNTIL
private static final int PARSED_WKST
public static final int SA
public static final int SECONDLY
public static final int SU
private static java.lang.String TAG
public static final int TH
public static final int TU
private static final boolean VALIDATE_UNTIL
public static final int WE
public static final int WEEKLY
public static final int YEARLY
private static final java.util.HashMap sParseFreqMap
private static java.util.HashMap sParsePartMap
private static final java.util.HashMap sParseWeekdayMap
public int[] byday
public int bydayCount
public int[] bydayNum
public int[] byhour
public int byhourCount
public int[] byminute
public int byminuteCount
public int[] bymonth
public int bymonthCount
public int[] bymonthday
public int bymonthdayCount
public int[] bysecond
public int bysecondCount
public int[] bysetpos
public int bysetposCount
public int[] byweekno
public int byweeknoCount
public int[] byyearday
public int byyeardayCount
public int count
public int freq
public int interval
public android.text.format.Time startDate
public java.lang.String until
public int wkst
    static void <clinit>()
    {
        java.util.HashMap $r0;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseFreq $r1;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseUntil $r2;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseCount $r3;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseInterval $r4;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseBySecond $r5;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMinute $r6;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByHour $r7;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay $r8;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMonthDay $r9;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByYearDay $r10;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByWeekNo $r11;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMonth $r12;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseBySetPos $r13;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseWkst $r14;
        java.lang.Integer $r15;

        <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String TAG> = "EventRecur";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap> = $r0;

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r1 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseFreq;

        specialinvoke $r1.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseFreq: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("FREQ", $r1);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r2 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseUntil;

        specialinvoke $r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseUntil: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("UNTIL", $r2);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r3 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseCount;

        specialinvoke $r3.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseCount: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("COUNT", $r3);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r4 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseInterval;

        specialinvoke $r4.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseInterval: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("INTERVAL", $r4);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r5 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseBySecond;

        specialinvoke $r5.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseBySecond: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYSECOND", $r5);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r6 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMinute;

        specialinvoke $r6.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMinute: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYMINUTE", $r6);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r7 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByHour;

        specialinvoke $r7.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByHour: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYHOUR", $r7);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r8 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay;

        specialinvoke $r8.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYDAY", $r8);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r9 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMonthDay;

        specialinvoke $r9.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMonthDay: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYMONTHDAY", $r9);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r10 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByYearDay;

        specialinvoke $r10.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByYearDay: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYYEARDAY", $r10);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r11 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByWeekNo;

        specialinvoke $r11.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByWeekNo: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYWEEKNO", $r11);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r12 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMonth;

        specialinvoke $r12.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByMonth: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYMONTH", $r12);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r13 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseBySetPos;

        specialinvoke $r13.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseBySetPos: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BYSETPOS", $r13);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r14 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseWkst;

        specialinvoke $r14.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseWkst: void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)>(null);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("WKST", $r14);

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap> = $r0;

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("SECONDLY", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("MINUTELY", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("HOURLY", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("DAILY", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("WEEKLY", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("MONTHLY", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("YEARLY", $r15);

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap> = $r0;

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(65536);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("SU", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(131072);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("MO", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(262144);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("TU", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(524288);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("WE", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1048576);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("TH", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2097152);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("FR", $r15);

        $r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4194304);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("SA", $r15);

        return;
    }
    public void <init>()
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.util.HashMap access$1400()
    {
        java.util.HashMap r0;

        r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseFreqMap>;

        return r0;
    }
    static java.lang.String access$1500()
    {
        java.lang.String r0;

        r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String TAG>;

        return r0;
    }
    static java.util.HashMap access$1600()
    {
        java.util.HashMap r0;

        r0 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParseWeekdayMap>;

        return r0;
    }
    private void appendByDay(java.lang.StringBuilder, int)
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;
        java.lang.StringBuilder $r1;
        int $i0, i1;
        java.lang.String $r2;
        int[] $r3;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bydayNum>;

        i1 = $r3[$i0];

        if i1 == 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

     label1:
        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byday>;

        $i0 = $r3[$i0];

        $r2 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String day2String(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        return;
    }
    private static void appendNumbers(java.lang.StringBuilder, java.lang.String, int, int[])
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        int[] $r2;
        int $i0, i1, $i2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: int[];

        if $i0 <= 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i0 = $i0 + -1;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $i2 = $r2[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        i1 = i1 + 1;

        goto label1;

     label2:
        $i0 = $r2[$i0];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label3:
        return;
    }
    private static boolean arraysEqual(int[], int, int[], int)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        if i3 >= $i0 goto label3;

        $i1 = $r0[i3];

        $i2 = $r1[i3];

        if $i1 != $i2 goto label4;

        i3 = i3 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public static int calendarDay2Day(int)
    {
        int $i0;
        java.lang.RuntimeException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            case 7: goto label8;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad day of week: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        return 65536;

     label3:
        return 131072;

     label4:
        return 262144;

     label5:
        return 524288;

     label6:
        return 1048576;

     label7:
        return 2097152;

     label8:
        return 4194304;
    }
    public static int day2CalendarDay(int)
    {
        int $i0;
        java.lang.RuntimeException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 65536: goto label2;
            case 131072: goto label3;
            case 262144: goto label4;
            case 524288: goto label5;
            case 1048576: goto label6;
            case 2097152: goto label7;
            case 4194304: goto label8;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad day of week: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;

     label5:
        return 4;

     label6:
        return 5;

     label7:
        return 6;

     label8:
        return 7;
    }
    private static java.lang.String day2String(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 65536: goto label2;
            case 131072: goto label3;
            case 262144: goto label4;
            case 524288: goto label5;
            case 1048576: goto label6;
            case 2097152: goto label7;
            case 4194304: goto label8;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad day argument: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        return "SU";

     label3:
        return "MO";

     label4:
        return "TU";

     label5:
        return "WE";

     label6:
        return "TH";

     label7:
        return "FR";

     label8:
        return "SA";
    }
    public static int day2TimeDay(int)
    {
        int $i0;
        java.lang.RuntimeException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 65536: goto label2;
            case 131072: goto label3;
            case 262144: goto label4;
            case 524288: goto label5;
            case 1048576: goto label6;
            case 2097152: goto label7;
            case 4194304: goto label8;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad day of week: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        return 2;

     label5:
        return 3;

     label6:
        return 4;

     label7:
        return 5;

     label8:
        return 6;
    }
    private void resetFields()
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String until> = null;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysetposCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byweeknoCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byyeardayCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthdayCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byhourCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byminuteCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysecondCount> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int interval> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int count> = 0;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int freq> = 0;

        return;
    }
    public static int timeDay2Day(int)
    {
        int $i0;
        java.lang.RuntimeException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            case 6: goto label8;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad day of week: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        return 65536;

     label3:
        return 131072;

     label4:
        return 262144;

     label5:
        return 524288;

     label6:
        return 1048576;

     label7:
        return 2097152;

     label8:
        return 4194304;
    }
    public boolean equals(java.lang.Object)
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        android.text.format.Time $r3, $r7;
        int $i0, $i1;
        java.lang.String $r4, $r8;
        int[] $r5, $r6;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.codetroopers.betterpickers.recurrencepicker.EventRecurrence) $r1;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: android.text.format.Time startDate>;

        if $r3 != null goto label6;

        $r3 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: android.text.format.Time startDate>;

        if $r3 != null goto label5;

     label3:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int freq>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int freq>;

        if $i0 != $i1 goto label5;

        $r4 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String until>;

        if $r4 != null goto label7;

        $r4 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String until>;

        if $r4 != null goto label5;

     label4:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int count>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int count>;

        if $i0 != $i1 goto label5;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int interval>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int interval>;

        if $i0 != $i1 goto label5;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int wkst>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int wkst>;

        if $i0 != $i1 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bysecond>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysecondCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bysecond>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysecondCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byminute>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byminuteCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byminute>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byminuteCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byhour>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byhourCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byhour>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byhourCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byday>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byday>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bydayNum>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bydayNum>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bymonthday>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthdayCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bymonthday>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthdayCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byyearday>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byyeardayCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byyearday>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byyeardayCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byweekno>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byweeknoCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byweekno>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byweeknoCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bymonth>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bymonth>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bysetpos>;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysetposCount>;

        $r6 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bysetpos>;

        $i1 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysetposCount>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: boolean arraysEqual(int[],int,int[],int)>($r5, $i0, $r6, $i1);

        if $z0 != 0 goto label8;

     label5:
        return 0;

     label6:
        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: android.text.format.Time startDate>;

        $r7 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: android.text.format.Time startDate>;

        $i0 = staticinvoke <android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)>($r3, $r7);

        if $i0 != 0 goto label5;

        goto label3;

     label7:
        $r4 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String until>;

        $r8 = r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String until>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        goto label4;

     label8:
        return 1;
    }
    public int hashCode()
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
    public void parse(java.lang.String)
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;
        java.lang.String $r1, r2, $r6, $r7;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String[] $r3;
        boolean $z0;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException $r4;
        java.lang.StringBuilder $r5;
        java.util.HashMap $r8;
        java.lang.Object $r9;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$PartParser r10;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void resetFields()>();

        i0 = 0;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $i1 = lengthof $r3;

        $i2 = 0;

     label01:
        if $i2 >= $i1 goto label08;

        r2 = $r3[$i2];

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label03;

     label02:
        $i2 = $i2 + 1;

        goto label01;

     label03:
        $i3 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(61);

        if $i3 > 0 goto label04;

        $r4 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing LHS in ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label04:
        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $i3 = $i3 + 1;

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3);

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i3 != 0 goto label05;

        $r4 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing RHS in ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label05:
        $r8 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap sParsePartMap>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r10 = (com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$PartParser) $r9;

        if r10 != null goto label06;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("X-");

        if $z0 != 0 goto label02;

        $r4 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find parser for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label06:
        $i3 = virtualinvoke r10.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$PartParser: int parsePart(java.lang.String,com.codetroopers.betterpickers.recurrencepicker.EventRecurrence)>($r7, r0);

        $i4 = i0 & $i3;

        if $i4 == 0 goto label07;

        $r4 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was specified twice");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label07:
        i0 = i0 | $i3;

        goto label02;

     label08:
        $i1 = i0 & 8192;

        if $i1 != 0 goto label09;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int wkst> = 131072;

     label09:
        $i1 = i0 & 1;

        if $i1 != 0 goto label10;

        $r4 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException;

        specialinvoke $r4.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>("Must specify a FREQ value");

        throw $r4;

     label10:
        i0 = i0 & 6;

        if i0 != 6 goto label11;

        r2 = <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: rrule has both UNTIL and COUNT: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r2, $r1);

     label11:
        return;
    }
    public boolean repeatsMonthlyOnDayCount()
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;
        int $i0;
        int[] $r1;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int freq>;

        if $i0 == 6 goto label1;

        return 0;

     label1:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount>;

        if $i0 != 1 goto label2;

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthdayCount>;

        if $i0 != 0 goto label2;

        $r1 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bydayNum>;

        $i0 = $r1[0];

        if $i0 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public boolean repeatsOnEveryWeekDay()
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;
        int i0, i1, i2;
        int[] $r1;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int freq>;

        if i0 == 5 goto label1;

        return 0;

     label1:
        i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount>;

        if i0 != 5 goto label4;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r1 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byday>;

        i1 = $r1[i2];

        if i1 == 65536 goto label4;

        if i1 == 4194304 goto label4;

        i2 = i2 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public void setStartDate(android.text.format.Time)
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;
        android.text.format.Time $r1;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        $r1 := @parameter0: android.text.format.Time;

        r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: android.text.format.Time startDate> = $r1;

        return;
    }
    public java.lang.String toString()
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence r0;
        java.lang.StringBuilder r1;
        int $i0, i1;
        java.lang.String $r2;
        boolean $z0;
        int[] $r3;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FREQ=");

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int freq>;

        lookupswitch($i0)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label12;
            case 7: goto label13;
            default: goto label01;
        };

     label01:
        $r2 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String until>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";UNTIL=");

        $r2 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String until>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label02:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int count>;

        if $i0 == 0 goto label03;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";COUNT=");

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int count>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label03:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int interval>;

        if $i0 == 0 goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";INTERVAL=");

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int interval>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label04:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int wkst>;

        if $i0 == 0 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";WKST=");

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int wkst>;

        $r2 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.lang.String day2String(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label05:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysecondCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bysecond>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYSECOND=", $i0, $r3);

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byminuteCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byminute>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYMINUTE=", $i0, $r3);

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byhourCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byhour>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYSECOND=", $i0, $r3);

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount>;

        if $i0 <= 0 goto label15;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";BYDAY=");

        $i0 = $i0 + -1;

        i1 = 0;

     label06:
        if i1 >= $i0 goto label14;

        specialinvoke r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendByDay(java.lang.StringBuilder,int)>(r1, i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        i1 = i1 + 1;

        goto label06;

     label07:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SECONDLY");

        goto label01;

     label08:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MINUTELY");

        goto label01;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HOURLY");

        goto label01;

     label10:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DAILY");

        goto label01;

     label11:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WEEKLY");

        goto label01;

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MONTHLY");

        goto label01;

     label13:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("YEARLY");

        goto label01;

     label14:
        specialinvoke r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendByDay(java.lang.StringBuilder,int)>(r1, $i0);

     label15:
        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthdayCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bymonthday>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYMONTHDAY=", $i0, $r3);

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byyeardayCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byyearday>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYYEARDAY=", $i0, $r3);

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int byweeknoCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byweekno>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYWEEKNO=", $i0, $r3);

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bymonthCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bymonth>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYMONTH=", $i0, $r3);

        $i0 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bysetposCount>;

        $r3 = r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bysetpos>;

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])>(r1, ";BYSETPOS=", $i0, $r3);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
