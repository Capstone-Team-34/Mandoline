com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo extends java.lang.Object implements java.lang.Comparable
private static final int DST_SYMBOL_COLOR
private static final int GMT_TEXT_COLOR
public static int NUM_OF_TRANSITIONS
private static final char SEPARATOR
private static final java.lang.String TAG
public static boolean is24HourFormat
private static java.util.Formatter mFormatter
private static android.util.SparseArray mGmtDisplayNameCache
private static long mGmtDisplayNameUpdateTime
private static java.lang.StringBuilder mSB
private static final android.text.Spannable$Factory mSpannableFactory
public static long time
public int groupId
public java.lang.String mCountry
public java.lang.String mDisplayName
android.util.SparseArray mLocalTimeCache
long mLocalTimeCacheReferenceTime
int mRawoffset
public long[] mTransitions
java.util.TimeZone mTz
public java.lang.String mTzId
private android.text.format.Time recycledTime
    static void <clinit>()
    {
        long $l0;
        android.text.Spannable$Factory $r0;
        java.lang.StringBuilder $r1;
        java.util.Formatter $r2;
        java.util.Locale $r3;
        android.util.SparseArray $r4;

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String TAG> = null;

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int NUM_OF_TRANSITIONS> = 6;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l0 / 1000L;

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long time> = $l0;

        $r0 = staticinvoke <android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>();

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.Spannable$Factory mSpannableFactory> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(50);

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB> = $r1;

        $r2 = new java.util.Formatter;

        $r1 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r2.<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>($r1, $r3);

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.Formatter mFormatter> = $r2;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache> = $r4;

        return;
    }
    public void <init>(java.util.TimeZone, java.lang.String)
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0;
        java.util.TimeZone $r1;
        java.lang.String $r2, $r6;
        java.lang.IllegalAccessException r3;
        android.text.format.Time $r4;
        android.util.SparseArray $r5;
        int $i0;
        long $l1;
        long[] $r7;
        java.lang.NoSuchFieldException $r8;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $r1 := @parameter0: java.util.TimeZone;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.text.format.Time;

        specialinvoke $r4.<android.text.format.Time: void <init>()>();

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache> = $r5;

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long mLocalTimeCacheReferenceTime> = 0L;

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz> = $r1;

        $r6 = virtualinvoke $r1.<java.util.TimeZone: java.lang.String getID()>();

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mTzId> = $r6;

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mCountry> = $r2;

        $i0 = virtualinvoke $r1.<java.util.TimeZone: int getRawOffset()>();

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int mRawoffset> = $i0;

        $l1 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long time>;

     label1:
        $r7 = staticinvoke <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long[] getTransitions(java.util.TimeZone,long)>($r1, $l1);

     label2:
        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long[] mTransitions> = $r7;

        return;

     label3:
        r3 := @caughtexception;

        virtualinvoke r3.<java.lang.IllegalAccessException: void printStackTrace()>();

        return;

     label4:
        $r8 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }
    public static long[] copyFromIntArray(int[])
    {
        int[] $r0;
        long[] r1;
        int $i0, $i1;
        long $l2;

        $r0 := @parameter0: int[];

        if $r0 != null goto label1;

        r1 = newarray (long)[0];

        return r1;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (long)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $i1 = $r0[$i0];

        $l2 = (long) $i1;

        r1[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    private static java.lang.String formatTime(java.text.DateFormat, int)
    {
        java.text.DateFormat $r0;
        int $i0;
        long l1;
        java.lang.String $r1;
        java.util.Date $r2;

        $r0 := @parameter0: java.text.DateFormat;

        $i0 := @parameter1: int;

        l1 = (long) $i0;

        l1 = l1 * 1000L;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>(long)>(l1);

        $r1 = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r2);

        return $r1;
    }
    private static long[] getTransitions(java.util.TimeZone, long) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException
    {
        java.util.TimeZone $r0;
        long $l0, $l4;
        int i1, $i2, i3;
        java.lang.Class $r1;
        java.lang.reflect.Field $r2;
        java.lang.Object $r3;
        long[] $r4, r5;
        byte $b5;
        int[] $r6;

        $r0 := @parameter0: java.util.TimeZone;

        $l0 := @parameter1: long;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mTransitions");

        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 23 goto label4;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (long[]) $r3;

     label1:
        $i2 = lengthof $r4;

        if $i2 == 0 goto label7;

        $i2 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int NUM_OF_TRANSITIONS>;

        r5 = newarray (long)[$i2];

        i3 = 0;

        $i2 = 0;

     label2:
        i1 = lengthof $r4;

        if $i2 >= i1 goto label8;

        $l4 = $r4[$i2];

        $b5 = $l4 cmp $l0;

        if $b5 >= 0 goto label5;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        $r6 = (int[]) $r3;

        $r4 = staticinvoke <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long[] copyFromIntArray(int[])>($r6);

        goto label1;

     label5:
        i1 = i3 + 1;

        $l4 = $r4[$i2];

        r5[i3] = $l4;

        i3 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int NUM_OF_TRANSITIONS>;

        if i1 != i3 goto label6;

        return r5;

     label6:
        i3 = i1;

        goto label3;

     label7:
        return null;

     label8:
        return r5;
    }
    public int compareTo(com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo)
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0, $r1;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        long[] $r4, $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.util.TimeZone $r7;
        java.util.Locale $r8;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $r1 := @parameter0: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $i0 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        $i1 = virtualinvoke $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        if $i0 == $i1 goto label2;

        $i0 = virtualinvoke $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        $i1 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        if $i0 >= $i1 goto label1;

        return -1;

     label1:
        return 1;

     label2:
        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r2 != null goto label3;

        $r2 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r2 == null goto label3;

        return 1;

     label3:
        $r2 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r2 == null goto label7;

        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        $r3 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i0 == 0 goto label4;

        return $i0;

     label4:
        $r4 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long[] mTransitions>;

        $r5 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long[] mTransitions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r4, $r5);

        if $z0 == 0 goto label5;

        $r2 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not expected to be comparing tz with the same country, same offset, same dst, same transitions:\n");

        $r3 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r2, $r3);

     label5:
        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        if $r2 == null goto label6;

        $r2 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        if $r2 == null goto label6;

        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        $r3 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;

     label6:
        $r7 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $r8 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke $r7.<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>($r8);

        $r7 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $r8 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = virtualinvoke $r7.<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>($r8);

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;

     label7:
        return -1;
    }
    public volatile int compareTo(java.lang.Object)
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo) $r1;

        $i0 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int compareTo(com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo)>($r2);

        return $i0;
    }
    public java.lang.CharSequence getGmtDisplayName(android.content.Context)
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0;
        android.content.Context $r1;
        long l0, l1, $l3;
        java.lang.String $r2;
        java.util.TimeZone $r3;
        int $i2, i4, i6, i7, i8;
        boolean $z0, $z1;
        java.lang.CharSequence r4;
        byte $b5;
        android.util.SparseArray $r5;
        java.lang.StringBuilder $r6;
        java.util.Formatter $r7;
        char $c9;
        android.text.Spannable$Factory $r8;
        android.text.Spannable $r9;
        android.text.style.ForegroundColorSpan $r10;
        java.lang.Object $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $r1 := @parameter0: android.content.Context;

        entermonitor r0;

     label01:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = l0 / 60000L;

        l0 = l1 * 60000L;

        $r3 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $i2 = virtualinvoke $r3.<java.util.TimeZone: int getOffset(long)>(l0);

        $r3 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $z0 = virtualinvoke $r3.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z0 == 0 goto label08;

        $l3 = (long) $i2;

        $l3 = $l3 + 129600000L;

        i4 = (int) $l3;

     label02:
        r4 = null;

        $l3 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long mGmtDisplayNameUpdateTime>;

        $b5 = $l3 cmp l1;

        if $b5 == 0 goto label09;

        <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long mGmtDisplayNameUpdateTime> = l1;

        $r5 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache>;

        virtualinvoke $r5.<android.util.SparseArray: void clear()>();

     label03:
        if r4 != null goto label07;

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        virtualinvoke $r6.<java.lang.StringBuilder: void setLength(int)>(0);

        i6 = 524288 | 1;

        $z1 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: boolean is24HourFormat>;

        if $z1 == 0 goto label04;

        i6 = i6 | 128;

     label04:
        $r7 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.Formatter mFormatter>;

        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        staticinvoke <android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)>($r1, $r7, l0, l0, i6, $r2);

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        i6 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        staticinvoke <com.codetroopers.betterpickers.timezonepicker.TimeZonePickerUtils: void appendGmtOffset(java.lang.StringBuilder,int)>($r6, $i2);

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        $i2 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        i7 = 0;

        i8 = 0;

        if $z0 == 0 goto label05;

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        i7 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        $c9 = staticinvoke <com.codetroopers.betterpickers.timezonepicker.TimeZonePickerUtils: char getDstSymbol()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        i8 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

     label05:
        $r8 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.Spannable$Factory mSpannableFactory>;

        $r6 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        $r9 = virtualinvoke $r8.<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>($r6);

        $r10 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r10.<android.text.style.ForegroundColorSpan: void <init>(int)>(-7829368);

        interfaceinvoke $r9.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r10, i6, $i2, 33);

        if $z0 == 0 goto label06;

        $r10 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r10.<android.text.style.ForegroundColorSpan: void <init>(int)>(-4210753);

        interfaceinvoke $r9.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r10, i7, i8, 33);

     label06:
        r4 = $r9;

        $r5 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, $r9);

     label07:
        exitmonitor r0;

        return r4;

     label08:
        $l3 = (long) $i2;

        $l3 = $l3 - 129600000L;

        i4 = (int) $l3;

        goto label02;

     label09:
        $r5 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache>;

        $r11 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r4 = (java.lang.CharSequence) $r11;

     label10:
        goto label03;

     label11:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label01 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }
    public int getLocalHr(long)
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0;
        long $l0;
        java.lang.String $r1;
        android.text.format.Time $r2;
        int i1;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $l0 := @parameter0: long;

        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        $r2.<android.text.format.Time: java.lang.String timezone> = $r1;

        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        virtualinvoke $r2.<android.text.format.Time: void set(long)>($l0);

        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        i1 = $r2.<android.text.format.Time: int hour>;

        return i1;
    }
    public java.lang.String getLocalTime(long)
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0;
        long $l0, $l4;
        int i1, i2, $i3, $i6;
        android.text.format.Time $r1;
        java.util.TimeZone $r2;
        java.lang.String $r3;
        byte $b5;
        android.util.SparseArray $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $l0 := @parameter0: long;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $r3 = virtualinvoke $r2.<java.util.TimeZone: java.lang.String getID()>();

        $r1.<android.text.format.Time: java.lang.String timezone> = $r3;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        virtualinvoke $r1.<android.text.format.Time: void set(long)>($l0);

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        i1 = $r1.<android.text.format.Time: int year>;

        i1 = i1 * 366;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        i2 = $r1.<android.text.format.Time: int yearDay>;

        i1 = i1 + i2;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $r3 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        $r1.<android.text.format.Time: java.lang.String timezone> = $r3;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        virtualinvoke $r1.<android.text.format.Time: void set(long)>($l0);

        $r3 = null;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        i2 = $r1.<android.text.format.Time: int hour>;

        i2 = i2 * 60;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i3 = $r1.<android.text.format.Time: int minute>;

        i2 = i2 + $i3;

        $l4 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long mLocalTimeCacheReferenceTime>;

        $b5 = $l4 cmp $l0;

        if $b5 == 0 goto label3;

        r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long mLocalTimeCacheReferenceTime> = $l0;

        $r4 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache>;

        virtualinvoke $r4.<android.util.SparseArray: void clear()>();

     label1:
        if $r3 != null goto label6;

        $r3 = "%I:%M %p";

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i3 = $r1.<android.text.format.Time: int year>;

        $i3 = $i3 * 366;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i6 = $r1.<android.text.format.Time: int yearDay>;

        $i3 = $i3 + $i6;

        if i1 == $i3 goto label5;

        $z0 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: boolean is24HourFormat>;

        if $z0 == 0 goto label4;

        $r3 = "%b %d %H:%M";

     label2:
        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $r3 = virtualinvoke $r1.<android.text.format.Time: java.lang.String format(java.lang.String)>($r3);

        $r4 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, $r3);

        return $r3;

     label3:
        $r4 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        $r3 = (java.lang.String) $r5;

        goto label1;

     label4:
        $r3 = "%b %d %I:%M %p";

        goto label2;

     label5:
        $z0 = <com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: boolean is24HourFormat>;

        if $z0 == 0 goto label2;

        $r3 = "%H:%M";

        goto label2;

     label6:
        return $r3;
    }
    public int getNowOffsetMillis()
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0;
        java.util.TimeZone $r1;
        long $l0;
        int $i1;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = virtualinvoke $r1.<java.util.TimeZone: int getOffset(long)>($l0);

        return $i1;
    }
    public boolean hasSameRules(com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo)
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0, $r1;
        boolean $z0;
        int $i0, $i1;
        long[] $r2, $r3;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $r1 := @parameter0: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        $i0 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int mRawoffset>;

        $i1 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: int mRawoffset>;

        if $i0 != $i1 goto label1;

        $r2 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long[] mTransitions>;

        $r3 = $r1.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: long[] mTransitions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r2, $r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String toString()
    {
        com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo r0;
        java.lang.String r1, $r4;
        java.lang.StringBuilder r2;
        java.util.TimeZone r3;
        boolean $z0;
        int $i0;
        float $f0;

        r0 := @this: com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r1 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        r3 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $r4 = r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r4 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(0, 1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r4 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(0, 0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $z0 = virtualinvoke r3.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(1, 1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r4 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(1, 0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i0 = virtualinvoke r3.<java.util.TimeZone: int getRawOffset()>();

        $f0 = (float) $i0;

        $f0 = $f0 / 3600000.0F;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i0 = virtualinvoke r3.<java.util.TimeZone: int getDSTSavings()>();

        $f0 = (float) $i0;

        $f0 = $f0 / 3600000.0F;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        r1 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1357041600000L);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        r1 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1363348800000L);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        r1 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1372680000000L);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        r1 = virtualinvoke r0.<com.codetroopers.betterpickers.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1383307200000L);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        goto label1;
    }
