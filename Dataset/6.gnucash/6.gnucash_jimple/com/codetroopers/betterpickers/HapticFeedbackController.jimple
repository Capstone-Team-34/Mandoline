com.codetroopers.betterpickers.HapticFeedbackController extends java.lang.Object
private static final int VIBRATE_DELAY_MS
private static final int VIBRATE_LENGTH_MS
private final android.database.ContentObserver mContentObserver
private final android.content.Context mContext
private boolean mHasPermissions
private boolean mIsGloballyEnabled
private long mLastVibrate
private android.os.Vibrator mVibrator
    public void <init>(android.content.Context)
    {
        com.codetroopers.betterpickers.HapticFeedbackController r0;
        android.content.Context $r1;
        com.codetroopers.betterpickers.HapticFeedbackController$1 $r2;

        r0 := @this: com.codetroopers.betterpickers.HapticFeedbackController;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.content.Context mContext> = $r1;

        $r2 = new com.codetroopers.betterpickers.HapticFeedbackController$1;

        specialinvoke $r2.<com.codetroopers.betterpickers.HapticFeedbackController$1: void <init>(com.codetroopers.betterpickers.HapticFeedbackController,android.os.Handler)>(r0, null);

        r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.database.ContentObserver mContentObserver> = $r2;

        return;
    }
    static boolean access$002(com.codetroopers.betterpickers.HapticFeedbackController, boolean)
    {
        com.codetroopers.betterpickers.HapticFeedbackController $r0;
        boolean $z0;

        $r0 := @parameter0: com.codetroopers.betterpickers.HapticFeedbackController;

        $z0 := @parameter1: boolean;

        $r0.<com.codetroopers.betterpickers.HapticFeedbackController: boolean mIsGloballyEnabled> = $z0;

        return $z0;
    }
    static android.content.Context access$100(com.codetroopers.betterpickers.HapticFeedbackController)
    {
        com.codetroopers.betterpickers.HapticFeedbackController $r0;
        android.content.Context r1;

        $r0 := @parameter0: com.codetroopers.betterpickers.HapticFeedbackController;

        r1 = $r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.content.Context mContext>;

        return r1;
    }
    static boolean access$200(android.content.Context)
    {
        android.content.Context $r0;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <com.codetroopers.betterpickers.HapticFeedbackController: boolean checkGlobalSetting(android.content.Context)>($r0);

        return $z0;
    }
    private static boolean checkAppPermissions(android.content.Context)
    {
        android.content.Context $r0;
        int $i0;

        $r0 := @parameter0: android.content.Context;

        $i0 = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.VIBRATE");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean checkGlobalSetting(android.content.Context)
    {
        android.content.Context $r0;
        android.content.ContentResolver $r1;
        int $i0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "haptic_feedback_enabled", 0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void start()
    {
        com.codetroopers.betterpickers.HapticFeedbackController r0;
        android.database.ContentObserver $r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.os.Vibrator $r4;
        boolean $z0;
        android.net.Uri $r5;
        android.content.ContentResolver $r6;

        r0 := @this: com.codetroopers.betterpickers.HapticFeedbackController;

        $r2 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r4 = (android.os.Vibrator) $r3;

        r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.os.Vibrator mVibrator> = $r4;

        $r2 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.content.Context mContext>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.HapticFeedbackController: boolean checkGlobalSetting(android.content.Context)>($r2);

        r0.<com.codetroopers.betterpickers.HapticFeedbackController: boolean mIsGloballyEnabled> = $z0;

        $r2 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.content.Context mContext>;

        $z0 = staticinvoke <com.codetroopers.betterpickers.HapticFeedbackController: boolean checkAppPermissions(android.content.Context)>($r2);

        r0.<com.codetroopers.betterpickers.HapticFeedbackController: boolean mHasPermissions> = $z0;

        $r5 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("haptic_feedback_enabled");

        $r2 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.content.Context mContext>;

        $r6 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r1 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.database.ContentObserver mContentObserver>;

        virtualinvoke $r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r5, 0, $r1);

        return;
    }
    public void stop()
    {
        com.codetroopers.betterpickers.HapticFeedbackController r0;
        android.database.ContentObserver $r1;
        android.content.ContentResolver $r2;
        android.content.Context $r3;

        r0 := @this: com.codetroopers.betterpickers.HapticFeedbackController;

        r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.os.Vibrator mVibrator> = null;

        $r3 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.content.Context mContext>;

        $r2 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r1 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.database.ContentObserver mContentObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r1);

        return;
    }
    public void tryVibrate()
    {
        com.codetroopers.betterpickers.HapticFeedbackController r0;
        long $l0, $l1;
        android.os.Vibrator $r1;
        boolean $z0;
        byte $b2;

        r0 := @this: com.codetroopers.betterpickers.HapticFeedbackController;

        $r1 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.os.Vibrator mVibrator>;

        if $r1 == null goto label1;

        $z0 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: boolean mIsGloballyEnabled>;

        if $z0 == 0 goto label1;

        $z0 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: boolean mHasPermissions>;

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: long mLastVibrate>;

        $l1 = $l0 - $l1;

        $b2 = $l1 cmp 125L;

        if $b2 < 0 goto label1;

        $r1 = r0.<com.codetroopers.betterpickers.HapticFeedbackController: android.os.Vibrator mVibrator>;

        virtualinvoke $r1.<android.os.Vibrator: void vibrate(long)>(5L);

        r0.<com.codetroopers.betterpickers.HapticFeedbackController: long mLastVibrate> = $l0;

     label1:
        return;
    }
