com.owncloud.android.lib.common.network.ServerNameIndicator extends java.lang.Object
private static final java.lang.String METHOD_NAME
private static final java.lang.String TAG
private static final java.util.concurrent.atomic.AtomicReference mSingleInstance
private final java.lang.ref.WeakReference mSSLSocketClassRef
private final java.lang.ref.WeakReference mSetHostnameMethodRef
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        $r1 = class "Lcom/owncloud/android/lib/common/network/ServerNameIndicator;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG> = $r0;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <com.owncloud.android.lib.common.network.ServerNameIndicator: java.util.concurrent.atomic.AtomicReference mSingleInstance> = $r2;

        return;
    }
    private void <init>(java.lang.Class, java.lang.reflect.Method)
    {
        com.owncloud.android.lib.common.network.ServerNameIndicator r0;
        java.lang.Class r1;
        java.lang.reflect.Method $r2;
        java.lang.ref.WeakReference $r3;

        r0 := @this: com.owncloud.android.lib.common.network.ServerNameIndicator;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        r0.<com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.ref.WeakReference mSSLSocketClassRef> = $r3;

        if $r2 != null goto label2;

        $r3 = null;

     label1:
        r0.<com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.ref.WeakReference mSetHostnameMethodRef> = $r3;

        return;

     label2:
        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r2);

        goto label1;
    }
    private static java.lang.reflect.Method getMethod(javax.net.ssl.SSLSocket)
    {
        javax.net.ssl.SSLSocket $r0;
        java.lang.Class $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        com.owncloud.android.lib.common.network.ServerNameIndicator r4;
        java.lang.reflect.Method $r5;
        java.lang.ref.WeakReference $r6;

        $r0 := @parameter0: javax.net.ssl.SSLSocket;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.util.concurrent.atomic.AtomicReference mSingleInstance>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r4 = (com.owncloud.android.lib.common.network.ServerNameIndicator) $r3;

        if r4 != null goto label1;

        $r5 = staticinvoke <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.reflect.Method initFrom(java.lang.Class)>($r1);

        return $r5;

     label1:
        $r6 = r4.<com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.ref.WeakReference mSSLSocketClassRef>;

        $r3 = virtualinvoke $r6.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r3 == $r1 goto label2;

        $r5 = staticinvoke <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.reflect.Method initFrom(java.lang.Class)>($r1);

        return $r5;

     label2:
        $r6 = r4.<com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.ref.WeakReference mSetHostnameMethodRef>;

        if $r6 != null goto label3;

        return null;

     label3:
        $r6 = r4.<com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.ref.WeakReference mSetHostnameMethodRef>;

        $r3 = virtualinvoke $r6.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r5 = (java.lang.reflect.Method) $r3;

        if $r5 != null goto label4;

        $r5 = staticinvoke <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.reflect.Method initFrom(java.lang.Class)>($r1);

     label4:
        return $r5;
    }
    private static java.lang.reflect.Method initFrom(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r3;
        java.lang.StringBuilder $r2;
        java.lang.reflect.Method r4, $r6;
        java.lang.Class[] $r5;
        java.util.concurrent.atomic.AtomicReference $r7;
        com.owncloud.android.lib.common.network.ServerNameIndicator $r8;
        java.lang.SecurityException r9;
        java.lang.NoSuchMethodException r10;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLSocket implementation: ");

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void i(java.lang.String,java.lang.String)>($r1, $r3);

        r4 = null;

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/lang/String;";

     label1:
        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setHostname", $r5);

     label2:
        r4 = $r6;

     label3:
        $r7 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.util.concurrent.atomic.AtomicReference mSingleInstance>;

        $r8 = new com.owncloud.android.lib.common.network.ServerNameIndicator;

        specialinvoke $r8.<com.owncloud.android.lib.common.network.ServerNameIndicator: void <init>(java.lang.Class,java.lang.reflect.Method)>(r0, r4);

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r8);

        return r4;

     label4:
        r9 := @caughtexception;

        $r1 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r1, "Could not access to SSLSocket#setHostname(String) method ", r9);

        goto label3;

     label5:
        r10 := @caughtexception;

        $r1 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void i(java.lang.String,java.lang.String)>($r1, "Could not find SSLSocket#setHostname(String) method - SNI not supported");

        goto label3;

        catch java.lang.SecurityException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
    }
    public static void setServerNameIndication(java.lang.String, javax.net.ssl.SSLSocket)
    {
        java.lang.String $r0, $r4;
        javax.net.ssl.SSLSocket $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException r6;
        java.lang.IllegalAccessException r7;
        java.lang.reflect.InvocationTargetException r8;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: javax.net.ssl.SSLSocket;

        $r2 = staticinvoke <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.reflect.Method getMethod(javax.net.ssl.SSLSocket)>($r1);

        if $r2 == null goto label8;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r0;

     label1:
        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label2:
        $r4 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SNI done, hostname: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void i(java.lang.String,java.lang.String)>($r4, $r0);

     label4:
        return;

     label5:
        r6 := @caughtexception;

        $r0 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r0, "Call to SSLSocket#setHost(String) failed ", r6);

        return;

     label6:
        r7 := @caughtexception;

        $r0 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r0, "Call to SSLSocket#setHost(String) failed ", r7);

        return;

     label7:
        r8 := @caughtexception;

        $r0 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r0, "Call to SSLSocket#setHost(String) failed ", r8);

        return;

     label8:
        $r0 = <com.owncloud.android.lib.common.network.ServerNameIndicator: java.lang.String TAG>;

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void i(java.lang.String,java.lang.String)>($r0, "SNI not supported");

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
    }
