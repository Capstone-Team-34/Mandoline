com.owncloud.android.lib.common.network.AdvancedX509TrustManager extends java.lang.Object implements javax.net.ssl.X509TrustManager
private static final java.lang.String TAG
private java.security.KeyStore mKnownServersKeyStore
private javax.net.ssl.X509TrustManager mStandardTrustManager
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lcom/owncloud/android/lib/common/network/AdvancedX509TrustManager;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.owncloud.android.lib.common.network.AdvancedX509TrustManager: java.lang.String TAG> = $r0;

        return;
    }
    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.security.cert.CertStoreException
    {
        com.owncloud.android.lib.common.network.AdvancedX509TrustManager r0;
        java.security.KeyStore $r1;
        java.lang.String $r2;
        javax.net.ssl.TrustManagerFactory $r3;
        javax.net.ssl.X509TrustManager $r4;

        r0 := @this: com.owncloud.android.lib.common.network.AdvancedX509TrustManager;

        $r1 := @parameter0: java.security.KeyStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: javax.net.ssl.X509TrustManager mStandardTrustManager> = null;

        $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2);

        virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(null);

        $r4 = specialinvoke r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: javax.net.ssl.X509TrustManager findX509TrustManager(javax.net.ssl.TrustManagerFactory)>($r3);

        r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: javax.net.ssl.X509TrustManager mStandardTrustManager> = $r4;

        r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: java.security.KeyStore mKnownServersKeyStore> = $r1;

        return;
    }
    private javax.net.ssl.X509TrustManager findX509TrustManager(javax.net.ssl.TrustManagerFactory) throws java.security.cert.CertStoreException
    {
        com.owncloud.android.lib.common.network.AdvancedX509TrustManager r0;
        javax.net.ssl.TrustManagerFactory $r1;
        javax.net.ssl.TrustManager[] $r2;
        int i0, $i1;
        javax.net.ssl.TrustManager $r3;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r4;

        r0 := @this: com.owncloud.android.lib.common.network.AdvancedX509TrustManager;

        $r1 := @parameter0: javax.net.ssl.TrustManagerFactory;

        $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label3;

        $r3 = $r2[i0];

        $z0 = $r3 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label2;

        $r3 = $r2[i0];

        $r4 = (javax.net.ssl.X509TrustManager) $r3;

        return $r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }
    public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.owncloud.android.lib.common.network.AdvancedX509TrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;
        javax.net.ssl.X509TrustManager $r3;

        r0 := @this: com.owncloud.android.lib.common.network.AdvancedX509TrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: javax.net.ssl.X509TrustManager mStandardTrustManager>;

        interfaceinvoke $r3.<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r1, $r2);

        return;
    }
    public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.owncloud.android.lib.common.network.AdvancedX509TrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;
        com.owncloud.android.lib.common.network.CertificateCombinedException r3;
        java.security.cert.X509Certificate $r4;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r5;
        java.security.cert.CertificateExpiredException r6;
        java.security.cert.CertificateNotYetValidException r7;
        java.security.cert.CertificateException r8;
        java.lang.Throwable $r9, r10;
        java.security.cert.CertPathValidatorException r11;

        r0 := @this: com.owncloud.android.lib.common.network.AdvancedX509TrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        $r4 = $r1[0];

        $z0 = virtualinvoke r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: boolean isKnownServer(java.security.cert.X509Certificate)>($r4);

        if $z0 != 0 goto label11;

        r3 = new com.owncloud.android.lib.common.network.CertificateCombinedException;

        $r4 = $r1[0];

        specialinvoke r3.<com.owncloud.android.lib.common.network.CertificateCombinedException: void <init>(java.security.cert.X509Certificate)>($r4);

        $r4 = $r1[0];

     label01:
        virtualinvoke $r4.<java.security.cert.X509Certificate: void checkValidity()>();

     label02:
        $r5 = r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: javax.net.ssl.X509TrustManager mStandardTrustManager>;

     label03:
        interfaceinvoke $r5.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r1, $r2);

     label04:
        $z0 = virtualinvoke r3.<com.owncloud.android.lib.common.network.CertificateCombinedException: boolean isException()>();

        if $z0 == 0 goto label11;

        throw r3;

     label05:
        r6 := @caughtexception;

        virtualinvoke r3.<com.owncloud.android.lib.common.network.CertificateCombinedException: void setCertificateExpiredException(java.security.cert.CertificateExpiredException)>(r6);

        goto label02;

     label06:
        r7 := @caughtexception;

        virtualinvoke r3.<com.owncloud.android.lib.common.network.CertificateCombinedException: void setCertificateNotYetException(java.security.cert.CertificateNotYetValidException)>(r7);

        goto label02;

     label07:
        r8 := @caughtexception;

        r10 = virtualinvoke r8.<java.security.cert.CertificateException: java.lang.Throwable getCause()>();

        $r9 = null;

     label08:
        if r10 == null goto label09;

        if r10 == $r9 goto label09;

        $z0 = r10 instanceof java.security.cert.CertPathValidatorException;

        if $z0 != 0 goto label09;

        $r9 = r10;

        r10 = virtualinvoke r10.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label08;

     label09:
        if r10 == null goto label10;

        $z0 = r10 instanceof java.security.cert.CertPathValidatorException;

        if $z0 == 0 goto label10;

        r11 = (java.security.cert.CertPathValidatorException) r10;

        virtualinvoke r3.<com.owncloud.android.lib.common.network.CertificateCombinedException: void setCertPathValidatorException(java.security.cert.CertPathValidatorException)>(r11);

        goto label04;

     label10:
        virtualinvoke r3.<com.owncloud.android.lib.common.network.CertificateCombinedException: void setOtherCertificateException(java.security.cert.CertificateException)>(r8);

        goto label04;

     label11:
        return;

        catch java.security.cert.CertificateExpiredException from label01 to label02 with label05;
        catch java.security.cert.CertificateNotYetValidException from label01 to label02 with label06;
        catch java.security.cert.CertificateException from label03 to label04 with label07;
    }
    public java.security.cert.X509Certificate[] getAcceptedIssuers()
    {
        com.owncloud.android.lib.common.network.AdvancedX509TrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        javax.net.ssl.X509TrustManager $r2;

        r0 := @this: com.owncloud.android.lib.common.network.AdvancedX509TrustManager;

        $r2 = r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: javax.net.ssl.X509TrustManager mStandardTrustManager>;

        $r1 = interfaceinvoke $r2.<javax.net.ssl.X509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>();

        return $r1;
    }
    public boolean isKnownServer(java.security.cert.X509Certificate)
    {
        com.owncloud.android.lib.common.network.AdvancedX509TrustManager r0;
        java.security.cert.X509Certificate $r1;
        java.security.KeyStoreException r2;
        java.lang.String $r3;
        java.security.KeyStore $r4;

        r0 := @this: com.owncloud.android.lib.common.network.AdvancedX509TrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r4 = r0.<com.owncloud.android.lib.common.network.AdvancedX509TrustManager: java.security.KeyStore mKnownServersKeyStore>;

     label1:
        $r3 = virtualinvoke $r4.<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>($r1);

     label2:
        if $r3 == null goto label4;

        return 1;

     label3:
        r2 := @caughtexception;

        $r3 = <com.owncloud.android.lib.common.network.AdvancedX509TrustManager: java.lang.String TAG>;

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void d(java.lang.String,java.lang.String)>($r3, "Fail while checking certificate in the known-servers store");

     label4:
        return 0;

        catch java.security.KeyStoreException from label1 to label2 with label3;
    }
