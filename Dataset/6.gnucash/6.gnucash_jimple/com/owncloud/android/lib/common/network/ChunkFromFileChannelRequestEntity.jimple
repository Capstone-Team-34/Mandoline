com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity com.owncloud.android.lib.common.network.ProgressiveDataTransferer
private static final java.lang.String TAG
private java.nio.ByteBuffer mBuffer
private final java.nio.channels.FileChannel mChannel
private final long mChunkSize
private final java.lang.String mContentType
java.util.Set mDataTransferListeners
private final java.io.File mFile
private long mOffset
private long mTransferred
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lcom/owncloud/android/lib/common/network/ChunkFromFileChannelRequestEntity;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.lang.String TAG> = $r0;

        return;
    }
    public void <init>(java.nio.channels.FileChannel, java.lang.String, long, java.io.File)
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        java.nio.channels.FileChannel $r1;
        java.lang.String $r2;
        long $l0;
        java.io.File $r3;
        java.nio.ByteBuffer $r4;
        java.util.HashSet $r5;
        java.lang.IllegalArgumentException $r6;
        byte $b1;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        $r1 := @parameter0: java.nio.channels.FileChannel;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $r3 := @parameter3: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners> = $r5;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4096);

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.ByteBuffer mBuffer> = $r4;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null");

        throw $r6;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Chunk size must be greater than zero");

        throw $r6;

     label2:
        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.channels.FileChannel mChannel> = $r1;

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.lang.String mContentType> = $r2;

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mChunkSize> = $l0;

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.io.File mFile> = $r3;

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mOffset> = 0L;

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mTransferred> = 0L;

        return;
    }
    public void addDatatransferProgressListener(com.owncloud.android.lib.common.network.OnDatatransferProgressListener)
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        com.owncloud.android.lib.common.network.OnDatatransferProgressListener $r1;
        java.util.Set $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        $r1 := @parameter0: com.owncloud.android.lib.common.network.OnDatatransferProgressListener;

        $r2 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void addDatatransferProgressListeners(java.util.Collection)
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        java.util.Collection r1;
        java.util.Set $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public long getContentLength()
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        java.io.IOException r1;
        long $l0, $l1, $l2;
        java.nio.channels.FileChannel $r2;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        $l0 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mChunkSize>;

        $r2 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.channels.FileChannel mChannel>;

     label1:
        $l1 = virtualinvoke $r2.<java.nio.channels.FileChannel: long size()>();

     label2:
        $r2 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.channels.FileChannel mChannel>;

     label3:
        $l2 = virtualinvoke $r2.<java.nio.channels.FileChannel: long position()>();

     label4:
        $l1 = $l1 - $l2;

     label5:
        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

     label6:
        return $l0;

     label7:
        r1 := @caughtexception;

        $l0 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mChunkSize>;

        return $l0;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }
    public java.lang.String getContentType()
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        java.lang.String r1;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        r1 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.lang.String mContentType>;

        return r1;
    }
    public boolean isRepeatable()
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        return 1;
    }
    public void removeDatatransferProgressListener(com.owncloud.android.lib.common.network.OnDatatransferProgressListener)
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        com.owncloud.android.lib.common.network.OnDatatransferProgressListener $r1;
        java.util.Set $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        $r1 := @parameter0: com.owncloud.android.lib.common.network.OnDatatransferProgressListener;

        $r2 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void setOffset(long)
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        long $l0;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        $l0 := @parameter0: long;

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mOffset> = $l0;

        return;
    }
    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity r0;
        java.io.OutputStream $r1;
        java.io.IOException r2;
        java.util.Set $r3, $r8;
        java.nio.channels.FileChannel $r4;
        long $l0, $l1, $l3, $l5;
        java.io.File $r5;
        byte $b2;
        java.nio.ByteBuffer $r6;
        int $i4;
        byte[] $r7;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        com.owncloud.android.lib.common.network.OnDatatransferProgressListener $r11;
        java.lang.String $r12, $r14;
        java.lang.Throwable $r13;
        java.lang.RuntimeException $r15;

        r0 := @this: com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity;

        $r1 := @parameter0: java.io.OutputStream;

        $r4 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.channels.FileChannel mChannel>;

        $l0 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mOffset>;

     label01:
        virtualinvoke $r4.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l0);

     label02:
        $r5 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.io.File mFile>;

     label03:
        $l1 = virtualinvoke $r5.<java.io.File: long length()>();

     label04:
        $l0 = $l1;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label05;

        $l0 = -1L;

     label05:
        $l1 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mOffset>;

        $l3 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mChunkSize>;

        $l1 = $l1 + $l3;

        $r4 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.channels.FileChannel mChannel>;

     label06:
        $l3 = virtualinvoke $r4.<java.nio.channels.FileChannel: long size()>();

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l3);

     label07:
        $r4 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.channels.FileChannel mChannel>;

     label08:
        $l3 = virtualinvoke $r4.<java.nio.channels.FileChannel: long position()>();

     label09:
        $b2 = $l3 cmp $l1;

        if $b2 >= 0 goto label24;

        $r4 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.channels.FileChannel mChannel>;

        $r6 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.ByteBuffer mBuffer>;

     label10:
        $i4 = virtualinvoke $r4.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>($r6);

     label11:
        $r6 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.ByteBuffer mBuffer>;

     label12:
        $r7 = virtualinvoke $r6.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r7, 0, $i4);

     label13:
        $r6 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.nio.ByteBuffer mBuffer>;

     label14:
        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label15:
        $l3 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mTransferred>;

        $b2 = $l3 cmp $l1;

        if $b2 >= 0 goto label16;

        $l3 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mTransferred>;

        $l5 = (long) $i4;

        $l3 = $l3 + $l5;

        r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mTransferred> = $l3;

     label16:
        $r3 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        entermonitor $r3;

     label17:
        $r8 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.util.Set mDataTransferListeners>;

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.owncloud.android.lib.common.network.OnDatatransferProgressListener) $r10;

        $l3 = (long) $i4;

        $l5 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: long mTransferred>;

        $r5 = r0.<com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.io.File mFile>;

        $r12 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r11.<com.owncloud.android.lib.common.network.OnDatatransferProgressListener: void onTransferProgress(long,long,long,java.lang.String)>($l3, $l5, $l0, $r12);

        goto label18;

     label19:
        $r13 := @caughtexception;

        exitmonitor $r3;

     label20:
        throw $r13;

     label21:
        r2 := @caughtexception;

        $r12 = <com.owncloud.android.lib.common.network.ChunkFromFileChannelRequestEntity: java.lang.String TAG>;

        $r14 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <com.owncloud.android.lib.common.utils.Log_OC: void e(java.lang.String,java.lang.String)>($r12, $r14);

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Ugly solution to workaround the default policy of retries when the server falls while uploading ; temporal fix; really", r2);

        throw $r15;

     label22:
        exitmonitor $r3;

     label23:
        goto label07;

     label24:
        return;

        catch java.io.IOException from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.io.IOException from label06 to label07 with label21;
        catch java.io.IOException from label08 to label09 with label21;
        catch java.io.IOException from label10 to label11 with label21;
        catch java.io.IOException from label12 to label13 with label21;
        catch java.io.IOException from label14 to label15 with label21;
        catch java.lang.Throwable from label17 to label20 with label19;
        catch java.io.IOException from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label19;
    }
