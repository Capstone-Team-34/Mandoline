com.owncloud.android.lib.common.network.WebdavUtils extends java.lang.Object
private static final java.text.SimpleDateFormat[] DATETIME_FORMATS
public static final java.text.SimpleDateFormat DISPLAY_DATE_FORMAT
    static void <clinit>()
    {
        java.text.SimpleDateFormat $r0;
        java.text.SimpleDateFormat[] $r1;
        java.util.Locale $r2;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd.MM.yyyy hh:mm");

        <com.owncloud.android.lib.common.network.WebdavUtils: java.text.SimpleDateFormat DISPLAY_DATE_FORMAT> = $r0;

        $r1 = newarray (java.text.SimpleDateFormat)[8];

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss\'Z\'", $r2);

        $r1[0] = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, dd MMM yyyy HH:mm:ss zzz", $r2);

        $r1[1] = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss.sss\'Z\'", $r2);

        $r1[2] = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ssZ", $r2);

        $r1[3] = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE MMM dd HH:mm:ss zzz yyyy", $r2);

        $r1[4] = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEEEEE, dd-MMM-yy HH:mm:ss zzz", $r2);

        $r1[5] = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE MMMM d HH:mm:ss yyyy", $r2);

        $r1[6] = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd hh:mm:ss", $r2);

        $r1[7] = $r0;

        <com.owncloud.android.lib.common.network.WebdavUtils: java.text.SimpleDateFormat[] DATETIME_FORMATS> = $r1;

        return;
    }
    public void <init>()
    {
        com.owncloud.android.lib.common.network.WebdavUtils r0;

        r0 := @this: com.owncloud.android.lib.common.network.WebdavUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String encodePath(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "/");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return $r0;
    }
    public static org.apache.jackrabbit.webdav.property.DavPropertyNameSet getAllPropSet()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;

        r0 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName DISPLAYNAME>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTTYPE>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName RESOURCETYPE>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTLENGTH>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETLASTMODIFIED>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName CREATIONDATE>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETETAG>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("quota-used-bytes");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("quota-available-bytes");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String)>("http://owncloud.org/ns");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>("permissions", $r2);

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String)>("http://owncloud.org/ns");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>("id", $r2);

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String)>("http://owncloud.org/ns");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>("size", $r2);

        return r0;
    }
    public static java.lang.String getEtagFromResponse(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethod $r0;
        org.apache.commons.httpclient.Header $r1, r2;
        java.lang.String $r3;

        $r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 = interfaceinvoke $r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("OC-ETag");

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = interfaceinvoke $r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("oc-etag");

     label1:
        if r2 != null goto label2;

        r2 = interfaceinvoke $r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("ETag");

     label2:
        if r2 != null goto label3;

        r2 = interfaceinvoke $r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("etag");

     label3:
        if r2 == null goto label4;

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r3 = staticinvoke <com.owncloud.android.lib.common.network.WebdavUtils: java.lang.String parseEtag(java.lang.String)>($r3);

        return $r3;

     label4:
        return "";
    }
    public static org.apache.jackrabbit.webdav.property.DavPropertyNameSet getFilePropSet()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;

        r0 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName DISPLAYNAME>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTTYPE>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName RESOURCETYPE>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTLENGTH>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETLASTMODIFIED>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName CREATIONDATE>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETETAG>;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r1);

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String)>("http://owncloud.org/ns");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>("permissions", $r2);

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String)>("http://owncloud.org/ns");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>("id", $r2);

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String)>("http://owncloud.org/ns");

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>("size", $r2);

        return r0;
    }
    public static java.lang.String parseEtag(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return "";

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("-gzip");

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -5;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label3:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 < 2 goto label4;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

     label4:
        return $r0;
    }
    public static java.util.Date parseResponseDate(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Date $r1;
        int i0, $i1;
        java.text.SimpleDateFormat[] $r2;
        java.text.SimpleDateFormat r3;
        java.lang.Throwable $r4;
        java.text.ParseException $r5;

        $r0 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r2 = <com.owncloud.android.lib.common.network.WebdavUtils: java.text.SimpleDateFormat[] DATETIME_FORMATS>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label7;

        $r2 = <com.owncloud.android.lib.common.network.WebdavUtils: java.text.SimpleDateFormat[] DATETIME_FORMATS>;

        r3 = $r2[i0];

        entermonitor r3;

     label2:
        $r1 = virtualinvoke r3.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r0);

        exitmonitor r3;

     label3:
        return $r1;

     label4:
        $r4 := @caughtexception;

        exitmonitor r3;

     label5:
        throw $r4;

     label6:
        $r5 := @caughtexception;

        i0 = i0 + 1;

        goto label1;

     label7:
        return null;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.text.ParseException from label5 to label6 with label6;
    }
