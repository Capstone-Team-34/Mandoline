com.squareup.okhttp.Headers extends java.lang.Object
private final java.lang.String[] namesAndValues
    private void <init>(com.squareup.okhttp.Headers$Builder)
    {
        com.squareup.okhttp.Headers r0;
        com.squareup.okhttp.Headers$Builder $r1;
        java.util.List $r2, $r3;
        int $i0;
        java.lang.String[] $r4;
        java.lang.Object[] $r5;

        r0 := @this: com.squareup.okhttp.Headers;

        $r1 := @parameter0: com.squareup.okhttp.Headers$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.squareup.okhttp.Headers$Builder: java.util.List access$000(com.squareup.okhttp.Headers$Builder)>($r1);

        $r3 = staticinvoke <com.squareup.okhttp.Headers$Builder: java.util.List access$000(com.squareup.okhttp.Headers$Builder)>($r1);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (java.lang.String[]) $r5;

        r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues> = $r4;

        return;
    }
    void <init>(com.squareup.okhttp.Headers$Builder, com.squareup.okhttp.Headers$1)
    {
        com.squareup.okhttp.Headers r0;
        com.squareup.okhttp.Headers$Builder $r1;
        com.squareup.okhttp.Headers$1 $r2;

        r0 := @this: com.squareup.okhttp.Headers;

        $r1 := @parameter0: com.squareup.okhttp.Headers$Builder;

        $r2 := @parameter1: com.squareup.okhttp.Headers$1;

        specialinvoke r0.<com.squareup.okhttp.Headers: void <init>(com.squareup.okhttp.Headers$Builder)>($r1);

        return;
    }
    private void <init>(java.lang.String[])
    {
        com.squareup.okhttp.Headers r0;
        java.lang.String[] $r1;

        r0 := @this: com.squareup.okhttp.Headers;

        $r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues> = $r1;

        return;
    }
    private static java.lang.String get(java.lang.String[], java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.String;

        $i0 = lengthof $r0;

        $i0 = $i0 + -2;

     label1:
        if $i0 < 0 goto label3;

        $r2 = $r0[$i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        $r1 = $r0[$i0];

        return $r1;

     label2:
        $i0 = $i0 + -2;

        goto label1;

     label3:
        return null;
    }
    public static com.squareup.okhttp.Headers of(java.util.Map)
    {
        java.util.Map r0;
        java.lang.String[] r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;
        java.lang.String $r7, $r8;
        java.lang.StringBuilder $r9;
        com.squareup.okhttp.Headers $r10;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected map with header names and values");

        throw $r2;

     label1:
        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $i0 = $i0 * 2;

        r1 = newarray (java.lang.String)[$i0];

        $i0 = 0;

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r5 == null goto label3;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r5 != null goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Headers cannot be null");

        throw $r2;

     label4:
        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r5;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i1 == 0 goto label5;

        $i1 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(0);

        if $i1 != -1 goto label5;

        $i1 = virtualinvoke $r8.<java.lang.String: int indexOf(int)>(0);

        if $i1 == -1 goto label6;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected header: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label6:
        r1[$i0] = $r7;

        $i1 = $i0 + 1;

        r1[$i1] = $r8;

        $i0 = $i0 + 2;

        goto label2;

     label7:
        $r10 = new com.squareup.okhttp.Headers;

        specialinvoke $r10.<com.squareup.okhttp.Headers: void <init>(java.lang.String[])>(r1);

        return $r10;
    }
    public static transient com.squareup.okhttp.Headers of(java.lang.String[])
    {
        java.lang.String r0, r1;
        java.lang.String[] r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5;
        com.squareup.okhttp.Headers $r6;

        r2 := @parameter0: java.lang.String[];

        if r2 == null goto label1;

        $i0 = lengthof r2;

        $i0 = $i0 % 2;

        if $i0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected alternating header names and values");

        throw $r3;

     label2:
        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.lang.String[]) $r4;

        $i0 = 0;

     label3:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label5;

        r0 = r2[$i0];

        if r0 != null goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Headers cannot be null");

        throw $r3;

     label4:
        r0 = r2[$i0];

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        r2[$i0] = r0;

        $i0 = $i0 + 1;

        goto label3;

     label5:
        $i0 = 0;

     label6:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label9;

        r0 = r2[$i0];

        $i1 = $i0 + 1;

        r1 = r2[$i1];

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 == 0 goto label7;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(0);

        if $i1 != -1 goto label7;

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(0);

        if $i1 == -1 goto label8;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected header: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r3;

     label8:
        $i0 = $i0 + 2;

        goto label6;

     label9:
        $r6 = new com.squareup.okhttp.Headers;

        specialinvoke $r6.<com.squareup.okhttp.Headers: void <init>(java.lang.String[])>(r2);

        return $r6;
    }
    public java.lang.String get(java.lang.String)
    {
        com.squareup.okhttp.Headers r0;
        java.lang.String $r1;
        java.lang.String[] $r2;

        r0 := @this: com.squareup.okhttp.Headers;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues>;

        $r1 = staticinvoke <com.squareup.okhttp.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1);

        return $r1;
    }
    public java.util.Date getDate(java.lang.String)
    {
        com.squareup.okhttp.Headers r0;
        java.lang.String $r1;
        java.util.Date $r2;

        r0 := @this: com.squareup.okhttp.Headers;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String get(java.lang.String)>($r1);

        if $r1 == null goto label1;

        $r2 = staticinvoke <com.squareup.okhttp.internal.http.HttpDate: java.util.Date parse(java.lang.String)>($r1);

        return $r2;

     label1:
        return null;
    }
    public java.lang.String name(int)
    {
        com.squareup.okhttp.Headers r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.squareup.okhttp.Headers;

        $i0 := @parameter0: int;

        $i0 = $i0 * 2;

        if $i0 < 0 goto label1;

        $r1 = r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public java.util.Set names()
    {
        com.squareup.okhttp.Headers r0;
        java.util.TreeSet r1;
        java.util.Comparator $r2;
        int i0, $i1;
        java.lang.String $r3;
        java.util.Set $r4;

        r0 := @this: com.squareup.okhttp.Headers;

        r1 = new java.util.TreeSet;

        $r2 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke r1.<java.util.TreeSet: void <init>(java.util.Comparator)>($r2);

        i0 = 0;

        $i1 = virtualinvoke r0.<com.squareup.okhttp.Headers: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r3 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i0);

        virtualinvoke r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r1);

        return $r4;
    }
    public com.squareup.okhttp.Headers$Builder newBuilder()
    {
        com.squareup.okhttp.Headers r0;
        com.squareup.okhttp.Headers$Builder r1;
        java.lang.String[] $r2;
        java.util.List $r3;

        r0 := @this: com.squareup.okhttp.Headers;

        r1 = new com.squareup.okhttp.Headers$Builder;

        specialinvoke r1.<com.squareup.okhttp.Headers$Builder: void <init>()>();

        $r3 = staticinvoke <com.squareup.okhttp.Headers$Builder: java.util.List access$000(com.squareup.okhttp.Headers$Builder)>(r1);

        $r2 = r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, $r2);

        return r1;
    }
    public int size()
    {
        com.squareup.okhttp.Headers r0;
        java.lang.String[] $r1;
        int $i0;

        r0 := @this: com.squareup.okhttp.Headers;

        $r1 = r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues>;

        $i0 = lengthof $r1;

        $i0 = $i0 / 2;

        return $i0;
    }
    public java.util.Map toMultimap()
    {
        com.squareup.okhttp.Headers r0;
        int i0, $i1;
        java.lang.String $r2;
        java.lang.Object $r3;
        java.util.List r4;
        java.util.LinkedHashMap $r5;
        java.util.ArrayList $r6;

        r0 := @this: com.squareup.okhttp.Headers;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        i0 = 0;

        $i1 = virtualinvoke r0.<com.squareup.okhttp.Headers: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r2 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i0);

        $r3 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.util.List) $r3;

        if r4 != null goto label2;

        $r6 = new java.util.ArrayList;

        r4 = $r6;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

     label2:
        $r2 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String value(int)>(i0);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        i0 = i0 + 1;

        goto label1;

     label3:
        return $r5;
    }
    public java.lang.String toString()
    {
        com.squareup.okhttp.Headers r0;
        java.lang.StringBuilder r1, $r3;
        int i0, $i1;
        java.lang.String $r2;

        r0 := @this: com.squareup.okhttp.Headers;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

        $i1 = virtualinvoke r0.<com.squareup.okhttp.Headers: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i0);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String value(int)>(i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public java.lang.String value(int)
    {
        com.squareup.okhttp.Headers r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.squareup.okhttp.Headers;

        $i0 := @parameter0: int;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        if $i0 < 0 goto label1;

        $r1 = r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<com.squareup.okhttp.Headers: java.lang.String[] namesAndValues>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public java.util.List values(java.lang.String)
    {
        com.squareup.okhttp.Headers r0;
        java.lang.String $r1, $r3;
        java.util.ArrayList r2;
        int i0, $i1;
        boolean $z0;
        java.util.List $r4;

        r0 := @this: com.squareup.okhttp.Headers;

        $r1 := @parameter0: java.lang.String;

        r2 = null;

        i0 = 0;

        $i1 = virtualinvoke r0.<com.squareup.okhttp.Headers: int size()>();

     label1:
        if i0 >= $i1 goto label4;

        $r3 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        if r2 != null goto label2;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(2);

     label2:
        $r3 = virtualinvoke r0.<com.squareup.okhttp.Headers: java.lang.String value(int)>(i0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        if r2 == null goto label5;

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r4;

     label5:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;
    }
