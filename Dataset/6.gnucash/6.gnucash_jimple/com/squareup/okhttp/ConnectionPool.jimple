com.squareup.okhttp.ConnectionPool extends java.lang.Object
private static final long DEFAULT_KEEP_ALIVE_DURATION_MS
private static final com.squareup.okhttp.ConnectionPool systemDefault
private final java.util.LinkedList connections
private final java.lang.Runnable connectionsCleanupRunnable
private java.util.concurrent.Executor executor
private final long keepAliveDurationNs
private final int maxIdleConnections
    static void <clinit>()
    {
        java.lang.String $r0, $r1, $r2;
        long $l0;
        boolean $z0;
        com.squareup.okhttp.ConnectionPool $r3;
        int $i1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.keepAlive");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.keepAliveDuration");

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.maxConnections");

        if $r1 == null goto label2;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

     label1:
        if $r0 == null goto label3;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0);

        if $z0 != 0 goto label3;

        $r3 = new com.squareup.okhttp.ConnectionPool;

        specialinvoke $r3.<com.squareup.okhttp.ConnectionPool: void <init>(int,long)>(0, $l0);

        <com.squareup.okhttp.ConnectionPool: com.squareup.okhttp.ConnectionPool systemDefault> = $r3;

        return;

     label2:
        $l0 = 300000L;

        goto label1;

     label3:
        if $r2 == null goto label4;

        $r3 = new com.squareup.okhttp.ConnectionPool;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        specialinvoke $r3.<com.squareup.okhttp.ConnectionPool: void <init>(int,long)>($i1, $l0);

        <com.squareup.okhttp.ConnectionPool: com.squareup.okhttp.ConnectionPool systemDefault> = $r3;

        return;

     label4:
        $r3 = new com.squareup.okhttp.ConnectionPool;

        specialinvoke $r3.<com.squareup.okhttp.ConnectionPool: void <init>(int,long)>(5, $l0);

        <com.squareup.okhttp.ConnectionPool: com.squareup.okhttp.ConnectionPool systemDefault> = $r3;

        return;
    }
    public void <init>(int, long)
    {
        com.squareup.okhttp.ConnectionPool r0;
        int $i0;
        long $l1;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.util.concurrent.ThreadFactory $r4;
        java.util.LinkedList $r5;
        com.squareup.okhttp.ConnectionPool$1 $r6;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections> = $r5;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r4 = staticinvoke <com.squareup.okhttp.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp ConnectionPool", 1);

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 1, 60L, $r2, $r3, $r4);

        r0.<com.squareup.okhttp.ConnectionPool: java.util.concurrent.Executor executor> = $r1;

        $r6 = new com.squareup.okhttp.ConnectionPool$1;

        specialinvoke $r6.<com.squareup.okhttp.ConnectionPool$1: void <init>(com.squareup.okhttp.ConnectionPool)>(r0);

        r0.<com.squareup.okhttp.ConnectionPool: java.lang.Runnable connectionsCleanupRunnable> = $r6;

        r0.<com.squareup.okhttp.ConnectionPool: int maxIdleConnections> = $i0;

        $l1 = $l1 * 1000L;

        $l1 = $l1 * 1000L;

        r0.<com.squareup.okhttp.ConnectionPool: long keepAliveDurationNs> = $l1;

        return;
    }
    static void access$000(com.squareup.okhttp.ConnectionPool)
    {
        com.squareup.okhttp.ConnectionPool $r0;

        $r0 := @parameter0: com.squareup.okhttp.ConnectionPool;

        specialinvoke $r0.<com.squareup.okhttp.ConnectionPool: void runCleanupUntilPoolIsEmpty()>();

        return;
    }
    private void addConnection(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.ConnectionPool r0;
        com.squareup.okhttp.Connection $r1;
        java.lang.Runnable $r2;
        boolean $z0;
        java.util.LinkedList $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r3 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $z0 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        $r3 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        virtualinvoke $r3.<java.util.LinkedList: void addFirst(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.squareup.okhttp.ConnectionPool: java.util.concurrent.Executor executor>;

        $r2 = r0.<com.squareup.okhttp.ConnectionPool: java.lang.Runnable connectionsCleanupRunnable>;

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;

     label1:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }
    public static com.squareup.okhttp.ConnectionPool getDefault()
    {
        com.squareup.okhttp.ConnectionPool r0;

        r0 = <com.squareup.okhttp.ConnectionPool: com.squareup.okhttp.ConnectionPool systemDefault>;

        return r0;
    }
    private void runCleanupUntilPoolIsEmpty()
    {
        com.squareup.okhttp.ConnectionPool r0;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

     label1:
        $z0 = virtualinvoke r0.<com.squareup.okhttp.ConnectionPool: boolean performCleanup()>();

        if $z0 != 0 goto label1;

        return;
    }
    public void evictAll()
    {
        com.squareup.okhttp.ConnectionPool r0;
        java.util.ArrayList r1;
        java.util.LinkedList $r2;
        int i0, $i1;
        java.lang.Object $r3;
        com.squareup.okhttp.Connection $r4;
        java.net.Socket $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        entermonitor r0;

     label1:
        r1 = new java.util.ArrayList;

        $r2 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r2 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        virtualinvoke $r2.<java.util.LinkedList: void clear()>();

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label2:
        i0 = 0;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label3:
        if i0 >= $i1 goto label7;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (com.squareup.okhttp.Connection) $r3;

        $r5 = virtualinvoke $r4.<com.squareup.okhttp.Connection: java.net.Socket getSocket()>();

        staticinvoke <com.squareup.okhttp.internal.Util: void closeQuietly(java.net.Socket)>($r5);

        i0 = i0 + 1;

        goto label3;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public com.squareup.okhttp.Connection get(com.squareup.okhttp.Address)
    {
        com.squareup.okhttp.ConnectionPool r0;
        com.squareup.okhttp.Address $r1, $r10;
        java.net.SocketException r2;
        com.squareup.okhttp.Connection r3, r8;
        java.util.LinkedList $r4, $r5;
        int $i0;
        java.util.ListIterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        com.squareup.okhttp.Route $r9;
        long $l1, $l2;
        byte $b3;
        com.squareup.okhttp.internal.Platform $r11;
        java.net.Socket $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;
        java.lang.Throwable $r15;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        $r1 := @parameter0: com.squareup.okhttp.Address;

        entermonitor r0;

        r3 = null;

     label01:
        $r4 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $r5 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $i0 = virtualinvoke $r5.<java.util.LinkedList: int size()>();

        $r6 = virtualinvoke $r4.<java.util.LinkedList: java.util.ListIterator listIterator(int)>($i0);

     label02:
        $z0 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label06;

        $r7 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object previous()>();

        r8 = (com.squareup.okhttp.Connection) $r7;

        $r9 = virtualinvoke r8.<com.squareup.okhttp.Connection: com.squareup.okhttp.Route getRoute()>();

        $r10 = virtualinvoke $r9.<com.squareup.okhttp.Route: com.squareup.okhttp.Address getAddress()>();

        $z0 = virtualinvoke $r10.<com.squareup.okhttp.Address: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label02;

        $z0 = virtualinvoke r8.<com.squareup.okhttp.Connection: boolean isAlive()>();

        if $z0 == 0 goto label02;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = virtualinvoke r8.<com.squareup.okhttp.Connection: long getIdleStartTimeNs()>();

        $l1 = $l1 - $l2;

        $l2 = r0.<com.squareup.okhttp.ConnectionPool: long keepAliveDurationNs>;

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label02;

        interfaceinvoke $r6.<java.util.ListIterator: void remove()>();

        $z0 = virtualinvoke r8.<com.squareup.okhttp.Connection: boolean isSpdy()>();

     label03:
        if $z0 != 0 goto label05;

     label04:
        $r11 = staticinvoke <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform get()>();

        $r12 = virtualinvoke r8.<com.squareup.okhttp.Connection: java.net.Socket getSocket()>();

        virtualinvoke $r11.<com.squareup.okhttp.internal.Platform: void tagSocket(java.net.Socket)>($r12);

     label05:
        r3 = r8;

     label06:
        if r3 == null goto label08;

     label07:
        $z0 = virtualinvoke r3.<com.squareup.okhttp.Connection: boolean isSpdy()>();

        if $z0 == 0 goto label08;

        $r4 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        virtualinvoke $r4.<java.util.LinkedList: void addFirst(java.lang.Object)>(r3);

     label08:
        exitmonitor r0;

        return r3;

     label09:
        r2 := @caughtexception;

     label10:
        $r12 = virtualinvoke r8.<com.squareup.okhttp.Connection: java.net.Socket getSocket()>();

        staticinvoke <com.squareup.okhttp.internal.Util: void closeQuietly(java.net.Socket)>($r12);

        $r11 = staticinvoke <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform get()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to tagSocket(): ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<com.squareup.okhttp.internal.Platform: void logW(java.lang.String)>($r14);

     label11:
        goto label02;

     label12:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.net.SocketException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }
    public int getConnectionCount()
    {
        com.squareup.okhttp.ConnectionPool r0;
        int $i0;
        java.util.LinkedList $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        entermonitor r0;

     label1:
        $r1 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    java.util.List getConnections()
    {
        com.squareup.okhttp.ConnectionPool r0;
        java.util.LinkedList $r1;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        entermonitor r0;

     label1:
        $r2 = new java.util.ArrayList;

        $r1 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

     label2:
        exitmonitor r0;

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getHttpConnectionCount()
    {
        com.squareup.okhttp.ConnectionPool r0;
        java.util.LinkedList $r1;
        int $i0, $i1;
        java.lang.Throwable $r2;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        entermonitor r0;

     label1:
        $r1 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        $i1 = virtualinvoke r0.<com.squareup.okhttp.ConnectionPool: int getMultiplexedConnectionCount()>();

     label2:
        $i0 = $i0 - $i1;

        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getMultiplexedConnectionCount()
    {
        com.squareup.okhttp.ConnectionPool r0;
        int i0;
        java.util.LinkedList $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        com.squareup.okhttp.Connection r4;
        java.lang.Throwable $r5;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        entermonitor r0;

        i0 = 0;

     label1:
        $r1 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.squareup.okhttp.Connection) $r3;

        $z0 = virtualinvoke r4.<com.squareup.okhttp.Connection: boolean isSpdy()>();

     label3:
        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label2;

     label4:
        exitmonitor r0;

        return i0;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label5;
    }
    public int getSpdyConnectionCount()
    {
        com.squareup.okhttp.ConnectionPool r0;
        int $i0;
        java.lang.Throwable $r1;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        entermonitor r0;

     label1:
        $i0 = virtualinvoke r0.<com.squareup.okhttp.ConnectionPool: int getMultiplexedConnectionCount()>();

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    boolean performCleanup()
    {
        com.squareup.okhttp.ConnectionPool r0;
        java.util.ArrayList r1;
        long l0, l1, l2, $l5;
        java.util.LinkedList $r2, $r3;
        boolean $z0;
        int i3, $i4;
        java.util.ListIterator $r4;
        java.lang.Object $r5;
        com.squareup.okhttp.Connection r6;
        byte $b6;
        java.lang.Throwable $r7;
        java.lang.InterruptedException $r8;
        java.net.Socket $r9;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        entermonitor r0;

     label01:
        $r2 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r0;

     label02:
        return 0;

     label03:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        i3 = 0;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = r0.<com.squareup.okhttp.ConnectionPool: long keepAliveDurationNs>;

        $r2 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $r3 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $i4 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        $r4 = virtualinvoke $r2.<java.util.LinkedList: java.util.ListIterator listIterator(int)>($i4);

     label04:
        $z0 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label09;

        $r5 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object previous()>();

        r6 = (com.squareup.okhttp.Connection) $r5;

        l1 = virtualinvoke r6.<com.squareup.okhttp.Connection: long getIdleStartTimeNs()>();

        $l5 = r0.<com.squareup.okhttp.ConnectionPool: long keepAliveDurationNs>;

        l1 = l1 + $l5;

        l1 = l1 - l0;

        $b6 = l1 cmp 0L;

        if $b6 <= 0 goto label05;

        $z0 = virtualinvoke r6.<com.squareup.okhttp.Connection: boolean isAlive()>();

        if $z0 != 0 goto label08;

     label05:
        interfaceinvoke $r4.<java.util.ListIterator: void remove()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label04;

     label06:
        $r7 := @caughtexception;

        exitmonitor r0;

     label07:
        throw $r7;

     label08:
        $z0 = virtualinvoke r6.<com.squareup.okhttp.Connection: boolean isIdle()>();

        if $z0 == 0 goto label04;

        i3 = i3 + 1;

        l2 = staticinvoke <java.lang.Math: long min(long,long)>(l2, l1);

        goto label04;

     label09:
        $r2 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $r3 = r0.<com.squareup.okhttp.ConnectionPool: java.util.LinkedList connections>;

        $i4 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        $r4 = virtualinvoke $r2.<java.util.LinkedList: java.util.ListIterator listIterator(int)>($i4);

     label10:
        $z0 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label11;

        $i4 = r0.<com.squareup.okhttp.ConnectionPool: int maxIdleConnections>;

        if i3 <= $i4 goto label11;

        $r5 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object previous()>();

        r6 = (com.squareup.okhttp.Connection) $r5;

        $z0 = virtualinvoke r6.<com.squareup.okhttp.Connection: boolean isIdle()>();

        if $z0 == 0 goto label10;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r6);

        interfaceinvoke $r4.<java.util.ListIterator: void remove()>();

        i3 = i3 + -1;

        goto label10;

     label11:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

     label12:
        if $z0 == 0 goto label18;

     label13:
        l0 = l2 / 1000000L;

        l1 = 1000000L * l0;

        l2 = l2 - l1;

        i3 = (int) l2;

     label14:
        virtualinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i3);

     label15:
        exitmonitor r0;

     label16:
        return 1;

     label17:
        $r8 := @caughtexception;

     label18:
        exitmonitor r0;

     label19:
        i3 = 0;

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

     label20:
        if i3 >= $i4 goto label21;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (com.squareup.okhttp.Connection) $r5;

        $r9 = virtualinvoke r6.<com.squareup.okhttp.Connection: java.net.Socket getSocket()>();

        staticinvoke <com.squareup.okhttp.internal.Util: void closeQuietly(java.net.Socket)>($r9);

        i3 = i3 + 1;

        goto label20;

     label21:
        return 1;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label07 with label06;
        catch java.lang.Throwable from label08 to label12 with label06;
        catch java.lang.InterruptedException from label14 to label15 with label17;
        catch java.lang.Throwable from label13 to label15 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
        catch java.lang.Throwable from label17 to label19 with label06;
    }
    void recycle(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.ConnectionPool r0;
        com.squareup.okhttp.Connection $r1;
        java.net.SocketException r2;
        boolean $z0;
        java.net.Socket $r3;
        com.squareup.okhttp.internal.Platform $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $z0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: boolean isSpdy()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: boolean clearOwner()>();

        if $z0 == 0 goto label9;

        $z0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: boolean isAlive()>();

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke $r1.<com.squareup.okhttp.Connection: java.net.Socket getSocket()>();

        staticinvoke <com.squareup.okhttp.internal.Util: void closeQuietly(java.net.Socket)>($r3);

        return;

     label2:
        $r4 = staticinvoke <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform get()>();

        $r3 = virtualinvoke $r1.<com.squareup.okhttp.Connection: java.net.Socket getSocket()>();

        virtualinvoke $r4.<com.squareup.okhttp.internal.Platform: void untagSocket(java.net.Socket)>($r3);

     label3:
        entermonitor r0;

     label4:
        specialinvoke r0.<com.squareup.okhttp.ConnectionPool: void addConnection(com.squareup.okhttp.Connection)>($r1);

        virtualinvoke $r1.<com.squareup.okhttp.Connection: void incrementRecycleCount()>();

        virtualinvoke $r1.<com.squareup.okhttp.Connection: void resetIdleStartTime()>();

        exitmonitor r0;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r5;

     label8:
        r2 := @caughtexception;

        $r4 = staticinvoke <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform get()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to untagSocket(): ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.squareup.okhttp.internal.Platform: void logW(java.lang.String)>($r7);

        $r3 = virtualinvoke $r1.<com.squareup.okhttp.Connection: java.net.Socket getSocket()>();

        staticinvoke <com.squareup.okhttp.internal.Util: void closeQuietly(java.net.Socket)>($r3);

     label9:
        return;

        catch java.net.SocketException from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }
    void replaceCleanupExecutorForTests(java.util.concurrent.Executor)
    {
        com.squareup.okhttp.ConnectionPool r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        $r1 := @parameter0: java.util.concurrent.Executor;

        r0.<com.squareup.okhttp.ConnectionPool: java.util.concurrent.Executor executor> = $r1;

        return;
    }
    void share(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.ConnectionPool r0;
        com.squareup.okhttp.Connection $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.squareup.okhttp.ConnectionPool;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $z0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: boolean isSpdy()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: boolean isAlive()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        entermonitor r0;

     label3:
        specialinvoke r0.<com.squareup.okhttp.ConnectionPool: void addConnection(com.squareup.okhttp.Connection)>($r1);

        exitmonitor r0;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
