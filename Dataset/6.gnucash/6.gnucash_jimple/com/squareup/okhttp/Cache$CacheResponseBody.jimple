com.squareup.okhttp.Cache$CacheResponseBody extends com.squareup.okhttp.ResponseBody
private final okio.BufferedSource bodySource
private final java.lang.String contentLength
private final java.lang.String contentType
private final com.squareup.okhttp.internal.DiskLruCache$Snapshot snapshot
    public void <init>(com.squareup.okhttp.internal.DiskLruCache$Snapshot, java.lang.String, java.lang.String)
    {
        com.squareup.okhttp.Cache$CacheResponseBody r0;
        com.squareup.okhttp.internal.DiskLruCache$Snapshot $r1;
        java.lang.String $r2, $r3;
        okio.Source $r4;
        com.squareup.okhttp.Cache$CacheResponseBody$1 $r5;
        okio.BufferedSource $r6;

        r0 := @this: com.squareup.okhttp.Cache$CacheResponseBody;

        $r1 := @parameter0: com.squareup.okhttp.internal.DiskLruCache$Snapshot;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.squareup.okhttp.ResponseBody: void <init>()>();

        r0.<com.squareup.okhttp.Cache$CacheResponseBody: com.squareup.okhttp.internal.DiskLruCache$Snapshot snapshot> = $r1;

        r0.<com.squareup.okhttp.Cache$CacheResponseBody: java.lang.String contentType> = $r2;

        r0.<com.squareup.okhttp.Cache$CacheResponseBody: java.lang.String contentLength> = $r3;

        $r4 = virtualinvoke $r1.<com.squareup.okhttp.internal.DiskLruCache$Snapshot: okio.Source getSource(int)>(1);

        $r5 = new com.squareup.okhttp.Cache$CacheResponseBody$1;

        specialinvoke $r5.<com.squareup.okhttp.Cache$CacheResponseBody$1: void <init>(com.squareup.okhttp.Cache$CacheResponseBody,okio.Source,com.squareup.okhttp.internal.DiskLruCache$Snapshot)>(r0, $r4, $r1);

        $r6 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r5);

        r0.<com.squareup.okhttp.Cache$CacheResponseBody: okio.BufferedSource bodySource> = $r6;

        return;
    }
    static com.squareup.okhttp.internal.DiskLruCache$Snapshot access$500(com.squareup.okhttp.Cache$CacheResponseBody)
    {
        com.squareup.okhttp.Cache$CacheResponseBody $r0;
        com.squareup.okhttp.internal.DiskLruCache$Snapshot r1;

        $r0 := @parameter0: com.squareup.okhttp.Cache$CacheResponseBody;

        r1 = $r0.<com.squareup.okhttp.Cache$CacheResponseBody: com.squareup.okhttp.internal.DiskLruCache$Snapshot snapshot>;

        return r1;
    }
    public long contentLength()
    {
        com.squareup.okhttp.Cache$CacheResponseBody r0;
        java.lang.NumberFormatException r1;
        long $l0;
        java.lang.String $r2;

        r0 := @this: com.squareup.okhttp.Cache$CacheResponseBody;

        $r2 = r0.<com.squareup.okhttp.Cache$CacheResponseBody: java.lang.String contentLength>;

        if $r2 == null goto label4;

        $r2 = r0.<com.squareup.okhttp.Cache$CacheResponseBody: java.lang.String contentLength>;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

     label4:
        return -1L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public com.squareup.okhttp.MediaType contentType()
    {
        com.squareup.okhttp.Cache$CacheResponseBody r0;
        com.squareup.okhttp.MediaType $r1;
        java.lang.String $r2;

        r0 := @this: com.squareup.okhttp.Cache$CacheResponseBody;

        $r2 = r0.<com.squareup.okhttp.Cache$CacheResponseBody: java.lang.String contentType>;

        if $r2 == null goto label1;

        $r2 = r0.<com.squareup.okhttp.Cache$CacheResponseBody: java.lang.String contentType>;

        $r1 = staticinvoke <com.squareup.okhttp.MediaType: com.squareup.okhttp.MediaType parse(java.lang.String)>($r2);

        return $r1;

     label1:
        return null;
    }
    public okio.BufferedSource source()
    {
        com.squareup.okhttp.Cache$CacheResponseBody r0;
        okio.BufferedSource r1;

        r0 := @this: com.squareup.okhttp.Cache$CacheResponseBody;

        r1 = r0.<com.squareup.okhttp.Cache$CacheResponseBody: okio.BufferedSource bodySource>;

        return r1;
    }
