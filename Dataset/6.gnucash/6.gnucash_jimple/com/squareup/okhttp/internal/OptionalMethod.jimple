com.squareup.okhttp.internal.OptionalMethod extends java.lang.Object
private final java.lang.String methodName
private final java.lang.Class[] methodParams
private final java.lang.Class returnType
    public transient void <init>(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        com.squareup.okhttp.internal.OptionalMethod r0;
        java.lang.Class r1;
        java.lang.String $r2;
        java.lang.Class[] $r3;

        r0 := @this: com.squareup.okhttp.internal.OptionalMethod;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Class returnType> = r1;

        r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.String methodName> = $r2;

        r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Class[] methodParams> = $r3;

        return;
    }
    private java.lang.reflect.Method getMethod(java.lang.Class)
    {
        com.squareup.okhttp.internal.OptionalMethod r0;
        java.lang.Class r1, $r5;
        java.lang.String $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.internal.OptionalMethod;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.String methodName>;

        if $r2 == null goto label1;

        $r2 = r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.String methodName>;

        $r3 = r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Class[] methodParams>;

        $r4 = staticinvoke <com.squareup.okhttp.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r1, $r2, $r3);

        if $r4 == null goto label2;

        r1 = r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Class returnType>;

        if r1 == null goto label2;

        r1 = r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Class returnType>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        return $r4;
    }
    private static java.lang.reflect.Method getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String $r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Method r3, $r4;
        int $i0;
        java.lang.NoSuchMethodException $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Class[];

        r3 = null;

     label1:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r1, $r2);

     label2:
        r3 = $r4;

     label3:
        $i0 = virtualinvoke $r4.<java.lang.reflect.Method: int getModifiers()>();

     label4:
        $i0 = $i0 & 1;

        if $i0 != 0 goto label6;

        return null;

     label5:
        $r5 := @caughtexception;

        return r3;

     label6:
        return $r4;

        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }
    public transient java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException
    {
        com.squareup.okhttp.internal.OptionalMethod r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        java.lang.IllegalAccessException r3;
        java.lang.AssertionError r4;
        java.lang.Class $r5;
        java.lang.reflect.Method $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: com.squareup.okhttp.internal.OptionalMethod;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = specialinvoke r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r5);

        if $r6 != null goto label1;

        r4 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r8 = r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.String methodName>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported for object ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw r4;

     label1:
        r1 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

     label2:
        return r1;

     label3:
        r3 := @caughtexception;

        r4 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpectedly could not call: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        virtualinvoke r4.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>(r3);

        throw r4;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }
    public transient java.lang.Object invokeOptional(java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException
    {
        com.squareup.okhttp.internal.OptionalMethod r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        java.lang.IllegalAccessException r3;
        java.lang.Class $r4;
        java.lang.reflect.Method $r5;

        r0 := @this: com.squareup.okhttp.internal.OptionalMethod;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = specialinvoke r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4);

        if $r5 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

     label2:
        return r1;

     label3:
        r3 := @caughtexception;

        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }
    public transient java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object, java.lang.Object[])
    {
        com.squareup.okhttp.internal.OptionalMethod r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        java.lang.reflect.InvocationTargetException r3;
        java.lang.AssertionError r4;
        java.lang.Throwable $r5;
        boolean $z0;
        java.lang.RuntimeException r6;

        r0 := @this: com.squareup.okhttp.internal.OptionalMethod;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

     label1:
        r1 = virtualinvoke r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>(r1, $r2);

     label2:
        return r1;

     label3:
        r3 := @caughtexception;

        $r5 = virtualinvoke r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r5 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        r6 = (java.lang.RuntimeException) $r5;

        throw r6;

     label4:
        r4 = new java.lang.AssertionError;

        specialinvoke r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected exception");

        virtualinvoke r4.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        throw r4;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }
    public transient java.lang.Object invokeWithoutCheckedException(java.lang.Object, java.lang.Object[])
    {
        com.squareup.okhttp.internal.OptionalMethod r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        java.lang.reflect.InvocationTargetException r3;
        java.lang.AssertionError r4;
        java.lang.Throwable $r5;
        boolean $z0;
        java.lang.RuntimeException r6;

        r0 := @this: com.squareup.okhttp.internal.OptionalMethod;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

     label1:
        r1 = virtualinvoke r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

     label2:
        return r1;

     label3:
        r3 := @caughtexception;

        $r5 = virtualinvoke r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r5 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        r6 = (java.lang.RuntimeException) $r5;

        throw r6;

     label4:
        r4 = new java.lang.AssertionError;

        specialinvoke r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected exception");

        virtualinvoke r4.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        throw r4;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }
    public boolean isSupported(java.lang.Object)
    {
        com.squareup.okhttp.internal.OptionalMethod r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;

        r0 := @this: com.squareup.okhttp.internal.OptionalMethod;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = specialinvoke r0.<com.squareup.okhttp.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }
