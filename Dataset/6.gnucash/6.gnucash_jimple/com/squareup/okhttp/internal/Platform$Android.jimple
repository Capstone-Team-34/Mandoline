com.squareup.okhttp.internal.Platform$Android extends com.squareup.okhttp.internal.Platform
private final com.squareup.okhttp.internal.OptionalMethod getAlpnSelectedProtocol
private final com.squareup.okhttp.internal.OptionalMethod setAlpnProtocols
private final com.squareup.okhttp.internal.OptionalMethod setHostname
private final com.squareup.okhttp.internal.OptionalMethod setUseSessionTickets
private final java.lang.reflect.Method trafficStatsTagSocket
private final java.lang.reflect.Method trafficStatsUntagSocket
    public void <init>(com.squareup.okhttp.internal.OptionalMethod, com.squareup.okhttp.internal.OptionalMethod, java.lang.reflect.Method, java.lang.reflect.Method, com.squareup.okhttp.internal.OptionalMethod, com.squareup.okhttp.internal.OptionalMethod)
    {
        com.squareup.okhttp.internal.Platform$Android r0;
        com.squareup.okhttp.internal.OptionalMethod r1, r2, r5, r6;
        java.lang.reflect.Method $r3, $r4;

        r0 := @this: com.squareup.okhttp.internal.Platform$Android;

        r1 := @parameter0: com.squareup.okhttp.internal.OptionalMethod;

        r2 := @parameter1: com.squareup.okhttp.internal.OptionalMethod;

        $r3 := @parameter2: java.lang.reflect.Method;

        $r4 := @parameter3: java.lang.reflect.Method;

        r5 := @parameter4: com.squareup.okhttp.internal.OptionalMethod;

        r6 := @parameter5: com.squareup.okhttp.internal.OptionalMethod;

        specialinvoke r0.<com.squareup.okhttp.internal.Platform: void <init>()>();

        r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setUseSessionTickets> = r1;

        r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setHostname> = r2;

        r0.<com.squareup.okhttp.internal.Platform$Android: java.lang.reflect.Method trafficStatsTagSocket> = $r3;

        r0.<com.squareup.okhttp.internal.Platform$Android: java.lang.reflect.Method trafficStatsUntagSocket> = $r4;

        r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod getAlpnSelectedProtocol> = r5;

        r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setAlpnProtocols> = r6;

        return;
    }
    public void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        com.squareup.okhttp.internal.Platform$Android r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List r3;
        java.lang.Object[] r4;
        com.squareup.okhttp.internal.OptionalMethod $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        byte[] $r7;

        r0 := @this: com.squareup.okhttp.internal.Platform$Android;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        if $r2 == null goto label1;

        $r5 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setUseSessionTickets>;

        r4 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r4[0] = $r6;

        virtualinvoke $r5.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, r4);

        $r5 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setHostname>;

        r4 = newarray (java.lang.Object)[1];

        r4[0] = $r2;

        virtualinvoke $r5.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, r4);

     label1:
        $r5 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setAlpnProtocols>;

        if $r5 == null goto label2;

        $r5 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setAlpnProtocols>;

        $z0 = virtualinvoke $r5.<com.squareup.okhttp.internal.OptionalMethod: boolean isSupported(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        r4 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <com.squareup.okhttp.internal.Platform$Android: byte[] concatLengthPrefixed(java.util.List)>(r3);

        r4[0] = $r7;

        $r5 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod setAlpnProtocols>;

        virtualinvoke $r5.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, r4);

     label2:
        return;
    }
    public void connectSocket(java.net.Socket, java.net.InetSocketAddress, int) throws java.io.IOException
    {
        com.squareup.okhttp.internal.Platform$Android r0;
        java.net.Socket $r1;
        java.net.InetSocketAddress $r2;
        int $i0;
        java.io.IOException r3;
        java.lang.SecurityException r4;

        r0 := @this: com.squareup.okhttp.internal.Platform$Android;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $i0 := @parameter2: int;

     label1:
        virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0);

     label2:
        return;

     label3:
        r4 := @caughtexception;

        r3 = new java.io.IOException;

        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>("Exception in connect");

        virtualinvoke r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r4);

        throw r3;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        com.squareup.okhttp.internal.Platform$Android r0;
        javax.net.ssl.SSLSocket $r1;
        com.squareup.okhttp.internal.OptionalMethod $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        byte[] $r5;
        java.lang.String $r6;
        java.nio.charset.Charset $r7;

        r0 := @this: com.squareup.okhttp.internal.Platform$Android;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod getAlpnSelectedProtocol>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod getAlpnSelectedProtocol>;

        $z0 = virtualinvoke $r2.<com.squareup.okhttp.internal.OptionalMethod: boolean isSupported(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        $r2 = r0.<com.squareup.okhttp.internal.Platform$Android: com.squareup.okhttp.internal.OptionalMethod getAlpnSelectedProtocol>;

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<com.squareup.okhttp.internal.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r3);

        $r5 = (byte[]) $r4;

        if $r5 == null goto label3;

        $r6 = new java.lang.String;

        $r7 = <com.squareup.okhttp.internal.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r5, $r7);

     label2:
        return $r6;

     label3:
        $r6 = null;

        goto label2;

     label4:
        return null;
    }
    public void tagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.squareup.okhttp.internal.Platform$Android r0;
        java.net.Socket $r1;
        java.lang.Throwable $r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.IllegalAccessException r5;
        java.lang.RuntimeException $r6;
        java.lang.reflect.InvocationTargetException r7;

        r0 := @this: com.squareup.okhttp.internal.Platform$Android;

        $r1 := @parameter0: java.net.Socket;

        $r3 = r0.<com.squareup.okhttp.internal.Platform$Android: java.lang.reflect.Method trafficStatsTagSocket>;

        if $r3 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.squareup.okhttp.internal.Platform$Android: java.lang.reflect.Method trafficStatsTagSocket>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

     label2:
        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label3:
        return;

     label4:
        r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r6;

     label5:
        r7 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r2 = virtualinvoke r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r6;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
    }
    public void untagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.squareup.okhttp.internal.Platform$Android r0;
        java.net.Socket $r1;
        java.lang.Throwable $r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.IllegalAccessException r5;
        java.lang.RuntimeException $r6;
        java.lang.reflect.InvocationTargetException r7;

        r0 := @this: com.squareup.okhttp.internal.Platform$Android;

        $r1 := @parameter0: java.net.Socket;

        $r3 = r0.<com.squareup.okhttp.internal.Platform$Android: java.lang.reflect.Method trafficStatsUntagSocket>;

        if $r3 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.squareup.okhttp.internal.Platform$Android: java.lang.reflect.Method trafficStatsUntagSocket>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

     label2:
        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label3:
        return;

     label4:
        r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r6;

     label5:
        r7 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r2 = virtualinvoke r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r6;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
    }
