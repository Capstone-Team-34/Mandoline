com.squareup.okhttp.internal.spdy.Http2 extends java.lang.Object implements com.squareup.okhttp.internal.spdy.Variant
private static final okio.ByteString CONNECTION_PREFACE
static final byte FLAG_ACK
static final byte FLAG_COMPRESSED
static final byte FLAG_END_HEADERS
static final byte FLAG_END_PUSH_PROMISE
static final byte FLAG_END_STREAM
static final byte FLAG_NONE
static final byte FLAG_PADDED
static final byte FLAG_PRIORITY
static final int INITIAL_MAX_FRAME_SIZE
static final byte TYPE_CONTINUATION
static final byte TYPE_DATA
static final byte TYPE_GOAWAY
static final byte TYPE_HEADERS
static final byte TYPE_PING
static final byte TYPE_PRIORITY
static final byte TYPE_PUSH_PROMISE
static final byte TYPE_RST_STREAM
static final byte TYPE_SETTINGS
static final byte TYPE_WINDOW_UPDATE
private static final java.util.logging.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        okio.ByteString $r3;

        $r0 = class "Lcom/squareup/okhttp/internal/spdy/Http2$FrameLogger;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.squareup.okhttp.internal.spdy.Http2: java.util.logging.Logger logger> = $r2;

        $r3 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n");

        <com.squareup.okhttp.internal.spdy.Http2: okio.ByteString CONNECTION_PREFACE> = $r3;

        return;
    }
    public void <init>()
    {
        com.squareup.okhttp.internal.spdy.Http2 r0;

        r0 := @this: com.squareup.okhttp.internal.spdy.Http2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static okio.ByteString access$000()
    {
        okio.ByteString r0;

        r0 = <com.squareup.okhttp.internal.spdy.Http2: okio.ByteString CONNECTION_PREFACE>;

        return r0;
    }
    static java.util.logging.Logger access$100()
    {
        java.util.logging.Logger r0;

        r0 = <com.squareup.okhttp.internal.spdy.Http2: java.util.logging.Logger logger>;

        return r0;
    }
    static java.io.IOException access$200(java.lang.String, java.lang.Object[]) throws java.io.IOException
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        java.io.IOException $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.squareup.okhttp.internal.spdy.Http2: java.io.IOException ioException(java.lang.String,java.lang.Object[])>($r0, $r1);

        return $r2;
    }
    static int access$300(okio.BufferedSource) throws java.io.IOException
    {
        okio.BufferedSource $r0;
        int $i0;

        $r0 := @parameter0: okio.BufferedSource;

        $i0 = staticinvoke <com.squareup.okhttp.internal.spdy.Http2: int readMedium(okio.BufferedSource)>($r0);

        return $i0;
    }
    static int access$400(int, byte, short) throws java.io.IOException
    {
        int $i0;
        byte $b1;
        short $s2;

        $i0 := @parameter0: int;

        $b1 := @parameter1: byte;

        $s2 := @parameter2: short;

        $i0 = staticinvoke <com.squareup.okhttp.internal.spdy.Http2: int lengthWithoutPadding(int,byte,short)>($i0, $b1, $s2);

        return $i0;
    }
    static java.lang.IllegalArgumentException access$500(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.squareup.okhttp.internal.spdy.Http2: java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[])>($r0, $r1);

        return $r2;
    }
    static void access$600(okio.BufferedSink, int) throws java.io.IOException
    {
        okio.BufferedSink $r0;
        int $i0;

        $r0 := @parameter0: okio.BufferedSink;

        $i0 := @parameter1: int;

        staticinvoke <com.squareup.okhttp.internal.spdy.Http2: void writeMedium(okio.BufferedSink,int)>($r0, $i0);

        return;
    }
    private static transient java.lang.IllegalArgumentException illegalArgument(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = new java.lang.IllegalArgumentException;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }
    private static transient java.io.IOException ioException(java.lang.String, java.lang.Object[]) throws java.io.IOException
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        java.io.IOException $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = new java.io.IOException;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r1);

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }
    private static int lengthWithoutPadding(int, byte, short) throws java.io.IOException
    {
        byte $b0;
        short $s1;
        int $i2, $i3;
        java.lang.Object[] $r0;
        java.lang.Short $r1;
        java.lang.Integer $r2;
        java.io.IOException $r3;

        $i2 := @parameter0: int;

        $b0 := @parameter1: byte;

        $s1 := @parameter2: short;

        $i3 = $b0 & 8;

        if $i3 == 0 goto label1;

        $i2 = $i2 + -1;

     label1:
        if $s1 <= $i2 goto label2;

        $r0 = newarray (java.lang.Object)[2];

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r0[1] = $r2;

        $r3 = staticinvoke <com.squareup.okhttp.internal.spdy.Http2: java.io.IOException ioException(java.lang.String,java.lang.Object[])>("PROTOCOL_ERROR padding %s > remaining length %s", $r0);

        throw $r3;

     label2:
        $i2 = $i2 - $s1;

        $s1 = (short) $i2;

        return $s1;
    }
    private static int readMedium(okio.BufferedSource) throws java.io.IOException
    {
        okio.BufferedSource $r0;
        byte $b0;
        int $i1, $i2;

        $r0 := @parameter0: okio.BufferedSource;

        $b0 = interfaceinvoke $r0.<okio.BufferedSource: byte readByte()>();

        $i1 = $b0 & 255;

        $i1 = $i1 << 16;

        $b0 = interfaceinvoke $r0.<okio.BufferedSource: byte readByte()>();

        $i2 = $b0 & 255;

        $i2 = $i2 << 8;

        $i1 = $i1 | $i2;

        $b0 = interfaceinvoke $r0.<okio.BufferedSource: byte readByte()>();

        $i2 = $b0 & 255;

        $i1 = $i1 | $i2;

        return $i1;
    }
    private static void writeMedium(okio.BufferedSink, int) throws java.io.IOException
    {
        okio.BufferedSink $r0;
        int $i0, $i1;

        $r0 := @parameter0: okio.BufferedSink;

        $i0 := @parameter1: int;

        $i1 = $i0 >>> 16;

        $i1 = $i1 & 255;

        interfaceinvoke $r0.<okio.BufferedSink: okio.BufferedSink writeByte(int)>($i1);

        $i1 = $i0 >>> 8;

        $i1 = $i1 & 255;

        interfaceinvoke $r0.<okio.BufferedSink: okio.BufferedSink writeByte(int)>($i1);

        $i0 = $i0 & 255;

        interfaceinvoke $r0.<okio.BufferedSink: okio.BufferedSink writeByte(int)>($i0);

        return;
    }
    public com.squareup.okhttp.Protocol getProtocol()
    {
        com.squareup.okhttp.internal.spdy.Http2 r0;
        com.squareup.okhttp.Protocol r1;

        r0 := @this: com.squareup.okhttp.internal.spdy.Http2;

        r1 = <com.squareup.okhttp.Protocol: com.squareup.okhttp.Protocol HTTP_2>;

        return r1;
    }
    public com.squareup.okhttp.internal.spdy.FrameReader newReader(okio.BufferedSource, boolean)
    {
        com.squareup.okhttp.internal.spdy.Http2 r0;
        okio.BufferedSource $r1;
        boolean $z0;
        com.squareup.okhttp.internal.spdy.Http2$Reader $r2;

        r0 := @this: com.squareup.okhttp.internal.spdy.Http2;

        $r1 := @parameter0: okio.BufferedSource;

        $z0 := @parameter1: boolean;

        $r2 = new com.squareup.okhttp.internal.spdy.Http2$Reader;

        specialinvoke $r2.<com.squareup.okhttp.internal.spdy.Http2$Reader: void <init>(okio.BufferedSource,int,boolean)>($r1, 4096, $z0);

        return $r2;
    }
    public com.squareup.okhttp.internal.spdy.FrameWriter newWriter(okio.BufferedSink, boolean)
    {
        com.squareup.okhttp.internal.spdy.Http2 r0;
        okio.BufferedSink $r1;
        boolean $z0;
        com.squareup.okhttp.internal.spdy.Http2$Writer $r2;

        r0 := @this: com.squareup.okhttp.internal.spdy.Http2;

        $r1 := @parameter0: okio.BufferedSink;

        $z0 := @parameter1: boolean;

        $r2 = new com.squareup.okhttp.internal.spdy.Http2$Writer;

        specialinvoke $r2.<com.squareup.okhttp.internal.spdy.Http2$Writer: void <init>(okio.BufferedSink,boolean)>($r1, $z0);

        return $r2;
    }
