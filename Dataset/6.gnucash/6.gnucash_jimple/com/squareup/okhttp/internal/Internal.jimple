com.squareup.okhttp.internal.Internal extends java.lang.Object
public static com.squareup.okhttp.internal.Internal instance
public static final java.util.logging.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/squareup/okhttp/OkHttpClient;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.squareup.okhttp.internal.Internal: java.util.logging.Logger logger> = $r2;

        return;
    }
    public void <init>()
    {
        com.squareup.okhttp.internal.Internal r0;

        r0 := @this: com.squareup.okhttp.internal.Internal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void initializeInstanceForTests()
    {
        com.squareup.okhttp.OkHttpClient $r0;

        $r0 = new com.squareup.okhttp.OkHttpClient;

        specialinvoke $r0.<com.squareup.okhttp.OkHttpClient: void <init>()>();

        return;
    }
public abstract void addLenient(com.squareup.okhttp.Headers$Builder, java.lang.String) { 
// no body
} 
public abstract void addLenient(com.squareup.okhttp.Headers$Builder, java.lang.String, java.lang.String) { 
// no body
} 
public abstract void apply(com.squareup.okhttp.ConnectionSpec, javax.net.ssl.SSLSocket, boolean) { 
// no body
} 
public abstract com.squareup.okhttp.Connection callEngineGetConnection(com.squareup.okhttp.Call) { 
// no body
} 
public abstract void callEngineReleaseConnection(com.squareup.okhttp.Call) throws java.io.IOException { 
// no body
} 
public abstract void callEnqueue(com.squareup.okhttp.Call, com.squareup.okhttp.Callback, boolean) { 
// no body
} 
public abstract boolean clearOwner(com.squareup.okhttp.Connection) { 
// no body
} 
public abstract void closeIfOwnedBy(com.squareup.okhttp.Connection, java.lang.Object) throws java.io.IOException { 
// no body
} 
public abstract void connectAndSetOwner(com.squareup.okhttp.OkHttpClient, com.squareup.okhttp.Connection, com.squareup.okhttp.internal.http.HttpEngine, com.squareup.okhttp.Request) throws com.squareup.okhttp.internal.http.RouteException { 
// no body
} 
public abstract okio.BufferedSink connectionRawSink(com.squareup.okhttp.Connection) { 
// no body
} 
public abstract okio.BufferedSource connectionRawSource(com.squareup.okhttp.Connection) { 
// no body
} 
public abstract void connectionSetOwner(com.squareup.okhttp.Connection, java.lang.Object) { 
// no body
} 
public abstract com.squareup.okhttp.internal.InternalCache internalCache(com.squareup.okhttp.OkHttpClient) { 
// no body
} 
public abstract boolean isReadable(com.squareup.okhttp.Connection) { 
// no body
} 
public abstract com.squareup.okhttp.internal.Network network(com.squareup.okhttp.OkHttpClient) { 
// no body
} 
public abstract com.squareup.okhttp.internal.http.Transport newTransport(com.squareup.okhttp.Connection, com.squareup.okhttp.internal.http.HttpEngine) throws java.io.IOException { 
// no body
} 
public abstract void recycle(com.squareup.okhttp.ConnectionPool, com.squareup.okhttp.Connection) { 
// no body
} 
public abstract int recycleCount(com.squareup.okhttp.Connection) { 
// no body
} 
public abstract com.squareup.okhttp.internal.RouteDatabase routeDatabase(com.squareup.okhttp.OkHttpClient) { 
// no body
} 
public abstract void setCache(com.squareup.okhttp.OkHttpClient, com.squareup.okhttp.internal.InternalCache) { 
// no body
} 
public abstract void setNetwork(com.squareup.okhttp.OkHttpClient, com.squareup.okhttp.internal.Network) { 
// no body
} 
public abstract void setOwner(com.squareup.okhttp.Connection, com.squareup.okhttp.internal.http.HttpEngine) { 
// no body
} 
public abstract void setProtocol(com.squareup.okhttp.Connection, com.squareup.okhttp.Protocol) { 
// no body
} 
