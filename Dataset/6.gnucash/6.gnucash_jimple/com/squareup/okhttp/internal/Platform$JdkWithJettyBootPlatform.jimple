com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform extends com.squareup.okhttp.internal.Platform
private final java.lang.Class clientProviderClass
private final java.lang.reflect.Method getMethod
private final java.lang.reflect.Method putMethod
private final java.lang.reflect.Method removeMethod
private final java.lang.Class serverProviderClass
    public void <init>(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.Class, java.lang.Class)
    {
        com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform r0;
        java.lang.reflect.Method $r1, $r2, $r3;
        java.lang.Class r4, r5;

        r0 := @this: com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: java.lang.Class;

        r5 := @parameter4: java.lang.Class;

        specialinvoke r0.<com.squareup.okhttp.internal.Platform: void <init>()>();

        r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.reflect.Method putMethod> = $r1;

        r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.reflect.Method getMethod> = $r2;

        r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.reflect.Method removeMethod> = $r3;

        r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.Class clientProviderClass> = r4;

        r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.Class serverProviderClass> = r5;

        return;
    }
    public void afterHandshake(javax.net.ssl.SSLSocket)
    {
        com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.IllegalAccessException r4;
        java.lang.AssertionError $r5;
        java.lang.reflect.InvocationTargetException r6;

        r0 := @this: com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.reflect.Method removeMethod>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

     label1:
        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        return;

     label3:
        r4 := @caughtexception;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        r6 := @caughtexception;

        goto label4;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }
    public void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List r3;
        java.util.ArrayList r4;
        int $i0, $i1;
        java.lang.Object $r5;
        com.squareup.okhttp.Protocol r6, $r7;
        java.lang.Class $r8;
        java.lang.ClassLoader $r9;
        java.lang.Class[] $r10;
        com.squareup.okhttp.internal.Platform$JettyNegoProvider $r11;
        java.lang.reflect.Method $r12;
        java.lang.Object[] $r13;
        java.lang.ReflectiveOperationException r14;
        java.lang.AssertionError $r15;

        r0 := @this: com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label01:
        if $i0 >= $i1 goto label04;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i0);

        r6 = (com.squareup.okhttp.Protocol) $r5;

        $r7 = <com.squareup.okhttp.Protocol: com.squareup.okhttp.Protocol HTTP_1_0>;

        if r6 != $r7 goto label03;

     label02:
        $i0 = $i0 + 1;

        goto label01;

     label03:
        $r2 = virtualinvoke r6.<com.squareup.okhttp.Protocol: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label02;

     label04:
        $r8 = class "Lcom/squareup/okhttp/internal/Platform;";

     label05:
        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label06:
        $r10 = newarray (java.lang.Class)[2];

        $r8 = r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.Class clientProviderClass>;

        $r10[0] = $r8;

        $r8 = r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.Class serverProviderClass>;

        $r10[1] = $r8;

        $r11 = new com.squareup.okhttp.internal.Platform$JettyNegoProvider;

     label07:
        specialinvoke $r11.<com.squareup.okhttp.internal.Platform$JettyNegoProvider: void <init>(java.util.List)>(r4);

        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r9, $r10, $r11);

     label08:
        $r12 = r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.reflect.Method putMethod>;

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = $r1;

        $r13[1] = $r5;

     label09:
        virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

     label10:
        return;

     label11:
        r14 := @caughtexception;

     label12:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(r14);

        throw $r15;

     label13:
        r14 := @caughtexception;

        goto label12;

        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label13;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label13;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label13;
        catch java.lang.IllegalAccessException from label05 to label06 with label11;
        catch java.lang.IllegalAccessException from label07 to label08 with label11;
        catch java.lang.IllegalAccessException from label09 to label10 with label11;
    }
    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.reflect.InvocationHandler $r5;
        com.squareup.okhttp.internal.Platform$JettyNegoProvider r6;
        boolean $z0;
        java.lang.String $r7;
        java.util.logging.Logger $r8;
        java.util.logging.Level $r9;
        java.lang.IllegalAccessException r10;
        java.lang.AssertionError $r11;
        java.lang.reflect.InvocationTargetException r12;

        r0 := @this: com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: java.lang.reflect.Method getMethod>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

     label01:
        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>($r4);

     label02:
        r6 = (com.squareup.okhttp.internal.Platform$JettyNegoProvider) $r5;

     label03:
        $z0 = staticinvoke <com.squareup.okhttp.internal.Platform$JettyNegoProvider: boolean access$000(com.squareup.okhttp.internal.Platform$JettyNegoProvider)>(r6);

     label04:
        if $z0 != 0 goto label09;

     label05:
        $r7 = staticinvoke <com.squareup.okhttp.internal.Platform$JettyNegoProvider: java.lang.String access$100(com.squareup.okhttp.internal.Platform$JettyNegoProvider)>(r6);

     label06:
        if $r7 != null goto label09;

        $r8 = <com.squareup.okhttp.internal.Internal: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level INFO>;

     label07:
        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r9, "ALPN callback dropped: SPDY and HTTP/2 are disabled. Is alpn-boot on the boot class path?");

     label08:
        return null;

     label09:
        $z0 = staticinvoke <com.squareup.okhttp.internal.Platform$JettyNegoProvider: boolean access$000(com.squareup.okhttp.internal.Platform$JettyNegoProvider)>(r6);

     label10:
        if $z0 != 0 goto label16;

     label11:
        $r7 = staticinvoke <com.squareup.okhttp.internal.Platform$JettyNegoProvider: java.lang.String access$100(com.squareup.okhttp.internal.Platform$JettyNegoProvider)>(r6);

     label12:
        return $r7;

     label13:
        r10 := @caughtexception;

     label14:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label15:
        r12 := @caughtexception;

        goto label14;

     label16:
        return null;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label15;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label15;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label15;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label15;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label15;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label15;
        catch java.lang.IllegalAccessException from label01 to label02 with label13;
        catch java.lang.IllegalAccessException from label03 to label04 with label13;
        catch java.lang.IllegalAccessException from label05 to label06 with label13;
        catch java.lang.IllegalAccessException from label07 to label08 with label13;
        catch java.lang.IllegalAccessException from label09 to label10 with label13;
        catch java.lang.IllegalAccessException from label11 to label12 with label13;
    }
