com.squareup.okhttp.internal.io.FileSystem$1 extends java.lang.Object implements com.squareup.okhttp.internal.io.FileSystem
    void <init>()
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public okio.Sink appendingSink(java.io.File) throws java.io.FileNotFoundException
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1, $r4;
        java.io.FileNotFoundException r2;
        okio.Sink $r3;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

     label1:
        $r3 = staticinvoke <okio.Okio: okio.Sink appendingSink(java.io.File)>($r1);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r4 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        $r3 = staticinvoke <okio.Okio: okio.Sink appendingSink(java.io.File)>($r1);

        return $r3;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }
    public void delete(java.io.File) throws java.io.IOException
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return;
    }
    public void deleteContents(java.io.File) throws java.io.IOException
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1;
        java.io.File[] $r2;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        if $r2 != null goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a readable directory: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i0 = lengthof $r2;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        $r1 = $r2[$i1];

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.squareup.okhttp.internal.io.FileSystem$1: void deleteContents(java.io.File)>($r1);

     label3:
        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label4;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        return;
    }
    public boolean exists(java.io.File) throws java.io.IOException
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        return $z0;
    }
    public void rename(java.io.File, java.io.File) throws java.io.IOException
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1, $r2;
        boolean $z0;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        virtualinvoke r0.<com.squareup.okhttp.internal.io.FileSystem$1: void delete(java.io.File)>($r2);

        $z0 = virtualinvoke $r1.<java.io.File: boolean renameTo(java.io.File)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to rename ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        return;
    }
    public okio.Sink sink(java.io.File) throws java.io.FileNotFoundException
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1, $r4;
        java.io.FileNotFoundException r2;
        okio.Sink $r3;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

     label1:
        $r3 = staticinvoke <okio.Okio: okio.Sink sink(java.io.File)>($r1);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r4 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        $r3 = staticinvoke <okio.Okio: okio.Sink sink(java.io.File)>($r1);

        return $r3;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }
    public long size(java.io.File)
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1;
        long $l0;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }
    public okio.Source source(java.io.File) throws java.io.FileNotFoundException
    {
        com.squareup.okhttp.internal.io.FileSystem$1 r0;
        java.io.File $r1;
        okio.Source $r2;

        r0 := @this: com.squareup.okhttp.internal.io.FileSystem$1;

        $r1 := @parameter0: java.io.File;

        $r2 = staticinvoke <okio.Okio: okio.Source source(java.io.File)>($r1);

        return $r2;
    }
