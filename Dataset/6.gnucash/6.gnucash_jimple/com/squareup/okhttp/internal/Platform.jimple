com.squareup.okhttp.internal.Platform extends java.lang.Object
private static final com.squareup.okhttp.internal.Platform PLATFORM
    static void <clinit>()
    {
        com.squareup.okhttp.internal.Platform $r0;

        $r0 = staticinvoke <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform findPlatform()>();

        <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform PLATFORM> = $r0;

        return;
    }
    public void <init>()
    {
        com.squareup.okhttp.internal.Platform r0;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static byte[] concatLengthPrefixed(java.util.List)
    {
        java.util.List r0;
        okio.Buffer r1;
        int i0, $i1, $i2;
        java.lang.Object $r2;
        com.squareup.okhttp.Protocol r3, $r4;
        java.lang.String $r5;
        byte[] $r6;

        r0 := @parameter0: java.util.List;

        r1 = new okio.Buffer;

        specialinvoke r1.<okio.Buffer: void <init>()>();

        i0 = 0;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (com.squareup.okhttp.Protocol) $r2;

        $r4 = <com.squareup.okhttp.Protocol: com.squareup.okhttp.Protocol HTTP_1_0>;

        if r3 != $r4 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r3.<com.squareup.okhttp.Protocol: java.lang.String toString()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeByte(int)>($i2);

        $r5 = virtualinvoke r3.<com.squareup.okhttp.Protocol: java.lang.String toString()>();

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r5);

        goto label2;

     label4:
        $r6 = virtualinvoke r1.<okio.Buffer: byte[] readByteArray()>();

        return $r6;
    }
    private static com.squareup.okhttp.internal.Platform findPlatform()
    {
        com.squareup.okhttp.internal.OptionalMethod r0, r1, r3, r4, r9;
        java.lang.ClassNotFoundException r2, $r12, $r19, $r22, $r25, $r26;
        java.lang.Class[] $r5;
        java.lang.Class $r6, $r15, $r16, $r17;
        java.lang.reflect.Method r7, r8, $r10;
        com.squareup.okhttp.internal.Platform$Android $r11;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;
        com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform $r18;
        com.squareup.okhttp.internal.Platform $r20;
        java.lang.NoSuchMethodException $r21, $r23, $r24;

     label01:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.android.org.conscrypt.OpenSSLSocketImpl");

     label02:
        r0 = new com.squareup.okhttp.internal.OptionalMethod;

        $r5 = newarray (java.lang.Class)[1];

        $r6 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r5[0] = $r6;

     label03:
        specialinvoke r0.<com.squareup.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r5);

     label04:
        r1 = new com.squareup.okhttp.internal.OptionalMethod;

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/lang/String;";

     label05:
        specialinvoke r1.<com.squareup.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r5);

     label06:
        r7 = null;

        r8 = null;

        r4 = null;

        r9 = null;

     label07:
        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.net.TrafficStats");

     label08:
        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/net/Socket;";

     label09:
        $r10 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("tagSocket", $r5);

     label10:
        r7 = $r10;

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/net/Socket;";

     label11:
        $r10 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("untagSocket", $r5);

     label12:
        r8 = $r10;

     label13:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.net.Network");

     label14:
        r3 = new com.squareup.okhttp.internal.OptionalMethod;

        $r5 = newarray (java.lang.Class)[0];

     label15:
        specialinvoke r3.<com.squareup.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(class "[B", "getAlpnSelectedProtocol", $r5);

     label16:
        r4 = new com.squareup.okhttp.internal.OptionalMethod;

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "[B";

     label17:
        specialinvoke r4.<com.squareup.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setAlpnProtocols", $r5);

     label18:
        r9 = r4;

        r4 = r3;

     label19:
        $r11 = new com.squareup.okhttp.internal.Platform$Android;

     label20:
        specialinvoke $r11.<com.squareup.okhttp.internal.Platform$Android: void <init>(com.squareup.okhttp.internal.OptionalMethod,com.squareup.okhttp.internal.OptionalMethod,java.lang.reflect.Method,java.lang.reflect.Method,com.squareup.okhttp.internal.OptionalMethod,com.squareup.okhttp.internal.OptionalMethod)>(r0, r1, r7, r8, r4, r9);

     label21:
        return $r11;

     label22:
        r2 := @caughtexception;

     label23:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");

     label24:
        goto label02;

     label25:
        $r12 := @caughtexception;

     label26:
        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

     label27:
        $r13 = new java.lang.StringBuilder;

     label28:
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$Provider");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r14);

     label29:
        $r13 = new java.lang.StringBuilder;

     label30:
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$ClientProvider");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r14);

     label31:
        $r13 = new java.lang.StringBuilder;

     label32:
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$ServerProvider");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r14);

     label33:
        $r5 = newarray (java.lang.Class)[2];

        $r5[0] = class "Ljavax/net/ssl/SSLSocket;";

        $r5[1] = $r15;

     label34:
        r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("put", $r5);

     label35:
        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljavax/net/ssl/SSLSocket;";

     label36:
        r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("get", $r5);

     label37:
        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljavax/net/ssl/SSLSocket;";

     label38:
        $r10 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("remove", $r5);

     label39:
        $r18 = new com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform;

     label40:
        specialinvoke $r18.<com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)>(r7, r8, $r10, $r16, $r17);

     label41:
        return $r18;

     label42:
        $r19 := @caughtexception;

     label43:
        $r20 = new com.squareup.okhttp.internal.Platform;

        specialinvoke $r20.<com.squareup.okhttp.internal.Platform: void <init>()>();

        return $r20;

     label44:
        $r21 := @caughtexception;

        goto label43;

     label45:
        $r22 := @caughtexception;

        goto label19;

     label46:
        $r23 := @caughtexception;

        goto label19;

     label47:
        $r24 := @caughtexception;

        r4 = r3;

        goto label19;

     label48:
        $r25 := @caughtexception;

        goto label19;

     label49:
        $r26 := @caughtexception;

        r4 = r3;

        goto label19;

        catch java.lang.ClassNotFoundException from label01 to label02 with label22;
        catch java.lang.ClassNotFoundException from label03 to label04 with label25;
        catch java.lang.ClassNotFoundException from label05 to label06 with label25;
        catch java.lang.ClassNotFoundException from label07 to label08 with label45;
        catch java.lang.ClassNotFoundException from label09 to label10 with label45;
        catch java.lang.ClassNotFoundException from label11 to label12 with label45;
        catch java.lang.NoSuchMethodException from label07 to label08 with label46;
        catch java.lang.NoSuchMethodException from label09 to label10 with label46;
        catch java.lang.NoSuchMethodException from label11 to label12 with label46;
        catch java.lang.ClassNotFoundException from label13 to label14 with label48;
        catch java.lang.ClassNotFoundException from label15 to label16 with label48;
        catch java.lang.NoSuchMethodException from label13 to label14 with label46;
        catch java.lang.NoSuchMethodException from label15 to label16 with label46;
        catch java.lang.ClassNotFoundException from label17 to label18 with label49;
        catch java.lang.NoSuchMethodException from label17 to label18 with label47;
        catch java.lang.ClassNotFoundException from label20 to label21 with label25;
        catch java.lang.ClassNotFoundException from label23 to label24 with label25;
        catch java.lang.ClassNotFoundException from label26 to label27 with label42;
        catch java.lang.ClassNotFoundException from label28 to label29 with label42;
        catch java.lang.ClassNotFoundException from label30 to label31 with label42;
        catch java.lang.ClassNotFoundException from label32 to label33 with label42;
        catch java.lang.ClassNotFoundException from label34 to label35 with label42;
        catch java.lang.ClassNotFoundException from label36 to label37 with label42;
        catch java.lang.ClassNotFoundException from label38 to label39 with label42;
        catch java.lang.ClassNotFoundException from label40 to label41 with label42;
        catch java.lang.NoSuchMethodException from label26 to label27 with label44;
        catch java.lang.NoSuchMethodException from label28 to label29 with label44;
        catch java.lang.NoSuchMethodException from label30 to label31 with label44;
        catch java.lang.NoSuchMethodException from label32 to label33 with label44;
        catch java.lang.NoSuchMethodException from label34 to label35 with label44;
        catch java.lang.NoSuchMethodException from label36 to label37 with label44;
        catch java.lang.NoSuchMethodException from label38 to label39 with label44;
        catch java.lang.NoSuchMethodException from label40 to label41 with label44;
    }
    public static com.squareup.okhttp.internal.Platform get()
    {
        com.squareup.okhttp.internal.Platform r0;

        r0 = <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform PLATFORM>;

        return r0;
    }
    public void afterHandshake(javax.net.ssl.SSLSocket)
    {
        com.squareup.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket $r1;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        return;
    }
    public void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        com.squareup.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List r3;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        return;
    }
    public void connectSocket(java.net.Socket, java.net.InetSocketAddress, int) throws java.io.IOException
    {
        com.squareup.okhttp.internal.Platform r0;
        java.net.Socket $r1;
        java.net.InetSocketAddress $r2;
        int $i0;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $i0 := @parameter2: int;

        virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0);

        return;
    }
    public java.lang.String getPrefix()
    {
        com.squareup.okhttp.internal.Platform r0;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        return "OkHttp";
    }
    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        com.squareup.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket $r1;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        return null;
    }
    public void logW(java.lang.String)
    {
        com.squareup.okhttp.internal.Platform r0;
        java.lang.String $r1;
        java.io.PrintStream $r2;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        $r1 := @parameter0: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;
    }
    public void tagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.squareup.okhttp.internal.Platform r0;
        java.net.Socket $r1;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        $r1 := @parameter0: java.net.Socket;

        return;
    }
    public void untagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.squareup.okhttp.internal.Platform r0;
        java.net.Socket $r1;

        r0 := @this: com.squareup.okhttp.internal.Platform;

        $r1 := @parameter0: java.net.Socket;

        return;
    }
