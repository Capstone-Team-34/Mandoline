com.squareup.okhttp.internal.http.RouteException extends java.lang.Exception
private static final java.lang.reflect.Method addSuppressedExceptionMethod
private java.io.IOException lastException
    static void <clinit>()
    {
        java.lang.Exception r0;
        java.lang.Class $r1;
        java.lang.reflect.Method $r2;
        java.lang.Class[] $r3;

        $r1 = class "Ljava/lang/Throwable;";

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/Throwable;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r3);

     label2:
        <com.squareup.okhttp.internal.http.RouteException: java.lang.reflect.Method addSuppressedExceptionMethod> = $r2;

        return;

     label3:
        r0 := @caughtexception;

        $r2 = null;

        goto label2;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void <init>(java.io.IOException)
    {
        com.squareup.okhttp.internal.http.RouteException r0;
        java.io.IOException $r1;

        r0 := @this: com.squareup.okhttp.internal.http.RouteException;

        $r1 := @parameter0: java.io.IOException;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.Throwable)>($r1);

        r0.<com.squareup.okhttp.internal.http.RouteException: java.io.IOException lastException> = $r1;

        return;
    }
    private void addSuppressedIfPossible(java.io.IOException, java.io.IOException)
    {
        com.squareup.okhttp.internal.http.RouteException r0;
        java.io.IOException $r1, $r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.IllegalAccessException $r5;
        java.lang.reflect.InvocationTargetException $r6;

        r0 := @this: com.squareup.okhttp.internal.http.RouteException;

        $r1 := @parameter0: java.io.IOException;

        $r2 := @parameter1: java.io.IOException;

        $r3 = <com.squareup.okhttp.internal.http.RouteException: java.lang.reflect.Method addSuppressedExceptionMethod>;

        if $r3 == null goto label5;

        $r3 = <com.squareup.okhttp.internal.http.RouteException: java.lang.reflect.Method addSuppressedExceptionMethod>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r2;

     label1:
        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

     label4:
        $r6 := @caughtexception;

     label5:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }
    public void addConnectException(java.io.IOException)
    {
        com.squareup.okhttp.internal.http.RouteException r0;
        java.io.IOException $r1, $r2;

        r0 := @this: com.squareup.okhttp.internal.http.RouteException;

        $r1 := @parameter0: java.io.IOException;

        $r2 = r0.<com.squareup.okhttp.internal.http.RouteException: java.io.IOException lastException>;

        specialinvoke r0.<com.squareup.okhttp.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2);

        r0.<com.squareup.okhttp.internal.http.RouteException: java.io.IOException lastException> = $r1;

        return;
    }
    public java.io.IOException getLastConnectException()
    {
        com.squareup.okhttp.internal.http.RouteException r0;
        java.io.IOException r1;

        r0 := @this: com.squareup.okhttp.internal.http.RouteException;

        r1 = r0.<com.squareup.okhttp.internal.http.RouteException: java.io.IOException lastException>;

        return r1;
    }
