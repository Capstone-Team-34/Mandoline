com.squareup.okhttp.internal.http.OkHeaders$1 extends java.lang.Object implements java.util.Comparator
    void <init>()
    {
        com.squareup.okhttp.internal.http.OkHeaders$1 r0;

        r0 := @this: com.squareup.okhttp.internal.http.OkHeaders$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.squareup.okhttp.internal.http.OkHeaders$1 r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.squareup.okhttp.internal.http.OkHeaders$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) $r1;

        $r4 = (java.lang.String) $r2;

        $i0 = virtualinvoke r0.<com.squareup.okhttp.internal.http.OkHeaders$1: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        return $i0;
    }
    public int compare(java.lang.String, java.lang.String)
    {
        com.squareup.okhttp.internal.http.OkHeaders$1 r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.util.Comparator $r3;

        r0 := @this: com.squareup.okhttp.internal.http.OkHeaders$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 != $r2 goto label1;

        return 0;

     label1:
        if $r1 != null goto label2;

        return -1;

     label2:
        if $r2 != null goto label3;

        return 1;

     label3:
        $r3 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $i0;
    }
