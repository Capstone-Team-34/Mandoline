com.squareup.okhttp.internal.http.HttpTransport extends java.lang.Object implements com.squareup.okhttp.internal.http.Transport
private final com.squareup.okhttp.internal.http.HttpConnection httpConnection
private final com.squareup.okhttp.internal.http.HttpEngine httpEngine
    public void <init>(com.squareup.okhttp.internal.http.HttpEngine, com.squareup.okhttp.internal.http.HttpConnection)
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.internal.http.HttpEngine $r1;
        com.squareup.okhttp.internal.http.HttpConnection $r2;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 := @parameter0: com.squareup.okhttp.internal.http.HttpEngine;

        $r2 := @parameter1: com.squareup.okhttp.internal.http.HttpConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpEngine httpEngine> = $r1;

        r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection> = $r2;

        return;
    }
    private okio.Source getTransferStream(com.squareup.okhttp.Response) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.Response $r1;
        boolean $z0;
        com.squareup.okhttp.internal.http.HttpConnection $r2;
        okio.Source $r3;
        java.lang.String $r4, $r5;
        com.squareup.okhttp.internal.http.HttpEngine $r6;
        long $l0;
        byte $b1;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 := @parameter0: com.squareup.okhttp.Response;

        $z0 = staticinvoke <com.squareup.okhttp.internal.http.HttpEngine: boolean hasBody(com.squareup.okhttp.Response)>($r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpConnection: okio.Source newFixedLengthSource(long)>(0L);

        return $r3;

     label1:
        $r4 = "chunked";

        $r5 = virtualinvoke $r1.<com.squareup.okhttp.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r6 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpEngine httpEngine>;

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpConnection: okio.Source newChunkedSource(com.squareup.okhttp.internal.http.HttpEngine)>($r6);

        return $r3;

     label2:
        $l0 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: long contentLength(com.squareup.okhttp.Response)>($r1);

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label3;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpConnection: okio.Source newFixedLengthSource(long)>($l0);

        return $r3;

     label3:
        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpConnection: okio.Source newUnknownLengthSource()>();

        return $r3;
    }
    public boolean canReuseConnection()
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        java.lang.String $r1, $r4;
        com.squareup.okhttp.internal.http.HttpEngine $r2;
        com.squareup.okhttp.Request $r3;
        boolean $z0;
        com.squareup.okhttp.Response $r5;
        com.squareup.okhttp.internal.http.HttpConnection $r6;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 = "close";

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpEngine httpEngine>;

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpEngine: com.squareup.okhttp.Request getRequest()>();

        $r4 = virtualinvoke $r3.<com.squareup.okhttp.Request: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = "close";

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpEngine httpEngine>;

        $r5 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpEngine: com.squareup.okhttp.Response getResponse()>();

        $r4 = virtualinvoke $r5.<com.squareup.okhttp.Response: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

        $r6 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $z0 = virtualinvoke $r6.<com.squareup.okhttp.internal.http.HttpConnection: boolean isClosed()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public okio.Sink createRequestBody(com.squareup.okhttp.Request, long) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.Request $r1;
        long $l0;
        java.lang.String $r2, $r3;
        boolean $z0;
        com.squareup.okhttp.internal.http.HttpConnection $r4;
        okio.Sink $r5;
        byte $b1;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 := @parameter0: com.squareup.okhttp.Request;

        $l0 := @parameter1: long;

        $r2 = "chunked";

        $r3 = virtualinvoke $r1.<com.squareup.okhttp.Request: java.lang.String header(java.lang.String)>("Transfer-Encoding");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r5 = virtualinvoke $r4.<com.squareup.okhttp.internal.http.HttpConnection: okio.Sink newChunkedSink()>();

        return $r5;

     label1:
        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label2;

        $r4 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r5 = virtualinvoke $r4.<com.squareup.okhttp.internal.http.HttpConnection: okio.Sink newFixedLengthSink(long)>($l0);

        return $r5;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot stream a request body without chunked encoding or a known content length!");

        throw $r6;
    }
    public void disconnect(com.squareup.okhttp.internal.http.HttpEngine) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.internal.http.HttpEngine $r1;
        com.squareup.okhttp.internal.http.HttpConnection $r2;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 := @parameter0: com.squareup.okhttp.internal.http.HttpEngine;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpConnection: void closeIfOwnedBy(java.lang.Object)>($r1);

        return;
    }
    public void finishRequest() throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.internal.http.HttpConnection $r1;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r1.<com.squareup.okhttp.internal.http.HttpConnection: void flush()>();

        return;
    }
    public com.squareup.okhttp.ResponseBody openResponseBody(com.squareup.okhttp.Response) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.Response $r1;
        com.squareup.okhttp.internal.http.RealResponseBody $r2;
        okio.Source $r3;
        com.squareup.okhttp.Headers $r4;
        okio.BufferedSource $r5;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 := @parameter0: com.squareup.okhttp.Response;

        $r3 = specialinvoke r0.<com.squareup.okhttp.internal.http.HttpTransport: okio.Source getTransferStream(com.squareup.okhttp.Response)>($r1);

        $r2 = new com.squareup.okhttp.internal.http.RealResponseBody;

        $r4 = virtualinvoke $r1.<com.squareup.okhttp.Response: com.squareup.okhttp.Headers headers()>();

        $r5 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r3);

        specialinvoke $r2.<com.squareup.okhttp.internal.http.RealResponseBody: void <init>(com.squareup.okhttp.Headers,okio.BufferedSource)>($r4, $r5);

        return $r2;
    }
    public com.squareup.okhttp.Response$Builder readResponseHeaders() throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.Response$Builder $r1;
        com.squareup.okhttp.internal.http.HttpConnection $r2;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r1 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpConnection: com.squareup.okhttp.Response$Builder readResponse()>();

        return $r1;
    }
    public void releaseConnectionOnIdle() throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        boolean $z0;
        com.squareup.okhttp.internal.http.HttpConnection $r1;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $z0 = virtualinvoke r0.<com.squareup.okhttp.internal.http.HttpTransport: boolean canReuseConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r1.<com.squareup.okhttp.internal.http.HttpConnection: void poolOnIdle()>();

        return;

     label1:
        $r1 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r1.<com.squareup.okhttp.internal.http.HttpConnection: void closeOnIdle()>();

        return;
    }
    public void writeRequestBody(com.squareup.okhttp.internal.http.RetryableSink) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.internal.http.RetryableSink $r1;
        com.squareup.okhttp.internal.http.HttpConnection $r2;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 := @parameter0: com.squareup.okhttp.internal.http.RetryableSink;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpConnection: void writeRequestBody(com.squareup.okhttp.internal.http.RetryableSink)>($r1);

        return;
    }
    public void writeRequestHeaders(com.squareup.okhttp.Request) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpTransport r0;
        com.squareup.okhttp.Request $r1;
        com.squareup.okhttp.internal.http.HttpEngine $r2;
        com.squareup.okhttp.Connection $r3;
        com.squareup.okhttp.Route $r4;
        java.net.Proxy $r5;
        java.net.Proxy$Type $r6;
        com.squareup.okhttp.Protocol $r7;
        java.lang.String $r8;
        com.squareup.okhttp.internal.http.HttpConnection $r9;
        com.squareup.okhttp.Headers $r10;

        r0 := @this: com.squareup.okhttp.internal.http.HttpTransport;

        $r1 := @parameter0: com.squareup.okhttp.Request;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpEngine httpEngine>;

        virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpEngine: void writingRequestHeaders()>();

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpEngine httpEngine>;

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpEngine: com.squareup.okhttp.Connection getConnection()>();

        $r4 = virtualinvoke $r3.<com.squareup.okhttp.Connection: com.squareup.okhttp.Route getRoute()>();

        $r5 = virtualinvoke $r4.<com.squareup.okhttp.Route: java.net.Proxy getProxy()>();

        $r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpEngine httpEngine>;

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpEngine: com.squareup.okhttp.Connection getConnection()>();

        $r7 = virtualinvoke $r3.<com.squareup.okhttp.Connection: com.squareup.okhttp.Protocol getProtocol()>();

        $r8 = staticinvoke <com.squareup.okhttp.internal.http.RequestLine: java.lang.String get(com.squareup.okhttp.Request,java.net.Proxy$Type,com.squareup.okhttp.Protocol)>($r1, $r6, $r7);

        $r9 = r0.<com.squareup.okhttp.internal.http.HttpTransport: com.squareup.okhttp.internal.http.HttpConnection httpConnection>;

        $r10 = virtualinvoke $r1.<com.squareup.okhttp.Request: com.squareup.okhttp.Headers headers()>();

        virtualinvoke $r9.<com.squareup.okhttp.internal.http.HttpConnection: void writeRequest(com.squareup.okhttp.Headers,java.lang.String)>($r10, $r8);

        return;
    }
