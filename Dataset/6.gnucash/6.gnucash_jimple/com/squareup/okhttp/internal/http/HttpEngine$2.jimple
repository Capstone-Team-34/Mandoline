com.squareup.okhttp.internal.http.HttpEngine$2 extends java.lang.Object implements okio.Source
boolean cacheRequestClosed
final com.squareup.okhttp.internal.http.HttpEngine this$0
final okio.BufferedSink val$cacheBody
final com.squareup.okhttp.internal.http.CacheRequest val$cacheRequest
final okio.BufferedSource val$source
    void <init>(com.squareup.okhttp.internal.http.HttpEngine, okio.BufferedSource, com.squareup.okhttp.internal.http.CacheRequest, okio.BufferedSink)
    {
        com.squareup.okhttp.internal.http.HttpEngine$2 r0;
        com.squareup.okhttp.internal.http.HttpEngine $r1;
        okio.BufferedSource $r2;
        com.squareup.okhttp.internal.http.CacheRequest $r3;
        okio.BufferedSink $r4;

        r0 := @this: com.squareup.okhttp.internal.http.HttpEngine$2;

        $r1 := @parameter0: com.squareup.okhttp.internal.http.HttpEngine;

        $r2 := @parameter1: okio.BufferedSource;

        $r3 := @parameter2: com.squareup.okhttp.internal.http.CacheRequest;

        $r4 := @parameter3: okio.BufferedSink;

        r0.<com.squareup.okhttp.internal.http.HttpEngine$2: com.squareup.okhttp.internal.http.HttpEngine this$0> = $r1;

        r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSource val$source> = $r2;

        r0.<com.squareup.okhttp.internal.http.HttpEngine$2: com.squareup.okhttp.internal.http.CacheRequest val$cacheRequest> = $r3;

        r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSink val$cacheBody> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void close() throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpEngine$2 r0;
        java.util.concurrent.TimeUnit $r1;
        boolean $z0;
        com.squareup.okhttp.internal.http.CacheRequest $r2;
        okio.BufferedSource $r3;

        r0 := @this: com.squareup.okhttp.internal.http.HttpEngine$2;

        $z0 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: boolean cacheRequestClosed>;

        if $z0 != 0 goto label1;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = staticinvoke <com.squareup.okhttp.internal.Util: boolean discard(okio.Source,int,java.util.concurrent.TimeUnit)>(r0, 100, $r1);

        if $z0 != 0 goto label1;

        r0.<com.squareup.okhttp.internal.http.HttpEngine$2: boolean cacheRequestClosed> = 1;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: com.squareup.okhttp.internal.http.CacheRequest val$cacheRequest>;

        interfaceinvoke $r2.<com.squareup.okhttp.internal.http.CacheRequest: void abort()>();

     label1:
        $r3 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSource val$source>;

        interfaceinvoke $r3.<okio.BufferedSource: void close()>();

        return;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.HttpEngine$2 r0;
        okio.Buffer $r1, $r6;
        long $l0, $l2;
        java.io.IOException r2;
        okio.BufferedSource $r3;
        byte $b1;
        boolean $z0;
        okio.BufferedSink $r4;
        com.squareup.okhttp.internal.http.CacheRequest $r5;

        r0 := @this: com.squareup.okhttp.internal.http.HttpEngine$2;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $r3 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSource val$source>;

     label1:
        $l0 = interfaceinvoke $r3.<okio.BufferedSource: long read(okio.Buffer,long)>($r1, $l0);

     label2:
        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label6;

        $z0 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: boolean cacheRequestClosed>;

        if $z0 != 0 goto label3;

        r0.<com.squareup.okhttp.internal.http.HttpEngine$2: boolean cacheRequestClosed> = 1;

        $r4 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSink val$cacheBody>;

        interfaceinvoke $r4.<okio.BufferedSink: void close()>();

     label3:
        return -1L;

     label4:
        r2 := @caughtexception;

        $z0 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: boolean cacheRequestClosed>;

        if $z0 != 0 goto label5;

        r0.<com.squareup.okhttp.internal.http.HttpEngine$2: boolean cacheRequestClosed> = 1;

        $r5 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: com.squareup.okhttp.internal.http.CacheRequest val$cacheRequest>;

        interfaceinvoke $r5.<com.squareup.okhttp.internal.http.CacheRequest: void abort()>();

     label5:
        throw r2;

     label6:
        $r4 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSink val$cacheBody>;

        $r6 = interfaceinvoke $r4.<okio.BufferedSink: okio.Buffer buffer()>();

        $l2 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l2 = $l2 - $l0;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer copyTo(okio.Buffer,long,long)>($r6, $l2, $l0);

        $r4 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSink val$cacheBody>;

        interfaceinvoke $r4.<okio.BufferedSink: okio.BufferedSink emitCompleteSegments()>();

        return $l0;

        catch java.io.IOException from label1 to label2 with label4;
    }
    public okio.Timeout timeout()
    {
        com.squareup.okhttp.internal.http.HttpEngine$2 r0;
        okio.Timeout $r1;
        okio.BufferedSource $r2;

        r0 := @this: com.squareup.okhttp.internal.http.HttpEngine$2;

        $r2 = r0.<com.squareup.okhttp.internal.http.HttpEngine$2: okio.BufferedSource val$source>;

        $r1 = interfaceinvoke $r2.<okio.BufferedSource: okio.Timeout timeout()>();

        return $r1;
    }
