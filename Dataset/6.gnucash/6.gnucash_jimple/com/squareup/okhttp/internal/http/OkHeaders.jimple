com.squareup.okhttp.internal.http.OkHeaders extends java.lang.Object
private static final java.util.Comparator FIELD_NAME_COMPARATOR
static final java.lang.String PREFIX
public static final java.lang.String RECEIVED_MILLIS
public static final java.lang.String SELECTED_PROTOCOL
public static final java.lang.String SENT_MILLIS
    static void <clinit>()
    {
        com.squareup.okhttp.internal.http.OkHeaders$1 $r0;
        com.squareup.okhttp.internal.Platform $r1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;

        $r0 = new com.squareup.okhttp.internal.http.OkHeaders$1;

        specialinvoke $r0.<com.squareup.okhttp.internal.http.OkHeaders$1: void <init>()>();

        <com.squareup.okhttp.internal.http.OkHeaders: java.util.Comparator FIELD_NAME_COMPARATOR> = $r0;

        $r1 = staticinvoke <com.squareup.okhttp.internal.Platform: com.squareup.okhttp.internal.Platform get()>();

        $r2 = virtualinvoke $r1.<com.squareup.okhttp.internal.Platform: java.lang.String getPrefix()>();

        <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String PREFIX> = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String PREFIX>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Sent-Millis");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String SENT_MILLIS> = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String PREFIX>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Received-Millis");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String RECEIVED_MILLIS> = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String PREFIX>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Selected-Protocol");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String SELECTED_PROTOCOL> = $r2;

        return;
    }
    private void <init>()
    {
        com.squareup.okhttp.internal.http.OkHeaders r0;

        r0 := @this: com.squareup.okhttp.internal.http.OkHeaders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void addCookies(com.squareup.okhttp.Request$Builder, java.util.Map)
    {
        com.squareup.okhttp.Request$Builder $r0;
        java.util.Map r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry r5;
        java.lang.String r6, $r7;
        java.util.List $r8;

        $r0 := @parameter0: com.squareup.okhttp.Request$Builder;

        r1 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r4;

        $r7 = "Cookie";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z0 != 0 goto label2;

        $r7 = "Cookie2";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z0 == 0 goto label1;

     label2:
        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.List) $r4;

        $z0 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.List) $r4;

        $r7 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: java.lang.String buildCookieHeader(java.util.List)>($r8);

        virtualinvoke $r0.<com.squareup.okhttp.Request$Builder: com.squareup.okhttp.Request$Builder addHeader(java.lang.String,java.lang.String)>(r6, $r7);

        goto label1;

     label3:
        return;
    }
    private static java.lang.String buildCookieHeader(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuilder r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r2;

        return $r3;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = 0;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

     label2:
        if $i0 >= $i1 goto label4;

        if $i0 <= 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

     label3:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public static long contentLength(com.squareup.okhttp.Headers)
    {
        com.squareup.okhttp.Headers $r0;
        java.lang.String $r1;
        long $l0;

        $r0 := @parameter0: com.squareup.okhttp.Headers;

        $r1 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String get(java.lang.String)>("Content-Length");

        $l0 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1);

        return $l0;
    }
    public static long contentLength(com.squareup.okhttp.Request)
    {
        com.squareup.okhttp.Request $r0;
        com.squareup.okhttp.Headers $r1;
        long $l0;

        $r0 := @parameter0: com.squareup.okhttp.Request;

        $r1 = virtualinvoke $r0.<com.squareup.okhttp.Request: com.squareup.okhttp.Headers headers()>();

        $l0 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: long contentLength(com.squareup.okhttp.Headers)>($r1);

        return $l0;
    }
    public static long contentLength(com.squareup.okhttp.Response)
    {
        com.squareup.okhttp.Response $r0;
        com.squareup.okhttp.Headers $r1;
        long $l0;

        $r0 := @parameter0: com.squareup.okhttp.Response;

        $r1 = virtualinvoke $r0.<com.squareup.okhttp.Response: com.squareup.okhttp.Headers headers()>();

        $l0 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: long contentLength(com.squareup.okhttp.Headers)>($r1);

        return $l0;
    }
    public static boolean hasVaryAll(com.squareup.okhttp.Headers)
    {
        com.squareup.okhttp.Headers $r0;
        java.util.Set $r1;
        boolean $z0;

        $r0 := @parameter0: com.squareup.okhttp.Headers;

        $r1 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: java.util.Set varyFields(com.squareup.okhttp.Headers)>($r0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("*");

        return $z0;
    }
    public static boolean hasVaryAll(com.squareup.okhttp.Response)
    {
        com.squareup.okhttp.Response $r0;
        com.squareup.okhttp.Headers $r1;
        boolean $z0;

        $r0 := @parameter0: com.squareup.okhttp.Response;

        $r1 = virtualinvoke $r0.<com.squareup.okhttp.Response: com.squareup.okhttp.Headers headers()>();

        $z0 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: boolean hasVaryAll(com.squareup.okhttp.Headers)>($r1);

        return $z0;
    }
    static boolean isEndToEnd(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = "Connection";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Keep-Alive";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Proxy-Authenticate";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Proxy-Authorization";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "TE";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Trailers";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Transfer-Encoding";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Upgrade";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static java.util.List parseChallenges(com.squareup.okhttp.Headers, java.lang.String)
    {
        com.squareup.okhttp.Headers $r0;
        java.lang.String $r1, $r3, $r4, $r5;
        java.util.ArrayList r2;
        int i0, $i1, i2, $i3;
        boolean $z0;
        com.squareup.okhttp.Challenge $r6;

        $r0 := @parameter0: com.squareup.okhttp.Headers;

        $r1 := @parameter1: java.lang.String;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        i0 = 0;

        $i1 = virtualinvoke $r0.<com.squareup.okhttp.Headers: int size()>();

     label1:
        if i0 >= $i1 goto label5;

        $r3 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String value(int)>(i0);

        i2 = 0;

     label4:
        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i2 >= $i3 goto label2;

        $i3 = staticinvoke <com.squareup.okhttp.internal.http.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>($r3, i2, " ");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i2, $i3);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        i2 = staticinvoke <com.squareup.okhttp.internal.http.HeaderParser: int skipWhitespace(java.lang.String,int)>($r3, $i3);

        $r5 = "realm=\"";

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i2, "realm=\"", 0, $i3);

        if $z0 == 0 goto label2;

        $r5 = "realm=\"";

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        i2 = i2 + $i3;

        $i3 = staticinvoke <com.squareup.okhttp.internal.http.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>($r3, i2, "\"");

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i2, $i3);

        i2 = $i3 + 1;

        i2 = staticinvoke <com.squareup.okhttp.internal.http.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>($r3, i2, ",");

        i2 = i2 + 1;

        i2 = staticinvoke <com.squareup.okhttp.internal.http.HeaderParser: int skipWhitespace(java.lang.String,int)>($r3, i2);

        $r6 = new com.squareup.okhttp.Challenge;

        specialinvoke $r6.<com.squareup.okhttp.Challenge: void <init>(java.lang.String,java.lang.String)>($r4, $r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label4;

     label5:
        return r2;
    }
    public static com.squareup.okhttp.Request processAuthHeader(com.squareup.okhttp.Authenticator, com.squareup.okhttp.Response, java.net.Proxy) throws java.io.IOException
    {
        com.squareup.okhttp.Authenticator $r0;
        com.squareup.okhttp.Response $r1;
        java.net.Proxy $r2;
        int $i0;
        com.squareup.okhttp.Request $r3;

        $r0 := @parameter0: com.squareup.okhttp.Authenticator;

        $r1 := @parameter1: com.squareup.okhttp.Response;

        $r2 := @parameter2: java.net.Proxy;

        $i0 = virtualinvoke $r1.<com.squareup.okhttp.Response: int code()>();

        if $i0 != 407 goto label1;

        $r3 = interfaceinvoke $r0.<com.squareup.okhttp.Authenticator: com.squareup.okhttp.Request authenticateProxy(java.net.Proxy,com.squareup.okhttp.Response)>($r2, $r1);

        return $r3;

     label1:
        $r3 = interfaceinvoke $r0.<com.squareup.okhttp.Authenticator: com.squareup.okhttp.Request authenticate(java.net.Proxy,com.squareup.okhttp.Response)>($r2, $r1);

        return $r3;
    }
    private static long stringToLong(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.NumberFormatException r1;
        long $l0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return -1L;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

        return -1L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public static java.util.Map toMultimap(com.squareup.okhttp.Headers, java.lang.String)
    {
        com.squareup.okhttp.Headers $r0;
        java.lang.String $r1, $r5, $r6;
        java.util.ArrayList r2;
        java.util.TreeMap r3;
        java.util.Comparator $r4;
        int i0, $i1;
        java.lang.Object $r7;
        java.util.List r8;
        java.util.Map $r9;

        $r0 := @parameter0: com.squareup.okhttp.Headers;

        $r1 := @parameter1: java.lang.String;

        r3 = new java.util.TreeMap;

        $r4 = <com.squareup.okhttp.internal.http.OkHeaders: java.util.Comparator FIELD_NAME_COMPARATOR>;

        specialinvoke r3.<java.util.TreeMap: void <init>(java.util.Comparator)>($r4);

        i0 = 0;

        $i1 = virtualinvoke $r0.<com.squareup.okhttp.Headers: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r5 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i0);

        $r6 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String value(int)>(i0);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.util.List) $r7;

        if r8 == null goto label2;

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r8);

     label2:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r8);

        i0 = i0 + 1;

        goto label1;

     label3:
        if $r1 == null goto label4;

        r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r8);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, r8);

     label4:
        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r3);

        return $r9;
    }
    public static java.util.Set varyFields(com.squareup.okhttp.Headers)
    {
        com.squareup.okhttp.Headers $r0;
        java.lang.String r1, $r3;
        int $i0, i1, $i2, $i3;
        java.util.Set $r2;
        boolean $z0;
        java.util.Comparator $r4;
        java.lang.String[] $r5;
        java.util.TreeSet $r6;

        $r0 := @parameter0: com.squareup.okhttp.Headers;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        i1 = 0;

        $i2 = virtualinvoke $r0.<com.squareup.okhttp.Headers: int size()>();

     label1:
        if i1 >= $i2 goto label6;

        r1 = "Vary";

        $r3 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i1);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r1 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String value(int)>(i1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r6 = new java.util.TreeSet;

        $r2 = $r6;

        $r4 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r6.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

     label4:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r5;

        $i3 = 0;

     label5:
        if $i3 >= $i0 goto label2;

        r1 = $r5[$i3];

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return $r2;
    }
    private static java.util.Set varyFields(com.squareup.okhttp.Response)
    {
        com.squareup.okhttp.Response $r0;
        com.squareup.okhttp.Headers $r1;
        java.util.Set $r2;

        $r0 := @parameter0: com.squareup.okhttp.Response;

        $r1 = virtualinvoke $r0.<com.squareup.okhttp.Response: com.squareup.okhttp.Headers headers()>();

        $r2 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: java.util.Set varyFields(com.squareup.okhttp.Headers)>($r1);

        return $r2;
    }
    public static com.squareup.okhttp.Headers varyHeaders(com.squareup.okhttp.Headers, com.squareup.okhttp.Headers)
    {
        com.squareup.okhttp.Headers $r0, $r1;
        com.squareup.okhttp.Headers$Builder r2;
        java.util.Set $r3;
        boolean $z0;
        int i0, $i1;
        java.lang.String $r4, $r5;

        $r0 := @parameter0: com.squareup.okhttp.Headers;

        $r1 := @parameter1: com.squareup.okhttp.Headers;

        $r3 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: java.util.Set varyFields(com.squareup.okhttp.Headers)>($r1);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r2 = new com.squareup.okhttp.Headers$Builder;

        specialinvoke r2.<com.squareup.okhttp.Headers$Builder: void <init>()>();

        $r0 = virtualinvoke r2.<com.squareup.okhttp.Headers$Builder: com.squareup.okhttp.Headers build()>();

        return $r0;

     label1:
        r2 = new com.squareup.okhttp.Headers$Builder;

        specialinvoke r2.<com.squareup.okhttp.Headers$Builder: void <init>()>();

        i0 = 0;

        $i1 = virtualinvoke $r0.<com.squareup.okhttp.Headers: int size()>();

     label2:
        if i0 >= $i1 goto label4;

        $r4 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String name(int)>(i0);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r0.<com.squareup.okhttp.Headers: java.lang.String value(int)>(i0);

        virtualinvoke r2.<com.squareup.okhttp.Headers$Builder: com.squareup.okhttp.Headers$Builder add(java.lang.String,java.lang.String)>($r4, $r5);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $r0 = virtualinvoke r2.<com.squareup.okhttp.Headers$Builder: com.squareup.okhttp.Headers build()>();

        return $r0;
    }
    public static com.squareup.okhttp.Headers varyHeaders(com.squareup.okhttp.Response)
    {
        com.squareup.okhttp.Response $r0, $r1;
        com.squareup.okhttp.Request $r2;
        com.squareup.okhttp.Headers $r3, $r4;

        $r0 := @parameter0: com.squareup.okhttp.Response;

        $r1 = virtualinvoke $r0.<com.squareup.okhttp.Response: com.squareup.okhttp.Response networkResponse()>();

        $r2 = virtualinvoke $r1.<com.squareup.okhttp.Response: com.squareup.okhttp.Request request()>();

        $r3 = virtualinvoke $r2.<com.squareup.okhttp.Request: com.squareup.okhttp.Headers headers()>();

        $r4 = virtualinvoke $r0.<com.squareup.okhttp.Response: com.squareup.okhttp.Headers headers()>();

        $r3 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: com.squareup.okhttp.Headers varyHeaders(com.squareup.okhttp.Headers,com.squareup.okhttp.Headers)>($r3, $r4);

        return $r3;
    }
    public static boolean varyMatches(com.squareup.okhttp.Response, com.squareup.okhttp.Headers, com.squareup.okhttp.Request)
    {
        com.squareup.okhttp.Response $r0;
        com.squareup.okhttp.Headers $r1;
        com.squareup.okhttp.Request $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String r6;
        java.util.List $r7, $r8;

        $r0 := @parameter0: com.squareup.okhttp.Response;

        $r1 := @parameter1: com.squareup.okhttp.Headers;

        $r2 := @parameter2: com.squareup.okhttp.Request;

        $r3 = staticinvoke <com.squareup.okhttp.internal.http.OkHeaders: java.util.Set varyFields(com.squareup.okhttp.Response)>($r0);

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r1.<com.squareup.okhttp.Headers: java.util.List values(java.lang.String)>(r6);

        $r8 = virtualinvoke $r2.<com.squareup.okhttp.Request: java.util.List headers(java.lang.String)>(r6);

        $z0 = staticinvoke <com.squareup.okhttp.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
