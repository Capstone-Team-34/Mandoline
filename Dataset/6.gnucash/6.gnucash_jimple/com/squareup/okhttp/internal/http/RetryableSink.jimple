com.squareup.okhttp.internal.http.RetryableSink extends java.lang.Object implements okio.Sink
private boolean closed
private final okio.Buffer content
private final int limit
    public void <init>()
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        specialinvoke r0.<com.squareup.okhttp.internal.http.RetryableSink: void <init>(int)>(-1);

        return;
    }
    public void <init>(int)
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;
        int $i0;
        okio.Buffer $r1;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new okio.Buffer;

        specialinvoke $r1.<okio.Buffer: void <init>()>();

        r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content> = $r1;

        r0.<com.squareup.okhttp.internal.http.RetryableSink: int limit> = $i0;

        return;
    }
    public void close() throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;
        boolean $z0;
        okio.Buffer $r1;
        long $l0, $l2;
        int $i1;
        byte $b3;
        java.net.ProtocolException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        $z0 = r0.<com.squareup.okhttp.internal.http.RetryableSink: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.squareup.okhttp.internal.http.RetryableSink: boolean closed> = 1;

        $r1 = r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content>;

        $l0 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $i1 = r0.<com.squareup.okhttp.internal.http.RetryableSink: int limit>;

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        if $b3 >= 0 goto label2;

        $r2 = new java.net.ProtocolException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("content-length promised ");

        $i1 = r0.<com.squareup.okhttp.internal.http.RetryableSink: int limit>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, but received ");

        $r1 = r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content>;

        $l0 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.net.ProtocolException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return;
    }
    public long contentLength() throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;
        long $l0;
        okio.Buffer $r1;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        $r1 = r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content>;

        $l0 = virtualinvoke $r1.<okio.Buffer: long size()>();

        return $l0;
    }
    public void flush() throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        return;
    }
    public okio.Timeout timeout()
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;
        okio.Timeout r1;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        r1 = <okio.Timeout: okio.Timeout NONE>;

        return r1;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;
        okio.Buffer $r1, $r3;
        long $l0, $l1, $l3;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        int $i2;
        byte $b4;
        java.net.ProtocolException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $z0 = r0.<com.squareup.okhttp.internal.http.RetryableSink: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        staticinvoke <com.squareup.okhttp.internal.Util: void checkOffsetAndCount(long,long,long)>($l1, 0L, $l0);

        $i2 = r0.<com.squareup.okhttp.internal.http.RetryableSink: int limit>;

        if $i2 == -1 goto label2;

        $r3 = r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content>;

        $l1 = virtualinvoke $r3.<okio.Buffer: long size()>();

        $i2 = r0.<com.squareup.okhttp.internal.http.RetryableSink: int limit>;

        $l3 = (long) $i2;

        $l3 = $l3 - $l0;

        $b4 = $l1 cmp $l3;

        if $b4 <= 0 goto label2;

        $r4 = new java.net.ProtocolException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exceeded content-length limit of ");

        $i2 = r0.<com.squareup.okhttp.internal.http.RetryableSink: int limit>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        $r3 = r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content>;

        virtualinvoke $r3.<okio.Buffer: void write(okio.Buffer,long)>($r1, $l0);

        return;
    }
    public void writeToSocket(okio.Sink) throws java.io.IOException
    {
        com.squareup.okhttp.internal.http.RetryableSink r0;
        okio.Sink $r1;
        okio.Buffer $r2, r3, $r4;
        long $l0;

        r0 := @this: com.squareup.okhttp.internal.http.RetryableSink;

        $r1 := @parameter0: okio.Sink;

        r3 = new okio.Buffer;

        specialinvoke r3.<okio.Buffer: void <init>()>();

        $r2 = r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content>;

        $r4 = r0.<com.squareup.okhttp.internal.http.RetryableSink: okio.Buffer content>;

        $l0 = virtualinvoke $r4.<okio.Buffer: long size()>();

        virtualinvoke $r2.<okio.Buffer: okio.Buffer copyTo(okio.Buffer,long,long)>(r3, 0L, $l0);

        $l0 = virtualinvoke r3.<okio.Buffer: long size()>();

        interfaceinvoke $r1.<okio.Sink: void write(okio.Buffer,long)>(r3, $l0);

        return;
    }
