com.squareup.okhttp.ConnectionSpec extends java.lang.Object
private static final com.squareup.okhttp.CipherSuite[] APPROVED_CIPHER_SUITES
public static final com.squareup.okhttp.ConnectionSpec CLEARTEXT
public static final com.squareup.okhttp.ConnectionSpec COMPATIBLE_TLS
public static final com.squareup.okhttp.ConnectionSpec MODERN_TLS
private final java.lang.String[] cipherSuites
final boolean supportsTlsExtensions
final boolean tls
private final java.lang.String[] tlsVersions
    static void <clinit>()
    {
        com.squareup.okhttp.CipherSuite[] $r0;
        com.squareup.okhttp.CipherSuite $r1;
        com.squareup.okhttp.ConnectionSpec$Builder $r2;
        com.squareup.okhttp.TlsVersion[] $r3;
        com.squareup.okhttp.TlsVersion $r4;
        com.squareup.okhttp.ConnectionSpec $r5;

        $r0 = newarray (com.squareup.okhttp.CipherSuite)[14];

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256>;

        $r0[0] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256>;

        $r0[1] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256>;

        $r0[2] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA>;

        $r0[3] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA>;

        $r0[4] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA>;

        $r0[5] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA>;

        $r0[6] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA>;

        $r0[7] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA>;

        $r0[8] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA>;

        $r0[9] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256>;

        $r0[10] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA>;

        $r0[11] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA>;

        $r0[12] = $r1;

        $r1 = <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA>;

        $r0[13] = $r1;

        <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.CipherSuite[] APPROVED_CIPHER_SUITES> = $r0;

        $r2 = new com.squareup.okhttp.ConnectionSpec$Builder;

        specialinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: void <init>(boolean)>(1);

        $r0 = <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.CipherSuite[] APPROVED_CIPHER_SUITES>;

        $r2 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder cipherSuites(com.squareup.okhttp.CipherSuite[])>($r0);

        $r3 = newarray (com.squareup.okhttp.TlsVersion)[3];

        $r4 = <com.squareup.okhttp.TlsVersion: com.squareup.okhttp.TlsVersion TLS_1_2>;

        $r3[0] = $r4;

        $r4 = <com.squareup.okhttp.TlsVersion: com.squareup.okhttp.TlsVersion TLS_1_1>;

        $r3[1] = $r4;

        $r4 = <com.squareup.okhttp.TlsVersion: com.squareup.okhttp.TlsVersion TLS_1_0>;

        $r3[2] = $r4;

        $r2 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder tlsVersions(com.squareup.okhttp.TlsVersion[])>($r3);

        $r2 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1);

        $r5 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec build()>();

        <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec MODERN_TLS> = $r5;

        $r2 = new com.squareup.okhttp.ConnectionSpec$Builder;

        $r5 = <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec MODERN_TLS>;

        specialinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: void <init>(com.squareup.okhttp.ConnectionSpec)>($r5);

        $r3 = newarray (com.squareup.okhttp.TlsVersion)[1];

        $r4 = <com.squareup.okhttp.TlsVersion: com.squareup.okhttp.TlsVersion TLS_1_0>;

        $r3[0] = $r4;

        $r2 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder tlsVersions(com.squareup.okhttp.TlsVersion[])>($r3);

        $r2 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1);

        $r5 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec build()>();

        <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec COMPATIBLE_TLS> = $r5;

        $r2 = new com.squareup.okhttp.ConnectionSpec$Builder;

        specialinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: void <init>(boolean)>(0);

        $r5 = virtualinvoke $r2.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec build()>();

        <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec CLEARTEXT> = $r5;

        return;
    }
    private void <init>(com.squareup.okhttp.ConnectionSpec$Builder)
    {
        com.squareup.okhttp.ConnectionSpec r0;
        com.squareup.okhttp.ConnectionSpec$Builder $r1;
        boolean $z0;
        java.lang.String[] $r2;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r1 := @parameter0: com.squareup.okhttp.ConnectionSpec$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <com.squareup.okhttp.ConnectionSpec$Builder: boolean access$000(com.squareup.okhttp.ConnectionSpec$Builder)>($r1);

        r0.<com.squareup.okhttp.ConnectionSpec: boolean tls> = $z0;

        $r2 = staticinvoke <com.squareup.okhttp.ConnectionSpec$Builder: java.lang.String[] access$100(com.squareup.okhttp.ConnectionSpec$Builder)>($r1);

        r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites> = $r2;

        $r2 = staticinvoke <com.squareup.okhttp.ConnectionSpec$Builder: java.lang.String[] access$200(com.squareup.okhttp.ConnectionSpec$Builder)>($r1);

        r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions> = $r2;

        $z0 = staticinvoke <com.squareup.okhttp.ConnectionSpec$Builder: boolean access$300(com.squareup.okhttp.ConnectionSpec$Builder)>($r1);

        r0.<com.squareup.okhttp.ConnectionSpec: boolean supportsTlsExtensions> = $z0;

        return;
    }
    void <init>(com.squareup.okhttp.ConnectionSpec$Builder, com.squareup.okhttp.ConnectionSpec$1)
    {
        com.squareup.okhttp.ConnectionSpec r0;
        com.squareup.okhttp.ConnectionSpec$Builder $r1;
        com.squareup.okhttp.ConnectionSpec$1 $r2;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r1 := @parameter0: com.squareup.okhttp.ConnectionSpec$Builder;

        $r2 := @parameter1: com.squareup.okhttp.ConnectionSpec$1;

        specialinvoke r0.<com.squareup.okhttp.ConnectionSpec: void <init>(com.squareup.okhttp.ConnectionSpec$Builder)>($r1);

        return;
    }
    static java.lang.String[] access$400(com.squareup.okhttp.ConnectionSpec)
    {
        com.squareup.okhttp.ConnectionSpec $r0;
        java.lang.String[] r1;

        $r0 := @parameter0: com.squareup.okhttp.ConnectionSpec;

        r1 = $r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        return r1;
    }
    static java.lang.String[] access$500(com.squareup.okhttp.ConnectionSpec)
    {
        com.squareup.okhttp.ConnectionSpec $r0;
        java.lang.String[] r1;

        $r0 := @parameter0: com.squareup.okhttp.ConnectionSpec;

        r1 = $r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        return r1;
    }
    private static boolean contains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1, r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 = lengthof r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r2 = r0[$i1];

        $z0 = staticinvoke <com.squareup.okhttp.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    private static boolean nonEmptyIntersection(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] $r0, $r1;
        java.lang.String r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.String[];

        if $r0 == null goto label4;

        if $r1 == null goto label4;

        $i0 = lengthof $r0;

        if $i0 == 0 goto label4;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i0 = lengthof $r0;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        r2 = $r0[$i1];

        $z0 = staticinvoke <com.squareup.okhttp.ConnectionSpec: boolean contains(java.lang.Object[],java.lang.Object)>($r1, r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return 0;
    }
    private com.squareup.okhttp.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket, boolean)
    {
        com.squareup.okhttp.ConnectionSpec r0;
        javax.net.ssl.SSLSocket $r1;
        boolean $z0;
        java.lang.String[] r2, $r3, $r6;
        java.lang.Object[] $r4;
        java.util.List $r5;
        int $i0;
        com.squareup.okhttp.ConnectionSpec$Builder $r7;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 := @parameter1: boolean;

        r2 = null;

        $r3 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r3 == null goto label1;

        r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r3 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r4 = staticinvoke <com.squareup.okhttp.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "Ljava/lang/String;", $r3, r2);

        r2 = (java.lang.String[]) $r4;

     label1:
        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("TLS_FALLBACK_SCSV");

        if $z0 == 0 goto label3;

        if r2 == null goto label4;

        $r3 = r2;

     label2:
        $i0 = lengthof $r3;

        $i0 = $i0 + 1;

        r2 = newarray (java.lang.String)[$i0];

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i0);

        $i0 = lengthof r2;

        $i0 = $i0 + -1;

        r2[$i0] = "TLS_FALLBACK_SCSV";

     label3:
        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        $r6 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r4 = staticinvoke <com.squareup.okhttp.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "Ljava/lang/String;", $r6, $r3);

        $r3 = (java.lang.String[]) $r4;

        $r7 = new com.squareup.okhttp.ConnectionSpec$Builder;

        specialinvoke $r7.<com.squareup.okhttp.ConnectionSpec$Builder: void <init>(com.squareup.okhttp.ConnectionSpec)>(r0);

        $r7 = virtualinvoke $r7.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder cipherSuites(java.lang.String[])>(r2);

        $r7 = virtualinvoke $r7.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3);

        r0 = virtualinvoke $r7.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec build()>();

        return r0;

     label4:
        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        goto label2;
    }
    void apply(javax.net.ssl.SSLSocket, boolean)
    {
        com.squareup.okhttp.ConnectionSpec r0;
        javax.net.ssl.SSLSocket $r1;
        boolean $z0;
        java.lang.String[] r2;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 := @parameter1: boolean;

        r0 = specialinvoke r0.<com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0);

        r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>(r2);

        r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        if r2 == null goto label1;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>(r2);

     label1:
        return;
    }
    public java.util.List cipherSuites()
    {
        com.squareup.okhttp.ConnectionSpec r0;
        com.squareup.okhttp.CipherSuite[] r1;
        java.lang.String[] $r2;
        int $i0, $i1;
        java.lang.String $r3;
        com.squareup.okhttp.CipherSuite $r4;
        java.util.List $r5;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $i0 = lengthof $r2;

        r1 = newarray (com.squareup.okhttp.CipherSuite)[$i0];

        $i0 = 0;

     label2:
        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r3 = $r2[$i0];

        $r4 = staticinvoke <com.squareup.okhttp.CipherSuite: com.squareup.okhttp.CipherSuite forJavaName(java.lang.String)>($r3);

        r1[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r5 = staticinvoke <com.squareup.okhttp.internal.Util: java.util.List immutableList(java.lang.Object[])>(r1);

        return $r5;
    }
    public boolean equals(java.lang.Object)
    {
        com.squareup.okhttp.ConnectionSpec r0, r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        java.lang.String[] $r3, $r4;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.squareup.okhttp.ConnectionSpec;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if $r1 != r0 goto label2;

        return 1;

     label2:
        r2 = (com.squareup.okhttp.ConnectionSpec) $r1;

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean tls>;

        $z1 = r2.<com.squareup.okhttp.ConnectionSpec: boolean tls>;

        if $z0 != $z1 goto label4;

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean tls>;

        if $z0 == 0 goto label3;

        $r3 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r4 = r2.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z0 == 0 goto label4;

        $r3 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r4 = r2.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z0 == 0 goto label4;

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean supportsTlsExtensions>;

        $z1 = r2.<com.squareup.okhttp.ConnectionSpec: boolean supportsTlsExtensions>;

        if $z0 != $z1 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }
    public int hashCode()
    {
        com.squareup.okhttp.ConnectionSpec r0;
        boolean $z0;
        java.lang.String[] $r1;
        int $i0, $i1;
        byte $b2;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean tls>;

        if $z0 == 0 goto label3;

        $r1 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 + 527;

        $i0 = $i0 * 31;

        $r1 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean supportsTlsExtensions>;

        if $z0 == 0 goto label2;

        $b2 = 0;

     label1:
        $i0 = $i0 + $b2;

        return $i0;

     label2:
        $b2 = 1;

        goto label1;

     label3:
        return 17;
    }
    public boolean isCompatible(javax.net.ssl.SSLSocket)
    {
        com.squareup.okhttp.ConnectionSpec r0;
        javax.net.ssl.SSLSocket $r1;
        boolean $z0;
        java.lang.String[] $r2, $r3;
        int $i0;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean tls>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        $r3 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $z0 = staticinvoke <com.squareup.okhttp.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2);

        if $z0 == 0 goto label3;

        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 != null goto label2;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label3;

        return 1;

     label2:
        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r3 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] cipherSuites>;

        $z0 = staticinvoke <com.squareup.okhttp.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2);

        return $z0;

     label3:
        return 0;
    }
    public boolean isTls()
    {
        com.squareup.okhttp.ConnectionSpec r0;
        boolean z0;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean tls>;

        return z0;
    }
    public boolean supportsTlsExtensions()
    {
        com.squareup.okhttp.ConnectionSpec r0;
        boolean z0;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean supportsTlsExtensions>;

        return z0;
    }
    public java.util.List tlsVersions()
    {
        com.squareup.okhttp.ConnectionSpec r0;
        com.squareup.okhttp.TlsVersion[] r1;
        java.lang.String[] $r2;
        int $i0, $i1;
        java.lang.String $r3;
        com.squareup.okhttp.TlsVersion $r4;
        java.util.List $r5;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $i0 = lengthof $r2;

        r1 = newarray (com.squareup.okhttp.TlsVersion)[$i0];

        $i0 = 0;

     label1:
        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<com.squareup.okhttp.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r3 = $r2[$i0];

        $r4 = staticinvoke <com.squareup.okhttp.TlsVersion: com.squareup.okhttp.TlsVersion forJavaName(java.lang.String)>($r3);

        r1[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r5 = staticinvoke <com.squareup.okhttp.internal.Util: java.util.List immutableList(java.lang.Object[])>(r1);

        return $r5;
    }
    public java.lang.String toString()
    {
        com.squareup.okhttp.ConnectionSpec r0;
        boolean $z0;
        java.util.List $r1;
        java.lang.String r2;
        java.lang.StringBuilder $r3;

        r0 := @this: com.squareup.okhttp.ConnectionSpec;

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean tls>;

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke r0.<com.squareup.okhttp.ConnectionSpec: java.util.List cipherSuites()>();

        if $r1 != null goto label2;

        r2 = "[use default]";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConnectionSpec(cipherSuites=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", tlsVersions=");

        $r1 = virtualinvoke r0.<com.squareup.okhttp.ConnectionSpec: java.util.List tlsVersions()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", supportsTlsExtensions=");

        $z0 = r0.<com.squareup.okhttp.ConnectionSpec: boolean supportsTlsExtensions>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return r2;

     label2:
        r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        goto label1;

     label3:
        return "ConnectionSpec()";
    }
