com.squareup.okhttp.OkHttpClient$1 extends com.squareup.okhttp.internal.Internal
    void <init>()
    {
        com.squareup.okhttp.OkHttpClient$1 r0;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        specialinvoke r0.<com.squareup.okhttp.internal.Internal: void <init>()>();

        return;
    }
    public void addLenient(com.squareup.okhttp.Headers$Builder, java.lang.String)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Headers$Builder $r1;
        java.lang.String $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Headers$Builder;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke $r1.<com.squareup.okhttp.Headers$Builder: com.squareup.okhttp.Headers$Builder addLenient(java.lang.String)>($r2);

        return;
    }
    public void addLenient(com.squareup.okhttp.Headers$Builder, java.lang.String, java.lang.String)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Headers$Builder $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Headers$Builder;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        virtualinvoke $r1.<com.squareup.okhttp.Headers$Builder: com.squareup.okhttp.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r3);

        return;
    }
    public void apply(com.squareup.okhttp.ConnectionSpec, javax.net.ssl.SSLSocket, boolean)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.ConnectionSpec $r1;
        javax.net.ssl.SSLSocket $r2;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.ConnectionSpec;

        $r2 := @parameter1: javax.net.ssl.SSLSocket;

        $z0 := @parameter2: boolean;

        virtualinvoke $r1.<com.squareup.okhttp.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0);

        return;
    }
    public com.squareup.okhttp.Connection callEngineGetConnection(com.squareup.okhttp.Call)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Call $r1;
        com.squareup.okhttp.Connection $r2;
        com.squareup.okhttp.internal.http.HttpEngine $r3;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Call;

        $r3 = $r1.<com.squareup.okhttp.Call: com.squareup.okhttp.internal.http.HttpEngine engine>;

        $r2 = virtualinvoke $r3.<com.squareup.okhttp.internal.http.HttpEngine: com.squareup.okhttp.Connection getConnection()>();

        return $r2;
    }
    public void callEngineReleaseConnection(com.squareup.okhttp.Call) throws java.io.IOException
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Call $r1;
        com.squareup.okhttp.internal.http.HttpEngine $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Call;

        $r2 = $r1.<com.squareup.okhttp.Call: com.squareup.okhttp.internal.http.HttpEngine engine>;

        virtualinvoke $r2.<com.squareup.okhttp.internal.http.HttpEngine: void releaseConnection()>();

        return;
    }
    public void callEnqueue(com.squareup.okhttp.Call, com.squareup.okhttp.Callback, boolean)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Call $r1;
        com.squareup.okhttp.Callback $r2;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Call;

        $r2 := @parameter1: com.squareup.okhttp.Callback;

        $z0 := @parameter2: boolean;

        virtualinvoke $r1.<com.squareup.okhttp.Call: void enqueue(com.squareup.okhttp.Callback,boolean)>($r2, $z0);

        return;
    }
    public boolean clearOwner(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $z0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: boolean clearOwner()>();

        return $z0;
    }
    public void closeIfOwnedBy(com.squareup.okhttp.Connection, java.lang.Object) throws java.io.IOException
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        java.lang.Object $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r2 := @parameter1: java.lang.Object;

        virtualinvoke $r1.<com.squareup.okhttp.Connection: void closeIfOwnedBy(java.lang.Object)>($r2);

        return;
    }
    public void connectAndSetOwner(com.squareup.okhttp.OkHttpClient, com.squareup.okhttp.Connection, com.squareup.okhttp.internal.http.HttpEngine, com.squareup.okhttp.Request) throws com.squareup.okhttp.internal.http.RouteException
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.OkHttpClient $r1;
        com.squareup.okhttp.Connection $r2;
        com.squareup.okhttp.internal.http.HttpEngine $r3;
        com.squareup.okhttp.Request $r4;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.OkHttpClient;

        $r2 := @parameter1: com.squareup.okhttp.Connection;

        $r3 := @parameter2: com.squareup.okhttp.internal.http.HttpEngine;

        $r4 := @parameter3: com.squareup.okhttp.Request;

        virtualinvoke $r2.<com.squareup.okhttp.Connection: void connectAndSetOwner(com.squareup.okhttp.OkHttpClient,java.lang.Object,com.squareup.okhttp.Request)>($r1, $r3, $r4);

        return;
    }
    public okio.BufferedSink connectionRawSink(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        okio.BufferedSink $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r2 = virtualinvoke $r1.<com.squareup.okhttp.Connection: okio.BufferedSink rawSink()>();

        return $r2;
    }
    public okio.BufferedSource connectionRawSource(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        okio.BufferedSource $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r2 = virtualinvoke $r1.<com.squareup.okhttp.Connection: okio.BufferedSource rawSource()>();

        return $r2;
    }
    public void connectionSetOwner(com.squareup.okhttp.Connection, java.lang.Object)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        java.lang.Object $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r2 := @parameter1: java.lang.Object;

        virtualinvoke $r1.<com.squareup.okhttp.Connection: void setOwner(java.lang.Object)>($r2);

        return;
    }
    public com.squareup.okhttp.internal.InternalCache internalCache(com.squareup.okhttp.OkHttpClient)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.OkHttpClient $r1;
        com.squareup.okhttp.internal.InternalCache $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.OkHttpClient;

        $r2 = virtualinvoke $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.internal.InternalCache internalCache()>();

        return $r2;
    }
    public boolean isReadable(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        boolean $z0;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $z0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: boolean isReadable()>();

        return $z0;
    }
    public com.squareup.okhttp.internal.Network network(com.squareup.okhttp.OkHttpClient)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.OkHttpClient $r1;
        com.squareup.okhttp.internal.Network $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.OkHttpClient;

        $r2 = staticinvoke <com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.internal.Network access$000(com.squareup.okhttp.OkHttpClient)>($r1);

        return $r2;
    }
    public com.squareup.okhttp.internal.http.Transport newTransport(com.squareup.okhttp.Connection, com.squareup.okhttp.internal.http.HttpEngine) throws java.io.IOException
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        com.squareup.okhttp.internal.http.HttpEngine $r2;
        com.squareup.okhttp.internal.http.Transport $r3;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r2 := @parameter1: com.squareup.okhttp.internal.http.HttpEngine;

        $r3 = virtualinvoke $r1.<com.squareup.okhttp.Connection: com.squareup.okhttp.internal.http.Transport newTransport(com.squareup.okhttp.internal.http.HttpEngine)>($r2);

        return $r3;
    }
    public void recycle(com.squareup.okhttp.ConnectionPool, com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.ConnectionPool $r1;
        com.squareup.okhttp.Connection $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.ConnectionPool;

        $r2 := @parameter1: com.squareup.okhttp.Connection;

        virtualinvoke $r1.<com.squareup.okhttp.ConnectionPool: void recycle(com.squareup.okhttp.Connection)>($r2);

        return;
    }
    public int recycleCount(com.squareup.okhttp.Connection)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        int $i0;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $i0 = virtualinvoke $r1.<com.squareup.okhttp.Connection: int recycleCount()>();

        return $i0;
    }
    public com.squareup.okhttp.internal.RouteDatabase routeDatabase(com.squareup.okhttp.OkHttpClient)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.OkHttpClient $r1;
        com.squareup.okhttp.internal.RouteDatabase $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.OkHttpClient;

        $r2 = virtualinvoke $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.internal.RouteDatabase routeDatabase()>();

        return $r2;
    }
    public void setCache(com.squareup.okhttp.OkHttpClient, com.squareup.okhttp.internal.InternalCache)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.OkHttpClient $r1;
        com.squareup.okhttp.internal.InternalCache $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.OkHttpClient;

        $r2 := @parameter1: com.squareup.okhttp.internal.InternalCache;

        virtualinvoke $r1.<com.squareup.okhttp.OkHttpClient: void setInternalCache(com.squareup.okhttp.internal.InternalCache)>($r2);

        return;
    }
    public void setNetwork(com.squareup.okhttp.OkHttpClient, com.squareup.okhttp.internal.Network)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.OkHttpClient $r1;
        com.squareup.okhttp.internal.Network $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.OkHttpClient;

        $r2 := @parameter1: com.squareup.okhttp.internal.Network;

        staticinvoke <com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.internal.Network access$002(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.internal.Network)>($r1, $r2);

        return;
    }
    public void setOwner(com.squareup.okhttp.Connection, com.squareup.okhttp.internal.http.HttpEngine)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        com.squareup.okhttp.internal.http.HttpEngine $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r2 := @parameter1: com.squareup.okhttp.internal.http.HttpEngine;

        virtualinvoke $r1.<com.squareup.okhttp.Connection: void setOwner(java.lang.Object)>($r2);

        return;
    }
    public void setProtocol(com.squareup.okhttp.Connection, com.squareup.okhttp.Protocol)
    {
        com.squareup.okhttp.OkHttpClient$1 r0;
        com.squareup.okhttp.Connection $r1;
        com.squareup.okhttp.Protocol $r2;

        r0 := @this: com.squareup.okhttp.OkHttpClient$1;

        $r1 := @parameter0: com.squareup.okhttp.Connection;

        $r2 := @parameter1: com.squareup.okhttp.Protocol;

        virtualinvoke $r1.<com.squareup.okhttp.Connection: void setProtocol(com.squareup.okhttp.Protocol)>($r2);

        return;
    }
