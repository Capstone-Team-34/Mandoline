com.squareup.timessquare.CalendarPickerView extends android.widget.ListView
private final com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter
private com.squareup.timessquare.CalendarPickerView$CellClickInterceptor cellClickInterceptor
private final java.util.List cells
private com.squareup.timessquare.CalendarPickerView$DateSelectableFilter dateConfiguredListener
private com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener dateListener
private android.graphics.Typeface dateTypeface
private int dayBackgroundResId
private int dayTextColorResId
private com.squareup.timessquare.DayViewAdapter dayViewAdapter
private java.util.List decorators
private boolean displayHeader
private boolean displayOnly
private int dividerColor
private java.text.DateFormat fullDateFormat
private int headerTextColor
final java.util.List highlightedCals
final java.util.List highlightedCells
private com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener invalidDateListener
final com.squareup.timessquare.MonthView$Listener listener
private java.util.Locale locale
private java.util.Calendar maxCal
private java.util.Calendar minCal
private java.util.Calendar monthCounter
private java.text.DateFormat monthNameFormat
final java.util.List months
final java.util.List selectedCals
final java.util.List selectedCells
com.squareup.timessquare.CalendarPickerView$SelectionMode selectionMode
private int titleTextColor
private android.graphics.Typeface titleTypeface
java.util.Calendar today
private java.text.DateFormat weekdayNameFormat
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        java.util.ArrayList $r3;
        com.squareup.timessquare.CalendarPickerView$CellClickedListener $r4;
        com.squareup.timessquare.CalendarPickerView$DefaultOnInvalidDateSelectedListener $r5;
        com.squareup.timessquare.DefaultDayViewAdapter $r6;
        android.content.res.Resources $r7;
        int[] $r8;
        android.content.res.TypedArray $r9;
        int $i0, $i1, $i2;
        boolean $z0;
        com.squareup.timessquare.CalendarPickerView$MonthAdapter $r10;
        java.util.Locale $r11;
        java.util.Calendar $r12;
        java.text.SimpleDateFormat $r13;
        java.lang.String $r14;
        java.text.DateFormat $r15;
        java.util.Date $r16, $r17;
        com.squareup.timessquare.CalendarPickerView$FluentInitializer $r18;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.List cells> = $r3;

        $r4 = new com.squareup.timessquare.CalendarPickerView$CellClickedListener;

        specialinvoke $r4.<com.squareup.timessquare.CalendarPickerView$CellClickedListener: void <init>(com.squareup.timessquare.CalendarPickerView,com.squareup.timessquare.CalendarPickerView$1)>(r0, null);

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.MonthView$Listener listener> = $r4;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCells> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCals> = $r3;

        $r5 = new com.squareup.timessquare.CalendarPickerView$DefaultOnInvalidDateSelectedListener;

        specialinvoke $r5.<com.squareup.timessquare.CalendarPickerView$DefaultOnInvalidDateSelectedListener: void <init>(com.squareup.timessquare.CalendarPickerView,com.squareup.timessquare.CalendarPickerView$1)>(r0, null);

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener invalidDateListener> = $r5;

        $r6 = new com.squareup.timessquare.DefaultDayViewAdapter;

        specialinvoke $r6.<com.squareup.timessquare.DefaultDayViewAdapter: void <init>()>();

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.DayViewAdapter dayViewAdapter> = $r6;

        $r7 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = <com.squareup.timessquare.R$styleable: int[] CalendarPickerView>;

        $r9 = virtualinvoke $r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>($r2, $r8);

        $i0 = <com.squareup.timessquare.R$styleable: int CalendarPickerView_android_background>;

        $i1 = <com.squareup.timessquare.R$color: int calendar_bg>;

        $i1 = virtualinvoke $r7.<android.content.res.Resources: int getColor(int)>($i1);

        $i0 = virtualinvoke $r9.<android.content.res.TypedArray: int getColor(int,int)>($i0, $i1);

        $i1 = <com.squareup.timessquare.R$styleable: int CalendarPickerView_tsquare_dividerColor>;

        $i2 = <com.squareup.timessquare.R$color: int calendar_divider>;

        $i2 = virtualinvoke $r7.<android.content.res.Resources: int getColor(int)>($i2);

        $i1 = virtualinvoke $r9.<android.content.res.TypedArray: int getColor(int,int)>($i1, $i2);

        r0.<com.squareup.timessquare.CalendarPickerView: int dividerColor> = $i1;

        $i1 = <com.squareup.timessquare.R$styleable: int CalendarPickerView_tsquare_dayBackground>;

        $i2 = <com.squareup.timessquare.R$drawable: int calendar_bg_selector>;

        $i1 = virtualinvoke $r9.<android.content.res.TypedArray: int getResourceId(int,int)>($i1, $i2);

        r0.<com.squareup.timessquare.CalendarPickerView: int dayBackgroundResId> = $i1;

        $i1 = <com.squareup.timessquare.R$styleable: int CalendarPickerView_tsquare_dayTextColor>;

        $i2 = <com.squareup.timessquare.R$color: int calendar_text_selector>;

        $i1 = virtualinvoke $r9.<android.content.res.TypedArray: int getResourceId(int,int)>($i1, $i2);

        r0.<com.squareup.timessquare.CalendarPickerView: int dayTextColorResId> = $i1;

        $i1 = <com.squareup.timessquare.R$styleable: int CalendarPickerView_tsquare_titleTextColor>;

        $i2 = <com.squareup.timessquare.R$color: int calendar_text_active>;

        $i2 = virtualinvoke $r7.<android.content.res.Resources: int getColor(int)>($i2);

        $i1 = virtualinvoke $r9.<android.content.res.TypedArray: int getColor(int,int)>($i1, $i2);

        r0.<com.squareup.timessquare.CalendarPickerView: int titleTextColor> = $i1;

        $i1 = <com.squareup.timessquare.R$styleable: int CalendarPickerView_tsquare_displayHeader>;

        $z0 = virtualinvoke $r9.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i1, 1);

        r0.<com.squareup.timessquare.CalendarPickerView: boolean displayHeader> = $z0;

        $i1 = <com.squareup.timessquare.R$styleable: int CalendarPickerView_tsquare_headerTextColor>;

        $i2 = <com.squareup.timessquare.R$color: int calendar_text_active>;

        $i2 = virtualinvoke $r7.<android.content.res.Resources: int getColor(int)>($i2);

        $i1 = virtualinvoke $r9.<android.content.res.TypedArray: int getColor(int,int)>($i1, $i2);

        r0.<com.squareup.timessquare.CalendarPickerView: int headerTextColor> = $i1;

        virtualinvoke $r9.<android.content.res.TypedArray: void recycle()>();

        $r10 = new com.squareup.timessquare.CalendarPickerView$MonthAdapter;

        specialinvoke $r10.<com.squareup.timessquare.CalendarPickerView$MonthAdapter: void <init>(com.squareup.timessquare.CalendarPickerView,com.squareup.timessquare.CalendarPickerView$1)>(r0, null);

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter> = $r10;

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void setDivider(android.graphics.drawable.Drawable)>(null);

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void setDividerHeight(int)>(0);

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void setBackgroundColor(int)>($i0);

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void setCacheColorHint(int)>($i0);

        $r11 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale> = $r11;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r11);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar today> = $r12;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r11);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal> = $r12;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r11);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal> = $r12;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r11);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter> = $r12;

        $r13 = new java.text.SimpleDateFormat;

        $i0 = <com.squareup.timessquare.R$string: int month_name_format>;

        $r14 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>($i0);

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        specialinvoke $r13.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r14, $r11);

        r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat monthNameFormat> = $r13;

        $r13 = new java.text.SimpleDateFormat;

        $i0 = <com.squareup.timessquare.R$string: int day_name_format>;

        $r14 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>($i0);

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        specialinvoke $r13.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r14, $r11);

        r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat weekdayNameFormat> = $r13;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r15 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(2, $r11);

        r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat fullDateFormat> = $r15;

        $z0 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: boolean isInEditMode()>();

        if $z0 == 0 goto label1;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r11);

        virtualinvoke $r12.<java.util.Calendar: void add(int,int)>(1, 1);

        $r16 = new java.util.Date;

        specialinvoke $r16.<java.util.Date: void <init>()>();

        $r17 = virtualinvoke $r12.<java.util.Calendar: java.util.Date getTime()>();

        $r18 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$FluentInitializer init(java.util.Date,java.util.Date)>($r16, $r17);

        $r16 = new java.util.Date;

        specialinvoke $r16.<java.util.Date: void <init>()>();

        virtualinvoke $r18.<com.squareup.timessquare.CalendarPickerView$FluentInitializer: com.squareup.timessquare.CalendarPickerView$FluentInitializer withSelectedDate(java.util.Date)>($r16);

     label1:
        return;
    }
    static java.util.Calendar access$1000(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.util.Calendar r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        return r1;
    }
    static boolean access$1100(com.squareup.timessquare.CalendarPickerView, java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.util.Date $r1;
        boolean $z0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter1: java.util.Date;

        $z0 = specialinvoke $r0.<com.squareup.timessquare.CalendarPickerView: boolean isDateSelectable(java.util.Date)>($r1);

        return $z0;
    }
    static com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener access$1200(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener invalidDateListener>;

        return r1;
    }
    static boolean access$1300(com.squareup.timessquare.CalendarPickerView, java.util.Date, com.squareup.timessquare.MonthCellDescriptor)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.util.Date $r1;
        com.squareup.timessquare.MonthCellDescriptor $r2;
        boolean $z0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter1: java.util.Date;

        $r2 := @parameter2: com.squareup.timessquare.MonthCellDescriptor;

        $z0 = specialinvoke $r0.<com.squareup.timessquare.CalendarPickerView: boolean doSelectDate(java.util.Date,com.squareup.timessquare.MonthCellDescriptor)>($r1, $r2);

        return $z0;
    }
    static com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener access$1400(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener dateListener>;

        return r1;
    }
    static com.squareup.timessquare.DayViewAdapter access$1500(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        com.squareup.timessquare.DayViewAdapter r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.DayViewAdapter dayViewAdapter>;

        return r1;
    }
    static int access$1600(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        int i0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        i0 = $r0.<com.squareup.timessquare.CalendarPickerView: int dividerColor>;

        return i0;
    }
    static int access$1700(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        int i0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        i0 = $r0.<com.squareup.timessquare.CalendarPickerView: int dayBackgroundResId>;

        return i0;
    }
    static int access$1800(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        int i0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        i0 = $r0.<com.squareup.timessquare.CalendarPickerView: int dayTextColorResId>;

        return i0;
    }
    static int access$1900(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        int i0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        i0 = $r0.<com.squareup.timessquare.CalendarPickerView: int titleTextColor>;

        return i0;
    }
    static boolean access$2000(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        boolean z0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        z0 = $r0.<com.squareup.timessquare.CalendarPickerView: boolean displayHeader>;

        return z0;
    }
    static int access$2100(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        int i0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        i0 = $r0.<com.squareup.timessquare.CalendarPickerView: int headerTextColor>;

        return i0;
    }
    static java.util.List access$2200(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.util.List r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: java.util.List decorators>;

        return r1;
    }
    static java.util.List access$2300(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.util.List r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: java.util.List cells>;

        return r1;
    }
    static android.graphics.Typeface access$2400(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        android.graphics.Typeface r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: android.graphics.Typeface titleTypeface>;

        return r1;
    }
    static android.graphics.Typeface access$2500(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        android.graphics.Typeface r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: android.graphics.Typeface dateTypeface>;

        return r1;
    }
    static java.text.DateFormat access$2600(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.text.DateFormat r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat fullDateFormat>;

        return r1;
    }
    static void access$300(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        specialinvoke $r0.<com.squareup.timessquare.CalendarPickerView: void validateAndUpdate()>();

        return;
    }
    static void access$400(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        specialinvoke $r0.<com.squareup.timessquare.CalendarPickerView: void scrollToSelectedDates()>();

        return;
    }
    static java.util.Locale access$500(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.util.Locale r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        return r1;
    }
    static java.text.DateFormat access$600(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.text.DateFormat r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat weekdayNameFormat>;

        return r1;
    }
    static java.text.DateFormat access$602(com.squareup.timessquare.CalendarPickerView, java.text.DateFormat)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.text.DateFormat $r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter1: java.text.DateFormat;

        $r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat weekdayNameFormat> = $r1;

        return $r1;
    }
    static boolean access$700(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        boolean z0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        z0 = $r0.<com.squareup.timessquare.CalendarPickerView: boolean displayOnly>;

        return z0;
    }
    static boolean access$702(com.squareup.timessquare.CalendarPickerView, boolean)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        boolean $z0;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        $z0 := @parameter1: boolean;

        $r0.<com.squareup.timessquare.CalendarPickerView: boolean displayOnly> = $z0;

        return $z0;
    }
    static com.squareup.timessquare.CalendarPickerView$CellClickInterceptor access$800(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        com.squareup.timessquare.CalendarPickerView$CellClickInterceptor r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$CellClickInterceptor cellClickInterceptor>;

        return r1;
    }
    static java.util.Calendar access$900(com.squareup.timessquare.CalendarPickerView)
    {
        com.squareup.timessquare.CalendarPickerView $r0;
        java.util.Calendar r1;

        $r0 := @parameter0: com.squareup.timessquare.CalendarPickerView;

        r1 = $r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal>;

        return r1;
    }
    private java.util.Date applyMultiSelect(java.util.Date, java.util.Calendar)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Calendar $r1, r8;
        java.util.Date $r2, $r7;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.squareup.timessquare.MonthCellDescriptor r6;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r2 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.util.Calendar;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.squareup.timessquare.MonthCellDescriptor) $r5;

        $r7 = virtualinvoke r6.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        $z0 = virtualinvoke $r7.<java.util.Date: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r6.<com.squareup.timessquare.MonthCellDescriptor: void setSelected(boolean)>(0);

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r6);

        $r2 = null;

     label2:
        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Calendar) $r5;

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameDate(java.util.Calendar,java.util.Calendar)>(r8, $r1);

        if $z0 == 0 goto label3;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r8);

     label4:
        return $r2;
    }
    private static boolean betweenDates(java.util.Calendar, java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar $r0, $r1, $r2;
        java.util.Date $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Calendar;

        $r1 := @parameter1: java.util.Calendar;

        $r2 := @parameter2: java.util.Calendar;

        $r3 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean betweenDates(java.util.Date,java.util.Calendar,java.util.Calendar)>($r3, $r1, $r2);

        return $z0;
    }
    static boolean betweenDates(java.util.Date, java.util.Calendar, java.util.Calendar)
    {
        java.util.Date $r0, $r3;
        java.util.Calendar $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.util.Calendar;

        $r2 := @parameter2: java.util.Calendar;

        $r3 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r0.<java.util.Date: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<java.util.Date: boolean after(java.util.Date)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $r3 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r0.<java.util.Date: boolean before(java.util.Date)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    private void clearOldSelections()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.CalendarPickerView$SelectionMode $r1, $r8;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.squareup.timessquare.MonthCellDescriptor r5;
        com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener $r6;
        java.util.Date $r7;
        int $i0, $i1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.squareup.timessquare.MonthCellDescriptor) $r4;

        virtualinvoke r5.<com.squareup.timessquare.MonthCellDescriptor: void setSelected(boolean)>(0);

        $r6 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener dateListener>;

        if $r6 == null goto label1;

        $r7 = virtualinvoke r5.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$SelectionMode selectionMode>;

        $r1 = <com.squareup.timessquare.CalendarPickerView$SelectionMode: com.squareup.timessquare.CalendarPickerView$SelectionMode RANGE>;

        if $r8 != $r1 goto label3;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r5);

        if $i0 == 0 goto label2;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label1;

     label2:
        $r6 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener dateListener>;

        interfaceinvoke $r6.<com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener: void onDateUnselected(java.util.Date)>($r7);

        goto label1;

     label3:
        $r6 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener dateListener>;

        interfaceinvoke $r6.<com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener: void onDateUnselected(java.util.Date)>($r7);

        goto label1;

     label4:
        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }
    private static boolean containsDate(java.util.List, java.util.Calendar)
    {
        java.util.List r0;
        java.util.Calendar $r1, r4;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Calendar) $r3;

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameDate(java.util.Calendar,java.util.Calendar)>($r1, r4);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    private boolean containsDate(java.util.List, java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.List r1;
        java.util.Date $r2;
        java.util.Locale $r3;
        java.util.Calendar $r4;
        boolean $z0;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.util.Date;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean containsDate(java.util.List,java.util.Calendar)>(r1, $r4);

        return $z0;
    }
    private static java.lang.String dbg(java.util.Date, java.util.Date)
    {
        java.util.Date $r0, $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.util.Date;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minDate: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nmaxDate: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    private boolean doSelectDate(java.util.Date, com.squareup.timessquare.MonthCellDescriptor)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.MonthCellDescriptor $r1, r8;
        java.util.Date $r2, $r16, $r17, $r20;
        java.util.Locale $r3;
        java.util.Calendar $r4;
        java.util.List $r5;
        java.util.Iterator $r6, $r18, $r19;
        boolean $z0;
        java.lang.Object $r7;
        com.squareup.timessquare.MonthCellDescriptor$RangeState $r9;
        int[] $r10;
        com.squareup.timessquare.CalendarPickerView$SelectionMode $r11, $r15;
        int $i0;
        java.lang.IllegalStateException $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r2 := @parameter0: java.util.Date;

        $r1 := @parameter1: com.squareup.timessquare.MonthCellDescriptor;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        staticinvoke <com.squareup.timessquare.CalendarPickerView: void setMidnight(java.util.Calendar)>($r4);

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $r9 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState NONE>;

        virtualinvoke r8.<com.squareup.timessquare.MonthCellDescriptor: void setRangeState(com.squareup.timessquare.MonthCellDescriptor$RangeState)>($r9);

        goto label01;

     label02:
        $r10 = <com.squareup.timessquare.CalendarPickerView$3: int[] $SwitchMap$com$squareup$timessquare$CalendarPickerView$SelectionMode>;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$SelectionMode selectionMode>;

        $i0 = virtualinvoke $r11.<com.squareup.timessquare.CalendarPickerView$SelectionMode: int ordinal()>();

        $i0 = $r10[$i0];

        lookupswitch($i0)
        {
            case 1: goto label04;
            case 2: goto label12;
            case 3: goto label13;
            default: goto label03;
        };

     label03:
        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown selectionMode ");

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$SelectionMode selectionMode>;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r12;

     label04:
        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 1 goto label11;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void clearOldSelections()>();

     label05:
        if $r2 == null goto label14;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 == 0 goto label06;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label07;

     label06:
        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: void setSelected(boolean)>(1);

     label07:
        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$SelectionMode selectionMode>;

        $r15 = <com.squareup.timessquare.CalendarPickerView$SelectionMode: com.squareup.timessquare.CalendarPickerView$SelectionMode RANGE>;

        if $r11 != $r15 goto label14;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 1 goto label14;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $r16 = virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(1);

        $r1 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $r17 = virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $r9 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState FIRST>;

        virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: void setRangeState(com.squareup.timessquare.MonthCellDescriptor$RangeState)>($r9);

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(1);

        $r1 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $r9 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState LAST>;

        virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: void setRangeState(com.squareup.timessquare.MonthCellDescriptor$RangeState)>($r9);

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List cells>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.List) $r7;

        $r18 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r7 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.List) $r7;

        $r19 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $r20 = virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        $z0 = virtualinvoke $r20.<java.util.Date: boolean after(java.util.Date)>($r16);

        if $z0 == 0 goto label10;

        $r20 = virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        $z0 = virtualinvoke $r20.<java.util.Date: boolean before(java.util.Date)>($r17);

        if $z0 == 0 goto label10;

        $z0 = virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: boolean isSelectable()>();

        if $z0 == 0 goto label10;

        virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: void setSelected(boolean)>(1);

        $r9 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState MIDDLE>;

        virtualinvoke $r1.<com.squareup.timessquare.MonthCellDescriptor: void setRangeState(com.squareup.timessquare.MonthCellDescriptor$RangeState)>($r9);

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label10;

     label11:
        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 != 1 goto label05;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = virtualinvoke $r4.<java.util.Calendar: boolean before(java.lang.Object)>($r7);

        if $z0 == 0 goto label05;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void clearOldSelections()>();

        goto label05;

     label12:
        $r2 = specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: java.util.Date applyMultiSelect(java.util.Date,java.util.Calendar)>($r2, $r4);

        goto label05;

     label13:
        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void clearOldSelections()>();

        goto label05;

     label14:
        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateAndUpdate()>();

        if $r2 == null goto label15;

        return 1;

     label15:
        return 0;
    }
    private com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex getMonthCellWithIndexByDate(java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1;
        int i0;
        java.util.Locale $r2;
        java.util.Calendar $r3, $r4;
        java.util.List $r5;
        java.util.Iterator $r6, $r8, $r9;
        boolean $z0;
        java.lang.Object $r7;
        com.squareup.timessquare.MonthCellDescriptor r10;
        com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex $r11;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        i0 = 0;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r2);

        virtualinvoke $r3.<java.util.Calendar: void setTime(java.util.Date)>($r1);

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r2);

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List cells>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.List) $r7;

        $r8 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.List) $r7;

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.squareup.timessquare.MonthCellDescriptor) $r7;

        $r1 = virtualinvoke r10.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r1);

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameDate(java.util.Calendar,java.util.Calendar)>($r4, $r3);

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r10.<com.squareup.timessquare.MonthCellDescriptor: boolean isSelectable()>();

        if $z0 == 0 goto label3;

        $r11 = new com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex;

        specialinvoke $r11.<com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex: void <init>(com.squareup.timessquare.MonthCellDescriptor,int)>(r10, i0);

        return $r11;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return null;
    }
    private boolean isDateSelectable(java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1;
        boolean $z0;
        com.squareup.timessquare.CalendarPickerView$DateSelectableFilter $r2;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$DateSelectableFilter dateConfiguredListener>;

        if $r2 == null goto label1;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$DateSelectableFilter dateConfiguredListener>;

        $z0 = interfaceinvoke $r2.<com.squareup.timessquare.CalendarPickerView$DateSelectableFilter: boolean isDateSelectable(java.util.Date)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private static java.util.Calendar maxDate(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.lang.Object $r1;
        java.util.Calendar $r2;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r0);

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (java.util.Calendar) $r1;

        return $r2;
    }
    private static java.util.Calendar minDate(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.lang.Object $r1;
        java.util.Calendar $r2;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r0);

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.util.Calendar) $r1;

        return $r2;
    }
    private static boolean sameDate(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: java.util.Calendar;

        $r1 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(2);

        $i1 = virtualinvoke $r1.<java.util.Calendar: int get(int)>(2);

        if $i0 != $i1 goto label1;

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke $r1.<java.util.Calendar: int get(int)>(1);

        if $i0 != $i1 goto label1;

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(5);

        $i1 = virtualinvoke $r1.<java.util.Calendar: int get(int)>(5);

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean sameMonth(java.util.Calendar, com.squareup.timessquare.MonthDescriptor)
    {
        java.util.Calendar $r0;
        com.squareup.timessquare.MonthDescriptor $r1;
        int $i0, $i1;

        $r0 := @parameter0: java.util.Calendar;

        $r1 := @parameter1: com.squareup.timessquare.MonthDescriptor;

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(2);

        $i1 = virtualinvoke $r1.<com.squareup.timessquare.MonthDescriptor: int getMonth()>();

        if $i0 != $i1 goto label1;

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke $r1.<com.squareup.timessquare.MonthDescriptor: int getYear()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void scrollToSelectedDates()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.lang.Integer r1, r2;
        java.util.Locale $r3;
        java.util.Calendar $r4, r9;
        int i0, $i1;
        java.util.List $r5;
        java.lang.Object $r6;
        com.squareup.timessquare.MonthDescriptor r7;
        java.util.Iterator $r8;
        boolean $z0;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        r1 = null;

        r2 = null;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        i0 = 0;

     label1:
        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r7 = (com.squareup.timessquare.MonthDescriptor) $r6;

        if r1 != null goto label4;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $r8 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Calendar) $r6;

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameMonth(java.util.Calendar,com.squareup.timessquare.MonthDescriptor)>(r9, r7);

        if $z0 == 0 goto label2;

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label3:
        if r1 != null goto label4;

        if r2 != null goto label4;

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameMonth(java.util.Calendar,com.squareup.timessquare.MonthDescriptor)>($r4, r7);

        if $z0 == 0 goto label4;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        if r1 == null goto label6;

        i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void scrollToSelectedMonth(int)>(i0);

        return;

     label6:
        if r2 == null goto label7;

        i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void scrollToSelectedMonth(int)>(i0);

     label7:
        return;
    }
    private void scrollToSelectedMonth(int)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        int $i0;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void scrollToSelectedMonth(int,boolean)>($i0, 0);

        return;
    }
    private void scrollToSelectedMonth(int, boolean)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        int $i0;
        boolean $z0;
        com.squareup.timessquare.CalendarPickerView$1 $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = new com.squareup.timessquare.CalendarPickerView$1;

        specialinvoke $r1.<com.squareup.timessquare.CalendarPickerView$1: void <init>(com.squareup.timessquare.CalendarPickerView,int,boolean)>(r0, $i0, $z0);

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: boolean post(java.lang.Runnable)>($r1);

        return;
    }
    static void setMidnight(java.util.Calendar)
    {
        java.util.Calendar $r0;

        $r0 := @parameter0: java.util.Calendar;

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(14, 0);

        return;
    }
    private void validateAndUpdate()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        android.widget.ListAdapter $r1;
        com.squareup.timessquare.CalendarPickerView$MonthAdapter $r2;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: android.widget.ListAdapter getAdapter()>();

        if $r1 != null goto label1;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter>;

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void setAdapter(android.widget.ListAdapter)>($r2);

     label1:
        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter>;

        virtualinvoke $r2.<com.squareup.timessquare.CalendarPickerView$MonthAdapter: void notifyDataSetChanged()>();

        return;
    }
    private void validateDate(java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1, $r4;
        java.lang.IllegalArgumentException $r2;
        java.util.Calendar $r3;
        boolean $z0;
        java.lang.Object[] $r5;
        java.lang.String $r6;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Selected date must be non-null.");

        throw $r2;

     label1:
        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal>;

        $r4 = virtualinvoke $r3.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r1.<java.util.Date: boolean before(java.util.Date)>($r4);

        if $z0 != 0 goto label2;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        $r4 = virtualinvoke $r3.<java.util.Calendar: java.util.Date getTime()>();

        $z0 = virtualinvoke $r1.<java.util.Date: boolean after(java.util.Date)>($r4);

        if $z0 == 0 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[3];

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal>;

        $r4 = virtualinvoke $r3.<java.util.Calendar: java.util.Date getTime()>();

        $r5[0] = $r4;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        $r4 = virtualinvoke $r3.<java.util.Calendar: java.util.Date getTime()>();

        $r5[1] = $r4;

        $r5[2] = $r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("SelectedDate must be between minDate and maxDate.%nminDate: %s%nmaxDate: %s%nselectedDate: %s", $r5);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        return;
    }
    public void clearHighlightedDates()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        com.squareup.timessquare.MonthCellDescriptor r4;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCells>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.squareup.timessquare.MonthCellDescriptor) $r3;

        virtualinvoke r4.<com.squareup.timessquare.MonthCellDescriptor: void setHighlighted(boolean)>(0);

        goto label1;

     label2:
        $r1 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCells>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r1 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCals>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateAndUpdate()>();

        return;
    }
    public void fixDialogDimens()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Integer $r2;
        android.view.ViewGroup$LayoutParams $r3;
        com.squareup.timessquare.CalendarPickerView$2 $r4;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 = newarray (java.lang.Object)[2];

        $i0 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: int getMeasuredHeight()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i0 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: int getMeasuredWidth()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        staticinvoke <com.squareup.timessquare.Logr: void d(java.lang.String,java.lang.Object[])>("Fixing dimensions to h = %d / w = %d", $r1);

        $r3 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $i0 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: int getMeasuredHeight()>();

        $r3.<android.view.ViewGroup$LayoutParams: int height> = $i0;

        $r3 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $i0 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: int getMeasuredWidth()>();

        $r3.<android.view.ViewGroup$LayoutParams: int width> = $i0;

        $r4 = new com.squareup.timessquare.CalendarPickerView$2;

        specialinvoke $r4.<com.squareup.timessquare.CalendarPickerView$2: void <init>(com.squareup.timessquare.CalendarPickerView)>(r0);

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: boolean post(java.lang.Runnable)>($r4);

        return;
    }
    public java.util.List getDecorators()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.List r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        r1 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List decorators>;

        return r1;
    }
    java.util.List getMonthCells(com.squareup.timessquare.MonthDescriptor, java.util.Calendar)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.MonthDescriptor $r1;
        java.util.Calendar $r2, $r6, $r9, $r11, $r12;
        java.util.ArrayList r3, r4;
        java.util.Locale $r5;
        java.util.Date $r7;
        int $i0, $i1, $i2;
        java.util.List $r8;
        java.lang.Object[] $r10;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        com.squareup.timessquare.MonthCellDescriptor$RangeState r13;
        com.squareup.timessquare.MonthCellDescriptor $r14;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: com.squareup.timessquare.MonthDescriptor;

        $r2 := @parameter1: java.util.Calendar;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r5);

        $r7 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r6.<java.util.Calendar: void setTime(java.util.Date)>($r7);

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(5, 1);

        $i0 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(7);

        $i1 = virtualinvoke $r6.<java.util.Calendar: int getFirstDayOfWeek()>();

        $i0 = $i1 - $i0;

        if $i0 <= 0 goto label01;

        $i0 = $i0 + -7;

     label01:
        virtualinvoke $r6.<java.util.Calendar: void add(int,int)>(5, $i0);

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $r2 = staticinvoke <com.squareup.timessquare.CalendarPickerView: java.util.Calendar minDate(java.util.List)>($r8);

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $r9 = staticinvoke <com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxDate(java.util.List)>($r8);

     label02:
        $i0 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(2);

        $i1 = virtualinvoke $r1.<com.squareup.timessquare.MonthDescriptor: int getMonth()>();

        $i1 = $i1 + 1;

        if $i0 < $i1 goto label03;

        $i0 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke $r1.<com.squareup.timessquare.MonthDescriptor: int getYear()>();

        if $i0 >= $i1 goto label14;

     label03:
        $i0 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke $r1.<com.squareup.timessquare.MonthDescriptor: int getYear()>();

        if $i0 > $i1 goto label14;

        $r10 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke $r6.<java.util.Calendar: java.util.Date getTime()>();

        $r10[0] = $r7;

        staticinvoke <com.squareup.timessquare.Logr: void d(java.lang.String,java.lang.Object[])>("Building week row starting at %s", $r10);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4);

        $i0 = 0;

     label04:
        if $i0 >= 7 goto label02;

        $r7 = virtualinvoke $r6.<java.util.Calendar: java.util.Date getTime()>();

        $i1 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(2);

        $i2 = virtualinvoke $r1.<com.squareup.timessquare.MonthDescriptor: int getMonth()>();

        if $i1 != $i2 goto label09;

        z0 = 1;

     label05:
        if z0 == 0 goto label10;

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $z1 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean containsDate(java.util.List,java.util.Calendar)>($r8, $r6);

        if $z1 == 0 goto label10;

        $z1 = 1;

     label06:
        if z0 == 0 goto label11;

        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal>;

        $r12 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        $z2 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean betweenDates(java.util.Calendar,java.util.Calendar,java.util.Calendar)>($r6, $r11, $r12);

        if $z2 == 0 goto label11;

        $z2 = specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: boolean isDateSelectable(java.util.Date)>($r7);

        if $z2 == 0 goto label11;

        $z2 = 1;

     label07:
        $r11 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar today>;

        $z3 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameDate(java.util.Calendar,java.util.Calendar)>($r6, $r11);

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCals>;

        $z4 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean containsDate(java.util.List,java.util.Calendar)>($r8, $r6);

        $i1 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(5);

        r13 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState NONE>;

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i2 <= 1 goto label08;

        $z5 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameDate(java.util.Calendar,java.util.Calendar)>($r2, $r6);

        if $z5 == 0 goto label12;

        r13 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState FIRST>;

     label08:
        $r14 = new com.squareup.timessquare.MonthCellDescriptor;

        specialinvoke $r14.<com.squareup.timessquare.MonthCellDescriptor: void <init>(java.util.Date,boolean,boolean,boolean,boolean,boolean,int,com.squareup.timessquare.MonthCellDescriptor$RangeState)>($r7, z0, $z2, $z1, $z3, $z4, $i1, r13);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r14);

        virtualinvoke $r6.<java.util.Calendar: void add(int,int)>(5, 1);

        $i0 = $i0 + 1;

        goto label04;

     label09:
        z0 = 0;

        goto label05;

     label10:
        $z1 = 0;

        goto label06;

     label11:
        $z2 = 0;

        goto label07;

     label12:
        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $r11 = staticinvoke <com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxDate(java.util.List)>($r8);

        $z5 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameDate(java.util.Calendar,java.util.Calendar)>($r11, $r6);

        if $z5 == 0 goto label13;

        r13 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState LAST>;

        goto label08;

     label13:
        $z5 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean betweenDates(java.util.Calendar,java.util.Calendar,java.util.Calendar)>($r6, $r2, $r9);

        if $z5 == 0 goto label08;

        r13 = <com.squareup.timessquare.MonthCellDescriptor$RangeState: com.squareup.timessquare.MonthCellDescriptor$RangeState MIDDLE>;

        goto label08;

     label14:
        return r3;
    }
    public java.util.Date getSelectedDate()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.List $r1;
        int $i0;
        java.lang.Object $r2;
        java.util.Calendar $r3;
        java.util.Date $r4;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r1 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.util.Calendar) $r2;

        $r4 = virtualinvoke $r3.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;

     label1:
        return null;
    }
    public java.util.List getSelectedDates()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.ArrayList r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.squareup.timessquare.MonthCellDescriptor r5;
        java.util.Date $r6;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.squareup.timessquare.MonthCellDescriptor) $r4;

        $r6 = virtualinvoke r5.<com.squareup.timessquare.MonthCellDescriptor: java.util.Date getDate()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r1);

        return r1;
    }
    public void highlightDates(java.util.Collection)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Collection r1;
        com.squareup.timessquare.MonthCellDescriptor r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Date r5;
        com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex $r6;
        java.util.Calendar $r7;
        java.util.List $r8;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        r1 := @parameter0: java.util.Collection;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Date) $r4;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateDate(java.util.Date)>(r5);

        $r6 = specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex getMonthCellWithIndexByDate(java.util.Date)>(r5);

        if $r6 == null goto label1;

        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $r7.<java.util.Calendar: void setTime(java.util.Date)>(r5);

        r2 = $r6.<com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex: com.squareup.timessquare.MonthCellDescriptor cell>;

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCells>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r8 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCals>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        virtualinvoke r2.<com.squareup.timessquare.MonthCellDescriptor: void setHighlighted(boolean)>(1);

        goto label1;

     label2:
        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateAndUpdate()>();

        return;
    }
    public com.squareup.timessquare.CalendarPickerView$FluentInitializer init(java.util.Date, java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1, $r2;
        java.util.Locale $r3;
        com.squareup.timessquare.CalendarPickerView$FluentInitializer $r4;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        $r2 := @parameter1: java.util.Date;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r4 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$FluentInitializer init(java.util.Date,java.util.Date,java.util.Locale)>($r1, $r2, $r3);

        return $r4;
    }
    public com.squareup.timessquare.CalendarPickerView$FluentInitializer init(java.util.Date, java.util.Date, java.util.Locale)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1, $r2, $r15;
        java.util.Locale $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        boolean $z0;
        java.util.Calendar $r7, $r17;
        java.text.SimpleDateFormat $r8;
        android.content.Context $r9;
        int $i0, $i1, $i2, $i3;
        java.util.List $r10, $r18;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        com.squareup.timessquare.MonthDescriptor r13;
        java.text.DateFormat $r14;
        com.squareup.timessquare.CalendarPickerView$SelectionMode $r16;
        java.lang.Object[] $r19;
        com.squareup.timessquare.CalendarPickerView$FluentInitializer $r20;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        $r2 := @parameter1: java.util.Date;

        $r3 := @parameter2: java.util.Locale;

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minDate and maxDate must be non-null.  ");

        $r6 = staticinvoke <com.squareup.timessquare.CalendarPickerView: java.lang.String dbg(java.util.Date,java.util.Date)>($r1, $r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        $z0 = virtualinvoke $r1.<java.util.Date: boolean after(java.util.Date)>($r2);

        if $z0 == 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minDate must be before maxDate.  ");

        $r6 = staticinvoke <com.squareup.timessquare.CalendarPickerView: java.lang.String dbg(java.util.Date,java.util.Date)>($r1, $r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label3:
        if $r3 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Locale is null.");

        throw $r4;

     label4:
        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale> = $r3;

        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar today> = $r7;

        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal> = $r7;

        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal> = $r7;

        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter> = $r7;

        $r8 = new java.text.SimpleDateFormat;

        $r9 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: android.content.Context getContext()>();

        $i0 = <com.squareup.timessquare.R$string: int month_name_format>;

        $r6 = virtualinvoke $r9.<android.content.Context: java.lang.String getString(int)>($i0);

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r6, $r3);

        r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat monthNameFormat> = $r8;

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.squareup.timessquare.MonthDescriptor) $r12;

        $r14 = r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat monthNameFormat>;

        $r15 = virtualinvoke r13.<com.squareup.timessquare.MonthDescriptor: java.util.Date getDate()>();

        $r6 = virtualinvoke $r14.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r15);

        virtualinvoke r13.<com.squareup.timessquare.MonthDescriptor: void setLabel(java.lang.String)>($r6);

        goto label5;

     label6:
        $r8 = new java.text.SimpleDateFormat;

        $r9 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: android.content.Context getContext()>();

        $i0 = <com.squareup.timessquare.R$string: int day_name_format>;

        $r6 = virtualinvoke $r9.<android.content.Context: java.lang.String getString(int)>($i0);

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r6, $r3);

        r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat weekdayNameFormat> = $r8;

        $r14 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(2, $r3);

        r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat fullDateFormat> = $r14;

        $r16 = <com.squareup.timessquare.CalendarPickerView$SelectionMode: com.squareup.timessquare.CalendarPickerView$SelectionMode SINGLE>;

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$SelectionMode selectionMode> = $r16;

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCals>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List selectedCells>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCals>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List highlightedCells>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List cells>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal>;

        virtualinvoke $r7.<java.util.Calendar: void setTime(java.util.Date)>($r1);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        virtualinvoke $r7.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal>;

        staticinvoke <com.squareup.timessquare.CalendarPickerView: void setMidnight(java.util.Calendar)>($r7);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        staticinvoke <com.squareup.timessquare.CalendarPickerView: void setMidnight(java.util.Calendar)>($r7);

        r0.<com.squareup.timessquare.CalendarPickerView: boolean displayOnly> = 0;

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        virtualinvoke $r7.<java.util.Calendar: void add(int,int)>(12, -1);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $r17 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar minCal>;

        $r1 = virtualinvoke $r17.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke $r7.<java.util.Calendar: void setTime(java.util.Date)>($r1);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        $i0 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(2);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar maxCal>;

        $i1 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(1);

     label7:
        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $i2 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(2);

        if $i2 <= $i0 goto label8;

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $i2 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(1);

        if $i2 >= $i1 goto label9;

     label8:
        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $i2 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(1);

        $i3 = $i1 + 1;

        if $i2 >= $i3 goto label9;

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $r1 = virtualinvoke $r7.<java.util.Calendar: java.util.Date getTime()>();

        r13 = new com.squareup.timessquare.MonthDescriptor;

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $i2 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(2);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $i3 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(1);

        $r14 = r0.<com.squareup.timessquare.CalendarPickerView: java.text.DateFormat monthNameFormat>;

        $r6 = virtualinvoke $r14.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);

        specialinvoke r13.<com.squareup.timessquare.MonthDescriptor: void <init>(int,int,java.util.Date,java.lang.String)>($i2, $i3, $r1, $r6);

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List cells>;

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        $r18 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: java.util.List getMonthCells(com.squareup.timessquare.MonthDescriptor,java.util.Calendar)>(r13, $r7);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r18);

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r13;

        staticinvoke <com.squareup.timessquare.Logr: void d(java.lang.String,java.lang.Object[])>("Adding month %s", $r19);

        $r10 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r13);

        $r7 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Calendar monthCounter>;

        virtualinvoke $r7.<java.util.Calendar: void add(int,int)>(2, 1);

        goto label7;

     label9:
        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateAndUpdate()>();

        $r20 = new com.squareup.timessquare.CalendarPickerView$FluentInitializer;

        specialinvoke $r20.<com.squareup.timessquare.CalendarPickerView$FluentInitializer: void <init>(com.squareup.timessquare.CalendarPickerView)>(r0);

        return $r20;
    }
    protected void onMeasure(int, int)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must have at least one month to display.  Did you forget to call init()?");

        throw $r2;

     label1:
        specialinvoke r0.<android.widget.ListView: void onMeasure(int,int)>($i0, $i1);

        return;
    }
    public boolean scrollToDate(java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1;
        java.lang.Integer r2;
        java.util.Locale $r3;
        java.util.Calendar $r4;
        int i0, $i1;
        java.util.List $r5;
        java.lang.Object $r6;
        com.squareup.timessquare.MonthDescriptor r7;
        boolean $z0;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        r2 = null;

        $r3 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.Locale locale>;

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r3);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r1);

        i0 = 0;

     label1:
        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i0 >= $i1 goto label2;

        $r5 = r0.<com.squareup.timessquare.CalendarPickerView: java.util.List months>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r7 = (com.squareup.timessquare.MonthDescriptor) $r6;

        $z0 = staticinvoke <com.squareup.timessquare.CalendarPickerView: boolean sameMonth(java.util.Calendar,com.squareup.timessquare.MonthDescriptor)>($r4, r7);

        if $z0 == 0 goto label3;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label2:
        if r2 == null goto label4;

        i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void scrollToSelectedMonth(int)>(i0);

        return 1;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return 0;
    }
    public boolean selectDate(java.util.Date)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1;
        boolean $z0;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        $z0 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: boolean selectDate(java.util.Date,boolean)>($r1, 0);

        return $z0;
    }
    public boolean selectDate(java.util.Date, boolean)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.Date $r1;
        boolean $z0, $z1;
        com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex $r2;
        com.squareup.timessquare.MonthCellDescriptor $r3;
        int $i0;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: java.util.Date;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateDate(java.util.Date)>($r1);

        $r2 = specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex getMonthCellWithIndexByDate(java.util.Date)>($r1);

        if $r2 == null goto label1;

        $z1 = specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: boolean isDateSelectable(java.util.Date)>($r1);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = $r2.<com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex: com.squareup.timessquare.MonthCellDescriptor cell>;

        $z1 = specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: boolean doSelectDate(java.util.Date,com.squareup.timessquare.MonthCellDescriptor)>($r1, $r3);

        if $z1 == 0 goto label3;

        $i0 = $r2.<com.squareup.timessquare.CalendarPickerView$MonthCellWithMonthIndex: int monthIndex>;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void scrollToSelectedMonth(int,boolean)>($i0, $z0);

     label3:
        return $z1;
    }
    public void setCellClickInterceptor(com.squareup.timessquare.CalendarPickerView$CellClickInterceptor)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.CalendarPickerView$CellClickInterceptor $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: com.squareup.timessquare.CalendarPickerView$CellClickInterceptor;

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$CellClickInterceptor cellClickInterceptor> = $r1;

        return;
    }
    public void setCustomDayView(com.squareup.timessquare.DayViewAdapter)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.DayViewAdapter $r1;
        com.squareup.timessquare.CalendarPickerView$MonthAdapter $r2;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: com.squareup.timessquare.DayViewAdapter;

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.DayViewAdapter dayViewAdapter> = $r1;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter>;

        if $r2 == null goto label1;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter>;

        virtualinvoke $r2.<com.squareup.timessquare.CalendarPickerView$MonthAdapter: void notifyDataSetChanged()>();

     label1:
        return;
    }
    public void setDateSelectableFilter(com.squareup.timessquare.CalendarPickerView$DateSelectableFilter)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.CalendarPickerView$DateSelectableFilter $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: com.squareup.timessquare.CalendarPickerView$DateSelectableFilter;

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$DateSelectableFilter dateConfiguredListener> = $r1;

        return;
    }
    public void setDateTypeface(android.graphics.Typeface)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        android.graphics.Typeface $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: android.graphics.Typeface;

        r0.<com.squareup.timessquare.CalendarPickerView: android.graphics.Typeface dateTypeface> = $r1;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateAndUpdate()>();

        return;
    }
    public void setDecorators(java.util.List)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        java.util.List r1;
        com.squareup.timessquare.CalendarPickerView$MonthAdapter $r2;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        r1 := @parameter0: java.util.List;

        r0.<com.squareup.timessquare.CalendarPickerView: java.util.List decorators> = r1;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter>;

        if $r2 == null goto label1;

        $r2 = r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$MonthAdapter adapter>;

        virtualinvoke $r2.<com.squareup.timessquare.CalendarPickerView$MonthAdapter: void notifyDataSetChanged()>();

     label1:
        return;
    }
    public void setOnDateSelectedListener(com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener;

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnDateSelectedListener dateListener> = $r1;

        return;
    }
    public void setOnInvalidDateSelectedListener(com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener;

        r0.<com.squareup.timessquare.CalendarPickerView: com.squareup.timessquare.CalendarPickerView$OnInvalidDateSelectedListener invalidDateListener> = $r1;

        return;
    }
    public void setTitleTypeface(android.graphics.Typeface)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        android.graphics.Typeface $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: android.graphics.Typeface;

        r0.<com.squareup.timessquare.CalendarPickerView: android.graphics.Typeface titleTypeface> = $r1;

        specialinvoke r0.<com.squareup.timessquare.CalendarPickerView: void validateAndUpdate()>();

        return;
    }
    public void setTypeface(android.graphics.Typeface)
    {
        com.squareup.timessquare.CalendarPickerView r0;
        android.graphics.Typeface $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        $r1 := @parameter0: android.graphics.Typeface;

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void setTitleTypeface(android.graphics.Typeface)>($r1);

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void setDateTypeface(android.graphics.Typeface)>($r1);

        return;
    }
    public void unfixDialogDimens()
    {
        com.squareup.timessquare.CalendarPickerView r0;
        android.view.ViewGroup$LayoutParams $r1;

        r0 := @this: com.squareup.timessquare.CalendarPickerView;

        staticinvoke <com.squareup.timessquare.Logr: void d(java.lang.String)>("Reset the fixed dimensions to allow for re-measurement");

        $r1 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r1.<android.view.ViewGroup$LayoutParams: int height> = -1;

        $r1 = virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r1.<android.view.ViewGroup$LayoutParams: int width> = -1;

        virtualinvoke r0.<com.squareup.timessquare.CalendarPickerView: void requestLayout()>();

        return;
    }
