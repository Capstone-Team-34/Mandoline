android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState extends android.graphics.drawable.Drawable$ConstantState
boolean mAutoMirrored
boolean mCacheDirty
boolean mCachedAutoMirrored
android.graphics.Bitmap mCachedBitmap
int mCachedRootAlpha
int[] mCachedThemeAttrs
android.content.res.ColorStateList mCachedTint
android.graphics.PorterDuff$Mode mCachedTintMode
int mChangingConfigurations
android.graphics.Paint mTempPaint
android.content.res.ColorStateList mTint
android.graphics.PorterDuff$Mode mTintMode
android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer
    public void <init>()
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.graphics.PorterDuff$Mode $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = null;

        $r1 = <android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = $r1;

        $r2 = new android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        specialinvoke $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer> = $r2;

        return;
    }
    public void <init>(android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0, $r1;
        android.graphics.PorterDuff$Mode $r2;
        int $i0;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3, $r4;
        android.graphics.Paint $r5, $r6;
        android.content.res.ColorStateList $r7;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 := @parameter0: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = null;

        $r2 = <android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = $r2;

        if $r1 == null goto label3;

        $i0 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i0;

        $r3 = new android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        $r4 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        specialinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>(android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer)>($r4);

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer> = $r3;

        $r3 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r5 = staticinvoke <android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.graphics.Paint access$400(android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer)>($r3);

        if $r5 == null goto label1;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r5 = new android.graphics.Paint;

        $r4 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r6 = staticinvoke <android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.graphics.Paint access$400(android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer)>($r4);

        specialinvoke $r5.<android.graphics.Paint: void <init>(android.graphics.Paint)>($r6);

        staticinvoke <android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.graphics.Paint access$402(android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer,android.graphics.Paint)>($r3, $r5);

     label1:
        $r3 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r5 = staticinvoke <android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.graphics.Paint access$500(android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer)>($r3);

        if $r5 == null goto label2;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r5 = new android.graphics.Paint;

        $r4 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r6 = staticinvoke <android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.graphics.Paint access$500(android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer)>($r4);

        specialinvoke $r5.<android.graphics.Paint: void <init>(android.graphics.Paint)>($r6);

        staticinvoke <android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.graphics.Paint access$502(android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer,android.graphics.Paint)>($r3, $r5);

     label2:
        $r7 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = $r7;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = $r2;

        $z0 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored> = $z0;

     label3:
        return;
    }
    public boolean canReuseBitmap(int, int)
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        int $i0, $i1, $i2;
        android.graphics.Bitmap $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Bitmap mCachedBitmap>;

        $i2 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        if $i0 != $i2 goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Bitmap mCachedBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean canReuseCache()
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        int $i0, $i1;
        boolean $z0, $z1;
        android.content.res.ColorStateList $r1, $r2;
        android.graphics.PorterDuff$Mode $r3, $r4;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r5;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $z0 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCacheDirty>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mCachedTint>;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $r1 != $r2 goto label1;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mCachedTintMode>;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r3 != $r4 goto label1;

        $z0 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCachedAutoMirrored>;

        $z1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        if $z0 != $z1 goto label1;

        $i1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mCachedRootAlpha>;

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r5.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void createCachedBitmapIfNeeded(int, int)
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        int $i0, $i1;
        android.graphics.Bitmap $r1;
        boolean $z0;
        android.graphics.Bitmap$Config $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Bitmap mCachedBitmap>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean canReuseBitmap(int,int)>($i0, $i1);

        if $z0 != 0 goto label2;

     label1:
        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r2);

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Bitmap mCachedBitmap> = $r1;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCacheDirty> = 1;

     label2:
        return;
    }
    public void drawCachedBitmapWithRootAlpha(android.graphics.Canvas, android.graphics.ColorFilter, android.graphics.Rect)
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.graphics.Canvas $r1;
        android.graphics.ColorFilter $r2;
        android.graphics.Rect $r3;
        android.graphics.Bitmap $r4;
        android.graphics.Paint $r5;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.graphics.ColorFilter;

        $r3 := @parameter2: android.graphics.Rect;

        $r5 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint getPaint(android.graphics.ColorFilter)>($r2);

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Bitmap mCachedBitmap>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>($r4, null, $r3, $r5);

        return;
    }
    public int getChangingConfigurations()
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        int i0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        i0 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        return i0;
    }
    public android.graphics.Paint getPaint(android.graphics.ColorFilter)
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.graphics.ColorFilter $r1;
        boolean $z0;
        android.graphics.Paint $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        int $i0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 := @parameter0: android.graphics.ColorFilter;

        $z0 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean hasTranslucentRoot()>();

        if $z0 != 0 goto label1;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint mTempPaint>;

        if $r2 != null goto label2;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint mTempPaint> = $r2;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint mTempPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

     label2:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint mTempPaint>;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        virtualinvoke $r2.<android.graphics.Paint: void setAlpha(int)>($i0);

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint mTempPaint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r1);

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint mTempPaint>;

        return $r2;
    }
    public boolean hasTranslucentRoot()
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        int $i0;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r1.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        if $i0 >= 255 goto label1;

        return 1;

     label1:
        return 0;
    }
    public android.graphics.drawable.Drawable newDrawable()
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.support.graphics.drawable.VectorDrawableCompat $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 = new android.support.graphics.drawable.VectorDrawableCompat;

        specialinvoke $r1.<android.support.graphics.drawable.VectorDrawableCompat: void <init>(android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState,android.support.graphics.drawable.VectorDrawableCompat$1)>(r0, null);

        return $r1;
    }
    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.content.res.Resources $r1;
        android.support.graphics.drawable.VectorDrawableCompat $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 = new android.support.graphics.drawable.VectorDrawableCompat;

        specialinvoke $r2.<android.support.graphics.drawable.VectorDrawableCompat: void <init>(android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState,android.support.graphics.drawable.VectorDrawableCompat$1)>(r0, null);

        return $r2;
    }
    public void updateCacheStates()
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        int $i0;
        android.content.res.ColorStateList $r1;
        android.graphics.PorterDuff$Mode $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mCachedTint> = $r1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mCachedTintMode> = $r2;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mCachedRootAlpha> = $i0;

        $z0 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCachedAutoMirrored> = $z0;

        r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCacheDirty> = 0;

        return;
    }
    public void updateCachedBitmap(int, int)
    {
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        int $i0, $i1;
        android.graphics.Canvas r1;
        android.graphics.Bitmap $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Bitmap mCachedBitmap>;

        virtualinvoke $r2.<android.graphics.Bitmap: void eraseColor(int)>(0);

        r1 = new android.graphics.Canvas;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Bitmap mCachedBitmap>;

        specialinvoke r1.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r2);

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        virtualinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void draw(android.graphics.Canvas,int,int,android.graphics.ColorFilter)>(r1, $i0, $i1, null);

        return;
    }
