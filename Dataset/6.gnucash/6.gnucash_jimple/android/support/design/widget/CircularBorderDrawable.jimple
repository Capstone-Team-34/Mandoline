android.support.design.widget.CircularBorderDrawable extends android.graphics.drawable.Drawable
private static final float DRAW_STROKE_WIDTH_MULTIPLE
private android.content.res.ColorStateList mBorderTint
float mBorderWidth
private int mBottomInnerStrokeColor
private int mBottomOuterStrokeColor
private int mCurrentBorderTintColor
private boolean mInvalidateShader
final android.graphics.Paint mPaint
final android.graphics.Rect mRect
final android.graphics.RectF mRectF
private float mRotation
private int mTopInnerStrokeColor
private int mTopOuterStrokeColor
    public void <init>()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Rect $r1;
        android.graphics.RectF $r2;
        android.graphics.Paint $r3;
        android.graphics.Paint$Style $r4;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect mRect> = $r1;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.RectF mRectF> = $r2;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader> = 1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(1);

        r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint> = $r3;

        $r3 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        return;
    }
    private android.graphics.Shader createGradientShader()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        int[] r1;
        float[] r2;
        float f0, $f1;
        android.graphics.Rect r3;
        int $i0, $i1;
        android.graphics.LinearGradient $r4;
        android.graphics.Shader$TileMode $r5;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r3 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect mRect>;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void copyBounds(android.graphics.Rect)>(r3);

        f0 = r0.<android.support.design.widget.CircularBorderDrawable: float mBorderWidth>;

        $i0 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f1 = (float) $i0;

        f0 = f0 / $f1;

        r1 = newarray (int)[6];

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mTopOuterStrokeColor>;

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i0, $i1);

        r1[0] = $i0;

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mTopInnerStrokeColor>;

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i0, $i1);

        r1[1] = $i0;

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mTopInnerStrokeColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)>($i0, 0);

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i0, $i1);

        r1[2] = $i0;

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mBottomInnerStrokeColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)>($i0, 0);

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i0, $i1);

        r1[3] = $i0;

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mBottomInnerStrokeColor>;

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i0, $i1);

        r1[4] = $i0;

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mBottomOuterStrokeColor>;

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i0, $i1);

        r1[5] = $i0;

        r2 = newarray (float)[6];

        r2[0] = 0.0F;

        r2[1] = f0;

        r2[2] = 0.5F;

        r2[3] = 0.5F;

        f0 = 1.0F - f0;

        r2[4] = f0;

        r2[5] = 1.0F;

        $r4 = new android.graphics.LinearGradient;

        $i0 = r3.<android.graphics.Rect: int top>;

        f0 = (float) $i0;

        $i0 = r3.<android.graphics.Rect: int bottom>;

        $f1 = (float) $i0;

        $r5 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r4.<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, f0, 0.0F, $f1, r1, r2, $r5);

        return $r4;
    }
    public void draw(android.graphics.Canvas)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Canvas $r1;
        float f0, $f1, $f2;
        android.graphics.RectF r2;
        boolean $z0;
        android.graphics.Paint $r3;
        android.graphics.Shader $r4;
        android.graphics.Rect $r5;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $z0 = r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader>;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint>;

        $r4 = specialinvoke r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Shader createGradientShader()>();

        virtualinvoke $r3.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r4);

        r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader> = 0;

     label1:
        $r3 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint>;

        f0 = virtualinvoke $r3.<android.graphics.Paint: float getStrokeWidth()>();

        f0 = f0 / 2.0F;

        r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.RectF mRectF>;

        $r5 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect mRect>;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void copyBounds(android.graphics.Rect)>($r5);

        $r5 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect mRect>;

        virtualinvoke r2.<android.graphics.RectF: void set(android.graphics.Rect)>($r5);

        $f1 = r2.<android.graphics.RectF: float left>;

        $f1 = $f1 + f0;

        r2.<android.graphics.RectF: float left> = $f1;

        $f1 = r2.<android.graphics.RectF: float top>;

        $f1 = $f1 + f0;

        r2.<android.graphics.RectF: float top> = $f1;

        $f1 = r2.<android.graphics.RectF: float right>;

        $f1 = $f1 - f0;

        r2.<android.graphics.RectF: float right> = $f1;

        $f1 = r2.<android.graphics.RectF: float bottom>;

        f0 = $f1 - f0;

        r2.<android.graphics.RectF: float bottom> = f0;

        virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        f0 = r0.<android.support.design.widget.CircularBorderDrawable: float mRotation>;

        $f1 = virtualinvoke r2.<android.graphics.RectF: float centerX()>();

        $f2 = virtualinvoke r2.<android.graphics.RectF: float centerY()>();

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float,float,float)>(f0, $f1, $f2);

        $r3 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>(r2, $r3);

        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();

        return;
    }
    public int getOpacity()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        float $f0;
        byte $b0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $f0 = r0.<android.support.design.widget.CircularBorderDrawable: float mBorderWidth>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        return -3;

     label1:
        return -2;
    }
    public boolean getPadding(android.graphics.Rect)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Rect $r1;
        int $i0;
        float $f0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 := @parameter0: android.graphics.Rect;

        $f0 = r0.<android.support.design.widget.CircularBorderDrawable: float mBorderWidth>;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i0, $i0, $i0);

        return 1;
    }
    public boolean isStateful()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.content.res.ColorStateList $r1;
        boolean $z0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList mBorderTint>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList mBorderTint>;

        $z0 = virtualinvoke $r1.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z0 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    protected void onBoundsChange(android.graphics.Rect)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Rect $r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 := @parameter0: android.graphics.Rect;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader> = 1;

        return;
    }
    protected boolean onStateChange(int[])
    {
        android.support.design.widget.CircularBorderDrawable r0;
        int[] $r1;
        int $i0, $i1;
        android.content.res.ColorStateList $r2;
        boolean $z0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 := @parameter0: int[];

        $r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList mBorderTint>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList mBorderTint>;

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = virtualinvoke $r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r1, $i0);

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        if $i0 == $i1 goto label1;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader> = 1;

        r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor> = $i0;

     label1:
        $z0 = r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

     label2:
        $z0 = r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader>;

        return $z0;
    }
    public void setAlpha(int)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        int $i0;
        android.graphics.Paint $r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>($i0);

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

        return;
    }
    void setBorderTint(android.content.res.ColorStateList)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.content.res.ColorStateList $r1;
        int $i0;
        int[] $r2;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 := @parameter0: android.content.res.ColorStateList;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: int[] getState()>();

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor>;

        $i0 = virtualinvoke $r1.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        r0.<android.support.design.widget.CircularBorderDrawable: int mCurrentBorderTintColor> = $i0;

     label1:
        r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList mBorderTint> = $r1;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader> = 1;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

        return;
    }
    void setBorderWidth(float)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        float $f0, $f1;
        byte $b0;
        android.graphics.Paint $r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.CircularBorderDrawable: float mBorderWidth>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.widget.CircularBorderDrawable: float mBorderWidth> = $f0;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint>;

        $f0 = 1.3333F * $f0;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        r0.<android.support.design.widget.CircularBorderDrawable: boolean mInvalidateShader> = 1;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

     label1:
        return;
    }
    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.ColorFilter $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r1);

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

        return;
    }
    void setGradientColors(int, int, int, int)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        r0.<android.support.design.widget.CircularBorderDrawable: int mTopOuterStrokeColor> = $i0;

        r0.<android.support.design.widget.CircularBorderDrawable: int mTopInnerStrokeColor> = $i1;

        r0.<android.support.design.widget.CircularBorderDrawable: int mBottomOuterStrokeColor> = $i2;

        r0.<android.support.design.widget.CircularBorderDrawable: int mBottomInnerStrokeColor> = $i3;

        return;
    }
    final void setRotation(float)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.CircularBorderDrawable: float mRotation>;

        $b0 = $f0 cmpl $f1;

        if $b0 == 0 goto label1;

        r0.<android.support.design.widget.CircularBorderDrawable: float mRotation> = $f0;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

     label1:
        return;
    }
