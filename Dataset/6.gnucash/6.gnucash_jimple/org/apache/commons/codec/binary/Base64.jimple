org.apache.commons.codec.binary.Base64 extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder org.apache.commons.codec.BinaryDecoder
static final int BASELENGTH
static final byte[] CHUNK_SEPARATOR
static final int CHUNK_SIZE
static final int EIGHTBIT
static final int FOURBYTE
static final int LOOKUPLENGTH
static final byte PAD
static final int SIGN
static final int SIXTEENBIT
static final int TWENTYFOURBITGROUP
private static byte[] base64Alphabet
private static byte[] lookUpBase64Alphabet
    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String $r1;
        int i0, $i1, $i3;
        byte $b2;

        $r1 = "\r\n";

        $r0 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR> = $r0;

        $r0 = newarray (byte)[255];

        <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet> = $r0;

        $r0 = newarray (byte)[64];

        <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet> = $r0;

        i0 = 0;

     label01:
        if i0 >= 255 goto label02;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r0[i0] = -1;

        i0 = i0 + 1;

        goto label01;

     label02:
        i0 = 90;

     label03:
        if i0 < 65 goto label04;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i1 = i0 + -65;

        $b2 = (byte) $i1;

        $r0[i0] = $b2;

        i0 = i0 + -1;

        goto label03;

     label04:
        i0 = 122;

     label05:
        if i0 < 97 goto label06;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i1 = i0 + -97;

        $i1 = $i1 + 26;

        $b2 = (byte) $i1;

        $r0[i0] = $b2;

        i0 = i0 + -1;

        goto label05;

     label06:
        i0 = 57;

     label07:
        if i0 < 48 goto label08;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i1 = i0 + -48;

        $i1 = $i1 + 52;

        $b2 = (byte) $i1;

        $r0[i0] = $b2;

        i0 = i0 + -1;

        goto label07;

     label08:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r0[43] = 62;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r0[47] = 63;

        i0 = 0;

     label09:
        if i0 > 25 goto label10;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i1 = i0 + 65;

        $b2 = (byte) $i1;

        $r0[i0] = $b2;

        i0 = i0 + 1;

        goto label09;

     label10:
        i0 = 26;

        $i1 = 0;

     label11:
        if i0 > 51 goto label12;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i3 = $i1 + 97;

        $b2 = (byte) $i3;

        $r0[i0] = $b2;

        i0 = i0 + 1;

        $i1 = $i1 + 1;

        goto label11;

     label12:
        i0 = 52;

        $i1 = 0;

     label13:
        if i0 > 61 goto label14;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i3 = $i1 + 48;

        $b2 = (byte) $i3;

        $r0[i0] = $b2;

        i0 = i0 + 1;

        $i1 = $i1 + 1;

        goto label13;

     label14:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $r0[62] = 43;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $r0[63] = 47;

        return;
    }
    public void <init>()
    {
        org.apache.commons.codec.binary.Base64 r0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] decodeBase64(byte[])
    {
        int i0, i1, i2, $i3, $i5, $i9;
        byte[] $r0, r1, $r2;
        byte $b4, b6, b7, b8;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardNonBase64(byte[])>($r0);

        i0 = lengthof $r0;

        if i0 != 0 goto label1;

        $r0 = newarray (byte)[0];

        return $r0;

     label1:
        i0 = lengthof $r0;

        i0 = i0 / 4;

        i1 = 0;

        i2 = lengthof $r0;

     label2:
        $i3 = i2 + -1;

        $b4 = $r0[$i3];

        if $b4 != 61 goto label3;

        i2 = i2 + -1;

        if i2 != 0 goto label2;

        $r0 = newarray (byte)[0];

        return $r0;

     label3:
        i2 = i2 - i0;

        r1 = newarray (byte)[i2];

        i2 = 0;

     label4:
        if i2 >= i0 goto label8;

        $i3 = i2 * 4;

        $i5 = $i3 + 2;

        b6 = $r0[$i5];

        $i5 = $i3 + 3;

        b7 = $r0[$i5];

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b4 = $r0[$i3];

        b8 = $r2[$b4];

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i3 = $i3 + 1;

        $b4 = $r0[$i3];

        $b4 = $r2[$b4];

        if b6 == 61 goto label6;

        if b7 == 61 goto label6;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b6 = $r2[b6];

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b7 = $r2[b7];

        $i3 = b8 << 2;

        $i5 = $b4 >> 4;

        $i3 = $i3 | $i5;

        b8 = (byte) $i3;

        r1[i1] = b8;

        $i3 = i1 + 1;

        $i5 = $b4 & 15;

        $i5 = $i5 << 4;

        $i9 = b6 >> 2;

        $i9 = $i9 & 15;

        $i5 = $i5 | $i9;

        $b4 = (byte) $i5;

        r1[$i3] = $b4;

        $i3 = i1 + 2;

        $i5 = b6 << 6;

        $i5 = $i5 | b7;

        $b4 = (byte) $i5;

        r1[$i3] = $b4;

     label5:
        i1 = i1 + 3;

        i2 = i2 + 1;

        goto label4;

     label6:
        if b6 != 61 goto label7;

        $i3 = b8 << 2;

        $i5 = $b4 >> 4;

        $i3 = $i3 | $i5;

        $b4 = (byte) $i3;

        r1[i1] = $b4;

        goto label5;

     label7:
        if b7 != 61 goto label5;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b7 = $r2[b6];

        $i3 = b8 << 2;

        $i5 = $b4 >> 4;

        $i3 = $i3 | $i5;

        b8 = (byte) $i3;

        r1[i1] = b8;

        $i3 = i1 + 1;

        $i5 = $b4 & 15;

        $i5 = $i5 << 4;

        $i9 = b7 >> 2;

        $i9 = $i9 & 15;

        $i5 = $i5 | $i9;

        $b4 = (byte) $i5;

        r1[$i3] = $b4;

        goto label5;

     label8:
        return r1;
    }
    static byte[] discardNonBase64(byte[])
    {
        byte[] $r0, r1;
        int i0, $i1, i2;
        boolean $z0;
        byte $b3;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        r1 = newarray (byte)[$i1];

        $i1 = 0;

        i2 = 0;

     label1:
        i0 = lengthof $r0;

        if i2 >= i0 goto label3;

        $b3 = $r0[i2];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b3);

        if $z0 == 0 goto label2;

        $b3 = $r0[i2];

        r1[$i1] = $b3;

        $i1 = $i1 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r0 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r0, 0, $i1);

        return $r0;
    }
    static byte[] discardWhitespace(byte[])
    {
        byte[] $r0, r1;
        int i0, $i1, i2;
        byte $b3;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        r1 = newarray (byte)[$i1];

        $i1 = 0;

        i2 = 0;

     label1:
        i0 = lengthof $r0;

        if i2 >= i0 goto label4;

        $b3 = $r0[i2];

        lookupswitch($b3)
        {
            case 9: goto label3;
            case 10: goto label3;
            case 13: goto label3;
            case 32: goto label3;
            default: goto label2;
        };

     label2:
        $b3 = $r0[i2];

        r1[$i1] = $b3;

        $i1 = $i1 + 1;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r0 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r0, 0, $i1);

        return $r0;
    }
    public static byte[] encodeBase64(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($r0, 0);

        return $r0;
    }
    public static byte[] encodeBase64(byte[], boolean)
    {
        byte[] $r0, $r1, $r2, $r3;
        boolean $z0;
        int i0, i1, i2, i3, $i4, i5, i6, i7, i8, $i10;
        double $d0;
        byte b9, b11, b12, b13, b14, $b15;
        float $f0;

        $r0 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        i1 = lengthof $r0;

        i1 = i1 * 8;

        i0 = i1 % 24;

        i2 = i1 / 24;

        i3 = 0;

        if i0 == 0 goto label09;

        i1 = i2 + 1;

        i1 = i1 * 4;

     label01:
        if $z0 == 0 goto label03;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        i3 = lengthof $r1;

        if i3 != 0 goto label10;

        i3 = 0;

     label02:
        $r1 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i4 = lengthof $r1;

        $i4 = $i4 * i3;

        i1 = i1 + $i4;

     label03:
        $r1 = newarray (byte)[i1];

        i5 = 0;

        i6 = 76;

        $i4 = 0;

        i7 = 0;

     label04:
        if i7 >= i2 goto label14;

        i8 = i7 * 3;

        b9 = $r0[i8];

        $i10 = i8 + 1;

        b11 = $r0[$i10];

        i8 = i8 + 2;

        b12 = $r0[i8];

        i8 = b11 & 15;

        b13 = (byte) i8;

        i8 = b9 & 3;

        b14 = (byte) i8;

        i8 = b9 & -128;

        if i8 != 0 goto label11;

        i8 = b9 >> 2;

        b9 = (byte) i8;

     label05:
        i8 = b11 & -128;

        if i8 != 0 goto label12;

        i8 = b11 >> 4;

        b11 = (byte) i8;

     label06:
        i8 = b12 & -128;

        if i8 != 0 goto label13;

        i8 = b12 >> 6;

        $b15 = (byte) i8;

     label07:
        $r2 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        b9 = $r2[b9];

        $r1[i5] = b9;

        i8 = i5 + 1;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i10 = b14 << 4;

        $i10 = $i10 | b11;

        b14 = $r2[$i10];

        $r1[i8] = b14;

        i8 = i5 + 2;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i10 = b13 << 2;

        $i10 = $i10 | $b15;

        b13 = $r2[$i10];

        $r1[i8] = b13;

        i8 = i5 + 3;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i10 = b12 & 63;

        b12 = $r2[$i10];

        $r1[i8] = b12;

        i5 = i5 + 4;

        if $z0 == 0 goto label08;

        if i5 != i6 goto label08;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $r3 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        i6 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, i5, i6);

        $i4 = $i4 + 1;

        i6 = $i4 + 1;

        i6 = i6 * 76;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        i8 = lengthof $r2;

        i8 = i8 * $i4;

        i6 = i6 + i8;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        i8 = lengthof $r2;

        i5 = i5 + i8;

     label08:
        i7 = i7 + 1;

        goto label04;

     label09:
        i1 = i2 * 4;

        goto label01;

     label10:
        $f0 = (float) i1;

        $f0 = $f0 / 76.0F;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i3 = (int) $d0;

        goto label02;

     label11:
        i8 = b9 >> 2;

        i8 = i8 ^ 192;

        b9 = (byte) i8;

        goto label05;

     label12:
        i8 = b11 >> 4;

        i8 = i8 ^ 240;

        b11 = (byte) i8;

        goto label06;

     label13:
        i8 = b12 >> 6;

        i8 = i8 ^ 252;

        $b15 = (byte) i8;

        goto label07;

     label14:
        i2 = i7 * 3;

        if i0 != 8 goto label18;

        b13 = $r0[i2];

        i0 = b13 & 3;

        b12 = (byte) i0;

        i0 = b13 & -128;

        if i0 != 0 goto label17;

        i0 = b13 >> 2;

        b13 = (byte) i0;

     label15:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        b13 = $r0[b13];

        $r1[i5] = b13;

        i0 = i5 + 1;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        i2 = b12 << 4;

        b12 = $r0[i2];

        $r1[i0] = b12;

        i0 = i5 + 2;

        $r1[i0] = 61;

        i5 = i5 + 3;

        $r1[i5] = 61;

     label16:
        if $z0 == 0 goto label23;

        if $i4 >= i3 goto label23;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        i3 = lengthof $r2;

        i1 = i1 - i3;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        i3 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, i1, i3);

        return $r1;

     label17:
        i0 = b13 >> 2;

        i0 = i0 ^ 192;

        b13 = (byte) i0;

        goto label15;

     label18:
        if i0 != 16 goto label16;

        b9 = $r0[i2];

        i0 = i2 + 1;

        b14 = $r0[i0];

        i0 = b14 & 15;

        b12 = (byte) i0;

        i0 = b9 & 3;

        b13 = (byte) i0;

        i0 = b9 & -128;

        if i0 != 0 goto label21;

        i0 = b9 >> 2;

        b9 = (byte) i0;

     label19:
        i0 = b14 & -128;

        if i0 != 0 goto label22;

        i0 = b14 >> 4;

        b14 = (byte) i0;

     label20:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        b9 = $r0[b9];

        $r1[i5] = b9;

        i0 = i5 + 1;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        i2 = b13 << 4;

        i2 = i2 | b14;

        b13 = $r0[i2];

        $r1[i0] = b13;

        i0 = i5 + 2;

        $r0 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        i2 = b12 << 2;

        b12 = $r0[i2];

        $r1[i0] = b12;

        i5 = i5 + 3;

        $r1[i5] = 61;

        goto label16;

     label21:
        i0 = b9 >> 2;

        i0 = i0 ^ 192;

        b9 = (byte) i0;

        goto label19;

     label22:
        i0 = b14 >> 4;

        i0 = i0 ^ 240;

        b14 = (byte) i0;

        goto label20;

     label23:
        return $r1;
    }
    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($r0, 1);

        return $r0;
    }
    public static boolean isArrayByteBase64(byte[])
    {
        int i0, i1;
        byte[] $r0;
        byte $b2;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardWhitespace(byte[])>($r0);

        i0 = lengthof $r0;

        if i0 != 0 goto label1;

        return 1;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $b2 = $r0[i1];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }
    private static boolean isBase64(byte)
    {
        byte $b0;
        byte[] $r0;

        $b0 := @parameter0: byte;

        if $b0 != 61 goto label1;

        return 1;

     label1:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b0 = $r0[$b0];

        if $b0 != -1 goto label2;

        return 0;

     label2:
        return 1;
    }
    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] $r1;
        java.lang.Object $r2;
        boolean $z0;
        org.apache.commons.codec.DecoderException $r3;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof byte[];

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r3.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 decode is not a byte[]");

        throw $r3;

     label1:
        $r1 = (byte[]) $r2;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>($r1);

        return $r1;
    }
    public byte[] decode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        $r1 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r1);

        return $r1;
    }
    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] $r1;
        java.lang.Object $r2;
        boolean $z0;
        org.apache.commons.codec.EncoderException $r3;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof byte[];

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r3.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 encode is not a byte[]");

        throw $r3;

     label1:
        $r1 = (byte[]) $r2;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r1);

        return $r1;
    }
    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        $r1 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($r1, 0);

        return $r1;
    }
