org.apache.commons.codec.binary.Hex extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder org.apache.commons.codec.BinaryDecoder
private static final char[] DIGITS
    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <org.apache.commons.codec.binary.Hex: char[] DIGITS> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.codec.binary.Hex r0;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] decodeHex(char[]) throws org.apache.commons.codec.DecoderException
    {
        char[] $r0;
        int i0, $i1, i2, $i4, $i5;
        byte[] r1;
        org.apache.commons.codec.DecoderException $r2;
        char $c3;
        byte $b6;

        $r0 := @parameter0: char[];

        i0 = lengthof $r0;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r2.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Odd number of characters.");

        throw $r2;

     label1:
        $i1 = i0 >> 1;

        r1 = newarray (byte)[$i1];

        $i1 = 0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $c3 = $r0[i2];

        $i4 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($c3, i2);

        $i4 = $i4 << 4;

        i2 = i2 + 1;

        $c3 = $r0[i2];

        $i5 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($c3, i2);

        $i4 = $i4 | $i5;

        i2 = i2 + 1;

        $i4 = $i4 & 255;

        $b6 = (byte) $i4;

        r1[$i1] = $b6;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return r1;
    }
    public static char[] encodeHex(byte[])
    {
        byte[] $r0;
        int i0, $i1, i2, i3, $i5;
        char[] r1, $r2;
        byte $b4;
        char $c6;

        $r0 := @parameter0: byte[];

        i0 = lengthof $r0;

        $i1 = i0 << 1;

        r1 = newarray (char)[$i1];

        $i1 = 0;

        i2 = 0;

     label1:
        if $i1 >= i0 goto label2;

        i3 = i2 + 1;

        $r2 = <org.apache.commons.codec.binary.Hex: char[] DIGITS>;

        $b4 = $r0[$i1];

        $i5 = $b4 & 240;

        $i5 = $i5 >>> 4;

        $c6 = $r2[$i5];

        r1[i2] = $c6;

        i2 = i3 + 1;

        $r2 = <org.apache.commons.codec.binary.Hex: char[] DIGITS>;

        $b4 = $r0[$i1];

        $i5 = $b4 & 15;

        $c6 = $r2[$i5];

        r1[i3] = $c6;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    protected static int toDigit(char, int) throws org.apache.commons.codec.DecoderException
    {
        char $c0;
        int $i1, $i2;
        org.apache.commons.codec.DecoderException $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;

        $c0 := @parameter0: char;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c0, 16);

        if $i2 != -1 goto label1;

        $r0 = new org.apache.commons.codec.DecoderException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal hexadecimal charcter ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" at index ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label1:
        return $i2;
    }
    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Hex r0;
        java.lang.ClassCastException r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.String r3;
        char[] $r4;
        byte[] $r5;
        org.apache.commons.codec.DecoderException $r6;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        r2 := @parameter0: java.lang.Object;

        $z0 = r2 instanceof java.lang.String;

        if $z0 == 0 goto label4;

     label1:
        r3 = (java.lang.String) r2;

        $r4 = virtualinvoke r3.<java.lang.String: char[] toCharArray()>();

     label2:
        $r5 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r4);

     label3:
        return $r5;

     label4:
        $r4 = (char[]) r2;

     label5:
        goto label2;

     label6:
        r1 := @caughtexception;

        $r6 = new org.apache.commons.codec.DecoderException;

        r3 = virtualinvoke r1.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>(r3);

        throw $r6;

        catch java.lang.ClassCastException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label2 to label3 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label6;
    }
    public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Hex r0;
        byte[] $r1;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        $r1 := @parameter0: byte[];

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r1);

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $r1 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r3);

        return $r1;
    }
    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.Hex r0;
        java.lang.ClassCastException r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.String r3;
        byte[] $r4;
        char[] $r5;
        org.apache.commons.codec.EncoderException $r6;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        r2 := @parameter0: java.lang.Object;

        $z0 = r2 instanceof java.lang.String;

        if $z0 == 0 goto label4;

     label1:
        r3 = (java.lang.String) r2;

        $r4 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

     label2:
        $r5 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r4);

     label3:
        return $r5;

     label4:
        $r4 = (byte[]) r2;

     label5:
        goto label2;

     label6:
        r1 := @caughtexception;

        $r6 = new org.apache.commons.codec.EncoderException;

        r3 = virtualinvoke r1.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>(r3);

        throw $r6;

        catch java.lang.ClassCastException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label2 to label3 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label6;
    }
    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.Hex r0;
        byte[] $r1;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        $r1 := @parameter0: byte[];

        $r2 = new java.lang.String;

        $r3 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r1);

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r3);

        $r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        return $r1;
    }
