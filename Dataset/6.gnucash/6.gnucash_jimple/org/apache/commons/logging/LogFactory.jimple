org.apache.commons.logging.LogFactory extends java.lang.Object
public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY
public static final java.lang.String FACTORY_DEFAULT
public static final java.lang.String FACTORY_PROPERTIES
public static final java.lang.String FACTORY_PROPERTY
public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY
public static final java.lang.String PRIORITY_KEY
protected static final java.lang.String SERVICE_ID
public static final java.lang.String TCCL_KEY
static java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J
protected static java.util.Hashtable factories
static org.apache.commons.logging.LogFactory logFactory
protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory
    static void <clinit>()
    {
        org.apache.commons.logging.impl.SLF4JLogFactory $r0;

        <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J> = "http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j";

        $r0 = new org.apache.commons.logging.impl.SLF4JLogFactory;

        specialinvoke $r0.<org.apache.commons.logging.impl.SLF4JLogFactory: void <init>()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory logFactory> = $r0;

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = null;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        return;
    }
    protected void <init>()
    {
        org.apache.commons.logging.LogFactory r0;

        r0 := @this: org.apache.commons.logging.LogFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String $r0;
        java.lang.ClassLoader $r1;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.ClassLoader;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [factoryClass] is not supported in jcl-over-slf4j. See also ");

        $r0 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }
    protected static java.lang.ClassLoader directGetContextClassLoader()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [directGetContextClassLoader] is not supported in jcl-over-slf4j. See also ");

        $r2 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }
    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.Class;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [getClassLoader] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }
    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [getContextClassLoader] is not supported in jcl-over-slf4j. See also ");

        $r2 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }
    public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.LogFactory r0;

        r0 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory logFactory>;

        return r0;
    }
    public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class $r0;
        org.apache.commons.logging.LogFactory $r1;
        org.apache.commons.logging.Log $r2;

        $r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.Class)>($r0);

        return $r2;
    }
    public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String $r0;
        org.apache.commons.logging.LogFactory $r1;
        org.apache.commons.logging.Log $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)>($r0);

        return $r2;
    }
    protected static boolean isDiagnosticsEnabled()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [isDiagnosticsEnabled] is not supported in jcl-over-slf4j. See also ");

        $r2 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }
    protected static void logRawDiagnostic(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [logRawDiagnostic] is not supported in jcl-over-slf4j. See also ");

        $r0 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }
    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String $r0;
        java.lang.ClassLoader $r1;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.ClassLoader;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [newFactory] is not supported in jcl-over-slf4j. See also ");

        $r0 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }
    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.String $r0;
        java.lang.ClassLoader $r1, $r2;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.ClassLoader;

        $r2 := @parameter2: java.lang.ClassLoader;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation [logRawDiagnostic] is not supported in jcl-over-slf4j. See also ");

        $r0 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r0);

        throw $r3;
    }
    public static java.lang.String objectId(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public static void release(java.lang.ClassLoader)
    {
        java.lang.ClassLoader $r0;

        $r0 := @parameter0: java.lang.ClassLoader;

        return;
    }
    public static void releaseAll()
    {
        return;
    }
public abstract java.lang.Object getAttribute(java.lang.String) { 
// no body
} 
public abstract java.lang.String[] getAttributeNames() { 
// no body
} 
public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException { 
// no body
} 
public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException { 
// no body
} 
public abstract void release() { 
// no body
} 
public abstract void removeAttribute(java.lang.String) { 
// no body
} 
public abstract void setAttribute(java.lang.String, java.lang.Object) { 
// no body
} 
