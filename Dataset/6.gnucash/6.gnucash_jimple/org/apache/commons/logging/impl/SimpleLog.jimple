org.apache.commons.logging.impl.SimpleLog extends java.lang.Object implements org.apache.commons.logging.Log java.io.Serializable
protected static final java.lang.String DEFAULT_DATE_TIME_FORMAT
public static final int LOG_LEVEL_ALL
public static final int LOG_LEVEL_DEBUG
public static final int LOG_LEVEL_ERROR
public static final int LOG_LEVEL_FATAL
public static final int LOG_LEVEL_INFO
public static final int LOG_LEVEL_OFF
public static final int LOG_LEVEL_TRACE
public static final int LOG_LEVEL_WARN
protected static java.text.DateFormat dateFormatter
protected static java.lang.String dateTimeFormat
private static final long serialVersionUID
protected static boolean showDateTime
protected static boolean showLogName
protected static boolean showShortName
protected static final java.util.Properties simpleLogProps
protected static final java.lang.String systemPrefix
protected int currentLogLevel
protected java.lang.String logName
private java.lang.String shortLogName
    static void <clinit>()
    {
        java.lang.IllegalArgumentException r0;
        java.util.Properties $r1;
        java.io.InputStream $r2;
        boolean $z0;
        java.lang.String $r3;
        java.text.SimpleDateFormat $r4;
        java.io.IOException $r5;

        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps> = $r1;

        <org.apache.commons.logging.impl.SimpleLog: boolean showLogName> = 0;

        <org.apache.commons.logging.impl.SimpleLog: boolean showShortName> = 1;

        <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime> = 0;

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat> = "yyyy/MM/dd HH:mm:ss:SSS zzz";

        <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter> = null;

        $r2 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)>("simplelog.properties");

        if $r2 == null goto label2;

        $r1 = <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps>;

     label1:
        virtualinvoke $r1.<java.util.Properties: void load(java.io.InputStream)>($r2);

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label2:
        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showLogName>;

        $z0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showlogname", $z0);

        <org.apache.commons.logging.impl.SimpleLog: boolean showLogName> = $z0;

        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showShortName>;

        $z0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showShortLogname", $z0);

        <org.apache.commons.logging.impl.SimpleLog: boolean showShortName> = $z0;

        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime>;

        $z0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showdatetime", $z0);

        <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime> = $z0;

        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime>;

        if $z0 == 0 goto label7;

        $r3 = <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat>;

        $r3 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.simplelog.dateTimeFormat", $r3);

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat> = $r3;

        $r4 = new java.text.SimpleDateFormat;

        $r3 = <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat>;

     label3:
        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r3);

     label4:
        <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter> = $r4;

        return;

     label5:
        r0 := @caughtexception;

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat> = "yyyy/MM/dd HH:mm:ss:SSS zzz";

        $r4 = new java.text.SimpleDateFormat;

        $r3 = <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat>;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r3);

        <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter> = $r4;

        return;

     label6:
        $r5 := @caughtexception;

        goto label2;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.String $r1, $r3, $r4;
        java.lang.StringBuilder $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName> = null;

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName> = null;

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName> = $r1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(3);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.simplelog.log.");

        $r3 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

     label01:
        if $r3 != null goto label02;

        if $i0 <= -1 goto label02;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r1 = $r4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.simplelog.log.");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        goto label01;

     label02:
        if $r3 != null goto label03;

        $r3 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>("org.apache.commons.logging.simplelog.defaultlog");

     label03:
        $r1 = "all";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label04;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(0);

        return;

     label04:
        $r1 = "trace";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label05;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(1);

        return;

     label05:
        $r1 = "debug";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label06;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(2);

        return;

     label06:
        $r1 = "info";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label07;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(3);

        return;

     label07:
        $r1 = "warn";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label08;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(4);

        return;

     label08:
        $r1 = "error";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label09;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(5);

        return;

     label09:
        $r1 = "fatal";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label10;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(6);

        return;

     label10:
        $r1 = "off";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label11;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(7);

     label11:
        return;
    }
    static java.lang.ClassLoader access$000()
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()>();

        return $r0;
    }
    private static boolean getBooleanProperty(java.lang.String, boolean)
    {
        java.lang.String $r0, $r1;
        boolean z0;

        $r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r0);

        if $r1 != null goto label1;

        return z0;

     label1:
        $r0 = "true";

        z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return z0;
    }
    private static java.lang.ClassLoader getContextClassLoader()
    {
        java.lang.reflect.InvocationTargetException r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;
        java.lang.Thread $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        boolean $z0;
        org.apache.commons.logging.LogConfigurationException $r7;
        java.lang.NoSuchMethodException $r8;
        java.lang.IllegalAccessException $r9;

        r1 = null;

        $r2 = class "Ljava/lang/Thread;";

     label01:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", null);

     label02:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, null);

     label03:
        r1 = (java.lang.ClassLoader) $r5;

     label04:
        if r1 != null goto label12;

        $r2 = class "Lorg/apache/commons/logging/impl/SimpleLog;";

        r1 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return r1;

     label05:
        r0 := @caughtexception;

     label06:
        $r6 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label07:
        $z0 = $r6 instanceof java.lang.SecurityException;

        if $z0 != 0 goto label04;

        $r7 = new org.apache.commons.logging.LogConfigurationException;

     label08:
        $r6 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r7.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r6);

     label09:
        throw $r7;

     label10:
        $r8 := @caughtexception;

        goto label04;

     label11:
        $r9 := @caughtexception;

        goto label04;

     label12:
        return r1;

        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label02 to label03 with label11;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label05;
        catch java.lang.NoSuchMethodException from label02 to label03 with label10;
        catch java.lang.NoSuchMethodException from label06 to label07 with label10;
        catch java.lang.NoSuchMethodException from label08 to label09 with label10;
    }
    private static java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        org.apache.commons.logging.impl.SimpleLog$1 $r2;
        java.io.InputStream $r3;

        $r0 := @parameter0: java.lang.String;

        $r2 = new org.apache.commons.logging.impl.SimpleLog$1;

        specialinvoke $r2.<org.apache.commons.logging.impl.SimpleLog$1: void <init>(java.lang.String)>($r0);

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r3 = (java.io.InputStream) $r1;

        return $r3;
    }
    private static java.lang.String getStringProperty(java.lang.String)
    {
        java.lang.String $r0, r1, $r2;
        java.util.Properties $r3;
        java.lang.SecurityException $r4;

        $r0 := @parameter0: java.lang.String;

        r1 = null;

     label1:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r0);

     label2:
        r1 = $r2;

     label3:
        if r1 != null goto label5;

        $r3 = <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps>;

        $r0 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r0);

        return $r0;

     label4:
        $r4 := @caughtexception;

        goto label3;

     label5:
        return r1;

        catch java.lang.SecurityException from label1 to label2 with label4;
    }
    private static java.lang.String getStringProperty(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, r1;

        $r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r0);

        if $r0 != null goto label1;

        return r1;

     label1:
        return $r0;
    }
    public final void debug(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(2, $r1, null);

     label1:
        return;
    }
    public final void debug(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(2, $r1, $r2);

     label1:
        return;
    }
    public final void error(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(5, $r1, null);

     label1:
        return;
    }
    public final void error(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(5, $r1, $r2);

     label1:
        return;
    }
    public final void fatal(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(6, $r1, null);

     label1:
        return;
    }
    public final void fatal(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(6, $r1, $r2);

     label1:
        return;
    }
    public int getLevel()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int i0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        i0 = r0.<org.apache.commons.logging.impl.SimpleLog: int currentLogLevel>;

        return i0;
    }
    public final void info(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(3, $r1, null);

     label1:
        return;
    }
    public final void info(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(3, $r1, $r2);

     label1:
        return;
    }
    public final boolean isDebugEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2);

        return $z0;
    }
    public final boolean isErrorEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5);

        return $z0;
    }
    public final boolean isFatalEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6);

        return $z0;
    }
    public final boolean isInfoEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3);

        return $z0;
    }
    protected boolean isLevelEnabled(int)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.logging.impl.SimpleLog: int currentLogLevel>;

        if $i0 < $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public final boolean isTraceEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1);

        return $z0;
    }
    public final boolean isWarnEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4);

        return $z0;
    }
    protected void log(int, java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.lang.StringBuffer r3, $r10;
        java.io.PrintWriter r4;
        java.io.StringWriter r5;
        boolean $z0;
        java.text.DateFormat $r6;
        java.util.Date $r7;
        java.lang.String $r8, $r9;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Throwable;

        r3 = new java.lang.StringBuffer;

        specialinvoke r3.<java.lang.StringBuffer: void <init>()>();

        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime>;

        if $z0 == 0 goto label01;

        $r6 = <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter>;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $r8 = virtualinvoke $r6.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r7);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label01:
        lookupswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label11;
            default: goto label02;
        };

     label02:
        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showShortName>;

        if $z0 == 0 goto label12;

        $r8 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName>;

        if $r8 != null goto label03;

        $r8 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName>;

        $r9 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName>;

        $i0 = virtualinvoke $r9.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i0 = $i0 + 1;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i0);

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName> = $r8;

        $r8 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName>;

        $r9 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName>;

        $i0 = virtualinvoke $r9.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i0 = $i0 + 1;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i0);

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName> = $r8;

     label03:
        $r8 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r10 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

     label04:
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        if $r2 == null goto label05;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        $r8 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r5 = new java.io.StringWriter;

        specialinvoke r5.<java.io.StringWriter: void <init>(int)>(1024);

        r4 = new java.io.PrintWriter;

        specialinvoke r4.<java.io.PrintWriter: void <init>(java.io.Writer)>(r5);

        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r4);

        virtualinvoke r4.<java.io.PrintWriter: void close()>();

        $r8 = virtualinvoke r5.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

     label05:
        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)>(r3);

        return;

     label06:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[TRACE] ");

        goto label02;

     label07:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[DEBUG] ");

        goto label02;

     label08:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[INFO] ");

        goto label02;

     label09:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARN] ");

        goto label02;

     label10:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ERROR] ");

        goto label02;

     label11:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[FATAL] ");

        goto label02;

     label12:
        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showLogName>;

        if $z0 == 0 goto label04;

        $r8 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r10 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        goto label04;
    }
    public void setLevel(int)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int $i0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $i0 := @parameter0: int;

        r0.<org.apache.commons.logging.impl.SimpleLog: int currentLogLevel> = $i0;

        return;
    }
    public final void trace(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(1, $r1, null);

     label1:
        return;
    }
    public final void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(1, $r1, $r2);

     label1:
        return;
    }
    public final void warn(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(4, $r1, null);

     label1:
        return;
    }
    public final void warn(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(4, $r1, $r2);

     label1:
        return;
    }
    protected void write(java.lang.StringBuffer)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.StringBuffer $r1;
        java.io.PrintStream $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $r1 := @parameter0: java.lang.StringBuffer;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }
