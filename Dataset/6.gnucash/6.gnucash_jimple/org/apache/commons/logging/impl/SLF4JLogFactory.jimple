org.apache.commons.logging.impl.SLF4JLogFactory extends org.apache.commons.logging.LogFactory
public static final java.lang.String LOG_PROPERTY
protected java.util.Hashtable attributes
java.util.Map loggerMap
    public void <init>()
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.util.Hashtable $r1;
        java.util.HashMap $r2;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        specialinvoke r0.<org.apache.commons.logging.LogFactory: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap> = $r2;

        return;
    }
    public java.lang.Object getAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        $r2 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        return $r2;
    }
    public java.lang.String[] getAttributeNames()
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.util.ArrayList r1;
        java.lang.String[] r2;
        java.util.Hashtable $r3;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (java.lang.String) $r5;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label3:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label4;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.lang.String) $r5;

        r2[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return r2;
    }
    public org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.SLF4JLogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)>($r2);

        return $r3;
    }
    public org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.String $r1;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r5, r6;
        org.slf4j.Logger $r7;
        boolean $z0;
        org.apache.commons.logging.impl.SLF4JLocationAwareLog r8;
        org.slf4j.spi.LocationAwareLogger r9;
        org.apache.commons.logging.impl.SLF4JLog r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap>;

        entermonitor $r2;

     label1:
        $r3 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (org.apache.commons.logging.Log) $r4;

        r6 = $r5;

        if $r5 != null goto label3;

        $r7 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r1);

        $z0 = $r7 instanceof org.slf4j.spi.LocationAwareLogger;

        if $z0 == 0 goto label5;

        r8 = new org.apache.commons.logging.impl.SLF4JLocationAwareLog;

        r9 = (org.slf4j.spi.LocationAwareLogger) $r7;

        specialinvoke r8.<org.apache.commons.logging.impl.SLF4JLocationAwareLog: void <init>(org.slf4j.spi.LocationAwareLogger)>(r9);

        r6 = r8;

     label2:
        $r3 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Map loggerMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r6);

     label3:
        exitmonitor $r2;

     label4:
        return r6;

     label5:
        r10 = new org.apache.commons.logging.impl.SLF4JLog;

        specialinvoke r10.<org.apache.commons.logging.impl.SLF4JLog: void <init>(org.slf4j.Logger)>($r7);

        r6 = r10;

        goto label2;

     label6:
        $r11 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r11;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }
    public void release()
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARN: The method ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(class "Lorg/apache/commons/logging/impl/SLF4JLogFactory;");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#release() was invoked.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("WARN: Please see http://www.slf4j.org/codes.html#release for an explanation.");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void flush()>();

        return;
    }
    public void removeAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }
    public void setAttribute(java.lang.String, java.lang.Object)
    {
        org.apache.commons.logging.impl.SLF4JLogFactory r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.commons.logging.impl.SLF4JLogFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        return;

     label1:
        $r3 = r0.<org.apache.commons.logging.impl.SLF4JLogFactory: java.util.Hashtable attributes>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
