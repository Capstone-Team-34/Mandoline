org.apache.commons.cli.Option extends java.lang.Object implements java.lang.Cloneable java.io.Serializable
public static final int UNINITIALIZED
public static final int UNLIMITED_VALUES
private static final long serialVersionUID
private java.lang.String argName
private java.lang.String description
private java.lang.String longOpt
private int numberOfArgs
private java.lang.String opt
private boolean optionalArg
private boolean required
private java.lang.Object type
private java.util.List values
private char valuesep
    public void <init>(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.cli.Option: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String)>($r1, null, 0, $r2);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, boolean, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.cli.Option: java.lang.String argName> = "arg";

        r0.<org.apache.commons.cli.Option: int numberOfArgs> = -1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.cli.Option: java.util.List values> = $r4;

        staticinvoke <org.apache.commons.cli.OptionValidator: void validateOption(java.lang.String)>($r1);

        r0.<org.apache.commons.cli.Option: java.lang.String opt> = $r1;

        r0.<org.apache.commons.cli.Option: java.lang.String longOpt> = $r2;

        if $z0 == 0 goto label1;

        r0.<org.apache.commons.cli.Option: int numberOfArgs> = 1;

     label1:
        r0.<org.apache.commons.cli.Option: java.lang.String description> = $r3;

        return;
    }
    public void <init>(java.lang.String, boolean, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.commons.cli.Option: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String)>($r1, null, $z0, $r2);

        return;
    }
    private void add(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.util.List $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        $i1 = $i1 + -1;

        if $i0 <= $i1 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot add value, list full.");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    private boolean hasNoValues()
    {
        org.apache.commons.cli.Option r0;
        boolean $z0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }
    private void processValue(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        char $c0;
        int $i1, $i2, $i3;
        java.util.List $r2;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.cli.Option: boolean hasValueSeparator()>();

        if $z0 == 0 goto label2;

        $c0 = virtualinvoke r0.<org.apache.commons.cli.Option: char getValueSeparator()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($c0);

     label1:
        if $i1 == -1 goto label2;

        $r2 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i3 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        $i3 = $i3 + -1;

        if $i2 != $i3 goto label3;

     label2:
        specialinvoke r0.<org.apache.commons.cli.Option: void add(java.lang.String)>($r1);

        return;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        specialinvoke r0.<org.apache.commons.cli.Option: void add(java.lang.String)>($r3);

        $i1 = $i1 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r1 = $r3;

        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($c0);

        goto label1;
    }
    public boolean addValue(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");

        throw $r2;
    }
    void addValueForProcessing(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;
        int $i0;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        lookupswitch($i0)
        {
            case -1: goto label2;
            default: goto label1;
        };

     label1:
        specialinvoke r0.<org.apache.commons.cli.Option: void processValue(java.lang.String)>($r1);

        return;

     label2:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("NO_ARGS_ALLOWED");

        throw $r2;
    }
    void clearValues()
    {
        org.apache.commons.cli.Option r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }
    public java.lang.Object clone()
    {
        org.apache.commons.cli.Option r0, r3;
        java.lang.CloneNotSupportedException r1;
        java.lang.Object $r2;
        java.util.ArrayList $r4;
        java.util.List $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuffer $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.cli.Option;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        r3 = (org.apache.commons.cli.Option) $r2;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.cli.Option: java.util.List values>;

     label3:
        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

     label4:
        r3.<org.apache.commons.cli.Option: java.util.List values> = $r4;

        return r3;

     label5:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("A CloneNotSupportedException was thrown: ");

        $r8 = virtualinvoke r1.<java.lang.CloneNotSupportedException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
        catch java.lang.CloneNotSupportedException from label3 to label4 with label5;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.cli.Option r0, r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

     label2:
        return 0;

     label3:
        r4 = (org.apache.commons.cli.Option) $r1;

        $r5 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        if $r5 == null goto label5;

        $r5 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        $r6 = r4.<org.apache.commons.cli.Option: java.lang.String opt>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label6;

     label4:
        return 0;

     label5:
        $r5 = r4.<org.apache.commons.cli.Option: java.lang.String opt>;

        if $r5 != null goto label4;

     label6:
        $r5 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        if $r5 == null goto label8;

        $r5 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        $r6 = r4.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label9;

     label7:
        return 0;

     label8:
        $r5 = r4.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        if $r5 == null goto label9;

        goto label7;

     label9:
        return 1;
    }
    public java.lang.String getArgName()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.Option;

        r1 = r0.<org.apache.commons.cli.Option: java.lang.String argName>;

        return r1;
    }
    public int getArgs()
    {
        org.apache.commons.cli.Option r0;
        int i0;

        r0 := @this: org.apache.commons.cli.Option;

        i0 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        return i0;
    }
    public java.lang.String getDescription()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.Option;

        r1 = r0.<org.apache.commons.cli.Option: java.lang.String description>;

        return r1;
    }
    public int getId()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;
        char $c0;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Option: java.lang.String getKey()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        return $c0;
    }
    java.lang.String getKey()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        if $r1 != null goto label1;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        return $r1;

     label1:
        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        return $r1;
    }
    public java.lang.String getLongOpt()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.Option;

        r1 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        return r1;
    }
    public java.lang.String getOpt()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.Option;

        r1 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        return r1;
    }
    public java.lang.Object getType()
    {
        org.apache.commons.cli.Option r0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.cli.Option;

        r1 = r0.<org.apache.commons.cli.Option: java.lang.Object type>;

        return r1;
    }
    public java.lang.String getValue()
    {
        org.apache.commons.cli.Option r0;
        boolean $z0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.cli.Option;

        $z0 = specialinvoke r0.<org.apache.commons.cli.Option: boolean hasNoValues()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }
    public java.lang.String getValue(int) throws java.lang.IndexOutOfBoundsException
    {
        org.apache.commons.cli.Option r0;
        int $i0;
        boolean $z0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.cli.Option;

        $i0 := @parameter0: int;

        $z0 = specialinvoke r0.<org.apache.commons.cli.Option: boolean hasNoValues()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }
    public java.lang.String getValue(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.cli.Option: java.lang.String getValue()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        return $r1;
    }
    public char getValueSeparator()
    {
        org.apache.commons.cli.Option r0;
        char c0;

        r0 := @this: org.apache.commons.cli.Option;

        c0 = r0.<org.apache.commons.cli.Option: char valuesep>;

        return c0;
    }
    public java.lang.String[] getValues()
    {
        org.apache.commons.cli.Option r0;
        boolean $z0;
        java.util.List $r1, $r2;
        int $i0;
        java.lang.String[] $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.cli.Option;

        $z0 = specialinvoke r0.<org.apache.commons.cli.Option: boolean hasNoValues()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        $r2 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (java.lang.String[]) $r4;

        return $r3;
    }
    public java.util.List getValuesList()
    {
        org.apache.commons.cli.Option r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.cli.Option;

        r1 = r0.<org.apache.commons.cli.Option: java.util.List values>;

        return r1;
    }
    public boolean hasArg()
    {
        org.apache.commons.cli.Option r0;
        int $i0;

        r0 := @this: org.apache.commons.cli.Option;

        $i0 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        if $i0 > 0 goto label1;

        $i0 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        if $i0 != -2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean hasArgName()
    {
        org.apache.commons.cli.Option r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String argName>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String argName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean hasArgs()
    {
        org.apache.commons.cli.Option r0;
        int $i0;

        r0 := @this: org.apache.commons.cli.Option;

        $i0 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        if $i0 > 1 goto label2;

        $i0 = r0.<org.apache.commons.cli.Option: int numberOfArgs>;

        if $i0 != -2 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }
    public boolean hasLongOpt()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean hasOptionalArg()
    {
        org.apache.commons.cli.Option r0;
        boolean z0;

        r0 := @this: org.apache.commons.cli.Option;

        z0 = r0.<org.apache.commons.cli.Option: boolean optionalArg>;

        return z0;
    }
    public boolean hasValueSeparator()
    {
        org.apache.commons.cli.Option r0;
        char $c0;

        r0 := @this: org.apache.commons.cli.Option;

        $c0 = r0.<org.apache.commons.cli.Option: char valuesep>;

        if $c0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int hashCode()
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.cli.Option;

        $i0 = 0;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        if $r1 == null goto label3;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

     label1:
        $i1 = $i1 * 31;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        if $r1 == null goto label2;

        $r1 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

     label2:
        $i0 = $i1 + $i0;

        return $i0;

     label3:
        $i1 = 0;

        goto label1;
    }
    public boolean isRequired()
    {
        org.apache.commons.cli.Option r0;
        boolean z0;

        r0 := @this: org.apache.commons.cli.Option;

        z0 = r0.<org.apache.commons.cli.Option: boolean required>;

        return z0;
    }
    public void setArgName(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.Option: java.lang.String argName> = $r1;

        return;
    }
    public void setArgs(int)
    {
        org.apache.commons.cli.Option r0;
        int $i0;

        r0 := @this: org.apache.commons.cli.Option;

        $i0 := @parameter0: int;

        r0.<org.apache.commons.cli.Option: int numberOfArgs> = $i0;

        return;
    }
    public void setDescription(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.Option: java.lang.String description> = $r1;

        return;
    }
    public void setLongOpt(java.lang.String)
    {
        org.apache.commons.cli.Option r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.Option: java.lang.String longOpt> = $r1;

        return;
    }
    public void setOptionalArg(boolean)
    {
        org.apache.commons.cli.Option r0;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.Option;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.cli.Option: boolean optionalArg> = $z0;

        return;
    }
    public void setRequired(boolean)
    {
        org.apache.commons.cli.Option r0;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.Option;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.cli.Option: boolean required> = $z0;

        return;
    }
    public void setType(java.lang.Object)
    {
        org.apache.commons.cli.Option r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 := @parameter0: java.lang.Object;

        r0.<org.apache.commons.cli.Option: java.lang.Object type> = $r1;

        return;
    }
    public void setValueSeparator(char)
    {
        org.apache.commons.cli.Option r0;
        char $c0;

        r0 := @this: org.apache.commons.cli.Option;

        $c0 := @parameter0: char;

        r0.<org.apache.commons.cli.Option: char valuesep> = $c0;

        return;
    }
    public java.lang.String toString()
    {
        org.apache.commons.cli.Option r0;
        java.lang.StringBuffer $r1, $r3;
        java.lang.String $r2;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.cli.Option;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ option: ");

        $r2 = r0.<org.apache.commons.cli.Option: java.lang.String opt>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r2 = r0.<org.apache.commons.cli.Option: java.lang.String longOpt>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $z0 = virtualinvoke r0.<org.apache.commons.cli.Option: boolean hasArgs()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ARG...]");

     label2:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" :: ");

        $r2 = r0.<org.apache.commons.cli.Option: java.lang.String description>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = r0.<org.apache.commons.cli.Option: java.lang.Object type>;

        if $r4 == null goto label3;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" :: ");

        $r4 = r0.<org.apache.commons.cli.Option: java.lang.Object type>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label4:
        $z0 = virtualinvoke r0.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [ARG]");

        goto label2;
    }
