org.apache.commons.cli.HelpFormatter extends java.lang.Object
public static final java.lang.String DEFAULT_ARG_NAME
public static final int DEFAULT_DESC_PAD
public static final int DEFAULT_LEFT_PAD
public static final java.lang.String DEFAULT_LONG_OPT_PREFIX
public static final java.lang.String DEFAULT_OPT_PREFIX
public static final java.lang.String DEFAULT_SYNTAX_PREFIX
public static final int DEFAULT_WIDTH
public java.lang.String defaultArgName
public int defaultDescPad
public int defaultLeftPad
public java.lang.String defaultLongOptPrefix
public java.lang.String defaultNewLine
public java.lang.String defaultOptPrefix
public java.lang.String defaultSyntaxPrefix
public int defaultWidth
protected java.util.Comparator optionComparator
    public void <init>()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;
        org.apache.commons.cli.HelpFormatter$OptionComparator $r2;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth> = 74;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad> = 1;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultDescPad> = 3;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix> = "usage: ";

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine> = $r1;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix> = "-";

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix> = "--";

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultArgName> = "arg";

        $r2 = new org.apache.commons.cli.HelpFormatter$OptionComparator;

        specialinvoke $r2.<org.apache.commons.cli.HelpFormatter$OptionComparator: void <init>(org.apache.commons.cli.HelpFormatter$1)>(null);

        r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator> = $r2;

        return;
    }
    private static void appendOption(java.lang.StringBuffer, org.apache.commons.cli.Option, boolean)
    {
        java.lang.StringBuffer $r0, $r3;
        org.apache.commons.cli.Option $r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.StringBuffer;

        $r1 := @parameter1: org.apache.commons.cli.Option;

        $z0 := @parameter2: boolean;

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

     label1:
        $r2 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        if $r2 == null goto label4;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label2:
        $z1 = virtualinvoke $r1.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z1 == 0 goto label3;

        $z1 = virtualinvoke $r1.<org.apache.commons.cli.Option: boolean hasArgName()>();

        if $z1 == 0 goto label3;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String getArgName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

     label3:
        if $z0 != 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        return;

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label2;

     label5:
        return;
    }
    private void appendOptionGroup(java.lang.StringBuffer, org.apache.commons.cli.OptionGroup)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.StringBuffer $r1;
        org.apache.commons.cli.OptionGroup $r2;
        java.util.ArrayList r3;
        boolean $z0;
        java.util.Collection $r4;
        java.util.Comparator $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        org.apache.commons.cli.Option $r8;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.StringBuffer;

        $r2 := @parameter1: org.apache.commons.cli.OptionGroup;

        $z0 = virtualinvoke $r2.<org.apache.commons.cli.OptionGroup: boolean isRequired()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

     label1:
        r3 = new java.util.ArrayList;

        $r4 = virtualinvoke $r2.<org.apache.commons.cli.OptionGroup: java.util.Collection getOptions()>();

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator getOptionComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r3, $r5);

        $r6 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.cli.Option) $r7;

        staticinvoke <org.apache.commons.cli.HelpFormatter: void appendOption(java.lang.StringBuffer,org.apache.commons.cli.Option,boolean)>($r1, $r8, 1);

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" | ");

        goto label2;

     label3:
        $z0 = virtualinvoke $r2.<org.apache.commons.cli.OptionGroup: boolean isRequired()>();

        if $z0 != 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

     label4:
        return;
    }
    protected java.lang.String createPadding(int)
    {
        org.apache.commons.cli.HelpFormatter r0;
        int $i0, i1;
        java.lang.StringBuffer r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 := @parameter0: int;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
    protected int findWrapPos(java.lang.String, int, int)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, i3;
        char $c4;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(10, $i1);

        i3 = $i2;

        if $i2 == -1 goto label1;

        if $i2 <= $i0 goto label2;

     label1:
        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(9, $i1);

        i3 = $i2;

        if $i2 == -1 goto label3;

        if $i2 > $i0 goto label3;

     label2:
        $i0 = i3 + 1;

        return $i0;

     label3:
        i3 = $i1 + $i0;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i3 >= $i2 goto label9;

        i3 = $i1 + $i0;

     label4:
        if i3 < $i1 goto label5;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i3);

        if $c4 == 32 goto label5;

        if $c4 == 10 goto label5;

        if $c4 == 13 goto label5;

        i3 = i3 + -1;

        goto label4;

     label5:
        if i3 <= $i1 goto label6;

        return i3;

     label6:
        $i0 = $i1 + $i0;

     label7:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > $i1 goto label8;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        if $c4 == 32 goto label8;

        if $c4 == 10 goto label8;

        if $c4 == 13 goto label8;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == $i1 goto label9;

        return $i0;

     label9:
        return -1;
    }
    public java.lang.String getArgName()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultArgName>;

        return r1;
    }
    public int getDescPadding()
    {
        org.apache.commons.cli.HelpFormatter r0;
        int i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultDescPad>;

        return i0;
    }
    public int getLeftPadding()
    {
        org.apache.commons.cli.HelpFormatter r0;
        int i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad>;

        return i0;
    }
    public java.lang.String getLongOptPrefix()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix>;

        return r1;
    }
    public java.lang.String getNewLine()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        return r1;
    }
    public java.lang.String getOptPrefix()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix>;

        return r1;
    }
    public java.util.Comparator getOptionComparator()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.util.Comparator r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 = r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator>;

        return r1;
    }
    public java.lang.String getSyntaxPrefix()
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        return r1;
    }
    public int getWidth()
    {
        org.apache.commons.cli.HelpFormatter r0;
        int i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        return i0;
    }
    public void printHelp(int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        int $i0;
        java.lang.String $r1, $r2, $r4;
        org.apache.commons.cli.Options $r3;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: org.apache.commons.cli.Options;

        $r4 := @parameter4: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($i0, $r1, $r2, $r3, $r4, 0);

        return;
    }
    public void printHelp(int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String, boolean)
    {
        org.apache.commons.cli.HelpFormatter r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r2, $r4;
        org.apache.commons.cli.Options $r3;
        boolean $z0;
        java.io.PrintWriter r5;
        java.io.PrintStream $r6;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: org.apache.commons.cli.Options;

        $r4 := @parameter4: java.lang.String;

        $z0 := @parameter5: boolean;

        r5 = new java.io.PrintWriter;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke r5.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r6);

        $i1 = r0.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad>;

        $i2 = r0.<org.apache.commons.cli.HelpFormatter: int defaultDescPad>;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean)>(r5, $i0, $r1, $r2, $r3, $i1, $i2, $r4, $z0);

        virtualinvoke r5.<java.io.PrintWriter: void flush()>();

        return;
    }
    public void printHelp(java.io.PrintWriter, int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, int, int, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.io.PrintWriter $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r3, $r5;
        org.apache.commons.cli.Options $r4;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.io.PrintWriter;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: org.apache.commons.cli.Options;

        $i1 := @parameter5: int;

        $i2 := @parameter6: int;

        $r5 := @parameter7: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean)>($r1, $i0, $r2, $r3, $r4, $i1, $i2, $r5, 0);

        return;
    }
    public void printHelp(java.io.PrintWriter, int, java.lang.String, java.lang.String, org.apache.commons.cli.Options, int, int, java.lang.String, boolean)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.io.PrintWriter $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r3, $r5;
        org.apache.commons.cli.Options $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.io.PrintWriter;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: org.apache.commons.cli.Options;

        $i1 := @parameter5: int;

        $i2 := @parameter6: int;

        $r5 := @parameter7: java.lang.String;

        $z0 := @parameter8: boolean;

        if $r2 == null goto label1;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i3 != 0 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cmdLineSyntax not provided");

        throw $r6;

     label2:
        if $z0 == 0 goto label5;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printUsage(java.io.PrintWriter,int,java.lang.String,org.apache.commons.cli.Options)>($r1, $i0, $r2, $r4);

     label3:
        if $r3 == null goto label4;

        $r2 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i3 <= 0 goto label4;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,java.lang.String)>($r1, $i0, $r3);

     label4:
        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printOptions(java.io.PrintWriter,int,org.apache.commons.cli.Options,int,int)>($r1, $i0, $r4, $i1, $i2);

        if $r5 == null goto label6;

        $r2 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 <= 0 goto label6;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,java.lang.String)>($r1, $i0, $r5);

        return;

     label5:
        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printUsage(java.io.PrintWriter,int,java.lang.String)>($r1, $i0, $r2);

        goto label3;

     label6:
        return;
    }
    public void printHelp(java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1, $r2, $r4;
        org.apache.commons.cli.Options $r3;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.apache.commons.cli.Options;

        $r4 := @parameter3: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($r1, $r2, $r3, $r4, 0);

        return;
    }
    public void printHelp(java.lang.String, java.lang.String, org.apache.commons.cli.Options, java.lang.String, boolean)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1, $r2, $r4;
        org.apache.commons.cli.Options $r3;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.apache.commons.cli.Options;

        $r4 := @parameter3: java.lang.String;

        $z0 := @parameter4: boolean;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($i0, $r1, $r2, $r3, $r4, $z0);

        return;
    }
    public void printHelp(java.lang.String, org.apache.commons.cli.Options)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;
        org.apache.commons.cli.Options $r2;
        int $i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.commons.cli.Options;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($i0, $r1, null, $r2, null, 0);

        return;
    }
    public void printHelp(java.lang.String, org.apache.commons.cli.Options, boolean)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;
        org.apache.commons.cli.Options $r2;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.commons.cli.Options;

        $z0 := @parameter2: boolean;

        $i0 = r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth>;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean)>($i0, $r1, null, $r2, null, $z0);

        return;
    }
    public void printOptions(java.io.PrintWriter, int, org.apache.commons.cli.Options, int, int)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.io.PrintWriter $r1;
        int $i0, $i1, $i2;
        org.apache.commons.cli.Options $r2;
        java.lang.StringBuffer r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.io.PrintWriter;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.commons.cli.Options;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        r3 = new java.lang.StringBuffer;

        specialinvoke r3.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderOptions(java.lang.StringBuffer,int,org.apache.commons.cli.Options,int,int)>(r3, $i0, $r2, $i1, $i2);

        $r4 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        return;
    }
    public void printUsage(java.io.PrintWriter, int, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.io.PrintWriter $r1;
        int $i0, i1, $i2;
        java.lang.String $r2, $r3;
        java.lang.StringBuffer $r4;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.io.PrintWriter;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(32);

        i1 = i1 + 1;

        $r3 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        i1 = $i2 + i1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,int,java.lang.String)>($r1, $i0, i1, $r2);

        return;
    }
    public void printUsage(java.io.PrintWriter, int, java.lang.String, org.apache.commons.cli.Options)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.io.PrintWriter $r1;
        int $i0, $i1;
        java.lang.String $r2, $r7;
        org.apache.commons.cli.Options $r3;
        java.util.ArrayList r4, r5;
        java.lang.StringBuffer $r6;
        java.util.Collection $r8;
        java.util.Comparator $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        org.apache.commons.cli.Option r12;
        org.apache.commons.cli.OptionGroup $r13;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.io.PrintWriter;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: org.apache.commons.cli.Options;

        $r6 = new java.lang.StringBuffer;

        $r7 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix>;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        r4 = new java.util.ArrayList;

        $r8 = virtualinvoke $r3.<org.apache.commons.cli.Options: java.util.Collection getOptions()>();

        specialinvoke r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);

        $r9 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator getOptionComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r9);

        $r10 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.commons.cli.Option) $r11;

        $r13 = virtualinvoke $r3.<org.apache.commons.cli.Options: org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)>(r12);

        if $r13 == null goto label3;

        $z0 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>($r13);

        if $z0 != 0 goto label2;

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        specialinvoke r0.<org.apache.commons.cli.HelpFormatter: void appendOptionGroup(java.lang.StringBuffer,org.apache.commons.cli.OptionGroup)>($r6, $r13);

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        goto label1;

     label3:
        $z0 = virtualinvoke r12.<org.apache.commons.cli.Option: boolean isRequired()>();

        staticinvoke <org.apache.commons.cli.HelpFormatter: void appendOption(java.lang.StringBuffer,org.apache.commons.cli.Option,boolean)>($r6, r12, $z0);

        goto label2;

     label4:
        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(32);

        $i1 = $i1 + 1;

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,int,java.lang.String)>($r1, $i0, $i1, $r2);

        return;
    }
    public void printWrapped(java.io.PrintWriter, int, int, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.io.PrintWriter $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;
        java.lang.StringBuffer r3;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.io.PrintWriter;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        r3 = new java.lang.StringBuffer;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        specialinvoke r3.<java.lang.StringBuffer: void <init>(int)>($i2);

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer,int,int,java.lang.String)>(r3, $i0, $i1, $r2);

        $r2 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r2);

        return;
    }
    public void printWrapped(java.io.PrintWriter, int, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.io.PrintWriter $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.io.PrintWriter;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: void printWrapped(java.io.PrintWriter,int,int,java.lang.String)>($r1, $i0, 0, $r2);

        return;
    }
    protected java.lang.StringBuffer renderOptions(java.lang.StringBuffer, int, org.apache.commons.cli.Options, int, int)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.StringBuffer $r1, r11, $r13, $r14;
        int $i0, $i1, $i2, i3, i4;
        org.apache.commons.cli.Options $r2;
        java.util.ArrayList r3;
        java.lang.String $r4, $r5, $r12;
        java.util.List $r6;
        java.util.Comparator $r7;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.commons.cli.Option r10;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.commons.cli.Options;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r4 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>($i1);

        $r5 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>($i2);

        $i1 = 0;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke $r2.<org.apache.commons.cli.Options: java.util.List helpOptions()>();

        $r7 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator getOptionComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r6, $r7);

        $r8 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.cli.Option) $r9;

        r11 = new java.lang.StringBuffer;

        specialinvoke r11.<java.lang.StringBuffer: void <init>(int)>(8);

        $r12 = virtualinvoke r10.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        if $r12 != null goto label04;

        $r13 = virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   ");

        $r12 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix>;

        $r14 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r12 = virtualinvoke r10.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label02:
        $z0 = virtualinvoke r10.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z0 == 0 goto label03;

        $z0 = virtualinvoke r10.<org.apache.commons.cli.Option: boolean hasArgName()>();

        if $z0 == 0 goto label05;

        $r13 = virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        $r12 = virtualinvoke r10.<org.apache.commons.cli.Option: java.lang.String getArgName()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

     label03:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r11);

        i4 = virtualinvoke r11.<java.lang.StringBuffer: int length()>();

        if i4 <= $i1 goto label01;

        $i1 = virtualinvoke r11.<java.lang.StringBuffer: int length()>();

        goto label01;

     label04:
        $r13 = virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r12 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix>;

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r12 = virtualinvoke r10.<org.apache.commons.cli.Option: java.lang.String getOpt()>();

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $z0 = virtualinvoke r10.<org.apache.commons.cli.Option: boolean hasLongOpt()>();

        if $z0 == 0 goto label02;

        $r13 = virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $r12 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix>;

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r12 = virtualinvoke r10.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        goto label02;

     label05:
        virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label03;

     label06:
        i3 = 0;

        $r8 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.cli.Option) $r9;

        r11 = new java.lang.StringBuffer;

        i4 = i3 + 1;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        $r4 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r11.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        i3 = virtualinvoke r11.<java.lang.StringBuffer: int length()>();

        if i3 >= $i1 goto label08;

        i3 = virtualinvoke r11.<java.lang.StringBuffer: int length()>();

        i3 = $i1 - i3;

        $r4 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>(i3);

        virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label08:
        virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i3 = $i1 + $i2;

        $r4 = virtualinvoke r10.<org.apache.commons.cli.Option: java.lang.String getDescription()>();

        if $r4 == null goto label09;

        $r4 = virtualinvoke r10.<org.apache.commons.cli.Option: java.lang.String getDescription()>();

        virtualinvoke r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label09:
        $r4 = virtualinvoke r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer,int,int,java.lang.String)>($r1, $i0, i3, $r4);

        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r4 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label10:
        i3 = i4;

        goto label07;

     label11:
        return $r1;
    }
    protected java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer, int, int, java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.StringBuffer $r1, $r4;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String $r2, $r3, $r5;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        $i2 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: int findWrapPos(java.lang.String,int,int)>($r2, $i0, 0);

        i3 = $i2;

        if $i2 != -1 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String rtrim(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return $r1;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r3 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String rtrim(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        if $i1 < $i0 goto label2;

        $i1 = 1;

     label2:
        $r3 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String createPadding(int)>($i1);

     label3:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i3);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r2 = $r5;

        $i2 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: int findWrapPos(java.lang.String,int,int)>($r5, $i0, 0);

        i3 = $i2;

        if $i2 != -1 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        return $r1;

     label4:
        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 <= $i0 goto label5;

        $i4 = $i1 + -1;

        if $i2 != $i4 goto label5;

        i3 = $i0;

     label5:
        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r5 = virtualinvoke r0.<org.apache.commons.cli.HelpFormatter: java.lang.String rtrim(java.lang.String)>($r5);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label3;
    }
    protected java.lang.String rtrim(java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String r1;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label4;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label2:
        if $i0 <= 0 goto label3;

        $i1 = $i0 + -1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label3;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label4:
        return r1;
    }
    public void setArgName(java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultArgName> = $r1;

        return;
    }
    public void setDescPadding(int)
    {
        org.apache.commons.cli.HelpFormatter r0;
        int $i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 := @parameter0: int;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultDescPad> = $i0;

        return;
    }
    public void setLeftPadding(int)
    {
        org.apache.commons.cli.HelpFormatter r0;
        int $i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 := @parameter0: int;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultLeftPad> = $i0;

        return;
    }
    public void setLongOptPrefix(java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultLongOptPrefix> = $r1;

        return;
    }
    public void setNewLine(java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultNewLine> = $r1;

        return;
    }
    public void setOptPrefix(java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultOptPrefix> = $r1;

        return;
    }
    public void setOptionComparator(java.util.Comparator)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.util.Comparator $r1;
        org.apache.commons.cli.HelpFormatter$OptionComparator $r2;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.util.Comparator;

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.cli.HelpFormatter$OptionComparator;

        specialinvoke $r2.<org.apache.commons.cli.HelpFormatter$OptionComparator: void <init>(org.apache.commons.cli.HelpFormatter$1)>(null);

        r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator> = $r2;

        return;

     label1:
        r0.<org.apache.commons.cli.HelpFormatter: java.util.Comparator optionComparator> = $r1;

        return;
    }
    public void setSyntaxPrefix(java.lang.String)
    {
        org.apache.commons.cli.HelpFormatter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.cli.HelpFormatter: java.lang.String defaultSyntaxPrefix> = $r1;

        return;
    }
    public void setWidth(int)
    {
        org.apache.commons.cli.HelpFormatter r0;
        int $i0;

        r0 := @this: org.apache.commons.cli.HelpFormatter;

        $i0 := @parameter0: int;

        r0.<org.apache.commons.cli.HelpFormatter: int defaultWidth> = $i0;

        return;
    }
