org.apache.commons.cli.PosixParser extends org.apache.commons.cli.Parser
private org.apache.commons.cli.Option currentOption
private boolean eatTheRest
private org.apache.commons.cli.Options options
private java.util.List tokens
    public void <init>()
    {
        org.apache.commons.cli.PosixParser r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.cli.PosixParser;

        specialinvoke r0.<org.apache.commons.cli.Parser: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.cli.PosixParser: java.util.List tokens> = $r1;

        return;
    }
    private void gobble(java.util.Iterator)
    {
        org.apache.commons.cli.PosixParser r0;
        java.util.Iterator $r1;
        boolean $z0;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.cli.PosixParser;

        $r1 := @parameter0: java.util.Iterator;

        $z0 = r0.<org.apache.commons.cli.PosixParser: boolean eatTheRest>;

        if $z0 == 0 goto label2;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return;
    }
    private void init()
    {
        org.apache.commons.cli.PosixParser r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.cli.PosixParser;

        r0.<org.apache.commons.cli.PosixParser: boolean eatTheRest> = 0;

        $r1 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }
    private void processNonOptionToken(java.lang.String, boolean)
    {
        org.apache.commons.cli.PosixParser r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.cli.Option $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.cli.PosixParser;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption>;

        if $r2 == null goto label1;

        $r2 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption>;

        $z0 = virtualinvoke $r2.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z0 != 0 goto label2;

     label1:
        r0.<org.apache.commons.cli.PosixParser: boolean eatTheRest> = 1;

        $r3 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("--");

     label2:
        $r3 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    private void processOptionToken(java.lang.String, boolean)
    {
        org.apache.commons.cli.PosixParser r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.cli.Options $r2;
        org.apache.commons.cli.Option $r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.cli.PosixParser;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $z0 = virtualinvoke $r2.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        r0.<org.apache.commons.cli.PosixParser: boolean eatTheRest> = 1;

     label1:
        $r2 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $z0 = virtualinvoke $r2.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $r3 = virtualinvoke $r2.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>($r1);

        r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption> = $r3;

     label2:
        $r4 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    protected void burstToken(java.lang.String, boolean)
    {
        org.apache.commons.cli.PosixParser r0;
        java.lang.String $r1, $r2, $r6;
        boolean $z0, $z1;
        int i0, $i1, $i3;
        char $c2;
        org.apache.commons.cli.Options $r3;
        java.util.List $r4;
        java.lang.StringBuffer $r5;
        org.apache.commons.cli.Option $r7;

        r0 := @this: org.apache.commons.cli.PosixParser;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        i0 = 1;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i0 >= $i1 goto label5;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);

        $r3 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $z1 = virtualinvoke $r3.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r3 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options>;

        $r7 = virtualinvoke $r3.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>($r2);

        r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption> = $r7;

        $r7 = r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption>;

        $z1 = virtualinvoke $r7.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z1 == 0 goto label4;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = i0 + 1;

        if $i1 == $i3 goto label4;

        $r4 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        i0 = i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;

     label2:
        if $z0 == 0 goto label3;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        specialinvoke r0.<org.apache.commons.cli.PosixParser: void processNonOptionToken(java.lang.String,boolean)>($r1, 1);

        return;

     label3:
        $r4 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return;
    }
    protected java.lang.String[] flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)
    {
        org.apache.commons.cli.PosixParser r0;
        org.apache.commons.cli.Options $r1;
        java.lang.String[] $r2;
        boolean $z0, $z1;
        java.util.List $r3, $r9;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.String r6, r7;
        int $i0;
        org.apache.commons.cli.Option $r8;
        java.lang.Object[] $r10;

        r0 := @this: org.apache.commons.cli.PosixParser;

        $r1 := @parameter0: org.apache.commons.cli.Options;

        $r2 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.cli.PosixParser: void init()>();

        r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Options options> = $r1;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z1 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z1 == 0 goto label06;

        $i0 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(61);

        if $i0 != -1 goto label04;

        r7 = r6;

     label02:
        $z1 = virtualinvoke $r1.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(r7);

        if $z1 != 0 goto label05;

        specialinvoke r0.<org.apache.commons.cli.PosixParser: void processNonOptionToken(java.lang.String,boolean)>(r6, $z0);

     label03:
        specialinvoke r0.<org.apache.commons.cli.PosixParser: void gobble(java.util.Iterator)>($r4);

        goto label01;

     label04:
        r7 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label02;

     label05:
        $r8 = virtualinvoke $r1.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>(r7);

        r0.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.Option currentOption> = $r8;

        $r3 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r7);

        if $i0 == -1 goto label03;

        $r3 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $i0 = $i0 + 1;

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>($i0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label03;

     label06:
        r7 = "-";

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label07;

        $r3 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label03;

     label07:
        $z1 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z1 == 0 goto label10;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 == 2 goto label08;

        $z1 = virtualinvoke $r1.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(r6);

        if $z1 == 0 goto label09;

     label08:
        specialinvoke r0.<org.apache.commons.cli.PosixParser: void processOptionToken(java.lang.String,boolean)>(r6, $z0);

        goto label03;

     label09:
        virtualinvoke r0.<org.apache.commons.cli.PosixParser: void burstToken(java.lang.String,boolean)>(r6, $z0);

        goto label03;

     label10:
        specialinvoke r0.<org.apache.commons.cli.PosixParser: void processNonOptionToken(java.lang.String,boolean)>(r6, $z0);

        goto label03;

     label11:
        $r3 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $r9 = r0.<org.apache.commons.cli.PosixParser: java.util.List tokens>;

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r10 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r2 = (java.lang.String[]) $r10;

        return $r2;
    }
