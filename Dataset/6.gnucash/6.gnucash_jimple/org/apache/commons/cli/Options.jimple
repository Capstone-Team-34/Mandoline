org.apache.commons.cli.Options extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private java.util.Map longOpts
private java.util.Map optionGroups
private java.util.List requiredOpts
private java.util.Map shortOpts
    public void <init>()
    {
        org.apache.commons.cli.Options r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.cli.Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.cli.Options: java.util.Map shortOpts> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.cli.Options: java.util.Map longOpts> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.cli.Options: java.util.List requiredOpts> = $r2;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.cli.Options: java.util.Map optionGroups> = $r1;

        return;
    }
    public org.apache.commons.cli.Options addOption(java.lang.String, java.lang.String, boolean, java.lang.String)
    {
        org.apache.commons.cli.Options r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        org.apache.commons.cli.Option $r4;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: java.lang.String;

        $r4 = new org.apache.commons.cli.Option;

        specialinvoke $r4.<org.apache.commons.cli.Option: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String)>($r1, $r2, $z0, $r3);

        virtualinvoke r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r4);

        return r0;
    }
    public org.apache.commons.cli.Options addOption(java.lang.String, boolean, java.lang.String)
    {
        org.apache.commons.cli.Options r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(java.lang.String,java.lang.String,boolean,java.lang.String)>($r1, null, $z0, $r2);

        return r0;
    }
    public org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)
    {
        org.apache.commons.cli.Options r0;
        org.apache.commons.cli.Option $r1;
        java.lang.String $r2, $r4;
        boolean $z0;
        java.util.Map $r3;
        java.util.List $r5, $r6;
        int $i0;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 := @parameter0: org.apache.commons.cli.Option;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String getKey()>();

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.Option: boolean hasLongOpt()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.commons.cli.Options: java.util.Map longOpts>;

        $r4 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String getLongOpt()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

     label1:
        $z0 = virtualinvoke $r1.<org.apache.commons.cli.Option: boolean isRequired()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.commons.cli.Options: java.util.List requiredOpts>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.commons.cli.Options: java.util.List requiredOpts>;

        $r6 = r0.<org.apache.commons.cli.Options: java.util.List requiredOpts>;

        $i0 = interfaceinvoke $r6.<java.util.List: int indexOf(java.lang.Object)>($r2);

        interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>($i0);

     label2:
        $r5 = r0.<org.apache.commons.cli.Options: java.util.List requiredOpts>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

     label3:
        $r3 = r0.<org.apache.commons.cli.Options: java.util.Map shortOpts>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return r0;
    }
    public org.apache.commons.cli.Options addOptionGroup(org.apache.commons.cli.OptionGroup)
    {
        org.apache.commons.cli.Options r0;
        org.apache.commons.cli.OptionGroup $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.util.List $r4;
        java.lang.Object $r5;
        org.apache.commons.cli.Option r6;
        java.util.Map $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 := @parameter0: org.apache.commons.cli.OptionGroup;

        $r2 = virtualinvoke $r1.<org.apache.commons.cli.OptionGroup: java.util.Collection getOptions()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.OptionGroup: boolean isRequired()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.cli.Options: java.util.List requiredOpts>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.cli.Option) $r5;

        virtualinvoke r6.<org.apache.commons.cli.Option: void setRequired(boolean)>(0);

        virtualinvoke r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>(r6);

        $r7 = r0.<org.apache.commons.cli.Options: java.util.Map optionGroups>;

        $r8 = virtualinvoke r6.<org.apache.commons.cli.Option: java.lang.String getKey()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r1);

        goto label1;

     label2:
        return r0;
    }
    public org.apache.commons.cli.Option getOption(java.lang.String)
    {
        org.apache.commons.cli.Options r0;
        java.lang.String $r1;
        java.util.Map $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.cli.Option $r4;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.cli.Util: java.lang.String stripLeadingHyphens(java.lang.String)>($r1);

        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map shortOpts>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map shortOpts>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.commons.cli.Option) $r3;

        return $r4;

     label1:
        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map longOpts>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.commons.cli.Option) $r3;

        return $r4;
    }
    public org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)
    {
        org.apache.commons.cli.Options r0;
        org.apache.commons.cli.Option $r1;
        java.util.Map $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        org.apache.commons.cli.OptionGroup $r5;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 := @parameter0: org.apache.commons.cli.Option;

        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map optionGroups>;

        $r3 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String getKey()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.apache.commons.cli.OptionGroup) $r4;

        return $r5;
    }
    java.util.Collection getOptionGroups()
    {
        org.apache.commons.cli.Options r0;
        java.util.HashSet $r1;
        java.util.Collection $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 = new java.util.HashSet;

        $r3 = r0.<org.apache.commons.cli.Options: java.util.Map optionGroups>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        return $r1;
    }
    public java.util.Collection getOptions()
    {
        org.apache.commons.cli.Options r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Options: java.util.List helpOptions()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }
    public java.util.List getRequiredOptions()
    {
        org.apache.commons.cli.Options r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.cli.Options;

        r1 = r0.<org.apache.commons.cli.Options: java.util.List requiredOpts>;

        return r1;
    }
    public boolean hasOption(java.lang.String)
    {
        org.apache.commons.cli.Options r0;
        java.lang.String $r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.cli.Util: java.lang.String stripLeadingHyphens(java.lang.String)>($r1);

        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map shortOpts>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map longOpts>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    java.util.List helpOptions()
    {
        org.apache.commons.cli.Options r0;
        java.util.ArrayList $r1;
        java.util.Collection $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.commons.cli.Options;

        $r1 = new java.util.ArrayList;

        $r3 = r0.<org.apache.commons.cli.Options: java.util.Map shortOpts>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.apache.commons.cli.Options r0;
        java.lang.StringBuffer r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.cli.Options;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ Options: [ short ");

        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map shortOpts>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ] [ long ");

        $r2 = r0.<org.apache.commons.cli.Options: java.util.Map longOpts>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ]");

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
