org.apache.commons.cli.Parser extends java.lang.Object implements org.apache.commons.cli.CommandLineParser
protected org.apache.commons.cli.CommandLine cmd
private org.apache.commons.cli.Options options
private java.util.List requiredOptions
    public void <init>()
    {
        org.apache.commons.cli.Parser r0;

        r0 := @this: org.apache.commons.cli.Parser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected void checkRequiredOptions() throws org.apache.commons.cli.MissingOptionException
    {
        org.apache.commons.cli.Parser r0;
        java.util.List $r1;
        boolean $z0;
        org.apache.commons.cli.MissingOptionException $r2;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.cli.MissingOptionException;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        specialinvoke $r2.<org.apache.commons.cli.MissingOptionException: void <init>(java.util.List)>($r1);

        throw $r2;

     label1:
        return;
    }
protected abstract java.lang.String[] flatten(org.apache.commons.cli.Options, java.lang.String[], boolean) { 
// no body
} 
    protected org.apache.commons.cli.Options getOptions()
    {
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.Options r1;

        r0 := @this: org.apache.commons.cli.Parser;

        r1 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options options>;

        return r1;
    }
    protected java.util.List getRequiredOptions()
    {
        org.apache.commons.cli.Parser r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.cli.Parser;

        r1 = r0.<org.apache.commons.cli.Parser: java.util.List requiredOptions>;

        return r1;
    }
    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[]) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.Options $r1;
        java.lang.String[] $r2;
        org.apache.commons.cli.CommandLine $r3;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: org.apache.commons.cli.Options;

        $r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean)>($r1, $r2, null, 0);

        return $r3;
    }
    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.Options $r1;
        java.lang.String[] $r2;
        java.util.Properties $r3;
        org.apache.commons.cli.CommandLine $r4;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: org.apache.commons.cli.Options;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.util.Properties;

        $r4 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean)>($r1, $r2, $r3, 0);

        return $r4;
    }
    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties, boolean) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.Options $r1;
        java.util.Properties $r2;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        org.apache.commons.cli.Option r7;
        org.apache.commons.cli.CommandLine $r8;
        java.util.ListIterator $r9;
        java.lang.String r10, $r11;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: org.apache.commons.cli.Options;

        $r3 := @parameter1: java.lang.String[];

        $r2 := @parameter2: java.util.Properties;

        $z0 := @parameter3: boolean;

        $r4 = virtualinvoke $r1.<org.apache.commons.cli.Options: java.util.List helpOptions()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.cli.Option) $r6;

        virtualinvoke r7.<org.apache.commons.cli.Option: void clearValues()>();

        goto label01;

     label02:
        virtualinvoke r0.<org.apache.commons.cli.Parser: void setOptions(org.apache.commons.cli.Options)>($r1);

        $r8 = new org.apache.commons.cli.CommandLine;

        specialinvoke $r8.<org.apache.commons.cli.CommandLine: void <init>()>();

        r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd> = $r8;

        $z1 = 0;

        if $r3 != null goto label03;

        $r3 = newarray (java.lang.String)[0];

     label03:
        $r1 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.lang.String[] flatten(org.apache.commons.cli.Options,java.lang.String[],boolean)>($r1, $r3, $z0);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r9 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

     label04:
        $z2 = interfaceinvoke $r9.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r6 = interfaceinvoke $r9.<java.util.ListIterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r6;

        $r11 = "--";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z2 == 0 goto label07;

        $z1 = 1;

     label05:
        if $z1 == 0 goto label04;

     label06:
        $z2 = interfaceinvoke $r9.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r6 = interfaceinvoke $r9.<java.util.ListIterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r6;

        $r11 = "--";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z2 != 0 goto label06;

        $r8 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r8.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r10);

        goto label06;

     label07:
        $r11 = "-";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z2 == 0 goto label09;

        if $z0 == 0 goto label08;

        $z1 = 1;

        goto label05;

     label08:
        $r8 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r8.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r10);

        goto label05;

     label09:
        $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z2 == 0 goto label11;

        if $z0 == 0 goto label10;

        $r1 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $z2 = virtualinvoke $r1.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(r10);

        if $z2 != 0 goto label10;

        $z1 = 1;

        $r8 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r8.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r10);

        goto label05;

     label10:
        virtualinvoke r0.<org.apache.commons.cli.Parser: void processOption(java.lang.String,java.util.ListIterator)>(r10, $r9);

        goto label05;

     label11:
        $r8 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r8.<org.apache.commons.cli.CommandLine: void addArg(java.lang.String)>(r10);

        if $z0 == 0 goto label05;

        $z1 = 1;

        goto label05;

     label12:
        virtualinvoke r0.<org.apache.commons.cli.Parser: void processProperties(java.util.Properties)>($r2);

        virtualinvoke r0.<org.apache.commons.cli.Parser: void checkRequiredOptions()>();

        $r8 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        return $r8;
    }
    public org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options, java.lang.String[], boolean) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.Options $r1;
        java.lang.String[] $r2;
        boolean $z0;
        org.apache.commons.cli.CommandLine $r3;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: org.apache.commons.cli.Options;

        $r2 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean)>($r1, $r2, null, $z0);

        return $r3;
    }
    public void processArgs(org.apache.commons.cli.Option, java.util.ListIterator) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.Option $r1;
        java.util.ListIterator $r2;
        java.lang.RuntimeException r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String r5;
        org.apache.commons.cli.Options $r6;
        java.lang.String[] $r7;
        org.apache.commons.cli.MissingArgumentException $r8;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: org.apache.commons.cli.Option;

        $r2 := @parameter1: java.util.ListIterator;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $z0 = virtualinvoke $r6.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>(r5);

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label3;

        interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

     label2:
        $r7 = virtualinvoke $r1.<org.apache.commons.cli.Option: java.lang.String[] getValues()>();

        if $r7 != null goto label6;

        $z0 = virtualinvoke $r1.<org.apache.commons.cli.Option: boolean hasOptionalArg()>();

        if $z0 != 0 goto label6;

        $r8 = new org.apache.commons.cli.MissingArgumentException;

        specialinvoke $r8.<org.apache.commons.cli.MissingArgumentException: void <init>(org.apache.commons.cli.Option)>($r1);

        throw $r8;

     label3:
        r5 = staticinvoke <org.apache.commons.cli.Util: java.lang.String stripLeadingAndTrailingQuotes(java.lang.String)>(r5);

        virtualinvoke $r1.<org.apache.commons.cli.Option: void addValueForProcessing(java.lang.String)>(r5);

     label4:
        goto label1;

     label5:
        r3 := @caughtexception;

        interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        goto label2;

     label6:
        return;

        catch java.lang.RuntimeException from label3 to label4 with label5;
    }
    protected void processOption(java.lang.String, java.util.ListIterator) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.Parser r0;
        java.lang.String $r1, $r6;
        java.util.ListIterator $r2;
        org.apache.commons.cli.Options $r3;
        boolean $z0;
        org.apache.commons.cli.UnrecognizedOptionException $r4;
        java.lang.StringBuffer $r5;
        org.apache.commons.cli.Option $r7;
        java.lang.Object $r8;
        java.util.List $r9;
        org.apache.commons.cli.OptionGroup $r10;
        org.apache.commons.cli.CommandLine $r11;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.ListIterator;

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $z0 = virtualinvoke $r3.<org.apache.commons.cli.Options: boolean hasOption(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.cli.UnrecognizedOptionException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized option: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.commons.cli.UnrecognizedOptionException: void <init>(java.lang.String,java.lang.String)>($r6, $r1);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r7 = virtualinvoke $r3.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<org.apache.commons.cli.Option: java.lang.Object clone()>();

        $r7 = (org.apache.commons.cli.Option) $r8;

        $z0 = virtualinvoke $r7.<org.apache.commons.cli.Option: boolean isRequired()>();

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        $r1 = virtualinvoke $r7.<org.apache.commons.cli.Option: java.lang.String getKey()>();

        interfaceinvoke $r9.<java.util.List: boolean remove(java.lang.Object)>($r1);

     label2:
        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r10 = virtualinvoke $r3.<org.apache.commons.cli.Options: org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)>($r7);

        if $r10 == null goto label4;

        $r3 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r10 = virtualinvoke $r3.<org.apache.commons.cli.Options: org.apache.commons.cli.OptionGroup getOptionGroup(org.apache.commons.cli.Option)>($r7);

        $z0 = virtualinvoke $r10.<org.apache.commons.cli.OptionGroup: boolean isRequired()>();

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke r0.<org.apache.commons.cli.Parser: java.util.List getRequiredOptions()>();

        interfaceinvoke $r9.<java.util.List: boolean remove(java.lang.Object)>($r10);

     label3:
        virtualinvoke $r10.<org.apache.commons.cli.OptionGroup: void setSelected(org.apache.commons.cli.Option)>($r7);

     label4:
        $z0 = virtualinvoke $r7.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z0 == 0 goto label5;

        virtualinvoke r0.<org.apache.commons.cli.Parser: void processArgs(org.apache.commons.cli.Option,java.util.ListIterator)>($r7, $r2);

     label5:
        $r11 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r11.<org.apache.commons.cli.CommandLine: void addOption(org.apache.commons.cli.Option)>($r7);

        return;
    }
    protected void processProperties(java.util.Properties)
    {
        org.apache.commons.cli.Parser r0;
        java.util.Properties $r1;
        java.util.Enumeration $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4, $r9;
        org.apache.commons.cli.CommandLine $r5;
        org.apache.commons.cli.Options $r6;
        org.apache.commons.cli.Option $r7;
        java.lang.String[] $r8;
        int $i0;
        java.lang.RuntimeException $r10;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: java.util.Properties;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        $z0 = virtualinvoke $r5.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options getOptions()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.cli.Options: org.apache.commons.cli.Option getOption(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        $z0 = virtualinvoke $r7.<org.apache.commons.cli.Option: boolean hasArg()>();

        if $z0 == 0 goto label5;

        $r8 = virtualinvoke $r7.<org.apache.commons.cli.Option: java.lang.String[] getValues()>();

        if $r8 == null goto label3;

        $r8 = virtualinvoke $r7.<org.apache.commons.cli.Option: java.lang.String[] getValues()>();

        $i0 = lengthof $r8;

        if $i0 != 0 goto label4;

     label3:
        virtualinvoke $r7.<org.apache.commons.cli.Option: void addValueForProcessing(java.lang.String)>($r4);

     label4:
        $r5 = r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine cmd>;

        virtualinvoke $r5.<org.apache.commons.cli.CommandLine: void addOption(org.apache.commons.cli.Option)>($r7);

        goto label2;

     label5:
        $r9 = "yes";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label4;

        $r9 = "true";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label4;

        $r9 = "1";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label4;

        return;

     label6:
        $r10 := @caughtexception;

        goto label4;

     label7:
        return;

        catch java.lang.RuntimeException from label3 to label4 with label6;
    }
    protected void setOptions(org.apache.commons.cli.Options)
    {
        org.apache.commons.cli.Parser r0;
        org.apache.commons.cli.Options $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.cli.Parser;

        $r1 := @parameter0: org.apache.commons.cli.Options;

        r0.<org.apache.commons.cli.Parser: org.apache.commons.cli.Options options> = $r1;

        $r2 = new java.util.ArrayList;

        $r3 = virtualinvoke $r1.<org.apache.commons.cli.Options: java.util.List getRequiredOptions()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<org.apache.commons.cli.Parser: java.util.List requiredOptions> = $r2;

        return;
    }
