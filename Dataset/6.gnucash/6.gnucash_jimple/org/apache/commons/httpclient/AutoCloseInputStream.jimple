org.apache.commons.httpclient.AutoCloseInputStream extends java.io.FilterInputStream
private boolean selfClosed
private boolean streamOpen
private org.apache.commons.httpclient.ResponseConsumedWatcher watcher
    public void <init>(java.io.InputStream, org.apache.commons.httpclient.ResponseConsumedWatcher)
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        java.io.InputStream $r1;
        org.apache.commons.httpclient.ResponseConsumedWatcher $r2;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.apache.commons.httpclient.ResponseConsumedWatcher;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen> = 1;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed> = 0;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher> = null;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher> = $r2;

        return;
    }
    private void checkClose(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $i0 := @parameter0: int;

        if $i0 != -1 goto label1;

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>();

     label1:
        return;
    }
    private boolean isReadAllowed() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen>;

        if $z0 != 0 goto label1;

        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted read on closed stream.");

        throw $r1;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen>;

        return $z0;
    }
    private void notifyWatcher() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;
        org.apache.commons.httpclient.ResponseConsumedWatcher $r1;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.io.FilterInputStream: void close()>();

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean streamOpen> = 0;

        $r1 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: org.apache.commons.httpclient.ResponseConsumedWatcher watcher>;

        interfaceinvoke $r1.<org.apache.commons.httpclient.ResponseConsumedWatcher: void responseConsumed()>();

     label1:
        return;
    }
    public int available() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int available()>();

        return $i0;

     label1:
        return 0;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed>;

        if $z0 != 0 goto label1;

        r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean selfClosed> = 1;

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void notifyWatcher()>();

     label1:
        return;
    }
    public int read() throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read()>();

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>($i0);

        return $i0;

     label1:
        return -1;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        byte[] $r1;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $r1 := @parameter0: byte[];

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[])>($r1);

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>($i0);

        return $i0;

     label1:
        return -1;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.AutoCloseInputStream r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.AutoCloseInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        specialinvoke r0.<org.apache.commons.httpclient.AutoCloseInputStream: void checkClose(int)>($i0);

        return $i0;

     label1:
        return -1;
    }
