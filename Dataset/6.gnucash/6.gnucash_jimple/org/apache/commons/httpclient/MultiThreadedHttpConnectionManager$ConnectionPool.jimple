org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool extends java.lang.Object
private java.util.LinkedList freeConnections
private org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler
private final java.util.Map mapHosts
private int numConnections
private final org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0
private java.util.LinkedList waitingThreads
    private void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r1;
        java.util.LinkedList $r2;
        java.util.HashMap $r3;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r4;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections> = $r2;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts> = $r3;

        $r4 = new org.apache.commons.httpclient.util.IdleConnectionHandler;

        specialinvoke $r4.<org.apache.commons.httpclient.util.IdleConnectionHandler: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler> = $r4;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = 0;

        return;
    }
    void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager, org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1 $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r2 := @parameter1: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1;

        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)>($r1);

        return;
    }
    static int access$200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        i0 = $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        return i0;
    }
    static java.util.LinkedList access$300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r0;
        java.util.LinkedList r1;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 = $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        return r1;
    }
    static java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r0;
        java.util.LinkedList r1;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 = $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        return r1;
    }
    private void deleteConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r2;
        org.apache.commons.httpclient.HostConfiguration $r3;
        org.apache.commons.logging.Log $r4;
        boolean $z0;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r7;
        java.util.LinkedList $r8;
        int $i0;
        java.util.Map $r9;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        entermonitor r0;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $r3 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration access$1100(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager,org.apache.commons.httpclient.HttpConnection)>($r2, $r1);

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reclaiming connection, hostConfig=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label2:
        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

        $r7 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r3, 1);

        $r8 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r8.<java.util.LinkedList: boolean remove(java.lang.Object)>($r1);

        $i0 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        $i0 = $i0 + -1;

        $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = $i0;

        $i0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = $i0;

        $i0 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i0 != 0 goto label3;

        $r8 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $z0 = virtualinvoke $r8.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r9 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label3:
        $r10 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r10.<org.apache.commons.httpclient.util.IdleConnectionHandler: void remove(org.apache.commons.httpclient.HttpConnection)>($r1);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label1 to label4 with label5;
    }
    public void closeIdleConnections(long)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        long $l0;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r1.<org.apache.commons.httpclient.util.IdleConnectionHandler: void closeIdleConnections(long)>($l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public org.apache.commons.httpclient.HttpConnection createConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r3;
        org.apache.commons.logging.Log $r4;
        boolean $z0;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;
        org.apache.commons.httpclient.params.HttpConnectionParams $r7;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r8;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r9;
        int $i0;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r1, 1);

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Allocating new connection, hostConfig=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label2:
        r2 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        specialinvoke r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: void <init>(org.apache.commons.httpclient.HostConfiguration)>($r1);

        $r7 = virtualinvoke r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $r8 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $r9 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams access$800(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)>($r8);

        virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpConnectionParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r9);

        $r8 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        virtualinvoke r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>($r8);

        $i0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = $i0;

        $i0 = $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        $i0 = $i0 + 1;

        $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = $i0;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$900(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>(r2, $r1, r0);

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public void deleteClosedConnections()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        java.util.LinkedList $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.httpclient.HttpConnection r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.httpclient.HttpConnection) $r3;

        $z0 = virtualinvoke r4.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z0 != 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteConnection(org.apache.commons.httpclient.HttpConnection)>(r4);

     label3:
        goto label2;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public void deleteLeastUsedConnection()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        java.util.LinkedList $r1;
        java.lang.Object $r2;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.logging.Log $r4;
        boolean $z0;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r3 = (org.apache.commons.httpclient.HttpConnection) $r2;

        if r3 == null goto label3;

        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteConnection(org.apache.commons.httpclient.HttpConnection)>(r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Attempted to reclaim an unused connection but there were none.");

     label4:
        goto label2;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public void freeConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r2;
        org.apache.commons.httpclient.HostConfiguration $r3;
        org.apache.commons.logging.Log $r4;
        boolean $z0;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r7;
        java.util.LinkedList $r8;
        int $i0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference $r9;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $r3 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration access$1100(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager,org.apache.commons.httpclient.HttpConnection)>($r2, $r1);

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Freeing connection, hostConfig=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label1:
        entermonitor r0;

     label2:
        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager this$0>;

        $z0 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean access$1200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)>($r2);

        if $z0 == 0 goto label4;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

        exitmonitor r0;

     label3:
        return;

     label4:
        $r7 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r3, 1);

        $r8 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r1);

        $i0 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i0 != 0 goto label5;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Host connection pool not found, hostConfig=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r6);

        $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = 1;

     label5:
        $r8 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r1);

        $r9 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference) $r1;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$1300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)>($r9);

        $i0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        if $i0 != 0 goto label6;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Host connection pool not found, hostConfig=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r6);

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = 1;

     label6:
        $r10 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r10.<org.apache.commons.httpclient.util.IdleConnectionHandler: void add(org.apache.commons.httpclient.HttpConnection)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void notifyWaitingThread(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool)>($r7);

        exitmonitor r0;

     label7:
        return;

     label8:
        $r11 := @caughtexception;

        exitmonitor r0;

     label9:
        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }
    public org.apache.commons.httpclient.HttpConnection getFreeConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference r2, $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r3;
        java.util.LinkedList $r4;
        int $i0;
        java.lang.Object $r5;
        org.apache.commons.logging.Log $r7;
        boolean $z0;
        java.lang.StringBuffer $r8;
        java.lang.String $r9;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        entermonitor r0;

        r2 = null;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r1, 0);

        if $r3 == null goto label4;

        $r4 = $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        $i0 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label4;

        $r4 = $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object removeLast()>();

        $r6 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference) $r5;

        r2 = $r6;

        $r4 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        virtualinvoke $r4.<java.util.LinkedList: boolean remove(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$900(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r6, $r1, r0);

        $r7 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Getting free connection, hostConfig=");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label2:
        $r10 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r10.<org.apache.commons.httpclient.util.IdleConnectionHandler: void remove(org.apache.commons.httpclient.HttpConnection)>($r6);

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r7 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r7 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("There were no free connections to get, hostConfig=");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label5:
        goto label3;

     label6:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration, boolean)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        boolean $z0;
        org.apache.commons.logging.Log $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $z0 := @parameter1: boolean;

        entermonitor r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)");

        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool) $r4;

        if r5 != null goto label2;

        if $z0 == 0 goto label2;

        r5 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool;

        specialinvoke r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(null);

        r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r1;

        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label2:
        exitmonitor r0;

        return r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void handleLostConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r2;
        int $i0;
        java.util.LinkedList $r3;
        boolean $z0;
        java.util.Map $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r1, 1);

        $i0 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        $i0 = $i0 + -1;

        $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections> = $i0;

        $i0 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i0 != 0 goto label2;

        $r3 = $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $z0 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label2:
        $i0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int numConnections> = $i0;

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void notifyWaitingThread(org.apache.commons.httpclient.HostConfiguration)>($r1);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public void notifyWaitingThread(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r2;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r1, 1);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void notifyWaitingThread(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool)>($r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void notifyWaitingThread(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread r2, $r9;
        java.util.LinkedList $r3;
        int $i0;
        org.apache.commons.logging.Log $r4;
        boolean $z0;
        java.lang.StringBuffer $r5;
        org.apache.commons.httpclient.HostConfiguration $r6;
        java.lang.String $r7;
        java.lang.Object $r8;
        java.lang.Thread $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        $r1 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool;

        entermonitor r0;

        r2 = null;

     label01:
        $r3 = $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label05;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label02;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Notifying thread waiting on host pool, hostConfig=");

        $r6 = $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

     label02:
        $r3 = $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        $r8 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r9 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread) $r8;

        r2 = $r9;

        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r3.<java.util.LinkedList: boolean remove(java.lang.Object)>($r9);

     label03:
        if r2 == null goto label04;

        r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool> = 1;

        $r10 = r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: java.lang.Thread thread>;

        virtualinvoke $r10.<java.lang.Thread: void interrupt()>();

     label04:
        exitmonitor r0;

        return;

     label05:
        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label09;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label06;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No-one waiting on host pool, notifying next waiting thread.");

     label06:
        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        $r8 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r9 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread) $r8;

        r2 = $r9;

        $r1 = $r9.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool hostConnectionPool>;

        $r3 = $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r3.<java.util.LinkedList: boolean remove(java.lang.Object)>($r9);

     label07:
        goto label03;

     label08:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

     label09:
        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Notifying no-one, there are no waiting threads");

     label10:
        goto label03;

        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
    public void shutdown()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool r0;
        java.util.LinkedList $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.httpclient.HttpConnection r4;
        java.lang.Throwable $r5;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread r6;
        java.lang.Thread $r7;
        java.util.Map $r8;
        org.apache.commons.httpclient.util.IdleConnectionHandler $r9;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList freeConnections>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.httpclient.HttpConnection) $r3;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        virtualinvoke r4.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label3:
        goto label2;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label5:
        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void access$600(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>(r0);

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList waitingThreads>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread) $r3;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool> = 1;

        $r7 = r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: java.lang.Thread thread>;

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        goto label6;

     label7:
        $r8 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.Map mapHosts>;

        interfaceinvoke $r8.<java.util.Map: void clear()>();

        $r9 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.util.IdleConnectionHandler idleConnectionHandler>;

        virtualinvoke $r9.<org.apache.commons.httpclient.util.IdleConnectionHandler: void removeAll()>();

     label8:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label8 with label4;
    }
