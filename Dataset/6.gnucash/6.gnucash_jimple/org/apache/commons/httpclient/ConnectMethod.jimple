org.apache.commons.httpclient.ConnectMethod extends org.apache.commons.httpclient.HttpMethodBase
private static final org.apache.commons.logging.Log LOG
public static final java.lang.String NAME
static java.lang.Class class$org$apache$commons$httpclient$ConnectMethod
private final org.apache.commons.httpclient.HostConfiguration targethost
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.ConnectMethod: java.lang.Class class$org$apache$commons$httpclient$ConnectMethod>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.ConnectMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.ConnectMethod");

        $r1 = $r0;

        <org.apache.commons.httpclient.ConnectMethod: java.lang.Class class$org$apache$commons$httpclient$ConnectMethod> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.ConnectMethod: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.ConnectMethod: java.lang.Class class$org$apache$commons$httpclient$ConnectMethod>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.ConnectMethod r0;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost> = null;

        return;
    }
    public void <init>(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost> = $r1;

        return;
    }
    public void <init>(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.HttpMethod $r1;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost> = null;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    protected void addCookieRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        return;
    }
    protected void addRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.ConnectMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter ConnectMethod.addRequestHeaders(HttpState, HttpConnection)");

        virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        return;
    }
    public int execute(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        int $i0;
        boolean $z0;
        java.lang.StringBuffer $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.ConnectMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter ConnectMethod.execute(HttpState, HttpConnection)");

        $i0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        $r3 = <org.apache.commons.httpclient.ConnectMethod: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.commons.httpclient.ConnectMethod: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CONNECT status code ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label1:
        return $i0;
    }
    public java.lang.String getName()
    {
        org.apache.commons.httpclient.ConnectMethod r0;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        return "CONNECT";
    }
    public java.lang.String getPath()
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        java.lang.StringBuffer r1;
        org.apache.commons.httpclient.HostConfiguration $r2;
        java.lang.String $r3;
        int $i0, i1;
        org.apache.commons.httpclient.protocol.Protocol $r4;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r2 = r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost>;

        if $r2 == null goto label2;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost>;

        $i0 = virtualinvoke $r2.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        i1 = $i0;

        if $i0 != -1 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost>;

        $r4 = virtualinvoke $r2.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        i1 = virtualinvoke $r4.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label2:
        return "/";
    }
    public org.apache.commons.httpclient.URI getURI() throws org.apache.commons.httpclient.URIException
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        java.lang.String $r2, $r4;
        org.apache.commons.httpclient.URI $r3;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>();

        $r3 = new org.apache.commons.httpclient.URI;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>();

        specialinvoke $r3.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>($r4, 1, $r2);

        return $r3;
    }
    protected boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        int $i0;
        org.apache.commons.httpclient.Header r2;
        boolean $z0;
        java.lang.String $r3;
        org.apache.commons.logging.Log $r4;
        java.lang.StringBuffer $r5;
        org.apache.commons.httpclient.StatusLine $r6;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: int getStatusCode()>();

        if $i0 != 200 goto label4;

        r2 = null;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z0 != 0 goto label1;

        r2 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("proxy-connection");

     label1:
        if r2 != null goto label2;

        r2 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("connection");

     label2:
        if r2 == null goto label3;

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("close");

        if $z0 == 0 goto label3;

        $r4 = <org.apache.commons.httpclient.ConnectMethod: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label3;

        $r4 = <org.apache.commons.httpclient.ConnectMethod: org.apache.commons.logging.Log LOG>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid header encountered \'");

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' in response ");

        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r3 = virtualinvoke $r6.<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r3);

     label3:
        return 0;

     label4:
        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>($r1);

        return $z0;
    }
    protected void writeRequestLine(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.ConnectMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.StringBuffer r3;
        java.lang.String $r4, $r8;
        org.apache.commons.httpclient.HostConfiguration $r5;
        org.apache.commons.httpclient.HttpVersion $r6;
        org.apache.commons.httpclient.params.HttpMethodParams $r7;
        org.apache.commons.httpclient.Wire $r9;
        boolean $z0;
        int $i0, i1;
        org.apache.commons.httpclient.protocol.Protocol $r10;

        r0 := @this: org.apache.commons.httpclient.ConnectMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        r3 = new java.lang.StringBuffer;

        specialinvoke r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: java.lang.String getName()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r5 = r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HostConfiguration targethost>;

        if $r5 == null goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: java.lang.String getPath()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label1:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r4 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String,java.lang.String)>($r4, $r8);

        $r9 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r9.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label4;

        $r9 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r9.<org.apache.commons.httpclient.Wire: void output(java.lang.String)>($r4);

        return;

     label2:
        $i0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        i1 = $i0;

        if $i0 != -1 goto label3;

        $r10 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        i1 = virtualinvoke $r10.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

     label3:
        $r4 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        goto label1;

     label4:
        return;
    }
