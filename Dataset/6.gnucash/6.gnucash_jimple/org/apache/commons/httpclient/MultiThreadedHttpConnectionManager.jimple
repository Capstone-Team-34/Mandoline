org.apache.commons.httpclient.MultiThreadedHttpConnectionManager extends java.lang.Object implements org.apache.commons.httpclient.HttpConnectionManager
private static java.util.WeakHashMap ALL_CONNECTION_MANAGERS
public static final int DEFAULT_MAX_HOST_CONNECTIONS
public static final int DEFAULT_MAX_TOTAL_CONNECTIONS
private static final org.apache.commons.logging.Log LOG
private static final java.lang.ref.ReferenceQueue REFERENCE_QUEUE
private static org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD
private static final java.util.Map REFERENCE_TO_CONNECTION_SOURCE
static java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager
private org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool
private org.apache.commons.httpclient.params.HttpConnectionManagerParams params
private volatile boolean shutdown
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;
        java.util.HashMap $r3;
        java.lang.ref.ReferenceQueue $r4;
        java.util.WeakHashMap $r5;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.MultiThreadedHttpConnectionManager");

        $r1 = $r0;

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE> = $r3;

        $r4 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r4.<java.lang.ref.ReferenceQueue: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.ref.ReferenceQueue REFERENCE_QUEUE> = $r4;

        $r5 = new java.util.WeakHashMap;

        specialinvoke $r5.<java.util.WeakHashMap: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS> = $r5;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$MultiThreadedHttpConnectionManager>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r2;
        java.util.WeakHashMap $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown> = 0;

        $r2 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        specialinvoke $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(r0, null);

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool> = $r2;

        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        entermonitor $r3;

     label1:
        $r4 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    static org.apache.commons.httpclient.HostConfiguration access$1100(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.HostConfiguration $r2;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r2 = specialinvoke $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration configurationForConnection(org.apache.commons.httpclient.HttpConnection)>($r1);

        return $r2;
    }
    static boolean access$1200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r0;
        boolean z0;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        z0 = $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown>;

        return z0;
    }
    static void access$1300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference $r0;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void removeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)>($r0);

        return;
    }
    static java.util.Map access$1400()
    {
        java.util.Map r0;

        r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        return r0;
    }
    static java.lang.ref.ReferenceQueue access$1500()
    {
        java.lang.ref.ReferenceQueue r0;

        r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.ref.ReferenceQueue REFERENCE_QUEUE>;

        return r0;
    }
    static void access$600(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r0;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void shutdownCheckedOutConnections(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r0);

        return;
    }
    static org.apache.commons.logging.Log access$700()
    {
        org.apache.commons.logging.Log r0;

        r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        return r0;
    }
    static org.apache.commons.httpclient.params.HttpConnectionManagerParams access$800(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams r1;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r1 = $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        return r1;
    }
    static void access$900(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference, org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference $r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r2;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        $r1 := @parameter1: org.apache.commons.httpclient.HostConfiguration;

        $r2 := @parameter2: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void storeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r0, $r1, $r2);

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    private org.apache.commons.httpclient.HostConfiguration configurationForConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.HostConfiguration r2;
        java.lang.String $r3;
        int $i0;
        org.apache.commons.httpclient.protocol.Protocol $r4;
        java.net.InetAddress $r5;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        r2 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke r2.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: void setHost(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r3, $i0, $r4);

        $r5 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress getLocalAddress()>();

        if $r5 == null goto label1;

        $r5 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress getLocalAddress()>();

        virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: void setLocalAddress(java.net.InetAddress)>($r5);

     label1:
        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>();

        virtualinvoke r2.<org.apache.commons.httpclient.HostConfiguration: void setProxy(java.lang.String,int)>($r3, $i0);

     label2:
        return r2;
    }
    private org.apache.commons.httpclient.HttpConnection doGetConnection(org.apache.commons.httpclient.HostConfiguration, long) throws org.apache.commons.httpclient.ConnectionPoolTimeoutException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        long $l0, l4, $l6;
        org.apache.commons.httpclient.HostConfiguration r1, r2;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r4;
        int $i1, $i2, $i5;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r5, $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r7;
        byte $b3;
        boolean z0, $z1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread r8, r14;
        java.lang.IllegalStateException $r9;
        java.lang.Throwable $r10, $r17;
        java.util.LinkedList $r11;
        org.apache.commons.httpclient.ConnectionPoolTimeoutException $r12;
        java.lang.InterruptedException r13;
        org.apache.commons.logging.Log $r15;
        java.lang.IllegalThreadStateException $r16;
        java.lang.StringBuffer $r18;
        java.lang.String $r19;
        java.lang.Thread $r20;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r2 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $l0 := @parameter1: long;

        r3 = null;

        $r4 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i1 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxConnectionsPerHost(org.apache.commons.httpclient.HostConfiguration)>(r2);

        $r4 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i2 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxTotalConnections()>();

        $r5 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r5;

     label01:
        r1 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke r1.<org.apache.commons.httpclient.HostConfiguration: void <init>(org.apache.commons.httpclient.HostConfiguration)>(r2);

     label02:
        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>(r1, 1);

        $b3 = $l0 cmp 0L;

        if $b3 <= 0 goto label08;

        z0 = 1;

     label03:
        l4 = 0L;

        r8 = null;

     label04:
        if r3 != null goto label49;

        $z1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown>;

        if $z1 == 0 goto label09;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection factory has been shutdown.");

        throw $r9;

     label05:
        $r10 := @caughtexception;

     label06:
        exitmonitor $r5;

     label07:
        throw $r10;

     label08:
        z0 = 0;

        goto label03;

     label09:
        $r11 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList freeConnections>;

        $i5 = virtualinvoke $r11.<java.util.LinkedList: int size()>();

        if $i5 <= 0 goto label10;

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        r3 = virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.HttpConnection getFreeConnection(org.apache.commons.httpclient.HostConfiguration)>(r1);

        goto label04;

     label10:
        $i5 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i5 >= $i1 goto label11;

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $i5 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int access$200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r6);

        if $i5 >= $i2 goto label11;

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        r3 = virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.HttpConnection createConnection(org.apache.commons.httpclient.HostConfiguration)>(r1);

        goto label04;

     label11:
        $i5 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

        if $i5 >= $i1 goto label13;

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$300(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r6);

        $i5 = virtualinvoke $r11.<java.util.LinkedList: int size()>();

        if $i5 <= 0 goto label13;

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteLeastUsedConnection()>();

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        r3 = virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.HttpConnection createConnection(org.apache.commons.httpclient.HostConfiguration)>(r1);

     label12:
        goto label04;

     label13:
        if z0 == 0 goto label23;

        $b3 = $l0 cmp 0L;

        if $b3 > 0 goto label23;

     label14:
        $r12 = new org.apache.commons.httpclient.ConnectionPoolTimeoutException;

     label15:
        specialinvoke $r12.<org.apache.commons.httpclient.ConnectionPoolTimeoutException: void <init>(java.lang.String)>("Timeout waiting for connection");

     label16:
        throw $r12;

     label17:
        r13 := @caughtexception;

        r14 = r8;

     label18:
        $z1 = r14.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z1 != 0 goto label47;

        $r15 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Interrupted while waiting for connection", r13);

        $r16 = new java.lang.IllegalThreadStateException;

        specialinvoke $r16.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Interrupted while waiting in MultiThreadedHttpConnectionManager");

        throw $r16;

     label19:
        $r17 := @caughtexception;

     label20:
        $z1 = r14.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z1 != 0 goto label21;

        $r11 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r11.<java.util.LinkedList: boolean remove(java.lang.Object)>(r14);

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r6);

        virtualinvoke $r11.<java.util.LinkedList: boolean remove(java.lang.Object)>(r14);

     label21:
        if z0 == 0 goto label22;

        staticinvoke <java.lang.System: long currentTimeMillis()>();

     label22:
        throw $r17;

     label23:
        $r15 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

     label24:
        $z1 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

     label25:
        if $z1 == 0 goto label27;

        $r15 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        $r18 = new java.lang.StringBuffer;

     label26:
        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to get a connection, waiting..., hostConfig=");

        $r18 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label27:
        if r8 != null goto label45;

        r14 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread;

     label28:
        specialinvoke r14.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(null);

     label29:
        r14.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool hostConnectionPool> = $r7;

     label30:
        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

     label31:
        r14.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: java.lang.Thread thread> = $r20;

     label32:
        if z0 == 0 goto label35;

     label33:
        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label34:
        l4 = $l6;

     label35:
        $r11 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

     label36:
        virtualinvoke $r11.<java.util.LinkedList: void addLast(java.lang.Object)>(r14);

     label37:
        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

     label38:
        $r11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r6);

        virtualinvoke $r11.<java.util.LinkedList: void addLast(java.lang.Object)>(r14);

     label39:
        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

     label40:
        virtualinvoke $r6.<java.lang.Object: void wait(long)>($l0);

     label41:
        $z1 = r14.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z1 != 0 goto label42;

        $r11 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r11.<java.util.LinkedList: boolean remove(java.lang.Object)>(r14);

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r6);

        virtualinvoke $r11.<java.util.LinkedList: boolean remove(java.lang.Object)>(r14);

     label42:
        if z0 == 0 goto label44;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label43:
        $l6 = $l6 - l4;

        $l0 = $l0 - $l6;

     label44:
        r8 = r14;

        goto label04;

     label45:
        r8.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool> = 0;

     label46:
        r14 = r8;

        goto label32;

     label47:
        $z1 = r14.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$WaitingThread: boolean interruptedByConnectionPool>;

        if $z1 != 0 goto label48;

        $r11 = $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: java.util.LinkedList waitingThreads>;

        virtualinvoke $r11.<java.util.LinkedList: boolean remove(java.lang.Object)>(r14);

        $r6 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r11 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: java.util.LinkedList access$500(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r6);

        virtualinvoke $r11.<java.util.LinkedList: boolean remove(java.lang.Object)>(r14);

     label48:
        if z0 == 0 goto label44;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l6 - l4;

        $l0 = $l0 - $l6;

        goto label44;

     label49:
        exitmonitor $r5;

     label50:
        return r3;

     label51:
        $r10 := @caughtexception;

        goto label06;

     label52:
        $r17 := @caughtexception;

        r14 = r8;

        goto label20;

     label53:
        r13 := @caughtexception;

        goto label18;

        catch java.lang.Throwable from label01 to label02 with label51;
        catch java.lang.Throwable from label02 to label05 with label05;
        catch java.lang.Throwable from label06 to label07 with label51;
        catch java.lang.Throwable from label09 to label12 with label05;
        catch java.lang.InterruptedException from label15 to label16 with label17;
        catch java.lang.Throwable from label14 to label17 with label52;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label23 with label05;
        catch java.lang.InterruptedException from label24 to label25 with label17;
        catch java.lang.InterruptedException from label26 to label27 with label17;
        catch java.lang.InterruptedException from label28 to label29 with label17;
        catch java.lang.Throwable from label23 to label29 with label52;
        catch java.lang.InterruptedException from label30 to label31 with label53;
        catch java.lang.InterruptedException from label33 to label34 with label53;
        catch java.lang.InterruptedException from label36 to label37 with label53;
        catch java.lang.InterruptedException from label38 to label39 with label53;
        catch java.lang.InterruptedException from label40 to label41 with label53;
        catch java.lang.Throwable from label29 to label41 with label19;
        catch java.lang.Throwable from label41 to label43 with label05;
        catch java.lang.Throwable from label45 to label46 with label52;
        catch java.lang.Throwable from label47 to label50 with label05;
    }
    private static void removeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference $r0;
        java.util.Map $r1, $r3;
        java.lang.ref.WeakReference $r2;
        java.lang.Throwable $r4;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        $r1 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r1;

     label1:
        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r2 = $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: java.lang.ref.WeakReference reference>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public static void shutdownAll()
    {
        java.util.Map $r0, $r8;
        java.util.WeakHashMap $r1, $r2;
        java.util.Set $r3;
        int $i0, $i1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager[] $r4;
        java.lang.Object[] $r5;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread $r7;
        java.lang.Throwable $r9, $r10;

        $r0 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r0;

     label01:
        $r1 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        entermonitor $r1;

     label02:
        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.util.Set keySet()>();

        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.WeakHashMap ALL_CONNECTION_MANAGERS>;

        $i0 = virtualinvoke $r2.<java.util.WeakHashMap: int size()>();

        $r4 = newarray (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager[]) $r5;

        $i0 = 0;

     label03:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label05;

        $r6 = $r4[$i0];

        if $r6 == null goto label04;

        $r6 = $r4[$i0];

        virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void shutdown()>();

     label04:
        $i0 = $i0 + 1;

        goto label03;

     label05:
        exitmonitor $r1;

     label06:
        $r7 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        if $r7 == null goto label07;

        $r7 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        virtualinvoke $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void shutdown()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD> = null;

     label07:
        $r8 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        interfaceinvoke $r8.<java.util.Map: void clear()>();

        exitmonitor $r0;

     label08:
        return;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor $r1;

     label11:
        throw $r9;

     label12:
        $r10 := @caughtexception;

        exitmonitor $r0;

     label13:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label06 with label09;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label13 with label12;
    }
    private static void shutdownCheckedOutConnections(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r0, $r9;
        java.util.ArrayList r1;
        java.util.Map $r2, $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.ref.Reference r7;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource r8;
        org.apache.commons.httpclient.HttpConnection r10;
        java.lang.Throwable $r11;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r2;

     label1:
        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.ref.Reference) $r6;

        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource) $r6;

        $r9 = r8.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        if $r9 != $r0 goto label2;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        $r6 = virtualinvoke r7.<java.lang.ref.Reference: java.lang.Object get()>();

        r10 = (org.apache.commons.httpclient.HttpConnection) $r6;

        if r10 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

        goto label2;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r11;

     label5:
        exitmonitor $r2;

     label6:
        $r5 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.httpclient.HttpConnection) $r6;

        virtualinvoke r10.<org.apache.commons.httpclient.HttpConnection: void close()>();

        virtualinvoke r10.<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>(null);

        virtualinvoke r10.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }
    private static void storeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference, org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference $r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r2;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource r3;
        java.util.Map $r4, $r7;
        java.lang.ref.WeakReference $r5;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread $r6;
        java.lang.Throwable $r8;

        $r0 := @parameter0: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference;

        $r1 := @parameter1: org.apache.commons.httpclient.HostConfiguration;

        $r2 := @parameter2: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool;

        r3 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource;

        specialinvoke r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: void <init>(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$1)>(null);

        r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool> = $r2;

        r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r1;

        $r4 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        entermonitor $r4;

     label1:
        $r6 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        if $r6 != null goto label2;

        $r6 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        specialinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void <init>()>();

        <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD> = $r6;

        $r6 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread REFERENCE_QUEUE_THREAD>;

        virtualinvoke $r6.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void start()>();

     label2:
        $r7 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map REFERENCE_TO_CONNECTION_SOURCE>;

        $r5 = $r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference: java.lang.ref.WeakReference reference>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        exitmonitor $r4;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public void closeIdleConnections(long)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        long $l0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void closeIdleConnections(long)>($l0);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void deleteClosedConnections()>();

        return;
    }
    public void deleteClosedConnections()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void deleteClosedConnections()>();

        return;
    }
    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.ConnectionPoolTimeoutException r2;
        org.apache.commons.httpclient.HttpConnection $r3;
        org.apache.commons.logging.Log $r4;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>($r1, 0L);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unexpected exception while waiting for connection", r2);

        goto label1;

        catch org.apache.commons.httpclient.ConnectionPoolTimeoutException from label1 to label2 with label3;
    }
    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration, long) throws org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        long $l0;
        org.apache.commons.httpclient.ConnectionPoolTimeoutException r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.HttpConnection $r4;
        org.apache.commons.httpclient.HttpException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $l0 := @parameter1: long;

        $r3 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.getConnection(HostConfiguration, long)");

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>($r1, $l0);

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.HttpException;

        $r6 = virtualinvoke r2.<org.apache.commons.httpclient.ConnectionPoolTimeoutException: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch org.apache.commons.httpclient.ConnectionPoolTimeoutException from label1 to label2 with label3;
    }
    public org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration, long) throws org.apache.commons.httpclient.ConnectionPoolTimeoutException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        long $l0;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        java.lang.StringBuffer $r4;
        java.lang.String $r5;
        org.apache.commons.httpclient.HttpConnection $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter $r7;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $l0 := @parameter1: long;

        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.getConnectionWithTimeout(HostConfiguration, long)");

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("hostConfiguration is null");

        throw $r3;

     label1:
        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HttpConnectionManager.getConnection:  config = ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", timeout = ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label2:
        $r6 = specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection doGetConnection(org.apache.commons.httpclient.HostConfiguration,long)>($r1, $l0);

        $r7 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        specialinvoke $r7.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: void <init>(org.apache.commons.httpclient.HttpConnection)>($r6);

        return $r7;
    }
    public int getConnectionsInPool()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1, $r2;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $i0 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: int access$200(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)>($r2);

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public int getConnectionsInPool(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r2, $r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool $r4;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $i0 = 0;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r2;

     label1:
        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool getHostPool(org.apache.commons.httpclient.HostConfiguration,boolean)>($r1, 0);

        if $r4 == null goto label2;

        $i0 = $r4.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HostConnectionPool: int numConnections>;

     label2:
        exitmonitor $r2;

     label3:
        return $i0;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public int getConnectionsInUse()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool()>();

        return $i0;
    }
    public int getConnectionsInUse(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool(org.apache.commons.httpclient.HostConfiguration)>($r1);

        return $i0;
    }
    public int getMaxConnectionsPerHost()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getDefaultMaxConnectionsPerHost()>();

        return $i0;
    }
    public int getMaxTotalConnections()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxTotalConnections()>();

        return $i0;
    }
    public org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        return r1;
    }
    public boolean isConnectionStaleCheckingEnabled()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: boolean isStaleCheckingEnabled()>();

        return $z0;
    }
    public void releaseConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.logging.Log $r2;
        boolean $z0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r3;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r4;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnectionManager.releaseConnection(HttpConnection)");

        $z0 = $r1 instanceof org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        if $z0 == 0 goto label1;

        r3 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter) $r1;

        $r1 = virtualinvoke r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection getWrappedConnection()>();

     label1:
        staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>($r1);

        $r4 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r4.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void freeConnection(org.apache.commons.httpclient.HttpConnection)>($r1);

        return;
    }
    public void setConnectionStaleCheckingEnabled(boolean)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setStaleCheckingEnabled(boolean)>($z0);

        return;
    }
    public void setMaxConnectionsPerHost(int)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaultMaxConnectionsPerHost(int)>($i0);

        return;
    }
    public void setMaxTotalConnections(int)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setMaxTotalConnections(int)>($i0);

        return;
    }
    public void setParams(org.apache.commons.httpclient.params.HttpConnectionManagerParams)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        return;
    }
    public void shutdown()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3, $r4;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        entermonitor $r1;

     label2:
        $z0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown>;

        if $z0 != 0 goto label3;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean shutdown> = 1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        virtualinvoke $r2.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void shutdown()>();

     label3:
        exitmonitor $r1;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor $r1;

     label7:
        throw $r3;

     label8:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }
