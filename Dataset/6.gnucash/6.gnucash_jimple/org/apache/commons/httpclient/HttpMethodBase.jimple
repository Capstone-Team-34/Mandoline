org.apache.commons.httpclient.HttpMethodBase extends java.lang.Object implements org.apache.commons.httpclient.HttpMethod
private static final int DEFAULT_INITIAL_BUFFER_SIZE
private static final org.apache.commons.logging.Log LOG
private static final int RESPONSE_WAIT_TIME_MS
static java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase
private volatile boolean aborted
private boolean connectionCloseForced
private org.apache.commons.httpclient.cookie.CookieSpec cookiespec
private boolean doAuthentication
protected org.apache.commons.httpclient.HttpVersion effectiveVersion
private boolean followRedirects
private org.apache.commons.httpclient.auth.AuthState hostAuthState
private org.apache.commons.httpclient.HttpHost httphost
private org.apache.commons.httpclient.MethodRetryHandler methodRetryHandler
private org.apache.commons.httpclient.params.HttpMethodParams params
private java.lang.String path
private org.apache.commons.httpclient.auth.AuthState proxyAuthState
private java.lang.String queryString
private int recoverableExceptionCount
private org.apache.commons.httpclient.HeaderGroup requestHeaders
private boolean requestSent
private byte[] responseBody
private org.apache.commons.httpclient.HttpConnection responseConnection
private org.apache.commons.httpclient.HeaderGroup responseHeaders
private java.io.InputStream responseStream
private org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders
protected org.apache.commons.httpclient.StatusLine statusLine
private boolean used
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpMethodBase");

        $r1 = $r0;

        <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.HttpMethodBase: java.lang.Class class$org$apache$commons$httpclient$HttpMethodBase>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;
        org.apache.commons.httpclient.params.HttpMethodParams $r2;
        org.apache.commons.httpclient.auth.AuthState $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders> = $r1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        $r1 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders> = $r1;

        $r1 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders> = $r1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = 1;

        $r2 = new org.apache.commons.httpclient.params.HttpMethodParams;

        specialinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = $r2;

        $r3 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState> = $r3;

        $r3 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState> = $r3;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = null;

        return;
    }
    public void <init>(java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.URIException r1;
        java.lang.String $r2, $r6;
        org.apache.commons.httpclient.HeaderGroup $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        org.apache.commons.httpclient.auth.AuthState $r5;
        boolean $z0;
        org.apache.commons.httpclient.URI $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuffer $r9;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders> = $r3;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        $r3 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders> = $r3;

        $r3 = new org.apache.commons.httpclient.HeaderGroup;

        specialinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders> = $r3;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = 1;

        $r4 = new org.apache.commons.httpclient.params.HttpMethodParams;

        specialinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = $r4;

        $r5 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState> = $r5;

        $r5 = new org.apache.commons.httpclient.auth.AuthState;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState> = $r5;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = null;

        if $r2 == null goto label3;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

     label2:
        if $z0 == 0 goto label4;

     label3:
        $r2 = "/";

     label4:
        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>();

     label5:
        $r7 = new org.apache.commons.httpclient.URI;

     label6:
        specialinvoke $r7.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>($r2, 1, $r6);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setURI(org.apache.commons.httpclient.URI)>($r7);

     label7:
        return;

     label8:
        r1 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid uri \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\': ");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.URIException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r8;

        catch org.apache.commons.httpclient.URIException from label1 to label2 with label8;
        catch org.apache.commons.httpclient.URIException from label4 to label5 with label8;
        catch org.apache.commons.httpclient.URIException from label6 to label7 with label8;
    }
    private static boolean canResponseHaveBody(int)
    {
        int $i0;
        org.apache.commons.logging.Log $r0;

        $i0 := @parameter0: int;

        $r0 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.canResponseHaveBody(int)");

        if $i0 < 100 goto label1;

        if $i0 <= 199 goto label2;

     label1:
        if $i0 == 204 goto label2;

        if $i0 != 304 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    private void checkExecuteConditions(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.IllegalStateException $r4;
        org.apache.commons.httpclient.ProtocolException $r5;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HttpState parameter may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HttpConnection parameter may not be null");

        throw $r3;

     label2:
        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted>;

        if $z0 == 0 goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Method has been aborted");

        throw $r4;

     label3:
        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean validate()>();

        if $z0 != 0 goto label4;

        $r5 = new org.apache.commons.httpclient.ProtocolException;

        specialinvoke $r5.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>("HttpMethodBase object not valid");

        throw $r5;

     label4:
        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    private void ensureConnectionRelease()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = null;

     label1:
        return;
    }
    protected static java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.HttpConnection $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        java.lang.StringBuffer r5;
        org.apache.commons.logging.Log $r6;
        boolean $z0;
        org.apache.commons.httpclient.protocol.Protocol $r7;
        int $i0, $i1;

        $r0 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $r6 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.generateRequestLine(HttpConnection, String, String, String, String)");

        r5 = new java.lang.StringBuffer;

        specialinvoke r5.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $z0 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $r1 = virtualinvoke $r7.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("://");

        $r1 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $i0 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        if $i0 == -1 goto label1;

        $i0 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $i1 = virtualinvoke $r7.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

        if $i0 == $i1 goto label1;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i0 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label1:
        if $r2 != null goto label5;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label2:
        if $r3 == null goto label4;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("?");

        if $i0 == 0 goto label3;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?");

     label3:
        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label4:
        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r1 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;

     label5:
        $z0 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z0 != 0 goto label6;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label6;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label6:
        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label2;
    }
    private org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.cookie.CookieSpec $r2;
        int $i0;
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        java.lang.String $r4;
        java.lang.Object $r5;
        java.util.Collection $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec>;

        if $r2 != null goto label2;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpState: int getCookiePolicy()>();

        if $i0 != -1 goto label3;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCookiePolicy()>();

        $r2 = staticinvoke <org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(java.lang.String)>($r4);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = $r2;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec>;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r5 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.dateparser.patterns");

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r2.<org.apache.commons.httpclient.cookie.CookieSpec: void setValidDateFormats(java.util.Collection)>($r6);

     label2:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec>;

        return $r2;

     label3:
        $r2 = staticinvoke <org.apache.commons.httpclient.cookie.CookiePolicy: org.apache.commons.httpclient.cookie.CookieSpec getSpecByPolicy(int)>($i0);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = $r2;

        goto label1;
    }
    private java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.String $r2, $r3, $r4, $r6;
        org.apache.commons.httpclient.HttpVersion $r5;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getQueryString()>();

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>();

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpMethodBase: java.lang.String generateRequestLine(org.apache.commons.httpclient.HttpConnection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4, $r6);

        return $r2;
    }
    private java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException, java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        int i0;
        org.apache.commons.logging.Log $r2;
        java.io.InputStream $r3, r4;
        org.apache.commons.httpclient.Wire $r5;
        boolean $z0, $z1;
        org.apache.commons.httpclient.StatusLine $r6;
        org.apache.commons.httpclient.HeaderGroup $r7;
        org.apache.commons.httpclient.Header $r8;
        java.lang.String $r9, $r10;
        java.lang.StringBuffer $r11, $r19;
        org.apache.commons.httpclient.HeaderElement[] $r12;
        org.apache.commons.httpclient.HeaderElement $r13;
        org.apache.commons.httpclient.params.HttpConnectionParams $r14;
        org.apache.commons.httpclient.params.HttpMethodParams $r15;
        long $l1;
        byte $b2;
        org.apache.commons.httpclient.HttpVersion $r16, $r17;
        org.apache.commons.httpclient.WireLogInputStream $r18;
        org.apache.commons.httpclient.ChunkedInputStream $r20;
        org.apache.commons.httpclient.HttpMethodBase$1 $r21;
        org.apache.commons.httpclient.AutoCloseInputStream $r22;
        org.apache.commons.httpclient.ProtocolException $r23;
        org.apache.commons.httpclient.ContentLengthInputStream $r24;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponseBody(HttpConnection)");

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>();

        r4 = $r3;

        $r5 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label01;

        $r18 = new org.apache.commons.httpclient.WireLogInputStream;

        $r5 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        specialinvoke $r18.<org.apache.commons.httpclient.WireLogInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.Wire)>($r3, $r5);

        r4 = $r18;

     label01:
        $r6 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        i0 = virtualinvoke $r6.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        $z0 = staticinvoke <org.apache.commons.httpclient.HttpMethodBase: boolean canResponseHaveBody(int)>(i0);

        $r3 = null;

        $r7 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        if $r8 == null goto label08;

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r10 = "chunked";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z1 != 0 goto label02;

        $r10 = "identity";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z1 != 0 goto label02;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z1 == 0 goto label02;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported transfer encoding: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r9);

     label02:
        $r12 = virtualinvoke $r8.<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>();

        i0 = lengthof $r12;

        if i0 <= 0 goto label07;

        $r9 = "chunked";

        i0 = i0 + -1;

        $r13 = $r12[i0];

        $r10 = virtualinvoke $r13.<org.apache.commons.httpclient.HeaderElement: java.lang.String getName()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r10);

        if $z1 == 0 goto label07;

        $r14 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        i0 = virtualinvoke $r14.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        $z1 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>(i0);

        if $z1 == 0 goto label05;

        $r20 = new org.apache.commons.httpclient.ChunkedInputStream;

        $r3 = $r20;

        specialinvoke $r20.<org.apache.commons.httpclient.ChunkedInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.HttpMethod)>(r4, r0);

     label03:
        if $z0 != 0 goto label13;

        r4 = null;

     label04:
        if r4 == null goto label12;

        $r22 = new org.apache.commons.httpclient.AutoCloseInputStream;

        $r21 = new org.apache.commons.httpclient.HttpMethodBase$1;

        specialinvoke $r21.<org.apache.commons.httpclient.HttpMethodBase$1: void <init>(org.apache.commons.httpclient.HttpMethodBase)>(r0);

        specialinvoke $r22.<org.apache.commons.httpclient.AutoCloseInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.ResponseConsumedWatcher)>(r4, $r21);

        return $r22;

     label05:
        $r15 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z1 = virtualinvoke $r15.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.strict-transfer-encoding");

        if $z1 == 0 goto label06;

        $r23 = new org.apache.commons.httpclient.ProtocolException;

        specialinvoke $r23.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>("Chunk-encoded body declared but not sent");

        throw $r23;

     label06:
        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Chunk-encoded body missing");

        goto label03;

     label07:
        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Response content is not chunk-encoded");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>(1);

        $r3 = r4;

        goto label03;

     label08:
        $l1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label11;

        if $z0 == 0 goto label10;

        $r16 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r17 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z1 = virtualinvoke $r16.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r17);

        if $z1 == 0 goto label10;

        $r7 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("Connection");

        $r9 = null;

        if $r8 == null goto label09;

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label09:
        $r10 = "close";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z1 != 0 goto label10;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Response content length is not known");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)>(1);

     label10:
        $r3 = r4;

        goto label03;

     label11:
        $r24 = new org.apache.commons.httpclient.ContentLengthInputStream;

        $r3 = $r24;

        specialinvoke $r24.<org.apache.commons.httpclient.ContentLengthInputStream: void <init>(java.io.InputStream,long)>(r4, $l1);

        goto label03;

     label12:
        return r4;

     label13:
        r4 = $r3;

        goto label04;
    }
    private boolean responseAvailable()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        byte[] $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        if $r2 == null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public void abort()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 1;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        if r1 == null goto label2;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label2:
        return;
    }
    protected void addCookieRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.Header r3;
        org.apache.commons.logging.Log $r4;
        org.apache.commons.httpclient.HeaderGroup $r5;
        org.apache.commons.httpclient.Header[] $r6;
        int i0, $i1, $i2;
        boolean $z0;
        org.apache.commons.httpclient.cookie.CookieSpec $r7;
        org.apache.commons.httpclient.params.HttpMethodParams $r8;
        java.lang.String $r9, r10;
        org.apache.commons.httpclient.Cookie[] $r11;
        org.apache.commons.httpclient.cookie.CookieVersionSupport r12;
        org.apache.commons.httpclient.Cookie $r13;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addCookieRequestHeader(HttpState, HttpConnection)");

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("Cookie");

        i0 = 0;

     label01:
        $i1 = lengthof $r6;

        if i0 >= $i1 goto label03;

        r3 = $r6[i0];

        $z0 = virtualinvoke r3.<org.apache.commons.httpclient.Header: boolean isAutogenerated()>();

        if $z0 == 0 goto label02;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>(r3);

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $r7 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>($r1);

        $r8 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r10 = $r9;

        if $r9 != null goto label04;

        r10 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label04:
        i0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r9 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        $r11 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Cookie[] getCookies()>();

        $r11 = interfaceinvoke $r7.<org.apache.commons.httpclient.cookie.CookieSpec: org.apache.commons.httpclient.Cookie[] match(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie[])>(r10, i0, $r9, $z0, $r11);

        if $r11 == null goto label11;

        i0 = lengthof $r11;

        if i0 <= 0 goto label11;

        $r8 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z0 = virtualinvoke $r8.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.single-cookie-header");

        if $z0 == 0 goto label08;

        r10 = interfaceinvoke $r7.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookies(org.apache.commons.httpclient.Cookie[])>($r11);

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        r3 = new org.apache.commons.httpclient.Header;

        specialinvoke r3.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Cookie", r10, 1);

        virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>(r3);

     label05:
        $z0 = $r7 instanceof org.apache.commons.httpclient.cookie.CookieVersionSupport;

        if $z0 == 0 goto label11;

        r12 = (org.apache.commons.httpclient.cookie.CookieVersionSupport) $r7;

        i0 = interfaceinvoke r12.<org.apache.commons.httpclient.cookie.CookieVersionSupport: int getVersion()>();

        $z0 = 0;

        $i1 = 0;

     label06:
        $i2 = lengthof $r11;

        if $i1 >= $i2 goto label10;

        $r13 = $r11[$i1];

        $i2 = virtualinvoke $r13.<org.apache.commons.httpclient.Cookie: int getVersion()>();

        if i0 == $i2 goto label07;

        $z0 = 1;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        i0 = 0;

     label09:
        $i1 = lengthof $r11;

        if i0 >= $i1 goto label05;

        $r13 = $r11[i0];

        r10 = interfaceinvoke $r7.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>($r13);

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        r3 = new org.apache.commons.httpclient.Header;

        specialinvoke r3.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Cookie", r10, 1);

        virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>(r3);

        i0 = i0 + 1;

        goto label09;

     label10:
        if $z0 == 0 goto label11;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        r3 = interfaceinvoke r12.<org.apache.commons.httpclient.cookie.CookieVersionSupport: org.apache.commons.httpclient.Header getVersionHeader()>();

        virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>(r3);

     label11:
        return;
    }
    protected void addHostRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        java.lang.String $r5, r6;
        java.lang.StringBuffer $r7;
        int $i0, $i1;
        boolean $z0;
        org.apache.commons.httpclient.protocol.Protocol $r8;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addHostRequestHeader(HttpState, HttpConnection)");

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r6 = $r5;

        if $r5 == null goto label4;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Using virtual host name: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label1:
        $i0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Adding Host request header");

     label2:
        $r8 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $i1 = virtualinvoke $r8.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

        if $i1 == $i0 goto label3;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        r6 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>("Host", r6);

        return;

     label4:
        r6 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        goto label1;
    }
    protected void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        boolean $z0;
        org.apache.commons.httpclient.Header $r4;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addProxyConnectionHeader(HttpState, HttpConnection)");

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Proxy-Connection");

        if $r4 != null goto label1;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(java.lang.String,java.lang.String)>("Proxy-Connection", "Keep-Alive");

     label1:
        return;
    }
    public void addRequestHeader(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1, $r2;
        org.apache.commons.httpclient.Header $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.commons.httpclient.Header;

        specialinvoke $r3.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeader(org.apache.commons.httpclient.Header)>($r3);

        return;
    }
    public void addRequestHeader(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.Header;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("HttpMethodBase.addRequestHeader(Header)");

        if $r1 != null goto label1;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("null header value ignored");

        return;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>($r1);

        return;
    }
    protected void addRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addRequestHeaders(HttpState, HttpConnection)");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addHostRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addCookieRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        return;
    }
    public void addResponseFooter(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.Header;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>($r1);

        return;
    }
    protected void addUserAgentRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.Header $r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        java.lang.Object $r6;
        java.lang.String r7;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.addUserAgentRequestHeaders(HttpState, HttpConnection)");

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("User-Agent");

        if $r4 != null goto label2;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.useragent");

        r7 = (java.lang.String) $r6;

        if r7 != null goto label1;

        r7 = "Jakarta Commons-HttpClient";

     label1:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(java.lang.String,java.lang.String)>("User-Agent", r7);

     label2:
        return;
    }
    protected void checkNotUsed() throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already used.");

        throw $r1;

     label1:
        return;
    }
    protected void checkUsed() throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not Used.");

        throw $r1;

     label1:
        return;
    }
    public int execute(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException, java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.HttpVersion $r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.StatusLine $r6;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.execute(HttpState, HttpConnection)");

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection> = $r2;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void checkExecuteConditions(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>(null);

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        if $r4 != null goto label1;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r4 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = $r4;

     label1:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void writeRequest(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 1;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void readResponse(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 1;

        $r6 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i0 = virtualinvoke $r6.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        return $i0;
    }
    void fakeResponse(org.apache.commons.httpclient.StatusLine, org.apache.commons.httpclient.HeaderGroup, java.io.InputStream)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.StatusLine $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.StatusLine;

        $r2 := @parameter1: org.apache.commons.httpclient.HeaderGroup;

        $r3 := @parameter2: java.io.InputStream;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = $r1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders> = $r2;

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = $r3;

        return;
    }
    public java.lang.String getAuthenticationRealm()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.auth.AuthState $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState>;

        $r1 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: java.lang.String getRealm()>();

        return $r1;
    }
    protected java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String r3, $r9;
        org.apache.commons.httpclient.HeaderElement[] $r4;
        int $i0;
        org.apache.commons.httpclient.HeaderElement $r5;
        org.apache.commons.httpclient.NameValuePair $r6;
        org.apache.commons.httpclient.params.HttpMethodParams $r7;
        boolean $z0;
        java.lang.StringBuffer $r8;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.Header;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter getContentCharSet( Header contentheader )");

        r3 = null;

        if $r1 == null goto label1;

        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.Header: org.apache.commons.httpclient.HeaderElement[] getElements()>();

        $i0 = lengthof $r4;

        if $i0 != 1 goto label1;

        $r5 = $r4[0];

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>("charset");

        if $r6 == null goto label1;

        r3 = virtualinvoke $r6.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

     label1:
        if r3 != null goto label2;

        $r7 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r3 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getContentCharset()>();

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default charset used: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label2:
        return r3;
    }
    public boolean getDoAuthentication()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication>;

        return z0;
    }
    public org.apache.commons.httpclient.HttpVersion getEffectiveVersion()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpVersion r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        return r1;
    }
    public boolean getFollowRedirects()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects>;

        return z0;
    }
    public org.apache.commons.httpclient.auth.AuthState getHostAuthState()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.auth.AuthState r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState>;

        return r1;
    }
    public org.apache.commons.httpclient.HostConfiguration getHostConfiguration()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.HttpHost $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke r1.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        virtualinvoke r1.<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.HttpHost)>($r2);

        return r1;
    }
    public org.apache.commons.httpclient.MethodRetryHandler getMethodRetryHandler()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.MethodRetryHandler r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.MethodRetryHandler methodRetryHandler>;

        return r1;
    }
public abstract java.lang.String getName() { 
// no body
} 
    public org.apache.commons.httpclient.params.HttpMethodParams getParams()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.params.HttpMethodParams r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        return r1;
    }
    public java.lang.String getPath()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        return "/";

     label2:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

        return $r1;
    }
    public org.apache.commons.httpclient.auth.AuthState getProxyAuthState()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.auth.AuthState r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState>;

        return r1;
    }
    public java.lang.String getProxyAuthenticationRealm()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.auth.AuthState $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState>;

        $r1 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: java.lang.String getRealm()>();

        return $r1;
    }
    public java.lang.String getQueryString()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString>;

        return r1;
    }
    public int getRecoverableExceptionCount()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        i0 = r0.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount>;

        return i0;
    }
    public java.lang.String getRequestCharSet()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Content-Type");

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>($r1);

        return $r2;
    }
    public org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        org.apache.commons.httpclient.Header $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>($r1);

        return $r3;
    }
    protected org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders>;

        return r1;
    }
    public org.apache.commons.httpclient.Header[] getRequestHeaders()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;
        org.apache.commons.httpclient.Header[] $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>();

        return $r2;
    }
    public org.apache.commons.httpclient.Header[] getRequestHeaders(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        org.apache.commons.httpclient.Header[] $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>($r1);

        return $r3;
    }
    public byte[] getResponseBody() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        byte[] r1;
        java.io.ByteArrayOutputStream r2;
        java.io.InputStream $r3;
        long $l0, $l3;
        byte $b1;
        java.io.IOException $r4;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;
        org.apache.commons.httpclient.params.HttpMethodParams $r7;
        int $i2;
        org.apache.commons.logging.Log $r8;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if r1 != null goto label8;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>();

        if $r3 == null goto label8;

        $l0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>();

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content too large to be buffered: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" bytes");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $r7 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i2 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.method.response.buffer.warnlimit", 1048576);

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label2;

        $l3 = (long) $i2;

        $b1 = $l0 cmp $l3;

        if $b1 <= 0 goto label3;

     label2:
        $r8 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Going to buffer response body of large or unknown size. Using getResponseBodyAsStream instead is recommended.");

     label3:
        $r8 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Buffering response body");

        r2 = new java.io.ByteArrayOutputStream;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label6;

        $i2 = (int) $l0;

     label4:
        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>(int)>($i2);

        r1 = newarray (byte)[4096];

     label5:
        $i2 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>(r1);

        if $i2 <= 0 goto label7;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i2);

        goto label5;

     label6:
        $i2 = 4096;

        goto label4;

     label7:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void close()>();

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>(null);

        r1 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = r1;

     label8:
        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        return r1;
    }
    public byte[] getResponseBody(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        int $i0, $i4, $i5, $i6;
        byte[] r1;
        java.io.ByteArrayOutputStream r2;
        java.lang.IllegalArgumentException $r3;
        java.io.InputStream $r4;
        long $l1, $l3;
        byte $b2;
        org.apache.commons.httpclient.HttpContentTooLargeException $r5;
        java.lang.StringBuffer $r6;
        java.lang.String $r7;
        org.apache.commons.logging.Log $r8;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxlen must be positive");

        throw $r3;

     label1:
        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if r1 != null goto label9;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream getResponseBodyAsStream()>();

        if $r4 == null goto label9;

        $l1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: long getResponseContentLength()>();

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label2;

        $l3 = (long) $i0;

        $b2 = $l1 cmp $l3;

        if $b2 <= 0 goto label2;

        $r5 = new org.apache.commons.httpclient.HttpContentTooLargeException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Length is ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.commons.httpclient.HttpContentTooLargeException: void <init>(java.lang.String,int)>($r7, $i0);

        throw $r5;

     label2:
        $r8 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Buffering response body");

        r2 = new java.io.ByteArrayOutputStream;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label6;

        $i4 = (int) $l1;

     label3:
        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>(int)>($i4);

        r1 = newarray (byte)[2048];

        $i4 = 0;

     label4:
        $i5 = lengthof r1;

        $i6 = $i0 - $i4;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

        $i5 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i5);

        if $i5 != -1 goto label7;

     label5:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>(null);

        if $i4 != $i0 goto label8;

        $i4 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        if $i4 == -1 goto label8;

        $r5 = new org.apache.commons.httpclient.HttpContentTooLargeException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Length not known but larger than ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.commons.httpclient.HttpContentTooLargeException: void <init>(java.lang.String,int)>($r7, $i0);

        throw $r5;

     label6:
        $i4 = 4096;

        goto label3;

     label7:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i5);

        $i4 = $i4 + $i5;

        if $i4 < $i0 goto label4;

        goto label5;

     label8:
        r1 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = r1;

     label9:
        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        return r1;
    }
    public java.io.InputStream getResponseBodyAsStream() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.InputStream $r1;
        byte[] $r2;
        java.io.ByteArrayInputStream r3;
        org.apache.commons.logging.Log $r4;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        return $r1;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        if $r2 == null goto label2;

        r3 = new java.io.ByteArrayInputStream;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody>;

        specialinvoke r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("re-creating response stream from byte array");

        return r3;

     label2:
        return null;
    }
    public java.lang.String getResponseBodyAsString() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        byte[] r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = null;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean responseAvailable()>();

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody()>();

     label1:
        if r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseCharSet()>();

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>(r1, $r2);

        return $r2;

     label2:
        return null;
    }
    public java.lang.String getResponseBodyAsString(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        byte[] r2;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxlen must be positive");

        throw $r1;

     label1:
        r2 = null;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean responseAvailable()>();

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] getResponseBody(int)>($i0);

     label2:
        if r2 == null goto label3;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getResponseCharSet()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)>(r2, $r3);

        return $r3;

     label3:
        return null;
    }
    public java.lang.String getResponseCharSet()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("Content-Type");

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>($r1);

        return $r2;
    }
    public long getResponseContentLength()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.NumberFormatException r1;
        org.apache.commons.httpclient.Header r2;
        org.apache.commons.httpclient.HeaderGroup $r3;
        org.apache.commons.httpclient.Header[] $r4;
        int $i0;
        org.apache.commons.logging.Log $r5;
        java.lang.String $r6;
        long $l1;
        boolean $z0;
        java.lang.StringBuffer $r7;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("Content-Length");

        $i0 = lengthof $r4;

        if $i0 != 0 goto label1;

        return -1L;

     label1:
        $i0 = lengthof $r4;

        if $i0 <= 1 goto label2;

        $r5 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Multiple content-length headers detected");

     label2:
        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

     label3:
        if $i0 < 0 goto label8;

        r2 = $r4[$i0];

     label4:
        $r6 = virtualinvoke r2.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

     label5:
        return $l1;

     label6:
        r1 := @caughtexception;

        $r5 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label7;

        $r5 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid content-length value: ");

        $r6 = virtualinvoke r1.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r6);

     label7:
        $i0 = $i0 + -1;

        goto label3;

     label8:
        return -1L;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }
    public org.apache.commons.httpclient.Header getResponseFooter(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        org.apache.commons.httpclient.Header $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>($r1);

        return $r3;
    }
    public org.apache.commons.httpclient.Header[] getResponseFooters()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;
        org.apache.commons.httpclient.Header[] $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>();

        return $r2;
    }
    public org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        org.apache.commons.httpclient.Header $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getCondensedHeader(java.lang.String)>($r1);

        return $r3;
    }
    protected org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        return r1;
    }
    public org.apache.commons.httpclient.Header[] getResponseHeaders()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup $r1;
        org.apache.commons.httpclient.Header[] $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getAllHeaders()>();

        return $r2;
    }
    public org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        org.apache.commons.httpclient.Header[] $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>($r1);

        return $r3;
    }
    protected java.io.InputStream getResponseStream()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

        return r1;
    }
    protected org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HeaderGroup r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseTrailerHeaders>;

        return r1;
    }
    public int getStatusCode()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        int $i0;
        org.apache.commons.httpclient.StatusLine $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        return $i0;
    }
    public org.apache.commons.httpclient.StatusLine getStatusLine()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.StatusLine r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        return r1;
    }
    public java.lang.String getStatusText()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.StatusLine $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r1 = virtualinvoke $r2.<org.apache.commons.httpclient.StatusLine: java.lang.String getReasonPhrase()>();

        return $r1;
    }
    public org.apache.commons.httpclient.URI getURI() throws org.apache.commons.httpclient.URIException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.StringBuffer r1;
        org.apache.commons.httpclient.HttpHost $r2;
        org.apache.commons.httpclient.protocol.Protocol $r3;
        java.lang.String $r4, $r7;
        int $i0, $i1;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.URI $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        if $r2 == null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("://");

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $r4 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpHost: java.lang.String getHostName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $i0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpHost: int getPort()>();

        if $i0 == -1 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpHost: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $i1 = virtualinvoke $r3.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

        if $i0 == $i1 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label1:
        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString>;

        if $r4 == null goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label2:
        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r4 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>();

        $r6 = new org.apache.commons.httpclient.URI;

        $r7 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>($r7, 1, $r4);

        return $r6;
    }
    public boolean hasBeenUsed()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used>;

        return z0;
    }
    public boolean isAborted()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted>;

        return z0;
    }
    protected boolean isConnectionCloseForced()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced>;

        return z0;
    }
    public boolean isHttp11()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpVersion $r1, $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>();

        $r1 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.HttpVersion: boolean equals(org.apache.commons.httpclient.HttpVersion)>($r1);

        return $z0;
    }
    public boolean isRequestSent()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        z0 = r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent>;

        return z0;
    }
    public boolean isStrictMode()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        return 0;
    }
    protected void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec, org.apache.commons.httpclient.Header[], org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.cookie.CookieSpec $r1;
        org.apache.commons.httpclient.Header[] $r2;
        org.apache.commons.httpclient.HttpState $r3;
        org.apache.commons.httpclient.HttpConnection $r4;
        org.apache.commons.httpclient.Header r5;
        org.apache.commons.httpclient.Cookie r6;
        org.apache.commons.logging.Log $r7;
        org.apache.commons.httpclient.params.HttpMethodParams $r8;
        java.lang.String $r9, r10;
        int i0, $i1, $i2;
        org.apache.commons.httpclient.Cookie[] r11, $r12;
        boolean $z0;
        java.lang.StringBuffer $r13;
        org.apache.commons.httpclient.cookie.MalformedCookieException r14, r15;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.cookie.CookieSpec;

        $r2 := @parameter1: org.apache.commons.httpclient.Header[];

        $r3 := @parameter2: org.apache.commons.httpclient.HttpState;

        $r4 := @parameter3: org.apache.commons.httpclient.HttpConnection;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.processCookieHeaders(Header[], HttpState, HttpConnection)");

        $r8 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r10 = $r9;

        if $r9 != null goto label01;

        r10 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label01:
        i0 = 0;

     label02:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label16;

        r5 = $r2[i0];

        r11 = null;

     label03:
        $i1 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r9 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        $r12 = interfaceinvoke $r1.<org.apache.commons.httpclient.cookie.CookieSpec: org.apache.commons.httpclient.Cookie[] parse(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Header)>(r10, $i1, $r9, $z0, r5);

     label04:
        r11 = $r12;

     label05:
        if r11 == null goto label15;

        $i1 = 0;

     label06:
        $i2 = lengthof r11;

        if $i1 >= $i2 goto label15;

        r6 = r11[$i1];

     label07:
        $i2 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r9 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        interfaceinvoke $r1.<org.apache.commons.httpclient.cookie.CookieSpec: void validate(java.lang.String,int,java.lang.String,boolean,org.apache.commons.httpclient.Cookie)>(r10, $i2, $r9, $z0, r6);

        virtualinvoke $r3.<org.apache.commons.httpclient.HttpState: void addCookie(org.apache.commons.httpclient.Cookie)>(r6);

     label08:
        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

     label09:
        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

     label10:
        if $z0 == 0 goto label12;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r13 = new java.lang.StringBuffer;

     label11:
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cookie accepted: \"");

        $r9 = interfaceinvoke $r1.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>(r6);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label12:
        $i1 = $i1 + 1;

        goto label06;

     label13:
        r14 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label05;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid cookie header: \"");

        $r9 = virtualinvoke r5.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\". ");

        $r9 = virtualinvoke r14.<org.apache.commons.httpclient.cookie.MalformedCookieException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r9);

        goto label05;

     label14:
        r15 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label12;

        $r7 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cookie rejected: \"");

        $r9 = interfaceinvoke $r1.<org.apache.commons.httpclient.cookie.CookieSpec: java.lang.String formatCookie(org.apache.commons.httpclient.Cookie)>(r6);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\". ");

        $r9 = virtualinvoke r15.<org.apache.commons.httpclient.cookie.MalformedCookieException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r9);

        goto label12;

     label15:
        i0 = i0 + 1;

        goto label02;

     label16:
        return;

        catch org.apache.commons.httpclient.cookie.MalformedCookieException from label03 to label04 with label13;
        catch org.apache.commons.httpclient.cookie.MalformedCookieException from label07 to label08 with label14;
        catch org.apache.commons.httpclient.cookie.MalformedCookieException from label09 to label10 with label14;
        catch org.apache.commons.httpclient.cookie.MalformedCookieException from label11 to label12 with label14;
    }
    protected void processResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        return;
    }
    protected void processResponseHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.cookie.CookieSpec $r4;
        org.apache.commons.httpclient.HeaderGroup $r5;
        org.apache.commons.httpclient.Header[] $r6;
        boolean $z0;
        org.apache.commons.httpclient.cookie.CookieVersionSupport r7;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.processResponseHeaders(HttpState, HttpConnection)");

        $r4 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec getCookieSpec(org.apache.commons.httpclient.HttpState)>($r1);

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("set-cookie");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r4, $r6, $r1, $r2);

        $z0 = $r4 instanceof org.apache.commons.httpclient.cookie.CookieVersionSupport;

        if $z0 == 0 goto label1;

        r7 = (org.apache.commons.httpclient.cookie.CookieVersionSupport) $r4;

        $i0 = interfaceinvoke r7.<org.apache.commons.httpclient.cookie.CookieVersionSupport: int getVersion()>();

        if $i0 <= 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>("set-cookie2");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void processCookieHeaders(org.apache.commons.httpclient.cookie.CookieSpec,org.apache.commons.httpclient.Header[],org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r4, $r6, $r1, $r2);

     label1:
        return;
    }
    protected void processStatusLine(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        return;
    }
    protected void readResponse(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.StatusLine $r4;
        int $i0;
        boolean $z0;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponse(HttpState, HttpConnection)");

     label1:
        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        if $r4 != null goto label3;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void processStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $i0 = virtualinvoke $r4.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

        if $i0 < 100 goto label1;

        if $i0 >= 200 goto label1;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Discarding unexpected response: ");

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r6);

     label2:
        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        goto label1;

     label3:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void processResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        return;
    }
    protected void readResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        java.io.InputStream $r4;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponseBody(HttpState, HttpConnection)");

        $r4 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream readResponseBody(org.apache.commons.httpclient.HttpConnection)>($r2);

        if $r4 != null goto label1;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void responseBodyConsumed()>();

        return;

     label1:
        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>($r4);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setResponseStream(java.io.InputStream)>($r4);

        return;
    }
    protected void readResponseHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.HeaderGroup $r4;
        java.io.InputStream $r5;
        org.apache.commons.httpclient.params.HttpMethodParams $r6;
        java.lang.String $r7;
        org.apache.commons.httpclient.Header[] $r8;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readResponseHeaders(HttpState,HttpConnection)");

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        $r5 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>();

        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        $r8 = staticinvoke <org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>($r5, $r7);

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: void setHeaders(org.apache.commons.httpclient.Header[])>($r8);

        return;
    }
    protected void readStatusLine(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        int $i0, i1;
        java.lang.String $r5, $r9;
        org.apache.commons.httpclient.NoHttpResponseException $r6;
        java.lang.StringBuffer $r7;
        org.apache.commons.httpclient.Wire $r8;
        boolean $z0;
        org.apache.commons.httpclient.StatusLine $r10;
        org.apache.commons.httpclient.HttpVersion $r11;
        org.apache.commons.httpclient.ProtocolException $r12;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.readStatusLine(HttpState, HttpConnection)");

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i0 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.protocol.status-line-garbage-limit", 2147483647);

        i1 = 0;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        $r5 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>($r5);

        if $r5 != null goto label2;

        if i1 != 0 goto label2;

        $r6 = new org.apache.commons.httpclient.NoHttpResponseException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The server ");

        $r5 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" failed to respond");

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.commons.httpclient.NoHttpResponseException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label2:
        $r8 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r8.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label3;

        $r8 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.commons.httpclient.Wire: void input(java.lang.String)>($r9);

     label3:
        if $r5 == null goto label4;

        $z0 = staticinvoke <org.apache.commons.httpclient.StatusLine: boolean startsWithHTTP(java.lang.String)>($r5);

        if $z0 == 0 goto label4;

        $r10 = new org.apache.commons.httpclient.StatusLine;

        specialinvoke $r10.<org.apache.commons.httpclient.StatusLine: void <init>(java.lang.String)>($r5);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = $r10;

        $r10 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r5 = virtualinvoke $r10.<org.apache.commons.httpclient.StatusLine: java.lang.String getHttpVersion()>();

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterFalse(java.lang.String)>("http.protocol.unambiguous-statusline");

        if $z0 == 0 goto label7;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("HTTP");

        if $z0 == 0 goto label7;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r11 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0>;

        virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>($r11);

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label8;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous status line (HTTP protocol version missing):");

        $r10 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

        $r5 = virtualinvoke $r10.<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r5);

        return;

     label4:
        if $r5 == null goto label5;

        if i1 < $i0 goto label6;

     label5:
        $r12 = new org.apache.commons.httpclient.ProtocolException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The server ");

        $r5 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" failed to respond with a valid HTTP response");

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r5);

        throw $r12;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $r11 = staticinvoke <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion parse(java.lang.String)>($r5);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = $r11;

     label8:
        return;
    }
    public void recycle()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.logging.Log $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        org.apache.commons.httpclient.auth.AuthState $r4;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.recycle()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void releaseConnection()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = 1;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = null;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getResponseTrailerHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void clear()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean aborted> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean used> = 0;

        $r3 = new org.apache.commons.httpclient.params.HttpMethodParams;

        specialinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = $r3;

        r0.<org.apache.commons.httpclient.HttpMethodBase: byte[] responseBody> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: int recoverableExceptionCount> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState hostAuthState>;

        virtualinvoke $r4.<org.apache.commons.httpclient.auth.AuthState: void invalidate()>();

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState proxyAuthState>;

        virtualinvoke $r4.<org.apache.commons.httpclient.auth.AuthState: void invalidate()>();

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.cookie.CookieSpec cookiespec> = null;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean requestSent> = 0;

        return;
    }
    public void releaseConnection()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;
        java.io.IOException $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

     label2:
        if $r1 == null goto label5;

     label3:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream>;

     label4:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label5:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>();

        return;

     label6:
        $r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>();

        throw $r2;

     label7:
        $r3 := @caughtexception;

        goto label5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.lang.Throwable from label3 to label5 with label6;
    }
    public void removeRequestHeader(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.Header $r2;
        org.apache.commons.httpclient.HeaderGroup $r3;
        org.apache.commons.httpclient.Header[] $r4;
        int i0, $i1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>($r1);

        i0 = 0;

     label1:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r2 = $r4[i0];

        virtualinvoke $r3.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>($r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void removeRequestHeader(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1;
        org.apache.commons.httpclient.HeaderGroup $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.Header;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>($r1);

        return;
    }
    protected void responseBodyConsumed()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.IOException r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpMethodParams $r3;
        org.apache.commons.logging.Log $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = null;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        if $r2 == null goto label01;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>(null);

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)>($r2);

        if $z0 == 0 goto label02;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label01:
        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = 0;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void ensureConnectionRelease()>();

        return;

     label02:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

     label03:
        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable()>();

     label04:
        if $z0 == 0 goto label01;

     label05:
        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.warn-extra-input");

     label06:
        if $z0 == 0 goto label08;

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

     label07:
        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Extra response data detected - closing connection");

     label08:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

     label09:
        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label10:
        goto label01;

     label11:
        r1 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r5 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r5);

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpConnection responseConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void close()>();

        goto label01;

        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
    }
    protected void setConnectionCloseForced(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0, $z1;
        org.apache.commons.logging.Log $r1;
        java.lang.StringBuffer $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r1 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Force-close connection: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);

     label1:
        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean connectionCloseForced> = $z0;

        return;
    }
    public void setDoAuthentication(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean doAuthentication> = $z0;

        return;
    }
    public void setFollowRedirects(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.HttpMethodBase: boolean followRedirects> = $z0;

        return;
    }
    public void setHostConfiguration(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.HttpHost $r2;
        java.lang.String $r3;
        int $i0;
        org.apache.commons.httpclient.protocol.Protocol $r4;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        if $r1 == null goto label1;

        $r2 = new org.apache.commons.httpclient.HttpHost;

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        specialinvoke $r2.<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r3, $i0, $r4);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = $r2;

        return;

     label1:
        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = null;

        return;
    }
    public void setHttp11(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        org.apache.commons.httpclient.HttpVersion $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r2 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>($r2);

        return;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r2 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void setVersion(org.apache.commons.httpclient.HttpVersion)>($r2);

        return;
    }
    public void setMethodRetryHandler(org.apache.commons.httpclient.MethodRetryHandler)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.MethodRetryHandler $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.MethodRetryHandler;

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.MethodRetryHandler methodRetryHandler> = $r1;

        return;
    }
    public void setParams(org.apache.commons.httpclient.params.HttpMethodParams)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpMethodParams;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params> = $r1;

        return;
    }
    public void setPath(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String path> = $r1;

        return;
    }
    public void setQueryString(java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = $r1;

        return;
    }
    public void setQueryString(org.apache.commons.httpclient.NameValuePair[])
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.NameValuePair[] $r1;
        java.lang.String $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.setQueryString(NameValuePair[])");

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>($r1, "UTF-8");

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String queryString> = $r2;

        return;
    }
    public void setRequestHeader(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.lang.String $r1, $r2;
        org.apache.commons.httpclient.Header r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new org.apache.commons.httpclient.Header;

        specialinvoke r3.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setRequestHeader(org.apache.commons.httpclient.Header)>(r3);

        return;
    }
    public void setRequestHeader(org.apache.commons.httpclient.Header)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.Header $r1, $r5;
        org.apache.commons.httpclient.HeaderGroup $r2;
        java.lang.String $r3;
        org.apache.commons.httpclient.Header[] $r4;
        int i0, $i1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.Header;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.Header: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header[] getHeaders(java.lang.String)>($r3);

        i0 = 0;

     label1:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        $r5 = $r4[i0];

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void removeHeader(org.apache.commons.httpclient.Header)>($r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup getRequestHeaderGroup()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HeaderGroup: void addHeader(org.apache.commons.httpclient.Header)>($r1);

        return;
    }
    protected void setResponseStream(java.io.InputStream)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: java.io.InputStream;

        r0.<org.apache.commons.httpclient.HttpMethodBase: java.io.InputStream responseStream> = $r1;

        return;
    }
    public void setStrictMode(boolean)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void makeStrict()>();

        return;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void makeLenient()>();

        return;
    }
    public void setURI(org.apache.commons.httpclient.URI) throws org.apache.commons.httpclient.URIException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.URI $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpHost $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.URI;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>();

        if $z0 == 0 goto label1;

        $r2 = new org.apache.commons.httpclient.HttpHost;

        specialinvoke $r2.<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.URI)>($r1);

        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpHost httphost> = $r2;

     label1:
        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.URI: java.lang.String getPath()>();

        if $r3 != null goto label3;

        $r3 = "/";

     label2:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setPath(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.URI: java.lang.String getEscapedQuery()>();

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void setQueryString(java.lang.String)>($r3);

        return;

     label3:
        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.URI: java.lang.String getEscapedPath()>();

        goto label2;
    }
    protected boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        boolean $z0;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.httpclient.Header r3;
        org.apache.commons.httpclient.HeaderGroup $r4;
        java.lang.String $r5;
        java.lang.StringBuffer $r6;
        org.apache.commons.httpclient.HttpVersion $r7, $r8;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean isConnectionCloseForced()>();

        if $z0 == 0 goto label01;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Should force-close connection.");

        return 1;

     label01:
        r3 = null;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        if $z0 != 0 goto label02;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        r3 = virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("proxy-connection");

     label02:
        if r3 != null goto label03;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup responseHeaders>;

        r3 = virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("connection");

     label03:
        if r3 != null goto label04;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HeaderGroup requestHeaders>;

        r3 = virtualinvoke $r4.<org.apache.commons.httpclient.HeaderGroup: org.apache.commons.httpclient.Header getFirstHeader(java.lang.String)>("connection");

     label04:
        if r3 == null goto label08;

        $r5 = virtualinvoke r3.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("close");

        if $z0 == 0 goto label05;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label11;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should close connection in response to directive: ");

        $r5 = virtualinvoke r3.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

        return 1;

     label05:
        $r5 = virtualinvoke r3.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("keep-alive");

        if $z0 == 0 goto label07;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label06;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should NOT close connection in response to directive: ");

        $r5 = virtualinvoke r3.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label06:
        return 0;

     label07:
        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label08;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown directive: ");

        $r5 = virtualinvoke r3.<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label08:
        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Resorting to protocol version default close connection policy");

        $r7 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r8 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z0 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r8);

        if $z0 == 0 goto label10;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label09;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should NOT close connection, using ");

        $r7 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r5 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label09:
        $r7 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r8 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0>;

        $z0 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpVersion: boolean lessEquals(org.apache.commons.httpclient.HttpVersion)>($r8);

        return $z0;

     label10:
        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label09;

        $r2 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Should close connection, using ");

        $r7 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion effectiveVersion>;

        $r5 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpVersion: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

        goto label09;

     label11:
        return 1;
    }
    public boolean validate()
    {
        org.apache.commons.httpclient.HttpMethodBase r0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        return 1;
    }
    protected void writeRequest(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.io.InterruptedIOException r3;
        org.apache.commons.logging.Log $r4;
        org.apache.commons.httpclient.Wire $r5;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpMethodParams $r6;
        org.apache.commons.httpclient.HttpVersion $r7, $r10;
        org.apache.commons.httpclient.Header $r8;
        java.lang.String r9;
        int $i0, $i1;
        org.apache.commons.httpclient.params.HttpConnectionParams $r11;
        org.apache.commons.httpclient.StatusLine $r12;
        java.lang.Throwable $r13;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.writeRequest(HttpState, HttpConnection)");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void writeRequestLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void writeRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void writeLine()>();

        $r5 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label01;

        $r5 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r5.<org.apache.commons.httpclient.Wire: void output(java.lang.String)>("\r\n");

     label01:
        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>();

        $r8 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Expect");

        r9 = null;

        if $r8 == null goto label02;

        r9 = virtualinvoke $r8.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label02:
        if r9 == null goto label10;

        $i0 = virtualinvoke r9.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("100-continue");

        if $i0 != 0 goto label10;

        $r10 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z0 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r10);

        if $z0 == 0 goto label19;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>();

        $r11 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $i0 = virtualinvoke $r11.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

     label03:
        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>(3000);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void readStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void processStatusLine(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void readResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void processResponseHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

     label04:
        $r12 = r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine>;

     label05:
        $i1 = virtualinvoke $r12.<org.apache.commons.httpclient.StatusLine: int getStatusCode()>();

     label06:
        if $i1 != 100 goto label11;

     label07:
        r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine statusLine> = null;

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

     label08:
        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("OK to continue received");

     label09:
        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i0);

     label10:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: boolean writeRequestBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>();

        return;

     label11:
        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i0);

        return;

     label12:
        r3 := @caughtexception;

     label13:
        $z0 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>(r3);

     label14:
        if $z0 != 0 goto label17;

     label15:
        throw r3;

     label16:
        $r13 := @caughtexception;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i0);

        throw $r13;

     label17:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>("Expect");

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void info(java.lang.Object)>("100 (continue) read timeout. Resume sending the request");

     label18:
        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i0);

        goto label10;

     label19:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void removeRequestHeader(java.lang.String)>("Expect");

        $r4 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void info(java.lang.Object)>("\'Expect: 100-continue\' handshake is only supported by HTTP/1.1 or higher");

        goto label10;

        catch java.io.InterruptedIOException from label03 to label04 with label12;
        catch java.io.InterruptedIOException from label05 to label06 with label12;
        catch java.io.InterruptedIOException from label08 to label09 with label12;
        catch java.lang.Throwable from label03 to label06 with label16;
        catch java.lang.Throwable from label07 to label09 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }
    protected boolean writeRequestBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        return 1;
    }
    protected void writeRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        java.lang.String $r5, $r8;
        org.apache.commons.httpclient.Header[] $r6;
        int i0, $i1;
        org.apache.commons.httpclient.Header $r7;
        org.apache.commons.httpclient.Wire $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.writeRequestHeaders(HttpState,HttpConnection)");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r6;

        if i0 >= $i1 goto label3;

        $r7 = $r6[i0];

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.Header: java.lang.String toExternalForm()>();

        $r9 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r9.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label2;

        $r9 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r9.<org.apache.commons.httpclient.Wire: void output(java.lang.String)>($r8);

     label2:
        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>($r8, $r5);

        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    protected void writeRequestLine(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodBase r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.String $r4, $r7;
        org.apache.commons.httpclient.Wire $r5;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpMethodParams $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodBase;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.writeRequestLine(HttpState, HttpConnection)");

        $r4 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getRequestLine(org.apache.commons.httpclient.HttpConnection)>($r2);

        $r5 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label1;

        $r5 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r5.<org.apache.commons.httpclient.Wire: void output(java.lang.String)>($r4);

     label1:
        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>($r4, $r7);

        return;
    }
