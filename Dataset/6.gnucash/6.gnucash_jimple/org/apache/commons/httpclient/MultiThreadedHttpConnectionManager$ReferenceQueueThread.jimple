org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread extends java.lang.Thread
private volatile boolean shutdown
    public void <init>()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: boolean shutdown> = 0;

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void setDaemon(boolean)>(1);

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void setName(java.lang.String)>("MultiThreadedHttpConnectionManager cleanup");

        return;
    }
    private void handleReference(java.lang.ref.Reference)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r0;
        java.lang.ref.Reference $r1;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource $r5;
        org.apache.commons.logging.Log $r6;
        boolean $z0;
        java.lang.StringBuffer $r7;
        org.apache.commons.httpclient.HostConfiguration $r8;
        java.lang.String $r9;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        $r1 := @parameter0: java.lang.ref.Reference;

        $r2 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map access$1400()>();

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.util.Map access$1400()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r5 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource) $r4;

        exitmonitor $r2;

     label2:
        if $r5 == null goto label7;

        $r6 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r6 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Connection reclaimed by garbage collector, hostConfig=");

        $r8 = $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label3:
        $r10 = $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool connectionPool>;

        $r8 = $r5.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionSource: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        virtualinvoke $r10.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool: void handleLostConnection(org.apache.commons.httpclient.HostConfiguration)>($r8);

        return;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor $r2;

     label6:
        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public void run()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r0;
        java.lang.InterruptedException r1;
        boolean $z0;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.ref.Reference $r3;
        org.apache.commons.logging.Log $r4;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: boolean shutdown>;

        if $z0 != 0 goto label7;

     label2:
        $r2 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: java.lang.ref.ReferenceQueue access$1500()>();

        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>();

     label3:
        if $r3 == null goto label1;

     label4:
        specialinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void handleReference(java.lang.ref.Reference)>($r3);

     label5:
        goto label1;

     label6:
        r1 := @caughtexception;

        $r4 = staticinvoke <org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.logging.Log access$700()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("ReferenceQueueThread interrupted", r1);

        goto label1;

     label7:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label6;
        catch java.lang.InterruptedException from label4 to label5 with label6;
    }
    public void shutdown()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread r0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: boolean shutdown> = 1;

        virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread: void interrupt()>();

        return;
    }
