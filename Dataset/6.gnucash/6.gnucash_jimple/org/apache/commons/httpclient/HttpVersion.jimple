org.apache.commons.httpclient.HttpVersion extends java.lang.Object implements java.lang.Comparable
public static final org.apache.commons.httpclient.HttpVersion HTTP_0_9
public static final org.apache.commons.httpclient.HttpVersion HTTP_1_0
public static final org.apache.commons.httpclient.HttpVersion HTTP_1_1
private int major
private int minor
    static void <clinit>()
    {
        org.apache.commons.httpclient.HttpVersion $r0;

        $r0 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r0.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>(0, 9);

        <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_0_9> = $r0;

        $r0 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r0.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>(1, 0);

        <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0> = $r0;

        $r0 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r0.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>(1, 1);

        <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1> = $r0;

        return;
    }
    public void <init>(int, int)
    {
        org.apache.commons.httpclient.HttpVersion r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpVersion: int major> = 0;

        r0.<org.apache.commons.httpclient.HttpVersion: int minor> = 0;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP major version number may not be negative");

        throw $r1;

     label1:
        r0.<org.apache.commons.httpclient.HttpVersion: int major> = $i0;

        if $i1 >= 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP minor version number may not be negative");

        throw $r1;

     label2:
        r0.<org.apache.commons.httpclient.HttpVersion: int minor> = $i1;

        return;
    }
    public static org.apache.commons.httpclient.HttpVersion parse(java.lang.String) throws org.apache.commons.httpclient.ProtocolException
    {
        java.lang.String $r0, $r4;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        org.apache.commons.httpclient.ProtocolException $r2;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2;
        org.apache.commons.httpclient.HttpVersion $r5;
        java.lang.NumberFormatException r6, r7;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String may not be null");

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("HTTP/");

        if $z0 != 0 goto label2;

        $r2 = new org.apache.commons.httpclient.ProtocolException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP version string: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label2:
        $r4 = "HTTP/";

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String,int)>(".", $i0);

        if $i1 != -1 goto label3;

        $r2 = new org.apache.commons.httpclient.ProtocolException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP version number: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label4:
        $i1 = $i1 + 1;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label5:
        $r4 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label6:
        $r5 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r5.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>($i0, $i1);

        return $r5;

     label7:
        r6 := @caughtexception;

        $r2 = new org.apache.commons.httpclient.ProtocolException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP major version number: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label8:
        r7 := @caughtexception;

        $r2 = new org.apache.commons.httpclient.ProtocolException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP minor version number: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r0);

        throw $r2;

        catch java.lang.NumberFormatException from label3 to label4 with label7;
        catch java.lang.NumberFormatException from label5 to label6 with label8;
    }
    public int compareTo(java.lang.Object)
    {
        org.apache.commons.httpclient.HttpVersion r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.httpclient.HttpVersion) $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>($r2);

        return $i0;
    }
    public int compareTo(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Version parameter may not be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int getMajor()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpVersion: int getMajor()>();

        $i0 = $i0 - $i1;

        if $i0 != 0 goto label2;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int getMinor()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpVersion: int getMinor()>();

        $i0 = $i0 - $i1;

     label2:
        return $i0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.httpclient.HttpVersion r0, r2;
        boolean $z0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.httpclient.HttpVersion;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.httpclient.HttpVersion) r1;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: boolean equals(org.apache.commons.httpclient.HttpVersion)>(r2);

        return $z0;
    }
    public boolean equals(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>($r1);

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int getMajor()
    {
        org.apache.commons.httpclient.HttpVersion r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        i0 = r0.<org.apache.commons.httpclient.HttpVersion: int major>;

        return i0;
    }
    public int getMinor()
    {
        org.apache.commons.httpclient.HttpVersion r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        i0 = r0.<org.apache.commons.httpclient.HttpVersion: int minor>;

        return i0;
    }
    public boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>($r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int hashCode()
    {
        org.apache.commons.httpclient.HttpVersion r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $i0 = r0.<org.apache.commons.httpclient.HttpVersion: int major>;

        $i0 = $i0 * 100000;

        $i1 = r0.<org.apache.commons.httpclient.HttpVersion: int minor>;

        $i0 = $i0 + $i1;

        return $i0;
    }
    public boolean lessEquals(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>($r1);

        if $i0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.httpclient.HttpVersion r0;
        java.lang.StringBuffer r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HTTP/");

        $i0 = r0.<org.apache.commons.httpclient.HttpVersion: int major>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $i0 = r0.<org.apache.commons.httpclient.HttpVersion: int minor>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
