org.apache.commons.httpclient.DefaultHttpMethodRetryHandler extends java.lang.Object implements org.apache.commons.httpclient.HttpMethodRetryHandler
private static java.lang.Class SSL_HANDSHAKE_EXCEPTION
private boolean requestSentRetryEnabled
private int retryCount
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassNotFoundException $r1;

        <org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: java.lang.Class SSL_HANDSHAKE_EXCEPTION> = null;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("javax.net.ssl.SSLHandshakeException");

     label2:
        <org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: java.lang.Class SSL_HANDSHAKE_EXCEPTION> = $r0;

        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.DefaultHttpMethodRetryHandler r0;

        r0 := @this: org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;

        specialinvoke r0.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>(int,boolean)>(3, 0);

        return;
    }
    public void <init>(int, boolean)
    {
        org.apache.commons.httpclient.DefaultHttpMethodRetryHandler r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: int retryCount> = $i0;

        r0.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean requestSentRetryEnabled> = $z0;

        return;
    }
    public int getRetryCount()
    {
        org.apache.commons.httpclient.DefaultHttpMethodRetryHandler r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;

        i0 = r0.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: int retryCount>;

        return i0;
    }
    public boolean isRequestSentRetryEnabled()
    {
        org.apache.commons.httpclient.DefaultHttpMethodRetryHandler r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;

        z0 = r0.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean requestSentRetryEnabled>;

        return z0;
    }
    public boolean retryMethod(org.apache.commons.httpclient.HttpMethod, java.io.IOException, int)
    {
        org.apache.commons.httpclient.DefaultHttpMethodRetryHandler r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        java.io.IOException $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase $r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r2 := @parameter1: java.io.IOException;

        $i0 := @parameter2: int;

        if $r1 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP method may not be null");

        throw $r3;

     label01:
        if $r2 != null goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exception parameter may not be null");

        throw $r3;

     label02:
        $z0 = $r1 instanceof org.apache.commons.httpclient.HttpMethodBase;

        if $z0 == 0 goto label03;

        $r4 = (org.apache.commons.httpclient.HttpMethodBase) $r1;

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpMethodBase: boolean isAborted()>();

        if $z0 == 0 goto label03;

        return 0;

     label03:
        $i1 = r0.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: int retryCount>;

        if $i0 <= $i1 goto label04;

        return 0;

     label04:
        $z0 = $r2 instanceof org.apache.commons.httpclient.NoHttpResponseException;

        if $z0 == 0 goto label05;

        return 1;

     label05:
        $z0 = $r2 instanceof java.io.InterruptedIOException;

        if $z0 == 0 goto label06;

        return 0;

     label06:
        $z0 = $r2 instanceof java.net.UnknownHostException;

        if $z0 == 0 goto label07;

        return 0;

     label07:
        $z0 = $r2 instanceof java.net.NoRouteToHostException;

        if $z0 == 0 goto label08;

        return 0;

     label08:
        $r5 = <org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: java.lang.Class SSL_HANDSHAKE_EXCEPTION>;

        if $r5 == null goto label09;

        $r5 = <org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: java.lang.Class SSL_HANDSHAKE_EXCEPTION>;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        if $z0 == 0 goto label09;

        return 0;

     label09:
        $z0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: boolean isRequestSent()>();

        if $z0 == 0 goto label10;

        $z0 = r0.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: boolean requestSentRetryEnabled>;

        if $z0 == 0 goto label11;

     label10:
        return 1;

     label11:
        return 0;
    }
