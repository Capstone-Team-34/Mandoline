org.apache.commons.httpclient.auth.BasicScheme extends org.apache.commons.httpclient.auth.RFC2617Scheme
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme
private boolean complete
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.BasicScheme");

        $r1 = $r0;

        <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.auth.BasicScheme: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        specialinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete> = 0;

        return;
    }
    public void <init>(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: void <init>(java.lang.String)>($r1);

        r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete> = 1;

        return;
    }
    public static java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials)
    {
        org.apache.commons.httpclient.UsernamePasswordCredentials $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.apache.commons.httpclient.UsernamePasswordCredentials;

        $r1 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials,java.lang.String)>($r0, "ISO-8859-1");

        return $r1;
    }
    public static java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials, java.lang.String)
    {
        org.apache.commons.httpclient.UsernamePasswordCredentials $r0;
        java.lang.String $r1, $r5;
        java.lang.StringBuffer r2, $r6;
        org.apache.commons.logging.Log $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        byte[] $r7;

        $r0 := @parameter0: org.apache.commons.httpclient.UsernamePasswordCredentials;

        $r1 := @parameter1: java.lang.String;

        $r3 = <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter BasicScheme.authenticate(UsernamePasswordCredentials, String)");

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r4;

     label1:
        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset may not be null or empty");

        throw $r4;

     label3:
        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r0.<org.apache.commons.httpclient.UsernamePasswordCredentials: java.lang.String getUserName()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r5 = virtualinvoke $r0.<org.apache.commons.httpclient.UsernamePasswordCredentials: java.lang.String getPassword()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Basic ");

        $r5 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r5, $r1);

        $r7 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r7);

        $r1 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>($r7);

        r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public java.lang.String authenticate(org.apache.commons.httpclient.Credentials, java.lang.String, java.lang.String) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;
        org.apache.commons.httpclient.Credentials $r1;
        java.lang.String $r2, $r3;
        java.lang.ClassCastException r4;
        org.apache.commons.logging.Log $r5;
        org.apache.commons.httpclient.UsernamePasswordCredentials $r6;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r7;
        java.lang.StringBuffer $r8;
        java.lang.Class $r9;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        $r1 := @parameter0: org.apache.commons.httpclient.Credentials;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r5 = <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter BasicScheme.authenticate(Credentials, String, String)");

     label1:
        $r6 = (org.apache.commons.httpclient.UsernamePasswordCredentials) $r1;

     label2:
        $r2 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials)>($r6);

        return $r2;

     label3:
        r4 := @caughtexception;

        $r7 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for basic authentication: ");

        $r9 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r2);

        throw $r7;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public java.lang.String authenticate(org.apache.commons.httpclient.Credentials, org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;
        org.apache.commons.httpclient.Credentials $r1;
        org.apache.commons.httpclient.HttpMethod $r2;
        java.lang.ClassCastException r3;
        org.apache.commons.logging.Log $r4;
        java.lang.IllegalArgumentException $r5;
        org.apache.commons.httpclient.UsernamePasswordCredentials $r6;
        org.apache.commons.httpclient.params.HttpMethodParams $r7;
        java.lang.String $r8;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r9;
        java.lang.StringBuffer $r10;
        java.lang.Class $r11;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        $r1 := @parameter0: org.apache.commons.httpclient.Credentials;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r4 = <org.apache.commons.httpclient.auth.BasicScheme: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter BasicScheme.authenticate(Credentials, HttpMethod)");

        if $r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method may not be null");

        throw $r5;

     label1:
        $r6 = (org.apache.commons.httpclient.UsernamePasswordCredentials) $r1;

     label2:
        $r7 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCredentialCharset()>();

        $r8 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials,java.lang.String)>($r6, $r8);

        return $r8;

     label3:
        r3 := @caughtexception;

        $r9 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for basic authentication: ");

        $r11 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r8);

        throw $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public java.lang.String getSchemeName()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        return "basic";
    }
    public boolean isComplete()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        z0 = r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete>;

        return z0;
    }
    public boolean isConnectionBased()
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        return 0;
    }
    public void processChallenge(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        org.apache.commons.httpclient.auth.BasicScheme r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.auth.BasicScheme;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: void processChallenge(java.lang.String)>($r1);

        r0.<org.apache.commons.httpclient.auth.BasicScheme: boolean complete> = 1;

        return;
    }
