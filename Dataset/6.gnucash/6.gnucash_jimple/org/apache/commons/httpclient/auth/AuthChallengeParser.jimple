org.apache.commons.httpclient.auth.AuthChallengeParser extends java.lang.Object
    public void <init>()
    {
        org.apache.commons.httpclient.auth.AuthChallengeParser r0;

        r0 := @this: org.apache.commons.httpclient.auth.AuthChallengeParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.util.Map extractParams(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.lang.String $r0, $r9;
        java.util.HashMap r1;
        org.apache.commons.httpclient.util.ParameterParser r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        org.apache.commons.httpclient.auth.MalformedChallengeException $r4;
        java.lang.StringBuffer $r5;
        java.util.List $r6;
        java.lang.Object $r7;
        org.apache.commons.httpclient.NameValuePair r8;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge may not be null");

        throw $r3;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(32);

        if $i0 != -1 goto label2;

        $r4 = new org.apache.commons.httpclient.auth.MalformedChallengeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid challenge: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label2:
        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        r2 = new org.apache.commons.httpclient.util.ParameterParser;

        specialinvoke r2.<org.apache.commons.httpclient.util.ParameterParser: void <init>()>();

        $i0 = $i0 + 1;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r6 = virtualinvoke r2.<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(java.lang.String,char)>($r0, 44);

        $i0 = 0;

     label3:
        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i0);

        r8 = (org.apache.commons.httpclient.NameValuePair) $r7;

        $r0 = virtualinvoke r8.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = virtualinvoke r8.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r9);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return r1;
    }
    public static java.lang.String extractScheme(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.lang.String $r0, r2;
        java.lang.IllegalArgumentException $r1;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.auth.MalformedChallengeException $r3;
        java.lang.StringBuffer $r4;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge may not be null");

        throw $r1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(32);

        if $i0 != -1 goto label3;

        r2 = $r0;

     label2:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label4;

        $r3 = new org.apache.commons.httpclient.auth.MalformedChallengeException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid challenge: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>($r0);

        throw $r3;

     label3:
        r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label2;

     label4:
        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();

        return $r0;
    }
    public static java.util.Map parseChallenges(org.apache.commons.httpclient.Header[]) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        org.apache.commons.httpclient.Header[] $r0;
        java.util.HashMap r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        org.apache.commons.httpclient.Header $r3;
        java.lang.String $r4, $r5;

        $r0 := @parameter0: org.apache.commons.httpclient.Header[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of challenges may not be null");

        throw $r2;

     label1:
        r1 = new java.util.HashMap;

        $i0 = lengthof $r0;

        specialinvoke r1.<java.util.HashMap: void <init>(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r3 = $r0[$i0];

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r5 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>($r4);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
