org.apache.commons.httpclient.auth.NTLM extends java.lang.Object
public static final java.lang.String DEFAULT_CHARSET
private java.lang.String credentialCharset
private int currentPosition
private byte[] currentResponse
    void <init>()
    {
        org.apache.commons.httpclient.auth.NTLM r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = 0;

        r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset> = "ASCII";

        return;
    }
    private void addByte(byte)
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        byte $b0;
        int $i1;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $i1 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $r1[$i1] = $b0;

        $i1 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = $i1;

        return;
    }
    private void addBytes(byte[])
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        byte[] $r1, $r2;
        int $i0, i2;
        byte $b1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: byte[];

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $i0 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $b1 = $r1[i2];

        $r2[$i0] = $b1;

        $i0 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = $i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    private void calcResp(byte[], byte[], byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        byte[] $r1, $r2, $r3, r4, r5, r6;
        int i0, $i2;
        byte $b1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        r4 = newarray (byte)[7];

        r5 = newarray (byte)[7];

        r6 = newarray (byte)[7];

        i0 = 0;

     label01:
        if i0 >= 7 goto label02;

        $b1 = $r1[i0];

        r4[i0] = $b1;

        i0 = i0 + 1;

        goto label01;

     label02:
        i0 = 0;

     label03:
        if i0 >= 7 goto label04;

        $i2 = i0 + 7;

        $b1 = $r1[$i2];

        r5[i0] = $b1;

        i0 = i0 + 1;

        goto label03;

     label04:
        i0 = 0;

     label05:
        if i0 >= 7 goto label06;

        $i2 = i0 + 14;

        $b1 = $r1[$i2];

        r6[i0] = $b1;

        i0 = i0 + 1;

        goto label05;

     label06:
        $r1 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r4, $r2);

        r5 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r5, $r2);

        $r2 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r6, $r2);

        i0 = 0;

     label07:
        if i0 >= 8 goto label08;

        $b1 = $r1[i0];

        $r3[i0] = $b1;

        i0 = i0 + 1;

        goto label07;

     label08:
        i0 = 0;

     label09:
        if i0 >= 8 goto label10;

        $i2 = i0 + 8;

        $b1 = r5[i0];

        $r3[$i2] = $b1;

        i0 = i0 + 1;

        goto label09;

     label10:
        i0 = 0;

     label11:
        if i0 >= 8 goto label12;

        $i2 = i0 + 16;

        $b1 = $r2[i0];

        $r3[$i2] = $b1;

        i0 = i0 + 1;

        goto label11;

     label12:
        return;
    }
    private byte[] convertShort(int)
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        int $i0;
        byte[] r1;
        java.lang.String $r2, r3;
        java.lang.StringBuffer $r4;
        byte $b1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $i0 := @parameter0: int;

        r1 = newarray (byte)[2];

        r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i0, 16);

     label1:
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 >= 4 goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label1;

     label2:
        $r2 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(2, 4);

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $b1 = (byte) $i0;

        r1[0] = $b1;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r3, 16);

        $b1 = (byte) $i0;

        r1[1] = $b1;

        return r1;
    }
    private byte[] encrypt(byte[], byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        byte[] $r1, $r2;
        javax.crypto.Cipher $r3;
        javax.crypto.IllegalBlockSizeException r4;
        org.apache.commons.httpclient.auth.AuthenticationException $r5;
        javax.crypto.BadPaddingException r6;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: javax.crypto.Cipher getCipher(byte[])>($r1);

     label1:
        $r1 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

     label2:
        return $r1;

     label3:
        r4 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid block size for DES encryption.", r4);

        throw $r5;

     label4:
        r6 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("Data not padded correctly for DES encryption.", r6);

        throw $r5;

        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
    }
    private javax.crypto.Cipher getCipher(byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        byte[] $r1;
        javax.crypto.Cipher $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        java.security.NoSuchAlgorithmException r4;
        org.apache.commons.httpclient.auth.AuthenticationException $r5;
        java.security.InvalidKeyException r6;
        javax.crypto.NoSuchPaddingException r7;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: byte[];

     label1:
        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/NoPadding");

        $r1 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] setupKey(byte[])>($r1);

     label2:
        $r3 = new javax.crypto.spec.SecretKeySpec;

     label3:
        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "DES");

        virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r3);

     label4:
        return $r2;

     label5:
        r4 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("DES encryption is not available.", r4);

        throw $r5;

     label6:
        r6 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid key for DES encryption.", r6);

        throw $r5;

     label7:
        r7 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("NoPadding option for DES is not available.", r7);

        throw $r5;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch java.security.InvalidKeyException from label1 to label2 with label6;
        catch java.security.InvalidKeyException from label3 to label4 with label6;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label7;
        catch javax.crypto.NoSuchPaddingException from label3 to label4 with label7;
    }
    private java.lang.String getResponse()
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        byte[] r1, $r2;
        int $i0, $i1;
        byte $b2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        r1 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $i1 = lengthof r1;

        $i0 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        if $i1 <= $i0 goto label3;

        $i0 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        r1 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $b2 = $r2[$i0];

        r1[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(r1);

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>(r1);

        return $r3;

     label3:
        r1 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        goto label2;
    }
    private byte[] hashPassword(java.lang.String, byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        java.lang.String $r1, $r6;
        byte[] $r2, r3, r4, r5;
        int i0, i1, $i3;
        byte $b2;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset>;

        r5 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, $r6);

        r4 = newarray (byte)[7];

        r3 = newarray (byte)[7];

        i0 = lengthof r5;

        if i0 <= 7 goto label01;

        i0 = 7;

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label03;

        $b2 = r5[i1];

        r4[i1] = $b2;

        i1 = i1 + 1;

        goto label02;

     label03:
        if i1 >= 7 goto label04;

        r4[i1] = 0;

        i1 = i1 + 1;

        goto label03;

     label04:
        i1 = lengthof r5;

        if i1 <= 14 goto label05;

        i1 = 14;

     label05:
        i0 = 7;

     label06:
        if i0 >= i1 goto label07;

        $i3 = i0 + -7;

        $b2 = r5[i0];

        r3[$i3] = $b2;

        i0 = i0 + 1;

        goto label06;

     label07:
        if i0 >= 14 goto label08;

        i1 = i0 + -7;

        r3[i1] = 0;

        i0 = i0 + 1;

        goto label07;

     label08:
        r5 = newarray (byte)[8];

        r5[0] = 75;

        r5[1] = 71;

        r5[2] = 83;

        r5[3] = 33;

        r5[4] = 64;

        r5[5] = 35;

        r5[6] = 36;

        r5[7] = 37;

        r4 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r4, r5);

        r5 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r3, r5);

        r3 = newarray (byte)[21];

        i0 = 0;

     label09:
        i1 = lengthof r4;

        if i0 >= i1 goto label10;

        $b2 = r4[i0];

        r3[i0] = $b2;

        i0 = i0 + 1;

        goto label09;

     label10:
        i0 = 0;

     label11:
        i1 = lengthof r5;

        if i0 >= i1 goto label12;

        i1 = i0 + 8;

        $b2 = r5[i0];

        r3[i1] = $b2;

        i0 = i0 + 1;

        goto label11;

     label12:
        i0 = 0;

     label13:
        if i0 >= 5 goto label14;

        i1 = i0 + 16;

        r3[i1] = 0;

        i0 = i0 + 1;

        goto label13;

     label14:
        r4 = newarray (byte)[24];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void calcResp(byte[],byte[],byte[])>(r3, $r2, r4);

        return r4;
    }
    private void prepareResponse(int)
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        int $i0;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $i0 := @parameter0: int;

        $r1 = newarray (byte)[$i0];

        r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse> = $r1;

        r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = 0;

        return;
    }
    private byte[] setupKey(byte[])
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        byte[] $r1, r2;
        byte $b0;
        int $i1, $i2;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: byte[];

        r2 = newarray (byte)[8];

        $b0 = $r1[0];

        $i1 = $b0 >> 1;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        r2[0] = $b0;

        $b0 = $r1[0];

        $i1 = $b0 & 1;

        $i1 = $i1 << 6;

        $b0 = $r1[1];

        $i2 = $b0 & 255;

        $i2 = $i2 >> 2;

        $i2 = $i2 & 255;

        $i1 = $i1 | $i2;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        r2[1] = $b0;

        $b0 = $r1[1];

        $i1 = $b0 & 3;

        $i1 = $i1 << 5;

        $b0 = $r1[2];

        $i2 = $b0 & 255;

        $i2 = $i2 >> 3;

        $i2 = $i2 & 255;

        $i1 = $i1 | $i2;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        r2[2] = $b0;

        $b0 = $r1[2];

        $i1 = $b0 & 7;

        $i1 = $i1 << 4;

        $b0 = $r1[3];

        $i2 = $b0 & 255;

        $i2 = $i2 >> 4;

        $i2 = $i2 & 255;

        $i1 = $i1 | $i2;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        r2[3] = $b0;

        $b0 = $r1[3];

        $i1 = $b0 & 15;

        $i1 = $i1 << 3;

        $b0 = $r1[4];

        $i2 = $b0 & 255;

        $i2 = $i2 >> 5;

        $i2 = $i2 & 255;

        $i1 = $i1 | $i2;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        r2[4] = $b0;

        $b0 = $r1[4];

        $i1 = $b0 & 31;

        $i1 = $i1 << 2;

        $b0 = $r1[5];

        $i2 = $b0 & 255;

        $i2 = $i2 >> 6;

        $i2 = $i2 & 255;

        $i1 = $i1 | $i2;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        r2[5] = $b0;

        $b0 = $r1[5];

        $i1 = $b0 & 63;

        $i1 = $i1 << 1;

        $b0 = $r1[6];

        $i2 = $b0 & 255;

        $i2 = $i2 >> 7;

        $i2 = $i2 & 255;

        $i1 = $i1 | $i2;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        r2[6] = $b0;

        $b0 = $r1[6];

        $i1 = $b0 & 127;

        $b0 = (byte) $i1;

        r2[7] = $b0;

        $i1 = 0;

     label1:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label2;

        $b0 = r2[$i1];

        $i2 = $b0 << 1;

        $b0 = (byte) $i2;

        r2[$i1] = $b0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r2;
    }
    public java.lang.String getCredentialCharset()
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        r1 = r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset>;

        return r1;
    }
    public final java.lang.String getResponseFor(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;
        byte[] $r7;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        if $r1 == null goto label1;

        $r6 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getType1Message(java.lang.String,java.lang.String)>($r4, $r5);

        return $r1;

     label2:
        $r7 = virtualinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] parseType2Message(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])>($r2, $r3, $r4, $r5, $r7);

        return $r1;
    }
    public java.lang.String getType1Message(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        int i0, $i1;
        java.lang.String $r1, $r2;
        byte[] $r3, $r4, $r5;
        byte $b2;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, "ASCII");

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r2, "ASCII");

        i0 = lengthof $r3;

        i0 = i0 + 32;

        $i1 = lengthof $r4;

        i0 = i0 + $i1;

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void prepareResponse(int)>(i0);

        $r5 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>("NTLMSSP", "ASCII");

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r5);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(1);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(6);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(82);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        i0 = lengthof $r4;

        $r5 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i0);

        $b2 = $r5[0];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[1];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[0];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[1];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        i0 = lengthof $r3;

        i0 = i0 + 32;

        $r5 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i0);

        $b2 = $r5[0];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[1];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        i0 = lengthof $r3;

        $r5 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i0);

        $b2 = $r5[0];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[1];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[0];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[1];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $r5 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(32);

        $b2 = $r5[0];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        $b2 = $r5[1];

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b2);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r3);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r4);

        $r1 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getResponse()>();

        return $r1;
    }
    public java.lang.String getType3Message(java.lang.String, java.lang.String, java.lang.String, java.lang.String, byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        java.lang.String $r1, $r3, $r4, $r5;
        byte[] $r2, $r6, $r7, $r8, $r9;
        int i0, i1, i2, i3, $i4;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r4 := @parameter2: java.lang.String;

        $r5 := @parameter3: java.lang.String;

        $r2 := @parameter4: byte[];

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r5, "ASCII");

        $r7 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r4, "ASCII");

        $r4 = r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset>;

        $r8 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r3, $r4);

        i0 = lengthof $r6;

        i2 = lengthof $r7;

        i3 = lengthof $r8;

        i1 = i0 + 88;

        i1 = i1 + i3;

        i1 = i1 + i2;

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void prepareResponse(int)>(i1);

        $r9 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>("NTLMSSP", "ASCII");

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(3);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(24);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(24);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $i4 = i1 + -24;

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>($i4);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i1);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(64);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i3);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i3);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $i4 = i0 + 64;

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>($i4);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i2);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i2);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        i0 = i0 + 64;

        i3 = i0 + i3;

        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i3);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        i3 = 0;

     label1:
        if i3 >= 6 goto label2;

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r9 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i1);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(6);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(82);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r6);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r8);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r7);

        $r2 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>($r1, $r2);

        specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r2);

        $r3 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getResponse()>();

        return $r3;
    }
    public byte[] parseType2Message(java.lang.String)
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        java.lang.String $r1;
        byte[] r2, $r3;
        int i0, $i1;
        byte $b2;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, "ASCII");

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r2);

        r2 = newarray (byte)[8];

        i0 = 0;

     label1:
        if i0 >= 8 goto label2;

        $i1 = i0 + 24;

        $b2 = $r3[$i1];

        r2[i0] = $b2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r2;
    }
    public void setCredentialCharset(java.lang.String)
    {
        org.apache.commons.httpclient.auth.NTLM r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset> = $r1;

        return;
    }
