org.apache.commons.httpclient.auth.HttpAuthenticator extends java.lang.Object
private static final org.apache.commons.logging.Log LOG
public static final java.lang.String PROXY_AUTH
public static final java.lang.String PROXY_AUTH_RESP
public static final java.lang.String WWW_AUTH
public static final java.lang.String WWW_AUTH_RESP
static java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.HttpAuthenticator");

        $r1 = $r0;

        <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.auth.HttpAuthenticator r0;

        r0 := @this: org.apache.commons.httpclient.auth.HttpAuthenticator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean authenticate(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.AuthScheme $r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.HttpState $r3;
        boolean $z0;
        org.apache.commons.logging.Log $r4;

        $r0 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r2 := @parameter2: org.apache.commons.httpclient.HttpConnection;

        $r3 := @parameter3: org.apache.commons.httpclient.HttpState;

        $r4 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticate(AuthScheme, HttpMethod, HttpConnection, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>($r0, $r1, $r2, $r3, 0);

        return $z0;
    }
    public static boolean authenticateDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethod $r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.HttpState $r2;
        boolean $z0;
        org.apache.commons.logging.Log $r3;

        $r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r2 := @parameter2: org.apache.commons.httpclient.HttpState;

        $r3 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticateDefault(HttpMethod, HttpConnection, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticateDefault(org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>($r0, $r1, $r2, 0);

        return $z0;
    }
    public static boolean authenticateProxy(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.AuthScheme $r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.HttpState $r3;
        boolean $z0;
        org.apache.commons.logging.Log $r4;

        $r0 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r2 := @parameter2: org.apache.commons.httpclient.HttpConnection;

        $r3 := @parameter3: org.apache.commons.httpclient.HttpState;

        $r4 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticateProxy(AuthScheme, HttpMethod, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>($r0, $r1, $r2, $r3, 1);

        return $z0;
    }
    public static boolean authenticateProxyDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethod $r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.HttpState $r2;
        boolean $z0;
        org.apache.commons.logging.Log $r3;

        $r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r2 := @parameter2: org.apache.commons.httpclient.HttpState;

        $r3 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticateProxyDefault(HttpMethod, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticateDefault(org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>($r0, $r1, $r2, 1);

        return $z0;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    private static boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState, boolean) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.AuthScheme $r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.HttpState $r3;
        boolean $z0, $z1;
        org.apache.commons.httpclient.Header r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.String r6, $r7, $r10;
        org.apache.commons.logging.Log $r8;
        java.lang.StringBuffer r9;
        org.apache.commons.httpclient.Credentials $r11;
        org.apache.commons.httpclient.auth.CredentialsNotAvailableException $r12;
        org.apache.commons.httpclient.params.HttpMethodParams $r13;

        $r0 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r2 := @parameter2: org.apache.commons.httpclient.HttpConnection;

        $r3 := @parameter3: org.apache.commons.httpclient.HttpState;

        $z0 := @parameter4: boolean;

        if $r0 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scheme may not be null");

        throw $r5;

     label01:
        if $r1 != null goto label02;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP method may not be null");

        throw $r5;

     label02:
        if $r3 != null goto label03;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP state may not be null");

        throw $r5;

     label03:
        r6 = null;

        if $r2 == null goto label04;

        if $z0 == 0 goto label09;

        r6 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

     label04:
        $r7 = interfaceinvoke $r0.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r8 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label06;

        r9 = new java.lang.StringBuffer;

        specialinvoke r9.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Using credentials for ");

        if $r7 != null goto label10;

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default");

     label05:
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication realm at ");

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        $r10 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label06:
        if $z0 == 0 goto label11;

        $r11 = virtualinvoke $r3.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(java.lang.String,java.lang.String)>($r7, r6);

     label07:
        if $r11 != null goto label13;

        r9 = new java.lang.StringBuffer;

        specialinvoke r9.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No credentials available for the ");

        if $r7 != null goto label12;

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default");

     label08:
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication realm at ");

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r12 = new org.apache.commons.httpclient.auth.CredentialsNotAvailableException;

        r6 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.commons.httpclient.auth.CredentialsNotAvailableException: void <init>(java.lang.String)>(r6);

        throw $r12;

     label09:
        $r13 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r7 = virtualinvoke $r13.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r6 = $r7;

        if $r7 != null goto label04;

        r6 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        goto label04;

     label10:
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        goto label05;

     label11:
        $r11 = virtualinvoke $r3.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(java.lang.String,java.lang.String)>($r7, r6);

        goto label07;

     label12:
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        goto label08;

     label13:
        r6 = interfaceinvoke $r0.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String authenticate(org.apache.commons.httpclient.Credentials,org.apache.commons.httpclient.HttpMethod)>($r11, $r1);

        if r6 == null goto label16;

        if $z0 == 0 goto label15;

        $r7 = "Proxy-Authorization";

     label14:
        r4 = new org.apache.commons.httpclient.Header;

        specialinvoke r4.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>($r7, r6, 1);

        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>(r4);

        return 1;

     label15:
        $r7 = "Authorization";

        goto label14;

     label16:
        return 0;
    }
    private static boolean doAuthenticateDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState, boolean) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethod $r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.HttpState $r2;
        boolean $z0, $z1;
        org.apache.commons.httpclient.Header r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.String r5, r11;
        org.apache.commons.httpclient.Credentials $r6;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r7;
        java.lang.StringBuffer $r8;
        org.apache.commons.httpclient.UsernamePasswordCredentials r9;
        org.apache.commons.httpclient.params.HttpMethodParams $r10;

        $r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r2 := @parameter2: org.apache.commons.httpclient.HttpState;

        $z0 := @parameter3: boolean;

        if $r0 != null goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP method may not be null");

        throw $r4;

     label01:
        if $r2 != null goto label02;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP state may not be null");

        throw $r4;

     label02:
        r5 = null;

        if $r1 == null goto label03;

        if $z0 == 0 goto label05;

        r5 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

     label03:
        if $z0 == 0 goto label06;

        $r6 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(java.lang.String,java.lang.String)>(null, r5);

     label04:
        if $r6 != null goto label07;

        return 0;

     label05:
        r5 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        goto label03;

     label06:
        $r6 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(java.lang.String,java.lang.String)>(null, r5);

        goto label04;

     label07:
        $z1 = $r6 instanceof org.apache.commons.httpclient.UsernamePasswordCredentials;

        if $z1 != 0 goto label08;

        $r7 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for basic authentication: ");

        r5 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        r5 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>(r5);

        throw $r7;

     label08:
        r9 = (org.apache.commons.httpclient.UsernamePasswordCredentials) $r6;

        $r10 = interfaceinvoke $r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r5 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCredentialCharset()>();

        r5 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials,java.lang.String)>(r9, r5);

        if r5 == null goto label11;

        if $z0 == 0 goto label10;

        r11 = "Proxy-Authorization";

     label09:
        r3 = new org.apache.commons.httpclient.Header;

        specialinvoke r3.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>(r11, r5, 1);

        interfaceinvoke $r0.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>(r3);

        return 1;

     label10:
        r11 = "Authorization";

        goto label09;

     label11:
        return 0;
    }
    public static org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(org.apache.commons.httpclient.Header[]) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        org.apache.commons.httpclient.Header[] $r0;
        java.util.HashMap r1;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        org.apache.commons.httpclient.Header $r4;
        java.lang.String $r5, $r6;
        java.lang.Object $r7;
        org.apache.commons.httpclient.auth.NTLMScheme $r8;
        org.apache.commons.httpclient.auth.DigestScheme $r9;
        org.apache.commons.httpclient.auth.BasicScheme $r10;
        java.lang.UnsupportedOperationException $r11;
        java.lang.StringBuffer $r12;

        $r0 := @parameter0: org.apache.commons.httpclient.Header[];

        $r2 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.selectAuthScheme(Header[])");

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of challenges may not be null");

        throw $r3;

     label1:
        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of challenges may not be empty");

        throw $r3;

     label2:
        r1 = new java.util.HashMap;

        $i0 = lengthof $r0;

        specialinvoke r1.<java.util.HashMap: void <init>(int)>($i0);

        $i0 = 0;

     label3:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label4;

        $r4 = $r0[$i0];

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r6 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>($r5);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("ntlm");

        $r5 = (java.lang.String) $r7;

        if $r5 == null goto label5;

        $r8 = new org.apache.commons.httpclient.auth.NTLMScheme;

        specialinvoke $r8.<org.apache.commons.httpclient.auth.NTLMScheme: void <init>(java.lang.String)>($r5);

        return $r8;

     label5:
        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("digest");

        $r5 = (java.lang.String) $r7;

        if $r5 == null goto label6;

        $r9 = new org.apache.commons.httpclient.auth.DigestScheme;

        specialinvoke $r9.<org.apache.commons.httpclient.auth.DigestScheme: void <init>(java.lang.String)>($r5);

        return $r9;

     label6:
        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("basic");

        $r5 = (java.lang.String) $r7;

        if $r5 == null goto label7;

        $r10 = new org.apache.commons.httpclient.auth.BasicScheme;

        specialinvoke $r10.<org.apache.commons.httpclient.auth.BasicScheme: void <init>(java.lang.String)>($r5);

        return $r10;

     label7:
        $r11 = new java.lang.UnsupportedOperationException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authentication scheme(s) not supported: ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r11;
    }
