org.apache.commons.httpclient.auth.AuthChallengeProcessor extends java.lang.Object
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor
private org.apache.commons.httpclient.params.HttpParams params
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.AuthChallengeProcessor");

        $r1 = $r0;

        <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor>;

        goto label1;
    }
    public void <init>(org.apache.commons.httpclient.params.HttpParams)
    {
        org.apache.commons.httpclient.auth.AuthChallengeProcessor r0;
        org.apache.commons.httpclient.params.HttpParams $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.params.HttpParams params> = null;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter collection may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.params.HttpParams params> = $r1;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState, java.util.Map) throws org.apache.commons.httpclient.auth.MalformedChallengeException, org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.AuthChallengeProcessor r0;
        org.apache.commons.httpclient.auth.AuthState $r1;
        java.util.Map $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        org.apache.commons.httpclient.auth.AuthScheme $r4;
        java.lang.String $r5, $r8;
        org.apache.commons.logging.Log $r6;
        java.lang.StringBuffer $r7;
        java.lang.Object $r9;
        org.apache.commons.httpclient.auth.AuthenticationException $r10;

        r0 := @this: org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        $r1 := @parameter0: org.apache.commons.httpclient.auth.AuthState;

        $r2 := @parameter1: java.util.Map;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication state may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge map may not be null");

        throw $r3;

     label2:
        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>();

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        if $r4 != null goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>($r2);

        virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: void setAuthScheme(org.apache.commons.httpclient.auth.AuthScheme)>($r4);

     label4:
        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r6 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r6 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Using authentication scheme: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r8);

     label5:
        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r8 = (java.lang.String) $r9;

        if $r8 != null goto label6;

        $r10 = new org.apache.commons.httpclient.auth.AuthenticationException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authorization challenge expected, but not found");

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String)>($r5);

        throw $r10;

     label6:
        interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: void processChallenge(java.lang.String)>($r8);

        $r6 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authorization challenge processed");

        return $r4;
    }
    public org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map) throws org.apache.commons.httpclient.auth.AuthChallengeException
    {
        org.apache.commons.httpclient.auth.AuthChallengeProcessor r0;
        java.util.Map $r1;
        java.lang.IllegalStateException r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.commons.httpclient.params.HttpParams $r4;
        java.lang.Object $r5;
        java.util.Collection r6;
        boolean $z0;
        org.apache.commons.logging.Log $r7;
        java.lang.StringBuffer $r8;
        java.lang.String $r9, $r12;
        org.apache.commons.httpclient.auth.AuthScheme r10;
        java.util.Iterator $r11;
        org.apache.commons.httpclient.auth.AuthChallengeException $r13;

        r0 := @this: org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        $r1 := @parameter0: java.util.Map;

        if $r1 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge map may not be null");

        throw $r3;

     label01:
        $r4 = r0.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.params.HttpParams params>;

        $r5 = interfaceinvoke $r4.<org.apache.commons.httpclient.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.auth.scheme-priority");

        r6 = (java.util.Collection) $r5;

        if r6 == null goto label02;

        $z0 = interfaceinvoke r6.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label03;

     label02:
        r6 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.util.List getDefaultAuthPrefs()>();

     label03:
        $r7 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label04;

        $r7 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Supported authentication schemes in the order of preference: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label04:
        r10 = null;

        $r11 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r5 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.String) $r5;

        $r12 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r12 = (java.lang.String) $r5;

        if $r12 == null goto label09;

        $r7 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label06;

        $r7 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication scheme selected");

        $r12 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r12);

     label06:
        r10 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>($r9);

     label07:
        if r10 != null goto label10;

        $r13 = new org.apache.commons.httpclient.auth.AuthChallengeException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to respond to any of these challenges: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.commons.httpclient.auth.AuthChallengeException: void <init>(java.lang.String)>($r9);

        throw $r13;

     label08:
        r2 := @caughtexception;

        $r13 = new org.apache.commons.httpclient.auth.AuthChallengeException;

        $r9 = virtualinvoke r2.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r13.<org.apache.commons.httpclient.auth.AuthChallengeException: void <init>(java.lang.String)>($r9);

        throw $r13;

     label09:
        $r7 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label05;

        $r7 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Challenge for ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication scheme not available");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

        goto label05;

     label10:
        return r10;

        catch java.lang.IllegalStateException from label06 to label07 with label08;
    }
