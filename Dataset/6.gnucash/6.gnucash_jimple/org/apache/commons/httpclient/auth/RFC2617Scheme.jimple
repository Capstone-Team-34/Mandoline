org.apache.commons.httpclient.auth.RFC2617Scheme extends java.lang.Object implements org.apache.commons.httpclient.auth.AuthScheme
private java.util.Map params
    public void <init>()
    {
        org.apache.commons.httpclient.auth.RFC2617Scheme r0;

        r0 := @this: org.apache.commons.httpclient.auth.RFC2617Scheme;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.util.Map params> = null;

        return;
    }
    public void <init>(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        org.apache.commons.httpclient.auth.RFC2617Scheme r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.auth.RFC2617Scheme;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.util.Map params> = null;

        virtualinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: void processChallenge(java.lang.String)>($r1);

        return;
    }
    public java.lang.String getID()
    {
        org.apache.commons.httpclient.auth.RFC2617Scheme r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.auth.RFC2617Scheme;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.lang.String getRealm()>();

        return $r1;
    }
    public java.lang.String getParameter(java.lang.String)
    {
        org.apache.commons.httpclient.auth.RFC2617Scheme r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.httpclient.auth.RFC2617Scheme;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name may not be null");

        throw $r2;

     label1:
        $r3 = r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.util.Map params>;

        if $r3 != null goto label2;

        return null;

     label2:
        $r3 = r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.util.Map params>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r4;

        return $r1;
    }
    protected java.util.Map getParameters()
    {
        org.apache.commons.httpclient.auth.RFC2617Scheme r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.httpclient.auth.RFC2617Scheme;

        r1 = r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.util.Map params>;

        return r1;
    }
    public java.lang.String getRealm()
    {
        org.apache.commons.httpclient.auth.RFC2617Scheme r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.auth.RFC2617Scheme;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)>("realm");

        return $r1;
    }
    public void processChallenge(java.lang.String) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        org.apache.commons.httpclient.auth.RFC2617Scheme r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        org.apache.commons.httpclient.auth.MalformedChallengeException $r4;
        java.lang.StringBuffer $r5;
        java.util.Map $r6;

        r0 := @this: org.apache.commons.httpclient.auth.RFC2617Scheme;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.lang.String getSchemeName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.httpclient.auth.MalformedChallengeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid ");

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.lang.String getSchemeName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" challenge: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.commons.httpclient.auth.MalformedChallengeException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        $r6 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map extractParams(java.lang.String)>($r1);

        r0.<org.apache.commons.httpclient.auth.RFC2617Scheme: java.util.Map params> = $r6;

        return;
    }
