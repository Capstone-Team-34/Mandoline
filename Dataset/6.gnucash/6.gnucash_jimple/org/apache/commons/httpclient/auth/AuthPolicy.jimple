org.apache.commons.httpclient.auth.AuthPolicy extends java.lang.Object
public static final java.lang.String AUTH_SCHEME_PRIORITY
public static final java.lang.String BASIC
public static final java.lang.String DIGEST
protected static final org.apache.commons.logging.Log LOG
public static final java.lang.String NTLM
private static final java.util.HashMap SCHEMES
private static final java.util.ArrayList SCHEME_LIST
static java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy
static java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme
static java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme
static java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme
    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.ArrayList $r1;
        java.lang.Class $r2, $r3;
        org.apache.commons.logging.Log $r4;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST> = $r1;

        $r2 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme>;

        if $r2 != null goto label5;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.NTLMScheme");

        $r3 = $r2;

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme> = $r2;

     label1:
        staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>("NTLM", $r3);

        $r2 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme>;

        if $r2 != null goto label6;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.DigestScheme");

        $r3 = $r2;

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme> = $r2;

     label2:
        staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>("Digest", $r3);

        $r2 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

        if $r2 != null goto label7;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.BasicScheme");

        $r3 = $r2;

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme> = $r2;

     label3:
        staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: void registerAuthScheme(java.lang.String,java.lang.Class)>("Basic", $r3);

        $r2 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy>;

        if $r2 != null goto label8;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.AuthPolicy");

        $r3 = $r2;

        <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy> = $r2;

     label4:
        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        <org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.logging.Log LOG> = $r4;

        return;

     label5:
        $r3 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$NTLMScheme>;

        goto label1;

     label6:
        $r3 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$DigestScheme>;

        goto label2;

     label7:
        $r3 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$BasicScheme>;

        goto label3;

     label8:
        $r3 = <org.apache.commons.httpclient.auth.AuthPolicy: java.lang.Class class$org$apache$commons$httpclient$auth$AuthPolicy>;

        goto label4;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.auth.AuthPolicy r0;

        r0 := @this: org.apache.commons.httpclient.auth.AuthPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public static org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.String $r0, $r5;
        java.lang.Exception r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3;
        java.util.HashMap $r4;
        java.lang.Object $r6;
        java.lang.Class r7;
        org.apache.commons.httpclient.auth.AuthScheme $r8;
        org.apache.commons.logging.Log $r9;
        java.lang.StringBuffer $r10;
        java.lang.IllegalStateException $r11;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        if $r0 != null goto label03;

     label01:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id may not be null");

        throw $r2;

     label02:
        $r3 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        throw $r3;

     label03:
        $r4 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES>;

        $r5 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.Class) $r6;

     label04:
        if r7 == null goto label09;

     label05:
        $r6 = virtualinvoke r7.<java.lang.Class: java.lang.Object newInstance()>();

        $r8 = (org.apache.commons.httpclient.auth.AuthScheme) $r6;

     label06:
        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        return $r8;

     label07:
        r1 := @caughtexception;

     label08:
        $r9 = <org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.logging.Log LOG>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error initializing authentication scheme: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r5, r1);

        $r11 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication scheme implemented by ");

        $r0 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" could not be initialized");

        $r0 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r11;

     label09:
        $r11 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported authentication scheme ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r11;

     label10:
        nop;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label08 to label10 with label02;
    }
    public static java.util.List getDefaultAuthPrefs()
    {
        java.lang.Object $r0;
        java.util.ArrayList $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        entermonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

     label1:
        $r1 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST>;

        $r0 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object clone()>();

        $r2 = (java.util.List) $r0;

     label2:
        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static void registerAuthScheme(java.lang.String, java.lang.Class)
    {
        java.lang.String $r0, $r5;
        java.lang.Class $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3;
        java.util.HashMap $r4;
        java.util.ArrayList $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Class;

        entermonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        if $r0 != null goto label3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id may not be null");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        throw $r3;

     label3:
        if $r1 != null goto label5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scheme class may not be null");

        throw $r2;

     label5:
        $r4 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES>;

        $r5 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r1);

        $r6 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

     label6:
        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label6 with label2;
    }
    public static void unregisterAuthScheme(java.lang.String)
    {
        java.lang.String $r0, $r4;
        java.lang.IllegalArgumentException $r1;
        java.lang.Throwable $r2;
        java.util.HashMap $r3;
        java.util.ArrayList $r5;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        if $r0 != null goto label3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id may not be null");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        throw $r2;

     label3:
        $r3 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.HashMap SCHEMES>;

        $r4 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r5 = <org.apache.commons.httpclient.auth.AuthPolicy: java.util.ArrayList SCHEME_LIST>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>($r0);

     label4:
        exitmonitor class "Lorg/apache/commons/httpclient/auth/AuthPolicy;";

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
