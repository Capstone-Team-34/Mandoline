org.apache.commons.httpclient.HttpConstants extends java.lang.Object
public static final java.lang.String DEFAULT_CONTENT_CHARSET
public static final java.lang.String HTTP_ELEMENT_CHARSET
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$HttpConstants
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$org$apache$commons$httpclient$HttpConstants>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpConstants");

        $r1 = $r0;

        <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$org$apache$commons$httpclient$HttpConstants> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.HttpConstants: java.lang.Class class$org$apache$commons$httpclient$HttpConstants>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.HttpConstants r0;

        r0 := @this: org.apache.commons.httpclient.HttpConstants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public static byte[] getAsciiBytes(java.lang.String)
    {
        java.lang.String $r0;
        java.io.UnsupportedEncodingException r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.RuntimeException $r4;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r3;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("HttpClient requires ASCII support");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public static java.lang.String getAsciiString(byte[])
    {
        byte[] $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getAsciiString(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }
    public static java.lang.String getAsciiString(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.io.UnsupportedEncodingException r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;
        java.lang.RuntimeException $r4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r3 = new java.lang.String;

     label2:
        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r0, $i0, $i1, "US-ASCII");

     label3:
        return $r3;

     label4:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("HttpClient requires ASCII support");

        throw $r4;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }
    public static byte[] getBytes(java.lang.String)
    {
        java.lang.String $r0;
        java.io.UnsupportedEncodingException r1;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;
        org.apache.commons.logging.Log $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label4;

        $r4 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: US-ASCII. System default encoding used");

     label4:
        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        return $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public static byte[] getContentBytes(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: byte[] getContentBytes(java.lang.String,java.lang.String)>($r0, null);

        return $r1;
    }
    public static byte[] getContentBytes(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r3;
        java.io.UnsupportedEncodingException r1, r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        byte[] $r5;
        org.apache.commons.logging.Log $r6;
        java.lang.StringBuffer $r7;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r4;

     label1:
        if $r3 == null goto label2;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

     label2:
        $r3 = "ISO-8859-1";

     label3:
        $r5 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>($r3);

     label4:
        return $r5;

     label5:
        r1 := @caughtexception;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label6;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported encoding: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". HTTP default encoding used");

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r3);

     label6:
        $r5 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label7:
        return $r5;

     label8:
        r2 := @caughtexception;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label9;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: ISO-8859-1. System encoding used");

     label9:
        $r5 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        return $r5;

        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
        catch java.io.UnsupportedEncodingException from label6 to label7 with label8;
    }
    public static java.lang.String getContentString(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getContentString(byte[],java.lang.String)>($r0, null);

        return $r1;
    }
    public static java.lang.String getContentString(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getContentString(byte[],int,int,java.lang.String)>($r0, $i0, $i1, null);

        return $r1;
    }
    public static java.lang.String getContentString(byte[], int, int, java.lang.String)
    {
        byte[] $r0;
        int $i0, $i1;
        java.io.UnsupportedEncodingException r1, r2;
        java.lang.String $r3, $r5;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        org.apache.commons.logging.Log $r6;
        java.lang.StringBuffer $r7;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 := @parameter3: java.lang.String;

        if $r0 != null goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r4;

     label01:
        if $r3 == null goto label02;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label03;

     label02:
        $r3 = "ISO-8859-1";

     label03:
        $r5 = new java.lang.String;

     label04:
        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r0, $i0, $i1, $r3);

     label05:
        return $r5;

     label06:
        r1 := @caughtexception;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label07;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported encoding: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Default HTTP encoding used");

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r3);

     label07:
        $r3 = new java.lang.String;

     label08:
        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r0, $i0, $i1, "ISO-8859-1");

     label09:
        return $r3;

     label10:
        r2 := @caughtexception;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label11;

        $r6 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: ISO-8859-1. System encoding used");

     label11:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int)>($r0, $i0, $i1);

        return $r3;

        catch java.io.UnsupportedEncodingException from label04 to label05 with label06;
        catch java.io.UnsupportedEncodingException from label08 to label09 with label10;
    }
    public static java.lang.String getContentString(byte[], java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $i0 = lengthof $r0;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getContentString(byte[],int,int,java.lang.String)>($r0, 0, $i0, $r1);

        return $r1;
    }
    public static java.lang.String getString(byte[])
    {
        byte[] $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConstants: java.lang.String getString(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }
    public static java.lang.String getString(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.io.UnsupportedEncodingException r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;
        org.apache.commons.logging.Log $r4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r2;

     label1:
        $r3 = new java.lang.String;

     label2:
        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r0, $i0, $i1, "US-ASCII");

     label3:
        return $r3;

     label4:
        r1 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label5;

        $r4 = <org.apache.commons.httpclient.HttpConstants: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unsupported encoding: US-ASCII. System default encoding used");

     label5:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int)>($r0, $i0, $i1);

        return $r3;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }
