org.apache.commons.httpclient.HttpConnection extends java.lang.Object
private static final byte[] CRLF
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$HttpConnection
private java.lang.String hostName
private org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager
private java.io.InputStream inputStream
protected boolean isOpen
private java.io.InputStream lastResponseInputStream
private java.net.InetAddress localAddress
private boolean locked
private java.io.OutputStream outputStream
private org.apache.commons.httpclient.params.HttpConnectionParams params
private int portNumber
private org.apache.commons.httpclient.protocol.Protocol protocolInUse
private java.lang.String proxyHostName
private int proxyPortNumber
private java.net.Socket socket
private boolean tunnelEstablished
private boolean usingSecureSocket
    static void <clinit>()
    {
        byte[] $r0;
        java.lang.Class $r1, $r2;
        org.apache.commons.logging.Log $r3;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.httpclient.HttpConnection: byte[] CRLF> = $r0;

        $r1 = <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$org$apache$commons$httpclient$HttpConnection>;

        if $r1 != null goto label2;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpConnection");

        $r2 = $r1;

        <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$org$apache$commons$httpclient$HttpConnection> = $r1;

     label1:
        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG> = $r3;

        return;

     label2:
        $r2 = <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$org$apache$commons$httpclient$HttpConnection>;

        goto label1;
    }
    public void <init>(java.lang.String, int)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        int $i0;
        org.apache.commons.httpclient.protocol.Protocol $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>("http");

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(null, -1, $r1, null, $i0, $r2);

        return;
    }
    public void <init>(java.lang.String, int, java.lang.String, int)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        org.apache.commons.httpclient.protocol.Protocol $r3;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r3 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>("http");

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r1, $i0, $r2, null, $i1, $r3);

        return;
    }
    public void <init>(java.lang.String, int, java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        org.apache.commons.httpclient.protocol.Protocol $r3;
        org.apache.commons.httpclient.params.HttpConnectionParams $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.apache.commons.httpclient.protocol.Protocol;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: int portNumber> = -1;

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber> = -1;

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen> = 0;

        $r4 = new org.apache.commons.httpclient.params.HttpConnectionParams;

        specialinvoke $r4.<org.apache.commons.httpclient.params.HttpConnectionParams: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params> = $r4;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean locked> = 0;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = 0;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished> = 0;

        if $r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("host parameter is null");

        throw $r5;

     label1:
        if $r3 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocol is null");

        throw $r5;

     label2:
        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName> = $r1;

        r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber> = $i0;

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName> = $r2;

        $i0 = virtualinvoke $r3.<org.apache.commons.httpclient.protocol.Protocol: int resolvePort(int)>($i1);

        r0.<org.apache.commons.httpclient.HttpConnection: int portNumber> = $i0;

        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse> = $r3;

        return;
    }
    public void <init>(java.lang.String, int, java.lang.String, java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1;
        org.apache.commons.httpclient.protocol.Protocol $r4;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r4 := @parameter5: org.apache.commons.httpclient.protocol.Protocol;

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r1, $i0, $r2, $i1, $r4);

        return;
    }
    public void <init>(java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        int $i0;
        org.apache.commons.httpclient.protocol.Protocol $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.commons.httpclient.protocol.Protocol;

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(null, -1, $r1, null, $i0, $r2);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1, $r2;
        int $i0;
        org.apache.commons.httpclient.protocol.Protocol $r3;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: org.apache.commons.httpclient.protocol.Protocol;

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(null, -1, $r1, $r2, $i0, $r3);

        return;
    }
    public void <init>(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        java.lang.String $r2, $r3;
        int $i0, $i1;
        org.apache.commons.httpclient.protocol.Protocol $r4;
        java.net.InetAddress $r5;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getProxyHost()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: int getProxyPort()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r2, $i0, $r3, $i1, $r4);

        $r5 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.net.InetAddress getLocalAddress()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress> = $r5;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    protected void assertNotOpen() throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is open");

        throw $r1;

     label1:
        return;
    }
    protected void assertOpen() throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not open");

        throw $r1;

     label1:
        return;
    }
    public void close()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.close()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>();

        return;
    }
    public boolean closeIfStale() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isStale()>();

        if $z0 == 0 goto label1;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection is stale, closing...");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void close()>();

        return 1;

     label1:
        return 0;
    }
    protected void closeSocketAndStreams()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;
        java.io.OutputStream $r2;
        java.io.InputStream $r3;
        java.net.Socket $r4;
        java.lang.Exception r5, r6, r7;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.closeSockedAndStreams()");

        r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen> = 0;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream> = null;

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        if $r2 == null goto label2;

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = null;

     label1:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label2:
        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        if $r3 == null goto label4;

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = null;

     label3:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label4:
        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r4 == null goto label6;

        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = null;

     label5:
        virtualinvoke $r4.<java.net.Socket: void close()>();

     label6:
        r0.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished> = 0;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = 0;

        return;

     label7:
        r5 := @caughtexception;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception caught when closing output", r5);

        goto label2;

     label8:
        r6 := @caughtexception;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception caught when closing input", r6);

        goto label4;

     label9:
        r7 := @caughtexception;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception caught when closing socket", r7);

        goto label6;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Exception from label5 to label6 with label9;
    }
    public void flushRequestOutputStream() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;
        java.io.OutputStream $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.flushRequestOutputStream()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

        return;
    }
    public java.lang.String getHost()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        return r1;
    }
    public org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.HttpConnectionManager r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        return r1;
    }
    public java.io.InputStream getLastResponseInputStream()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream>;

        return r1;
    }
    public java.net.InetAddress getLocalAddress()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.net.InetAddress r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress>;

        return r1;
    }
    public org.apache.commons.httpclient.params.HttpConnectionParams getParams()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.params.HttpConnectionParams r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        return r1;
    }
    public int getPort()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        if $i0 >= 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z0 == 0 goto label1;

        return 443;

     label1:
        return 80;

     label2:
        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        return $i0;
    }
    public org.apache.commons.httpclient.protocol.Protocol getProtocol()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.protocol.Protocol r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

        return r1;
    }
    public java.lang.String getProxyHost()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        return r1;
    }
    public int getProxyPort()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        i0 = r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber>;

        return i0;
    }
    public java.io.OutputStream getRequestOutputStream() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.WireLogOutputStream r1;
        boolean $z0;
        org.apache.commons.logging.Log $r2;
        java.io.OutputStream r3;
        org.apache.commons.httpclient.Wire $r4;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.getRequestOutputStream()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label1;

        r1 = new org.apache.commons.httpclient.WireLogOutputStream;

        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        specialinvoke r1.<org.apache.commons.httpclient.WireLogOutputStream: void <init>(java.io.OutputStream,org.apache.commons.httpclient.Wire)>(r3, $r4);

        return r1;

     label1:
        return r3;
    }
    public java.io.InputStream getResponseInputStream() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.getResponseInputStream()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        return r2;
    }
    public int getSendBufferSize() throws java.net.SocketException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        java.net.Socket $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSendBufferSize()>();

        return $i0;
    }
    public int getSoTimeout() throws java.net.SocketException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        return $i0;
    }
    protected java.net.Socket getSocket()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.net.Socket r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        return r1;
    }
    public java.lang.String getVirtualHost()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        return r1;
    }
    protected boolean isLocked()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean locked>;

        return z0;
    }
    public boolean isOpen()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        return z0;
    }
    public boolean isProxied()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        if $r1 == null goto label1;

        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isResponseAvailable() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.isResponseAvailable()");

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isResponseAvailable(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0, $i1;
        java.io.InterruptedIOException r1;
        org.apache.commons.logging.Log $r2;
        boolean z0;
        java.io.InputStream $r3;
        java.net.Socket $r4;
        org.apache.commons.httpclient.params.HttpConnectionParams $r5;
        java.io.IOException r6, r10, r11;
        java.lang.Throwable $r7;
        java.lang.StringBuffer $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 := @parameter0: int;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.isResponseAvailable(int)");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        z0 = 0;

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int available()>();

        if $i1 <= 0 goto label01;

        return 1;

     label01:
        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

     label02:
        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>($i0);

     label03:
        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

     label04:
        virtualinvoke $r3.<java.io.InputStream: void mark(int)>(1);

     label05:
        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

     label06:
        $i1 = virtualinvoke $r3.<java.io.InputStream: int read()>();

     label07:
        if $i1 == -1 goto label17;

     label08:
        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

     label09:
        virtualinvoke $r3.<java.io.InputStream: void reset()>();

     label10:
        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

     label11:
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Input data available");

     label12:
        z0 = 1;

     label13:
        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r5 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label14:
        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>($i0);

     label15:
        return z0;

     label16:
        r6 := @caughtexception;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error ocurred while resetting soTimeout, we will assume that no response is available.", r6);

        return 0;

     label17:
        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

     label18:
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Input data not available");

     label19:
        goto label13;

     label20:
        r1 := @caughtexception;

     label21:
        z0 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>(r1);

     label22:
        if z0 != 0 goto label27;

     label23:
        throw r1;

     label24:
        $r7 := @caughtexception;

        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r5 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label25:
        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>($i0);

     label26:
        throw $r7;

     label27:
        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

     label28:
        if z0 == 0 goto label30;

     label29:
        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Input data not available after ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label30:
        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r5 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label31:
        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>($i0);

     label32:
        return 0;

     label33:
        r10 := @caughtexception;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error ocurred while resetting soTimeout, we will assume that no response is available.", r10);

        return 0;

     label34:
        r11 := @caughtexception;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error ocurred while resetting soTimeout, we will assume that no response is available.", r11);

        goto label26;

        catch java.io.InterruptedIOException from label02 to label03 with label20;
        catch java.io.InterruptedIOException from label04 to label05 with label20;
        catch java.io.InterruptedIOException from label06 to label07 with label20;
        catch java.io.InterruptedIOException from label09 to label10 with label20;
        catch java.io.InterruptedIOException from label11 to label12 with label20;
        catch java.lang.Throwable from label01 to label07 with label24;
        catch java.lang.Throwable from label08 to label12 with label24;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.InterruptedIOException from label18 to label19 with label20;
        catch java.lang.Throwable from label17 to label19 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label23 to label24 with label24;
        catch java.io.IOException from label25 to label26 with label34;
        catch java.lang.Throwable from label27 to label28 with label24;
        catch java.lang.Throwable from label29 to label30 with label24;
        catch java.io.IOException from label31 to label32 with label33;
    }
    public boolean isSecure()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;
        org.apache.commons.httpclient.protocol.Protocol $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.protocol.Protocol: boolean isSecure()>();

        return $z0;
    }
    protected boolean isStale() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0, $z1;
        java.io.InputStream $r1;
        int $i0;
        java.net.Socket $r2;
        org.apache.commons.httpclient.params.HttpConnectionParams $r3;
        java.lang.Throwable $r4;
        java.io.InterruptedIOException r5;
        java.io.IOException r6;
        org.apache.commons.logging.Log $r7;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label14;

        $z0 = 0;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

     label01:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

     label02:
        if $i0 > 0 goto label15;

     label03:
        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(1);

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>(1);

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

     label04:
        if $i0 != -1 goto label08;

        $z0 = 1;

     label05:
        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label06:
        $i0 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i0);

     label07:
        return $z0;

     label08:
        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        virtualinvoke $r1.<java.io.InputStream: void reset()>();

     label09:
        goto label05;

     label10:
        $r4 := @caughtexception;

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label11:
        $i0 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i0);

        throw $r4;

     label12:
        r5 := @caughtexception;

        $z1 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>(r5);

        if $z1 != 0 goto label16;

        throw r5;

     label13:
        r6 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error occurred while reading from the socket, is appears to be stale", r6);

        return 1;

     label14:
        return 1;

     label15:
        return 0;

     label16:
        return $z0;

        catch java.io.InterruptedIOException from label01 to label02 with label12;
        catch java.io.IOException from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.io.InterruptedIOException from label06 to label07 with label12;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.io.InterruptedIOException from label11 to label12 with label12;
        catch java.io.IOException from label11 to label12 with label13;
    }
    public boolean isStaleCheckingEnabled()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: boolean isStaleCheckingEnabled()>();

        return $z0;
    }
    public boolean isTransparent()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z0 == 0 goto label1;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished>;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public void open() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.io.IOException r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String $r3, $r4;
        int i0, $i1, i2;
        boolean $z0;
        java.lang.StringBuffer $r5;
        java.net.Socket $r6;
        org.apache.commons.httpclient.protocol.Protocol $r7;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory $r8;
        java.net.InetAddress $r9;
        org.apache.commons.httpclient.params.HttpConnectionParams $r10;
        java.io.BufferedInputStream $r11;
        java.io.InputStream $r12;
        java.io.BufferedOutputStream $r13;
        java.io.OutputStream $r14;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.open()");

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        if $r3 != null goto label46;

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

     label01:
        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        if $r4 != null goto label47;

        i0 = r0.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

     label02:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Open connection to ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);

     label03:
        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r6 != null goto label17;

     label04:
        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

     label05:
        if $z0 == 0 goto label48;

     label06:
        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

     label07:
        if $z0 != 0 goto label48;

        $z0 = 1;

     label08:
        r0.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = $z0;

     label09:
        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

     label10:
        if $z0 == 0 goto label49;

     label11:
        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

     label12:
        if $z0 == 0 goto label49;

     label13:
        $r7 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>("http");

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>();

     label14:
        $r9 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress>;

        $r10 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label15:
        $r6 = interfaceinvoke $r8.<org.apache.commons.httpclient.protocol.ProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>($r3, i0, $r9, 0, $r10);

     label16:
        r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = $r6;

     label17:
        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r10 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label18:
        $z0 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionParams: boolean getTcpNoDelay()>();

        virtualinvoke $r6.<java.net.Socket: void setTcpNoDelay(boolean)>($z0);

     label19:
        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r10 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label20:
        i0 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r6.<java.net.Socket: void setSoTimeout(int)>(i0);

     label21:
        $r10 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label22:
        i0 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionParams: int getLinger()>();

     label23:
        if i0 < 0 goto label25;

        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if i0 <= 0 goto label52;

        $z0 = 1;

     label24:
        virtualinvoke $r6.<java.net.Socket: void setSoLinger(boolean,int)>($z0, i0);

     label25:
        $r10 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label26:
        i0 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSendBufferSize()>();

     label27:
        if i0 < 0 goto label29;

        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

     label28:
        virtualinvoke $r6.<java.net.Socket: void setSendBufferSize(int)>(i0);

     label29:
        $r10 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

     label30:
        i0 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionParams: int getReceiveBufferSize()>();

     label31:
        if i0 < 0 goto label33;

        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

     label32:
        virtualinvoke $r6.<java.net.Socket: void setReceiveBufferSize(int)>(i0);

     label33:
        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

     label34:
        $i1 = virtualinvoke $r6.<java.net.Socket: int getSendBufferSize()>();

     label35:
        i0 = $i1;

        if $i1 > 2048 goto label36;

        if $i1 > 0 goto label37;

     label36:
        i0 = 2048;

     label37:
        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

     label38:
        $i1 = virtualinvoke $r6.<java.net.Socket: int getReceiveBufferSize()>();

     label39:
        i2 = $i1;

        if $i1 > 2048 goto label40;

        if $i1 > 0 goto label41;

     label40:
        i2 = 2048;

     label41:
        $r11 = new java.io.BufferedInputStream;

        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

     label42:
        $r12 = virtualinvoke $r6.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r11.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r12, i2);

     label43:
        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = $r11;

        $r13 = new java.io.BufferedOutputStream;

        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

     label44:
        $r14 = virtualinvoke $r6.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r14, i0);

     label45:
        r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = $r13;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen> = 1;

        return;

     label46:
        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        goto label01;

     label47:
        i0 = r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber>;

        goto label02;

     label48:
        $z0 = 0;

        goto label08;

     label49:
        $r7 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

     label50:
        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>();

     label51:
        goto label14;

     label52:
        $z0 = 0;

        goto label24;

     label53:
        r1 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>();

        throw r1;

        catch java.io.IOException from label04 to label05 with label53;
        catch java.io.IOException from label06 to label07 with label53;
        catch java.io.IOException from label09 to label10 with label53;
        catch java.io.IOException from label11 to label12 with label53;
        catch java.io.IOException from label13 to label14 with label53;
        catch java.io.IOException from label15 to label16 with label53;
        catch java.io.IOException from label18 to label19 with label53;
        catch java.io.IOException from label20 to label21 with label53;
        catch java.io.IOException from label22 to label23 with label53;
        catch java.io.IOException from label24 to label25 with label53;
        catch java.io.IOException from label26 to label27 with label53;
        catch java.io.IOException from label28 to label29 with label53;
        catch java.io.IOException from label30 to label31 with label53;
        catch java.io.IOException from label32 to label33 with label53;
        catch java.io.IOException from label34 to label35 with label53;
        catch java.io.IOException from label38 to label39 with label53;
        catch java.io.IOException from label42 to label43 with label53;
        catch java.io.IOException from label44 to label45 with label53;
        catch java.io.IOException from label50 to label51 with label53;
    }
    public void print(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        byte[] $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $r3 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.print(String)");

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, "ISO-8859-1");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r2);

        return;
    }
    public void print(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1, $r2;
        byte[] $r3;
        org.apache.commons.logging.Log $r4;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.print(String)");

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r3);

        return;
    }
    public void printLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.printLine()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void writeLine()>();

        return;
    }
    public void printLine(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        byte[] $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $r3 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.printLine(String)");

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, "ISO-8859-1");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>($r2);

        return;
    }
    public void printLine(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1, $r2;
        byte[] $r3;
        org.apache.commons.logging.Log $r4;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.printLine(String)");

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>($r3);

        return;
    }
    public java.lang.String readLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.readLine()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream)>($r3);

        return $r1;
    }
    public java.lang.String readLine(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.readLine()");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>($r3, $r1);

        return $r1;
    }
    public void releaseConnection()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnectionManager $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.releaseConnection()");

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean locked>;

        if $z0 == 0 goto label1;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection is locked.  Call to releaseConnection() ignored.");

        return;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r2 == null goto label2;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Releasing connection back to connection manager.");

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        interfaceinvoke $r2.<org.apache.commons.httpclient.HttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>(r0);

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("HttpConnectionManager is null.  Connection cannot be released.");

        return;
    }
    public void setConnectionTimeout(int)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setConnectionTimeout(int)>($i0);

        return;
    }
    public void setHost(java.lang.String) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("host parameter is null");

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName> = $r1;

        return;
    }
    public void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = $r1;

        return;
    }
    public void setLastResponseInputStream(java.io.InputStream)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.io.InputStream;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream> = $r1;

        return;
    }
    public void setLocalAddress(java.net.InetAddress)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.net.InetAddress $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.net.InetAddress;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress> = $r1;

        return;
    }
    protected void setLocked(boolean)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean locked> = $z0;

        return;
    }
    public void setParams(org.apache.commons.httpclient.params.HttpConnectionParams)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpConnectionParams;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params> = $r1;

        return;
    }
    public void setPort(int) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: int portNumber> = $i0;

        return;
    }
    public void setProtocol(org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.httpclient.protocol.Protocol $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: org.apache.commons.httpclient.protocol.Protocol;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocol is null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse> = $r1;

        return;
    }
    public void setProxyHost(java.lang.String) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName> = $r1;

        return;
    }
    public void setProxyPort(int) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber> = $i0;

        return;
    }
    public void setSendBufferSize(int) throws java.net.SocketException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setSendBufferSize(int)>($i0);

        return;
    }
    public void setSoTimeout(int) throws java.net.SocketException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        java.net.Socket $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setSoTimeout(int)>($i0);

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r2 == null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i0);

     label1:
        return;
    }
    public void setSocketTimeout(int) throws java.net.SocketException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        java.net.Socket $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i0);

     label1:
        return;
    }
    public void setStaleCheckingEnabled(boolean)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setStaleCheckingEnabled(boolean)>($z0);

        return;
    }
    public void setVirtualHost(java.lang.String) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        return;
    }
    public void shutdownOutput()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.Exception r1;
        java.lang.Object[] r2;
        java.lang.Class[] r3;
        org.apache.commons.logging.Log $r4;
        java.net.Socket $r5;
        java.lang.Class $r6;
        java.lang.reflect.Method $r7;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r4 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.shutdownOutput()");

     label1:
        r3 = newarray (java.lang.Class)[0];

        $r5 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("shutdownOutput", r3);

        r2 = newarray (java.lang.Object)[0];

        $r5 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, r2);

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unexpected Exception caught", r1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void tunnelCreated() throws java.lang.IllegalStateException, java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;
        int $i0, $i1, i2;
        org.apache.commons.httpclient.protocol.Protocol $r5;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory $r6;
        org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory r7;
        java.net.Socket $r8;
        org.apache.commons.httpclient.params.HttpConnectionParams $r9;
        java.io.BufferedInputStream $r10;
        java.io.InputStream $r11;
        java.io.BufferedOutputStream $r12;
        java.io.OutputStream $r13;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.tunnelCreated()");

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection must be secure and proxied to use this feature");

        throw $r2;

     label2:
        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket>;

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already using a secure socket");

        throw $r2;

     label3:
        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Secure tunnel to ");

        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r4);

     label4:
        $r5 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>();

        r7 = (org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory) $r6;

        $r8 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        $r8 = interfaceinvoke r7.<org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r8, $r4, $i0, 1);

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = $r8;

        $r9 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i0 = virtualinvoke $r9.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSendBufferSize()>();

        if $i0 < 0 goto label5;

        $r8 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r8.<java.net.Socket: void setSendBufferSize(int)>($i0);

     label5:
        $r9 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i0 = virtualinvoke $r9.<org.apache.commons.httpclient.params.HttpConnectionParams: int getReceiveBufferSize()>();

        if $i0 < 0 goto label6;

        $r8 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r8.<java.net.Socket: void setReceiveBufferSize(int)>($i0);

     label6:
        $r8 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i1 = virtualinvoke $r8.<java.net.Socket: int getSendBufferSize()>();

        $i0 = $i1;

        if $i1 <= 2048 goto label7;

        $i0 = 2048;

     label7:
        $r8 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i1 = virtualinvoke $r8.<java.net.Socket: int getReceiveBufferSize()>();

        i2 = $i1;

        if $i1 <= 2048 goto label8;

        i2 = 2048;

     label8:
        $r10 = new java.io.BufferedInputStream;

        $r8 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r11 = virtualinvoke $r8.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r10.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r11, i2);

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = $r10;

        $r12 = new java.io.BufferedOutputStream;

        $r8 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r13 = virtualinvoke $r8.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r12.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r13, $i0);

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = $r12;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = 1;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished> = 1;

        return;
    }
    public void write(byte[]) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        byte[] $r1;
        org.apache.commons.logging.Log $r2;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: byte[];

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.write(byte[])");

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void write(byte[], int, int) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r3;
        java.io.OutputStream $r4;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.write(byte[], int, int)");

        if $i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array offset may not be negative");

        throw $r3;

     label1:
        if $i1 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array length may not be negative");

        throw $r3;

     label2:
        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given offset and length exceed the array length");

        throw $r3;

     label3:
        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public void writeLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;
        byte[] $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.writeLine()");

        $r2 = <org.apache.commons.httpclient.HttpConnection: byte[] CRLF>;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r2);

        return;
    }
    public void writeLine(byte[]) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        byte[] $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 := @parameter0: byte[];

        $r2 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.writeLine(byte[])");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void writeLine()>();

        return;
    }
