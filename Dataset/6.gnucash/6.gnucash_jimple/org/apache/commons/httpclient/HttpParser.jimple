org.apache.commons.httpclient.HttpParser extends java.lang.Object
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$HttpParser
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.HttpParser: java.lang.Class class$org$apache$commons$httpclient$HttpParser>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpParser");

        $r1 = $r0;

        <org.apache.commons.httpclient.HttpParser: java.lang.Class class$org$apache$commons$httpclient$HttpParser> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.HttpParser: java.lang.Class class$org$apache$commons$httpclient$HttpParser>;

        goto label1;
    }
    private void <init>()
    {
        org.apache.commons.httpclient.HttpParser r0;

        r0 := @this: org.apache.commons.httpclient.HttpParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public static org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        java.io.InputStream $r0;
        org.apache.commons.httpclient.Header[] $r1;
        org.apache.commons.logging.Log $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r2 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderParser.parseHeaders(InputStream, String)");

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>($r0, "US-ASCII");

        return $r1;
    }
    public static org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream, java.lang.String) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        java.io.InputStream $r0;
        java.lang.String $r1, r4, $r6, $r7;
        java.util.ArrayList r2;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuffer r5;
        int $i0;
        org.apache.commons.httpclient.Header $r8;
        org.apache.commons.httpclient.Header[] $r9;
        java.lang.Object[] $r10;
        char $c1;
        org.apache.commons.httpclient.ProtocolException $r11;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r3 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderParser.parseHeaders(InputStream, String)");

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = null;

        r5 = null;

     label1:
        $r6 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>($r0, $r1);

        if $r6 == null goto label2;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 >= 1 goto label4;

     label2:
        if r4 == null goto label3;

        $r8 = new org.apache.commons.httpclient.Header;

        $r1 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>(r4, $r1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label3:
        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r9 = newarray (org.apache.commons.httpclient.Header)[$i0];

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r9 = (org.apache.commons.httpclient.Header[]) $r10;

        return $r9;

     label4:
        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        if $c1 == 32 goto label5;

        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        if $c1 != 9 goto label6;

     label5:
        if r5 == null goto label1;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label1;

     label6:
        if r4 == null goto label7;

        $r8 = new org.apache.commons.httpclient.Header;

        $r7 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>(r4, $r7);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label7:
        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 >= 0 goto label8;

        $r11 = new org.apache.commons.httpclient.ProtocolException;

        r5 = new java.lang.StringBuffer;

        specialinvoke r5.<java.lang.StringBuffer: void <init>()>();

        r5 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to parse header: ");

        r5 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r1 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r1);

        throw $r11;

     label8:
        r4 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        r5 = new java.lang.StringBuffer;

        $i0 = $i0 + 1;

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        specialinvoke r5.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

        goto label1;
    }
    public static java.lang.String readLine(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r2 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpParser.readLine(InputStream)");

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>($r0, "US-ASCII");

        return $r1;
    }
    public static java.lang.String readLine(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1, r5;
        int i0, i1, $i2;
        org.apache.commons.logging.Log $r2;
        byte[] $r3;
        byte $b3;
        org.apache.commons.httpclient.Wire $r4;
        boolean $z0;
        java.lang.StringBuffer $r6;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpParser.readLine(InputStream, String)");

        $r3 = staticinvoke <org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>($r0);

        if $r3 != null goto label1;

        return null;

     label1:
        i0 = lengthof $r3;

        i1 = 0;

        if i0 <= 0 goto label2;

        $i2 = i0 + -1;

        $b3 = $r3[$i2];

        if $b3 != 10 goto label2;

        i1 = 1;

        if i0 <= 1 goto label2;

        $i2 = i0 + -2;

        $b3 = $r3[$i2];

        if $b3 != 13 goto label2;

        i1 = 1 + 1;

     label2:
        i0 = i0 - i1;

        $r1 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>($r3, 0, i0, $r1);

        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label5;

        r5 = $r1;

        if i1 != 2 goto label4;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r4.<org.apache.commons.httpclient.Wire: void input(java.lang.String)>(r5);

        return $r1;

     label4:
        if i1 != 1 goto label3;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label5:
        return $r1;
    }
    public static byte[] readRawLine(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayOutputStream r1;
        org.apache.commons.logging.Log $r2;
        int $i0;
        byte[] $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r2 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpParser.readRawLine()");

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i0 < 0 goto label2;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        if $i0 != 10 goto label1;

     label2:
        $i0 = virtualinvoke r1.<java.io.ByteArrayOutputStream: int size()>();

        if $i0 != 0 goto label3;

        return null;

     label3:
        $r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }
