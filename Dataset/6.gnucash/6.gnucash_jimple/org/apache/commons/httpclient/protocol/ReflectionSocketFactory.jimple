org.apache.commons.httpclient.protocol.ReflectionSocketFactory extends java.lang.Object
private static java.lang.reflect.Constructor INETSOCKETADDRESS_CONSTRUCTOR
private static boolean REFLECTION_FAILED
private static java.lang.reflect.Method SOCKETBIND_METHOD
private static java.lang.reflect.Method SOCKETCONNECT_METHOD
private static java.lang.Class SOCKETTIMEOUTEXCEPTION_CLASS
static java.lang.Class class$java$net$InetAddress
static java.lang.Class class$java$net$Socket
    static void <clinit>()
    {
        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: boolean REFLECTION_FAILED> = 0;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Constructor INETSOCKETADDRESS_CONSTRUCTOR> = null;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETCONNECT_METHOD> = null;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETBIND_METHOD> = null;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class SOCKETTIMEOUTEXCEPTION_CLASS> = null;

        return;
    }
    private void <init>()
    {
        org.apache.commons.httpclient.protocol.ReflectionSocketFactory r0;

        r0 := @this: org.apache.commons.httpclient.protocol.ReflectionSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public static java.net.Socket createSocket(java.lang.String, java.lang.String, int, java.net.InetAddress, int, int) throws java.io.IOException, java.net.UnknownHostException, org.apache.commons.httpclient.ConnectTimeoutException
    {
        java.lang.String $r0, $r1;
        int $i0, $i1, $i2;
        java.net.InetAddress $r2, $r13;
        java.lang.ClassNotFoundException r3;
        boolean $z0;
        java.lang.Class $r4, $r11, $r12;
        java.lang.Class[] $r5;
        java.lang.reflect.Method $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8, $r15;
        java.net.Socket r9;
        java.lang.reflect.Constructor $r10;
        java.lang.Integer $r14;
        java.lang.reflect.InvocationTargetException r16;
        java.lang.Throwable $r17;
        org.apache.commons.httpclient.ConnectTimeoutException $r18;
        java.lang.StringBuffer $r19;
        java.io.IOException r20;
        java.lang.Exception r21;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.net.InetAddress;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $z0 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: boolean REFLECTION_FAILED>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label02:
        $r5 = newarray (java.lang.Class)[0];

     label03:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getDefault", $r5);

     label04:
        $r7 = newarray (java.lang.Object)[0];

     label05:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);

     label06:
        $r5 = newarray (java.lang.Class)[0];

     label07:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createSocket", $r5);

     label08:
        $r7 = newarray (java.lang.Object)[0];

     label09:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, $r7);

     label10:
        r9 = (java.net.Socket) $r8;

     label11:
        $r10 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Constructor INETSOCKETADDRESS_CONSTRUCTOR>;

        if $r10 != null goto label22;

     label12:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.net.InetSocketAddress");

     label13:
        $r5 = newarray (java.lang.Class)[2];

     label14:
        $r11 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$InetAddress>;

        if $r11 != null goto label68;

     label15:
        $r11 = staticinvoke <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>("java.net.InetAddress");

     label16:
        $r12 = $r11;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$InetAddress> = $r11;

     label17:
        $r5[0] = $r12;

     label18:
        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

     label19:
        $r5[1] = $r11;

     label20:
        $r10 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

     label21:
        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Constructor INETSOCKETADDRESS_CONSTRUCTOR> = $r10;

     label22:
        $r10 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Constructor INETSOCKETADDRESS_CONSTRUCTOR>;

     label23:
        $r7 = newarray (java.lang.Object)[2];

     label24:
        $r13 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r1);

     label25:
        $r7[0] = $r13;

     label26:
        $r14 = new java.lang.Integer;

     label27:
        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i0);

     label28:
        $r7[1] = $r14;

     label29:
        $r8 = virtualinvoke $r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

     label30:
        $r10 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Constructor INETSOCKETADDRESS_CONSTRUCTOR>;

     label31:
        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r2;

     label32:
        $r14 = new java.lang.Integer;

     label33:
        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i1);

     label34:
        $r7[1] = $r14;

     label35:
        $r15 = virtualinvoke $r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

     label36:
        $r6 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETCONNECT_METHOD>;

        if $r6 != null goto label46;

        $r4 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$Socket>;

        if $r4 != null goto label69;

     label37:
        $r11 = staticinvoke <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>("java.net.Socket");

     label38:
        $r4 = $r11;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$Socket> = $r11;

     label39:
        $r5 = newarray (java.lang.Class)[2];

     label40:
        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.net.SocketAddress");

     label41:
        $r5[0] = $r11;

     label42:
        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

     label43:
        $r5[1] = $r11;

     label44:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("connect", $r5);

     label45:
        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETCONNECT_METHOD> = $r6;

     label46:
        $r6 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETBIND_METHOD>;

        if $r6 != null goto label54;

        $r4 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$Socket>;

        if $r4 != null goto label70;

     label47:
        $r11 = staticinvoke <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$(java.lang.String)>("java.net.Socket");

     label48:
        $r4 = $r11;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$Socket> = $r11;

     label49:
        $r5 = newarray (java.lang.Class)[1];

     label50:
        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.net.SocketAddress");

     label51:
        $r5[0] = $r11;

     label52:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("bind", $r5);

     label53:
        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETBIND_METHOD> = $r6;

     label54:
        $r6 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETBIND_METHOD>;

     label55:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r15;

     label56:
        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r9, $r7);

     label57:
        $r6 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.reflect.Method SOCKETCONNECT_METHOD>;

     label58:
        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r8;

     label59:
        $r14 = new java.lang.Integer;

     label60:
        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i2);

     label61:
        $r7[1] = $r14;

     label62:
        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r9, $r7);

     label63:
        return r9;

     label64:
        r16 := @caughtexception;

        $r17 = virtualinvoke r16.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r4 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class SOCKETTIMEOUTEXCEPTION_CLASS>;

        if $r4 != null goto label67;

     label65:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.net.SocketTimeoutException");

     label66:
        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class SOCKETTIMEOUTEXCEPTION_CLASS> = $r4;

     label67:
        $r4 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class SOCKETTIMEOUTEXCEPTION_CLASS>;

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r17);

        if $z0 == 0 goto label72;

        $r18 = new org.apache.commons.httpclient.ConnectTimeoutException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The host did not accept the connection within timeout of ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");

        $r0 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.commons.httpclient.ConnectTimeoutException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r17);

        throw $r18;

     label68:
        $r12 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$InetAddress>;

        goto label17;

     label69:
        $r4 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$Socket>;

        goto label39;

     label70:
        $r4 = <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: java.lang.Class class$java$net$Socket>;

        goto label49;

     label71:
        r3 := @caughtexception;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: boolean REFLECTION_FAILED> = 1;

        return null;

     label72:
        $z0 = $r17 instanceof java.io.IOException;

        if $z0 == 0 goto label73;

        r20 = (java.io.IOException) $r17;

        throw r20;

     label73:
        return null;

     label74:
        r21 := @caughtexception;

        <org.apache.commons.httpclient.protocol.ReflectionSocketFactory: boolean REFLECTION_FAILED> = 1;

        return null;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label64;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label64;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label64;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label64;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label64;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label64;
        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label64;
        catch java.lang.reflect.InvocationTargetException from label20 to label21 with label64;
        catch java.lang.reflect.InvocationTargetException from label24 to label25 with label64;
        catch java.lang.reflect.InvocationTargetException from label27 to label28 with label64;
        catch java.lang.reflect.InvocationTargetException from label29 to label30 with label64;
        catch java.lang.reflect.InvocationTargetException from label33 to label34 with label64;
        catch java.lang.reflect.InvocationTargetException from label35 to label36 with label64;
        catch java.lang.reflect.InvocationTargetException from label37 to label38 with label64;
        catch java.lang.reflect.InvocationTargetException from label40 to label41 with label64;
        catch java.lang.reflect.InvocationTargetException from label44 to label45 with label64;
        catch java.lang.reflect.InvocationTargetException from label47 to label48 with label64;
        catch java.lang.reflect.InvocationTargetException from label50 to label51 with label64;
        catch java.lang.reflect.InvocationTargetException from label52 to label53 with label64;
        catch java.lang.reflect.InvocationTargetException from label56 to label57 with label64;
        catch java.lang.reflect.InvocationTargetException from label60 to label61 with label64;
        catch java.lang.reflect.InvocationTargetException from label62 to label63 with label64;
        catch java.lang.Exception from label01 to label11 with label74;
        catch java.lang.Exception from label12 to label14 with label74;
        catch java.lang.Exception from label15 to label16 with label74;
        catch java.lang.Exception from label17 to label18 with label74;
        catch java.lang.Exception from label19 to label21 with label74;
        catch java.lang.Exception from label23 to label26 with label74;
        catch java.lang.Exception from label27 to label30 with label74;
        catch java.lang.Exception from label31 to label32 with label74;
        catch java.lang.Exception from label33 to label36 with label74;
        catch java.lang.Exception from label37 to label38 with label74;
        catch java.lang.Exception from label39 to label42 with label74;
        catch java.lang.Exception from label43 to label45 with label74;
        catch java.lang.Exception from label47 to label48 with label74;
        catch java.lang.Exception from label49 to label53 with label74;
        catch java.lang.Exception from label55 to label57 with label74;
        catch java.lang.Exception from label58 to label59 with label74;
        catch java.lang.Exception from label60 to label63 with label74;
        catch java.lang.ClassNotFoundException from label65 to label66 with label71;
    }
