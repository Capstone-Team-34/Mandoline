org.apache.commons.httpclient.protocol.Protocol extends java.lang.Object
private static final java.util.Map PROTOCOLS
private int defaultPort
private java.lang.String scheme
private boolean secure
private org.apache.commons.httpclient.protocol.ProtocolSocketFactory socketFactory
    static void <clinit>()
    {
        java.util.Map $r0;
        java.util.HashMap $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        <org.apache.commons.httpclient.protocol.Protocol: java.util.Map PROTOCOLS> = $r0;

        return;
    }
    public void <init>(java.lang.String, org.apache.commons.httpclient.protocol.ProtocolSocketFactory, int)
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuffer $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.commons.httpclient.protocol.ProtocolSocketFactory;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("scheme is null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("socketFactory is null");

        throw $r3;

     label2:
        if $i0 > 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("port is invalid: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label3:
        r0.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String scheme> = $r1;

        r0.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory socketFactory> = $r2;

        r0.<org.apache.commons.httpclient.protocol.Protocol: int defaultPort> = $i0;

        $z0 = $r2 instanceof org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory;

        r0.<org.apache.commons.httpclient.protocol.Protocol: boolean secure> = $z0;

        return;
    }
    public void <init>(java.lang.String, org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory, int)
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory $r2;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>($r1, $r2, $i0);

        return;
    }
    public static org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.commons.httpclient.protocol.Protocol r4;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("id is null");

        throw $r1;

     label1:
        $r2 = <org.apache.commons.httpclient.protocol.Protocol: java.util.Map PROTOCOLS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r4 = (org.apache.commons.httpclient.protocol.Protocol) $r3;

        if r4 != null goto label2;

        r4 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String)>($r0);

     label2:
        return r4;
    }
    private static org.apache.commons.httpclient.protocol.Protocol lazyRegisterProtocol(java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.String $r0, $r2;
        org.apache.commons.httpclient.protocol.Protocol r1;
        boolean $z0;
        org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory $r3;
        org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory $r4;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuffer $r6;

        $r0 := @parameter0: java.lang.String;

        $r2 = "http";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        r1 = new org.apache.commons.httpclient.protocol.Protocol;

        $r3 = staticinvoke <org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory: org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory getSocketFactory()>();

        specialinvoke r1.<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.ProtocolSocketFactory,int)>("http", $r3, 80);

        staticinvoke <org.apache.commons.httpclient.protocol.Protocol: void registerProtocol(java.lang.String,org.apache.commons.httpclient.protocol.Protocol)>("http", r1);

        return r1;

     label1:
        $r2 = "https";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        r1 = new org.apache.commons.httpclient.protocol.Protocol;

        $r4 = staticinvoke <org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory: org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory getSocketFactory()>();

        specialinvoke r1.<org.apache.commons.httpclient.protocol.Protocol: void <init>(java.lang.String,org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory,int)>("https", $r4, 443);

        staticinvoke <org.apache.commons.httpclient.protocol.Protocol: void registerProtocol(java.lang.String,org.apache.commons.httpclient.protocol.Protocol)>("https", r1);

        return r1;

     label2:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unsupported protocol: \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r0 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r5;
    }
    public static void registerProtocol(java.lang.String, org.apache.commons.httpclient.protocol.Protocol)
    {
        java.lang.String $r0;
        org.apache.commons.httpclient.protocol.Protocol $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Map $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.commons.httpclient.protocol.Protocol;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("id is null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocol is null");

        throw $r2;

     label2:
        $r3 = <org.apache.commons.httpclient.protocol.Protocol: java.util.Map PROTOCOLS>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;
    }
    public static void unregisterProtocol(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        java.util.Map $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("id is null");

        throw $r1;

     label1:
        $r2 = <org.apache.commons.httpclient.protocol.Protocol: java.util.Map PROTOCOLS>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r0);

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.httpclient.protocol.Protocol r0, r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory $r5, $r6;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.apache.commons.httpclient.protocol.Protocol;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.httpclient.protocol.Protocol) $r1;

        $i0 = r0.<org.apache.commons.httpclient.protocol.Protocol: int defaultPort>;

        $i1 = virtualinvoke r2.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

        if $i0 != $i1 goto label1;

        $r3 = r0.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String scheme>;

        $r4 = virtualinvoke r2.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $z0 = r0.<org.apache.commons.httpclient.protocol.Protocol: boolean secure>;

        $z1 = virtualinvoke r2.<org.apache.commons.httpclient.protocol.Protocol: boolean isSecure()>();

        if $z0 != $z1 goto label1;

        $r5 = r0.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory socketFactory>;

        $r6 = virtualinvoke r2.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>();

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int getDefaultPort()
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        i0 = r0.<org.apache.commons.httpclient.protocol.Protocol: int defaultPort>;

        return i0;
    }
    public java.lang.String getScheme()
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        r1 = r0.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String scheme>;

        return r1;
    }
    public org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory r1;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        r1 = r0.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory socketFactory>;

        return r1;
    }
    public int hashCode()
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory $r2;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        $i0 = r0.<org.apache.commons.httpclient.protocol.Protocol: int defaultPort>;

        $i0 = staticinvoke <org.apache.commons.httpclient.util.LangUtils: int hashCode(int,int)>(17, $i0);

        $r1 = r0.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String scheme>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = staticinvoke <org.apache.commons.httpclient.util.LangUtils: int hashCode(int,java.lang.Object)>($i0, $r1);

        $z0 = r0.<org.apache.commons.httpclient.protocol.Protocol: boolean secure>;

        $i0 = staticinvoke <org.apache.commons.httpclient.util.LangUtils: int hashCode(int,boolean)>($i0, $z0);

        $r2 = r0.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory socketFactory>;

        $i0 = staticinvoke <org.apache.commons.httpclient.util.LangUtils: int hashCode(int,java.lang.Object)>($i0, $r2);

        return $i0;
    }
    public boolean isSecure()
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        z0 = r0.<org.apache.commons.httpclient.protocol.Protocol: boolean secure>;

        return z0;
    }
    public int resolvePort(int)
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.protocol.Protocol: int getDefaultPort()>();

     label1:
        return $i0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.httpclient.protocol.Protocol r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.protocol.Protocol;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String scheme>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i0 = r0.<org.apache.commons.httpclient.protocol.Protocol: int defaultPort>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
