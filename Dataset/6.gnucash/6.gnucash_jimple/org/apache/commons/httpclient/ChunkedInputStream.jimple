org.apache.commons.httpclient.ChunkedInputStream extends java.io.InputStream
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream
private boolean bof
private int chunkSize
private boolean closed
private boolean eof
private java.io.InputStream in
private org.apache.commons.httpclient.HttpMethod method
private int pos
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.ChunkedInputStream");

        $r1 = $r0;

        <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.ChunkedInputStream: java.lang.Class class$org$apache$commons$httpclient$ChunkedInputStream>;

        goto label1;
    }
    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void <init>(java.io.InputStream,org.apache.commons.httpclient.HttpMethod)>($r1, null);

        return;
    }
    public void <init>(java.io.InputStream, org.apache.commons.httpclient.HttpMethod) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        java.io.InputStream $r1;
        org.apache.commons.httpclient.HttpMethod $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean bof> = 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed> = 0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method> = null;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream parameter may not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in> = $r1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method> = $r2;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = 0;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    static void exhaustInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        byte[] r1;
        int $i0;

        $r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r1);

        if $i0 >= 0 goto label1;

        return;
    }
    private static int getChunkSizeFromInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayOutputStream r1;
        java.lang.NumberFormatException r2;
        byte b0;
        int $i1;
        java.io.IOException $r3;
        java.lang.RuntimeException $r4;
        byte[] $r5;
        java.lang.String $r6, $r7;
        java.lang.StringBuffer $r8;

        $r0 := @parameter0: java.io.InputStream;

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        b0 = 0;

     label01:
        if b0 == -1 goto label14;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i1 != -1 goto label02;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("chunked stream ended unexpectedly");

        throw $r3;

     label02:
        lookupswitch(b0)
        {
            case 0: goto label04;
            case 1: goto label08;
            case 2: goto label10;
            default: goto label03;
        };

     label03:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("assertion failed");

        throw $r4;

     label04:
        lookupswitch($i1)
        {
            case 13: goto label06;
            case 34: goto label07;
            default: goto label05;
        };

     label05:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>($i1);

        goto label01;

     label06:
        b0 = 1;

        goto label01;

     label07:
        b0 = 2;

        goto label05;

     label08:
        if $i1 != 10 goto label09;

        b0 = -1;

        goto label01;

     label09:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Protocol violation: Unexpected single newline character in chunk size");

        throw $r3;

     label10:
        lookupswitch($i1)
        {
            case 34: goto label13;
            case 92: goto label12;
            default: goto label11;
        };

     label11:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>($i1);

        goto label01;

     label12:
        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>($i1);

        goto label01;

     label13:
        b0 = 0;

        goto label11;

     label14:
        $r5 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r6 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>($r5);

        $i1 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(59);

        if $i1 <= 0 goto label17;

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

     label15:
        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r7, 16);

     label16:
        return $i1;

     label17:
        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        goto label15;

     label18:
        r2 := @caughtexception;

        $r3 = new java.io.IOException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad chunk size: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r3;

        catch java.lang.NumberFormatException from label15 to label16 with label18;
    }
    private void nextChunk() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        int $i0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean bof>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void readCRLF()>();

     label1:
        $r1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i0 = staticinvoke <org.apache.commons.httpclient.ChunkedInputStream: int getChunkSizeFromInputStream(java.io.InputStream)>($r1);

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize> = $i0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean bof> = 0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = 0;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        if $i0 != 0 goto label2;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 1;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void parseTrailerHeaders()>();

     label2:
        return;
    }
    private void parseTrailerHeaders() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        org.apache.commons.httpclient.HttpException r1;
        java.io.IOException r2;
        java.lang.String r3;
        org.apache.commons.httpclient.HttpMethod $r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        java.io.InputStream $r6;
        org.apache.commons.httpclient.Header[] $r7;
        int i0, $i1;
        org.apache.commons.httpclient.Header $r8;
        org.apache.commons.logging.Log $r9;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        r3 = "US-ASCII";

        $r4 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

        if $r4 == null goto label2;

        $r4 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

     label1:
        $r5 = interfaceinvoke $r4.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r3 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getHttpElementCharset()>();

     label2:
        $r6 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

     label3:
        $r7 = staticinvoke <org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>($r6, r3);

     label4:
        $r4 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

        if $r4 == null goto label7;

        i0 = 0;

     label5:
        $i1 = lengthof $r7;

        if i0 >= $i1 goto label7;

        $r4 = r0.<org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.httpclient.HttpMethod method>;

        $r8 = $r7[i0];

        interfaceinvoke $r4.<org.apache.commons.httpclient.HttpMethod: void addResponseFooter(org.apache.commons.httpclient.Header)>($r8);

        i0 = i0 + 1;

        goto label5;

     label6:
        r1 := @caughtexception;

        $r9 = <org.apache.commons.httpclient.ChunkedInputStream: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error parsing trailer headers", r1);

        r2 = new java.io.IOException;

        r3 = virtualinvoke r1.<org.apache.commons.httpclient.HttpException: java.lang.String getMessage()>();

        specialinvoke r2.<java.io.IOException: void <init>(java.lang.String)>(r3);

        staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: void initCause(java.lang.Throwable,java.lang.Throwable)>(r2, r1);

        throw r2;

     label7:
        return;

        catch org.apache.commons.httpclient.HttpException from label1 to label2 with label6;
        catch org.apache.commons.httpclient.HttpException from label3 to label4 with label6;
    }
    private void readCRLF() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        java.io.InputStream $r1;
        int $i0, $i1;
        java.io.IOException $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $r1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $r1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if $i0 != 13 goto label1;

        if $i1 == 10 goto label2;

     label1:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CRLF expected at end of chunk: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed>;

        if $z0 != 0 goto label6;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

     label2:
        if $z0 != 0 goto label4;

     label3:
        staticinvoke <org.apache.commons.httpclient.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>(r0);

     label4:
        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed> = 1;

        return;

     label5:
        $r1 := @caughtexception;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof> = 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed> = 1;

        throw $r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public int read() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        int $i0, $i1;
        boolean $z0;
        java.io.IOException $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r1;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z0 == 0 goto label2;

        return -1;

     label2:
        $i1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        if $i1 < $i0 goto label3;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>();

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z0 != 0 goto label4;

     label3:
        $i0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = $i0;

        $r2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        return $i0;

     label4:
        return -1;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedInputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.IOException $r2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.commons.httpclient.ChunkedInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r2;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z0 == 0 goto label2;

        return -1;

     label2:
        $i2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i3 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        if $i2 < $i3 goto label3;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedInputStream: void nextChunk()>();

        $z0 = r0.<org.apache.commons.httpclient.ChunkedInputStream: boolean eof>;

        if $z0 != 0 goto label4;

     label3:
        $i2 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int chunkSize>;

        $i3 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i2 = $i2 - $i3;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r3 = r0.<org.apache.commons.httpclient.ChunkedInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        $i1 = r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos>;

        $i1 = $i1 + $i0;

        r0.<org.apache.commons.httpclient.ChunkedInputStream: int pos> = $i1;

        return $i0;

     label4:
        return -1;
    }
