org.apache.commons.httpclient.methods.MultipartPostMethod extends org.apache.commons.httpclient.methods.ExpectContinueMethod
private static final org.apache.commons.logging.Log LOG
public static final java.lang.String MULTIPART_FORM_CONTENT_TYPE
static java.lang.Class class$org$apache$commons$httpclient$methods$MultipartPostMethod
private final java.util.List parameters
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.MultipartPostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$MultipartPostMethod>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.MultipartPostMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.MultipartPostMethod");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.MultipartPostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$MultipartPostMethod> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.MultipartPostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$MultipartPostMethod>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters> = $r1;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <init>(java.lang.String)>($r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters> = $r2;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    protected void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.Header $r4;
        long $l0;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.addContentLengthRequestHeader(HttpState, HttpConnection)");

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Content-Length");

        if $r4 != null goto label1;

        $l0 = virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: long getRequestContentLength()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: void addRequestHeader(java.lang.String,java.lang.String)>("Content-Length", $r5);

     label1:
        virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: void removeRequestHeader(java.lang.String)>("Transfer-Encoding");

        return;
    }
    protected void addContentTypeRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.StringBuffer r3;
        org.apache.commons.logging.Log $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r4 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.addContentTypeRequestHeader(HttpState, HttpConnection)");

        $r5 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        r3 = new java.lang.StringBuffer;

        specialinvoke r3.<java.lang.StringBuffer: void <init>(java.lang.String)>("multipart/form-data");

        $r6 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getBoundary()>();

        if $r6 == null goto label1;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; boundary=");

        $r6 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getBoundary()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

     label1:
        $r6 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Content-Type", $r6);

     label2:
        return;
    }
    public void addParameter(java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        java.lang.String $r1;
        java.io.File $r2;
        org.apache.commons.httpclient.methods.multipart.FilePart r3;
        org.apache.commons.logging.Log $r4;
        java.util.List $r5;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.File;

        $r4 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter MultipartPostMethod.addParameter(String parameterName, File parameterFile)");

        r3 = new org.apache.commons.httpclient.methods.multipart.FilePart;

        specialinvoke r3.<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,java.io.File)>($r1, $r2);

        $r5 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }
    public void addParameter(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        java.lang.String $r1, $r2;
        org.apache.commons.httpclient.methods.multipart.StringPart r3;
        org.apache.commons.logging.Log $r4;
        java.util.List $r5;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter addParameter(String parameterName, String parameterValue)");

        r3 = new org.apache.commons.httpclient.methods.multipart.StringPart;

        specialinvoke r3.<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r5 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }
    public void addParameter(java.lang.String, java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        java.lang.String $r1, $r2;
        java.io.File $r3;
        org.apache.commons.httpclient.methods.multipart.FilePart r4;
        org.apache.commons.logging.Log $r5;
        java.util.List $r6;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.io.File;

        $r5 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter MultipartPostMethod.addParameter(String parameterName, String fileName, File parameterFile)");

        r4 = new org.apache.commons.httpclient.methods.multipart.FilePart;

        specialinvoke r4.<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,java.lang.String,java.io.File)>($r1, $r2, $r3);

        $r6 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r4);

        return;
    }
    public void addPart(org.apache.commons.httpclient.methods.multipart.Part)
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        org.apache.commons.httpclient.methods.multipart.Part $r1;
        org.apache.commons.logging.Log $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.methods.multipart.Part;

        $r2 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter addPart(Part part)");

        $r3 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    protected void addRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter MultipartPostMethod.addRequestHeaders(HttpState state, HttpConnection conn)");

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: void addContentTypeRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        return;
    }
    public java.lang.String getName()
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        return "POST";
    }
    public org.apache.commons.httpclient.methods.multipart.Part[] getParts()
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        java.util.List $r1, $r2;
        int $i0;
        org.apache.commons.httpclient.methods.multipart.Part[] $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        $r2 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (org.apache.commons.httpclient.methods.multipart.Part)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (org.apache.commons.httpclient.methods.multipart.Part[]) $r4;

        return $r3;
    }
    protected long getRequestContentLength() throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        org.apache.commons.logging.Log $r1;
        org.apache.commons.httpclient.methods.multipart.Part[] $r2;
        long $l0;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter MultipartPostMethod.getRequestContentLength()");

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.httpclient.methods.multipart.Part[] getParts()>();

        $l0 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[])>($r2);

        return $l0;
    }
    protected boolean hasRequestContent()
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        return 1;
    }
    public void recycle()
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        org.apache.commons.logging.Log $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter MultipartPostMethod.recycle()");

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void recycle()>();

        $r2 = r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: java.util.List parameters>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }
    protected boolean writeRequestBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.MultipartPostMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        java.io.OutputStream $r4;
        org.apache.commons.httpclient.methods.multipart.Part[] $r5;

        r0 := @this: org.apache.commons.httpclient.methods.MultipartPostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter MultipartPostMethod.writeRequestBody(HttpState state, HttpConnection conn)");

        $r4 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>();

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.MultipartPostMethod: org.apache.commons.httpclient.methods.multipart.Part[] getParts()>();

        staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[])>($r4, $r5);

        return 1;
    }
