org.apache.commons.httpclient.methods.PostMethod extends org.apache.commons.httpclient.methods.EntityEnclosingMethod
public static final java.lang.String FORM_URL_ENCODED_CONTENT_TYPE
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod
private java.util.Vector params
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.PostMethod");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params> = $r1;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String $r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <init>(java.lang.String)>($r1);

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params> = $r2;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public void addParameter(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String $r1, $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.IllegalArgumentException $r4;
        java.util.Vector $r5;
        org.apache.commons.httpclient.NameValuePair $r6;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.addParameter(String, String)");

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Arguments to addParameter(String, String) cannot be null");

        throw $r4;

     label2:
        specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        $r5 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r6 = new org.apache.commons.httpclient.NameValuePair;

        specialinvoke $r6.<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>($r6);

        return;
    }
    public void addParameter(org.apache.commons.httpclient.NameValuePair) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        org.apache.commons.httpclient.NameValuePair $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.NameValuePair;

        $r2 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.addParameter(NameValuePair)");

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NameValuePair may not be null");

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: void addParameter(java.lang.String,java.lang.String)>($r4, $r5);

        return;
    }
    public void addParameters(org.apache.commons.httpclient.NameValuePair[])
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        org.apache.commons.httpclient.NameValuePair[] $r1;
        org.apache.commons.logging.Log $r2;
        int i0, $i1;
        java.util.Vector $r3;
        org.apache.commons.httpclient.NameValuePair $r4;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        $r2 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.addParameters(NameValuePair[])");

        if $r1 != null goto label1;

        $r2 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Attempt to addParameters(null) ignored");

        return;

     label1:
        specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r3 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r4 = $r1[i0];

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }
    protected void clearRequestBody()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        org.apache.commons.logging.Log $r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.clearRequestBody()");

        $r2 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

        specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        return;
    }
    protected org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.util.Vector $r1;
        boolean $z0;
        org.apache.commons.httpclient.NameValuePair[] $r2;
        java.lang.String $r3;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity $r4;
        byte[] $r5;
        org.apache.commons.httpclient.methods.RequestEntity $r6;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>();

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: java.lang.String getRequestCharSet()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>($r2, $r3);

        $r4 = new org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        $r5 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r3);

        specialinvoke $r4.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>($r5, "application/x-www-form-urlencoded");

        return $r4;

     label1:
        $r6 = specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>();

        return $r6;
    }
    public java.lang.String getName()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        return "POST";
    }
    public org.apache.commons.httpclient.NameValuePair getParameter(java.lang.String)
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String $r1, $r7;
        org.apache.commons.logging.Log $r2;
        java.util.Vector $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.httpclient.NameValuePair r6;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.getParameter(String)");

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.httpclient.NameValuePair) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        return r6;

     label3:
        return null;
    }
    public org.apache.commons.httpclient.NameValuePair[] getParameters()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        org.apache.commons.httpclient.NameValuePair[] r1;
        org.apache.commons.logging.Log $r2;
        java.util.Vector $r3;
        int $i0, i1;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        org.apache.commons.httpclient.NameValuePair $r6;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r2 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.getParameters()");

        $r3 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        $r3 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object[] toArray()>();

        r1 = newarray (org.apache.commons.httpclient.NameValuePair)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r5 = $r4[i1];

        $r6 = (org.apache.commons.httpclient.NameValuePair) $r5;

        r1[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    protected boolean hasRequestContent()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        org.apache.commons.logging.Log $r1;
        java.util.Vector $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.hasRequestContent()");

        $r2 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>();

        return $z0;
    }
    public boolean removeParameter(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String $r1, $r8;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r3;
        boolean z0, $z1;
        java.util.Vector $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        org.apache.commons.httpclient.NameValuePair r7;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.removeParameter(String)");

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Argument passed to removeParameter(String) cannot be null");

        throw $r3;

     label1:
        z0 = 0;

        $r4 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.httpclient.NameValuePair) $r6;

        $r8 = virtualinvoke r7.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        z0 = 1;

        goto label2;

     label3:
        return z0;
    }
    public boolean removeParameter(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String $r1, $r2, $r9;
        org.apache.commons.logging.Log $r3;
        java.lang.IllegalArgumentException $r4;
        java.util.Vector $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.commons.httpclient.NameValuePair r8;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.removeParameter(String, String)");

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name may not be null");

        throw $r4;

     label1:
        if $r2 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter value may not be null");

        throw $r4;

     label2:
        $r5 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.httpclient.NameValuePair) $r7;

        $r9 = virtualinvoke r8.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke r8.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        return 1;

     label4:
        return 0;
    }
    public void setParameter(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String $r1, $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.setParameter(String, String)");

        virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: boolean removeParameter(java.lang.String)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: void addParameter(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }
    public void setRequestBody(org.apache.commons.httpclient.NameValuePair[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        org.apache.commons.httpclient.NameValuePair[] $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        $r2 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.setRequestBody(NameValuePair[])");

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of parameters may not be null");

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: void addParameters(org.apache.commons.httpclient.NameValuePair[])>($r1);

        return;
    }
