org.apache.commons.httpclient.methods.HeadMethod extends org.apache.commons.httpclient.HttpMethodBase
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.HeadMethod");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.HeadMethod: java.lang.Class class$org$apache$commons$httpclient$methods$HeadMethod>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: void setFollowRedirects(boolean)>(1);

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: void setFollowRedirects(boolean)>(1);

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public int getBodyCheckTimeout()
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.protocol.head-body-timeout", -1);

        return $i0;
    }
    public java.lang.String getName()
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        return "HEAD";
    }
    protected void readResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws org.apache.commons.httpclient.HttpException, java.io.IOException
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.io.IOException r3;
        org.apache.commons.logging.Log $r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        int $i0;
        boolean $z0;
        java.lang.StringBuffer $r6;
        java.lang.String $r7;
        org.apache.commons.httpclient.ProtocolException $r8;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r4 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeadMethod.readResponseBody(HttpState, HttpConnection)");

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: int getIntParameter(java.lang.String,int)>("http.protocol.head-body-timeout", -1);

        if $i0 >= 0 goto label1;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: void responseBodyConsumed()>();

        return;

     label1:
        $r4 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Check for non-compliant response body. Timeout in ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

     label2:
        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>($i0);

     label3:
        if $z0 == 0 goto label6;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-head-body");

        if $z0 == 0 goto label5;

        $r8 = new org.apache.commons.httpclient.ProtocolException;

        specialinvoke $r8.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>("Body content may not be sent in response to HTTP HEAD request");

        throw $r8;

     label4:
        r3 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An IOException occurred while testing if a response was available, we will assume one is not.", r3);

        $z0 = 0;

        goto label3;

     label5:
        $r4 = <org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Body content returned in response to HTTP HEAD");

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void readResponseBody(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }
    public void recycle()
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void recycle()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: void setFollowRedirects(boolean)>(1);

        return;
    }
    public void setBodyCheckTimeout(int)
    {
        org.apache.commons.httpclient.methods.HeadMethod r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;

        r0 := @this: org.apache.commons.httpclient.methods.HeadMethod;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.HeadMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void setIntParameter(java.lang.String,int)>("http.protocol.head-body-timeout", $i0);

        return;
    }
