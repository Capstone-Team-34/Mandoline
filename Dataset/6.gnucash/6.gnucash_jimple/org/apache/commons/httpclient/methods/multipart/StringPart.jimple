org.apache.commons.httpclient.methods.multipart.StringPart extends org.apache.commons.httpclient.methods.multipart.PartBase
public static final java.lang.String DEFAULT_CHARSET
public static final java.lang.String DEFAULT_CONTENT_TYPE
public static final java.lang.String DEFAULT_TRANSFER_ENCODING
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$methods$multipart$StringPart
private byte[] content
private java.lang.String value
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$StringPart>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.multipart.StringPart");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$StringPart> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.multipart.StringPart: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$StringPart>;

        goto label1;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.methods.multipart.StringPart r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.StringPart;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.StringPart: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, null);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.methods.multipart.StringPart r0;
        java.lang.String $r1, $r2, $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.StringPart;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        if $r3 != null goto label1;

        $r3 = "US-ASCII";

     label1:
        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, "text/plain", $r3, "8bit");

        if $r2 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value may not be null");

        throw $r4;

     label2:
        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(0);

        if $i0 == -1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NULs may not be present in string parts");

        throw $r4;

     label3:
        r0.<org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.String value> = $r2;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    private byte[] getContent()
    {
        org.apache.commons.httpclient.methods.multipart.StringPart r0;
        byte[] $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.StringPart;

        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] content>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.String value>;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.StringPart: java.lang.String getCharSet()>();

        $r1 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r2, $r3);

        r0.<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] content> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] content>;

        return $r1;
    }
    protected long lengthOfData() throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.StringPart r0;
        byte[] $r1;
        org.apache.commons.logging.Log $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.StringPart;

        $r2 = <org.apache.commons.httpclient.methods.multipart.StringPart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter lengthOfData()");

        $r1 = specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] getContent()>();

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }
    protected void sendData(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.StringPart r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.StringPart;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = <org.apache.commons.httpclient.methods.multipart.StringPart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendData(OutputStream)");

        $r2 = specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] getContent()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }
    public void setCharSet(java.lang.String)
    {
        org.apache.commons.httpclient.methods.multipart.StringPart r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.StringPart;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.PartBase: void setCharSet(java.lang.String)>($r1);

        r0.<org.apache.commons.httpclient.methods.multipart.StringPart: byte[] content> = null;

        return;
    }
