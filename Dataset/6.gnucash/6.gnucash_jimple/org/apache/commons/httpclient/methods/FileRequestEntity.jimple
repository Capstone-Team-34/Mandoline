org.apache.commons.httpclient.methods.FileRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
final java.lang.String contentType
final java.io.File file
    public void <init>(java.io.File, java.lang.String)
    {
        org.apache.commons.httpclient.methods.FileRequestEntity r0;
        java.io.File $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.io.File file> = $r1;

        r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.lang.String contentType> = $r2;

        return;
    }
    public long getContentLength()
    {
        org.apache.commons.httpclient.methods.FileRequestEntity r0;
        long $l0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.io.File file>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }
    public java.lang.String getContentType()
    {
        org.apache.commons.httpclient.methods.FileRequestEntity r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        r1 = r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.lang.String contentType>;

        return r1;
    }
    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.FileRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        return 1;
    }
    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.FileRequestEntity r0;
        java.io.OutputStream $r1;
        java.io.FileInputStream r2;
        byte[] r3;
        int $i0;
        java.io.File $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        $r1 := @parameter0: java.io.OutputStream;

        r3 = newarray (byte)[4096];

        r2 = new java.io.FileInputStream;

        $r4 = r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.io.File file>;

        specialinvoke r2.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

     label1:
        $i0 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r3);

     label2:
        if $i0 < 0 goto label6;

     label3:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

     label4:
        goto label1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r2.<java.io.InputStream: void close()>();

        throw $r5;

     label6:
        virtualinvoke r2.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
