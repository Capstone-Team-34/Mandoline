org.apache.commons.httpclient.methods.ExpectContinueMethod extends org.apache.commons.httpclient.HttpMethodBase
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$methods$ExpectContinueMethod
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.Class class$org$apache$commons$httpclient$methods$ExpectContinueMethod>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.ExpectContinueMethod");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.Class class$org$apache$commons$httpclient$methods$ExpectContinueMethod> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.ExpectContinueMethod: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.Class class$org$apache$commons$httpclient$methods$ExpectContinueMethod>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.methods.ExpectContinueMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.ExpectContinueMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.ExpectContinueMethod r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.methods.ExpectContinueMethod;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>($r1);

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    protected void addRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.ExpectContinueMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.Header $r4;
        boolean z0, $z1;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.HttpVersion $r6, $r7;

        r0 := @this: org.apache.commons.httpclient.methods.ExpectContinueMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.methods.ExpectContinueMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter ExpectContinueMethod.addRequestHeaders(HttpState, HttpConnection)");

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Expect");

        if $r4 == null goto label2;

        z0 = 1;

     label1:
        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z1 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: boolean isParameterTrue(java.lang.String)>("http.protocol.expect-continue");

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>();

        $r7 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z1 = virtualinvoke $r6.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r7);

        if $z1 == 0 goto label3;

        $z1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: boolean hasRequestContent()>();

        if $z1 == 0 goto label3;

        if z0 != 0 goto label4;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Expect", "100-continue");

        return;

     label2:
        z0 = 0;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void removeRequestHeader(java.lang.String)>("Expect");

     label4:
        return;
    }
    public boolean getUseExpectHeader()
    {
        org.apache.commons.httpclient.methods.ExpectContinueMethod r0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.methods.ExpectContinueMethod;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: boolean getBooleanParameter(java.lang.String,boolean)>("http.protocol.expect-continue", 0);

        return $z0;
    }
protected abstract boolean hasRequestContent() { 
// no body
} 
    public void setUseExpectHeader(boolean)
    {
        org.apache.commons.httpclient.methods.ExpectContinueMethod r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;

        r0 := @this: org.apache.commons.httpclient.methods.ExpectContinueMethod;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: void setBooleanParameter(java.lang.String,boolean)>("http.protocol.expect-continue", $z0);

        return;
    }
