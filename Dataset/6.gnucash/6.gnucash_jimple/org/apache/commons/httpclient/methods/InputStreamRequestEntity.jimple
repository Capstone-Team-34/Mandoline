org.apache.commons.httpclient.methods.InputStreamRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
public static final int CONTENT_LENGTH_AUTO
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity
private byte[] buffer
private java.io.InputStream content
private long contentLength
private java.lang.String contentType
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.InputStreamRequestEntity");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.InputStreamRequestEntity: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$InputStreamRequestEntity>;

        goto label1;
    }
    public void <init>(java.io.InputStream)
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,java.lang.String)>($r1, null);

        return;
    }
    public void <init>(java.io.InputStream, long)
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream $r1;
        long $l0;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long,java.lang.String)>($r1, $l0, null);

        return;
    }
    public void <init>(java.io.InputStream, long, java.lang.String)
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream $r1;
        long $l0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer> = null;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content cannot be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content> = $r1;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength> = $l0;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.String contentType> = $r2;

        return;
    }
    public void <init>(java.io.InputStream, java.lang.String)
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long,java.lang.String)>($r1, -2L, $r2);

        return;
    }
    private void bufferContent()
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        byte[] r1;
        java.io.IOException r2;
        java.io.ByteArrayOutputStream r3;
        java.io.InputStream $r4;
        int $i0;
        org.apache.commons.logging.Log $r5;
        java.lang.String $r6;
        long $l1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if r1 == null goto label01;

        return;

     label01:
        $r4 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        if $r4 == null goto label12;

        r3 = new java.io.ByteArrayOutputStream;

     label02:
        specialinvoke r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label03:
        r1 = newarray (byte)[4096];

     label04:
        $r4 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

     label05:
        $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>(r1);

     label06:
        if $i0 < 0 goto label10;

     label07:
        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

     label08:
        goto label04;

     label09:
        r2 := @caughtexception;

        $r5 = <org.apache.commons.httpclient.methods.InputStreamRequestEntity: org.apache.commons.logging.Log LOG>;

        $r6 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r6, r2);

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer> = null;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content> = null;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength> = 0L;

        return;

     label10:
        r1 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label11:
        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer> = r1;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content> = null;

        r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        $i0 = lengthof r1;

        $l1 = (long) $i0;

        r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength> = $l1;

     label12:
        return;

        catch java.io.IOException from label02 to label03 with label09;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label09;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public java.io.InputStream getContent()
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        return r1;
    }
    public long getContentLength()
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        long $l0;
        byte $b1;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $l0 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength>;

        $b1 = $l0 cmp -2L;

        if $b1 != 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void bufferContent()>();

     label1:
        $l0 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: long contentLength>;

        return $l0;
    }
    public java.lang.String getContentType()
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.lang.String contentType>;

        return r1;
    }
    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.InputStreamRequestEntity r0;
        java.io.OutputStream $r1;
        byte[] r2;
        int $i0;
        java.io.InputStream $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        if $r3 == null goto label2;

        r2 = newarray (byte)[4096];

     label1:
        $r3 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: java.io.InputStream content>;

        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>(r2);

        if $i0 < 0 goto label4;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0);

        goto label1;

     label2:
        r2 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        if r2 == null goto label3;

        r2 = r0.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: byte[] buffer>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>(r2);

        return;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Content must be set before entity is written");

        throw $r4;

     label4:
        return;
    }
