org.apache.commons.httpclient.methods.multipart.Part extends java.lang.Object
protected static final java.lang.String BOUNDARY
protected static final byte[] BOUNDARY_BYTES
protected static final java.lang.String CHARSET
protected static final byte[] CHARSET_BYTES
protected static final java.lang.String CONTENT_DISPOSITION
protected static final byte[] CONTENT_DISPOSITION_BYTES
protected static final java.lang.String CONTENT_TRANSFER_ENCODING
protected static final byte[] CONTENT_TRANSFER_ENCODING_BYTES
protected static final java.lang.String CONTENT_TYPE
protected static final byte[] CONTENT_TYPE_BYTES
protected static final java.lang.String CRLF
protected static final byte[] CRLF_BYTES
private static final byte[] DEFAULT_BOUNDARY_BYTES
protected static final java.lang.String EXTRA
protected static final byte[] EXTRA_BYTES
private static final org.apache.commons.logging.Log LOG
protected static final java.lang.String QUOTE
protected static final byte[] QUOTE_BYTES
static java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part
private byte[] boundaryBytes
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3;

        $r0 = <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.multipart.Part");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG> = $r2;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("----------------314159265358979323846");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] BOUNDARY_BYTES> = $r3;

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] BOUNDARY_BYTES>;

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES> = $r3;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("\r\n");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES> = $r3;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("\"");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] QUOTE_BYTES> = $r3;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("--");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES> = $r3;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("Content-Disposition: form-data; name=");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_DISPOSITION_BYTES> = $r3;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("Content-Type: ");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TYPE_BYTES> = $r3;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("; charset=");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CHARSET_BYTES> = $r3;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("Content-Transfer-Encoding: ");

        <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TRANSFER_ENCODING_BYTES> = $r3;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.multipart.Part: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$Part>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public static java.lang.String getBoundary()
    {
        return "----------------314159265358979323846";
    }
    public static long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part[] $r0;
        long $l0;
        byte[] $r1;

        $r0 := @parameter0: org.apache.commons.httpclient.methods.multipart.Part[];

        $r1 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        $l0 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>($r0, $r1);

        return $l0;
    }
    public static long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[], byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part[] $r0;
        byte[] $r1, $r5;
        long $l0, l1;
        org.apache.commons.logging.Log $r2;
        java.lang.IllegalArgumentException $r3;
        int i2, $i3;
        org.apache.commons.httpclient.methods.multipart.Part $r4;
        byte $b4;

        $r0 := @parameter0: org.apache.commons.httpclient.methods.multipart.Part[];

        $r1 := @parameter1: byte[];

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("getLengthOfParts(Parts[])");

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parts may not be null");

        throw $r3;

     label1:
        l1 = 0L;

        i2 = 0;

     label2:
        $i3 = lengthof $r0;

        if i2 >= $i3 goto label4;

        $r4 = $r0[i2];

        virtualinvoke $r4.<org.apache.commons.httpclient.methods.multipart.Part: void setPartBoundary(byte[])>($r1);

        $r4 = $r0[i2];

        $l0 = virtualinvoke $r4.<org.apache.commons.httpclient.methods.multipart.Part: long length()>();

        $b4 = $l0 cmp 0L;

        if $b4 >= 0 goto label3;

        return -1L;

     label3:
        l1 = l1 + $l0;

        i2 = i2 + 1;

        goto label2;

     label4:
        $r5 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        i2 = lengthof $r5;

        $l0 = (long) i2;

        l1 = l1 + $l0;

        i2 = lengthof $r1;

        $l0 = (long) i2;

        l1 = l1 + $l0;

        $r1 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        i2 = lengthof $r1;

        $l0 = (long) i2;

        l1 = l1 + $l0;

        $r1 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        i2 = lengthof $r1;

        $l0 = (long) i2;

        l1 = l1 + $l0;

        return l1;
    }
    public static void sendParts(java.io.OutputStream, org.apache.commons.httpclient.methods.multipart.Part[]) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        org.apache.commons.httpclient.methods.multipart.Part[] $r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: org.apache.commons.httpclient.methods.multipart.Part[];

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>($r0, $r1, $r2);

        return;
    }
    public static void sendParts(java.io.OutputStream, org.apache.commons.httpclient.methods.multipart.Part[], byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        org.apache.commons.httpclient.methods.multipart.Part[] $r1;
        byte[] $r2, $r5;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        org.apache.commons.httpclient.methods.multipart.Part $r4;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: org.apache.commons.httpclient.methods.multipart.Part[];

        $r2 := @parameter2: byte[];

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parts may not be null");

        throw $r3;

     label1:
        if $r2 == null goto label2;

        $i0 = lengthof $r2;

        if $i0 != 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partBoundary may not be empty");

        throw $r3;

     label3:
        $i0 = 0;

     label4:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $r4 = $r1[$i0];

        virtualinvoke $r4.<org.apache.commons.httpclient.methods.multipart.Part: void setPartBoundary(byte[])>($r2);

        $r4 = $r1[$i0];

        virtualinvoke $r4.<org.apache.commons.httpclient.methods.multipart.Part: void send(java.io.OutputStream)>($r0);

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r5 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r5);

        virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r2);

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r2);

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }
public abstract java.lang.String getCharSet() { 
// no body
} 
public abstract java.lang.String getContentType() { 
// no body
} 
public abstract java.lang.String getName() { 
// no body
} 
    protected byte[] getPartBoundary()
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.Part: byte[] boundaryBytes>;

        if $r1 != null goto label1;

        $r1 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        return $r1;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.Part: byte[] boundaryBytes>;

        return $r1;
    }
public abstract java.lang.String getTransferEncoding() { 
// no body
} 
    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        return 1;
    }
    public long length() throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.ByteArrayOutputStream r1;
        org.apache.commons.logging.Log $r2;
        long $l0, $l3;
        byte $b1;
        int $i2;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter length()");

        $l0 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: long lengthOfData()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        return -1L;

     label1:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>(r1);

        $i2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: int size()>();

        $l0 = (long) $i2;

        $l3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: long lengthOfData()>();

        $l0 = $l0 + $l3;

        return $l0;
    }
protected abstract long lengthOfData() throws java.io.IOException { 
// no body
} 
    public void send(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.OutputStream $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter send(OutputStream out)");

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendStart(java.io.OutputStream)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendData(java.io.OutputStream)>($r1);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: void sendEnd(java.io.OutputStream)>($r1);

        return;
    }
    protected void sendContentTypeHeader(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.OutputStream $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String $r3;
        byte[] $r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendContentTypeHeader(OutputStream out)");

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getContentType()>();

        if $r3 == null goto label1;

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TYPE_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r3);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getCharSet()>();

        if $r3 == null goto label1;

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CHARSET_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r3);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

     label1:
        return;
    }
protected abstract void sendData(java.io.OutputStream) throws java.io.IOException { 
// no body
} 
    protected void sendDispositionHeader(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.OutputStream $r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendDispositionHeader(OutputStream out)");

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_DISPOSITION_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] QUOTE_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getName()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r4);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] QUOTE_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }
    protected void sendEnd(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.OutputStream $r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendEnd(OutputStream out)");

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }
    protected void sendEndOfHeader(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.OutputStream $r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendEndOfHeader(OutputStream out)");

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }
    protected void sendStart(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendStart(OutputStream out)");

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: byte[] getPartBoundary()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }
    protected void sendTransferEncodingHeader(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.io.OutputStream $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String $r3;
        byte[] $r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.commons.httpclient.methods.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendTransferEncodingHeader(OutputStream out)");

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getTransferEncoding()>();

        if $r3 == null goto label1;

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r4 = <org.apache.commons.httpclient.methods.multipart.Part: byte[] CONTENT_TRANSFER_ENCODING_BYTES>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r3);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

     label1:
        return;
    }
    void setPartBoundary(byte[])
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 := @parameter0: byte[];

        r0.<org.apache.commons.httpclient.methods.multipart.Part: byte[] boundaryBytes> = $r1;

        return;
    }
    public java.lang.String toString()
    {
        org.apache.commons.httpclient.methods.multipart.Part r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.Part;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.Part: java.lang.String getName()>();

        return $r1;
    }
