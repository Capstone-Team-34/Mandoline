org.apache.commons.httpclient.methods.OptionsMethod extends org.apache.commons.httpclient.HttpMethodBase
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod
private java.util.Vector methodsAllowed
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.OptionsMethod");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.OptionsMethod: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed> = $r1;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;
        java.lang.String $r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>($r1);

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed> = $r2;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public java.util.Enumeration getAllowedMethods()
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;
        java.util.Enumeration $r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.OptionsMethod: void checkUsed()>();

        $r2 = r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r1;
    }
    public java.lang.String getName()
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        return "OPTIONS";
    }
    public boolean isAllowed(java.lang.String)
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Vector $r2;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.OptionsMethod: void checkUsed()>();

        $r2 = r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean needContentLength()
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        return 0;
    }
    protected void processResponseHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.util.StringTokenizer r3;
        org.apache.commons.logging.Log $r4;
        org.apache.commons.httpclient.Header $r5;
        java.lang.String $r6;
        boolean $z0;
        java.util.Vector $r7;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r4 = <org.apache.commons.httpclient.methods.OptionsMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter OptionsMethod.processResponseHeaders(HttpState, HttpConnection)");

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.OptionsMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("allow");

        if $r5 == null goto label2;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        r3 = new java.util.StringTokenizer;

        specialinvoke r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r6, ",");

     label1:
        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        goto label1;

     label2:
        return;
    }
