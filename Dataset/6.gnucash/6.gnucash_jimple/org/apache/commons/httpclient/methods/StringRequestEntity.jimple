org.apache.commons.httpclient.methods.StringRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
private java.lang.String charset
private byte[] content
private java.lang.String contentType
    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.lang.String $r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content cannot be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType> = null;

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset> = null;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content> = $r2;

        return;
    }
    public void <init>(java.lang.String, java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.lang.String $r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.commons.httpclient.HeaderElement[] $r5;
        org.apache.commons.httpclient.NameValuePair r6, $r8;
        int i0, $i1;
        org.apache.commons.httpclient.HeaderElement $r7;
        byte[] $r9;
        java.lang.StringBuffer $r10;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content cannot be null");

        throw $r4;

     label1:
        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType> = $r2;

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset> = $r3;

        if $r2 == null goto label4;

        $r5 = staticinvoke <org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)>($r2);

        r6 = null;

        i0 = 0;

     label2:
        $i1 = lengthof $r5;

        if i0 >= $i1 goto label3;

        $r7 = $r5[i0];

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>("charset");

        r6 = $r8;

        if $r8 == null goto label5;

     label3:
        if $r3 != null goto label6;

        if r6 == null goto label6;

        $r2 = virtualinvoke r6.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset> = $r2;

     label4:
        $r2 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        if $r2 == null goto label7;

        $r2 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        $r9 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content> = $r9;

        return;

     label5:
        i0 = i0 + 1;

        goto label2;

     label6:
        if $r3 == null goto label4;

        if r6 != null goto label4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; charset=");

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType> = $r2;

        goto label4;

     label7:
        $r9 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content> = $r9;

        return;
    }
    public java.lang.String getCharset()
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        r1 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        return r1;
    }
    public java.lang.String getContent()
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.io.UnsupportedEncodingException r1;
        java.lang.String $r2, $r3;
        byte[] $r4;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r2 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        if $r2 == null goto label4;

        $r3 = new java.lang.String;

        $r4 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        $r2 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

     label1:
        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, $r2);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r2 = new java.lang.String;

        $r4 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r4);

        return $r2;

     label4:
        $r2 = new java.lang.String;

        $r4 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r4);

        return $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public long getContentLength()
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        byte[] $r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }
    public java.lang.String getContentType()
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        r1 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType>;

        return r1;
    }
    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        return 1;
    }
    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.io.OutputStream $r1;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 := @parameter0: java.io.OutputStream;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r2;

     label1:
        $r3 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }
