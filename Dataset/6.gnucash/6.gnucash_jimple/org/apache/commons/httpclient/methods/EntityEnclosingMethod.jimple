org.apache.commons.httpclient.methods.EntityEnclosingMethod extends org.apache.commons.httpclient.methods.ExpectContinueMethod
public static final long CONTENT_LENGTH_AUTO
public static final long CONTENT_LENGTH_CHUNKED
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$methods$EntityEnclosingMethod
private boolean chunked
private int repeatCount
private long requestContentLength
private org.apache.commons.httpclient.methods.RequestEntity requestEntity
private java.io.InputStream requestStream
private java.lang.String requestString
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.Class class$org$apache$commons$httpclient$methods$EntityEnclosingMethod>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.EntityEnclosingMethod");

        $r1 = $r0;

        <org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.Class class$org$apache$commons$httpclient$methods$EntityEnclosingMethod> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.Class class$org$apache$commons$httpclient$methods$EntityEnclosingMethod>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream> = null;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString> = null;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: int repeatCount> = 0;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long requestContentLength> = -2L;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean chunked> = 0;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setFollowRedirects(boolean)>(0);

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void <init>(java.lang.String)>($r1);

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream> = null;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString> = null;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: int repeatCount> = 0;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long requestContentLength> = -2L;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean chunked> = 0;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setFollowRedirects(boolean)>(0);

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    protected void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.Header $r4;
        long $l0;
        byte $b1;
        org.apache.commons.httpclient.HttpVersion $r5, $r6;
        boolean $z0;
        org.apache.commons.httpclient.ProtocolException $r7;
        java.lang.StringBuffer $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.addContentLengthRequestHeader(HttpState, HttpConnection)");

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("content-length");

        if $r4 != null goto label3;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Transfer-Encoding");

        if $r4 != null goto label3;

        $l0 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>();

        $r6 = <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1>;

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpVersion: boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)>($r6);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeader(java.lang.String,java.lang.String)>("Transfer-Encoding", "chunked");

        return;

     label1:
        $r7 = new org.apache.commons.httpclient.ProtocolException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not support chunk encoding");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addRequestHeader(java.lang.String,java.lang.String)>("Content-Length", $r9);

     label3:
        return;
    }
    protected void addRequestHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.logging.Log $r3;
        org.apache.commons.httpclient.Header $r4;
        org.apache.commons.httpclient.methods.RequestEntity $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r3 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.addRequestHeaders(HttpState, HttpConnection)");

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void addRequestHeaders(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void addContentLengthRequestHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r1, $r2);

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Content-Type");

        if $r4 != null goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity getRequestEntity()>();

        if $r5 == null goto label1;

        $r6 = interfaceinvoke $r5.<org.apache.commons.httpclient.methods.RequestEntity: java.lang.String getContentType()>();

        if $r6 == null goto label1;

        $r6 = interfaceinvoke $r5.<org.apache.commons.httpclient.methods.RequestEntity: java.lang.String getContentType()>();

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Content-Type", $r6);

     label1:
        return;
    }
    protected void clearRequestBody()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.clearRequestBody()");

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream> = null;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString> = null;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = null;

        return;
    }
    protected byte[] generateRequestBody()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.renerateRequestBody()");

        return null;
    }
    protected org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        java.io.UnsupportedEncodingException r1, $r11;
        byte[] $r2;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity $r3;
        java.io.InputStream $r4;
        org.apache.commons.httpclient.methods.InputStreamRequestEntity $r5;
        long $l0;
        java.lang.String $r6, $r8;
        org.apache.commons.httpclient.methods.StringRequestEntity $r7;
        org.apache.commons.logging.Log $r9;
        boolean $z0;
        java.lang.StringBuffer $r10;
        org.apache.commons.httpclient.methods.RequestEntity r12;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: byte[] generateRequestBody()>();

        if $r2 == null goto label02;

        $r3 = new org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        specialinvoke $r3.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[])>($r2);

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = $r3;

     label01:
        r12 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        return r12;

     label02:
        $r4 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream>;

        if $r4 == null goto label03;

        $r5 = new org.apache.commons.httpclient.methods.InputStreamRequestEntity;

        $r4 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream>;

        $l0 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long requestContentLength>;

        specialinvoke $r5.<org.apache.commons.httpclient.methods.InputStreamRequestEntity: void <init>(java.io.InputStream,long)>($r4, $l0);

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = $r5;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream> = null;

        goto label01;

     label03:
        $r6 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString>;

        if $r6 == null goto label01;

        $r6 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getRequestCharSet()>();

        $r7 = new org.apache.commons.httpclient.methods.StringRequestEntity;

        $r8 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString>;

     label04:
        specialinvoke $r7.<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r8, null, $r6);

     label05:
        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = $r7;

        goto label01;

     label06:
        r1 := @caughtexception;

        $r9 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label07;

        $r9 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not supported");

        $r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r6);

     label07:
        $r7 = new org.apache.commons.httpclient.methods.StringRequestEntity;

        $r6 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString>;

     label08:
        specialinvoke $r7.<org.apache.commons.httpclient.methods.StringRequestEntity: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r6, null, null);

     label09:
        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = $r7;

        goto label01;

     label10:
        $r11 := @caughtexception;

        goto label01;

        catch java.io.UnsupportedEncodingException from label04 to label05 with label06;
        catch java.io.UnsupportedEncodingException from label08 to label09 with label10;
    }
    public boolean getFollowRedirects()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        return 0;
    }
    public java.lang.String getRequestCharSet()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.httpclient.Header $r1;
        org.apache.commons.httpclient.methods.RequestEntity $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.Header getRequestHeader(java.lang.String)>("Content-Type");

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        if $r2 == null goto label1;

        $r1 = new org.apache.commons.httpclient.Header;

        $r2 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.methods.RequestEntity: java.lang.String getContentType()>();

        specialinvoke $r1.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>("Content-Type", $r3);

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String getContentCharSet(org.apache.commons.httpclient.Header)>($r1);

        return $r3;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.String getRequestCharSet()>();

        return $r3;

     label2:
        $r3 = specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: java.lang.String getRequestCharSet()>();

        return $r3;
    }
    protected long getRequestContentLength()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;
        org.apache.commons.httpclient.methods.RequestEntity $r2;
        long $l0;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.getRequestContentLength()");

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>();

        if $z0 != 0 goto label1;

        return 0L;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean chunked>;

        if $z0 == 0 goto label2;

        return -1L;

     label2:
        $r2 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        if $r2 != null goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>();

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = $r2;

     label3:
        $r2 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        if $r2 == null goto label4;

        $r2 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        $l0 = interfaceinvoke $r2.<org.apache.commons.httpclient.methods.RequestEntity: long getContentLength()>();

        return $l0;

     label4:
        return 0L;
    }
    public org.apache.commons.httpclient.methods.RequestEntity getRequestEntity()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.httpclient.methods.RequestEntity $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>();

        return $r1;
    }
    protected boolean hasRequestContent()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.logging.Log $r1;
        org.apache.commons.httpclient.methods.RequestEntity $r2;
        java.io.InputStream $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.hasRequestContent()");

        $r2 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream>;

        if $r3 != null goto label1;

        $r4 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString>;

        if $r4 == null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public void recycle()
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.recycle()");

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long requestContentLength> = -2L;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: int repeatCount> = 0;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean chunked> = 0;

        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void recycle()>();

        return;
    }
    public void setContentChunked(boolean)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean chunked> = $z0;

        return;
    }
    public void setFollowRedirects(boolean)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $z0 := @parameter0: boolean;

        if $z0 != 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Entity enclosing requests cannot be redirected without user intervention");

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.commons.httpclient.methods.ExpectContinueMethod: void setFollowRedirects(boolean)>(0);

        return;
    }
    public void setRequestBody(java.io.InputStream)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        java.io.InputStream $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.setRequestBody(InputStream)");

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.io.InputStream requestStream> = $r1;

        return;
    }
    public void setRequestBody(java.lang.String)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.setRequestBody(String)");

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: java.lang.String requestString> = $r1;

        return;
    }
    public void setRequestContentLength(int)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        int $i0;
        org.apache.commons.logging.Log $r1;
        long $l1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.setRequestContentLength(int)");

        $l1 = (long) $i0;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long requestContentLength> = $l1;

        return;
    }
    public void setRequestContentLength(long)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        long $l0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $l0 := @parameter0: long;

        $r1 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.setRequestContentLength(int)");

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long requestContentLength> = $l0;

        return;
    }
    public void setRequestEntity(org.apache.commons.httpclient.methods.RequestEntity)
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.httpclient.methods.RequestEntity $r1;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.methods.RequestEntity;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = $r1;

        return;
    }
    protected boolean writeRequestBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.methods.EntityEnclosingMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.ChunkedOutputStream r3;
        org.apache.commons.logging.Log $r4;
        boolean $z0;
        org.apache.commons.httpclient.methods.RequestEntity $r5;
        long $l0;
        int $i1;
        org.apache.commons.httpclient.ProtocolException $r6;
        java.io.OutputStream $r7, r8;
        byte $b2;

        r0 := @this: org.apache.commons.httpclient.methods.EntityEnclosingMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r4 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter EntityEnclosingMethod.writeRequestBody(HttpState, HttpConnection)");

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>();

        if $z0 != 0 goto label1;

        $r4 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Request body has not been specified");

        return 1;

     label1:
        $r5 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        if $r5 != null goto label2;

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>();

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity> = $r5;

     label2:
        $r5 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        if $r5 != null goto label3;

        $r4 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Request body is empty");

        return 1;

     label3:
        $l0 = virtualinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: long getRequestContentLength()>();

        $i1 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: int repeatCount>;

        if $i1 <= 0 goto label4;

        $r5 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.httpclient.methods.RequestEntity: boolean isRepeatable()>();

        if $z0 != 0 goto label4;

        $r6 = new org.apache.commons.httpclient.ProtocolException;

        specialinvoke $r6.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>("Unbuffered entity enclosing request can not be repeated.");

        throw $r6;

     label4:
        $i1 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: int repeatCount>;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: int repeatCount> = $i1;

        $r7 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>();

        r8 = $r7;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label5;

        r3 = new org.apache.commons.httpclient.ChunkedOutputStream;

        specialinvoke r3.<org.apache.commons.httpclient.ChunkedOutputStream: void <init>(java.io.OutputStream)>($r7);

        r8 = r3;

     label5:
        $r5 = r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity requestEntity>;

        interfaceinvoke $r5.<org.apache.commons.httpclient.methods.RequestEntity: void writeRequest(java.io.OutputStream)>(r8);

        $z0 = r8 instanceof org.apache.commons.httpclient.ChunkedOutputStream;

        if $z0 == 0 goto label6;

        r3 = (org.apache.commons.httpclient.ChunkedOutputStream) r8;

        virtualinvoke r3.<org.apache.commons.httpclient.ChunkedOutputStream: void finish()>();

     label6:
        virtualinvoke r8.<java.io.OutputStream: void flush()>();

        $r4 = <org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Request body sent");

        return 1;
    }
