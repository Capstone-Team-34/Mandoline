org.apache.commons.httpclient.ContentLengthInputStream extends java.io.InputStream
private boolean closed
private long contentLength
private long pos
private java.io.InputStream wrappedStream
    public void <init>(java.io.InputStream, int)
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        java.io.InputStream $r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $l1 = (long) $i0;

        specialinvoke r0.<org.apache.commons.httpclient.ContentLengthInputStream: void <init>(java.io.InputStream,long)>($r1, $l1);

        return;
    }
    public void <init>(java.io.InputStream, long)
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        java.io.InputStream $r1;
        long $l0;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos> = 0L;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: boolean closed> = 0;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: java.io.InputStream wrappedStream> = null;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: java.io.InputStream wrappedStream> = $r1;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength> = $l0;

        return;
    }
    public int available() throws java.io.IOException
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        int $i0;
        boolean $z0;
        java.io.InputStream $r1;
        long $l1, $l2;
        byte $b3;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: java.io.InputStream wrappedStream>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        $l1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength>;

        $b3 = $l1 cmp $l2;

        if $b3 <= 0 goto label2;

        $l1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength>;

        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l1 = $l1 - $l2;

        $i0 = (int) $l1;

     label2:
        return $i0;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: boolean closed>;

        if $z0 != 0 goto label4;

     label1:
        staticinvoke <org.apache.commons.httpclient.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>(r0);

     label2:
        r0.<org.apache.commons.httpclient.ContentLengthInputStream: boolean closed> = 1;

        return;

     label3:
        $r1 := @caughtexception;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: boolean closed> = 1;

        throw $r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int read() throws java.io.IOException
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        int $i0;
        boolean $z0;
        java.io.IOException $r1;
        long $l1, $l2;
        byte $b3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $z0 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r1;

     label1:
        $l1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength>;

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label2;

        return -1;

     label2:
        $l1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l1 = $l1 + 1L;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos> = $l1;

        $r2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: java.io.InputStream wrappedStream>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        return $i0;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.ContentLengthInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;
        java.io.IOException $r2;
        long $l2, $l3;
        byte $b4;
        java.io.InputStream $r3;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r2;

     label1:
        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l3 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength>;

        $b4 = $l2 cmp $l3;

        if $b4 < 0 goto label2;

        return -1;

     label2:
        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l3 = (long) $i1;

        $l2 = $l2 + $l3;

        $l3 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength>;

        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label3;

        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength>;

        $l3 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l2 = $l2 - $l3;

        $i1 = (int) $l2;

     label3:
        $r3 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: java.io.InputStream wrappedStream>;

        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l3 = (long) $i0;

        $l2 = $l2 + $l3;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos> = $l2;

        return $i0;
    }
    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.httpclient.ContentLengthInputStream r0;
        long $l0, $l1, $l2;
        java.io.InputStream $r1;
        byte $b3;

        r0 := @this: org.apache.commons.httpclient.ContentLengthInputStream;

        $l0 := @parameter0: long;

        $l2 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long contentLength>;

        $l1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l1 = $l2 - $l1;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        $r1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: java.io.InputStream wrappedStream>;

        $l0 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l0);

        $b3 = $l0 cmp 0L;

        if $b3 <= 0 goto label1;

        $l1 = r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos>;

        $l1 = $l1 + $l0;

        r0.<org.apache.commons.httpclient.ContentLengthInputStream: long pos> = $l1;

     label1:
        return $l0;
    }
