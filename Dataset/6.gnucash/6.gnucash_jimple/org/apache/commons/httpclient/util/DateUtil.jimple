org.apache.commons.httpclient.util.DateUtil extends java.lang.Object
private static final java.util.Collection DEFAULT_PATTERNS
private static final java.util.Date DEFAULT_TWO_DIGIT_YEAR_START
private static final java.util.TimeZone GMT
public static final java.lang.String PATTERN_ASCTIME
public static final java.lang.String PATTERN_RFC1036
public static final java.lang.String PATTERN_RFC1123
    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1;
        java.util.Calendar $r2;
        java.util.Date $r3;
        java.util.TimeZone $r4;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "EEE MMM d HH:mm:ss yyyy";

        $r0[1] = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        $r0[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <org.apache.commons.httpclient.util.DateUtil: java.util.Collection DEFAULT_PATTERNS> = $r1;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $r2.<java.util.Calendar: void set(int,int,int,int,int)>(2000, 0, 1, 0, 0);

        $r3 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        <org.apache.commons.httpclient.util.DateUtil: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START> = $r3;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.apache.commons.httpclient.util.DateUtil: java.util.TimeZone GMT> = $r4;

        return;
    }
    private void <init>()
    {
        org.apache.commons.httpclient.util.DateUtil r0;

        r0 := @this: org.apache.commons.httpclient.util.DateUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String formatDate(java.util.Date)
    {
        java.util.Date $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.apache.commons.httpclient.util.DateUtil: java.lang.String formatDate(java.util.Date,java.lang.String)>($r0, "EEE, dd MMM yyyy HH:mm:ss zzz");

        return $r1;
    }
    public static java.lang.String formatDate(java.util.Date, java.lang.String)
    {
        java.util.Date $r0;
        java.lang.String $r1;
        java.text.SimpleDateFormat r2;
        java.lang.IllegalArgumentException $r3;
        java.util.Locale $r4;
        java.util.TimeZone $r5;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("date is null");

        throw $r3;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pattern is null");

        throw $r3;

     label2:
        r2 = new java.text.SimpleDateFormat;

        $r4 = <java.util.Locale: java.util.Locale US>;

        specialinvoke r2.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r1, $r4);

        $r5 = <org.apache.commons.httpclient.util.DateUtil: java.util.TimeZone GMT>;

        virtualinvoke r2.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r5);

        $r1 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r0);

        return $r1;
    }
    public static java.util.Date parseDate(java.lang.String) throws org.apache.commons.httpclient.util.DateParseException
    {
        java.lang.String $r0;
        java.util.Date $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>($r0, null, null);

        return $r1;
    }
    public static java.util.Date parseDate(java.lang.String, java.util.Collection) throws org.apache.commons.httpclient.util.DateParseException
    {
        java.lang.String $r0;
        java.util.Collection $r1;
        java.util.Date $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.apache.commons.httpclient.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>($r0, $r1, null);

        return $r2;
    }
    public static java.util.Date parseDate(java.lang.String, java.util.Collection, java.util.Date) throws org.apache.commons.httpclient.util.DateParseException
    {
        java.lang.String $r0, r7;
        java.util.Collection $r1;
        java.util.Date $r2, $r10;
        java.lang.IllegalArgumentException $r3;
        int $i0;
        boolean $z0;
        java.text.SimpleDateFormat r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        java.util.Locale $r8;
        java.util.TimeZone $r9;
        org.apache.commons.httpclient.util.DateParseException $r11;
        java.lang.StringBuffer $r12;
        java.text.ParseException $r13;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: java.util.Date;

        if $r0 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dateValue is null");

        throw $r3;

     label01:
        if $r1 != null goto label02;

        $r1 = <org.apache.commons.httpclient.util.DateUtil: java.util.Collection DEFAULT_PATTERNS>;

     label02:
        if $r2 != null goto label03;

        $r2 = <org.apache.commons.httpclient.util.DateUtil: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START>;

     label03:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 1 goto label04;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label04;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label04;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

     label04:
        r4 = null;

        $r5 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        if r4 != null goto label08;

        r4 = new java.text.SimpleDateFormat;

        $r8 = <java.util.Locale: java.util.Locale US>;

        specialinvoke r4.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r7, $r8);

        $r9 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke r4.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r9);

        virtualinvoke r4.<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>($r2);

     label06:
        $r10 = virtualinvoke r4.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r0);

     label07:
        return $r10;

     label08:
        virtualinvoke r4.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(r7);

        goto label06;

     label09:
        $r11 = new org.apache.commons.httpclient.util.DateParseException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to parse the date ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.httpclient.util.DateParseException: void <init>(java.lang.String)>($r0);

        throw $r11;

     label10:
        $r13 := @caughtexception;

        goto label05;

        catch java.text.ParseException from label06 to label07 with label10;
    }
