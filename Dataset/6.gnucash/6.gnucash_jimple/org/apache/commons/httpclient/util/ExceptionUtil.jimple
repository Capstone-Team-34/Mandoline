org.apache.commons.httpclient.util.ExceptionUtil extends java.lang.Object
private static final java.lang.reflect.Method INIT_CAUSE_METHOD
private static final org.apache.commons.logging.Log LOG
private static final java.lang.Class SOCKET_TIMEOUT_CLASS
static java.lang.Class class$java$lang$Throwable
static java.lang.Class class$org$apache$commons$httpclient$util$ExceptionUtil
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.reflect.Method $r3;

        $r0 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$org$apache$commons$httpclient$util$ExceptionUtil>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.util.ExceptionUtil");

        $r1 = $r0;

        <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$org$apache$commons$httpclient$util$ExceptionUtil> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.util.ExceptionUtil: org.apache.commons.logging.Log LOG> = $r2;

        $r3 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method getInitCauseMethod()>();

        <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method INIT_CAUSE_METHOD> = $r3;

        $r0 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class SocketTimeoutExceptionClass()>();

        <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class SOCKET_TIMEOUT_CLASS> = $r0;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$org$apache$commons$httpclient$util$ExceptionUtil>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.util.ExceptionUtil r0;

        r0 := @this: org.apache.commons.httpclient.util.ExceptionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.lang.Class SocketTimeoutExceptionClass()
    {
        java.lang.ClassNotFoundException r0;
        java.lang.Class $r1;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.net.SocketTimeoutException");

     label2:
        return $r1;

     label3:
        r0 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    private static java.lang.reflect.Method getInitCauseMethod()
    {
        java.lang.NoSuchMethodException r0;
        java.lang.Class[] r1;
        java.lang.Class $r2, $r3;
        java.lang.reflect.Method $r4;

        r1 = newarray (java.lang.Class)[1];

        $r2 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$java$lang$Throwable>;

        if $r2 != null goto label08;

     label01:
        $r2 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

     label02:
        $r3 = $r2;

        <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$java$lang$Throwable> = $r2;

     label03:
        r1[0] = $r3;

        $r2 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$java$lang$Throwable>;

        if $r2 != null goto label09;

     label04:
        $r2 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

     label05:
        $r3 = $r2;

        <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$java$lang$Throwable> = $r2;

     label06:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("initCause", r1);

     label07:
        return $r4;

     label08:
        $r3 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$java$lang$Throwable>;

        goto label03;

     label09:
        $r3 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class class$java$lang$Throwable>;

        goto label06;

     label10:
        r0 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.NoSuchMethodException from label04 to label05 with label10;
        catch java.lang.NoSuchMethodException from label06 to label07 with label10;
    }
    public static void initCause(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1;
        java.lang.Exception r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        org.apache.commons.logging.Log $r5;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.Throwable;

        $r3 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method INIT_CAUSE_METHOD>;

        if $r3 == null goto label4;

        $r3 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.reflect.Method INIT_CAUSE_METHOD>;

     label1:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r4);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r5 = <org.apache.commons.httpclient.util.ExceptionUtil: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Exception invoking Throwable.initCause", r2);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public static boolean isSocketTimeoutException(java.io.InterruptedIOException)
    {
        java.io.InterruptedIOException $r0;
        boolean $z0;
        java.lang.Class $r1;

        $r0 := @parameter0: java.io.InterruptedIOException;

        $r1 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class SOCKET_TIMEOUT_CLASS>;

        if $r1 == null goto label1;

        $r1 = <org.apache.commons.httpclient.util.ExceptionUtil: java.lang.Class SOCKET_TIMEOUT_CLASS>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r0);

        return $z0;

     label1:
        return 1;
    }
