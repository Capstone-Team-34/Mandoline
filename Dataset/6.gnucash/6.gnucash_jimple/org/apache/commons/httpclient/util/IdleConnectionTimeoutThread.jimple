org.apache.commons.httpclient.util.IdleConnectionTimeoutThread extends java.lang.Thread
private java.util.List connectionManagers
private long connectionTimeout
private boolean shutdown
private long timeoutInterval
    public void <init>()
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers> = $r1;

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown> = 0;

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long timeoutInterval> = 1000L;

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long connectionTimeout> = 3000L;

        virtualinvoke r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void setDaemon(boolean)>(1);

        return;
    }
    public void addConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        entermonitor r0;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $r4 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
    protected void handleCloseIdleConnections(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        long $l0;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $l0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long connectionTimeout>;

        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpConnectionManager: void closeIdleConnections(long)>($l0);

        return;
    }
    public void removeConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        entermonitor r0;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $r4 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>($r1);

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
    public void run()
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        boolean $z0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.commons.httpclient.HttpConnectionManager r4;
        java.lang.Throwable $r5;
        long $l0;
        java.lang.InterruptedException $r6;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        entermonitor r0;

     label01:
        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 != 0 goto label09;

        $r1 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.httpclient.HttpConnectionManager) $r3;

        virtualinvoke r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void handleCloseIdleConnections(org.apache.commons.httpclient.HttpConnectionManager)>(r4);

     label03:
        goto label02;

     label04:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label05:
        $l0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long timeoutInterval>;

     label06:
        virtualinvoke r0.<java.lang.Object: void wait(long)>($l0);

     label07:
        goto label01;

     label08:
        $r6 := @caughtexception;

        goto label01;

     label09:
        $r1 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

     label10:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }
    public void setConnectionTimeout(long)
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        long $l0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label3;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long connectionTimeout> = $l0;

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
    public void setTimeoutInterval(long)
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        long $l0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label3;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long timeoutInterval> = $l0;

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
    public void shutdown()
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
