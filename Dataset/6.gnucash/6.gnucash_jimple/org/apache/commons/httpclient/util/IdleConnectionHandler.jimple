org.apache.commons.httpclient.util.IdleConnectionHandler extends java.lang.Object
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$util$IdleConnectionHandler
private java.util.Map connectionToAdded
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.util.IdleConnectionHandler: java.lang.Class class$org$apache$commons$httpclient$util$IdleConnectionHandler>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.util.IdleConnectionHandler: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.util.IdleConnectionHandler");

        $r1 = $r0;

        <org.apache.commons.httpclient.util.IdleConnectionHandler: java.lang.Class class$org$apache$commons$httpclient$util$IdleConnectionHandler> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.util.IdleConnectionHandler: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.util.IdleConnectionHandler: java.lang.Class class$org$apache$commons$httpclient$util$IdleConnectionHandler>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.util.IdleConnectionHandler r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.httpclient.util.IdleConnectionHandler: java.util.Map connectionToAdded> = $r1;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public void add(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.util.IdleConnectionHandler r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.Long r2;
        long $l0;
        org.apache.commons.logging.Log $r3;
        boolean $z0;
        java.lang.StringBuffer $r4;
        java.lang.String $r5;
        java.util.Map $r6;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionHandler;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        r2 = new java.lang.Long;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r2.<java.lang.Long: void <init>(long)>($l0);

        $r3 = <org.apache.commons.httpclient.util.IdleConnectionHandler: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.commons.httpclient.util.IdleConnectionHandler: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Adding connection at: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label1:
        $r6 = r0.<org.apache.commons.httpclient.util.IdleConnectionHandler: java.util.Map connectionToAdded>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r2);

        return;
    }
    public void closeIdleConnections(long)
    {
        org.apache.commons.httpclient.util.IdleConnectionHandler r0;
        long $l0, $l1;
        org.apache.commons.logging.Log $r1;
        boolean $z0;
        java.lang.StringBuffer $r2;
        java.lang.String $r3;
        java.util.Map $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        org.apache.commons.httpclient.HttpConnection r8;
        java.lang.Long r9;
        byte $b2;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionHandler;

        $l0 := @parameter0: long;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l1 - $l0;

        $r1 = <org.apache.commons.httpclient.util.IdleConnectionHandler: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = <org.apache.commons.httpclient.util.IdleConnectionHandler: org.apache.commons.logging.Log LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Checking for connections, idleTimeout: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);

     label1:
        $r4 = r0.<org.apache.commons.httpclient.util.IdleConnectionHandler: java.util.Map connectionToAdded>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.httpclient.HttpConnection) $r7;

        $r4 = r0.<org.apache.commons.httpclient.util.IdleConnectionHandler: java.util.Map connectionToAdded>;

        $r7 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (java.lang.Long) $r7;

        $l1 = virtualinvoke r9.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label2;

        $r1 = <org.apache.commons.httpclient.util.IdleConnectionHandler: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r1 = <org.apache.commons.httpclient.util.IdleConnectionHandler: org.apache.commons.logging.Log LOG>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Closing connection, connection time: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r9);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r3);

     label3:
        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        virtualinvoke r8.<org.apache.commons.httpclient.HttpConnection: void close()>();

        goto label2;

     label4:
        return;
    }
    public void remove(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.util.IdleConnectionHandler r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionHandler;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = r0.<org.apache.commons.httpclient.util.IdleConnectionHandler: java.util.Map connectionToAdded>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }
    public void removeAll()
    {
        org.apache.commons.httpclient.util.IdleConnectionHandler r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionHandler;

        $r1 = r0.<org.apache.commons.httpclient.util.IdleConnectionHandler: java.util.Map connectionToAdded>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }
