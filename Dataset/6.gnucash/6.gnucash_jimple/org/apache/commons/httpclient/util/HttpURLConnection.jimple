org.apache.commons.httpclient.util.HttpURLConnection extends java.net.HttpURLConnection
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$util$HttpURLConnection
private org.apache.commons.httpclient.HttpMethod method
private java.net.URL url
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.util.HttpURLConnection: java.lang.Class class$org$apache$commons$httpclient$util$HttpURLConnection>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.util.HttpURLConnection: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.util.HttpURLConnection");

        $r1 = $r0;

        <org.apache.commons.httpclient.util.HttpURLConnection: java.lang.Class class$org$apache$commons$httpclient$util$HttpURLConnection> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: java.lang.Class class$org$apache$commons$httpclient$util$HttpURLConnection>;

        goto label1;
    }
    protected void <init>(java.net.URL)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.net.URL $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.net.HttpURLConnection: void <init>(java.net.URL)>($r1);

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("An HTTP URL connection can only be constructed from a HttpMethod class");

        throw $r2;
    }
    public void <init>(org.apache.commons.httpclient.HttpMethod, java.net.URL)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        java.net.URL $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r2 := @parameter1: java.net.URL;

        specialinvoke r0.<java.net.HttpURLConnection: void <init>(java.net.URL)>($r2);

        r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method> = $r1;

        r0.<org.apache.commons.httpclient.util.HttpURLConnection: java.net.URL url> = $r2;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public void connect() throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.connect()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public void disconnect()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.disconnect()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public boolean getAllowUserInteraction()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getAllowUserInteraction()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public java.lang.Object getContent() throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getContent()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public java.lang.Object getContent(java.lang.Class[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.lang.Class[] $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 := @parameter0: java.lang.Class[];

        $r2 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getContent(Class[])");

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r3;
    }
    public boolean getDefaultUseCaches()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getDefaultUseCaches()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public boolean getDoInput()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getDoInput()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public boolean getDoOutput()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getDoOutput()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public java.io.InputStream getErrorStream()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getErrorStream()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public java.lang.String getHeaderField(int)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        int $i0, $i1;
        org.apache.commons.logging.Log $r1;
        org.apache.commons.httpclient.HttpMethod $r2;
        org.apache.commons.httpclient.StatusLine $r3;
        java.lang.String $r4;
        org.apache.commons.httpclient.Header[] $r5;
        org.apache.commons.httpclient.Header $r6;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getHeaderField(int)");

        if $i0 != 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.StatusLine: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $r5 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getResponseHeaders()>();

        if $i0 < 0 goto label2;

        $i1 = lengthof $r5;

        if $i0 <= $i1 goto label3;

     label2:
        return null;

     label3:
        $i0 = $i0 + -1;

        $r6 = $r5[$i0];

        $r4 = virtualinvoke $r6.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        return $r4;
    }
    public java.lang.String getHeaderField(java.lang.String)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.lang.String $r1, $r6;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.httpclient.HttpMethod $r3;
        org.apache.commons.httpclient.Header[] $r4;
        int $i0;
        org.apache.commons.httpclient.Header $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getHeaderField(String)");

        $r3 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getResponseHeaders()>();

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label3;

        $r5 = $r4[$i0];

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.Header: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        $r5 = $r4[$i0];

        $r1 = virtualinvoke $r5.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        return $r1;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        return null;
    }
    public java.lang.String getHeaderFieldKey(int)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        int $i0, $i1;
        org.apache.commons.logging.Log $r1;
        org.apache.commons.httpclient.HttpMethod $r2;
        org.apache.commons.httpclient.Header[] $r3;
        org.apache.commons.httpclient.Header $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getHeaderFieldKey(int)");

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getResponseHeaders()>();

        if $i0 < 0 goto label2;

        $i1 = lengthof $r3;

        if $i0 > $i1 goto label2;

        $i0 = $i0 + -1;

        $r4 = $r3[$i0];

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.Header: java.lang.String getName()>();

        return $r5;

     label2:
        return null;
    }
    public long getIfModifiedSince()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getIfmodifiedSince()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.io.InputStream $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.httpclient.HttpMethod $r3;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r2 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getInputStream()");

        $r3 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $r1 = interfaceinvoke $r3.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        return $r1;
    }
    public boolean getInstanceFollowRedirects()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getInstanceFollowRedirects()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getOutputStream()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public java.security.Permission getPermission() throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getPermission()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public java.lang.String getRequestMethod()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.httpclient.HttpMethod $r3;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r2 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getRequestMethod()");

        $r3 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $r1 = interfaceinvoke $r3.<org.apache.commons.httpclient.HttpMethod: java.lang.String getName()>();

        return $r1;
    }
    public java.lang.String getRequestProperty(java.lang.String)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getRequestProperty()");

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r3;
    }
    public int getResponseCode() throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        int $i0;
        org.apache.commons.logging.Log $r1;
        org.apache.commons.httpclient.HttpMethod $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getResponseCode()");

        $r2 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $i0 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        return $i0;
    }
    public java.lang.String getResponseMessage() throws java.io.IOException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.httpclient.HttpMethod $r3;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r2 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getResponseMessage()");

        $r3 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.httpclient.HttpMethod method>;

        $r1 = interfaceinvoke $r3.<org.apache.commons.httpclient.HttpMethod: java.lang.String getStatusText()>();

        return $r1;
    }
    public java.net.URL getURL()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.net.URL r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getURL()");

        r2 = r0.<org.apache.commons.httpclient.util.HttpURLConnection: java.net.URL url>;

        return r2;
    }
    public boolean getUseCaches()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.getUseCaches()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
    public void setAllowUserInteraction(boolean)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setAllowUserInteraction(boolean)");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public void setDefaultUseCaches(boolean)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setDefaultUseCaches(boolean)");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public void setDoInput(boolean)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setDoInput()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public void setDoOutput(boolean)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setDoOutput()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public void setIfModifiedSince(long)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        long $l0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $l0 := @parameter0: long;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setIfModifiedSince(long)");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public void setInstanceFollowRedirects(boolean)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setInstanceFollowRedirects(boolean)");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public void setRequestMethod(java.lang.String) throws java.net.ProtocolException
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setRequestMethod(String)");

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r3;
    }
    public void setRequestProperty(java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        java.lang.String $r1, $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setRequestProperty()");

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r4;
    }
    public void setUseCaches(boolean)
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $z0 := @parameter0: boolean;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.setUseCaches(boolean)");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("This class can only be used with alreadyretrieved data");

        throw $r2;
    }
    public boolean usingProxy()
    {
        org.apache.commons.httpclient.util.HttpURLConnection r0;
        org.apache.commons.logging.Log $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.commons.httpclient.util.HttpURLConnection;

        $r1 = <org.apache.commons.httpclient.util.HttpURLConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpURLConnection.usingProxy()");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r2;
    }
