org.apache.commons.httpclient.util.DateParser extends java.lang.Object
private static final java.util.Collection DEFAULT_PATTERNS
public static final java.lang.String PATTERN_ASCTIME
public static final java.lang.String PATTERN_RFC1036
public static final java.lang.String PATTERN_RFC1123
    static void <clinit>()
    {
        java.util.List $r0;
        java.lang.String[] $r1;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "EEE MMM d HH:mm:ss yyyy";

        $r1[1] = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        $r1[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r0 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <org.apache.commons.httpclient.util.DateParser: java.util.Collection DEFAULT_PATTERNS> = $r0;

        return;
    }
    private void <init>()
    {
        org.apache.commons.httpclient.util.DateParser r0;

        r0 := @this: org.apache.commons.httpclient.util.DateParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.util.Date parseDate(java.lang.String) throws org.apache.commons.httpclient.util.DateParseException
    {
        java.lang.String $r0;
        java.util.Date $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.httpclient.util.DateParser: java.util.Date parseDate(java.lang.String,java.util.Collection)>($r0, null);

        return $r1;
    }
    public static java.util.Date parseDate(java.lang.String, java.util.Collection) throws org.apache.commons.httpclient.util.DateParseException
    {
        java.lang.String $r0, r6;
        java.util.Collection $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        boolean $z0;
        java.text.SimpleDateFormat r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.util.Locale $r7;
        java.util.TimeZone $r8;
        java.util.Date $r9;
        org.apache.commons.httpclient.util.DateParseException $r10;
        java.lang.StringBuffer $r11;
        java.text.ParseException $r12;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Collection;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dateValue is null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r1 = <org.apache.commons.httpclient.util.DateParser: java.util.Collection DEFAULT_PATTERNS>;

     label2:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 1 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

     label3:
        r3 = null;

        $r4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        if r3 != null goto label7;

        r3 = new java.text.SimpleDateFormat;

        $r7 = <java.util.Locale: java.util.Locale US>;

        specialinvoke r3.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r6, $r7);

        $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r8);

     label5:
        $r9 = virtualinvoke r3.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r0);

     label6:
        return $r9;

     label7:
        virtualinvoke r3.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(r6);

        goto label5;

     label8:
        $r10 = new org.apache.commons.httpclient.util.DateParseException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to parse the date ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.commons.httpclient.util.DateParseException: void <init>(java.lang.String)>($r0);

        throw $r10;

     label9:
        $r12 := @caughtexception;

        goto label4;

        catch java.text.ParseException from label5 to label6 with label9;
    }
