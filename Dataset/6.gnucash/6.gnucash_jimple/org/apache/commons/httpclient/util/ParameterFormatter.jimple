org.apache.commons.httpclient.util.ParameterFormatter extends java.lang.Object
private static final char[] SEPARATORS
private static final char[] UNSAFE_CHARS
private boolean alwaysUseQuotes
    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[19];

        $r0[0] = 40;

        $r0[1] = 41;

        $r0[2] = 60;

        $r0[3] = 62;

        $r0[4] = 64;

        $r0[5] = 44;

        $r0[6] = 59;

        $r0[7] = 58;

        $r0[8] = 92;

        $r0[9] = 34;

        $r0[10] = 47;

        $r0[11] = 91;

        $r0[12] = 93;

        $r0[13] = 63;

        $r0[14] = 61;

        $r0[15] = 123;

        $r0[16] = 125;

        $r0[17] = 32;

        $r0[18] = 9;

        <org.apache.commons.httpclient.util.ParameterFormatter: char[] SEPARATORS> = $r0;

        $r0 = newarray (char)[2];

        $r0[0] = 34;

        $r0[1] = 92;

        <org.apache.commons.httpclient.util.ParameterFormatter: char[] UNSAFE_CHARS> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.util.ParameterFormatter r0;

        r0 := @this: org.apache.commons.httpclient.util.ParameterFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.util.ParameterFormatter: boolean alwaysUseQuotes> = 1;

        return;
    }
    public static void formatValue(java.lang.StringBuffer, java.lang.String, boolean)
    {
        java.lang.StringBuffer $r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        int i0, $i1, $i3;
        char $c2;

        $r0 := @parameter0: java.lang.StringBuffer;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String buffer may not be null");

        throw $r2;

     label01:
        if $r1 != null goto label02;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value buffer may not be null");

        throw $r2;

     label02:
        if $z0 == 0 goto label06;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        i0 = 0;

     label03:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i0 >= $i1 goto label05;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        $z0 = staticinvoke <org.apache.commons.httpclient.util.ParameterFormatter: boolean isUnsafeChar(char)>($c2);

        if $z0 == 0 goto label04;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label04:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        i0 = i0 + 1;

        goto label03;

     label05:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        return;

     label06:
        i0 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        $z0 = 0;

        $i1 = 0;

     label07:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i3 goto label10;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $z1 = staticinvoke <org.apache.commons.httpclient.util.ParameterFormatter: boolean isSeparator(char)>($c2);

        if $z1 == 0 goto label08;

        $z0 = 1;

     label08:
        $z1 = staticinvoke <org.apache.commons.httpclient.util.ParameterFormatter: boolean isUnsafeChar(char)>($c2);

        if $z1 == 0 goto label09;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label09:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $i1 = $i1 + 1;

        goto label07;

     label10:
        if $z0 == 0 goto label11;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(i0, 34);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

     label11:
        return;
    }
    private static boolean isOneOf(char[], char)
    {
        char[] $r0;
        char $c0, $c3;
        int i1, $i2;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label3;

        $c3 = $r0[i1];

        if $c0 != $c3 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    private static boolean isSeparator(char)
    {
        char $c0;
        boolean $z0;
        char[] $r0;

        $c0 := @parameter0: char;

        $r0 = <org.apache.commons.httpclient.util.ParameterFormatter: char[] SEPARATORS>;

        $z0 = staticinvoke <org.apache.commons.httpclient.util.ParameterFormatter: boolean isOneOf(char[],char)>($r0, $c0);

        return $z0;
    }
    private static boolean isUnsafeChar(char)
    {
        char $c0;
        boolean $z0;
        char[] $r0;

        $c0 := @parameter0: char;

        $r0 = <org.apache.commons.httpclient.util.ParameterFormatter: char[] UNSAFE_CHARS>;

        $z0 = staticinvoke <org.apache.commons.httpclient.util.ParameterFormatter: boolean isOneOf(char[],char)>($r0, $c0);

        return $z0;
    }
    public java.lang.String format(org.apache.commons.httpclient.NameValuePair)
    {
        org.apache.commons.httpclient.util.ParameterFormatter r0;
        org.apache.commons.httpclient.NameValuePair $r1;
        java.lang.StringBuffer r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.httpclient.util.ParameterFormatter;

        $r1 := @parameter0: org.apache.commons.httpclient.NameValuePair;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r0.<org.apache.commons.httpclient.util.ParameterFormatter: void format(java.lang.StringBuffer,org.apache.commons.httpclient.NameValuePair)>(r2, $r1);

        $r3 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
    public void format(java.lang.StringBuffer, org.apache.commons.httpclient.NameValuePair)
    {
        org.apache.commons.httpclient.util.ParameterFormatter r0;
        java.lang.StringBuffer $r1;
        org.apache.commons.httpclient.NameValuePair $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.util.ParameterFormatter;

        $r1 := @parameter0: java.lang.StringBuffer;

        $r2 := @parameter1: org.apache.commons.httpclient.NameValuePair;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String buffer may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter may not be null");

        throw $r3;

     label2:
        $r4 = virtualinvoke $r2.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        if $r4 == null goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $z0 = r0.<org.apache.commons.httpclient.util.ParameterFormatter: boolean alwaysUseQuotes>;

        staticinvoke <org.apache.commons.httpclient.util.ParameterFormatter: void formatValue(java.lang.StringBuffer,java.lang.String,boolean)>($r1, $r4, $z0);

     label3:
        return;
    }
    public boolean isAlwaysUseQuotes()
    {
        org.apache.commons.httpclient.util.ParameterFormatter r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.util.ParameterFormatter;

        z0 = r0.<org.apache.commons.httpclient.util.ParameterFormatter: boolean alwaysUseQuotes>;

        return z0;
    }
    public void setAlwaysUseQuotes(boolean)
    {
        org.apache.commons.httpclient.util.ParameterFormatter r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.util.ParameterFormatter;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.util.ParameterFormatter: boolean alwaysUseQuotes> = $z0;

        return;
    }
