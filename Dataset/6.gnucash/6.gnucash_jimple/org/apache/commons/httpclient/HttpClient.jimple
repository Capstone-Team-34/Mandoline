org.apache.commons.httpclient.HttpClient extends java.lang.Object
private static final org.apache.commons.logging.Log LOG
static java.lang.Class class$org$apache$commons$httpclient$HttpClient
private org.apache.commons.httpclient.HostConfiguration hostConfiguration
private org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager
private org.apache.commons.httpclient.params.HttpClientParams params
private org.apache.commons.httpclient.HttpState state
    static void <clinit>()
    {
        java.security.Provider r0;
        java.lang.Class $r1, $r2;
        org.apache.commons.logging.Log $r3;
        boolean $z0;
        java.lang.StringBuffer $r4;
        java.lang.String $r5;
        java.security.Provider[] $r6;
        int i0, $i1;
        double $d0;
        java.lang.SecurityException $r7;

        $r1 = <org.apache.commons.httpclient.HttpClient: java.lang.Class class$org$apache$commons$httpclient$HttpClient>;

        if $r1 != null goto label17;

        $r1 = staticinvoke <org.apache.commons.httpclient.HttpClient: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpClient");

        $r2 = $r1;

        <org.apache.commons.httpclient.HttpClient: java.lang.Class class$org$apache$commons$httpclient$HttpClient> = $r1;

     label01:
        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG> = $r3;

        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label19;

        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

     label02:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java version: ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label03:
        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

     label04:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java vendor: ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label05:
        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

     label06:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java class path: ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label07:
        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

     label08:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operating system name: ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label09:
        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

     label10:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operating system architecture: ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.arch");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label11:
        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

     label12:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operating system version: ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.version");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>();

     label13:
        i0 = 0;

     label14:
        $i1 = lengthof $r6;

        if i0 >= $i1 goto label19;

        r0 = $r6[i0];

        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuffer;

     label15:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $d0 = virtualinvoke r0.<java.security.Provider: double getVersion()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r5 = virtualinvoke r0.<java.security.Provider: java.lang.String getInfo()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label16:
        i0 = i0 + 1;

        goto label14;

     label17:
        $r2 = <org.apache.commons.httpclient.HttpClient: java.lang.Class class$org$apache$commons$httpclient$HttpClient>;

        goto label01;

     label18:
        $r7 := @caughtexception;

     label19:
        return;

        catch java.lang.SecurityException from label02 to label03 with label18;
        catch java.lang.SecurityException from label04 to label05 with label18;
        catch java.lang.SecurityException from label06 to label07 with label18;
        catch java.lang.SecurityException from label08 to label09 with label18;
        catch java.lang.SecurityException from label10 to label11 with label18;
        catch java.lang.SecurityException from label12 to label13 with label18;
        catch java.lang.SecurityException from label15 to label16 with label18;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = new org.apache.commons.httpclient.params.HttpClientParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void <init>()>();

        specialinvoke r0.<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>($r1);

        return;
    }
    public void <init>(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        org.apache.commons.httpclient.params.HttpClientParams $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $r2 = new org.apache.commons.httpclient.params.HttpClientParams;

        specialinvoke $r2.<org.apache.commons.httpclient.params.HttpClientParams: void <init>()>();

        specialinvoke r0.<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpConnectionManager)>($r2, $r1);

        return;
    }
    public void <init>(org.apache.commons.httpclient.params.HttpClientParams)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        java.lang.Exception r2;
        org.apache.commons.httpclient.HttpState $r3;
        org.apache.commons.httpclient.HostConfiguration $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        org.apache.commons.httpclient.HttpConnectionManager $r8;
        org.apache.commons.httpclient.SimpleHttpConnectionManager $r9;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r10;
        org.apache.commons.logging.Log $r11;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpClientParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.commons.httpclient.HttpState;

        specialinvoke $r3.<org.apache.commons.httpclient.HttpState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state> = $r3;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = null;

        $r4 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke $r4.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r4;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Params may not be null");

        throw $r5;

     label1:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = $r1;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = null;

        $r6 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: java.lang.Class getConnectionManagerClass()>();

        if $r6 == null goto label3;

     label2:
        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        $r8 = (org.apache.commons.httpclient.HttpConnectionManager) $r7;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = $r8;

     label3:
        $r8 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r8 != null goto label4;

        $r9 = new org.apache.commons.httpclient.SimpleHttpConnectionManager;

        specialinvoke $r9.<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = $r9;

     label4:
        $r8 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r8 == null goto label6;

        $r8 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r10 = interfaceinvoke $r8.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r1);

        return;

     label5:
        r2 := @caughtexception;

        $r11 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Error instantiating connection manager class, defaulting to SimpleHttpConnectionManager", r2);

        goto label3;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }
    public void <init>(org.apache.commons.httpclient.params.HttpClientParams, org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        org.apache.commons.httpclient.HttpConnectionManager $r2;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r3;
        org.apache.commons.httpclient.HttpState $r4;
        org.apache.commons.httpclient.HostConfiguration $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpClientParams;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new org.apache.commons.httpclient.HttpState;

        specialinvoke $r4.<org.apache.commons.httpclient.HttpState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state> = $r4;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = null;

        $r5 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke $r5.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r5;

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("httpConnectionManager cannot be null");

        throw $r6;

     label1:
        if $r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Params may not be null");

        throw $r6;

     label2:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = $r1;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = $r2;

        $r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r1);

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    public int executeMethod(org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.HttpMethod $r2;
        int $i0;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r3 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpClient.executeMethod(HostConfiguration,HttpMethod)");

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>($r1, $r2, null);

        return $i0;
    }
    public int executeMethod(org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpState) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.HttpMethodDirector r2;
        org.apache.commons.httpclient.HostConfiguration r3, $r7;
        org.apache.commons.httpclient.HttpState $r4;
        org.apache.commons.logging.Log $r5;
        java.lang.IllegalArgumentException $r6;
        org.apache.commons.httpclient.URI $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.commons.httpclient.HttpConnectionManager $r10;
        org.apache.commons.httpclient.params.HttpClientParams $r11;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r3 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r1 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r4 := @parameter2: org.apache.commons.httpclient.HttpState;

        $r5 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)");

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HttpMethod parameter may not be null");

        throw $r6;

     label1:
        $r7 = virtualinvoke r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration getHostConfiguration()>();

        if r3 != null goto label2;

        r3 = $r7;

     label2:
        $r8 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.URI getURI()>();

        if r3 == $r7 goto label3;

        $z0 = virtualinvoke $r8.<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>();

        if $z0 == 0 goto label4;

     label3:
        $r9 = virtualinvoke r3.<org.apache.commons.httpclient.HostConfiguration: java.lang.Object clone()>();

        r3 = (org.apache.commons.httpclient.HostConfiguration) $r9;

        $z0 = virtualinvoke $r8.<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>();

        if $z0 == 0 goto label4;

        virtualinvoke r3.<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>($r8);

     label4:
        r2 = new org.apache.commons.httpclient.HttpMethodDirector;

        $r10 = virtualinvoke r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        $r11 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        if $r4 != null goto label5;

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState getState()>();

     label5:
        specialinvoke r2.<org.apache.commons.httpclient.HttpMethodDirector: void <init>(org.apache.commons.httpclient.HttpConnectionManager,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpState)>($r10, r3, $r11, $r4);

        virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>($r1);

        $i0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        return $i0;
    }
    public int executeMethod(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        int $i0;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r2 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpClient.executeMethod(HttpMethod)");

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>(null, $r1, null);

        return $i0;
    }
    public java.lang.String getHost()
    {
        org.apache.commons.httpclient.HttpClient r0;
        java.lang.String $r1;
        org.apache.commons.httpclient.HostConfiguration $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r1 = virtualinvoke $r2.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        return $r1;
    }
    public org.apache.commons.httpclient.HostConfiguration getHostConfiguration()
    {
        org.apache.commons.httpclient.HttpClient r0;
        java.lang.Throwable $r1;
        org.apache.commons.httpclient.HostConfiguration r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()
    {
        org.apache.commons.httpclient.HttpClient r0;
        java.lang.Throwable $r1;
        org.apache.commons.httpclient.HttpConnectionManager r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public org.apache.commons.httpclient.params.HttpClientParams getParams()
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpClientParams r1;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        return r1;
    }
    public int getPort()
    {
        org.apache.commons.httpclient.HttpClient r0;
        int $i0;
        org.apache.commons.httpclient.HostConfiguration $r1;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        return $i0;
    }
    public org.apache.commons.httpclient.HttpState getState()
    {
        org.apache.commons.httpclient.HttpClient r0;
        java.lang.Throwable $r1;
        org.apache.commons.httpclient.HttpState r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean isStrictMode()
    {
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        entermonitor r0;

        exitmonitor r0;

        return 0;
    }
    public void setConnectionTimeout(int)
    {
        org.apache.commons.httpclient.HttpClient r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        org.apache.commons.httpclient.HttpConnectionManager $r2;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setConnectionTimeout(int)>($i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setHostConfiguration(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setHttpConnectionFactoryTimeout(long)
    {
        org.apache.commons.httpclient.HttpClient r0;
        long $l0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void setConnectionManagerTimeout(long)>($l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        org.apache.commons.httpclient.params.HttpClientParams $r2;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = $r1;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r1 == null goto label2;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r3 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        $r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setParams(org.apache.commons.httpclient.params.HttpClientParams)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpClientParams;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = $r1;

        return;
    }
    public void setState(org.apache.commons.httpclient.HttpState)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpState $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setStrictMode(boolean)
    {
        org.apache.commons.httpclient.HttpClient r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $z0 := @parameter0: boolean;

        entermonitor r0;

        if $z0 == 0 goto label3;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void makeStrict()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void makeLenient()>();

     label4:
        goto label2;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public void setTimeout(int)
    {
        org.apache.commons.httpclient.HttpClient r0;
        int $i0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void setSoTimeout(int)>($i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
