org.apache.commons.httpclient.HttpMethodDirector extends java.lang.Object
private static final org.apache.commons.logging.Log LOG
public static final java.lang.String PROXY_AUTH_CHALLENGE
public static final java.lang.String PROXY_AUTH_RESP
public static final java.lang.String WWW_AUTH_CHALLENGE
public static final java.lang.String WWW_AUTH_RESP
static java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector
private org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor
private org.apache.commons.httpclient.HttpConnection conn
private org.apache.commons.httpclient.ConnectMethod connectMethod
private org.apache.commons.httpclient.HttpConnectionManager connectionManager
private org.apache.commons.httpclient.HostConfiguration hostConfiguration
private org.apache.commons.httpclient.params.HttpClientParams params
private java.util.Set redirectLocations
private boolean releaseConnection
private org.apache.commons.httpclient.HttpState state
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpMethodDirector");

        $r1 = $r0;

        <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector>;

        goto label1;
    }
    public void <init>(org.apache.commons.httpclient.HttpConnectionManager, org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.params.HttpClientParams, org.apache.commons.httpclient.HttpState)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        org.apache.commons.httpclient.HostConfiguration $r2;
        org.apache.commons.httpclient.params.HttpClientParams $r3;
        org.apache.commons.httpclient.HttpState $r4;
        org.apache.commons.httpclient.auth.AuthChallengeProcessor $r5;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $r2 := @parameter1: org.apache.commons.httpclient.HostConfiguration;

        $r3 := @parameter2: org.apache.commons.httpclient.params.HttpClientParams;

        $r4 := @parameter3: org.apache.commons.httpclient.HttpState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor> = null;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations> = null;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnectionManager connectionManager> = $r1;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r2;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params> = $r3;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state> = $r4;

        $r5 = new org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <init>(org.apache.commons.httpclient.params.HttpParams)>($r3);

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor> = $r5;

        return;
    }
    private void applyConnectionParams(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        int i0;
        org.apache.commons.httpclient.params.HttpMethodParams $r2;
        java.lang.Object $r3, r4;
        org.apache.commons.httpclient.HttpConnection $r5;
        org.apache.commons.httpclient.params.HttpConnectionParams $r6;
        java.lang.Integer r7;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        i0 = 0;

        $r2 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.socket.timeout");

        r4 = $r3;

        if $r3 != null goto label1;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        r4 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpConnectionParams: java.lang.Object getParameter(java.lang.String)>("http.socket.timeout");

     label1:
        if r4 == null goto label2;

        r7 = (java.lang.Integer) r4;

        i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

     label2:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>(i0);

        return;
    }
    private void authenticate(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.auth.AuthenticationException r2;
        org.apache.commons.httpclient.HttpConnection $r3;
        boolean $z0;
        org.apache.commons.logging.Log $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label1:
        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

     label2:
        if $z0 == 0 goto label6;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label3:
        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

     label4:
        if $z0 != 0 goto label6;

     label5:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>($r1);

     label6:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>($r1);

     label7:
        return;

     label8:
        r2 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r5 = virtualinvoke r2.<org.apache.commons.httpclient.auth.AuthenticationException: java.lang.String getMessage()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r5, r2);

        return;

        catch org.apache.commons.httpclient.auth.AuthenticationException from label1 to label2 with label8;
        catch org.apache.commons.httpclient.auth.AuthenticationException from label3 to label4 with label8;
        catch org.apache.commons.httpclient.auth.AuthenticationException from label5 to label7 with label8;
    }
    private void authenticateHost(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.auth.AuthScope r2;
        boolean $z0;
        org.apache.commons.httpclient.auth.AuthState $r3;
        org.apache.commons.httpclient.auth.AuthScheme $r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        java.lang.String $r6, r7, $r9;
        org.apache.commons.httpclient.HttpConnection $r8;
        int $i0;
        org.apache.commons.logging.Log $r10;
        java.lang.StringBuffer $r11;
        org.apache.commons.httpclient.HttpState $r12;
        org.apache.commons.httpclient.Credentials $r13;
        org.apache.commons.httpclient.Header $r14;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>($r1, "Authorization");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        if $r4 == null goto label6;

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z0 != 0 goto label2;

        $z0 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: boolean isConnectionBased()>();

        if $z0 != 0 goto label6;

     label2:
        $r5 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r7 = $r6;

        if $r6 != null goto label3;

        $r8 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        r7 = virtualinvoke $r8.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label3:
        $r8 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r8.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        r2 = new org.apache.commons.httpclient.auth.AuthScope;

        $r6 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r9 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke r2.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>(r7, $i0, $r6, $r9);

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authenticating with ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        r7 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(r7);

     label4:
        $r12 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r13 = virtualinvoke $r12.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>(r2);

        if $r13 == null goto label5;

        r7 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String authenticate(org.apache.commons.httpclient.Credentials,org.apache.commons.httpclient.HttpMethod)>($r13, $r1);

        if r7 == null goto label6;

        $r14 = new org.apache.commons.httpclient.Header;

        specialinvoke $r14.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Authorization", r7, 1);

        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r14);

        return;

     label5:
        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label6;

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Required credentials not available for ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        r7 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object)>(r7);

        $r3 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>();

        if $z0 == 0 goto label6;

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Preemptive authentication requested but no default credentials available");

     label6:
        return;
    }
    private void authenticateProxy(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.auth.AuthScope r2;
        boolean $z0;
        org.apache.commons.httpclient.auth.AuthState $r3;
        org.apache.commons.httpclient.auth.AuthScheme $r4;
        org.apache.commons.httpclient.HttpConnection $r5;
        java.lang.String $r6, $r7, $r8;
        int $i0;
        org.apache.commons.logging.Log $r9;
        java.lang.StringBuffer $r10;
        org.apache.commons.httpclient.HttpState $r11;
        org.apache.commons.httpclient.Credentials $r12;
        org.apache.commons.httpclient.Header $r13;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>($r1, "Proxy-Authorization");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        if $r4 == null goto label5;

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z0 != 0 goto label2;

        $z0 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: boolean isConnectionBased()>();

        if $z0 != 0 goto label5;

     label2:
        r2 = new org.apache.commons.httpclient.auth.AuthScope;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>();

        $r7 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r8 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke r2.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r6, $i0, $r7, $r8);

        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authenticating with ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

     label3:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r12 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>(r2);

        if $r12 == null goto label4;

        $r6 = interfaceinvoke $r4.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String authenticate(org.apache.commons.httpclient.Credentials,org.apache.commons.httpclient.HttpMethod)>($r12, $r1);

        if $r6 == null goto label5;

        $r13 = new org.apache.commons.httpclient.Header;

        specialinvoke $r13.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Proxy-Authorization", $r6, 1);

        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r13);

        return;

     label4:
        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label5;

        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Required proxy credentials not available for ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r6);

        $r3 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>();

        if $z0 == 0 goto label5;

        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Preemptive authentication requested but no default proxy credentials available");

     label5:
        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    private boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod, java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        java.lang.String $r2;
        org.apache.commons.httpclient.Header r3;
        org.apache.commons.httpclient.Header[] $r4;
        boolean z0, $z1;
        int i0, $i1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r2 := @parameter1: java.lang.String;

        $r4 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getRequestHeaders(java.lang.String)>($r2);

        z0 = 1;

        i0 = 0;

     label1:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label4;

        r3 = $r4[i0];

        $z1 = virtualinvoke r3.<org.apache.commons.httpclient.Header: boolean isAutogenerated()>();

        if $z1 == 0 goto label3;

        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: void removeRequestHeader(org.apache.commons.httpclient.Header)>(r3);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        z0 = 0;

        goto label2;

     label4:
        return z0;
    }
    private boolean executeConnect() throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.auth.AuthenticationException r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.ConnectMethod $r3;
        org.apache.commons.httpclient.HostConfiguration $r4;
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.params.HostParams $r6;
        boolean $z0, $z1;
        org.apache.commons.httpclient.params.HttpClientParams $r7;
        org.apache.commons.httpclient.HttpState $r8;
        org.apache.commons.logging.Log $r9;
        org.apache.commons.httpclient.auth.AuthState $r10;
        int $i0;
        java.lang.String $r11;
        java.io.InputStream $r12;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r3 = new org.apache.commons.httpclient.ConnectMethod;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        specialinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: void <init>(org.apache.commons.httpclient.HostConfiguration)>($r4);

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod> = $r3;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r5 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r6);

     label01:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z0 != 0 goto label02;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void open()>();

     label02:
        $r7 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $z0 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()>();

        if $z0 != 0 goto label03;

        $r8 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $z0 = virtualinvoke $r8.<org.apache.commons.httpclient.HttpState: boolean isAuthenticationPreemptive()>();

        if $z0 == 0 goto label04;

     label03:
        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Preemptively sending default basic credentials");

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r10 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r10.<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>();

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r10 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r10.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

     label04:
        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

     label05:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>($r3);

     label06:
        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>($r3);

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r8 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r8, $r2);

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $i0 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: int getStatusCode()>();

        $z0 = 0;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r10 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        if $i0 != 407 goto label10;

        $z1 = 1;

     label07:
        virtualinvoke $r10.<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>($z1);

        $z1 = virtualinvoke $r10.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z1 == 0 goto label08;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $z1 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>($r3);

        if $z1 == 0 goto label08;

        $z0 = 1;

     label08:
        if $z0 != 0 goto label11;

        if $i0 < 200 goto label12;

        if $i0 >= 300 goto label12;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>();

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod> = null;

        return 1;

     label09:
        r1 := @caughtexception;

        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r11 = virtualinvoke r1.<org.apache.commons.httpclient.auth.AuthenticationException: java.lang.String getMessage()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r11, r1);

        goto label06;

     label10:
        $z1 = 0;

        goto label07;

     label11:
        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r12 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: java.io.InputStream getResponseBodyAsStream()>();

        if $r12 == null goto label01;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r12 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: java.io.InputStream getResponseBodyAsStream()>();

        virtualinvoke $r12.<java.io.InputStream: void close()>();

        goto label01;

     label12:
        $r2 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void close()>();

        return 0;

        catch org.apache.commons.httpclient.auth.AuthenticationException from label05 to label06 with label09;
    }
    private void executeWithRetry(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        int i0;
        org.apache.commons.logging.Log $r2;
        boolean $z0;
        java.lang.StringBuffer $r3, $r19;
        java.lang.String $r4;
        org.apache.commons.httpclient.HttpConnection $r5;
        org.apache.commons.httpclient.params.HttpConnectionParams $r6;
        org.apache.commons.httpclient.HttpState $r7;
        org.apache.commons.httpclient.HttpException r8;
        java.io.IOException r9, r10;
        org.apache.commons.httpclient.HttpMethodBase $r11;
        org.apache.commons.httpclient.MethodRetryHandler $r12;
        java.lang.RuntimeException r14;
        org.apache.commons.httpclient.params.HttpMethodParams $r15;
        java.lang.Object $r16;
        org.apache.commons.httpclient.HttpMethodRetryHandler r17;
        java.lang.Class $r18;
        org.apache.commons.httpclient.HttpRecoverableException $r20;
        org.apache.commons.httpclient.DefaultHttpMethodRetryHandler $r21;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        i0 = 0;

     label01:
        i0 = i0 + 1;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label02:
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

     label03:
        if $z0 == 0 goto label05;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r19 = new java.lang.StringBuffer;

     label04:
        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempt number ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to process request");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r4);

     label05:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label06:
        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $z0 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpConnectionParams: boolean isStaleCheckingEnabled()>();

     label07:
        if $z0 == 0 goto label10;

     label08:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label09:
        virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: boolean closeIfStale()>();

     label10:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label11:
        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

     label12:
        if $z0 != 0 goto label23;

     label13:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label14:
        virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: void open()>();

     label15:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label16:
        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

     label17:
        if $z0 == 0 goto label23;

     label18:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label19:
        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

     label20:
        if $z0 == 0 goto label23;

        $z0 = $r1 instanceof org.apache.commons.httpclient.ConnectMethod;

        if $z0 != 0 goto label23;

     label21:
        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>();

     label22:
        if $z0 != 0 goto label23;

        return;

     label23:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>($r1);

     label24:
        $r7 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label25:
        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r7, $r5);

     label26:
        return;

     label27:
        r8 := @caughtexception;

     label28:
        throw r8;

     label29:
        r9 := @caughtexception;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z0 == 0 goto label30;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing the connection.");

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label30:
        r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 1;

        throw r9;

     label31:
        r10 := @caughtexception;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label32:
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing the connection.");

     label33:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label34:
        virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label35:
        $z0 = $r1 instanceof org.apache.commons.httpclient.HttpMethodBase;

        if $z0 == 0 goto label46;

     label36:
        $r11 = (org.apache.commons.httpclient.HttpMethodBase) $r1;

     label37:
        $r12 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.MethodRetryHandler getMethodRetryHandler()>();

     label38:
        if $r12 == null goto label46;

     label39:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label40:
        $r20 = new org.apache.commons.httpclient.HttpRecoverableException;

     label41:
        $r4 = virtualinvoke r10.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r20.<org.apache.commons.httpclient.HttpRecoverableException: void <init>(java.lang.String)>($r4);

        $z0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: boolean isRequestSent()>();

        $z0 = interfaceinvoke $r12.<org.apache.commons.httpclient.MethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpRecoverableException,int,boolean)>($r1, $r5, $r20, i0, $z0);

     label42:
        if $z0 != 0 goto label46;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label43:
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Method retry handler returned false. Automatic recovery will not be attempted");

        throw r10;

     label44:
        r14 := @caughtexception;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z0 == 0 goto label45;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing the connection.");

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label45:
        r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 1;

        throw r14;

     label46:
        $r15 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r16 = virtualinvoke $r15.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.method.retry-handler");

     label47:
        r17 = (org.apache.commons.httpclient.HttpMethodRetryHandler) $r16;

     label48:
        if r17 != null goto label50;

        $r21 = new org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;

        r17 = $r21;

     label49:
        specialinvoke $r21.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>()>();

     label50:
        $z0 = interfaceinvoke r17.<org.apache.commons.httpclient.HttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>($r1, r10, i0);

     label51:
        if $z0 != 0 goto label53;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label52:
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Method retry handler returned false. Automatic recovery will not be attempted");

        throw r10;

     label53:
        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label54:
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

     label55:
        if $z0 == 0 goto label57;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r19 = new java.lang.StringBuffer;

     label56:
        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("I/O exception (");

        $r18 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") caught when processing request: ");

        $r4 = virtualinvoke r10.<java.io.IOException: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r4);

     label57:
        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label58:
        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

     label59:
        if $z0 == 0 goto label61;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label60:
        $r4 = virtualinvoke r10.<java.io.IOException: java.lang.String getMessage()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r4, r10);

     label61:
        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label62:
        interfaceinvoke $r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Retrying request");

     label63:
        goto label01;

        catch org.apache.commons.httpclient.HttpException from label02 to label03 with label27;
        catch org.apache.commons.httpclient.HttpException from label04 to label05 with label27;
        catch org.apache.commons.httpclient.HttpException from label06 to label07 with label27;
        catch org.apache.commons.httpclient.HttpException from label09 to label10 with label27;
        catch org.apache.commons.httpclient.HttpException from label11 to label12 with label27;
        catch org.apache.commons.httpclient.HttpException from label14 to label15 with label27;
        catch org.apache.commons.httpclient.HttpException from label16 to label17 with label27;
        catch org.apache.commons.httpclient.HttpException from label19 to label20 with label27;
        catch org.apache.commons.httpclient.HttpException from label21 to label22 with label27;
        catch org.apache.commons.httpclient.HttpException from label23 to label24 with label27;
        catch org.apache.commons.httpclient.HttpException from label25 to label26 with label27;
        catch java.io.IOException from label02 to label03 with label31;
        catch java.io.IOException from label04 to label05 with label31;
        catch java.io.IOException from label06 to label07 with label31;
        catch java.io.IOException from label09 to label10 with label31;
        catch java.io.IOException from label11 to label12 with label31;
        catch java.io.IOException from label14 to label15 with label31;
        catch java.io.IOException from label16 to label17 with label31;
        catch java.io.IOException from label19 to label20 with label31;
        catch java.io.IOException from label21 to label22 with label31;
        catch java.io.IOException from label23 to label24 with label31;
        catch java.io.IOException from label25 to label26 with label31;
        catch java.lang.RuntimeException from label02 to label03 with label44;
        catch java.lang.RuntimeException from label04 to label07 with label44;
        catch java.lang.RuntimeException from label08 to label12 with label44;
        catch java.lang.RuntimeException from label13 to label17 with label44;
        catch java.lang.RuntimeException from label18 to label20 with label44;
        catch java.lang.RuntimeException from label21 to label22 with label44;
        catch java.lang.RuntimeException from label23 to label26 with label44;
        catch java.io.IOException from label28 to label29 with label29;
        catch java.lang.RuntimeException from label28 to label29 with label44;
        catch java.io.IOException from label32 to label33 with label29;
        catch java.io.IOException from label34 to label35 with label29;
        catch java.io.IOException from label37 to label38 with label29;
        catch java.io.IOException from label41 to label42 with label29;
        catch java.io.IOException from label43 to label44 with label29;
        catch java.lang.RuntimeException from label32 to label35 with label44;
        catch java.lang.RuntimeException from label36 to label38 with label44;
        catch java.lang.RuntimeException from label39 to label40 with label44;
        catch java.lang.RuntimeException from label41 to label42 with label44;
        catch java.lang.RuntimeException from label43 to label44 with label44;
        catch java.io.IOException from label46 to label47 with label29;
        catch java.io.IOException from label49 to label51 with label29;
        catch java.io.IOException from label52 to label53 with label29;
        catch java.io.IOException from label54 to label55 with label29;
        catch java.io.IOException from label56 to label57 with label29;
        catch java.io.IOException from label58 to label59 with label29;
        catch java.io.IOException from label60 to label61 with label29;
        catch java.io.IOException from label62 to label63 with label29;
        catch java.lang.RuntimeException from label46 to label48 with label44;
        catch java.lang.RuntimeException from label49 to label51 with label44;
        catch java.lang.RuntimeException from label52 to label53 with label44;
        catch java.lang.RuntimeException from label54 to label55 with label44;
        catch java.lang.RuntimeException from label56 to label57 with label44;
        catch java.lang.RuntimeException from label58 to label59 with label44;
        catch java.lang.RuntimeException from label60 to label61 with label44;
        catch java.lang.RuntimeException from label62 to label63 with label44;
    }
    private void fakeResponse(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.logging.Log $r2;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase $r3;
        org.apache.commons.httpclient.ConnectMethod $r4;
        org.apache.commons.httpclient.StatusLine $r5;
        org.apache.commons.httpclient.HeaderGroup $r6;
        java.io.InputStream $r7;
        org.apache.commons.httpclient.auth.AuthState $r8, $r9;
        org.apache.commons.httpclient.auth.AuthScheme $r10;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("CONNECT failed, fake the response for the original method");

        $z0 = $r1 instanceof org.apache.commons.httpclient.HttpMethodBase;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.httpclient.HttpMethodBase) $r1;

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r7 = virtualinvoke $r4.<org.apache.commons.httpclient.ConnectMethod: java.io.InputStream getResponseBodyAsStream()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.HttpMethodBase: void fakeResponse(org.apache.commons.httpclient.StatusLine,org.apache.commons.httpclient.HeaderGroup,java.io.InputStream)>($r5, $r6, $r7);

        $r8 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r4 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r9 = virtualinvoke $r4.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r10 = virtualinvoke $r9.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        virtualinvoke $r8.<org.apache.commons.httpclient.auth.AuthState: void setAuthScheme(org.apache.commons.httpclient.auth.AuthScheme)>($r10);

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod> = null;

        return;

     label1:
        r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 1;

        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unable to fake response on method as it is not derived from HttpMethodBase.");

        return;
    }
    private boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.auth.AuthState $r2;
        int $i0;
        boolean $z0;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r2 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $i0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        if $i0 != 401 goto label4;

        $z0 = 1;

     label1:
        virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>($z0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $i0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        if $i0 != 407 goto label5;

        $z0 = 1;

     label2:
        virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>($z0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z0 != 0 goto label3;

        $r2 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z0 == 0 goto label7;

     label3:
        $r3 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authorization required");

        $z0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: boolean getDoAuthentication()>();

        if $z0 == 0 goto label6;

        return 1;

     label4:
        $z0 = 0;

        goto label1;

     label5:
        $z0 = 0;

        goto label2;

     label6:
        $r3 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Authentication requested but doAuthentication is disabled");

     label7:
        return 0;
    }
    private boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        int $i0;
        org.apache.commons.logging.Log $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $i0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        lookupswitch($i0)
        {
            case 301: goto label2;
            case 302: goto label2;
            case 303: goto label2;
            case 304: goto label1;
            case 305: goto label1;
            case 306: goto label1;
            case 307: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Redirect required");

        $z0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: boolean getFollowRedirects()>();

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    private boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        java.lang.Exception r2;
        org.apache.commons.logging.Log $r3;
        int $i0;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r3 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.processAuthenticationResponse(HttpState, HttpConnection)");

     label1:
        $i0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

     label2:
        lookupswitch($i0)
        {
            case 401: goto label4;
            case 407: goto label6;
            default: goto label3;
        };

     label3:
        return 0;

     label4:
        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>($r1);

     label5:
        return $z0;

     label6:
        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>($r1);

     label7:
        return $z0;

     label8:
        r2 := @caughtexception;

        $r3 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isErrorEnabled()>();

        if $z0 == 0 goto label9;

        $r3 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r4 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r4, r2);

     label9:
        return 0;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }
    private boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.MalformedChallengeException, org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.auth.AuthScope r2;
        org.apache.commons.httpclient.auth.AuthChallengeException r3;
        org.apache.commons.httpclient.auth.AuthState $r4;
        org.apache.commons.httpclient.Header[] $r5;
        java.util.Map $r6;
        boolean $z0;
        org.apache.commons.logging.Log $r7;
        org.apache.commons.httpclient.auth.AuthScheme r8, $r10;
        org.apache.commons.httpclient.auth.AuthChallengeProcessor $r9;
        org.apache.commons.httpclient.HttpConnection $r11;
        java.lang.String $r12, $r13, $r14;
        int $i0;
        java.lang.StringBuffer $r15;
        org.apache.commons.httpclient.params.HttpMethodParams $r16;
        org.apache.commons.httpclient.Credentials $r17, r19;
        org.apache.commons.httpclient.HttpState $r18;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r4 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r5 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>("Proxy-Authenticate");

        $r6 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>($r5);

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy authentication challenge(s) not found");

        return 0;

     label01:
        r8 = null;

        $r9 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor>;

     label02:
        $r10 = virtualinvoke $r9.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>($r4, $r6);

     label03:
        r8 = $r10;

     label04:
        if r8 == null goto label11;

        r2 = new org.apache.commons.httpclient.auth.AuthScope;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r12 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>();

        $r13 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r14 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke r2.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r12, $i0, $r13, $r14);

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label05;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Proxy authentication scope: ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label05:
        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthAttempted()>();

        if $z0 == 0 goto label08;

        $z0 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.AuthScheme: boolean isComplete()>();

        if $z0 == 0 goto label08;

        $r16 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r17 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r8, $r16, r2);

        if $r17 != null goto label07;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label11;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failure authenticating with ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r12);

        return 0;

     label06:
        r3 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label04;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r12 = virtualinvoke r3.<org.apache.commons.httpclient.auth.AuthChallengeException: java.lang.String getMessage()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r12);

        goto label04;

     label07:
        return 1;

     label08:
        virtualinvoke $r4.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

        $r18 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r17 = virtualinvoke $r18.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>(r2);

        r19 = $r17;

        if $r17 != null goto label09;

        $r16 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r19 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r8, $r16, r2);

     label09:
        if r19 != null goto label10;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label11;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No credentials available for ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r12);

        return 0;

     label10:
        return 1;

     label11:
        return 0;

        catch org.apache.commons.httpclient.auth.AuthChallengeException from label02 to label03 with label06;
    }
    private boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.RedirectException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.URIException r2, r21;
        org.apache.commons.httpclient.URI r3, r9, r16;
        org.apache.commons.httpclient.Header $r4;
        org.apache.commons.logging.Log $r5;
        java.lang.StringBuffer $r6;
        int $i0;
        java.lang.String $r7, $r8, $r12, $r13;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r10;
        org.apache.commons.httpclient.protocol.Protocol $r11;
        org.apache.commons.httpclient.params.HttpMethodParams $r14;
        org.apache.commons.httpclient.params.HttpClientParams $r15;
        org.apache.commons.httpclient.HostConfiguration $r17;
        java.util.Set $r18;
        java.util.HashSet $r19;
        org.apache.commons.httpclient.CircularRedirectException $r20;
        org.apache.commons.httpclient.InvalidRedirectLocationException $r22;
        org.apache.commons.httpclient.auth.AuthState $r23;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r4 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("location");

        if $r4 != null goto label01;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Received redirect response ");

        $i0 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" but no location header");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r7);

        return 0;

     label01:
        $r7 = virtualinvoke $r4.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label02;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redirect requested to location \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r8);

     label02:
        r9 = new org.apache.commons.httpclient.URI;

        $r10 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label03:
        $r11 = virtualinvoke $r10.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $r8 = virtualinvoke $r11.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>();

     label04:
        $r10 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label05:
        $r12 = virtualinvoke $r10.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label06:
        $r10 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label07:
        $i0 = virtualinvoke $r10.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r13 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: java.lang.String getPath()>();

        specialinvoke r9.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>($r8, null, $r12, $i0, $r13);

     label08:
        $r14 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r8 = virtualinvoke $r14.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>();

     label09:
        r3 = new org.apache.commons.httpclient.URI;

     label10:
        specialinvoke r3.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>($r7, 1, $r8);

     label11:
        $z0 = virtualinvoke r3.<org.apache.commons.httpclient.URI: boolean isRelativeURI()>();

     label12:
        if $z0 == 0 goto label30;

        $r15 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

     label13:
        $z0 = virtualinvoke $r15.<org.apache.commons.httpclient.params.HttpClientParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-relative-redirect");

     label14:
        if $z0 == 0 goto label17;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

     label15:
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Relative redirect location \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' not allowed");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r8);

     label16:
        return 0;

     label17:
        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

     label18:
        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Redirect URI is not absolute - parsing as relative");

     label19:
        r16 = new org.apache.commons.httpclient.URI;

     label20:
        specialinvoke r16.<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>(r9, r3);

     label21:
        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: void setURI(org.apache.commons.httpclient.URI)>(r16);

     label22:
        $r17 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

     label23:
        virtualinvoke $r17.<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>(r16);

     label24:
        $r15 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $z0 = virtualinvoke $r15.<org.apache.commons.httpclient.params.HttpClientParams: boolean isParameterFalse(java.lang.String)>("http.protocol.allow-circular-redirects");

        if $z0 == 0 goto label37;

        $r18 = r0.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations>;

        if $r18 != null goto label25;

        $r19 = new java.util.HashSet;

        specialinvoke $r19.<java.util.HashSet: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations> = $r19;

     label25:
        $r18 = r0.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r9);

     label26:
        $z0 = virtualinvoke r16.<org.apache.commons.httpclient.URI: boolean hasQuery()>();

     label27:
        if $z0 == 0 goto label29;

     label28:
        virtualinvoke r16.<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>(null);

     label29:
        $r18 = r0.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations>;

        $z0 = interfaceinvoke $r18.<java.util.Set: boolean contains(java.lang.Object)>(r16);

        if $z0 == 0 goto label37;

        $r20 = new org.apache.commons.httpclient.CircularRedirectException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Circular redirect to \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r16);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.commons.httpclient.CircularRedirectException: void <init>(java.lang.String)>($r7);

        throw $r20;

     label30:
        $r14 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

     label31:
        $r15 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

     label32:
        virtualinvoke $r14.<org.apache.commons.httpclient.params.HttpMethodParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r15);

     label33:
        r16 = r3;

        goto label21;

     label34:
        r21 := @caughtexception;

     label35:
        $r22 = new org.apache.commons.httpclient.InvalidRedirectLocationException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid redirect location: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.commons.httpclient.InvalidRedirectLocationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r7, r21);

        throw $r22;

     label36:
        r2 := @caughtexception;

        return 0;

     label37:
        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label38;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redirecting from \'");

        $r7 = virtualinvoke r9.<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' to \'");

        $r7 = virtualinvoke r16.<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

     label38:
        $r23 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        virtualinvoke $r23.<org.apache.commons.httpclient.auth.AuthState: void invalidate()>();

        return 1;

     label39:
        r21 := @caughtexception;

        goto label35;

     label40:
        r21 := @caughtexception;

        goto label35;

        catch org.apache.commons.httpclient.URIException from label03 to label04 with label34;
        catch org.apache.commons.httpclient.URIException from label05 to label06 with label34;
        catch org.apache.commons.httpclient.URIException from label07 to label08 with label34;
        catch org.apache.commons.httpclient.URIException from label08 to label09 with label39;
        catch org.apache.commons.httpclient.URIException from label10 to label11 with label39;
        catch org.apache.commons.httpclient.URIException from label11 to label12 with label40;
        catch org.apache.commons.httpclient.URIException from label13 to label14 with label40;
        catch org.apache.commons.httpclient.URIException from label15 to label16 with label40;
        catch org.apache.commons.httpclient.URIException from label18 to label19 with label40;
        catch org.apache.commons.httpclient.URIException from label20 to label21 with label40;
        catch org.apache.commons.httpclient.URIException from label21 to label22 with label39;
        catch org.apache.commons.httpclient.URIException from label23 to label24 with label39;
        catch org.apache.commons.httpclient.URIException from label26 to label27 with label36;
        catch org.apache.commons.httpclient.URIException from label28 to label29 with label36;
        catch org.apache.commons.httpclient.URIException from label30 to label31 with label40;
        catch org.apache.commons.httpclient.URIException from label32 to label33 with label40;
    }
    private boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.MalformedChallengeException, org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        org.apache.commons.httpclient.auth.AuthScope r2;
        org.apache.commons.httpclient.auth.AuthChallengeException r3;
        org.apache.commons.httpclient.auth.AuthState $r4;
        org.apache.commons.httpclient.Header[] $r5;
        java.util.Map $r6;
        boolean $z0;
        org.apache.commons.logging.Log $r7;
        org.apache.commons.httpclient.auth.AuthScheme r8, $r10;
        org.apache.commons.httpclient.auth.AuthChallengeProcessor $r9;
        org.apache.commons.httpclient.params.HttpMethodParams $r11;
        java.lang.String $r12, r13, $r15;
        org.apache.commons.httpclient.HttpConnection $r14;
        int $i0;
        java.lang.StringBuffer $r16;
        org.apache.commons.httpclient.Credentials $r17, r19;
        org.apache.commons.httpclient.HttpState $r18;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r4 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $r5 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>("WWW-Authenticate");

        $r6 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>($r5);

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authentication challenge(s) not found");

        return 0;

     label01:
        r8 = null;

        $r9 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor>;

     label02:
        $r10 = virtualinvoke $r9.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>($r4, $r6);

     label03:
        r8 = $r10;

     label04:
        if r8 == null goto label12;

        $r11 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r13 = $r12;

        if $r12 != null goto label05;

        $r14 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        r13 = virtualinvoke $r14.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label05:
        $r14 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r14.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        r2 = new org.apache.commons.httpclient.auth.AuthScope;

        $r12 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r15 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke r2.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>(r13, $i0, $r12, $r15);

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label06;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authentication scope: ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        r13 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>(r13);

     label06:
        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthAttempted()>();

        if $z0 == 0 goto label09;

        $z0 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.AuthScheme: boolean isComplete()>();

        if $z0 == 0 goto label09;

        $r11 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r17 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r8, $r11, r2);

        if $r17 != null goto label08;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label12;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failure authenticating with ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        r13 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>(r13);

        return 0;

     label07:
        r3 := @caughtexception;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label04;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        r13 = virtualinvoke r3.<org.apache.commons.httpclient.auth.AuthChallengeException: java.lang.String getMessage()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void warn(java.lang.Object)>(r13);

        goto label04;

     label08:
        return 1;

     label09:
        virtualinvoke $r4.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

        $r18 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r17 = virtualinvoke $r18.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>(r2);

        r19 = $r17;

        if $r17 != null goto label10;

        $r11 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r19 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r8, $r11, r2);

     label10:
        if r19 != null goto label11;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label12;

        $r7 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No credentials available for ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        r13 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>(r13);

        return 0;

     label11:
        return 1;

     label12:
        return 0;

        catch org.apache.commons.httpclient.auth.AuthChallengeException from label02 to label03 with label07;
    }
    private org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.params.HttpParams, org.apache.commons.httpclient.auth.AuthScope)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.auth.AuthScheme $r1;
        org.apache.commons.httpclient.params.HttpParams $r2;
        org.apache.commons.httpclient.auth.AuthScope $r3;
        org.apache.commons.httpclient.auth.CredentialsNotAvailableException r4;
        org.apache.commons.logging.Log $r5;
        org.apache.commons.httpclient.Credentials r6, $r10;
        java.lang.Object $r7;
        org.apache.commons.httpclient.auth.CredentialsProvider r8;
        java.lang.String $r9;
        int $i0;
        org.apache.commons.httpclient.HttpState $r11;
        boolean $z0;
        java.lang.StringBuffer $r12;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        $r2 := @parameter1: org.apache.commons.httpclient.params.HttpParams;

        $r3 := @parameter2: org.apache.commons.httpclient.auth.AuthScope;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials required");

        r6 = null;

        $r7 = interfaceinvoke $r2.<org.apache.commons.httpclient.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.authentication.credential-provider");

        r8 = (org.apache.commons.httpclient.auth.CredentialsProvider) $r7;

        if r8 == null goto label5;

     label1:
        $r9 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthScope: java.lang.String getHost()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthScope: int getPort()>();

        $r10 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.CredentialsProvider: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScheme,java.lang.String,int,boolean)>($r1, $r9, $i0, 0);

     label2:
        r6 = $r10;

     label3:
        if r6 == null goto label6;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpState: void setCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>($r3, r6);

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" new credentials given");

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

        return r6;

     label4:
        r4 := @caughtexception;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r9 = virtualinvoke r4.<org.apache.commons.httpclient.auth.CredentialsNotAvailableException: java.lang.String getMessage()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r9);

        goto label3;

     label5:
        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials provider not available");

        return null;

     label6:
        return r6;

        catch org.apache.commons.httpclient.auth.CredentialsNotAvailableException from label1 to label2 with label4;
    }
    private org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.params.HttpParams, org.apache.commons.httpclient.auth.AuthScope)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.auth.AuthScheme $r1;
        org.apache.commons.httpclient.params.HttpParams $r2;
        org.apache.commons.httpclient.auth.AuthScope $r3;
        org.apache.commons.httpclient.auth.CredentialsNotAvailableException r4;
        org.apache.commons.logging.Log $r5;
        org.apache.commons.httpclient.Credentials r6, $r10;
        java.lang.Object $r7;
        org.apache.commons.httpclient.auth.CredentialsProvider r8;
        java.lang.String $r9;
        int $i0;
        org.apache.commons.httpclient.HttpState $r11;
        boolean $z0;
        java.lang.StringBuffer $r12;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        $r2 := @parameter1: org.apache.commons.httpclient.params.HttpParams;

        $r3 := @parameter2: org.apache.commons.httpclient.auth.AuthScope;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy credentials required");

        r6 = null;

        $r7 = interfaceinvoke $r2.<org.apache.commons.httpclient.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.authentication.credential-provider");

        r8 = (org.apache.commons.httpclient.auth.CredentialsProvider) $r7;

        if r8 == null goto label5;

     label1:
        $r9 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthScope: java.lang.String getHost()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthScope: int getPort()>();

        $r10 = interfaceinvoke r8.<org.apache.commons.httpclient.auth.CredentialsProvider: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScheme,java.lang.String,int,boolean)>($r1, $r9, $i0, 1);

     label2:
        r6 = $r10;

     label3:
        if r6 == null goto label6;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpState: void setProxyCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>($r3, r6);

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" new credentials given");

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

        return r6;

     label4:
        r4 := @caughtexception;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r9 = virtualinvoke r4.<org.apache.commons.httpclient.auth.CredentialsNotAvailableException: java.lang.String getMessage()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r9);

        goto label3;

     label5:
        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy credentials provider not available");

        return null;

     label6:
        return r6;

        catch org.apache.commons.httpclient.auth.CredentialsNotAvailableException from label1 to label2 with label4;
    }
    public void executeMethod(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpMethod $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.HostConfiguration $r3;
        org.apache.commons.httpclient.params.HostParams $r4;
        org.apache.commons.httpclient.params.HttpClientParams $r5;
        org.apache.commons.httpclient.params.HttpMethodParams $r6;
        java.lang.Object $r7;
        java.util.Collection r8;
        java.util.Iterator $r9;
        boolean $z0, $z1;
        org.apache.commons.httpclient.Header $r10;
        int $i0, i1;
        org.apache.commons.httpclient.HttpConnection $r11;
        org.apache.commons.httpclient.HttpConnectionManager $r12;
        long $l2;
        org.apache.commons.httpclient.HttpState $r13;
        org.apache.commons.logging.Log $r14;
        org.apache.commons.httpclient.auth.AuthState $r15;
        org.apache.commons.httpclient.ConnectMethod $r16;
        java.io.InputStream $r17;
        org.apache.commons.httpclient.RedirectException $r18;
        java.lang.StringBuffer $r19;
        java.lang.String $r20;
        java.lang.Throwable $r21;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        if $r1 != null goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method may not be null");

        throw $r2;

     label01:
        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r4.<org.apache.commons.httpclient.params.HostParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r5);

        $r6 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpMethodParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r4);

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        $r7 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HostParams: java.lang.Object getParameter(java.lang.String)>("http.default-headers");

        r8 = (java.util.Collection) $r7;

        if r8 == null goto label03;

        $r9 = interfaceinvoke r8.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.commons.httpclient.Header) $r7;

        interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r10);

        goto label02;

     label03:
        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $i0 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpClientParams: int getIntParameter(java.lang.String,int)>("http.protocol.max-redirects", 100);

     label04:
        i1 = 0;

     label05:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label06:
        if $r11 == null goto label10;

     label07:
        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>($r11);

     label08:
        if $z0 != 0 goto label10;

     label09:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(0);

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn> = null;

     label10:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

     label11:
        if $r11 != null goto label21;

     label12:
        $r12 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnectionManager connectionManager>;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $l2 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpClientParams: long getConnectionManagerTimeout()>();

        $r11 = interfaceinvoke $r12.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>($r3, $l2);

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn> = $r11;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(1);

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $z0 = virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()>();

     label13:
        if $z0 != 0 goto label16;

     label14:
        $r13 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $z0 = virtualinvoke $r13.<org.apache.commons.httpclient.HttpState: boolean isAuthenticationPreemptive()>();

     label15:
        if $z0 == 0 goto label21;

     label16:
        $r14 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Preemptively sending default basic credentials");

        $r15 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        virtualinvoke $r15.<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>();

        $r15 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        virtualinvoke $r15.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

     label17:
        if $z0 == 0 goto label21;

     label18:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

     label19:
        if $z0 != 0 goto label21;

     label20:
        $r15 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r15.<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>();

        $r15 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r15.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

     label21:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>($r1);

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>($r1);

        $r16 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

     label22:
        if $r16 == null goto label27;

     label23:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>($r1);

     label24:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r11 == null goto label25;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(0);

     label25:
        $z0 = r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection>;

        if $z0 != 0 goto label26;

        $r17 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        if $r17 != null goto label51;

     label26:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r11 == null goto label51;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        return;

     label27:
        $z0 = 0;

     label28:
        $z1 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)>($r1);

     label29:
        if $z1 == 0 goto label40;

     label30:
        $z1 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>($r1);

     label31:
        if $z1 == 0 goto label40;

        $z0 = 1;

        i1 = i1 + 1;

        if i1 < $i0 goto label37;

     label32:
        $r14 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Narrowly avoided an infinite loop in execute");

        $r18 = new org.apache.commons.httpclient.RedirectException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Maximum redirects (");

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") exceeded");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.commons.httpclient.RedirectException: void <init>(java.lang.String)>($r20);

        throw $r18;

     label33:
        $r21 := @caughtexception;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r11 == null goto label34;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(0);

     label34:
        $z0 = r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection>;

        if $z0 != 0 goto label35;

        $r17 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        if $r17 != null goto label36;

     label35:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r11 == null goto label36;

        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

     label36:
        throw $r21;

     label37:
        $r14 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

     label38:
        if $z1 == 0 goto label40;

     label39:
        $r14 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Execute redirect ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

     label40:
        $z1 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>($r1);

     label41:
        if $z1 == 0 goto label46;

     label42:
        $z1 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>($r1);

     label43:
        if $z1 == 0 goto label46;

     label44:
        $r14 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Retry authentication");

     label45:
        $z0 = 1;

     label46:
        if $z0 == 0 goto label24;

     label47:
        $r17 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

     label48:
        if $r17 == null goto label05;

     label49:
        $r17 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        virtualinvoke $r17.<java.io.InputStream: void close()>();

     label50:
        goto label05;

     label51:
        return;

        catch java.lang.Throwable from label03 to label04 with label33;
        catch java.lang.Throwable from label05 to label06 with label33;
        catch java.lang.Throwable from label07 to label08 with label33;
        catch java.lang.Throwable from label09 to label11 with label33;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Throwable from label14 to label15 with label33;
        catch java.lang.Throwable from label16 to label17 with label33;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label20 to label22 with label33;
        catch java.lang.Throwable from label23 to label24 with label33;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch java.lang.Throwable from label32 to label33 with label33;
        catch java.lang.Throwable from label37 to label38 with label33;
        catch java.lang.Throwable from label39 to label41 with label33;
        catch java.lang.Throwable from label42 to label43 with label33;
        catch java.lang.Throwable from label44 to label45 with label33;
        catch java.lang.Throwable from label47 to label48 with label33;
        catch java.lang.Throwable from label49 to label50 with label33;
    }
    public org.apache.commons.httpclient.HttpConnectionManager getConnectionManager()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpConnectionManager r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnectionManager connectionManager>;

        return r1;
    }
    public org.apache.commons.httpclient.HostConfiguration getHostConfiguration()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HostConfiguration r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        return r1;
    }
    public org.apache.commons.httpclient.params.HttpParams getParams()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.params.HttpClientParams r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        return r1;
    }
    public org.apache.commons.httpclient.HttpState getState()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpState r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        return r1;
    }
