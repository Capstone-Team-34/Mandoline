org.apache.commons.httpclient.Wire extends java.lang.Object
public static org.apache.commons.httpclient.Wire CONTENT_WIRE
public static org.apache.commons.httpclient.Wire HEADER_WIRE
private org.apache.commons.logging.Log log
    static void <clinit>()
    {
        org.apache.commons.httpclient.Wire $r0;
        org.apache.commons.logging.Log $r1;

        $r0 = new org.apache.commons.httpclient.Wire;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("httpclient.wire.header");

        specialinvoke $r0.<org.apache.commons.httpclient.Wire: void <init>(org.apache.commons.logging.Log)>($r1);

        <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE> = $r0;

        $r0 = new org.apache.commons.httpclient.Wire;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("httpclient.wire.content");

        specialinvoke $r0.<org.apache.commons.httpclient.Wire: void <init>(org.apache.commons.logging.Log)>($r1);

        <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE> = $r0;

        return;
    }
    private void <init>(org.apache.commons.logging.Log)
    {
        org.apache.commons.httpclient.Wire r0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: org.apache.commons.logging.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.Wire: org.apache.commons.logging.Log log> = $r1;

        return;
    }
    private void wire(java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        java.lang.String $r1, $r5;
        java.io.InputStream $r2;
        java.lang.StringBuffer r3;
        int $i0;
        org.apache.commons.logging.Log $r4;
        char $c1;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        r3 = new java.lang.StringBuffer;

        specialinvoke r3.<java.lang.StringBuffer: void <init>()>();

     label1:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        if $i0 == -1 goto label6;

        if $i0 != 13 goto label2;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[\\r]");

        goto label1;

     label2:
        if $i0 != 10 goto label3;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[\\n]\"");

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, "\"");

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, $r1);

        $r4 = r0.<org.apache.commons.httpclient.Wire: org.apache.commons.logging.Log log>;

        $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

        virtualinvoke r3.<java.lang.StringBuffer: void setLength(int)>(0);

        goto label1;

     label3:
        if $i0 < 32 goto label4;

        if $i0 <= 127 goto label5;

     label4:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        goto label1;

     label5:
        $c1 = (char) $i0;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label1;

     label6:
        $i0 = virtualinvoke r3.<java.lang.StringBuffer: int length()>();

        if $i0 <= 0 goto label7;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, "\"");

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, $r1);

        $r4 = r0.<org.apache.commons.httpclient.Wire: org.apache.commons.logging.Log log>;

        $r1 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r1);

     label7:
        return;
    }
    public boolean enabled()
    {
        org.apache.commons.httpclient.Wire r0;
        boolean $z0;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 = r0.<org.apache.commons.httpclient.Wire: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        return $z0;
    }
    public void input(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        int $i0;
        byte $b1;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $i0 := @parameter0: int;

        $r1 = newarray (byte)[1];

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        virtualinvoke r0.<org.apache.commons.httpclient.Wire: void input(byte[])>($r1);

        return;
    }
    public void input(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        java.io.InputStream $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: java.io.InputStream;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input may not be null");

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>("<< ", $r1);

        return;
    }
    public void input(java.lang.String) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        java.lang.String $r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input may not be null");

        throw $r3;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.httpclient.Wire: void input(byte[])>($r2);

        return;
    }
    public void input(byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.io.ByteArrayInputStream $r3;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input may not be null");

        throw $r2;

     label1:
        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        specialinvoke r0.<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>("<< ", $r3);

        return;
    }
    public void input(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        byte[] $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.io.ByteArrayInputStream $r3;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input may not be null");

        throw $r2;

     label1:
        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r1, $i0, $i1);

        specialinvoke r0.<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>("<< ", $r3);

        return;
    }
    public void output(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        int $i0;
        byte $b1;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $i0 := @parameter0: int;

        $r1 = newarray (byte)[1];

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        virtualinvoke r0.<org.apache.commons.httpclient.Wire: void output(byte[])>($r1);

        return;
    }
    public void output(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        java.io.InputStream $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: java.io.InputStream;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output may not be null");

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>(">> ", $r1);

        return;
    }
    public void output(java.lang.String) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        java.lang.String $r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output may not be null");

        throw $r3;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.commons.httpclient.Wire: void output(byte[])>($r2);

        return;
    }
    public void output(byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.io.ByteArrayInputStream $r3;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output may not be null");

        throw $r2;

     label1:
        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        specialinvoke r0.<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>(">> ", $r3);

        return;
    }
    public void output(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.Wire r0;
        byte[] $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.io.ByteArrayInputStream $r3;

        r0 := @this: org.apache.commons.httpclient.Wire;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output may not be null");

        throw $r2;

     label1:
        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r1, $i0, $i1);

        specialinvoke r0.<org.apache.commons.httpclient.Wire: void wire(java.lang.String,java.io.InputStream)>(">> ", $r3);

        return;
    }
