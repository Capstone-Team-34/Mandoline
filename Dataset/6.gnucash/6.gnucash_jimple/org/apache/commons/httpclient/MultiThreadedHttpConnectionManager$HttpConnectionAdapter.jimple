org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter extends org.apache.commons.httpclient.HttpConnection
private org.apache.commons.httpclient.HttpConnection wrappedConnection
    public void <init>(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.String $r2;
        int $i0;
        org.apache.commons.httpclient.protocol.Protocol $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r2, $i0, $r3);

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection> = $r1;

        return;
    }
    public void close()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label1:
        return;
    }
    public boolean closeIfStale() throws java.io.IOException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean closeIfStale()>();

        return $z0;

     label1:
        return 0;
    }
    public void flushRequestOutputStream() throws java.io.IOException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void flushRequestOutputStream()>();

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public java.lang.String getHost()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        return $r2;

     label1:
        return null;
    }
    public org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.HttpConnectionManager $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        return $r2;

     label1:
        return null;
    }
    public java.io.InputStream getLastResponseInputStream()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getLastResponseInputStream()>();

        return $r2;

     label1:
        return null;
    }
    public java.net.InetAddress getLocalAddress()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.net.InetAddress $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress getLocalAddress()>();

        return $r2;

     label1:
        return null;
    }
    public org.apache.commons.httpclient.params.HttpConnectionParams getParams()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.params.HttpConnectionParams $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        return $r2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public int getPort()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        return $i0;

     label1:
        return -1;
    }
    public org.apache.commons.httpclient.protocol.Protocol getProtocol()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        org.apache.commons.httpclient.protocol.Protocol $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        return $r2;

     label1:
        return null;
    }
    public java.lang.String getProxyHost()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        return $r2;

     label1:
        return null;
    }
    public int getProxyPort()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>();

        return $i0;

     label1:
        return -1;
    }
    public java.io.OutputStream getRequestOutputStream() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.io.OutputStream $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream getRequestOutputStream()>();

        return $r2;

     label1:
        return null;
    }
    public java.io.InputStream getResponseInputStream() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getResponseInputStream()>();

        return $r2;

     label1:
        return null;
    }
    public int getSendBufferSize() throws java.net.SocketException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: int getSendBufferSize()>();

        return $i0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public int getSoTimeout() throws java.net.SocketException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: int getSoTimeout()>();

        return $i0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public java.lang.String getVirtualHost()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.String $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String getVirtualHost()>();

        return $r2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    org.apache.commons.httpclient.HttpConnection getWrappedConnection()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        org.apache.commons.httpclient.HttpConnection r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        return r1;
    }
    protected boolean hasConnection()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isOpen()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        return $z0;

     label1:
        return 0;
    }
    public boolean isProxied()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        return $z0;

     label1:
        return 0;
    }
    public boolean isResponseAvailable() throws java.io.IOException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable()>();

        return $z0;

     label1:
        return 0;
    }
    public boolean isResponseAvailable(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isResponseAvailable(int)>($i0);

        return $z0;

     label1:
        return 0;
    }
    public boolean isSecure()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        return $z0;

     label1:
        return 0;
    }
    public boolean isStaleCheckingEnabled()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isStaleCheckingEnabled()>();

        return $z0;

     label1:
        return 0;
    }
    public boolean isTransparent()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isTransparent()>();

        return $z0;

     label1:
        return 0;
    }
    public void open() throws java.io.IOException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void open()>();

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public void print(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String)>($r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void print(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r3.<org.apache.commons.httpclient.HttpConnection: void print(java.lang.String,java.lang.String)>($r1, $r2);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r4;
    }
    public void printLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void printLine()>();

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public void printLine(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String)>($r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void printLine(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r3.<org.apache.commons.httpclient.HttpConnection: void printLine(java.lang.String,java.lang.String)>($r1, $r2);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r4;
    }
    public java.lang.String readLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.String $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine()>();

        return $r2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public java.lang.String readLine(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        $r1 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String readLine(java.lang.String)>($r1);

        return $r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void releaseConnection()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        org.apache.commons.httpclient.HttpConnection r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean isLocked()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection> = null;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

     label1:
        return;
    }
    public void setConnectionTimeout(int)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void setConnectionTimeout(int)>($i0);

     label1:
        return;
    }
    public void setHost(java.lang.String) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setHost(java.lang.String)>($r1);

     label1:
        return;
    }
    public void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>($r1);

     label1:
        return;
    }
    public void setLastResponseInputStream(java.io.InputStream)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.io.InputStream $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.io.InputStream;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>($r1);

     label1:
        return;
    }
    public void setLocalAddress(java.net.InetAddress)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.net.InetAddress $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.net.InetAddress;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setLocalAddress(java.net.InetAddress)>($r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void setParams(org.apache.commons.httpclient.params.HttpConnectionParams)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpConnectionParams;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setParams(org.apache.commons.httpclient.params.HttpConnectionParams)>($r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void setPort(int) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void setPort(int)>($i0);

     label1:
        return;
    }
    public void setProtocol(org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        org.apache.commons.httpclient.protocol.Protocol $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: org.apache.commons.httpclient.protocol.Protocol;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setProtocol(org.apache.commons.httpclient.protocol.Protocol)>($r1);

     label1:
        return;
    }
    public void setProxyHost(java.lang.String) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setProxyHost(java.lang.String)>($r1);

     label1:
        return;
    }
    public void setProxyPort(int) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void setProxyPort(int)>($i0);

     label1:
        return;
    }
    public void setSendBufferSize(int) throws java.net.SocketException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void setSendBufferSize(int)>($i0);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public void setSoTimeout(int) throws java.net.SocketException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void setSoTimeout(int)>($i0);

     label1:
        return;
    }
    public void setSocketTimeout(int) throws java.net.SocketException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        int $i0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>($i0);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public void setStaleCheckingEnabled(boolean)
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0, $z1;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void setStaleCheckingEnabled(boolean)>($z0);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public void setVirtualHost(java.lang.String) throws java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setVirtualHost(java.lang.String)>($r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void shutdownOutput()
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void shutdownOutput()>();

     label1:
        return;
    }
    public void tunnelCreated() throws java.lang.IllegalStateException, java.io.IOException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>();

     label1:
        return;
    }
    public void write(byte[]) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        byte[] $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: byte[];

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void write(byte[], int, int) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>($r1, $i0, $i1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
    public void writeLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void writeLine()>();

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r2;
    }
    public void writeLine(byte[]) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter r0;
        byte[] $r1;
        boolean $z0;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter;

        $r1 := @parameter0: byte[];

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: boolean hasConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter: org.apache.commons.httpclient.HttpConnection wrappedConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>($r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has been released");

        throw $r3;
    }
