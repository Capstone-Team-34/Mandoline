org.apache.commons.httpclient.ChunkedOutputStream extends java.io.OutputStream
private static final byte[] CRLF
private static final byte[] ENDCHUNK
private static final byte[] ZERO
private byte[] cache
private int cachePosition
private java.io.OutputStream stream
private boolean wroteLastChunk
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.httpclient.ChunkedOutputStream: byte[] CRLF> = $r0;

        $r0 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] CRLF>;

        <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ENDCHUNK> = $r0;

        $r0 = newarray (byte)[1];

        $r0[0] = 48;

        <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ZERO> = $r0;

        return;
    }
    public void <init>(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.httpclient.ChunkedOutputStream: void <init>(java.io.OutputStream,int)>($r1, 2048);

        return;
    }
    public void <init>(java.io.OutputStream, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        java.io.OutputStream $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream> = null;

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition> = 0;

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: boolean wroteLastChunk> = 0;

        $r2 = newarray (byte)[$i0];

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: byte[] cache> = $r2;

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream> = $r1;

        return;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        virtualinvoke r0.<org.apache.commons.httpclient.ChunkedOutputStream: void finish()>();

        specialinvoke r0.<java.io.OutputStream: void close()>();

        return;
    }
    public void finish() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $z0 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: boolean wroteLastChunk>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>();

        virtualinvoke r0.<org.apache.commons.httpclient.ChunkedOutputStream: void writeClosingChunk()>();

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: boolean wroteLastChunk> = 1;

     label1:
        return;
    }
    public void flush() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $r1 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }
    protected void flushCache() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        int $i0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;
        byte[] $r3, $r5;
        java.io.OutputStream $r4;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        if $i0 <= 0 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r2);

        $r4 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $i0 = lengthof $r3;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0);

        $r4 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $r3 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: byte[] cache>;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0);

        $r4 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $r3 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ENDCHUNK>;

        $r5 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ENDCHUNK>;

        $i0 = lengthof $r5;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0);

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition> = 0;

     label1:
        return;
    }
    protected void flushCacheWithAppend(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        byte[] $r1, $r4;
        int $i0, $i1, $i2;
        java.lang.StringBuffer $r2;
        java.lang.String $r3;
        java.io.OutputStream $r5;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $i2 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        $i2 = $i2 + $i1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r3);

        $r5 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $i2 = lengthof $r4;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i2);

        $r5 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $r4 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: byte[] cache>;

        $i2 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i2);

        $r5 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $r5 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $r1 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ENDCHUNK>;

        $r4 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ENDCHUNK>;

        $i0 = lengthof $r4;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition> = 0;

        return;
    }
    public void write(int) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        int $i0, $i2;
        byte $b1;
        byte[] $r1;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: byte[] cache>;

        $i2 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        $b1 = (byte) $i0;

        $r1[$i2] = $b1;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition> = $i0;

        $i0 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        $r1 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: byte[] cache>;

        $i2 = lengthof $r1;

        if $i0 != $i2 goto label1;

        virtualinvoke r0.<org.apache.commons.httpclient.ChunkedOutputStream: void flushCache()>();

     label1:
        return;
    }
    public void write(byte[]) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.apache.commons.httpclient.ChunkedOutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: byte[] cache>;

        $i2 = lengthof $r2;

        $i3 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        $i2 = $i2 - $i3;

        if $i1 < $i2 goto label1;

        virtualinvoke r0.<org.apache.commons.httpclient.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>($r1, $i0, $i1);

        return;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: byte[] cache>;

        $i2 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, $i2, $i1);

        $i0 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition>;

        $i0 = $i0 + $i1;

        r0.<org.apache.commons.httpclient.ChunkedOutputStream: int cachePosition> = $i0;

        return;
    }
    protected void writeClosingChunk() throws java.io.IOException
    {
        org.apache.commons.httpclient.ChunkedOutputStream r0;
        java.io.OutputStream $r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.httpclient.ChunkedOutputStream;

        $r1 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $r2 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ZERO>;

        $r3 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ZERO>;

        $i0 = lengthof $r3;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        $r1 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $r2 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] CRLF>;

        $r3 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] CRLF>;

        $i0 = lengthof $r3;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        $r1 = r0.<org.apache.commons.httpclient.ChunkedOutputStream: java.io.OutputStream stream>;

        $r2 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ENDCHUNK>;

        $r3 = <org.apache.commons.httpclient.ChunkedOutputStream: byte[] ENDCHUNK>;

        $i0 = lengthof $r3;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        return;
    }
