org.apache.commons.httpclient.SimpleHttpConnectionManager extends java.lang.Object implements org.apache.commons.httpclient.HttpConnectionManager
private static final org.apache.commons.logging.Log LOG
private static final java.lang.String MISUSE_MESSAGE
static java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager
private boolean alwaysClose
protected org.apache.commons.httpclient.HttpConnection httpConnection
private long idleStartTime
private volatile boolean inUse
private org.apache.commons.httpclient.params.HttpConnectionManagerParams params
    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        org.apache.commons.logging.Log $r2;

        $r0 = <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.SimpleHttpConnectionManager");

        $r1 = $r0;

        <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager> = $r0;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        <org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.logging.Log LOG> = $r2;

        return;

     label2:
        $r1 = <org.apache.commons.httpclient.SimpleHttpConnectionManager: java.lang.Class class$org$apache$commons$httpclient$SimpleHttpConnectionManager>;

        goto label1;
    }
    public void <init>()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>();

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = 9223372036854775807L;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 0;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose> = 0;

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void <init>()>();

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = 9223372036854775807L;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 0;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose> = 0;

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose> = $z0;

        return;
    }
    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
    static void finishLastResponse(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpConnection $r0;
        java.io.IOException r1;
        java.io.InputStream $r2;

        $r0 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream getLastResponseInputStream()>();

        if $r2 == null goto label4;

        virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: void setLastResponseInputStream(java.io.InputStream)>(null);

     label1:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        virtualinvoke $r0.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void closeIdleConnections(long)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        long $l0, $l1;
        byte $b2;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $l0 := @parameter0: long;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l1 - $l0;

        $l1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime>;

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label1;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label1:
        return;
    }
    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration,long)>($r1, 0L);

        return $r2;
    }
    public org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration, long)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        long $l0;
        org.apache.commons.httpclient.HttpConnection $r2;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>($r1, $l0);

        return $r2;
    }
    public org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration, long)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        long $l0;
        org.apache.commons.httpclient.HttpConnection $r2;
        org.apache.commons.httpclient.params.HttpConnectionParams $r3;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r4;
        boolean $z0;
        org.apache.commons.logging.Log $r5;
        java.lang.String $r6;
        int $i1;
        org.apache.commons.httpclient.protocol.Protocol $r7;
        java.net.InetAddress $r8;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $l0 := @parameter1: long;

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        if $r2 != null goto label3;

        $r2 = new org.apache.commons.httpclient.HttpConnection;

        specialinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void <init>(org.apache.commons.httpclient.HostConfiguration)>($r1);

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection> = $r2;

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)>(r0);

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $r4 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r4);

     label1:
        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = 9223372036854775807L;

        $z0 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse>;

        if $z0 == 0 goto label2;

        $r5 = <org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("SimpleHttpConnectionManager being used incorrectly.  Be sure that HttpMethod.releaseConnection() is always called and that only one thread and/or method is using this connection manager at a time.");

     label2:
        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 1;

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        return $r2;

     label3:
        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>($r2);

        if $z0 == 0 goto label4;

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: boolean proxyEquals(org.apache.commons.httpclient.HttpConnection)>($r2);

        if $z0 != 0 goto label6;

     label4:
        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z0 == 0 goto label5;

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label5:
        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r6 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setHost(java.lang.String)>($r6);

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $i1 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setPort(int)>($i1);

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r7 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setProtocol(org.apache.commons.httpclient.protocol.Protocol)>($r7);

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r8 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.net.InetAddress getLocalAddress()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setLocalAddress(java.net.InetAddress)>($r8);

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $r6 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getProxyHost()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setProxyHost(java.lang.String)>($r6);

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        $i1 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: int getProxyPort()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: void setProxyPort(int)>($i1);

        goto label1;

     label6:
        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>($r2);

        goto label1;
    }
    public org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        return r1;
    }
    public boolean isConnectionStaleCheckingEnabled()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: boolean isStaleCheckingEnabled()>();

        return $z0;
    }
    public void releaseConnection(org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r1, $r2;
        long $l0;
        java.lang.IllegalStateException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpConnection;

        $r2 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        if $r1 == $r2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected release of an unknown connection.");

        throw $r3;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean alwaysClose>;

        if $z0 == 0 goto label3;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label2:
        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean inUse> = 0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: long idleStartTime> = $l0;

        return;

     label3:
        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        staticinvoke <org.apache.commons.httpclient.SimpleHttpConnectionManager: void finishLastResponse(org.apache.commons.httpclient.HttpConnection)>($r1);

        goto label2;
    }
    public void setConnectionStaleCheckingEnabled(boolean)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        boolean $z0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setStaleCheckingEnabled(boolean)>($z0);

        return;
    }
    public void setParams(org.apache.commons.httpclient.params.HttpConnectionManagerParams)
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 := @parameter0: org.apache.commons.httpclient.params.HttpConnectionManagerParams;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams params> = $r1;

        return;
    }
    public void shutdown()
    {
        org.apache.commons.httpclient.SimpleHttpConnectionManager r0;
        org.apache.commons.httpclient.HttpConnection $r1;

        r0 := @this: org.apache.commons.httpclient.SimpleHttpConnectionManager;

        $r1 = r0.<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection httpConnection>;

        virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: void close()>();

        return;
    }
