org.apache.jackrabbit.webdav.observation.SubscriptionInfo extends java.lang.Object implements org.apache.jackrabbit.webdav.observation.ObservationConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
private static org.slf4j.Logger log
private final org.apache.jackrabbit.webdav.observation.EventType[] eventTypes
private final org.apache.jackrabbit.webdav.observation.Filter[] filters
private final boolean isDeep
private final boolean noLocal
private final long timeout
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/observation/SubscriptionInfo;");

        <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(org.w3c.dom.Element, long, boolean) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        org.w3c.dom.Element $r1, $r7;
        long $l0;
        boolean $z0, $z1;
        org.apache.jackrabbit.webdav.observation.Filter r2;
        java.util.ArrayList r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        org.slf4j.Logger $r5;
        org.apache.jackrabbit.webdav.DavException $r6;
        org.apache.jackrabbit.webdav.observation.EventType[] $r8;
        int $i1;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r9;
        org.apache.jackrabbit.webdav.observation.Filter[] $r10;
        java.lang.Object[] $r11;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        $r1 := @parameter0: org.w3c.dom.Element;

        $l0 := @parameter1: long;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "subscriptioninfo", $r4);

        if $z1 != 0 goto label1;

        $r5 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("Element with name \'subscriptioninfo\' expected");

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label1:
        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "eventtype", $r4);

        if $r7 == null goto label2;

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.observation.DefaultEventType: org.apache.jackrabbit.webdav.observation.EventType[] createFromXml(org.w3c.dom.Element)>($r7);

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.EventType[] eventTypes> = $r8;

        $r8 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.EventType[] eventTypes>;

        $i1 = lengthof $r8;

        if $i1 != 0 goto label3;

        $r5 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("\'subscriptioninfo\' must at least indicate a single, valid event type.");

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label2:
        $r5 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("\'subscriptioninfo\' must contain an \'eventtype\' child element.");

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label3:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "filter", $r4);

        if $r7 == null goto label5;

        $r9 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element)>($r7);

     label4:
        $z1 = virtualinvoke $r9.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        r2 = new org.apache.jackrabbit.webdav.observation.Filter;

        $r7 = virtualinvoke $r9.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        specialinvoke r2.<org.apache.jackrabbit.webdav.observation.Filter: void <init>(org.w3c.dom.Element)>($r7);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label4;

     label5:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $r10 = newarray (org.apache.jackrabbit.webdav.observation.Filter)[$i1];

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r10 = (org.apache.jackrabbit.webdav.observation.Filter[]) $r11;

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.Filter[] filters> = $r10;

        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "nolocal", $r4);

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean noLocal> = $z1;

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean isDeep> = $z0;

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: long timeout> = $l0;

        return;
    }
    public void <init>(org.apache.jackrabbit.webdav.observation.EventType[], boolean, long)
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        org.apache.jackrabbit.webdav.observation.EventType[] $r1;
        boolean $z0;
        long $l0;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.observation.EventType[];

        $z0 := @parameter1: boolean;

        $l0 := @parameter2: long;

        specialinvoke r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: void <init>(org.apache.jackrabbit.webdav.observation.EventType[],org.apache.jackrabbit.webdav.observation.Filter[],boolean,boolean,long)>($r1, null, 0, $z0, $l0);

        return;
    }
    public void <init>(org.apache.jackrabbit.webdav.observation.EventType[], org.apache.jackrabbit.webdav.observation.Filter[], boolean, boolean, long)
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        org.apache.jackrabbit.webdav.observation.EventType[] $r1;
        org.apache.jackrabbit.webdav.observation.Filter[] $r2;
        boolean $z0, $z1;
        long $l0;
        int $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.observation.EventType[];

        $r2 := @parameter1: org.apache.jackrabbit.webdav.observation.Filter[];

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $l0 := @parameter4: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        $i1 = lengthof $r1;

        if $i1 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'subscriptioninfo\' must at least indicate a single event type.");

        throw $r3;

     label2:
        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.EventType[] eventTypes> = $r1;

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean noLocal> = $z0;

        if $r2 == null goto label4;

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.Filter[] filters> = $r2;

     label3:
        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean isDeep> = $z1;

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: long timeout> = $l0;

        return;

     label4:
        $r2 = newarray (org.apache.jackrabbit.webdav.observation.Filter)[0];

        r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.Filter[] filters> = $r2;

        goto label3;
    }
    public org.apache.jackrabbit.webdav.observation.EventType[] getEventTypes()
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        org.apache.jackrabbit.webdav.observation.EventType[] r1;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        r1 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.EventType[] eventTypes>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.observation.Filter[] getFilters()
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        org.apache.jackrabbit.webdav.observation.Filter[] r1;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        r1 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.Filter[] filters>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.observation.Filter[] getFilters(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.apache.jackrabbit.webdav.observation.Filter[] r3;
        org.apache.jackrabbit.webdav.observation.Filter r4;
        java.util.ArrayList r5;
        int i0, i1;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        r3 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.Filter[] filters>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        $z0 = virtualinvoke r4.<org.apache.jackrabbit.webdav.observation.Filter: boolean isMatchingFilter(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        if $z0 == 0 goto label2;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i0 = interfaceinvoke r5.<java.util.List: int size()>();

        r3 = newarray (org.apache.jackrabbit.webdav.observation.Filter)[i0];

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        r3 = (org.apache.jackrabbit.webdav.observation.Filter[]) $r6;

        return r3;
    }
    public long getTimeOut()
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        long l0;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        l0 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: long timeout>;

        return l0;
    }
    public boolean isDeep()
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        boolean z0;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        z0 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean isDeep>;

        return z0;
    }
    public boolean isNoLocal()
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        boolean z0;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        z0 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean noLocal>;

        return z0;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.observation.EventType r2;
        org.apache.jackrabbit.webdav.observation.Filter r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        org.w3c.dom.Element $r5, $r6, $r8;
        org.apache.jackrabbit.webdav.observation.EventType[] r7;
        int i0, i1;
        org.apache.jackrabbit.webdav.observation.Filter[] $r9;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "subscriptioninfo", $r4);

        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r5, "eventtype", $r4);

        r7 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.EventType[] eventTypes>;

        i0 = lengthof r7;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r7[i1];

        $r8 = interfaceinvoke r2.<org.apache.jackrabbit.webdav.observation.EventType: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r9 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.Filter[] filters>;

        i0 = lengthof $r9;

        if i0 <= 0 goto label4;

        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r5, "filter", $r4);

        $r9 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.observation.Filter[] filters>;

        i0 = lengthof $r9;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r3 = $r9[i1];

        $r8 = virtualinvoke r3.<org.apache.jackrabbit.webdav.observation.Filter: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        i1 = i1 + 1;

        goto label3;

     label4:
        $z0 = r0.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean noLocal>;

        if $z0 == 0 goto label5;

        $r4 = <org.apache.jackrabbit.webdav.observation.SubscriptionInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r5, "nolocal", $r4);

     label5:
        return $r5;
    }
