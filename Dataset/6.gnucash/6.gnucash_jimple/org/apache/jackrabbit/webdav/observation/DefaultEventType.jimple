org.apache.jackrabbit.webdav.observation.DefaultEventType extends java.lang.Object implements org.apache.jackrabbit.webdav.observation.EventType
private static final java.util.Map eventTypes
private final java.lang.String localName
private final org.apache.jackrabbit.webdav.xml.Namespace namespace
    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.jackrabbit.webdav.observation.DefaultEventType: java.util.Map eventTypes> = $r0;

        return;
    }
    private void <init>(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.observation.DefaultEventType r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;

        r0 := @this: org.apache.jackrabbit.webdav.observation.DefaultEventType;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.observation.DefaultEventType: java.lang.String localName> = $r1;

        r0.<org.apache.jackrabbit.webdav.observation.DefaultEventType: org.apache.jackrabbit.webdav.xml.Namespace namespace> = $r2;

        return;
    }
    public static org.apache.jackrabbit.webdav.observation.EventType create(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        java.lang.String $r0, $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        org.apache.jackrabbit.webdav.observation.DefaultEventType r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        org.apache.jackrabbit.webdav.observation.EventType $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r0 == null goto label1;

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null and \'\' are not valid local names of an event type.");

        throw $r4;

     label2:
        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getExpandedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1);

        $r5 = <org.apache.jackrabbit.webdav.observation.DefaultEventType: java.util.Map eventTypes>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r5 = <org.apache.jackrabbit.webdav.observation.DefaultEventType: java.util.Map eventTypes>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = (org.apache.jackrabbit.webdav.observation.EventType) $r6;

        return $r7;

     label3:
        r2 = new org.apache.jackrabbit.webdav.observation.DefaultEventType;

        specialinvoke r2.<org.apache.jackrabbit.webdav.observation.DefaultEventType: void <init>(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1);

        $r5 = <org.apache.jackrabbit.webdav.observation.DefaultEventType: java.util.Map eventTypes>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        return r2;
    }
    public static org.apache.jackrabbit.webdav.observation.EventType[] create(java.lang.String[], org.apache.jackrabbit.webdav.xml.Namespace)
    {
        java.lang.String[] $r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        org.apache.jackrabbit.webdav.observation.EventType[] r2;
        org.apache.jackrabbit.webdav.observation.EventType $r3;
        int $i0, $i1;
        java.lang.String $r4;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $i0 = lengthof $r0;

        r2 = newarray (org.apache.jackrabbit.webdav.observation.EventType)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r4 = $r0[$i0];

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.observation.DefaultEventType: org.apache.jackrabbit.webdav.observation.EventType create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r4, $r1);

        r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r2;
    }
    public static org.apache.jackrabbit.webdav.observation.EventType[] createFromXml(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        java.util.ArrayList r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r4;
        java.lang.String $r5;
        org.apache.jackrabbit.webdav.observation.EventType $r6;
        int $i0;
        org.apache.jackrabbit.webdav.observation.EventType[] $r7;
        java.lang.Object[] $r8;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r2 = <org.apache.jackrabbit.webdav.observation.ObservationConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "eventtype", $r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'eventtype\' element expected which contains a least a single child element.");

        throw $r3;

     label1:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element)>($r0);

     label2:
        $z0 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r0 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r5 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(org.w3c.dom.Element)>($r0);

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.observation.DefaultEventType: org.apache.jackrabbit.webdav.observation.EventType create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r5, $r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r7 = newarray (org.apache.jackrabbit.webdav.observation.EventType)[$i0];

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r7 = (org.apache.jackrabbit.webdav.observation.EventType[]) $r8;

        return $r7;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.observation.DefaultEventType r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.observation.DefaultEventType;

        r1 = r0.<org.apache.jackrabbit.webdav.observation.DefaultEventType: java.lang.String localName>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.xml.Namespace getNamespace()
    {
        org.apache.jackrabbit.webdav.observation.DefaultEventType r0;
        org.apache.jackrabbit.webdav.xml.Namespace r1;

        r0 := @this: org.apache.jackrabbit.webdav.observation.DefaultEventType;

        r1 = r0.<org.apache.jackrabbit.webdav.observation.DefaultEventType: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        return r1;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.observation.DefaultEventType r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.jackrabbit.webdav.observation.DefaultEventType;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r4 = r0.<org.apache.jackrabbit.webdav.observation.DefaultEventType: java.lang.String localName>;

        $r2 = r0.<org.apache.jackrabbit.webdav.observation.DefaultEventType: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r4, $r2);

        return $r3;
    }
