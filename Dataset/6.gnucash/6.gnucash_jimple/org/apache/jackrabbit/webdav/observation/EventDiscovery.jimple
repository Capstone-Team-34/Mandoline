org.apache.jackrabbit.webdav.observation.EventDiscovery extends java.lang.Object implements org.apache.jackrabbit.webdav.observation.ObservationConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
private static org.slf4j.Logger log
private final java.util.List bundles
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/observation/EventDiscovery;");

        <org.apache.jackrabbit.webdav.observation.EventDiscovery: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.observation.EventDiscovery r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.jackrabbit.webdav.observation.EventDiscovery;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.observation.EventDiscovery: java.util.List bundles> = $r1;

        return;
    }
    public void addEventBundle(org.apache.jackrabbit.webdav.observation.EventBundle)
    {
        org.apache.jackrabbit.webdav.observation.EventDiscovery r0;
        org.apache.jackrabbit.webdav.observation.EventBundle $r1;
        java.util.List $r2;

        r0 := @this: org.apache.jackrabbit.webdav.observation.EventDiscovery;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.observation.EventBundle;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.jackrabbit.webdav.observation.EventDiscovery: java.util.List bundles>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        return;
    }
    public java.util.Iterator getEventBundles()
    {
        org.apache.jackrabbit.webdav.observation.EventDiscovery r0;
        java.util.Iterator $r1;
        java.util.List $r2;

        r0 := @this: org.apache.jackrabbit.webdav.observation.EventDiscovery;

        $r2 = r0.<org.apache.jackrabbit.webdav.observation.EventDiscovery: java.util.List bundles>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }
    public boolean isEmpty()
    {
        org.apache.jackrabbit.webdav.observation.EventDiscovery r0;
        boolean $z0;
        java.util.List $r1;

        r0 := @this: org.apache.jackrabbit.webdav.observation.EventDiscovery;

        $r1 = r0.<org.apache.jackrabbit.webdav.observation.EventDiscovery: java.util.List bundles>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.observation.EventDiscovery r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3, $r8;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.jackrabbit.webdav.observation.EventBundle r7;

        r0 := @this: org.apache.jackrabbit.webdav.observation.EventDiscovery;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r2 = <org.apache.jackrabbit.webdav.observation.EventDiscovery: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "eventdiscovery", $r2);

        $r4 = r0.<org.apache.jackrabbit.webdav.observation.EventDiscovery: java.util.List bundles>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.jackrabbit.webdav.observation.EventBundle) $r6;

        $r8 = interfaceinvoke r7.<org.apache.jackrabbit.webdav.observation.EventBundle: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        goto label1;

     label2:
        return $r3;
    }
