org.apache.jackrabbit.webdav.MultiStatus extends java.lang.Object implements org.apache.jackrabbit.webdav.DavConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
private java.lang.String responseDescription
private java.util.Map responses
    public void <init>()
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.MultiStatus: java.util.Map responses> = $r1;

        return;
    }
    public static org.apache.jackrabbit.webdav.MultiStatus createFromXml(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0, $r5;
        org.apache.jackrabbit.webdav.MultiStatus r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r4;
        org.apache.jackrabbit.webdav.MultiStatusResponse $r6;
        java.lang.String $r7;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r2 = <org.apache.jackrabbit.webdav.MultiStatus: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "multistatus", $r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DAV:multistatus element expected.");

        throw $r3;

     label1:
        r1 = new org.apache.jackrabbit.webdav.MultiStatus;

        specialinvoke r1.<org.apache.jackrabbit.webdav.MultiStatus: void <init>()>();

        $r2 = <org.apache.jackrabbit.webdav.MultiStatus: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "response", $r2);

     label2:
        $z0 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.MultiStatusResponse createFromXml(org.w3c.dom.Element)>($r5);

        virtualinvoke r1.<org.apache.jackrabbit.webdav.MultiStatus: void addResponse(org.apache.jackrabbit.webdav.MultiStatusResponse)>($r6);

        goto label2;

     label3:
        $r2 = <org.apache.jackrabbit.webdav.MultiStatus: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "responsedescription", $r2);

        virtualinvoke r1.<org.apache.jackrabbit.webdav.MultiStatus: void setResponseDescription(java.lang.String)>($r7);

        return r1;
    }
    public void addResourceProperties(org.apache.jackrabbit.webdav.DavResource, org.apache.jackrabbit.webdav.property.DavPropertyNameSet, int)
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $i0 := @parameter2: int;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatus: void addResourceProperties(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int,int)>($r1, $r2, 0, $i0);

        return;
    }
    public void addResourceProperties(org.apache.jackrabbit.webdav.DavResource, org.apache.jackrabbit.webdav.property.DavPropertyNameSet, int, int)
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;
        int $i0, $i1, $i2;
        org.apache.jackrabbit.webdav.MultiStatusResponse $r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.DavResourceIterator $r4;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = new org.apache.jackrabbit.webdav.MultiStatusResponse;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int)>($r1, $r2, $i0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatus: void addResponse(org.apache.jackrabbit.webdav.MultiStatusResponse)>($r3);

        if $i1 <= 0 goto label2;

        $z0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResourceIterator getMembers()>();

     label1:
        $z0 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceIterator: org.apache.jackrabbit.webdav.DavResource nextResource()>();

        $i2 = $i1 + -1;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatus: void addResourceProperties(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int,int)>($r1, $r2, $i0, $i2);

        goto label1;

     label2:
        return;
    }
    public void addResourceStatus(org.apache.jackrabbit.webdav.DavResource, int, int)
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        int $i0, $i1, $i2;
        org.apache.jackrabbit.webdav.MultiStatusResponse $r2;
        java.lang.String $r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.DavResourceIterator $r4;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r3 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getHref()>();

        specialinvoke $r2.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,int)>($r3, $i0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatus: void addResponse(org.apache.jackrabbit.webdav.MultiStatusResponse)>($r2);

        if $i1 <= 0 goto label2;

        $z0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResourceIterator getMembers()>();

     label1:
        $z0 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceIterator: org.apache.jackrabbit.webdav.DavResource nextResource()>();

        $i2 = $i1 + -1;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatus: void addResourceStatus(org.apache.jackrabbit.webdav.DavResource,int,int)>($r1, $i0, $i2);

        goto label1;

     label2:
        return;
    }
    public void addResponse(org.apache.jackrabbit.webdav.MultiStatusResponse)
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        org.apache.jackrabbit.webdav.MultiStatusResponse $r1;
        java.lang.String $r2;
        java.util.Map $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.MultiStatusResponse;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.jackrabbit.webdav.MultiStatus: java.util.Map responses>;

        $r2 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String getHref()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.lang.String getResponseDescription()
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        r1 = r0.<org.apache.jackrabbit.webdav.MultiStatus: java.lang.String responseDescription>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.MultiStatusResponse[] getResponses()
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        int $i0;
        org.apache.jackrabbit.webdav.MultiStatusResponse[] $r3;
        java.lang.Object[] $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatus: java.util.Map responses>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatus: java.util.Map responses>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r3 = newarray (org.apache.jackrabbit.webdav.MultiStatusResponse)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (org.apache.jackrabbit.webdav.MultiStatusResponse[]) $r4;

     label2:
        exitmonitor r0;

        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setResponseDescription(java.lang.String)
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        java.lang.String $r1;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        $r1 := @parameter0: java.lang.String;

        r0.<org.apache.jackrabbit.webdav.MultiStatus: java.lang.String responseDescription> = $r1;

        return;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.MultiStatus r0;
        org.w3c.dom.Document $r1;
        int i0, i1;
        org.apache.jackrabbit.webdav.MultiStatusResponse r2;
        java.lang.String $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        org.w3c.dom.Element $r5, $r7;
        org.apache.jackrabbit.webdav.MultiStatusResponse[] $r6;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatus;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r4 = <org.apache.jackrabbit.webdav.MultiStatus: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "multistatus", $r4);

        $r6 = virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatus: org.apache.jackrabbit.webdav.MultiStatusResponse[] getResponses()>();

        i0 = lengthof $r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r6[i1];

        $r7 = virtualinvoke r2.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.jackrabbit.webdav.MultiStatus: java.lang.String responseDescription>;

        if $r3 == null goto label3;

        $r4 = <org.apache.jackrabbit.webdav.MultiStatus: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = r0.<org.apache.jackrabbit.webdav.MultiStatus: java.lang.String responseDescription>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r1, "responsedescription", $r4, $r3);

        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

     label3:
        return $r5;
    }
