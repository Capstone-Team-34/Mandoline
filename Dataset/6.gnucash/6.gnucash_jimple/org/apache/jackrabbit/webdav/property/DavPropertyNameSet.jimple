org.apache.jackrabbit.webdav.property.DavPropertyNameSet extends org.apache.jackrabbit.webdav.property.PropContainer implements java.lang.Iterable
private static org.slf4j.Logger log
private final java.util.Set set
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/property/DavPropertyNameSet;");

        <org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        java.util.HashSet $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r0.<org.apache.jackrabbit.webdav.property.PropContainer: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set> = $r1;

        return;
    }
    public void <init>(org.apache.jackrabbit.webdav.property.DavPropertyNameSet)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0, $r1;
        java.util.HashSet $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r0.<org.apache.jackrabbit.webdav.property.PropContainer: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set> = $r2;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean addAll(org.apache.jackrabbit.webdav.property.DavPropertyNameSet)>($r1);

        return;
    }
    public void <init>(org.w3c.dom.Element)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.w3c.dom.Element $r1;
        java.util.HashSet $r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r5;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r6;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<org.apache.jackrabbit.webdav.property.PropContainer: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set> = $r2;

        $r3 = <org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "prop", $r3);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'DAV:prop\' element expected.");

        throw $r4;

     label1:
        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element)>($r1);

     label2:
        $z0 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName createFromXml(org.w3c.dom.Element)>($r1);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r6);

        goto label2;

     label3:
        return;
    }
    static java.util.Set access$100(org.apache.jackrabbit.webdav.property.DavPropertyNameSet)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r0;
        java.util.Set r1;

        $r0 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        r1 = $r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        return r1;
    }
    public boolean add(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        java.util.Set $r3;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r4;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

        return $z0;
    }
    public boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean addAll(org.apache.jackrabbit.webdav.property.DavPropertyNameSet)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0, $r1;
        java.util.Set $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r3 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $r2 = $r1.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

        return $z0;
    }
    public boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.PropEntry r1;
        boolean $z0;
        org.apache.jackrabbit.webdav.property.DavPropertyName r2;
        org.slf4j.Logger $r3;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        r1 := @parameter0: org.apache.jackrabbit.webdav.property.PropEntry;

        $z0 = r1 instanceof org.apache.jackrabbit.webdav.property.DavPropertyName;

        if $z0 == 0 goto label1;

        r2 = (org.apache.jackrabbit.webdav.property.DavPropertyName) r1;

        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>(r2);

        return $z0;

     label1:
        $r3 = <org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.slf4j.Logger log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DavPropertyName object expected. Found: ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

        return 0;
    }
    public boolean contains(org.apache.jackrabbit.webdav.property.DavPropertyName)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    public java.util.Collection getContent()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        java.util.Set r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        return r1;
    }
    public int getContentSize()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        int $i0;
        java.util.Set $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }
    public boolean isEmpty()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        boolean $z0;
        java.util.Set $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        return $z0;
    }
    public volatile java.util.Iterator iterator()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyNameIterator $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.apache.jackrabbit.webdav.property.DavPropertyNameIterator iterator()>();

        return $r1;
    }
    public org.apache.jackrabbit.webdav.property.DavPropertyNameIterator iterator()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet$PropertyNameIterator $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet$PropertyNameIterator;

        specialinvoke $r1.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet$PropertyNameIterator: void <init>(org.apache.jackrabbit.webdav.property.DavPropertyNameSet,org.apache.jackrabbit.webdav.property.DavPropertyNameSet$1)>(r0, null);

        return $r1;
    }
    public boolean remove(org.apache.jackrabbit.webdav.property.DavPropertyName)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Set set>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }
