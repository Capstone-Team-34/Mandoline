org.apache.jackrabbit.webdav.property.DavPropertySet extends org.apache.jackrabbit.webdav.property.PropContainer implements java.lang.Iterable
private static org.slf4j.Logger log
private final java.util.Map map
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/property/DavPropertySet;");

        <org.apache.jackrabbit.webdav.property.DavPropertySet: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        specialinvoke r0.<org.apache.jackrabbit.webdav.property.PropContainer: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map> = $r1;

        return;
    }
    static java.util.Map access$200(org.apache.jackrabbit.webdav.property.DavPropertySet)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet $r0;
        java.util.Map r1;

        $r0 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertySet;

        r1 = $r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.property.DavProperty add(org.apache.jackrabbit.webdav.property.DavProperty)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.property.DavProperty r1;
        java.util.Map $r2;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavProperty;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $r3 = interfaceinvoke r1.<org.apache.jackrabbit.webdav.property.DavProperty: org.apache.jackrabbit.webdav.property.DavPropertyName getName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        r1 = (org.apache.jackrabbit.webdav.property.DavProperty) $r4;

        return r1;
    }
    public void addAll(org.apache.jackrabbit.webdav.property.DavPropertySet)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0, $r1;
        java.util.Map $r2, $r3;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $r3 = $r1.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r3);

        return;
    }
    public boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.property.PropEntry r1;
        boolean $z0;
        org.apache.jackrabbit.webdav.property.DavProperty r2;
        org.slf4j.Logger $r3;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        r1 := @parameter0: org.apache.jackrabbit.webdav.property.PropEntry;

        $z0 = r1 instanceof org.apache.jackrabbit.webdav.property.DavProperty;

        if $z0 == 0 goto label1;

        r2 = (org.apache.jackrabbit.webdav.property.DavProperty) r1;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavProperty add(org.apache.jackrabbit.webdav.property.DavProperty)>(r2);

        return 1;

     label1:
        $r3 = <org.apache.jackrabbit.webdav.property.DavPropertySet: org.slf4j.Logger log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DavProperty object expected. Found: ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

        return 0;
    }
    public boolean contains(org.apache.jackrabbit.webdav.property.DavPropertyName)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public org.apache.jackrabbit.webdav.property.DavProperty get(java.lang.String)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r2;
        org.apache.jackrabbit.webdav.property.DavProperty $r3;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavProperty get(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r2);

        return $r3;
    }
    public org.apache.jackrabbit.webdav.property.DavProperty get(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r3;
        org.apache.jackrabbit.webdav.property.DavProperty $r4;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavProperty get(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r3);

        return $r4;
    }
    public org.apache.jackrabbit.webdav.property.DavProperty get(org.apache.jackrabbit.webdav.property.DavPropertyName)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        java.lang.Object $r2;
        java.util.Map $r3;
        org.apache.jackrabbit.webdav.property.DavProperty $r4;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r3 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.jackrabbit.webdav.property.DavProperty) $r2;

        return $r4;
    }
    public java.util.Collection getContent()
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        java.util.Collection $r1;
        java.util.Map $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        return $r1;
    }
    public int getContentSize()
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        int $i0;
        java.util.Map $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
    public org.apache.jackrabbit.webdav.property.DavPropertyName[] getPropertyNames()
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;
        int $i0;
        org.apache.jackrabbit.webdav.property.DavPropertyName[] $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r4 = newarray (org.apache.jackrabbit.webdav.property.DavPropertyName)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (org.apache.jackrabbit.webdav.property.DavPropertyName[]) $r5;

        return $r4;
    }
    public boolean isEmpty()
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        boolean $z0;
        java.util.Map $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }
    public volatile java.util.Iterator iterator()
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyIterator $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavPropertyIterator iterator()>();

        return $r1;
    }
    public org.apache.jackrabbit.webdav.property.DavPropertyIterator iterator()
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.property.DavPropertySet$PropIter $r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 = new org.apache.jackrabbit.webdav.property.DavPropertySet$PropIter;

        specialinvoke $r1.<org.apache.jackrabbit.webdav.property.DavPropertySet$PropIter: void <init>(org.apache.jackrabbit.webdav.property.DavPropertySet,org.apache.jackrabbit.webdav.property.DavPropertySet$1)>(r0, null);

        return $r1;
    }
    public org.apache.jackrabbit.webdav.property.DavPropertyIterator iterator(org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        org.apache.jackrabbit.webdav.property.DavPropertySet$PropIter $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.xml.Namespace;

        $r2 = new org.apache.jackrabbit.webdav.property.DavPropertySet$PropIter;

        specialinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertySet$PropIter: void <init>(org.apache.jackrabbit.webdav.property.DavPropertySet,org.apache.jackrabbit.webdav.xml.Namespace,org.apache.jackrabbit.webdav.property.DavPropertySet$1)>(r0, $r1, null);

        return $r2;
    }
    public org.apache.jackrabbit.webdav.property.DavProperty remove(java.lang.String)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r2;
        org.apache.jackrabbit.webdav.property.DavProperty $r3;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavProperty remove(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r2);

        return $r3;
    }
    public org.apache.jackrabbit.webdav.property.DavProperty remove(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r3;
        org.apache.jackrabbit.webdav.property.DavProperty $r4;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavProperty remove(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r3);

        return $r4;
    }
    public org.apache.jackrabbit.webdav.property.DavProperty remove(org.apache.jackrabbit.webdav.property.DavPropertyName)
    {
        org.apache.jackrabbit.webdav.property.DavPropertySet r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        java.lang.Object $r2;
        java.util.Map $r3;
        org.apache.jackrabbit.webdav.property.DavProperty $r4;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r3 = r0.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Map map>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = (org.apache.jackrabbit.webdav.property.DavProperty) $r2;

        return $r4;
    }
