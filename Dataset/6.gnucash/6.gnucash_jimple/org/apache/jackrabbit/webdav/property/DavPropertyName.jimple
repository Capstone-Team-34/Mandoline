org.apache.jackrabbit.webdav.property.DavPropertyName extends java.lang.Object implements org.apache.jackrabbit.webdav.DavConstants org.apache.jackrabbit.webdav.xml.XmlSerializable org.apache.jackrabbit.webdav.property.PropEntry
public static final org.apache.jackrabbit.webdav.property.DavPropertyName CREATIONDATE
public static final org.apache.jackrabbit.webdav.property.DavPropertyName DISPLAYNAME
public static final org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTLANGUAGE
public static final org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTLENGTH
public static final org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTTYPE
public static final org.apache.jackrabbit.webdav.property.DavPropertyName GETETAG
public static final org.apache.jackrabbit.webdav.property.DavPropertyName GETLASTMODIFIED
public static final org.apache.jackrabbit.webdav.property.DavPropertyName ISCOLLECTION
public static final org.apache.jackrabbit.webdav.property.DavPropertyName LOCKDISCOVERY
public static final org.apache.jackrabbit.webdav.property.DavPropertyName RESOURCETYPE
public static final org.apache.jackrabbit.webdav.property.DavPropertyName SOURCE
public static final org.apache.jackrabbit.webdav.property.DavPropertyName SUPPORTEDLOCK
private static final java.util.Map cache
private final java.lang.String name
private final org.apache.jackrabbit.webdav.xml.Namespace namespace
    static void <clinit>()
    {
        java.util.HashMap $r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.jackrabbit.webdav.property.DavPropertyName: java.util.Map cache> = $r0;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("creationdate");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName CREATIONDATE> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("displayname");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName DISPLAYNAME> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("getcontentlanguage");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTLANGUAGE> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("getcontentlength");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTLENGTH> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("getcontenttype");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETCONTENTTYPE> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("getetag");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETETAG> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("getlastmodified");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETLASTMODIFIED> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("lockdiscovery");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName LOCKDISCOVERY> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("resourcetype");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName RESOURCETYPE> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("source");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName SOURCE> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("supportedlock");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName SUPPORTEDLOCK> = $r1;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)>("iscollection");

        <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName ISCOLLECTION> = $r1;

        return;
    }
    private void <init>(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyName r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name and namespace must not be \'null\' for a DavPropertyName.");

        throw $r3;

     label2:
        r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String name> = $r1;

        r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace namespace> = $r2;

        return;
    }
    public static org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String)
    {
        java.lang.String $r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

     label1:
        $r2 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r2);

     label2:
        exitmonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        java.lang.String $r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1, $r6;
        java.util.Map $r2, $r4;
        java.lang.Object $r3;
        org.apache.jackrabbit.webdav.property.DavPropertyName r5, $r9;
        boolean $z0;
        java.lang.Throwable $r7;
        java.util.HashMap $r8;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        entermonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

     label1:
        $r2 = <org.apache.jackrabbit.webdav.property.DavPropertyName: java.util.Map cache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = (java.util.Map) $r3;

        if $r2 != null goto label2;

        $r8 = new java.util.HashMap;

        $r2 = $r8;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r4 = <org.apache.jackrabbit.webdav.property.DavPropertyName: java.util.Map cache>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r5 = (org.apache.jackrabbit.webdav.property.DavPropertyName) $r3;

        if r5 != null goto label4;

        $r6 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.xml.Namespace: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r1 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label3:
        $r9 = new org.apache.jackrabbit.webdav.property.DavPropertyName;

        r5 = $r9;

        specialinvoke $r9.<org.apache.jackrabbit.webdav.property.DavPropertyName: void <init>(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r9);

     label4:
        exitmonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

        return r5;

     label5:
        $r7 := @caughtexception;

        exitmonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

        throw $r7;

        catch java.lang.Throwable from label1 to label4 with label5;
    }
    public static org.apache.jackrabbit.webdav.property.DavPropertyName createFromXml(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Throwable $r2;
        java.lang.String $r3, $r6, $r7;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r5;

        $r0 := @parameter0: org.w3c.dom.Element;

        entermonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

        if $r0 != null goto label3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot build DavPropertyName from a \'null\' element.");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

        throw $r2;

     label3:
        $r3 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        if $r3 != null goto label5;

        $r3 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $r4 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace EMPTY_NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r3, $r4);

     label4:
        exitmonitor class "Lorg/apache/jackrabbit/webdav/property/DavPropertyName;";

        return $r5;

     label5:
        $r6 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $r7 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getPrefix()>();

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String,java.lang.String)>($r7, $r3);

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName create(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, $r4);

     label6:
        goto label4;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyName r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r3, $r4;
        org.apache.jackrabbit.webdav.xml.Namespace $r5, $r6;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.apache.jackrabbit.webdav.property.DavPropertyName;

        if $z0 == 0 goto label1;

        r2 = (org.apache.jackrabbit.webdav.property.DavPropertyName) $r1;

        $r3 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String name>;

        $r4 = r2.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String name>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        $r6 = r2.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        $z0 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.Namespace: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyName r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyName;

        r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String name>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.xml.Namespace getNamespace()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyName r0;
        org.apache.jackrabbit.webdav.xml.Namespace r1;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyName;

        r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        return r1;
    }
    public int hashCode()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyName r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        $i1 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.xml.Namespace: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 % 2147483647;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.apache.jackrabbit.webdav.property.DavPropertyName r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String name>;

        $r1 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getExpandedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r2, $r1);

        return $r2;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.property.DavPropertyName r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r4 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String name>;

        $r2 = r0.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r4, $r2);

        return $r3;
    }
