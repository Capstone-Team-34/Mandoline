org.apache.jackrabbit.webdav.lock.SimpleLockManager extends java.lang.Object implements org.apache.jackrabbit.webdav.lock.LockManager
private java.util.Map locks
    public void <init>()
    {
        org.apache.jackrabbit.webdav.lock.SimpleLockManager r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.jackrabbit.webdav.lock.SimpleLockManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks> = $r1;

        return;
    }
    private org.apache.jackrabbit.webdav.lock.ActiveLock getLock(java.lang.String)
    {
        org.apache.jackrabbit.webdav.lock.SimpleLockManager r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.jackrabbit.webdav.lock.ActiveLock r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.lock.SimpleLockManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (org.apache.jackrabbit.webdav.lock.ActiveLock) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.lock.ActiveLock: boolean isExpired()>();

        if $z0 == 0 goto label1;

        r4 = null;

     label1:
        if r4 != null goto label2;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z0 != 0 goto label2;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.lang.String getParentPath(java.lang.String)>($r1);

        $r5 = specialinvoke r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: org.apache.jackrabbit.webdav.lock.ActiveLock getLock(java.lang.String)>($r1);

        if $r5 == null goto label2;

        $z0 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.lock.ActiveLock: boolean isDeep()>();

        if $z0 == 0 goto label2;

        return $r5;

     label2:
        return r4;
    }
    private static java.lang.String getParentPath(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(47);

        lookupswitch($i0)
        {
            case -1: goto label2;
            case 0: goto label3;
            default: goto label1;
        };

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;

     label2:
        return "";

     label3:
        return "/";
    }
    private static boolean isDescendant(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label2;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r0);

        if $z0 == 0 goto label3;

        return 1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label3:
        return 0;
    }
    private static boolean isInternalMember(org.apache.jackrabbit.webdav.DavResource, java.lang.String)
    {
        org.apache.jackrabbit.webdav.DavResource $r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.DavResourceIterator $r4;

        $r0 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke $r0.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.lang.String getParentPath(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r0.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResourceIterator getMembers()>();

     label1:
        $z0 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceIterator: org.apache.jackrabbit.webdav.DavResource nextResource()>();

        $r2 = interfaceinvoke $r0.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z0 = interfaceinvoke $r0.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public org.apache.jackrabbit.webdav.lock.ActiveLock createLock(org.apache.jackrabbit.webdav.lock.LockInfo, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.lock.SimpleLockManager r0;
        org.apache.jackrabbit.webdav.lock.LockInfo $r1;
        org.apache.jackrabbit.webdav.DavResource $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Throwable $r4;
        java.lang.String $r5, $r11, $r14;
        java.util.Map $r6;
        java.lang.Object $r7;
        org.apache.jackrabbit.webdav.lock.ActiveLock r8;
        boolean $z0;
        org.apache.jackrabbit.webdav.DavException $r9;
        java.lang.StringBuilder $r10;
        java.util.Set $r12;
        java.util.Iterator $r13;
        org.apache.jackrabbit.webdav.lock.DefaultActiveLock r15;

        r0 := @this: org.apache.jackrabbit.webdav.lock.SimpleLockManager;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.lock.LockInfo;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.DavResource;

        entermonitor r0;

        if $r1 == null goto label01;

        if $r2 != null goto label03;

     label01:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Neither lockInfo nor resource must be null.");

        throw $r3;

     label02:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label03:
        $r5 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r6 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (org.apache.jackrabbit.webdav.lock.ActiveLock) $r7;

        if r8 == null goto label04;

        $z0 = interfaceinvoke r8.<org.apache.jackrabbit.webdav.lock.ActiveLock: boolean isExpired()>();

        if $z0 == 0 goto label04;

        $r6 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        r8 = null;

     label04:
        if r8 == null goto label05;

        $r9 = new org.apache.jackrabbit.webdav.DavException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource \'");

        $r11 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already holds a lock.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(423, $r11);

        throw $r9;

     label05:
        $r6 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r12 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.String) $r7;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.lock.SimpleLockManager: boolean isDescendant(java.lang.String,java.lang.String)>($r11, $r5);

        if $z0 == 0 goto label08;

        $r6 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r8 = (org.apache.jackrabbit.webdav.lock.ActiveLock) $r7;

        $z0 = interfaceinvoke r8.<org.apache.jackrabbit.webdav.lock.ActiveLock: boolean isDeep()>();

        if $z0 != 0 goto label07;

        $r14 = staticinvoke <org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.lang.String getParentPath(java.lang.String)>($r5);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 == 0 goto label06;

        $z0 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 != 0 goto label06;

     label07:
        $r9 = new org.apache.jackrabbit.webdav.DavException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource \'");

        $r11 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already inherits a lock by its collection.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(423, $r11);

        throw $r9;

     label08:
        $z0 = staticinvoke <org.apache.jackrabbit.webdav.lock.SimpleLockManager: boolean isDescendant(java.lang.String,java.lang.String)>($r5, $r11);

        if $z0 == 0 goto label06;

        $z0 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.lock.LockInfo: boolean isDeep()>();

        if $z0 != 0 goto label09;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.lock.SimpleLockManager: boolean isInternalMember(org.apache.jackrabbit.webdav.DavResource,java.lang.String)>($r2, $r11);

        if $z0 == 0 goto label06;

     label09:
        $r9 = new org.apache.jackrabbit.webdav.DavException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource \'");

        $r5 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be locked due to a lock present on the member resource \'");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(409, $r11);

        throw $r9;

     label10:
        r15 = new org.apache.jackrabbit.webdav.lock.DefaultActiveLock;

        specialinvoke r15.<org.apache.jackrabbit.webdav.lock.DefaultActiveLock: void <init>(org.apache.jackrabbit.webdav.lock.LockInfo)>($r1);

        $r6 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r11 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r15);

     label11:
        exitmonitor r0;

        return r15;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label11 with label02;
    }
    public org.apache.jackrabbit.webdav.lock.ActiveLock getLock(org.apache.jackrabbit.webdav.lock.Type, org.apache.jackrabbit.webdav.lock.Scope, org.apache.jackrabbit.webdav.DavResource)
    {
        org.apache.jackrabbit.webdav.lock.SimpleLockManager r0;
        org.apache.jackrabbit.webdav.lock.Type $r1, $r4;
        org.apache.jackrabbit.webdav.lock.Scope $r2, $r5;
        org.apache.jackrabbit.webdav.DavResource $r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.lock.ActiveLock $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.jackrabbit.webdav.lock.SimpleLockManager;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.lock.Type;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.lock.Scope;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        entermonitor r0;

     label1:
        $r4 = <org.apache.jackrabbit.webdav.lock.Type: org.apache.jackrabbit.webdav.lock.Type WRITE>;

        $z0 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.lock.Type: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r5 = <org.apache.jackrabbit.webdav.lock.Scope: org.apache.jackrabbit.webdav.lock.Scope EXCLUSIVE>;

        $z0 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.lock.Scope: boolean equals(java.lang.Object)>($r2);

     label2:
        if $z0 != 0 goto label5;

     label3:
        $r6 = null;

     label4:
        exitmonitor r0;

        return $r6;

     label5:
        $r7 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r6 = specialinvoke r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: org.apache.jackrabbit.webdav.lock.ActiveLock getLock(java.lang.String)>($r7);

     label6:
        goto label4;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
    public boolean hasLock(java.lang.String, org.apache.jackrabbit.webdav.DavResource)
    {
        org.apache.jackrabbit.webdav.lock.SimpleLockManager r0;
        java.lang.String $r1, $r4;
        org.apache.jackrabbit.webdav.DavResource $r2;
        java.util.Map $r3;
        java.lang.Object $r5;
        org.apache.jackrabbit.webdav.lock.ActiveLock r6;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.lock.SimpleLockManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.DavResource;

        $r3 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r4 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (org.apache.jackrabbit.webdav.lock.ActiveLock) $r5;

        if r6 == null goto label1;

        $r4 = interfaceinvoke r6.<org.apache.jackrabbit.webdav.lock.ActiveLock: java.lang.String getToken()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.jackrabbit.webdav.lock.ActiveLock refreshLock(org.apache.jackrabbit.webdav.lock.LockInfo, java.lang.String, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.lock.SimpleLockManager r0;
        org.apache.jackrabbit.webdav.lock.LockInfo $r1;
        java.lang.String $r2, $r8;
        org.apache.jackrabbit.webdav.DavResource $r3;
        org.apache.jackrabbit.webdav.lock.Type $r4;
        org.apache.jackrabbit.webdav.lock.Scope $r5;
        org.apache.jackrabbit.webdav.lock.ActiveLock $r6;
        org.apache.jackrabbit.webdav.DavException $r7;
        boolean $z0;
        long $l0;

        r0 := @this: org.apache.jackrabbit.webdav.lock.SimpleLockManager;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.lock.LockInfo;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.lock.LockInfo: org.apache.jackrabbit.webdav.lock.Type getType()>();

        $r5 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.lock.LockInfo: org.apache.jackrabbit.webdav.lock.Scope getScope()>();

        $r6 = virtualinvoke r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: org.apache.jackrabbit.webdav.lock.ActiveLock getLock(org.apache.jackrabbit.webdav.lock.Type,org.apache.jackrabbit.webdav.lock.Scope,org.apache.jackrabbit.webdav.DavResource)>($r4, $r5, $r3);

        if $r6 != null goto label1;

        $r7 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r7.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(412);

        throw $r7;

     label1:
        $r8 = interfaceinvoke $r6.<org.apache.jackrabbit.webdav.lock.ActiveLock: java.lang.String getToken()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r7 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r7.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(423);

        throw $r7;

     label2:
        $l0 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.lock.LockInfo: long getTimeout()>();

        interfaceinvoke $r6.<org.apache.jackrabbit.webdav.lock.ActiveLock: void setTimeout(long)>($l0);

        return $r6;
    }
    public void releaseLock(java.lang.String, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.lock.SimpleLockManager r0;
        java.lang.String $r1, $r4;
        org.apache.jackrabbit.webdav.DavResource $r2;
        java.util.Map $r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.DavException $r5;
        java.lang.Throwable $r6;
        java.lang.Object $r7;
        org.apache.jackrabbit.webdav.lock.ActiveLock r8;

        r0 := @this: org.apache.jackrabbit.webdav.lock.SimpleLockManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.DavResource;

        entermonitor r0;

     label1:
        $r3 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r4 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r5 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r5.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(412);

        throw $r5;

     label2:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

     label3:
        $r3 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r4 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        $r7 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r8 = (org.apache.jackrabbit.webdav.lock.ActiveLock) $r7;

        $r4 = interfaceinvoke r8.<org.apache.jackrabbit.webdav.lock.ActiveLock: java.lang.String getToken()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r3 = r0.<org.apache.jackrabbit.webdav.lock.SimpleLockManager: java.util.Map locks>;

        $r1 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getResourcePath()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r5 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r5.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(423);

        throw $r5;

     label6:
        nop;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }
