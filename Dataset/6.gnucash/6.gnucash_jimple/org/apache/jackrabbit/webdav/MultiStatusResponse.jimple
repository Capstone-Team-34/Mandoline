org.apache.jackrabbit.webdav.MultiStatusResponse extends java.lang.Object implements org.apache.jackrabbit.webdav.xml.XmlSerializable org.apache.jackrabbit.webdav.DavConstants
private static final int TYPE_HREFSTATUS
private static final int TYPE_PROPSTAT
private final java.lang.String href
private final java.lang.String responseDescription
private org.apache.jackrabbit.webdav.Status status
private java.util.HashMap statusMap
private final int type
    public void <init>(java.lang.String, int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,int,java.lang.String)>($r1, $i0, null);

        return;
    }
    public void <init>(java.lang.String, int, java.lang.String)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        java.lang.String $r1, $r2;
        int $i0;
        org.apache.jackrabbit.webdav.Status $r3;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 = new org.apache.jackrabbit.webdav.Status;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.Status: void <init>(int)>($i0);

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,org.apache.jackrabbit.webdav.Status,java.lang.String)>($r1, $r3, $r2);

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,java.lang.String,int)>($r1, $r2, 0);

        return;
    }
    private void <init>(java.lang.String, java.lang.String, int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.util.HashMap $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap> = $r3;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.MultiStatusResponse: boolean isValidHref(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid href (\'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String href> = $r1;

        r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String responseDescription> = $r2;

        r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: int type> = $i0;

        return;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.Status, java.lang.String)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        java.lang.String $r1, $r3;
        org.apache.jackrabbit.webdav.Status $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.Status;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,java.lang.String,int)>($r1, $r3, 1);

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Status must not be null in case of a multistatus reponse that consists of href + status only.");

        throw $r4;

     label1:
        r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.Status status> = $r2;

        return;
    }
    public void <init>(org.apache.jackrabbit.webdav.DavResource, org.apache.jackrabbit.webdav.property.DavPropertyNameSet)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int)>($r1, $r2, 0);

        return;
    }
    public void <init>(org.apache.jackrabbit.webdav.DavResource, org.apache.jackrabbit.webdav.property.DavPropertyNameSet, int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;
        int $i0, i1;
        java.util.HashSet r3, $r13;
        java.lang.String $r4;
        org.apache.jackrabbit.webdav.property.PropContainer $r5;
        org.apache.jackrabbit.webdav.property.DavPropertyName[] $r6;
        org.apache.jackrabbit.webdav.property.DavPropertyName r7;
        java.util.Collection $r8;
        java.util.Iterator $r9;
        boolean $z0, z1;
        java.lang.Object $r10;
        org.apache.jackrabbit.webdav.property.DavProperty $r11;
        org.apache.jackrabbit.webdav.property.DavPropertySet $r12;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $i0 := @parameter2: int;

        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getHref()>();

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,java.lang.String,int)>($r4, null, 0);

        if $i0 != 2 goto label02;

        $r5 = specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int,boolean)>(200, 1);

        $r6 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.property.DavPropertyName[] getPropertyNames()>();

        $i0 = lengthof $r6;

        i1 = 0;

     label01:
        if i1 >= $i0 goto label15;

        r7 = $r6[i1];

        virtualinvoke $r5.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>(r7);

        i1 = i1 + 1;

        goto label01;

     label02:
        $r5 = specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int,boolean)>(200, 0);

        r3 = new java.util.HashSet;

        $r8 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Collection getContent()>();

        specialinvoke r3.<java.util.HashSet: void <init>(java.util.Collection)>($r8);

        if $i0 != 0 goto label04;

        $r9 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.jackrabbit.webdav.property.DavPropertyName) $r10;

        $r11 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.property.DavProperty getProperty(org.apache.jackrabbit.webdav.property.DavPropertyName)>(r7);

        if $r11 == null goto label03;

        virtualinvoke $r5.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>($r11);

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>(r7);

        goto label03;

     label04:
        $r12 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.property.DavPropertySet getProperties()>();

        $r9 = virtualinvoke $r12.<org.apache.jackrabbit.webdav.property.DavPropertySet: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.apache.jackrabbit.webdav.property.DavProperty) $r10;

        if $i0 == 1 goto label06;

        if $i0 != 3 goto label10;

     label06:
        z1 = 1;

     label07:
        r7 = interfaceinvoke $r11.<org.apache.jackrabbit.webdav.property.DavProperty: org.apache.jackrabbit.webdav.property.DavPropertyName getName()>();

        $z0 = interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>(r7);

        if z1 == 0 goto label08;

        z1 = interfaceinvoke $r11.<org.apache.jackrabbit.webdav.property.DavProperty: boolean isInvisibleInAllprop()>();

        if z1 == 0 goto label09;

     label08:
        if $z0 == 0 goto label05;

     label09:
        virtualinvoke $r5.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>($r11);

        goto label05;

     label10:
        z1 = 0;

        goto label07;

     label11:
        if $i0 != 3 goto label13;

        $z0 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label13;

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>(java.util.Collection)>(r3);

        $r9 = virtualinvoke $r13.<java.util.HashSet: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.jackrabbit.webdav.property.DavPropertyName) $r10;

        $r11 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.property.DavProperty getProperty(org.apache.jackrabbit.webdav.property.DavPropertyName)>(r7);

        if $r11 == null goto label12;

        virtualinvoke $r5.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>($r11);

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>(r7);

        goto label12;

     label13:
        $z0 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label15;

        if $i0 == 1 goto label15;

        $r5 = specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int,boolean)>(404, 1);

        $r9 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.jackrabbit.webdav.property.DavPropertyName) $r10;

        virtualinvoke $r5.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>(r7);

        goto label14;

     label15:
        return;
    }
    private void checkType(int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: int type>;

        if $i1 == $i0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The given MultiStatusResponse is not of the required type.");

        throw $r1;

     label1:
        return;
    }
    public static org.apache.jackrabbit.webdav.MultiStatusResponse createFromXml(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r4, $r5;
        org.apache.jackrabbit.webdav.Status $r6;
        org.apache.jackrabbit.webdav.MultiStatusResponse r7;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r8, $r9;
        int $i0;
        org.apache.jackrabbit.webdav.property.DefaultDavProperty $r10;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "response", $r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DAV:response element required.");

        throw $r2;

     label1:
        $r1 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildTextTrim(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "href", $r1);

        if $r3 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DAV:response element must contain a DAV:href element expected.");

        throw $r2;

     label2:
        $r1 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "status", $r1);

        $r1 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "responsedescription", $r1);

        if $r4 == null goto label3;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.Status: org.apache.jackrabbit.webdav.Status parse(java.lang.String)>($r4);

        r7 = new org.apache.jackrabbit.webdav.MultiStatusResponse;

        specialinvoke r7.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,org.apache.jackrabbit.webdav.Status,java.lang.String)>($r3, $r6, $r5);

        return r7;

     label3:
        r7 = new org.apache.jackrabbit.webdav.MultiStatusResponse;

        specialinvoke r7.<org.apache.jackrabbit.webdav.MultiStatusResponse: void <init>(java.lang.String,java.lang.String,int)>($r3, $r5, 0);

        $r1 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "propstat", $r1);

     label4:
        $z0 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r0 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r1 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "status", $r1);

        $r1 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "prop", $r1);

        if $r3 == null goto label4;

        if $r0 == null goto label4;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.Status: org.apache.jackrabbit.webdav.Status parse(java.lang.String)>($r3);

        $i0 = virtualinvoke $r6.<org.apache.jackrabbit.webdav.Status: int getStatusCode()>();

        $r9 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element)>($r0);

     label5:
        $z0 = virtualinvoke $r9.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r0 = virtualinvoke $r9.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r10 = staticinvoke <org.apache.jackrabbit.webdav.property.DefaultDavProperty: org.apache.jackrabbit.webdav.property.DefaultDavProperty createFromXml(org.w3c.dom.Element)>($r0);

        virtualinvoke r7.<org.apache.jackrabbit.webdav.MultiStatusResponse: void add(org.apache.jackrabbit.webdav.property.DavProperty,int)>($r10, $i0);

        goto label5;

     label6:
        return r7;
    }
    private org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int, boolean)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        int $i0;
        boolean $z0;
        java.util.HashMap $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        org.apache.jackrabbit.webdav.property.PropContainer r4;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r5;
        org.apache.jackrabbit.webdav.property.DavPropertySet $r6;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.jackrabbit.webdav.property.PropContainer) $r3;

        if r4 != null goto label3;

        if $z0 == 0 goto label2;

        $r5 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        r4 = $r5;

        specialinvoke $r5.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

     label1:
        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r4);

        return r4;

     label2:
        $r6 = new org.apache.jackrabbit.webdav.property.DavPropertySet;

        r4 = $r6;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.property.DavPropertySet: void <init>()>();

        goto label1;

     label3:
        return r4;
    }
    private static boolean isValidHref(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void add(org.apache.jackrabbit.webdav.property.DavProperty)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        org.apache.jackrabbit.webdav.property.DavProperty r1;
        org.apache.jackrabbit.webdav.property.PropContainer $r2;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavProperty;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void checkType(int)>(0);

        $r2 = specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int,boolean)>(200, 0);

        virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>(r1);

        return;
    }
    public void add(org.apache.jackrabbit.webdav.property.DavProperty, int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        org.apache.jackrabbit.webdav.property.DavProperty r1;
        int $i0;
        org.apache.jackrabbit.webdav.property.PropContainer $r2;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavProperty;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void checkType(int)>(0);

        $r2 = specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int,boolean)>($i0, 0);

        virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>(r1);

        return;
    }
    public void add(org.apache.jackrabbit.webdav.property.DavPropertyName)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        org.apache.jackrabbit.webdav.property.PropContainer $r2;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void checkType(int)>(0);

        $r2 = specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int,boolean)>(200, 1);

        virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>($r1);

        return;
    }
    public void add(org.apache.jackrabbit.webdav.property.DavPropertyName, int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r1;
        int $i0;
        org.apache.jackrabbit.webdav.property.PropContainer $r2;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.property.DavPropertyName;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: void checkType(int)>(0);

        $r2 = specialinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.PropContainer getPropContainer(int,boolean)>($i0, 1);

        virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.PropContainer: boolean addContent(org.apache.jackrabbit.webdav.property.PropEntry)>($r1);

        return;
    }
    public java.lang.String getHref()
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String href>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.property.DavPropertySet getProperties(int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        int $i0;
        java.util.HashMap $r1;
        java.lang.Integer $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.jackrabbit.webdav.property.PropContainer r4;
        org.apache.jackrabbit.webdav.property.DavPropertySet r5;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.jackrabbit.webdav.property.PropContainer) $r3;

        if r4 == null goto label1;

        $z0 = r4 instanceof org.apache.jackrabbit.webdav.property.DavPropertySet;

        if $z0 == 0 goto label1;

        r5 = (org.apache.jackrabbit.webdav.property.DavPropertySet) r4;

        return r5;

     label1:
        r5 = new org.apache.jackrabbit.webdav.property.DavPropertySet;

        specialinvoke r5.<org.apache.jackrabbit.webdav.property.DavPropertySet: void <init>()>();

        return r5;
    }
    public org.apache.jackrabbit.webdav.property.DavPropertyNameSet getPropertyNames(int)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        int $i0, i1;
        org.apache.jackrabbit.webdav.property.DavPropertyName r1;
        java.util.HashMap $r2;
        java.lang.Integer $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.jackrabbit.webdav.property.PropContainer r5;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r6;
        org.apache.jackrabbit.webdav.property.DavPropertySet r7;
        org.apache.jackrabbit.webdav.property.DavPropertyName[] $r8;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $i0 := @parameter0: int;

        $r2 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r2 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.apache.jackrabbit.webdav.property.PropContainer) $r4;

        if r5 == null goto label3;

        $z0 = r5 instanceof org.apache.jackrabbit.webdav.property.DavPropertySet;

        if $z0 == 0 goto label2;

        r6 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r6.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        r7 = (org.apache.jackrabbit.webdav.property.DavPropertySet) r5;

        $r8 = virtualinvoke r7.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavPropertyName[] getPropertyNames()>();

        $i0 = lengthof $r8;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        r1 = $r8[i1];

        virtualinvoke r6.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        r6 = (org.apache.jackrabbit.webdav.property.DavPropertyNameSet) r5;

        return r6;

     label3:
        r6 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r6.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

     label4:
        return r6;
    }
    public java.lang.String getResponseDescription()
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String responseDescription>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.Status[] getStatus()
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        int $i0, $i1;
        java.util.HashMap $r1;
        org.apache.jackrabbit.webdav.Status[] r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Integer r6;
        org.apache.jackrabbit.webdav.Status $r7;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $i0 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: int type>;

        if $i0 != 0 goto label2;

        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        r2 = newarray (org.apache.jackrabbit.webdav.Status)[$i0];

        $r1 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Integer) $r5;

        $r7 = new org.apache.jackrabbit.webdav.Status;

        $i1 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        specialinvoke $r7.<org.apache.jackrabbit.webdav.Status: void <init>(int)>($i1);

        r2[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r2 = newarray (org.apache.jackrabbit.webdav.Status)[1];

        $r7 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.Status status>;

        r2[0] = $r7;

     label3:
        return r2;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.MultiStatusResponse r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.Status r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;
        org.w3c.dom.Element $r4, $r6, $r13;
        java.lang.String $r5;
        int $i0;
        java.util.HashMap $r7;
        java.util.Set $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.Integer r11;
        org.apache.jackrabbit.webdav.property.PropContainer r12;

        r0 := @this: org.apache.jackrabbit.webdav.MultiStatusResponse;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r3 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "response", $r3);

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String getHref()>();

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element hrefToXml(java.lang.String,org.w3c.dom.Document)>($r5, $r1);

        interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        $i0 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: int type>;

        if $i0 != 0 goto label2;

        $r7 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.Integer) $r10;

        r2 = new org.apache.jackrabbit.webdav.Status;

        $i0 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        specialinvoke r2.<org.apache.jackrabbit.webdav.Status: void <init>(int)>($i0);

        $r7 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.util.HashMap statusMap>;

        $r10 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (org.apache.jackrabbit.webdav.property.PropContainer) $r10;

        $z0 = virtualinvoke r12.<org.apache.jackrabbit.webdav.property.PropContainer: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "propstat", $r3);

        $r13 = virtualinvoke r12.<org.apache.jackrabbit.webdav.property.PropContainer: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        $r13 = virtualinvoke r2.<org.apache.jackrabbit.webdav.Status: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        goto label1;

     label2:
        r2 = r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.Status status>;

        $r6 = virtualinvoke r2.<org.apache.jackrabbit.webdav.Status: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label3:
        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String getResponseDescription()>();

        if $r5 == null goto label4;

        $r3 = <org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "responsedescription", $r3);

        staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: void setText(org.w3c.dom.Element,java.lang.String)>($r6, $r5);

        interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label4:
        return $r4;
    }
