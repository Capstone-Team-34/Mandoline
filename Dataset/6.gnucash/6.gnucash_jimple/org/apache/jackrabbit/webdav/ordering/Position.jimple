org.apache.jackrabbit.webdav.ordering.Position extends java.lang.Object implements org.apache.jackrabbit.webdav.ordering.OrderingConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
private static final java.util.Set VALID_TYPES
private static org.slf4j.Logger log
private final java.lang.String segment
private final java.lang.String type
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.HashSet $r1;
        java.util.Set $r2;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/ordering/Position;");

        <org.apache.jackrabbit.webdav.ordering.Position: org.slf4j.Logger log> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.apache.jackrabbit.webdav.ordering.Position: java.util.Set VALID_TYPES> = $r1;

        $r2 = <org.apache.jackrabbit.webdav.ordering.Position: java.util.Set VALID_TYPES>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("first");

        $r2 = <org.apache.jackrabbit.webdav.ordering.Position: java.util.Set VALID_TYPES>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("last");

        $r2 = <org.apache.jackrabbit.webdav.ordering.Position: java.util.Set VALID_TYPES>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("after");

        $r2 = <org.apache.jackrabbit.webdav.ordering.Position: java.util.Set VALID_TYPES>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("before");

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.jackrabbit.webdav.ordering.Position r0;
        java.lang.String $r1, $r5;
        java.util.Set $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.Position;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.jackrabbit.webdav.ordering.Position: java.util.Set VALID_TYPES>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        $r5 = "first";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r5 = "last";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("If type is other than \'first\' or \'last\' a segment must be specified");

        throw $r3;

     label2:
        r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String type> = $r1;

        r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String segment> = null;

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.jackrabbit.webdav.ordering.Position r0;
        java.lang.String $r1, $r2, $r6;
        java.util.Set $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.Position;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <org.apache.jackrabbit.webdav.ordering.Position: java.util.Set VALID_TYPES>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        $r6 = "after";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r6 = "before";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

     label2:
        if $r2 == null goto label3;

        $r6 = "";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("If type is other than \'first\' or \'last\' a segment must be specified");

        throw $r4;

     label4:
        r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String type> = $r1;

        r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String segment> = $r2;

        return;
    }
    public static org.apache.jackrabbit.webdav.ordering.Position createFromXml(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r3;
        java.lang.String $r4, $r5;
        org.apache.jackrabbit.webdav.ordering.Position $r6;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 = <org.apache.jackrabbit.webdav.ordering.Position: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "position", $r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'DAV:position\' element required.");

        throw $r2;

     label1:
        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element)>($r0);

        $z0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r4 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $r1 = <org.apache.jackrabbit.webdav.ordering.Position: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "segment", $r1);

        $r6 = new org.apache.jackrabbit.webdav.ordering.Position;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.ordering.Position: void <init>(java.lang.String,java.lang.String)>($r4, $r5);

        return $r6;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'DAV:position\' element required with exact one child indicating the type.");

        throw $r2;
    }
    public java.lang.String getSegment()
    {
        org.apache.jackrabbit.webdav.ordering.Position r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.Position;

        r1 = r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String segment>;

        return r1;
    }
    public java.lang.String getType()
    {
        org.apache.jackrabbit.webdav.ordering.Position r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.Position;

        r1 = r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String type>;

        return r1;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.ordering.Position r0;
        org.w3c.dom.Document $r1;
        java.lang.String $r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;
        org.w3c.dom.Element $r4, $r5;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.Position;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r3 = <org.apache.jackrabbit.webdav.ordering.Position: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "position", $r3);

        $r2 = r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String type>;

        $r3 = <org.apache.jackrabbit.webdav.ordering.Position: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r4, $r2, $r3);

        $r2 = r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String segment>;

        if $r2 == null goto label1;

        $r3 = <org.apache.jackrabbit.webdav.ordering.Position: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r2 = r0.<org.apache.jackrabbit.webdav.ordering.Position: java.lang.String segment>;

        staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r5, "segment", $r3, $r2);

     label1:
        return $r4;
    }
