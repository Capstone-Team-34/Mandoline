org.apache.jackrabbit.webdav.ordering.OrderPatch extends java.lang.Object implements org.apache.jackrabbit.webdav.ordering.OrderingConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
private static org.slf4j.Logger log
private org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] instructions
private java.lang.String orderingType
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/ordering/OrderPatch;");

        <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.ordering.OrderPatch$Member)
    {
        org.apache.jackrabbit.webdav.ordering.OrderPatch r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member $r2;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] $r3;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.OrderPatch;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.ordering.OrderPatch$Member;

        $r3 = newarray (org.apache.jackrabbit.webdav.ordering.OrderPatch$Member)[1];

        $r3[0] = $r2;

        specialinvoke r0.<org.apache.jackrabbit.webdav.ordering.OrderPatch: void <init>(java.lang.String,org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[])>($r1, $r3);

        return;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[])
    {
        org.apache.jackrabbit.webdav.ordering.OrderPatch r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.OrderPatch;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ordering type and instructions cannot be null.");

        throw $r3;

     label2:
        r0.<org.apache.jackrabbit.webdav.ordering.OrderPatch: java.lang.String orderingType> = $r1;

        r0.<org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] instructions> = $r2;

        return;
    }
    public static org.apache.jackrabbit.webdav.ordering.OrderPatch createFromXml(org.w3c.dom.Element) throws org.apache.jackrabbit.webdav.DavException
    {
        org.w3c.dom.Element $r0, $r7;
        java.lang.IllegalArgumentException r1;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member r2;
        java.util.ArrayList r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        boolean $z0;
        org.slf4j.Logger $r5;
        org.apache.jackrabbit.webdav.DavException $r6;
        java.lang.String $r8, $r10;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r9;
        org.apache.jackrabbit.webdav.ordering.Position $r11;
        java.lang.StringBuilder $r12;
        int $i0;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] $r13;
        java.lang.Object[] $r14;
        org.apache.jackrabbit.webdav.ordering.OrderPatch $r15;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r4 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "orderpatch", $r4);

        if $z0 != 0 goto label01;

        $r5 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("ORDERPATH request body must start with an \'orderpatch\' element.");

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label01:
        $r4 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "ordering-type", $r4);

        if $r7 == null goto label10;

        $r4 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r7, "href", $r4);

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r4 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r9 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "order-member", $r4);

     label02:
        $z0 = virtualinvoke $r9.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r0 = virtualinvoke $r9.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r4 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label03:
        $r10 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "segment", $r4);

     label04:
        $r4 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label05:
        $r0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "position", $r4);

        $r11 = staticinvoke <org.apache.jackrabbit.webdav.ordering.Position: org.apache.jackrabbit.webdav.ordering.Position createFromXml(org.w3c.dom.Element)>($r0);

     label06:
        r2 = new org.apache.jackrabbit.webdav.ordering.OrderPatch$Member;

     label07:
        specialinvoke r2.<org.apache.jackrabbit.webdav.ordering.OrderPatch$Member: void <init>(java.lang.String,org.apache.jackrabbit.webdav.ordering.Position)>($r10, $r11);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label08:
        goto label02;

     label09:
        r1 := @caughtexception;

        $r5 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.slf4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid element in \'orderpatch\' request body: ");

        $r8 = virtualinvoke r1.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>($r8);

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label10:
        $r5 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("ORDERPATH request body must contain an \'ordering-type\' child element.");

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label11:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r13 = newarray (org.apache.jackrabbit.webdav.ordering.OrderPatch$Member)[$i0];

        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r13 = (org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[]) $r14;

        $r15 = new org.apache.jackrabbit.webdav.ordering.OrderPatch;

        specialinvoke $r15.<org.apache.jackrabbit.webdav.ordering.OrderPatch: void <init>(java.lang.String,org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[])>($r8, $r13);

        return $r15;

        catch java.lang.IllegalArgumentException from label03 to label04 with label09;
        catch java.lang.IllegalArgumentException from label05 to label06 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }
    public org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] getOrderInstructions()
    {
        org.apache.jackrabbit.webdav.ordering.OrderPatch r0;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] r1;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.OrderPatch;

        r1 = r0.<org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] instructions>;

        return r1;
    }
    public java.lang.String getOrderingType()
    {
        org.apache.jackrabbit.webdav.ordering.OrderPatch r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.OrderPatch;

        r1 = r0.<org.apache.jackrabbit.webdav.ordering.OrderPatch: java.lang.String orderingType>;

        return r1;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.ordering.OrderPatch r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] r2;
        org.apache.jackrabbit.webdav.ordering.OrderPatch$Member r3;
        int i0, i1;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        org.w3c.dom.Element $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: org.apache.jackrabbit.webdav.ordering.OrderPatch;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r4 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "orderpatch", $r4);

        $r4 = <org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r5, "ordering-type", $r4);

        $r7 = r0.<org.apache.jackrabbit.webdav.ordering.OrderPatch: java.lang.String orderingType>;

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element hrefToXml(java.lang.String,org.w3c.dom.Document)>($r7, $r1);

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        r2 = r0.<org.apache.jackrabbit.webdav.ordering.OrderPatch: org.apache.jackrabbit.webdav.ordering.OrderPatch$Member[] instructions>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r6 = virtualinvoke r3.<org.apache.jackrabbit.webdav.ordering.OrderPatch$Member: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r5;
    }
