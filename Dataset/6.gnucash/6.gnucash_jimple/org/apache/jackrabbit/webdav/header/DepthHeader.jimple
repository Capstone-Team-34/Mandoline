org.apache.jackrabbit.webdav.header.DepthHeader extends java.lang.Object implements org.apache.jackrabbit.webdav.header.Header org.apache.jackrabbit.webdav.DavConstants
private static org.slf4j.Logger log
private final int depth
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/header/DepthHeader;");

        <org.apache.jackrabbit.webdav.header.DepthHeader: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(int)
    {
        org.apache.jackrabbit.webdav.header.DepthHeader r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.jackrabbit.webdav.header.DepthHeader;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 == 0 goto label1;

        if $i0 == 1 goto label1;

        if $i0 != 2147483647 goto label2;

     label1:
        r0.<org.apache.jackrabbit.webdav.header.DepthHeader: int depth> = $i0;

        return;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid depth: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }
    public void <init>(boolean)
    {
        org.apache.jackrabbit.webdav.header.DepthHeader r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.header.DepthHeader;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $z0 == 0 goto label2;

        $i0 = 2147483647;

     label1:
        r0.<org.apache.jackrabbit.webdav.header.DepthHeader: int depth> = $i0;

        return;

     label2:
        $i0 = 0;

        goto label1;
    }
    private static int depthToInt(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("infinity");

        if $z0 == 0 goto label1;

        return 2147483647;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid depth value: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }
    public static org.apache.jackrabbit.webdav.header.DepthHeader parse(javax.servlet.http.HttpServletRequest, int)
    {
        javax.servlet.http.HttpServletRequest $r0;
        int $i0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.apache.jackrabbit.webdav.header.DepthHeader $r3;

        $r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $i0 := @parameter1: int;

        $r1 = interfaceinvoke $r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Depth");

        if $r1 == null goto label1;

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $r3 = new org.apache.jackrabbit.webdav.header.DepthHeader;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.header.DepthHeader: void <init>(int)>($i0);

        return $r3;

     label2:
        $r3 = new org.apache.jackrabbit.webdav.header.DepthHeader;

        $i0 = staticinvoke <org.apache.jackrabbit.webdav.header.DepthHeader: int depthToInt(java.lang.String)>($r1);

        specialinvoke $r3.<org.apache.jackrabbit.webdav.header.DepthHeader: void <init>(int)>($i0);

        return $r3;
    }
    public int getDepth()
    {
        org.apache.jackrabbit.webdav.header.DepthHeader r0;
        int i0;

        r0 := @this: org.apache.jackrabbit.webdav.header.DepthHeader;

        i0 = r0.<org.apache.jackrabbit.webdav.header.DepthHeader: int depth>;

        return i0;
    }
    public java.lang.String getHeaderName()
    {
        org.apache.jackrabbit.webdav.header.DepthHeader r0;

        r0 := @this: org.apache.jackrabbit.webdav.header.DepthHeader;

        return "Depth";
    }
    public java.lang.String getHeaderValue()
    {
        org.apache.jackrabbit.webdav.header.DepthHeader r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.header.DepthHeader;

        $i0 = r0.<org.apache.jackrabbit.webdav.header.DepthHeader: int depth>;

        if $i0 == 0 goto label1;

        $i0 = r0.<org.apache.jackrabbit.webdav.header.DepthHeader: int depth>;

        if $i0 != 1 goto label2;

     label1:
        $i0 = r0.<org.apache.jackrabbit.webdav.header.DepthHeader: int depth>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r1;

     label2:
        return "infinity";
    }
