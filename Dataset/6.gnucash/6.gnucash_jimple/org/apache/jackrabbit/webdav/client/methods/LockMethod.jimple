org.apache.jackrabbit.webdav.client.methods.LockMethod extends org.apache.jackrabbit.webdav.client.methods.DavMethodBase
private static org.slf4j.Logger log
private final boolean isRefresh
private org.apache.jackrabbit.webdav.lock.LockDiscovery lockDiscovery
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/client/methods/LockMethod;");

        <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.lang.String, long, java.lang.String[])
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        java.lang.String $r1;
        long $l0;
        java.lang.String[] $r2;
        org.apache.jackrabbit.webdav.header.IfHeader r3;
        org.apache.jackrabbit.webdav.header.TimeoutHeader r4;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.lang.String[];

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        r4 = new org.apache.jackrabbit.webdav.header.TimeoutHeader;

        specialinvoke r4.<org.apache.jackrabbit.webdav.header.TimeoutHeader: void <init>(long)>($l0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>(r4);

        r3 = new org.apache.jackrabbit.webdav.header.IfHeader;

        specialinvoke r3.<org.apache.jackrabbit.webdav.header.IfHeader: void <init>(java.lang.String[])>($r2);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>(r3);

        r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: boolean isRefresh> = 1;

        return;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.lock.LockInfo) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.lock.LockInfo $r2;
        org.apache.jackrabbit.webdav.header.DepthHeader r3;
        org.apache.jackrabbit.webdav.header.TimeoutHeader r4;
        boolean $z0;
        long $l0;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.lock.LockInfo;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.lock.LockInfo: boolean isRefreshLock()>();

        if $z0 != 0 goto label1;

        r4 = new org.apache.jackrabbit.webdav.header.TimeoutHeader;

        $l0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.lock.LockInfo: long getTimeout()>();

        specialinvoke r4.<org.apache.jackrabbit.webdav.header.TimeoutHeader: void <init>(long)>($l0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>(r4);

        r3 = new org.apache.jackrabbit.webdav.header.DepthHeader;

        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.lock.LockInfo: boolean isDeep()>();

        specialinvoke r3.<org.apache.jackrabbit.webdav.header.DepthHeader: void <init>(boolean)>($z0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>(r3);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void setRequestBody(org.apache.jackrabbit.webdav.xml.XmlSerializable)>($r2);

        r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: boolean isRefresh> = 0;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create a LOCK request without lock info. Use the constructor taking lock tokens in order to build a LOCK request for refresh.");

        throw $r5;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.lock.Scope, org.apache.jackrabbit.webdav.lock.Type, java.lang.String, long, boolean) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        java.lang.String $r1, $r4;
        org.apache.jackrabbit.webdav.lock.Scope $r2;
        org.apache.jackrabbit.webdav.lock.Type $r3;
        long $l0;
        boolean $z0;
        org.apache.jackrabbit.webdav.lock.LockInfo $r5;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.lock.Scope;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.lock.Type;

        $r4 := @parameter3: java.lang.String;

        $l0 := @parameter4: long;

        $z0 := @parameter5: boolean;

        $r5 = new org.apache.jackrabbit.webdav.lock.LockInfo;

        specialinvoke $r5.<org.apache.jackrabbit.webdav.lock.LockInfo: void <init>(org.apache.jackrabbit.webdav.lock.Scope,org.apache.jackrabbit.webdav.lock.Type,java.lang.String,long,boolean)>($r2, $r3, $r4, $l0, $z0);

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void <init>(java.lang.String,org.apache.jackrabbit.webdav.lock.LockInfo)>($r1, $r5);

        return;
    }
    private boolean buildDiscoveryFromRoot(org.w3c.dom.Element)
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        org.w3c.dom.Element $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        boolean $z0;
        org.apache.jackrabbit.webdav.lock.LockDiscovery $r3;
        org.slf4j.Logger $r4;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        $r1 := @parameter0: org.w3c.dom.Element;

        $r2 = <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "prop", $r2);

        if $z0 == 0 goto label3;

        $r2 = <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "lockdiscovery", $r2);

        if $z0 == 0 goto label3;

        $r2 = <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "lockdiscovery", $r2);

        $r2 = <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "activelock", $r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.lock.LockDiscovery: org.apache.jackrabbit.webdav.lock.LockDiscovery createFromXml(org.w3c.dom.Element)>($r1);

        r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.lock.LockDiscovery lockDiscovery> = $r3;

        return 1;

     label1:
        $r4 = <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>("The DAV:lockdiscovery must contain a least a single DAV:activelock in response to a successful LOCK request.");

     label2:
        return 0;

     label3:
        $r4 = <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>("Missing DAV:prop response body in LOCK method.");

        goto label2;
    }
    public java.lang.String getLockToken()
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        org.apache.jackrabbit.webdav.header.CodedUrlHeader r1;
        org.apache.commons.httpclient.Header $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void checkUsed()>();

        $r2 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("Lock-Token");

        if $r2 == null goto label1;

        r1 = new org.apache.jackrabbit.webdav.header.CodedUrlHeader;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        specialinvoke r1.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: void <init>(java.lang.String,java.lang.String)>("Lock-Token", $r3);

        $r3 = virtualinvoke r1.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: java.lang.String getCodedUrl()>();

        return $r3;

     label1:
        return null;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        return "LOCK";
    }
    public org.apache.jackrabbit.webdav.lock.LockDiscovery getResponseAsLockDiscovery() throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        org.apache.jackrabbit.webdav.lock.LockDiscovery $r1;
        org.apache.jackrabbit.webdav.DavException $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.apache.commons.httpclient.StatusLine $r5;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void checkUsed()>();

        $r1 = r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.lock.LockDiscovery lockDiscovery>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.lock.LockDiscovery lockDiscovery>;

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.jackrabbit.webdav.DavException getResponseException()>();

        if $r2 == null goto label2;

        throw $r2;

     label2:
        $r2 = new org.apache.jackrabbit.webdav.DavException;

        $i0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: int getStatusCode()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resulted with unexpected status: ");

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>($i0, $r4);

        throw $r2;
    }
    protected boolean isSuccess(int)
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        $i0 := @parameter0: int;

        if $i0 == 200 goto label1;

        if $i0 != 201 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    protected void processResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.io.IOException r3;
        boolean $z0;
        org.w3c.dom.Element $r4;
        org.slf4j.Logger $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: boolean getSuccess()>();

        if $z0 == 0 goto label4;

     label1:
        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: org.w3c.dom.Element getRootElement()>();

        $z0 = specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: boolean buildDiscoveryFromRoot(org.w3c.dom.Element)>($r4);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void setSuccess(boolean)>($z0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r5 = <org.apache.jackrabbit.webdav.client.methods.LockMethod: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while parsing multistatus response: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void setSuccess(boolean)>(0);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public boolean succeeded()
    {
        org.apache.jackrabbit.webdav.client.methods.LockMethod r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.LockMethod;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: void checkUsed()>();

        $r1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: java.lang.String getLockToken()>();

        $z0 = r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: boolean isRefresh>;

        if $z0 == 0 goto label3;

        if $r1 != null goto label2;

        $z0 = 1;

     label1:
        $z1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.LockMethod: boolean getSuccess()>();

        if $z1 == 0 goto label5;

        if $z0 == 0 goto label5;

        return 1;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        if $r1 == null goto label4;

        $z0 = 1;

        goto label1;

     label4:
        $z0 = 0;

        goto label1;

     label5:
        return 0;
    }
