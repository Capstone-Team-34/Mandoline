org.apache.jackrabbit.webdav.client.methods.PollMethod extends org.apache.jackrabbit.webdav.client.methods.DavMethodBase implements org.apache.jackrabbit.webdav.observation.ObservationConstants
private static org.slf4j.Logger log
private org.apache.jackrabbit.webdav.observation.EventDiscovery eventDiscovery
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/client/methods/PollMethod;");

        <org.apache.jackrabbit.webdav.client.methods.PollMethod: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.jackrabbit.webdav.client.methods.PollMethod r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PollMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: void <init>(java.lang.String,java.lang.String,long)>($r1, $r2, 0L);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, long)
    {
        org.apache.jackrabbit.webdav.client.methods.PollMethod r0;
        java.lang.String $r1, $r2;
        long $l0;
        byte $b1;
        org.apache.jackrabbit.webdav.header.PollTimeoutHeader $r3;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PollMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: void setRequestHeader(java.lang.String,java.lang.String)>("SubscriptionId", $r2);

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r3 = new org.apache.jackrabbit.webdav.header.PollTimeoutHeader;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.header.PollTimeoutHeader: void <init>(long)>($l0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>($r3);

     label1:
        return;
    }
    private boolean buildDiscoveryFromRoot(org.w3c.dom.Element)
    {
        org.apache.jackrabbit.webdav.client.methods.PollMethod r0;
        org.w3c.dom.Element $r1;
        org.apache.jackrabbit.webdav.client.methods.PollMethod$1 r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.observation.EventDiscovery $r4;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r5;
        org.slf4j.Logger $r6;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PollMethod;

        $r1 := @parameter0: org.w3c.dom.Element;

        $r3 = <org.apache.jackrabbit.webdav.observation.ObservationConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "eventdiscovery", $r3);

        if $z0 == 0 goto label3;

        $r4 = new org.apache.jackrabbit.webdav.observation.EventDiscovery;

        specialinvoke $r4.<org.apache.jackrabbit.webdav.observation.EventDiscovery: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: org.apache.jackrabbit.webdav.observation.EventDiscovery eventDiscovery> = $r4;

        $r3 = <org.apache.jackrabbit.webdav.observation.ObservationConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "eventbundle", $r3);

     label1:
        $z0 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        r2 = new org.apache.jackrabbit.webdav.client.methods.PollMethod$1;

        specialinvoke r2.<org.apache.jackrabbit.webdav.client.methods.PollMethod$1: void <init>(org.apache.jackrabbit.webdav.client.methods.PollMethod,org.w3c.dom.Element)>(r0, $r1);

        $r4 = r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: org.apache.jackrabbit.webdav.observation.EventDiscovery eventDiscovery>;

        virtualinvoke $r4.<org.apache.jackrabbit.webdav.observation.EventDiscovery: void addEventBundle(org.apache.jackrabbit.webdav.observation.EventBundle)>(r2);

        goto label1;

     label2:
        return 1;

     label3:
        $r6 = <org.apache.jackrabbit.webdav.client.methods.PollMethod: org.slf4j.Logger log>;

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>("Missing \'eventdiscovery\' response body in POLL method.");

        return 0;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.client.methods.PollMethod r0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PollMethod;

        return "POLL";
    }
    public org.apache.jackrabbit.webdav.observation.EventDiscovery getResponseAsEventDiscovery() throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.client.methods.PollMethod r0;
        org.apache.jackrabbit.webdav.observation.EventDiscovery $r1;
        org.apache.jackrabbit.webdav.DavException $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.apache.commons.httpclient.StatusLine $r5;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PollMethod;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: void checkUsed()>();

        $r1 = r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: org.apache.jackrabbit.webdav.observation.EventDiscovery eventDiscovery>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: org.apache.jackrabbit.webdav.observation.EventDiscovery eventDiscovery>;

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: org.apache.jackrabbit.webdav.DavException getResponseException()>();

        if $r2 == null goto label2;

        throw $r2;

     label2:
        $r2 = new org.apache.jackrabbit.webdav.DavException;

        $i0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: int getStatusCode()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resulted with unexpected status: ");

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>($i0, $r4);

        throw $r2;
    }
    protected boolean isSuccess(int)
    {
        org.apache.jackrabbit.webdav.client.methods.PollMethod r0;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PollMethod;

        $i0 := @parameter0: int;

        if 200 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void processResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.jackrabbit.webdav.client.methods.PollMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.io.IOException r3;
        boolean $z0;
        org.w3c.dom.Element $r4;
        org.slf4j.Logger $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PollMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: boolean getSuccess()>();

        if $z0 == 0 goto label4;

     label1:
        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: org.w3c.dom.Element getRootElement()>();

        $z0 = specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: boolean buildDiscoveryFromRoot(org.w3c.dom.Element)>($r4);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: void setSuccess(boolean)>($z0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r5 = <org.apache.jackrabbit.webdav.client.methods.PollMethod: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while parsing multistatus response: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PollMethod: void setSuccess(boolean)>(0);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
