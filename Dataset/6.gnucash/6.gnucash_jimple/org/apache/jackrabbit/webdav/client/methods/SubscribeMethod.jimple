org.apache.jackrabbit.webdav.client.methods.SubscribeMethod extends org.apache.jackrabbit.webdav.client.methods.DavMethodBase implements org.apache.jackrabbit.webdav.observation.ObservationConstants
private static org.slf4j.Logger log
private org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery subscriptionDiscovery
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/client/methods/SubscribeMethod;");

        <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.observation.SubscriptionInfo) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo $r2;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void <init>(java.lang.String,org.apache.jackrabbit.webdav.observation.SubscriptionInfo,java.lang.String)>($r1, $r2, null);

        return;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.observation.SubscriptionInfo, java.lang.String) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;
        java.lang.String $r1, $r3;
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo $r2;
        java.lang.IllegalArgumentException $r4;
        org.apache.jackrabbit.webdav.header.CodedUrlHeader $r5;
        long $l0;
        byte $b1;
        org.apache.jackrabbit.webdav.header.TimeoutHeader $r6;
        org.apache.jackrabbit.webdav.header.DepthHeader $r7;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.observation.SubscriptionInfo;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SubscriptionInfo must not be null.");

        throw $r4;

     label1:
        if $r3 == null goto label2;

        $r5 = new org.apache.jackrabbit.webdav.header.CodedUrlHeader;

        specialinvoke $r5.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: void <init>(java.lang.String,java.lang.String)>("SubscriptionId", $r3);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>($r5);

     label2:
        $l0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: long getTimeOut()>();

        $b1 = $l0 cmp -2147483648L;

        if $b1 == 0 goto label3;

        $r6 = new org.apache.jackrabbit.webdav.header.TimeoutHeader;

        $l0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: long getTimeOut()>();

        specialinvoke $r6.<org.apache.jackrabbit.webdav.header.TimeoutHeader: void <init>(long)>($l0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>($r6);

     label3:
        $r7 = new org.apache.jackrabbit.webdav.header.DepthHeader;

        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.observation.SubscriptionInfo: boolean isDeep()>();

        specialinvoke $r7.<org.apache.jackrabbit.webdav.header.DepthHeader: void <init>(boolean)>($z0);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void setRequestHeader(org.apache.jackrabbit.webdav.header.Header)>($r7);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void setRequestBody(org.apache.jackrabbit.webdav.xml.XmlSerializable)>($r2);

        return;
    }
    private boolean buildDiscoveryFromRoot(org.w3c.dom.Element)
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;
        org.w3c.dom.Element $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        boolean $z0;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r3;
        java.lang.String $r4;
        org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery $r5;
        org.apache.jackrabbit.webdav.observation.Subscription[] $r6;
        int $i0;
        org.slf4j.Logger $r7;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        $r1 := @parameter0: org.w3c.dom.Element;

        $r2 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "prop", $r2);

        if $z0 == 0 goto label3;

        $r3 = <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.property.DavPropertyName SUBSCRIPTIONDISCOVERY>;

        $r4 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String getName()>();

        $r3 = <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.property.DavPropertyName SUBSCRIPTIONDISCOVERY>;

        $r2 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace getNamespace()>();

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r4, $r2);

        if $z0 == 0 goto label3;

        $r3 = <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.property.DavPropertyName SUBSCRIPTIONDISCOVERY>;

        $r4 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String getName()>();

        $r3 = <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.property.DavPropertyName SUBSCRIPTIONDISCOVERY>;

        $r2 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.xml.Namespace getNamespace()>();

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r4, $r2);

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery: org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery createFromXml(org.w3c.dom.Element)>($r1);

        $r6 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery: org.apache.jackrabbit.webdav.observation.Subscription[] getValue()>();

        $i0 = lengthof $r6;

        if $i0 <= 0 goto label1;

        r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery subscriptionDiscovery> = $r5;

        return 1;

     label1:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.slf4j.Logger log>;

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>("Missing \'subscription\' elements in SUBSCRIBE response body. At least a single subscription must be present if SUBSCRIBE was successful.");

     label2:
        return 0;

     label3:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.slf4j.Logger log>;

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>("Missing DAV:prop response body in SUBSCRIBE method.");

        goto label2;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        return "SUBSCRIBE";
    }
    public org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery getResponseAsSubscriptionDiscovery() throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;
        org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery $r1;
        org.apache.jackrabbit.webdav.DavException $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.apache.commons.httpclient.StatusLine $r5;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void checkUsed()>();

        $r1 = r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery subscriptionDiscovery>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery subscriptionDiscovery>;

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.jackrabbit.webdav.DavException getResponseException()>();

        if $r2 == null goto label2;

        throw $r2;

     label2:
        $r2 = new org.apache.jackrabbit.webdav.DavException;

        $i0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: int getStatusCode()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resulted with unexpected status: ");

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>($i0, $r4);

        throw $r2;
    }
    public java.lang.String getSubscriptionId()
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;
        org.apache.jackrabbit.webdav.header.CodedUrlHeader r1;
        org.apache.commons.httpclient.Header $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void checkUsed()>();

        $r2 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("SubscriptionId");

        if $r2 == null goto label1;

        r1 = new org.apache.jackrabbit.webdav.header.CodedUrlHeader;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        specialinvoke r1.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: void <init>(java.lang.String,java.lang.String)>("SubscriptionId", $r3);

        $r3 = virtualinvoke r1.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: java.lang.String getCodedUrl()>();

        return $r3;

     label1:
        return null;
    }
    protected boolean isSuccess(int)
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        $i0 := @parameter0: int;

        if 200 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void processResponseBody(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.jackrabbit.webdav.client.methods.SubscribeMethod r0;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.HttpConnection $r2;
        java.io.IOException r3;
        boolean $z0;
        org.w3c.dom.Element $r4;
        org.slf4j.Logger $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.SubscribeMethod;

        $r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: boolean getSuccess()>();

        if $z0 == 0 goto label4;

     label1:
        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.w3c.dom.Element getRootElement()>();

        $z0 = specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: boolean buildDiscoveryFromRoot(org.w3c.dom.Element)>($r4);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void setSuccess(boolean)>($z0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r5 = <org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while parsing multistatus response: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.SubscribeMethod: void setSuccess(boolean)>(0);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
