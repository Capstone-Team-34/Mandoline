org.apache.jackrabbit.webdav.client.methods.PropPatchMethod extends org.apache.jackrabbit.webdav.client.methods.DavMethodBase implements org.apache.jackrabbit.webdav.DavConstants
private static org.slf4j.Logger log
private final org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames
private org.apache.jackrabbit.webdav.DavException responseException
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/client/methods/PropPatchMethod;");

        <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.lang.String, java.util.List) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.PropPatchMethod r0;
        java.lang.String $r1;
        java.util.List r2;
        javax.xml.parsers.ParserConfigurationException r3;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r4;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        org.w3c.dom.Document $r6;
        org.apache.jackrabbit.webdav.xml.Namespace $r7;
        org.w3c.dom.Element $r8, r9, $r13;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r12;
        java.io.IOException $r14;
        org.apache.jackrabbit.webdav.property.DavProperty $r15;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        $r4 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r4.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames> = $r4;

        if r2 == null goto label01;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PROPPATCH cannot be executed without properties to be set or removed.");

        throw $r5;

     label02:
        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Document createDocument()>();

     label03:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label04:
        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "propertyupdate", $r7);

     label05:
        r9 = null;

        $z0 = 0;

     label06:
        $r10 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label08:
        if $z1 == 0 goto label28;

     label09:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

     label10:
        $z1 = $r11 instanceof org.apache.jackrabbit.webdav.property.DavPropertyName;

        if $z1 == 0 goto label18;

        $r12 = (org.apache.jackrabbit.webdav.property.DavPropertyName) $r11;

        if r9 == null goto label11;

        if $z0 == 0 goto label13;

     label11:
        $z0 = 0;

     label12:
        r9 = specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.w3c.dom.Element getPropElement(org.w3c.dom.Element,boolean)>($r8, 0);

     label13:
        $r13 = virtualinvoke $r12.<org.apache.jackrabbit.webdav.property.DavPropertyName: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r6);

        interfaceinvoke r9.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

     label14:
        $r4 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames>;

     label15:
        virtualinvoke $r4.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r12);

     label16:
        goto label07;

     label17:
        r3 := @caughtexception;

        $r14 = new java.io.IOException;

        $r1 = virtualinvoke r3.<javax.xml.parsers.ParserConfigurationException: java.lang.String getMessage()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r14;

     label18:
        $z1 = $r11 instanceof org.apache.jackrabbit.webdav.property.DavProperty;

        if $z1 == 0 goto label25;

        $r15 = (org.apache.jackrabbit.webdav.property.DavProperty) $r11;

        if r9 == null goto label19;

        if $z0 != 0 goto label21;

     label19:
        $z0 = 1;

     label20:
        r9 = specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.w3c.dom.Element getPropElement(org.w3c.dom.Element,boolean)>($r8, 1);

     label21:
        $r13 = interfaceinvoke $r15.<org.apache.jackrabbit.webdav.property.DavProperty: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r6);

        interfaceinvoke r9.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

     label22:
        $r4 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames>;

     label23:
        $r12 = interfaceinvoke $r15.<org.apache.jackrabbit.webdav.property.DavProperty: org.apache.jackrabbit.webdav.property.DavPropertyName getName()>();

        virtualinvoke $r4.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r12);

     label24:
        goto label07;

     label25:
        $r5 = new java.lang.IllegalArgumentException;

     label26:
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ChangeList may only contain DavPropertyName and DavProperty elements.");

     label27:
        throw $r5;

     label28:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: void setRequestBody(org.w3c.dom.Document)>($r6);

     label29:
        return;

        catch javax.xml.parsers.ParserConfigurationException from label02 to label03 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label04 to label05 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label06 to label08 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label09 to label10 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label12 to label13 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label13 to label14 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label15 to label16 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label20 to label21 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label21 to label22 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label23 to label24 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label26 to label27 with label17;
        catch javax.xml.parsers.ParserConfigurationException from label28 to label29 with label17;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.property.DavPropertySet, org.apache.jackrabbit.webdav.property.DavPropertyNameSet) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.PropPatchMethod r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.property.DavPropertySet $r2;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r3, $r6;
        javax.xml.parsers.ParserConfigurationException r4;
        int i0, i1;
        org.apache.jackrabbit.webdav.property.DavPropertyName r5;
        java.lang.IllegalArgumentException $r7;
        boolean $z0;
        org.apache.jackrabbit.webdav.property.DavPropertyName[] $r8;
        org.w3c.dom.Document $r9;
        org.apache.jackrabbit.webdav.xml.Namespace $r10;
        org.w3c.dom.Element $r11, $r12, $r13;
        java.io.IOException $r14;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.property.DavPropertySet;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        $r6 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames> = $r6;

        if $r2 == null goto label01;

        if $r3 != null goto label02;

     label01:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Neither setProperties nor removeProperties must be null.");

        throw $r7;

     label02:
        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertySet: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        $z0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Either setProperties or removeProperties can be empty; not both of them.");

        throw $r7;

     label03:
        $r6 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames>;

        virtualinvoke $r6.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean addAll(org.apache.jackrabbit.webdav.property.DavPropertyNameSet)>($r3);

        $r8 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavPropertyName[] getPropertyNames()>();

        i0 = lengthof $r8;

        i1 = 0;

     label04:
        if i1 >= i0 goto label05;

        r5 = $r8[i1];

        $r6 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames>;

        virtualinvoke $r6.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean add(org.apache.jackrabbit.webdav.property.DavPropertyName)>(r5);

        i1 = i1 + 1;

        goto label04;

     label05:
        $r9 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Document createDocument()>();

     label06:
        $r10 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label07:
        $r11 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r9, "propertyupdate", $r10);

        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertySet: boolean isEmpty()>();

     label08:
        if $z0 != 0 goto label10;

        $r10 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label09:
        $r12 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r11, "set", $r10);

        $r13 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r9);

        interfaceinvoke $r12.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

     label10:
        $z0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean isEmpty()>();

     label11:
        if $z0 != 0 goto label13;

        $r10 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label12:
        $r11 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r11, "remove", $r10);

        $r12 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r9);

        interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

     label13:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: void setRequestBody(org.w3c.dom.Document)>($r9);

     label14:
        return;

     label15:
        r4 := @caughtexception;

        $r14 = new java.io.IOException;

        $r1 = virtualinvoke r4.<javax.xml.parsers.ParserConfigurationException: java.lang.String getMessage()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r14;

        catch javax.xml.parsers.ParserConfigurationException from label05 to label06 with label15;
        catch javax.xml.parsers.ParserConfigurationException from label07 to label08 with label15;
        catch javax.xml.parsers.ParserConfigurationException from label09 to label11 with label15;
        catch javax.xml.parsers.ParserConfigurationException from label12 to label14 with label15;
    }
    private org.w3c.dom.Element getPropElement(org.w3c.dom.Element, boolean)
    {
        org.apache.jackrabbit.webdav.client.methods.PropPatchMethod r0;
        org.w3c.dom.Element $r1;
        boolean $z0;
        java.lang.String $r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;

        $r1 := @parameter0: org.w3c.dom.Element;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label2;

        $r2 = "set";

     label1:
        $r3 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2, $r3);

        $r3 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "prop", $r3);

        return $r1;

     label2:
        $r2 = "remove";

        goto label1;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.client.methods.PropPatchMethod r0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;

        return "PROPPATCH";
    }
    public org.apache.jackrabbit.webdav.DavException getResponseException() throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.PropPatchMethod r0;
        boolean $z0;
        org.slf4j.Logger $r1;
        java.lang.IllegalStateException $r2;
        org.apache.jackrabbit.webdav.DavException $r3;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: void checkUsed()>();

        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: boolean getSuccess()>();

        if $z0 == 0 goto label1;

        $r1 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.slf4j.Logger log>;

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("Cannot retrieve exception from successful response.");

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot retrieve exception from successful response.");

        throw $r2;

     label1:
        $r3 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.DavException responseException>;

        if $r3 == null goto label2;

        $r3 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.DavException responseException>;

        return $r3;

     label2:
        $r3 = specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: org.apache.jackrabbit.webdav.DavException getResponseException()>();

        return $r3;
    }
    protected boolean isSuccess(int)
    {
        org.apache.jackrabbit.webdav.client.methods.PropPatchMethod r0;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;

        $i0 := @parameter0: int;

        if $i0 == 207 goto label1;

        if $i0 != 200 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    protected void processMultiStatusBody(org.apache.jackrabbit.webdav.MultiStatus, org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.jackrabbit.webdav.client.methods.PropPatchMethod r0;
        org.apache.jackrabbit.webdav.MultiStatus $r1;
        org.apache.commons.httpclient.HttpState $r2;
        org.apache.commons.httpclient.HttpConnection $r3;
        java.lang.StringBuffer r4, $r13;
        org.apache.jackrabbit.webdav.MultiStatusResponse[] $r5;
        int $i0, $i1;
        org.slf4j.Logger $r6;
        boolean z0, $z1;
        org.apache.jackrabbit.webdav.MultiStatusResponse $r7;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r8, $r14;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        org.apache.jackrabbit.webdav.property.DavPropertyNameIterator $r11;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r12;
        org.apache.jackrabbit.webdav.Status[] $r15;
        org.apache.jackrabbit.webdav.DavException $r16;
        org.apache.jackrabbit.webdav.Status $r17;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropPatchMethod;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.MultiStatus;

        $r2 := @parameter1: org.apache.commons.httpclient.HttpState;

        $r3 := @parameter2: org.apache.commons.httpclient.HttpConnection;

        $r5 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.MultiStatus: org.apache.jackrabbit.webdav.MultiStatusResponse[] getResponses()>();

        $i0 = lengthof $r5;

        if $i0 == 1 goto label01;

        $r6 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.slf4j.Logger log>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>("Expected a single multi-status response in PROPPATCH.");

     label01:
        z0 = 1;

        $i0 = 0;

     label02:
        if $i0 >= 1 goto label09;

        $r7 = $r5[$i0];

        $r8 = virtualinvoke $r7.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.property.DavPropertyNameSet getPropertyNames(int)>(200);

        $z1 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean isEmpty()>();

        if $z1 == 0 goto label05;

        $r6 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROPPATCH failed: No \'OK\' response found for resource ");

        $r7 = $r5[$i0];

        $r10 = virtualinvoke $r7.<org.apache.jackrabbit.webdav.MultiStatusResponse: java.lang.String getHref()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r10);

        z0 = 0;

     label03:
        $z1 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean isEmpty()>();

        if $z1 != 0 goto label08;

        r4 = new java.lang.StringBuffer;

        specialinvoke r4.<java.lang.StringBuffer: void <init>(java.lang.String)>("The following properties outside of the original request where set or removed: ");

        $r11 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.apache.jackrabbit.webdav.property.DavPropertyNameIterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r11.<org.apache.jackrabbit.webdav.property.DavPropertyNameIterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r12 = interfaceinvoke $r11.<org.apache.jackrabbit.webdav.property.DavPropertyNameIterator: org.apache.jackrabbit.webdav.property.DavPropertyName nextPropertyName()>();

        $r10 = virtualinvoke $r12.<org.apache.jackrabbit.webdav.property.DavPropertyName: java.lang.String toString()>();

        $r13 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; ");

        goto label04;

     label05:
        $r14 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNames>;

        $r11 = virtualinvoke $r14.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.apache.jackrabbit.webdav.property.DavPropertyNameIterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r11.<org.apache.jackrabbit.webdav.property.DavPropertyNameIterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r12 = interfaceinvoke $r11.<org.apache.jackrabbit.webdav.property.DavPropertyNameIterator: org.apache.jackrabbit.webdav.property.DavPropertyName nextPropertyName()>();

        z0 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean remove(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r12);

        goto label06;

     label07:
        $r6 = <org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.slf4j.Logger log>;

        $r10 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>($r10);

     label08:
        $i0 = $i0 + 1;

        goto label02;

     label09:
        if z0 != 0 goto label13;

        $r7 = $r5[0];

        $r15 = virtualinvoke $r7.<org.apache.jackrabbit.webdav.MultiStatusResponse: org.apache.jackrabbit.webdav.Status[] getStatus()>();

        $i0 = 0;

     label10:
        $i1 = lengthof $r15;

        if $i0 >= $i1 goto label13;

        $r16 = r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.DavException responseException>;

        if $r16 != null goto label13;

        $r17 = $r15[$i0];

        $i1 = virtualinvoke $r17.<org.apache.jackrabbit.webdav.Status: int getStatusCode()>();

        lookupswitch($i1)
        {
            case 424: goto label12;
            default: goto label11;
        };

     label11:
        $r16 = new org.apache.jackrabbit.webdav.DavException;

        $r17 = $r15[$i0];

        $i1 = virtualinvoke $r17.<org.apache.jackrabbit.webdav.Status: int getStatusCode()>();

        specialinvoke $r16.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>($i1);

        r0.<org.apache.jackrabbit.webdav.client.methods.PropPatchMethod: org.apache.jackrabbit.webdav.DavException responseException> = $r16;

     label12:
        $i0 = $i0 + 1;

        goto label10;

     label13:
        return;
    }
