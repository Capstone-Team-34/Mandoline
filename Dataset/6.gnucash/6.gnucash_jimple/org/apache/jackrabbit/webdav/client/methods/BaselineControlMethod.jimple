org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod extends org.apache.jackrabbit.webdav.client.methods.DavMethodBase
private static org.slf4j.Logger log
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/client/methods/BaselineControlMethod;");

        <org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod r0;
        java.lang.String $r1;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        return;
    }
    public void <init>(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod r0;
        java.lang.String $r1, $r2;
        javax.xml.parsers.ParserConfigurationException r3;
        org.w3c.dom.Document $r4;
        org.apache.jackrabbit.webdav.xml.Namespace $r5;
        org.w3c.dom.Element $r6, $r7;
        java.io.IOException $r8;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        if $r2 == null goto label6;

     label1:
        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Document createDocument()>();

     label2:
        $r5 = <org.apache.jackrabbit.webdav.version.DeltaVConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label3:
        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r4, "baseline-control", $r5);

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element hrefToXml(java.lang.String,org.w3c.dom.Document)>($r2, $r4);

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod: void setRequestBody(org.w3c.dom.Document)>($r4);

     label4:
        return;

     label5:
        r3 := @caughtexception;

        $r8 = new java.io.IOException;

        $r1 = virtualinvoke r3.<javax.xml.parsers.ParserConfigurationException: java.lang.String getMessage()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label6:
        return;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label5;
        catch javax.xml.parsers.ParserConfigurationException from label3 to label4 with label5;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod r0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod;

        return "BASELINE-CONTROL";
    }
    protected boolean isSuccess(int)
    {
        org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod r0;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.BaselineControlMethod;

        $i0 := @parameter0: int;

        if $i0 != 200 goto label1;

        return 1;

     label1:
        return 0;
    }
