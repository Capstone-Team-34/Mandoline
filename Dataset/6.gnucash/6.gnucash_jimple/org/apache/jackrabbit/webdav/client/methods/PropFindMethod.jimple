org.apache.jackrabbit.webdav.client.methods.PropFindMethod extends org.apache.jackrabbit.webdav.client.methods.DavMethodBase
private static org.slf4j.Logger log
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/client/methods/PropFindMethod;");

        <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.lang.String) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.PropFindMethod r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropFindMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropFindMethod: void <init>(java.lang.String,int,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int)>($r1, 1, $r2, 2147483647);

        return;
    }
    public void <init>(java.lang.String, int, int) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.PropFindMethod r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropFindMethod;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropFindMethod: void <init>(java.lang.String,int,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int)>($r1, $i0, $r2, $i1);

        return;
    }
    public void <init>(java.lang.String, int, org.apache.jackrabbit.webdav.property.DavPropertyNameSet, int) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.PropFindMethod r0;
        java.lang.String $r1, $r5;
        int $i0, $i1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;
        org.apache.jackrabbit.webdav.header.DepthHeader r3;
        javax.xml.parsers.ParserConfigurationException r4;
        org.w3c.dom.Document $r6;
        org.apache.jackrabbit.webdav.xml.Namespace $r7;
        org.w3c.dom.Element $r8, $r11, $r12;
        java.lang.IllegalArgumentException $r9;
        java.io.IOException $r10;
        boolean $z0;
        org.w3c.dom.Node $r13, $r14;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropFindMethod;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $i1 := @parameter3: int;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.DavMethodBase: void <init>(java.lang.String)>($r1);

        r3 = new org.apache.jackrabbit.webdav.header.DepthHeader;

        specialinvoke r3.<org.apache.jackrabbit.webdav.header.DepthHeader: void <init>(int)>($i1);

        $r1 = virtualinvoke r3.<org.apache.jackrabbit.webdav.header.DepthHeader: java.lang.String getHeaderName()>();

        $r5 = virtualinvoke r3.<org.apache.jackrabbit.webdav.header.DepthHeader: java.lang.String getHeaderValue()>();

        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropFindMethod: void setRequestHeader(java.lang.String,java.lang.String)>($r1, $r5);

     label01:
        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Document createDocument()>();

     label02:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label03:
        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "propfind", $r7);

        interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

     label04:
        lookupswitch($i0)
        {
            case 0: goto label16;
            case 1: goto label09;
            case 2: goto label13;
            case 3: goto label23;
            default: goto label05;
        };

     label05:
        $r9 = new java.lang.IllegalArgumentException;

     label06:
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown propfind type");

     label07:
        throw $r9;

     label08:
        r4 := @caughtexception;

        $r10 = new java.io.IOException;

        $r1 = virtualinvoke r4.<javax.xml.parsers.ParserConfigurationException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r10;

     label09:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label10:
        $r11 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "allprop", $r7);

        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

     label11:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropFindMethod: void setRequestBody(org.w3c.dom.Document)>($r6);

     label12:
        return;

     label13:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label14:
        $r11 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "propname", $r7);

        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

     label15:
        goto label11;

     label16:
        if $r2 != null goto label21;

        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label17:
        $r11 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "prop", $r7);

     label18:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label19:
        $r12 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "resourcetype", $r7);

        interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

     label20:
        goto label11;

     label21:
        $r11 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r6);

        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

     label22:
        goto label11;

     label23:
        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label24:
        $r11 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "allprop", $r7);

        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

     label25:
        if $r2 == null goto label11;

     label26:
        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean isEmpty()>();

     label27:
        if $z0 != 0 goto label11;

        $r7 = <org.apache.jackrabbit.webdav.client.methods.PropFindMethod: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

     label28:
        $r11 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r6, "include", $r7);

        $r12 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r6);

        $r13 = interfaceinvoke $r12.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label29:
        if $r13 == null goto label32;

     label30:
        $r14 = interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>(1);

        interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

        $r13 = interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label31:
        goto label29;

     label32:
        interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

     label33:
        goto label11;

        catch javax.xml.parsers.ParserConfigurationException from label01 to label02 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label03 to label04 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label06 to label07 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label10 to label12 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label14 to label15 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label17 to label18 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label19 to label20 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label21 to label22 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label24 to label25 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label26 to label27 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label28 to label29 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label30 to label31 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label32 to label33 with label08;
    }
    public void <init>(java.lang.String, org.apache.jackrabbit.webdav.property.DavPropertyNameSet, int) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.client.methods.PropFindMethod r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropFindMethod;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.apache.jackrabbit.webdav.client.methods.PropFindMethod: void <init>(java.lang.String,int,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int)>($r1, 0, $r2, $i0);

        return;
    }
    public java.lang.String getName()
    {
        org.apache.jackrabbit.webdav.client.methods.PropFindMethod r0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropFindMethod;

        return "PROPFIND";
    }
    protected boolean isSuccess(int)
    {
        org.apache.jackrabbit.webdav.client.methods.PropFindMethod r0;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.client.methods.PropFindMethod;

        $i0 := @parameter0: int;

        if $i0 != 207 goto label1;

        return 1;

     label1:
        return 0;
    }
