org.apache.jackrabbit.webdav.version.report.ReportType extends java.lang.Object implements org.apache.jackrabbit.webdav.version.DeltaVConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
public static final org.apache.jackrabbit.webdav.version.report.ReportType EXPAND_PROPERTY
public static final org.apache.jackrabbit.webdav.version.report.ReportType LOCATE_BY_HISTORY
public static final org.apache.jackrabbit.webdav.version.report.ReportType VERSION_TREE
private static org.slf4j.Logger log
private static final java.util.HashMap types
private final java.lang.String key
private final java.lang.String localName
private final org.apache.jackrabbit.webdav.xml.Namespace namespace
private final java.lang.Class reportClass
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.HashMap $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.apache.jackrabbit.webdav.version.report.ReportType $r3;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/version/report/ReportType;");

        <org.apache.jackrabbit.webdav.version.report.ReportType: org.slf4j.Logger log> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.jackrabbit.webdav.version.report.ReportType: java.util.HashMap types> = $r1;

        $r2 = <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.version.report.ReportType register(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.Class)>("version-tree", $r2, class "Lorg/apache/jackrabbit/webdav/version/report/VersionTreeReport;");

        <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.version.report.ReportType VERSION_TREE> = $r3;

        $r2 = <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.version.report.ReportType register(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.Class)>("expand-property", $r2, class "Lorg/apache/jackrabbit/webdav/version/report/ExpandPropertyReport;");

        <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.version.report.ReportType EXPAND_PROPERTY> = $r3;

        $r2 = <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.version.report.ReportType register(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.Class)>("locate-by-history", $r2, class "Lorg/apache/jackrabbit/webdav/version/report/LocateByHistoryReport;");

        <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.version.report.ReportType LOCATE_BY_HISTORY> = $r3;

        return;
    }
    private void <init>(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace, java.lang.String, java.lang.Class)
    {
        org.apache.jackrabbit.webdav.version.report.ReportType r0;
        java.lang.String $r1, $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        java.lang.Class r4;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.ReportType;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.String localName> = $r1;

        r0.<org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.xml.Namespace namespace> = $r2;

        r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.String key> = $r3;

        r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.Class reportClass> = r4;

        return;
    }
    public static org.apache.jackrabbit.webdav.version.report.ReportType getType(org.apache.jackrabbit.webdav.version.report.ReportInfo)
    {
        org.apache.jackrabbit.webdav.version.report.ReportInfo $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;
        java.util.HashMap $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.jackrabbit.webdav.version.report.ReportType $r5;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: org.apache.jackrabbit.webdav.version.report.ReportInfo;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReportInfo must not be null.");

        throw $r1;

     label1:
        $r2 = virtualinvoke $r0.<org.apache.jackrabbit.webdav.version.report.ReportInfo: java.lang.String getReportName()>();

        $r3 = <org.apache.jackrabbit.webdav.version.report.ReportType: java.util.HashMap types>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = <org.apache.jackrabbit.webdav.version.report.ReportType: java.util.HashMap types>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.apache.jackrabbit.webdav.version.report.ReportType) $r4;

        return $r5;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The request report \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has not been registered yet.");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }
    public static org.apache.jackrabbit.webdav.version.report.ReportType register(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace, java.lang.Class)
    {
        java.lang.String $r0, $r5;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        java.lang.Class r2;
        org.apache.jackrabbit.webdav.version.report.ReportType r3;
        java.lang.IllegalArgumentException $r4;
        java.util.HashMap $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8;
        java.lang.IllegalAccessException r9;
        java.lang.InstantiationException r10;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        r2 := @parameter2: java.lang.Class;

        if $r0 == null goto label1;

        if $r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A ReportType cannot be registered with a null name, namespace or report class");

        throw $r4;

     label2:
        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getExpandedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1);

        $r6 = <org.apache.jackrabbit.webdav.version.report.ReportType: java.util.HashMap types>;

        $z0 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r6 = <org.apache.jackrabbit.webdav.version.report.ReportType: java.util.HashMap types>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (org.apache.jackrabbit.webdav.version.report.ReportType) $r7;

        return r3;

     label3:
        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

     label4:
        $z0 = $r7 instanceof org.apache.jackrabbit.webdav.version.report.Report;

        if $z0 != 0 goto label9;

        $r4 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

     label5:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to register Report class: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement the Report interface.");

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

     label6:
        throw $r4;

     label7:
        r9 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while validating Report class: ");

        $r0 = virtualinvoke r9.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label8:
        r10 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while validating Report class.: ");

        $r0 = virtualinvoke r10.<java.lang.InstantiationException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label9:
        r3 = new org.apache.jackrabbit.webdav.version.report.ReportType;

        specialinvoke r3.<org.apache.jackrabbit.webdav.version.report.ReportType: void <init>(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String,java.lang.Class)>($r0, $r1, $r5, r2);

        $r6 = <org.apache.jackrabbit.webdav.version.report.ReportType: java.util.HashMap types>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        return r3;

        catch java.lang.IllegalAccessException from label3 to label4 with label7;
        catch java.lang.IllegalAccessException from label5 to label6 with label7;
        catch java.lang.InstantiationException from label3 to label4 with label8;
        catch java.lang.InstantiationException from label5 to label6 with label8;
    }
    public org.apache.jackrabbit.webdav.version.report.Report createReport(org.apache.jackrabbit.webdav.version.DeltaVResource, org.apache.jackrabbit.webdav.version.report.ReportInfo) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.version.report.ReportType r0;
        org.apache.jackrabbit.webdav.version.DeltaVResource $r1;
        org.apache.jackrabbit.webdav.version.report.ReportInfo $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        org.apache.jackrabbit.webdav.version.report.Report r5;
        java.lang.IllegalAccessException r6;
        org.apache.jackrabbit.webdav.DavException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        java.lang.InstantiationException r10;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.ReportType;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.version.DeltaVResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.version.report.ReportInfo;

        $r3 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.Class reportClass>;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        r5 = (org.apache.jackrabbit.webdav.version.report.Report) $r4;

     label3:
        interfaceinvoke r5.<org.apache.jackrabbit.webdav.version.report.Report: void init(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.version.report.ReportInfo)>($r1, $r2);

     label4:
        return r5;

     label5:
        r6 := @caughtexception;

        $r7 = new org.apache.jackrabbit.webdav.DavException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create new report (");

        $r3 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.Class reportClass>;

        $r9 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from class: ");

        $r9 = virtualinvoke r6.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(500, $r9);

        throw $r7;

     label6:
        r10 := @caughtexception;

        $r7 = new org.apache.jackrabbit.webdav.DavException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create new report (");

        $r3 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.Class reportClass>;

        $r9 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") from class: ");

        $r9 = virtualinvoke r10.<java.lang.InstantiationException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(500, $r9);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.InstantiationException from label1 to label2 with label6;
        catch java.lang.InstantiationException from label3 to label4 with label6;
    }
    public java.lang.String getLocalName()
    {
        org.apache.jackrabbit.webdav.version.report.ReportType r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.ReportType;

        r1 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.String localName>;

        return r1;
    }
    public org.apache.jackrabbit.webdav.xml.Namespace getNamespace()
    {
        org.apache.jackrabbit.webdav.version.report.ReportType r0;
        org.apache.jackrabbit.webdav.xml.Namespace r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.ReportType;

        r1 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        return r1;
    }
    public java.lang.String getReportName()
    {
        org.apache.jackrabbit.webdav.version.report.ReportType r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.ReportType;

        r1 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.String key>;

        return r1;
    }
    public boolean isRequestedReportType(org.apache.jackrabbit.webdav.version.report.ReportInfo)
    {
        org.apache.jackrabbit.webdav.version.report.ReportType r0;
        org.apache.jackrabbit.webdav.version.report.ReportInfo $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.ReportType;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.version.report.ReportInfo;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.String getReportName()>();

        $r3 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.version.report.ReportInfo: java.lang.String getReportName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;

     label1:
        return 0;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.version.report.ReportType r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.ReportType;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r4 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: java.lang.String localName>;

        $r2 = r0.<org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.xml.Namespace namespace>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r4, $r2);

        return $r3;
    }
