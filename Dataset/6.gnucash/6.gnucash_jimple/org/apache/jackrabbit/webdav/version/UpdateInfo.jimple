org.apache.jackrabbit.webdav.version.UpdateInfo extends java.lang.Object implements org.apache.jackrabbit.webdav.version.DeltaVConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
public static final int UPDATE_BY_LABEL
public static final int UPDATE_BY_VERSION
public static final int UPDATE_BY_WORKSPACE
private static org.slf4j.Logger log
private org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet
private java.lang.String[] source
private int type
private org.w3c.dom.Element updateElement
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/version/UpdateInfo;");

        <org.apache.jackrabbit.webdav.version.UpdateInfo: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(org.w3c.dom.Element) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        org.w3c.dom.Element $r1, $r7;
        java.util.ArrayList r2;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        boolean $z0, $z1;
        org.slf4j.Logger $r5;
        org.apache.jackrabbit.webdav.DavException $r6;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r8;
        java.lang.String $r9;
        int $i0;
        java.lang.String[] $r10;
        java.lang.Object[] $r11;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        $r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet> = $r3;

        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "update", $r4);

        if $z0 != 0 goto label1;

        $r5 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("DAV:update element expected");

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label1:
        $z0 = 0;

        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "version", $r4);

        if $z1 == 0 goto label4;

        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "version", $r4);

        $r4 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r7, "href", $r4);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label2:
        $z0 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r9 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getText(org.w3c.dom.Element)>($r7);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r10 = newarray (java.lang.String)[$i0];

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r10 = (java.lang.String[]) $r11;

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source> = $r10;

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type> = 0;

        $z0 = 1;

     label4:
        if $z0 != 0 goto label5;

        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "label-name", $r4);

        if $z1 == 0 goto label5;

        $r10 = newarray (java.lang.String)[1];

        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r9 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "label-name", $r4);

        $r10[0] = $r9;

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source> = $r10;

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type> = 1;

        $z0 = 1;

     label5:
        if $z0 != 0 goto label6;

        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "workspace", $r4);

        if $r7 == null goto label8;

        $r10 = newarray (java.lang.String)[1];

        $r4 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r9 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildTextTrim(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r7, "href", $r4);

        $r10[0] = $r9;

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source> = $r10;

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type> = 2;

     label6:
        $r4 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "prop", $r4);

        if $z0 == 0 goto label9;

        $r4 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "prop", $r4);

        $r3 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>(org.w3c.dom.Element)>($r7);

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet> = $r3;

        interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r7);

     label7:
        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.w3c.dom.Element updateElement> = $r1;

        return;

     label8:
        $r5 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("DAV:update element must contain either DAV:version, DAV:label-name or DAV:workspace child element.");

        $r6 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r6.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r6;

     label9:
        $r3 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet> = $r3;

        goto label7;
    }
    public void <init>(java.lang.String[], int, org.apache.jackrabbit.webdav.property.DavPropertyNameSet)
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        int $i0, $i1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r1, $r3;
        java.lang.String[] r2, $r5;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r6;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        r2 := @parameter0: java.lang.String[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet> = $r3;

        if r2 == null goto label1;

        $i1 = lengthof r2;

        if $i1 != 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Version href array must not be null and have a minimal length of 1.");

        throw $r4;

     label2:
        if $i0 < 0 goto label3;

        if $i0 <= 2 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal type of UpdateInfo.");

        throw $r4;

     label4:
        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type> = $i0;

        if $i0 != 0 goto label6;

     label5:
        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source> = r2;

        if $r1 == null goto label7;

        r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet> = $r1;

        return;

     label6:
        $r5 = newarray (java.lang.String)[1];

        $r6 = r2[0];

        $r5[0] = $r6;

        r2 = $r5;

        goto label5;

     label7:
        return;
    }
    public static org.w3c.dom.Element createUpdateElement(java.lang.String[], int, org.w3c.dom.Document)
    {
        java.lang.String[] $r0;
        int $i0, $i1;
        org.w3c.dom.Document $r1;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r4;
        org.w3c.dom.Element $r5, $r7, $r8;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.w3c.dom.Document;

        if $r0 == null goto label1;

        $i1 = lengthof $r0;

        if $i1 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Update source must specific at least a single resource used to run the update.");

        throw $r3;

     label2:
        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "update", $r4);

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label6;
            case 2: goto label7;
            default: goto label3;
        };

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid update type: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r3;

     label4:
        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r5, "version", $r4);

        $i0 = lengthof $r0;

        $i1 = 0;

     label5:
        if $i1 >= $i0 goto label8;

        r2 = $r0[$i1];

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element hrefToXml(java.lang.String,org.w3c.dom.Document)>(r2, $r1);

        interfaceinvoke $r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        $i1 = $i1 + 1;

        goto label5;

     label6:
        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        r2 = $r0[0];

        staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r5, "label-name", $r4, r2);

        return $r5;

     label7:
        $r4 = <org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        r2 = $r0[0];

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r5, "workspace", $r4, r2);

        r2 = $r0[0];

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element hrefToXml(java.lang.String,org.w3c.dom.Document)>(r2, $r1);

        interfaceinvoke $r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

     label8:
        return $r5;
    }
    public java.lang.String[] getLabelName()
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        int $i0;
        java.lang.String[] r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        $i0 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type>;

        if $i0 != 1 goto label1;

        r1 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source>;

        return r1;

     label1:
        return null;
    }
    public org.apache.jackrabbit.webdav.property.DavPropertyNameSet getPropertyNameSet()
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        r1 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet>;

        return r1;
    }
    public org.w3c.dom.Element getUpdateElement()
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        r1 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.w3c.dom.Element updateElement>;

        return r1;
    }
    public java.lang.String[] getVersionHref()
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        int $i0;
        java.lang.String[] r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        $i0 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type>;

        if $i0 != 0 goto label1;

        r1 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source>;

        return r1;

     label1:
        return null;
    }
    public java.lang.String getWorkspaceHref()
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        $i0 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type>;

        if $i0 != 2 goto label1;

        $r1 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source>;

        $r2 = $r1[0];

        return $r2;

     label1:
        return null;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.version.UpdateInfo r0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Element $r2, $r5;
        org.w3c.dom.Node $r3;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r4;
        boolean $z0;
        java.lang.String[] $r6;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.version.UpdateInfo;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r2 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.w3c.dom.Element updateElement>;

        if $r2 == null goto label2;

        $r2 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.w3c.dom.Element updateElement>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>($r2, 1);

        $r2 = (org.w3c.dom.Element) $r3;

     label1:
        $r4 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet>;

        $z0 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet propertyNameSet>;

        $r5 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        return $r2;

     label2:
        $r6 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: java.lang.String[] source>;

        $i0 = r0.<org.apache.jackrabbit.webdav.version.UpdateInfo: int type>;

        $r2 = staticinvoke <org.apache.jackrabbit.webdav.version.UpdateInfo: org.w3c.dom.Element createUpdateElement(java.lang.String[],int,org.w3c.dom.Document)>($r6, $i0, $r1);

        goto label1;

     label3:
        return $r2;
    }
