org.apache.jackrabbit.webdav.version.OptionsResponse extends java.lang.Object implements org.apache.jackrabbit.webdav.version.DeltaVConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
private static org.slf4j.Logger log
private final java.util.Map entries
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/version/OptionsResponse;");

        <org.apache.jackrabbit.webdav.version.OptionsResponse: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.version.OptionsResponse r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.OptionsResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.version.OptionsResponse: java.util.Map entries> = $r1;

        return;
    }
    public static org.apache.jackrabbit.webdav.version.OptionsResponse createFromXml(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0, $r7;
        java.util.ArrayList r1;
        org.apache.jackrabbit.webdav.version.OptionsResponse r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r5, $r6;
        java.lang.String $r8;
        int $i0;
        java.lang.String[] $r9;
        java.lang.Object[] $r10;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r3 = <org.apache.jackrabbit.webdav.version.OptionsResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "options-response", $r3);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DAV:options-response element expected");

        throw $r4;

     label1:
        r2 = new org.apache.jackrabbit.webdav.version.OptionsResponse;

        specialinvoke r2.<org.apache.jackrabbit.webdav.version.OptionsResponse: void <init>()>();

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element)>($r0);

     label2:
        $z0 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r0 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r3 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, "href", $r3);

     label3:
        $z0 = virtualinvoke $r6.<org.apache.jackrabbit.webdav.xml.ElementIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r6.<org.apache.jackrabbit.webdav.xml.ElementIterator: org.w3c.dom.Element nextElement()>();

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getTextTrim(org.w3c.dom.Element)>($r7);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label3;

     label4:
        $r8 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(org.w3c.dom.Element)>($r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r9 = newarray (java.lang.String)[$i0];

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r9 = (java.lang.String[]) $r10;

        virtualinvoke r2.<org.apache.jackrabbit.webdav.version.OptionsResponse: void addEntry(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String[])>($r8, $r3, $r9);

        goto label2;

     label5:
        return r2;
    }
    public void addEntry(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace, java.lang.String[])
    {
        org.apache.jackrabbit.webdav.version.OptionsResponse r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        java.lang.String[] $r3;
        org.apache.jackrabbit.webdav.version.OptionsResponse$Entry r4;
        java.util.Map $r5;

        r0 := @this: org.apache.jackrabbit.webdav.version.OptionsResponse;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 := @parameter2: java.lang.String[];

        r4 = new org.apache.jackrabbit.webdav.version.OptionsResponse$Entry;

        specialinvoke r4.<org.apache.jackrabbit.webdav.version.OptionsResponse$Entry: void <init>(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String[],org.apache.jackrabbit.webdav.version.OptionsResponse$1)>($r1, $r2, $r3, null);

        $r5 = r0.<org.apache.jackrabbit.webdav.version.OptionsResponse: java.util.Map entries>;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getExpandedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

        return;
    }
    public java.lang.String[] getHrefs(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.version.OptionsResponse r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        java.util.Map $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.jackrabbit.webdav.version.OptionsResponse$Entry $r5;
        java.lang.String[] $r6;

        r0 := @this: org.apache.jackrabbit.webdav.version.OptionsResponse;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getExpandedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        $r3 = r0.<org.apache.jackrabbit.webdav.version.OptionsResponse: java.util.Map entries>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.jackrabbit.webdav.version.OptionsResponse: java.util.Map entries>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (org.apache.jackrabbit.webdav.version.OptionsResponse$Entry) $r4;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.version.OptionsResponse$Entry: java.lang.String[] access$100(org.apache.jackrabbit.webdav.version.OptionsResponse$Entry)>($r5);

        return $r6;

     label1:
        $r6 = newarray (java.lang.String)[0];

        return $r6;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.version.OptionsResponse r0;
        org.w3c.dom.Document $r1;
        java.lang.String r2;
        int i0, i1;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;
        org.w3c.dom.Element $r4, $r10, $r12;
        java.util.Map $r5;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        org.apache.jackrabbit.webdav.version.OptionsResponse$Entry r9;
        java.lang.String[] $r11;

        r0 := @this: org.apache.jackrabbit.webdav.version.OptionsResponse;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r3 = <org.apache.jackrabbit.webdav.version.OptionsResponse: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "options-response", $r3);

        $r5 = r0.<org.apache.jackrabbit.webdav.version.OptionsResponse: java.util.Map entries>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.jackrabbit.webdav.version.OptionsResponse$Entry) $r8;

        r2 = staticinvoke <org.apache.jackrabbit.webdav.version.OptionsResponse$Entry: java.lang.String access$200(org.apache.jackrabbit.webdav.version.OptionsResponse$Entry)>(r9);

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.version.OptionsResponse$Entry: org.apache.jackrabbit.webdav.xml.Namespace access$300(org.apache.jackrabbit.webdav.version.OptionsResponse$Entry)>(r9);

        $r10 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r4, r2, $r3);

        $r11 = staticinvoke <org.apache.jackrabbit.webdav.version.OptionsResponse$Entry: java.lang.String[] access$100(org.apache.jackrabbit.webdav.version.OptionsResponse$Entry)>(r9);

        i0 = lengthof $r11;

        i1 = 0;

     label2:
        if i1 >= i0 goto label1;

        r2 = $r11[i1];

        $r12 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element hrefToXml(java.lang.String,org.w3c.dom.Document)>(r2, $r1);

        interfaceinvoke $r10.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r4;
    }
