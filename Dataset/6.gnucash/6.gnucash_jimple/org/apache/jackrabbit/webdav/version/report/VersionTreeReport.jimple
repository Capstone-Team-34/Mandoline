org.apache.jackrabbit.webdav.version.report.VersionTreeReport extends java.lang.Object implements org.apache.jackrabbit.webdav.version.report.Report org.apache.jackrabbit.webdav.version.DeltaVConstants
private static org.slf4j.Logger log
private org.apache.jackrabbit.webdav.version.report.ReportInfo info
private org.apache.jackrabbit.webdav.DavResource resource
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/version/report/VersionTreeReport;");

        <org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void buildResponse(org.apache.jackrabbit.webdav.DavResource, org.apache.jackrabbit.webdav.property.DavPropertyNameSet, int, org.apache.jackrabbit.webdav.MultiStatus)
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r2;
        int $i0, i1, i2;
        org.apache.jackrabbit.webdav.MultiStatus $r3;
        org.apache.jackrabbit.webdav.DavException r4;
        org.apache.jackrabbit.webdav.version.VersionResource r5;
        org.apache.jackrabbit.webdav.version.VersionResource[] $r6;
        boolean $z0;
        org.slf4j.Logger $r7;
        java.lang.String $r8;
        org.apache.jackrabbit.webdav.DavResourceIterator $r9;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.property.DavPropertyNameSet;

        $i0 := @parameter2: int;

        $r3 := @parameter3: org.apache.jackrabbit.webdav.MultiStatus;

     label01:
        $r6 = staticinvoke <org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.version.VersionResource[] getVersions(org.apache.jackrabbit.webdav.DavResource)>($r1);

     label02:
        i1 = lengthof $r6;

        i2 = 0;

     label03:
        if i2 >= i1 goto label11;

        r5 = $r6[i2];

     label04:
        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.property.DavPropertyNameSet: boolean isEmpty()>();

     label05:
        if $z0 == 0 goto label08;

     label06:
        virtualinvoke $r3.<org.apache.jackrabbit.webdav.MultiStatus: void addResourceStatus(org.apache.jackrabbit.webdav.DavResource,int,int)>(r5, 200, 0);

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        virtualinvoke $r3.<org.apache.jackrabbit.webdav.MultiStatus: void addResourceProperties(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int)>(r5, $r2, 0);

     label09:
        goto label07;

     label10:
        r4 := @caughtexception;

        $r7 = <org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.slf4j.Logger log>;

        $r8 = virtualinvoke r4.<org.apache.jackrabbit.webdav.DavException: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String)>($r8);

     label11:
        if $i0 <= 0 goto label13;

        $z0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 == 0 goto label13;

        $r9 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResourceIterator getMembers()>();

     label12:
        $z0 = interfaceinvoke $r9.<org.apache.jackrabbit.webdav.DavResourceIterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r1 = interfaceinvoke $r9.<org.apache.jackrabbit.webdav.DavResourceIterator: org.apache.jackrabbit.webdav.DavResource nextResource()>();

        i1 = $i0 + -1;

        specialinvoke r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: void buildResponse(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int,org.apache.jackrabbit.webdav.MultiStatus)>($r1, $r2, i1, $r3);

        goto label12;

     label13:
        return;

        catch org.apache.jackrabbit.webdav.DavException from label01 to label02 with label10;
        catch org.apache.jackrabbit.webdav.DavException from label04 to label05 with label10;
        catch org.apache.jackrabbit.webdav.DavException from label06 to label07 with label10;
        catch org.apache.jackrabbit.webdav.DavException from label08 to label09 with label10;
    }
    private org.apache.jackrabbit.webdav.MultiStatus getMultiStatus()
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;
        org.apache.jackrabbit.webdav.MultiStatus r1;
        org.apache.jackrabbit.webdav.version.report.ReportInfo $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;
        java.lang.NullPointerException $r4;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r5;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        $r2 = r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.version.report.ReportInfo info>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.DavResource resource>;

        if $r3 != null goto label2;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Error while running DAV:version-tree report");

        throw $r4;

     label2:
        r1 = new org.apache.jackrabbit.webdav.MultiStatus;

        specialinvoke r1.<org.apache.jackrabbit.webdav.MultiStatus: void <init>()>();

        $r3 = r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.DavResource resource>;

        $r2 = r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.version.report.ReportInfo info>;

        $r5 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.version.report.ReportInfo: org.apache.jackrabbit.webdav.property.DavPropertyNameSet getPropertyNameSet()>();

        $r2 = r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.version.report.ReportInfo info>;

        $i0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.version.report.ReportInfo: int getDepth()>();

        specialinvoke r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: void buildResponse(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int,org.apache.jackrabbit.webdav.MultiStatus)>($r3, $r5, $i0, r1);

        return r1;
    }
    private static org.apache.jackrabbit.webdav.version.VersionResource[] getVersions(org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.DavResource r0;
        org.apache.jackrabbit.webdav.version.VersionResource[] r1;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.VersionControlledResource r2;
        org.apache.jackrabbit.webdav.version.VersionHistoryResource $r3;
        org.apache.jackrabbit.webdav.version.VersionResource r4;

        r0 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        r1 = newarray (org.apache.jackrabbit.webdav.version.VersionResource)[0];

        $z0 = r0 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 == 0 goto label1;

        r2 = (org.apache.jackrabbit.webdav.version.VersionControlledResource) r0;

        $r3 = interfaceinvoke r2.<org.apache.jackrabbit.webdav.version.VersionControlledResource: org.apache.jackrabbit.webdav.version.VersionHistoryResource getVersionHistory()>();

        r1 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.version.VersionHistoryResource: org.apache.jackrabbit.webdav.version.VersionResource[] getVersions()>();

        return r1;

     label1:
        $z0 = r0 instanceof org.apache.jackrabbit.webdav.version.VersionResource;

        if $z0 == 0 goto label2;

        r4 = (org.apache.jackrabbit.webdav.version.VersionResource) r0;

        $r3 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.version.VersionResource: org.apache.jackrabbit.webdav.version.VersionHistoryResource getVersionHistory()>();

        r1 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.version.VersionHistoryResource: org.apache.jackrabbit.webdav.version.VersionResource[] getVersions()>();

     label2:
        return r1;
    }
    private void setInfo(org.apache.jackrabbit.webdav.version.report.ReportInfo) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;
        org.apache.jackrabbit.webdav.version.report.ReportInfo $r1;
        org.apache.jackrabbit.webdav.version.report.ReportType $r2;
        boolean $z0;
        org.apache.jackrabbit.webdav.DavException $r3;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.version.report.ReportInfo;

        $r2 = virtualinvoke r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.version.report.ReportType getType()>();

        $z0 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.version.report.ReportType: boolean isRequestedReportType(org.apache.jackrabbit.webdav.version.report.ReportInfo)>($r1);

        if $z0 != 0 goto label1;

        $r3 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(400, "DAV:version-tree element expected.");

        throw $r3;

     label1:
        r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.version.report.ReportInfo info> = $r1;

        return;
    }
    private void setResource(org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        boolean $z0;
        org.apache.jackrabbit.webdav.DavException $r2;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        if $r1 == null goto label2;

        $z0 = $r1 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 != 0 goto label1;

        $z0 = $r1 instanceof org.apache.jackrabbit.webdav.version.VersionResource;

        if $z0 == 0 goto label2;

     label1:
        r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.DavResource resource> = $r1;

        return;

     label2:
        $r2 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r2.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(400, "DAV:version-tree report can only be created for version-controlled resources and version resources.");

        throw $r2;
    }
    public org.apache.jackrabbit.webdav.version.report.ReportType getType()
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;
        org.apache.jackrabbit.webdav.version.report.ReportType r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        r1 = <org.apache.jackrabbit.webdav.version.report.ReportType: org.apache.jackrabbit.webdav.version.report.ReportType VERSION_TREE>;

        return r1;
    }
    public void init(org.apache.jackrabbit.webdav.DavResource, org.apache.jackrabbit.webdav.version.report.ReportInfo) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;
        org.apache.jackrabbit.webdav.DavResource $r1;
        org.apache.jackrabbit.webdav.version.report.ReportInfo $r2;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.version.report.ReportInfo;

        specialinvoke r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: void setResource(org.apache.jackrabbit.webdav.DavResource)>($r1);

        specialinvoke r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: void setInfo(org.apache.jackrabbit.webdav.version.report.ReportInfo)>($r2);

        return;
    }
    public boolean isMultiStatusReport()
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        return 1;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.version.report.VersionTreeReport r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.MultiStatus $r2;
        org.w3c.dom.Element $r3;

        r0 := @this: org.apache.jackrabbit.webdav.version.report.VersionTreeReport;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r2 = specialinvoke r0.<org.apache.jackrabbit.webdav.version.report.VersionTreeReport: org.apache.jackrabbit.webdav.MultiStatus getMultiStatus()>();

        $r3 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.MultiStatus: org.w3c.dom.Element toXml(org.w3c.dom.Document)>($r1);

        return $r3;
    }
