org.apache.jackrabbit.webdav.version.LabelInfo extends java.lang.Object implements org.apache.jackrabbit.webdav.version.DeltaVConstants org.apache.jackrabbit.webdav.xml.XmlSerializable
public static final int TYPE_ADD
public static final int TYPE_REMOVE
public static final int TYPE_SET
private static org.slf4j.Logger log
public static java.lang.String[] typeNames
private final int depth
private final java.lang.String labelName
private final int type
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.lang.String[] $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/version/LabelInfo;");

        <org.apache.jackrabbit.webdav.version.LabelInfo: org.slf4j.Logger log> = $r0;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "set";

        $r1[1] = "remove";

        $r1[2] = "add";

        <org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String[] typeNames> = $r1;

        return;
    }
    public void <init>(java.lang.String, int)
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.jackrabbit.webdav.version.LabelInfo: void <init>(java.lang.String,int,int)>($r1, $i0, 0);

        return;
    }
    public void <init>(java.lang.String, int, int)
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Label name must not be null.");

        throw $r2;

     label1:
        if $i0 < 0 goto label2;

        if $i0 <= 2 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label3:
        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String labelName> = $r1;

        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int type> = $i0;

        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int depth> = $i1;

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        java.lang.String $r1, $r2, $r5;
        java.lang.IllegalArgumentException $r3;
        boolean z0, $z1;
        int i0, $i1;
        java.lang.String[] $r4;
        java.lang.StringBuilder $r6;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Label name must not be null.");

        throw $r3;

     label1:
        z0 = 0;

        i0 = 0;

     label2:
        $r4 = <org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String[] typeNames>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label3;

        $r4 = <org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String[] typeNames>;

        $r5 = $r4[i0];

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label4;

        z0 = 1;

     label3:
        if z0 != 0 goto label5;

        $r3 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int type> = i0;

        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String labelName> = $r1;

        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int depth> = 0;

        return;
    }
    public void <init>(org.w3c.dom.Element) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        org.w3c.dom.Element $r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        $r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<org.apache.jackrabbit.webdav.version.LabelInfo: void <init>(org.w3c.dom.Element,int)>($r1, 0);

        return;
    }
    public void <init>(org.w3c.dom.Element, int) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        org.w3c.dom.Element $r1, $r8;
        int $i0, i1, i2, $i3;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        boolean $z0;
        org.slf4j.Logger $r3;
        org.apache.jackrabbit.webdav.DavException $r4;
        java.lang.String r5, $r7;
        java.lang.String[] $r6;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        $r1 := @parameter0: org.w3c.dom.Element;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.jackrabbit.webdav.version.DeltaVConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "label", $r2);

        if $z0 != 0 goto label1;

        $r3 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.slf4j.Logger log>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>("DAV:label element expected");

        $r4 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r4.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r4;

     label1:
        r5 = null;

        i1 = -1;

        i2 = 0;

     label2:
        $r6 = <org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String[] typeNames>;

        $i3 = lengthof $r6;

        if i2 >= $i3 goto label4;

        if i1 != -1 goto label4;

        $r6 = <org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String[] typeNames>;

        $r7 = $r6[i2];

        $r2 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean hasChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r7, $r2);

        if $z0 == 0 goto label3;

        i1 = i2;

        $r6 = <org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String[] typeNames>;

        r5 = $r6[i2];

        $r2 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r8 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, r5, $r2);

        $r2 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getChildText(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r8, "label-name", $r2);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        if r5 != null goto label5;

        $r3 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.slf4j.Logger log>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>("DAV:label element must contain at least one set, add or remove element defining a label-name.");

        $r4 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r4.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(400);

        throw $r4;

     label5:
        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String labelName> = r5;

        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int type> = i1;

        r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int depth> = $i0;

        return;
    }
    public int getDepth()
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        int i0;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        i0 = r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int depth>;

        return i0;
    }
    public java.lang.String getLabelName()
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        r1 = r0.<org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String labelName>;

        return r1;
    }
    public int getType()
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        int i0;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        i0 = r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int type>;

        return i0;
    }
    public org.w3c.dom.Element toXml(org.w3c.dom.Document)
    {
        org.apache.jackrabbit.webdav.version.LabelInfo r0;
        org.w3c.dom.Document $r1;
        java.lang.String $r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;
        org.w3c.dom.Element $r4, $r6;
        java.lang.String[] $r5;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.version.LabelInfo;

        $r1 := @parameter0: org.w3c.dom.Document;

        $r3 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, "label", $r3);

        $r5 = <org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String[] typeNames>;

        $i0 = r0.<org.apache.jackrabbit.webdav.version.LabelInfo: int type>;

        $r2 = $r5[$i0];

        $r3 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r4, $r2, $r3);

        $r3 = <org.apache.jackrabbit.webdav.version.LabelInfo: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r2 = r0.<org.apache.jackrabbit.webdav.version.LabelInfo: java.lang.String labelName>;

        staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element addChildElement(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r6, "label-name", $r3, $r2);

        return $r4;
    }
