org.apache.jackrabbit.webdav.io.InputContextImpl extends java.lang.Object implements org.apache.jackrabbit.webdav.io.InputContext
private static org.slf4j.Logger log
private final java.io.InputStream in
private final javax.servlet.http.HttpServletRequest request
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/io/InputContextImpl;");

        <org.apache.jackrabbit.webdav.io.InputContextImpl: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(javax.servlet.http.HttpServletRequest, java.io.InputStream)
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        javax.servlet.http.HttpServletRequest $r1;
        java.io.InputStream $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        $r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r2 := @parameter1: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DavResource and Request must not be null.");

        throw $r3;

     label1:
        r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: javax.servlet.http.HttpServletRequest request> = $r1;

        r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: java.io.InputStream in> = $r2;

        return;
    }
    public java.lang.String getContentLanguage()
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        java.lang.String $r1;
        javax.servlet.http.HttpServletRequest $r2;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        $r2 = r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: javax.servlet.http.HttpServletRequest request>;

        $r1 = interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Content-Language");

        return $r1;
    }
    public long getContentLength()
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        java.lang.NumberFormatException r1;
        javax.servlet.http.HttpServletRequest $r2;
        java.lang.String $r3;
        long $l0;
        org.slf4j.Logger $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        $r2 = r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: javax.servlet.http.HttpServletRequest request>;

        $r3 = interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Content-Length");

        if $r3 != null goto label1;

        return -1L;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

        $r4 = <org.apache.jackrabbit.webdav.io.InputContextImpl: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("broken Content-Length header: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void error(java.lang.String)>($r3);

        return -1L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public java.lang.String getContentType()
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        java.lang.String $r1;
        javax.servlet.http.HttpServletRequest $r2;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        $r2 = r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: javax.servlet.http.HttpServletRequest request>;

        $r1 = interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Content-Type");

        return $r1;
    }
    public java.io.InputStream getInputStream()
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        r1 = r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: java.io.InputStream in>;

        return r1;
    }
    public long getModificationTime()
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        long $l0;
        java.util.Date $r1;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        return $l0;
    }
    public java.lang.String getProperty(java.lang.String)
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        java.lang.String $r1;
        javax.servlet.http.HttpServletRequest $r2;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: javax.servlet.http.HttpServletRequest request>;

        $r1 = interfaceinvoke $r2.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>($r1);

        return $r1;
    }
    public boolean hasStream()
    {
        org.apache.jackrabbit.webdav.io.InputContextImpl r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.jackrabbit.webdav.io.InputContextImpl;

        $r1 = r0.<org.apache.jackrabbit.webdav.io.InputContextImpl: java.io.InputStream in>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
