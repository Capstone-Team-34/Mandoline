org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser extends java.lang.Object
private static org.slf4j.Logger log
private final java.util.List relations
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/util/LinkHeaderFieldParser;");

        <org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>(java.util.Enumeration)
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser r0;
        java.util.Enumeration r1;
        java.util.ArrayList r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.util.List $r5;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser;

        r1 := @parameter0: java.util.Enumeration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label3;

        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: void addFields(java.util.List,java.lang.String)>(r2, $r4);

        goto label1;

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: java.util.List relations> = $r5;

        return;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: java.util.List relations> = $r5;

        return;
    }
    public void <init>(java.util.List)
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser r0;
        java.util.List r1;
        java.util.ArrayList r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String r5;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        specialinvoke r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: void addFields(java.util.List,java.lang.String)>(r2, r5);

        goto label1;

     label2:
        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: java.util.List relations> = r1;

        return;
    }
    private void addFields(java.util.List, java.lang.String)
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser r0;
        java.util.List r1;
        java.lang.String $r2, $r3;
        boolean z0, z1;
        int i0, $i1;
        char $c2;
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation $r4;
        java.lang.Exception r5, r7;
        org.slf4j.Logger $r6;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        z0 = 0;

        z1 = 0;

        i0 = 0;

     label01:
        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i0 >= $i1 goto label15;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i0);

        if z0 == 0 goto label04;

        if $c2 == 62 goto label03;

        z0 = 1;

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        z0 = 0;

        goto label02;

     label04:
        if z1 == 0 goto label07;

        if $c2 == 34 goto label06;

        z1 = 1;

     label05:
        if $c2 != 92 goto label02;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        if i0 >= $i1 goto label02;

        i0 = i0 + 1;

        virtualinvoke $r2.<java.lang.String: char charAt(int)>(i0);

        goto label02;

     label06:
        z1 = 0;

        goto label05;

     label07:
        if $c2 != 60 goto label12;

        z0 = 1;

     label08:
        if $c2 != 34 goto label13;

        z1 = 1;

     label09:
        if $c2 != 44 goto label02;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label11;

        $r4 = new org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation;

     label10:
        specialinvoke $r4.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: void <init>(java.lang.String)>($r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label11:
        i0 = i0 + 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i0);

        specialinvoke r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: void addFields(java.util.List,java.lang.String)>(r1, $r2);

        return;

     label12:
        z0 = 0;

        goto label08;

     label13:
        z1 = 0;

        goto label09;

     label14:
        r5 := @caughtexception;

        $r6 = <org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: org.slf4j.Logger log>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("parse error in Link Header field value", r5);

        goto label11;

     label15:
        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i0 <= 0 goto label19;

        $r4 = new org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation;

     label16:
        specialinvoke $r4.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: void <init>(java.lang.String)>($r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label17:
        return;

     label18:
        r7 := @caughtexception;

        $r6 = <org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: org.slf4j.Logger log>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("parse error in Link Header field value", r7);

     label19:
        return;

        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Exception from label16 to label17 with label18;
    }
    public java.lang.String getFirstTargetForRelation(java.lang.String)
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser r0;
        java.lang.String $r1, r2;
        int i0, i1;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation r6;
        java.util.Map $r7;
        java.util.Locale $r8;
        java.lang.String[] $r9;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser: java.util.List relations>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation) $r5;

        $r7 = virtualinvoke r6.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.Map getParameters()>();

        $r5 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("rel");

        r2 = (java.lang.String) $r5;

        if r2 == null goto label1;

        $r8 = <java.util.Locale: java.util.Locale ENGLISH>;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r8);

        $r9 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s");

        i0 = lengthof $r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label1;

        r2 = $r9[i1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke r6.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.lang.String getTarget()>();

        return $r1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }
