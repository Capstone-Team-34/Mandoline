org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation extends java.lang.Object
private static java.util.regex.Pattern P
private java.util.Map parameters
private java.lang.String target
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*<(.*)>\\s*(.*)");

        <org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.regex.Pattern P> = $r0;

        return;
    }
    public void <init>(java.lang.String) throws java.lang.Exception
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation r0;
        java.lang.String $r1, $r12;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5;
        org.apache.commons.httpclient.util.ParameterParser $r6;
        java.util.List $r7;
        int $i0;
        java.util.Map $r8;
        java.lang.Object $r9;
        org.apache.commons.httpclient.NameValuePair r10;
        java.util.Locale $r11;
        java.util.HashMap $r13;
        java.util.Iterator $r14;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.regex.Pattern P>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal Link header field value:");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.lang.String target> = $r1;

        $r6 = new org.apache.commons.httpclient.util.ParameterParser;

        specialinvoke $r6.<org.apache.commons.httpclient.util.ParameterParser: void <init>()>();

        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(java.lang.String,char)>($r1, 59);

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        $r8 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.Map parameters> = $r8;

        return;

     label2:
        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 != 1 goto label3;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        r10 = (org.apache.commons.httpclient.NameValuePair) $r9;

        $r1 = virtualinvoke r10.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r11 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);

        $r12 = virtualinvoke r10.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        $r8 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r1, $r12);

        r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.Map parameters> = $r8;

        return;

     label3:
        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.Map parameters> = $r13;

        $r14 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.httpclient.NameValuePair) $r9;

        $r8 = r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.Map parameters>;

        $r1 = virtualinvoke r10.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r11 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);

        $r12 = virtualinvoke r10.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r12);

        if $r9 == null goto label4;

        $r4 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate parameter + ");

        $r1 = virtualinvoke r10.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field ignored");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r4;

     label5:
        return;
    }
    public java.util.Map getParameters()
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation r0;
        java.util.Map r1;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation;

        r1 = r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.Map parameters>;

        return r1;
    }
    public java.lang.String getTarget()
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation;

        r1 = r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.lang.String target>;

        return r1;
    }
    public java.lang.String toString()
    {
        org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.lang.String target>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r3 = r0.<org.apache.jackrabbit.webdav.util.LinkHeaderFieldParser$LinkRelation: java.util.Map parameters>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
