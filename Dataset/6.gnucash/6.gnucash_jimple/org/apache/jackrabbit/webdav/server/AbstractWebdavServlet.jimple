org.apache.jackrabbit.webdav.server.AbstractWebdavServlet extends javax.servlet.http.HttpServlet implements org.apache.jackrabbit.webdav.DavConstants
public static final java.lang.String DEFAULT_AUTHENTICATE_HEADER
public static final java.lang.String INIT_PARAM_AUTHENTICATE_HEADER
public static final java.lang.String INIT_PARAM_CREATE_ABSOLUTE_URI
public static final java.lang.String INIT_PARAM_CSRF_PROTECTION
public static final java.lang.String INIT_PARAM_MISSING_AUTH_MAPPING
private static org.slf4j.Logger log
private java.lang.String authenticate_header
private boolean createAbsoluteURI
private org.apache.jackrabbit.webdav.util.CSRFUtil csrfUtil
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/server/AbstractWebdavServlet;");

        <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: boolean createAbsoluteURI> = 1;

        return;
    }
    private void spoolResource(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource, boolean) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;
        boolean $z0, $z1;
        long $l0, $l2;
        byte $b1;
        javax.servlet.ServletOutputStream $r4;
        org.apache.jackrabbit.webdav.io.OutputContext $r5;
        java.io.OutputStream $r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 := @parameter3: boolean;

        $z1 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z1 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(404);

        return;

     label1:
        $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: long getDateHeader(java.lang.String)>("If-Modified-Since");

        $b1 = $l0 cmp -1L;

        if $b1 <= 0 goto label2;

        $l2 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: long getModificationTime()>();

        $b1 = $l2 cmp -1L;

        if $b1 == 0 goto label2;

        $l2 = $l2 / 1000L;

        $l2 = $l2 * 1000L;

        $b1 = $l2 cmp $l0;

        if $b1 > 0 goto label2;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(304);

        return;

     label2:
        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: javax.servlet.ServletOutputStream getOutputStream()>();

     label3:
        $r6 = (java.io.OutputStream) $r4;

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.io.OutputContext getOutputContext(org.apache.jackrabbit.webdav.DavServletResponse,java.io.OutputStream)>($r2, $r6);

        interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: void spool(org.apache.jackrabbit.webdav.io.OutputContext)>($r5);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void flushBuffer()>();

        return;

     label4:
        $r4 = null;

        goto label3;
    }
    protected void doAcl(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.w3c.dom.Document $r4;
        org.apache.jackrabbit.webdav.DavException $r5;
        org.w3c.dom.Element $r6;
        org.apache.jackrabbit.webdav.security.AclProperty $r7;
        org.apache.jackrabbit.webdav.security.AclResource r8;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.security.AclResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.w3c.dom.Document getRequestDocument()>();

        if $r4 != null goto label2;

        $r5 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r5.<org.apache.jackrabbit.webdav.DavException: void <init>(int,java.lang.String)>(400, "ACL request requires a DAV:acl body.");

        throw $r5;

     label2:
        $r6 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r7 = staticinvoke <org.apache.jackrabbit.webdav.security.AclProperty: org.apache.jackrabbit.webdav.security.AclProperty createFromXml(org.w3c.dom.Element)>($r6);

        r8 = (org.apache.jackrabbit.webdav.security.AclResource) r3;

        interfaceinvoke r8.<org.apache.jackrabbit.webdav.security.AclResource: void alterAcl(org.apache.jackrabbit.webdav.security.AclProperty)>($r7);

        return;
    }
    protected void doBaselineControl(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;
        boolean $z0;
        org.slf4j.Logger $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        org.apache.jackrabbit.webdav.DavException $r7;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add baseline control. Resource does not exist ");

        $r6 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getHref()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r6);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(404);

        return;

     label1:
        $z0 = $r3 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 != 0 goto label3;

     label2:
        $r4 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BaselineControl is not supported by resource ");

        $r6 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getHref()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r6);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label3:
        $r7 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r7.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(501);

        throw $r7;
    }
    protected void doBind(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r8, $r9;
        boolean $z0;
        org.apache.jackrabbit.webdav.bind.BindInfo $r4;
        org.apache.jackrabbit.webdav.DavResourceFactory $r5;
        java.lang.String $r6;
        org.apache.jackrabbit.webdav.DavResourceLocator $r7;
        int $i0;
        org.apache.jackrabbit.webdav.bind.BindableResource r10;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(404);

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.bind.BindInfo getBindInfo()>();

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r6 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.bind.BindInfo: java.lang.String getHref()>();

        $r7 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getHrefLocator(java.lang.String)>($r6);

        $r8 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r7, $r1, $r2);

        $z0 = $r8 instanceof org.apache.jackrabbit.webdav.bind.BindableResource;

        if $z0 != 0 goto label2;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label2:
        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r6 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.bind.BindInfo: java.lang.String getSegment()>();

        $r7 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getMemberLocator(java.lang.String)>($r6);

        $r9 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r7, $r1, $r2);

        $i0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: int validateDestination(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.WebdavRequest,boolean)>($r9, $r1, 0);

        if $i0 <= 204 goto label3;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>($i0);

        return;

     label3:
        r10 = (org.apache.jackrabbit.webdav.bind.BindableResource) $r8;

        interfaceinvoke r10.<org.apache.jackrabbit.webdav.bind.BindableResource: void bind(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.DavResource)>($r3, $r9);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>($i0);

        return;
    }
    protected void doCheckin(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        java.lang.String $r3;
        org.apache.jackrabbit.webdav.DavResource r4;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.VersionControlledResource r5;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r4 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r4 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        r5 = (org.apache.jackrabbit.webdav.version.VersionControlledResource) r4;

        $r3 = interfaceinvoke r5.<org.apache.jackrabbit.webdav.version.VersionControlledResource: java.lang.String checkin()>();

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setHeader(java.lang.String,java.lang.String)>("Location", $r3);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(201);

        return;
    }
    protected void doCheckout(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.VersionControlledResource r4;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        r4 = (org.apache.jackrabbit.webdav.version.VersionControlledResource) r3;

        interfaceinvoke r4.<org.apache.jackrabbit.webdav.version.VersionControlledResource: void checkout()>();

        return;
    }
    protected void doCopy(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r6;
        boolean $z0;
        int $i0, $i1;
        org.apache.jackrabbit.webdav.DavResourceFactory $r4;
        org.apache.jackrabbit.webdav.DavResourceLocator $r5;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = 1;

        $i0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: int getDepth(int)>(2147483647);

        if $i0 == 0 goto label1;

        if $i0 == 2147483647 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(400);

        return;

     label1:
        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getDestinationLocator()>();

        $r6 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r5, $r1, $r2);

        $i1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: int validateDestination(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.WebdavRequest,boolean)>($r6, $r1, 1);

        if $i1 <= 204 goto label2;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>($i1);

        return;

     label2:
        if $i0 != 0 goto label4;

     label3:
        interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: void copy(org.apache.jackrabbit.webdav.DavResource,boolean)>($r6, $z0);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>($i1);

        return;

     label4:
        $z0 = 0;

        goto label3;
    }
    protected void doDelete(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r4;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResource getCollection()>();

        if $r4 == null goto label1;

        interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: void removeMember(org.apache.jackrabbit.webdav.DavResource)>($r3);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(204);

        return;

     label1:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int,java.lang.String)>(403, "Cannot remove the root resource.");

        return;
    }
    protected void doGet(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        specialinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void spoolResource(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource,boolean)>($r1, $r2, $r3, 1);

        return;
    }
    protected void doHead(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        specialinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void spoolResource(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource,boolean)>($r1, $r2, $r3, 0);

        return;
    }
    protected void doLabel(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.version.LabelInfo $r3;
        org.apache.jackrabbit.webdav.DavResource r4;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.VersionResource r5;
        org.apache.jackrabbit.webdav.version.VersionControlledResource r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r4 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r3 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.version.LabelInfo getLabelInfo()>();

        $z0 = r4 instanceof org.apache.jackrabbit.webdav.version.VersionResource;

        if $z0 == 0 goto label1;

        r5 = (org.apache.jackrabbit.webdav.version.VersionResource) r4;

        interfaceinvoke r5.<org.apache.jackrabbit.webdav.version.VersionResource: void label(org.apache.jackrabbit.webdav.version.LabelInfo)>($r3);

        return;

     label1:
        $z0 = r4 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 == 0 goto label2;

        r6 = (org.apache.jackrabbit.webdav.version.VersionControlledResource) r4;

        interfaceinvoke r6.<org.apache.jackrabbit.webdav.version.VersionControlledResource: void label(org.apache.jackrabbit.webdav.version.LabelInfo)>($r3);

        return;

     label2:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;
    }
    protected void doLock(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;
        org.apache.jackrabbit.webdav.lock.ActiveLock r4;
        org.apache.jackrabbit.webdav.header.CodedUrlHeader r5;
        java.util.ArrayList r6;
        int i0, i1;
        org.apache.jackrabbit.webdav.property.DavPropertySet r7;
        org.apache.jackrabbit.webdav.lock.LockInfo $r8;
        boolean $z0;
        org.apache.jackrabbit.webdav.lock.ActiveLock[] $r9;
        org.apache.jackrabbit.webdav.lock.Type $r10;
        org.apache.jackrabbit.webdav.lock.Scope $r11;
        org.apache.jackrabbit.webdav.property.DavPropertyName $r12;
        org.apache.jackrabbit.webdav.property.DavProperty $r13;
        java.lang.Object $r14;
        java.lang.String $r15, $r16, $r17;
        org.apache.jackrabbit.webdav.DavException $r18;
        java.lang.Object[] $r19;
        short s2;
        org.apache.jackrabbit.webdav.lock.LockDiscovery $r20;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r8 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.lock.LockInfo getLockInfo()>();

        $z0 = virtualinvoke $r8.<org.apache.jackrabbit.webdav.lock.LockInfo: boolean isRefreshLock()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.lock.ActiveLock[] getLocks()>();

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r9;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r4 = $r9[i1];

        $r10 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.lock.ActiveLock: org.apache.jackrabbit.webdav.lock.Type getType()>();

        virtualinvoke $r8.<org.apache.jackrabbit.webdav.lock.LockInfo: void setType(org.apache.jackrabbit.webdav.lock.Type)>($r10);

        $r11 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.lock.ActiveLock: org.apache.jackrabbit.webdav.lock.Scope getScope()>();

        virtualinvoke $r8.<org.apache.jackrabbit.webdav.lock.LockInfo: void setScope(org.apache.jackrabbit.webdav.lock.Scope)>($r11);

        $r12 = <org.apache.jackrabbit.webdav.property.DavPropertyName: org.apache.jackrabbit.webdav.property.DavPropertyName GETETAG>;

        $r13 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.property.DavProperty getProperty(org.apache.jackrabbit.webdav.property.DavPropertyName)>($r12);

        if $r13 == null goto label4;

        $r14 = interfaceinvoke $r13.<org.apache.jackrabbit.webdav.property.DavProperty: java.lang.Object getValue()>();

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

     label2:
        $r16 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getHref()>();

        $r17 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.lock.ActiveLock: java.lang.String getToken()>();

        $z0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: boolean matchesIfHeader(java.lang.String,java.lang.String,java.lang.String)>($r16, $r17, $r15);

        if $z0 == 0 goto label3;

        $r15 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.lock.ActiveLock: java.lang.String getToken()>();

        r4 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.lock.ActiveLock refreshLock(org.apache.jackrabbit.webdav.lock.LockInfo,java.lang.String)>($r8, $r15);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r15 = "";

        goto label2;

     label5:
        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label6;

        $r18 = new org.apache.jackrabbit.webdav.DavException;

        specialinvoke $r18.<org.apache.jackrabbit.webdav.DavException: void <init>(int)>(412);

        throw $r18;

     label6:
        i0 = interfaceinvoke r6.<java.util.List: int size()>();

        $r9 = newarray (org.apache.jackrabbit.webdav.lock.ActiveLock)[i0];

        $r19 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r9 = (org.apache.jackrabbit.webdav.lock.ActiveLock[]) $r19;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendRefreshLockResponse(org.apache.jackrabbit.webdav.lock.ActiveLock[])>($r9);

        return;

     label7:
        s2 = 200;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 != 0 goto label8;

        s2 = 201;

     label8:
        r4 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.lock.ActiveLock lock(org.apache.jackrabbit.webdav.lock.LockInfo)>($r8);

        r5 = new org.apache.jackrabbit.webdav.header.CodedUrlHeader;

        $r15 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.lock.ActiveLock: java.lang.String getToken()>();

        specialinvoke r5.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: void <init>(java.lang.String,java.lang.String)>("Lock-Token", $r15);

        $r15 = virtualinvoke r5.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: java.lang.String getHeaderName()>();

        $r16 = virtualinvoke r5.<org.apache.jackrabbit.webdav.header.CodedUrlHeader: java.lang.String getHeaderValue()>();

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setHeader(java.lang.String,java.lang.String)>($r15, $r16);

        r7 = new org.apache.jackrabbit.webdav.property.DavPropertySet;

        specialinvoke r7.<org.apache.jackrabbit.webdav.property.DavPropertySet: void <init>()>();

        $r20 = new org.apache.jackrabbit.webdav.lock.LockDiscovery;

        specialinvoke $r20.<org.apache.jackrabbit.webdav.lock.LockDiscovery: void <init>(org.apache.jackrabbit.webdav.lock.ActiveLock)>(r4);

        virtualinvoke r7.<org.apache.jackrabbit.webdav.property.DavPropertySet: org.apache.jackrabbit.webdav.property.DavProperty add(org.apache.jackrabbit.webdav.property.DavProperty)>($r20);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendXmlResponse(org.apache.jackrabbit.webdav.xml.XmlSerializable,int)>(r7, s2);

        return;
    }
    protected void doMerge(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.MergeInfo $r4;
        org.apache.jackrabbit.webdav.version.VersionControlledResource r5;
        org.apache.jackrabbit.webdav.MultiStatus $r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.version.MergeInfo getMergeInfo()>();

        r5 = (org.apache.jackrabbit.webdav.version.VersionControlledResource) r3;

        $r6 = interfaceinvoke r5.<org.apache.jackrabbit.webdav.version.VersionControlledResource: org.apache.jackrabbit.webdav.MultiStatus merge(org.apache.jackrabbit.webdav.version.MergeInfo)>($r4);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendMultiStatus(org.apache.jackrabbit.webdav.MultiStatus)>($r6);

        return;
    }
    protected void doMkActivity(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r8;
        boolean $z0;
        org.slf4j.Logger $r4;
        java.lang.StringBuilder $r5, $r11;
        java.lang.StringBuffer $r6;
        java.lang.String $r7;
        javax.servlet.ServletInputStream $r9;
        org.apache.jackrabbit.webdav.io.InputContext $r10;
        java.io.InputStream $r12;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create activity: A resource already exists at the request-URL ");

        $r6 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: java.lang.StringBuffer getRequestURL()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r7);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(403);

        return;

     label1:
        $r8 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResource getCollection()>();

        if $r8 == null goto label2;

        $z0 = interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(409);

        return;

     label3:
        $r7 = interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getComplianceClass()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("activity");

        if $z0 != 0 goto label4;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label4:
        $z0 = $r3 instanceof org.apache.jackrabbit.webdav.version.ActivityResource;

        if $z0 != 0 goto label5;

        $r4 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void error(java.lang.String)>("Unable to create activity: ActivityResource expected");

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(500);

        return;

     label5:
        $r9 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: javax.servlet.ServletInputStream getInputStream()>();

        $r12 = (java.io.InputStream) $r9;

        $r10 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.io.InputContext getInputContext(org.apache.jackrabbit.webdav.DavServletRequest,java.io.InputStream)>($r1, $r12);

        interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavResource: void addMember(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.io.InputContext)>($r3, $r10);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(201);

        return;
    }
    protected void doMkCol(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r4;
        boolean $z0;
        int $i0;
        java.lang.String $r5;
        javax.servlet.ServletInputStream $r6;
        org.apache.jackrabbit.webdav.io.InputContext $r7;
        java.io.InputStream $r8;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResource getCollection()>();

        if $r4 == null goto label1;

        $z0 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 != 0 goto label2;

     label1:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(409);

        return;

     label2:
        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label3;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label3:
        $i0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: int getContentLength()>();

        if $i0 > 0 goto label4;

        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: java.lang.String getHeader(java.lang.String)>("Transfer-Encoding");

        if $r5 == null goto label6;

     label4:
        $r6 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: javax.servlet.ServletInputStream getInputStream()>();

        $r8 = (java.io.InputStream) $r6;

        $r7 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.io.InputContext getInputContext(org.apache.jackrabbit.webdav.DavServletRequest,java.io.InputStream)>($r1, $r8);

        interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: void addMember(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.io.InputContext)>($r3, $r7);

     label5:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(201);

        return;

     label6:
        $r7 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.io.InputContext getInputContext(org.apache.jackrabbit.webdav.DavServletRequest,java.io.InputStream)>($r1, null);

        interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: void addMember(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.io.InputContext)>($r3, $r7);

        goto label5;
    }
    protected void doMkWorkspace(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r5;
        boolean $z0;
        org.slf4j.Logger $r4;
        org.apache.jackrabbit.webdav.version.DeltaVResource r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>("Cannot create a new workspace. Resource already exists.");

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(403);

        return;

     label1:
        $r5 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResource getCollection()>();

        if $r5 == null goto label2;

        $z0 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.DavResource: boolean isCollection()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(409);

        return;

     label3:
        $z0 = $r5 instanceof org.apache.jackrabbit.webdav.version.DeltaVResource;

        if $z0 != 0 goto label4;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label4:
        r6 = (org.apache.jackrabbit.webdav.version.DeltaVResource) $r5;

        interfaceinvoke r6.<org.apache.jackrabbit.webdav.version.DeltaVResource: void addWorkspace(org.apache.jackrabbit.webdav.DavResource)>($r3);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(201);

        return;
    }
    protected void doMove(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r6;
        org.apache.jackrabbit.webdav.DavResourceFactory $r4;
        org.apache.jackrabbit.webdav.DavResourceLocator $r5;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getDestinationLocator()>();

        $r6 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r5, $r1, $r2);

        $i0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: int validateDestination(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.WebdavRequest,boolean)>($r6, $r1, 1);

        if $i0 <= 204 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>($i0);

        return;

     label1:
        interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: void move(org.apache.jackrabbit.webdav.DavResource)>($r6);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>($i0);

        return;
    }
    protected void doOptions(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        java.lang.String r3;
        int i0, i1;
        org.apache.jackrabbit.webdav.DavResource $r4;
        boolean $z0;
        org.apache.jackrabbit.webdav.search.SearchResource $r5;
        org.apache.jackrabbit.webdav.search.QueryGrammerSet $r6;
        java.lang.String[] $r7;
        java.lang.StringBuilder $r8;
        org.apache.jackrabbit.webdav.version.OptionsResponse r9;
        org.apache.jackrabbit.webdav.version.OptionsInfo $r10;
        org.apache.jackrabbit.webdav.version.DeltaVResource $r11;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r4 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        r3 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getComplianceClass()>();

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void addHeader(java.lang.String,java.lang.String)>("DAV", r3);

        r3 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: java.lang.String getSupportedMethods()>();

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void addHeader(java.lang.String,java.lang.String)>("Allow", r3);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void addHeader(java.lang.String,java.lang.String)>("MS-Author-Via", "DAV");

        $z0 = $r4 instanceof org.apache.jackrabbit.webdav.search.SearchResource;

        if $z0 == 0 goto label2;

        $r5 = (org.apache.jackrabbit.webdav.search.SearchResource) $r4;

        $r6 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.search.SearchResource: org.apache.jackrabbit.webdav.search.QueryGrammerSet getQueryGrammerSet()>();

        $r7 = virtualinvoke $r6.<org.apache.jackrabbit.webdav.search.QueryGrammerSet: java.lang.String[] getQueryLanguages()>();

        i0 = lengthof $r7;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r7[i1];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void addHeader(java.lang.String,java.lang.String)>("DASL", r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        r9 = null;

        $r10 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.version.OptionsInfo getOptionsInfo()>();

        if $r10 == null goto label3;

        $z0 = $r4 instanceof org.apache.jackrabbit.webdav.version.DeltaVResource;

        if $z0 == 0 goto label3;

        $r11 = (org.apache.jackrabbit.webdav.version.DeltaVResource) $r4;

        r9 = interfaceinvoke $r11.<org.apache.jackrabbit.webdav.version.DeltaVResource: org.apache.jackrabbit.webdav.version.OptionsResponse getOptionResponse(org.apache.jackrabbit.webdav.version.OptionsInfo)>($r10);

     label3:
        if r9 != null goto label4;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(200);

        return;

     label4:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendXmlResponse(org.apache.jackrabbit.webdav.xml.XmlSerializable,int)>(r9, 200);

        return;
    }
    protected void doOrderPatch(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.ordering.OrderPatch $r3;
        org.apache.jackrabbit.webdav.DavResource r4;
        boolean $z0;
        org.apache.jackrabbit.webdav.ordering.OrderingResource r5;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r4 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r4 instanceof org.apache.jackrabbit.webdav.ordering.OrderingResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        $r3 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.ordering.OrderPatch getOrderPatch()>();

        if $r3 != null goto label2;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(400);

        return;

     label2:
        r5 = (org.apache.jackrabbit.webdav.ordering.OrderingResource) r4;

        interfaceinvoke r5.<org.apache.jackrabbit.webdav.ordering.OrderingResource: void orderMembers(org.apache.jackrabbit.webdav.ordering.OrderPatch)>($r3);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(200);

        return;
    }
    protected void doPoll(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.observation.ObservationResource r4;
        java.lang.String $r5;
        long $l0;
        org.apache.jackrabbit.webdav.observation.EventDiscovery $r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.observation.ObservationResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        r4 = (org.apache.jackrabbit.webdav.observation.ObservationResource) r3;

        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: java.lang.String getSubscriptionId()>();

        $l0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: long getPollTimeout()>();

        $r6 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.observation.ObservationResource: org.apache.jackrabbit.webdav.observation.EventDiscovery poll(java.lang.String,long)>($r5, $l0);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendPollResponse(org.apache.jackrabbit.webdav.observation.EventDiscovery)>($r6);

        return;
    }
    protected void doPost(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doPut(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        return;
    }
    protected void doPropFind(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;
        org.apache.jackrabbit.webdav.MultiStatus r4;
        boolean $z0;
        int $i0, $i1;
        org.apache.jackrabbit.webdav.property.DavPropertyNameSet $r5;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(404);

        return;

     label1:
        $i0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: int getDepth(int)>(2147483647);

        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.property.DavPropertyNameSet getPropFindProperties()>();

        $i1 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: int getPropFindType()>();

        r4 = new org.apache.jackrabbit.webdav.MultiStatus;

        specialinvoke r4.<org.apache.jackrabbit.webdav.MultiStatus: void <init>()>();

        virtualinvoke r4.<org.apache.jackrabbit.webdav.MultiStatus: void addResourceProperties(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.property.DavPropertyNameSet,int,int)>($r3, $r5, $i1, $i0);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendMultiStatus(org.apache.jackrabbit.webdav.MultiStatus)>(r4);

        return;
    }
    protected void doPropPatch(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3;
        org.apache.jackrabbit.webdav.MultiStatus r4;
        java.util.List $r5;
        boolean $z0;
        org.apache.jackrabbit.webdav.MultiStatusResponse $r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: java.util.List getPropPatchChangeList()>();

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(400);

        return;

     label1:
        r4 = new org.apache.jackrabbit.webdav.MultiStatus;

        specialinvoke r4.<org.apache.jackrabbit.webdav.MultiStatus: void <init>()>();

        $r6 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.MultiStatusResponse alterProperties(java.util.List)>($r5);

        virtualinvoke r4.<org.apache.jackrabbit.webdav.MultiStatus: void addResponse(org.apache.jackrabbit.webdav.MultiStatusResponse)>($r6);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendMultiStatus(org.apache.jackrabbit.webdav.MultiStatus)>(r4);

        return;
    }
    protected void doPut(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r4;
        boolean $z0;
        short s0;
        javax.servlet.ServletInputStream $r5;
        org.apache.jackrabbit.webdav.io.InputContext $r6;
        java.io.InputStream $r7;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResource getCollection()>();

        if $r4 == null goto label1;

        $z0 = interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 != 0 goto label2;

     label1:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(409);

        return;

     label2:
        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label4;

        s0 = 204;

     label3:
        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: javax.servlet.ServletInputStream getInputStream()>();

        $r7 = (java.io.InputStream) $r5;

        $r6 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.io.InputContext getInputContext(org.apache.jackrabbit.webdav.DavServletRequest,java.io.InputStream)>($r1, $r7);

        interfaceinvoke $r4.<org.apache.jackrabbit.webdav.DavResource: void addMember(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.io.InputContext)>($r3, $r6);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(s0);

        return;

     label4:
        s0 = 201;

        goto label3;
    }
    protected void doRebind(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r8, $r9;
        boolean $z0;
        org.apache.jackrabbit.webdav.bind.RebindInfo $r4;
        org.apache.jackrabbit.webdav.DavResourceFactory $r5;
        java.lang.String $r6;
        org.apache.jackrabbit.webdav.DavResourceLocator $r7;
        int $i0;
        org.apache.jackrabbit.webdav.bind.BindableResource r10;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(404);

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.bind.RebindInfo getRebindInfo()>();

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r6 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.bind.RebindInfo: java.lang.String getHref()>();

        $r7 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getHrefLocator(java.lang.String)>($r6);

        $r8 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r7, $r1, $r2);

        $z0 = $r8 instanceof org.apache.jackrabbit.webdav.bind.BindableResource;

        if $z0 != 0 goto label2;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label2:
        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r6 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.bind.RebindInfo: java.lang.String getSegment()>();

        $r7 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getMemberLocator(java.lang.String)>($r6);

        $r9 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r7, $r1, $r2);

        $i0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: int validateDestination(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.WebdavRequest,boolean)>($r9, $r1, 0);

        if $i0 <= 204 goto label3;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>($i0);

        return;

     label3:
        r10 = (org.apache.jackrabbit.webdav.bind.BindableResource) $r8;

        interfaceinvoke r10.<org.apache.jackrabbit.webdav.bind.BindableResource: void rebind(org.apache.jackrabbit.webdav.DavResource,org.apache.jackrabbit.webdav.DavResource)>($r3, $r9);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>($i0);

        return;
    }
    protected void doReport(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        org.apache.jackrabbit.webdav.version.report.ReportInfo $r4;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.DeltaVResource r5;
        org.apache.jackrabbit.webdav.version.report.Report $r6;
        short s0;
        org.apache.jackrabbit.webdav.security.AclResource r7;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.version.report.ReportInfo getReportInfo()>();

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.version.DeltaVResource;

        if $z0 == 0 goto label3;

        r5 = (org.apache.jackrabbit.webdav.version.DeltaVResource) r3;

        $r6 = interfaceinvoke r5.<org.apache.jackrabbit.webdav.version.DeltaVResource: org.apache.jackrabbit.webdav.version.report.Report getReport(org.apache.jackrabbit.webdav.version.report.ReportInfo)>($r4);

     label1:
        $z0 = interfaceinvoke $r6.<org.apache.jackrabbit.webdav.version.report.Report: boolean isMultiStatusReport()>();

        if $z0 == 0 goto label5;

        s0 = 207;

     label2:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendXmlResponse(org.apache.jackrabbit.webdav.xml.XmlSerializable,int)>($r6, s0);

        return;

     label3:
        $z0 = r3 instanceof org.apache.jackrabbit.webdav.security.AclResource;

        if $z0 == 0 goto label4;

        r7 = (org.apache.jackrabbit.webdav.security.AclResource) r3;

        $r6 = interfaceinvoke r7.<org.apache.jackrabbit.webdav.security.AclResource: org.apache.jackrabbit.webdav.version.report.Report getReport(org.apache.jackrabbit.webdav.version.report.ReportInfo)>($r4);

        goto label1;

     label4:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label5:
        s0 = 200;

        goto label2;
    }
    protected void doSearch(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Element $r5;
        org.apache.jackrabbit.webdav.search.SearchInfo $r6;
        org.apache.jackrabbit.webdav.search.SearchResource r7;
        org.apache.jackrabbit.webdav.MultiStatus $r8;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.search.SearchResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.w3c.dom.Document getRequestDocument()>();

        if $r4 == null goto label2;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.search.SearchInfo: org.apache.jackrabbit.webdav.search.SearchInfo createFromXml(org.w3c.dom.Element)>($r5);

        r7 = (org.apache.jackrabbit.webdav.search.SearchResource) r3;

        $r8 = interfaceinvoke r7.<org.apache.jackrabbit.webdav.search.SearchResource: org.apache.jackrabbit.webdav.MultiStatus search(org.apache.jackrabbit.webdav.search.SearchInfo)>($r6);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendMultiStatus(org.apache.jackrabbit.webdav.MultiStatus)>($r8);

        return;

     label2:
        r7 = (org.apache.jackrabbit.webdav.search.SearchResource) r3;

        $r8 = interfaceinvoke r7.<org.apache.jackrabbit.webdav.search.SearchResource: org.apache.jackrabbit.webdav.MultiStatus search(org.apache.jackrabbit.webdav.search.SearchInfo)>(null);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendMultiStatus(org.apache.jackrabbit.webdav.MultiStatus)>($r8);

        return;
    }
    protected void doSubscribe(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.observation.SubscriptionInfo $r4;
        org.apache.jackrabbit.webdav.observation.ObservationResource r5;
        java.lang.String $r6;
        org.apache.jackrabbit.webdav.observation.Subscription $r7;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.observation.ObservationResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.observation.SubscriptionInfo getSubscriptionInfo()>();

        if $r4 != null goto label2;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(415);

        return;

     label2:
        r5 = (org.apache.jackrabbit.webdav.observation.ObservationResource) r3;

        $r6 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: java.lang.String getSubscriptionId()>();

        $r7 = interfaceinvoke r5.<org.apache.jackrabbit.webdav.observation.ObservationResource: org.apache.jackrabbit.webdav.observation.Subscription subscribe(org.apache.jackrabbit.webdav.observation.SubscriptionInfo,java.lang.String)>($r4, $r6);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendSubscriptionResponse(org.apache.jackrabbit.webdav.observation.Subscription)>($r7);

        return;
    }
    protected void doUnbind(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource $r3, $r8;
        org.apache.jackrabbit.webdav.bind.UnbindInfo $r4;
        org.apache.jackrabbit.webdav.DavResourceFactory $r5;
        java.lang.String $r6;
        org.apache.jackrabbit.webdav.DavResourceLocator $r7;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.bind.UnbindInfo getUnbindInfo()>();

        $r5 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r6 = virtualinvoke $r4.<org.apache.jackrabbit.webdav.bind.UnbindInfo: java.lang.String getSegment()>();

        $r7 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getMemberLocator(java.lang.String)>($r6);

        $r8 = interfaceinvoke $r5.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r7, $r1, $r2);

        interfaceinvoke $r3.<org.apache.jackrabbit.webdav.DavResource: void removeMember(org.apache.jackrabbit.webdav.DavResource)>($r8);

        return;
    }
    protected void doUncheckout(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.VersionControlledResource r4;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        r4 = (org.apache.jackrabbit.webdav.version.VersionControlledResource) r3;

        interfaceinvoke r4.<org.apache.jackrabbit.webdav.version.VersionControlledResource: void uncheckout()>();

        return;
    }
    protected void doUnlock(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        java.lang.String $r4;
        org.apache.jackrabbit.webdav.transaction.TransactionInfo $r5;
        org.apache.jackrabbit.webdav.transaction.TransactionResource r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: java.lang.String getLockToken()>();

        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.transaction.TransactionInfo getTransactionInfo()>();

        if $r5 == null goto label2;

        r6 = (org.apache.jackrabbit.webdav.transaction.TransactionResource) r3;

        interfaceinvoke r6.<org.apache.jackrabbit.webdav.transaction.TransactionResource: void unlock(java.lang.String,org.apache.jackrabbit.webdav.transaction.TransactionInfo)>($r4, $r5);

     label1:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(204);

        return;

     label2:
        interfaceinvoke r3.<org.apache.jackrabbit.webdav.DavResource: void unlock(java.lang.String)>($r4);

        goto label1;
    }
    protected void doUnsubscribe(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        java.lang.String $r3;
        org.apache.jackrabbit.webdav.DavResource r4;
        boolean $z0;
        org.apache.jackrabbit.webdav.observation.ObservationResource r5;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r4 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r4 instanceof org.apache.jackrabbit.webdav.observation.ObservationResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        r5 = (org.apache.jackrabbit.webdav.observation.ObservationResource) r4;

        $r3 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: java.lang.String getSubscriptionId()>();

        interfaceinvoke r5.<org.apache.jackrabbit.webdav.observation.ObservationResource: void unsubscribe(java.lang.String)>($r3);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setStatus(int)>(204);

        return;
    }
    protected void doUpdate(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.UpdateInfo $r4;
        org.apache.jackrabbit.webdav.version.VersionControlledResource r5;
        org.apache.jackrabbit.webdav.MultiStatus $r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.version.VersionControlledResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.version.UpdateInfo getUpdateInfo()>();

        r5 = (org.apache.jackrabbit.webdav.version.VersionControlledResource) r3;

        $r6 = interfaceinvoke r5.<org.apache.jackrabbit.webdav.version.VersionControlledResource: org.apache.jackrabbit.webdav.MultiStatus update(org.apache.jackrabbit.webdav.version.UpdateInfo)>($r4);

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendMultiStatus(org.apache.jackrabbit.webdav.MultiStatus)>($r6);

        return;
    }
    protected void doVersionControl(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavResource) throws org.apache.jackrabbit.webdav.DavException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavResource r3;
        boolean $z0;
        org.apache.jackrabbit.webdav.version.VersionableResource r4;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        r3 := @parameter2: org.apache.jackrabbit.webdav.DavResource;

        $z0 = r3 instanceof org.apache.jackrabbit.webdav.version.VersionableResource;

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(405);

        return;

     label1:
        r4 = (org.apache.jackrabbit.webdav.version.VersionableResource) r3;

        interfaceinvoke r4.<org.apache.jackrabbit.webdav.version.VersionableResource: void addVersionControl()>();

        return;
    }
    protected boolean execute(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, int, org.apache.jackrabbit.webdav.DavResource) throws javax.servlet.ServletException, java.io.IOException, org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        int $i0;
        org.apache.jackrabbit.webdav.DavResource $r3;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $i0 := @parameter2: int;

        $r3 := @parameter3: org.apache.jackrabbit.webdav.DavResource;

        lookupswitch($i0)
        {
            case 1: goto label13;
            case 2: goto label02;
            case 3: goto label04;
            case 4: goto label07;
            case 5: goto label09;
            case 6: goto label08;
            case 7: goto label05;
            case 8: goto label06;
            case 9: goto label12;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label14;
            case 13: goto label15;
            case 14: goto label16;
            case 15: goto label17;
            case 16: goto label18;
            case 17: goto label19;
            case 18: goto label20;
            case 19: goto label23;
            case 20: goto label21;
            case 21: goto label24;
            case 22: goto label25;
            case 23: goto label26;
            case 24: goto label22;
            case 25: goto label27;
            case 26: goto label28;
            case 27: goto label29;
            case 28: goto label31;
            case 29: goto label30;
            case 30: goto label32;
            case 31: goto label33;
            case 32: goto label34;
            case 33: goto label35;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doGet(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

     label03:
        return 1;

     label04:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doHead(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label05:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doPropFind(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label06:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doPropPatch(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label07:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doPost(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label08:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doPut(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label09:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doDelete(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label10:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doCopy(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label11:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doMove(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label12:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doMkCol(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label13:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doOptions(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label14:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doLock(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label15:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doUnlock(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label16:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doOrderPatch(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label17:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doSubscribe(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label18:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doUnsubscribe(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label19:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doPoll(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label20:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doSearch(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label21:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doVersionControl(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label22:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doLabel(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label23:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doReport(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label24:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doCheckin(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label25:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doCheckout(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label26:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doUncheckout(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label27:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doMerge(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label28:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doUpdate(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label29:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doMkWorkspace(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label30:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doMkActivity(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label31:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doBaselineControl(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label32:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doAcl(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label33:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doRebind(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label34:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doUnbind(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;

     label35:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void doBind(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavResource)>($r1, $r2, $r3);

        goto label03;
    }
    public java.lang.String getAuthenticateHeaderValue()
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        java.lang.String r1;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        r1 = r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String authenticate_header>;

        return r1;
    }
public abstract org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider() { 
// no body
} 
    protected org.apache.jackrabbit.webdav.io.InputContext getInputContext(org.apache.jackrabbit.webdav.DavServletRequest, java.io.InputStream)
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.DavServletRequest $r1;
        java.io.InputStream $r2;
        org.apache.jackrabbit.webdav.io.InputContextImpl $r3;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavServletRequest;

        $r2 := @parameter1: java.io.InputStream;

        $r3 = new org.apache.jackrabbit.webdav.io.InputContextImpl;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.io.InputContextImpl: void <init>(javax.servlet.http.HttpServletRequest,java.io.InputStream)>($r1, $r2);

        return $r3;
    }
public abstract org.apache.jackrabbit.webdav.DavLocatorFactory getLocatorFactory() { 
// no body
} 
    protected org.apache.jackrabbit.webdav.io.OutputContext getOutputContext(org.apache.jackrabbit.webdav.DavServletResponse, java.io.OutputStream)
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.DavServletResponse $r1;
        java.io.OutputStream $r2;
        org.apache.jackrabbit.webdav.io.OutputContextImpl $r3;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavServletResponse;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 = new org.apache.jackrabbit.webdav.io.OutputContextImpl;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.io.OutputContextImpl: void <init>(javax.servlet.http.HttpServletResponse,java.io.OutputStream)>($r1, $r2);

        return $r3;
    }
public abstract org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory() { 
// no body
} 
    public void init() throws javax.servlet.ServletException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        java.lang.String $r1;
        org.slf4j.Logger $r2;
        java.lang.StringBuilder $r3;
        org.apache.jackrabbit.webdav.util.CSRFUtil $r4;
        boolean $z0;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void init()>();

        $r1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String getInitParameter(java.lang.String)>("authenticate-header");

        r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String authenticate_header> = $r1;

        $r1 = r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String authenticate_header>;

        if $r1 != null goto label1;

        r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String authenticate_header> = "Basic realm=\"Jackrabbit Webdav Server\"";

     label1:
        $r2 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("authenticate-header = ");

        $r1 = r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String authenticate_header>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String getInitParameter(java.lang.String)>("csrf-protection");

        $r4 = new org.apache.jackrabbit.webdav.util.CSRFUtil;

        specialinvoke $r4.<org.apache.jackrabbit.webdav.util.CSRFUtil: void <init>(java.lang.String)>($r1);

        r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.util.CSRFUtil csrfUtil> = $r4;

        $r2 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("csrf-protection = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String getInitParameter(java.lang.String)>("createAbsoluteURI");

        if $r1 == null goto label2;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

        r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: boolean createAbsoluteURI> = $z0;

     label2:
        $r2 = <org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.slf4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createAbsoluteURI = ");

        $z0 = r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: boolean createAbsoluteURI>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r1);

        return;
    }
    protected boolean isCreateAbsoluteURI()
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        boolean z0;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        z0 = r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: boolean createAbsoluteURI>;

        return z0;
    }
protected abstract boolean isPreconditionValid(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.DavResource) { 
// no body
} 
    protected void sendUnauthorized(org.apache.jackrabbit.webdav.WebdavRequest, org.apache.jackrabbit.webdav.WebdavResponse, org.apache.jackrabbit.webdav.DavException) throws java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.WebdavRequest $r1;
        org.apache.jackrabbit.webdav.WebdavResponse $r2;
        org.apache.jackrabbit.webdav.DavException $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.WebdavRequest;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavResponse;

        $r3 := @parameter2: org.apache.jackrabbit.webdav.DavException;

        $r4 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: java.lang.String getAuthenticateHeaderValue()>();

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void setHeader(java.lang.String,java.lang.String)>("WWW-Authenticate", $r4);

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.DavException: int getErrorCode()>();

        if $i0 == 401 goto label2;

     label1:
        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(401);

        return;

     label2:
        $i0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.DavException: int getErrorCode()>();

        $r4 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.DavException: java.lang.String getStatusPhrase()>();

        interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int,java.lang.String)>($i0, $r4);

        return;
    }
    protected void service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        javax.servlet.http.HttpServletRequest $r1;
        javax.servlet.http.HttpServletResponse $r2;
        org.apache.jackrabbit.webdav.DavException r3;
        org.apache.jackrabbit.webdav.WebdavRequestImpl r4;
        org.apache.jackrabbit.webdav.WebdavResponseImpl r5;
        org.apache.jackrabbit.webdav.DavLocatorFactory $r6;
        boolean $z0;
        java.lang.String $r7;
        int $i0;
        org.apache.jackrabbit.webdav.DavSessionProvider $r8;
        org.apache.jackrabbit.webdav.util.CSRFUtil $r9;
        org.apache.jackrabbit.webdav.DavResourceFactory $r10;
        org.apache.jackrabbit.webdav.DavResourceLocator $r11;
        org.apache.jackrabbit.webdav.DavResource $r12;
        java.lang.Throwable $r13;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        r4 = new org.apache.jackrabbit.webdav.WebdavRequestImpl;

        $r6 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavLocatorFactory getLocatorFactory()>();

        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: boolean isCreateAbsoluteURI()>();

        specialinvoke r4.<org.apache.jackrabbit.webdav.WebdavRequestImpl: void <init>(javax.servlet.http.HttpServletRequest,org.apache.jackrabbit.webdav.DavLocatorFactory,boolean)>($r1, $r6, $z0);

        $r7 = interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $i0 = staticinvoke <org.apache.jackrabbit.webdav.DavMethods: int getMethodCode(java.lang.String)>($r7);

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.DavMethods: boolean isDeltaVMethod(org.apache.jackrabbit.webdav.DavServletRequest)>(r4);

        if $z0 == 0 goto label04;

        if 20 == $i0 goto label04;

        if 19 == $i0 goto label04;

        $z0 = 1;

     label01:
        r5 = new org.apache.jackrabbit.webdav.WebdavResponseImpl;

        specialinvoke r5.<org.apache.jackrabbit.webdav.WebdavResponseImpl: void <init>(javax.servlet.http.HttpServletResponse,boolean)>($r2, $z0);

     label02:
        $r8 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider()>();

        $z0 = interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavSessionProvider: boolean attachSession(org.apache.jackrabbit.webdav.WebdavRequest)>(r4);

     label03:
        if $z0 != 0 goto label05;

        $r8 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider()>();

        interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavSessionProvider: void releaseSession(org.apache.jackrabbit.webdav.WebdavRequest)>(r4);

        return;

     label04:
        $z0 = 0;

        goto label01;

     label05:
        $r9 = r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.util.CSRFUtil csrfUtil>;

     label06:
        $z0 = virtualinvoke $r9.<org.apache.jackrabbit.webdav.util.CSRFUtil: boolean isValidRequest(javax.servlet.http.HttpServletRequest)>(r4);

     label07:
        if $z0 != 0 goto label10;

     label08:
        interfaceinvoke r5.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(403);

     label09:
        $r8 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider()>();

        interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavSessionProvider: void releaseSession(org.apache.jackrabbit.webdav.WebdavRequest)>(r4);

        return;

     label10:
        $r10 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavResourceFactory getResourceFactory()>();

        $r11 = interfaceinvoke r4.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getRequestLocator()>();

        $r12 = interfaceinvoke $r10.<org.apache.jackrabbit.webdav.DavResourceFactory: org.apache.jackrabbit.webdav.DavResource createResource(org.apache.jackrabbit.webdav.DavResourceLocator,org.apache.jackrabbit.webdav.DavServletRequest,org.apache.jackrabbit.webdav.DavServletResponse)>($r11, r4, r5);

        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: boolean isPreconditionValid(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.DavResource)>(r4, $r12);

     label11:
        if $z0 != 0 goto label14;

     label12:
        interfaceinvoke r5.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(int)>(412);

     label13:
        $r8 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider()>();

        interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavSessionProvider: void releaseSession(org.apache.jackrabbit.webdav.WebdavRequest)>(r4);

        return;

     label14:
        $z0 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: boolean execute(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,int,org.apache.jackrabbit.webdav.DavResource)>(r4, r5, $i0, $r12);

     label15:
        if $z0 != 0 goto label17;

     label16:
        specialinvoke r0.<javax.servlet.http.HttpServlet: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>($r1, $r2);

     label17:
        $r8 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider()>();

        interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavSessionProvider: void releaseSession(org.apache.jackrabbit.webdav.WebdavRequest)>(r4);

        return;

     label18:
        r3 := @caughtexception;

     label19:
        $i0 = virtualinvoke r3.<org.apache.jackrabbit.webdav.DavException: int getErrorCode()>();

     label20:
        if $i0 != 401 goto label23;

     label21:
        virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: void sendUnauthorized(org.apache.jackrabbit.webdav.WebdavRequest,org.apache.jackrabbit.webdav.WebdavResponse,org.apache.jackrabbit.webdav.DavException)>(r4, r5, r3);

     label22:
        $r8 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider()>();

        interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavSessionProvider: void releaseSession(org.apache.jackrabbit.webdav.WebdavRequest)>(r4);

        return;

     label23:
        interfaceinvoke r5.<org.apache.jackrabbit.webdav.WebdavResponse: void sendError(org.apache.jackrabbit.webdav.DavException)>(r3);

     label24:
        goto label22;

     label25:
        $r13 := @caughtexception;

        $r8 = virtualinvoke r0.<org.apache.jackrabbit.webdav.server.AbstractWebdavServlet: org.apache.jackrabbit.webdav.DavSessionProvider getDavSessionProvider()>();

        interfaceinvoke $r8.<org.apache.jackrabbit.webdav.DavSessionProvider: void releaseSession(org.apache.jackrabbit.webdav.WebdavRequest)>(r4);

        throw $r13;

        catch org.apache.jackrabbit.webdav.DavException from label02 to label03 with label18;
        catch java.lang.Throwable from label02 to label03 with label25;
        catch org.apache.jackrabbit.webdav.DavException from label06 to label07 with label18;
        catch org.apache.jackrabbit.webdav.DavException from label08 to label09 with label18;
        catch java.lang.Throwable from label05 to label07 with label25;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch org.apache.jackrabbit.webdav.DavException from label10 to label11 with label18;
        catch org.apache.jackrabbit.webdav.DavException from label12 to label13 with label18;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch org.apache.jackrabbit.webdav.DavException from label14 to label15 with label18;
        catch org.apache.jackrabbit.webdav.DavException from label16 to label17 with label18;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
    }
public abstract void setDavSessionProvider(org.apache.jackrabbit.webdav.DavSessionProvider) { 
// no body
} 
public abstract void setLocatorFactory(org.apache.jackrabbit.webdav.DavLocatorFactory) { 
// no body
} 
public abstract void setResourceFactory(org.apache.jackrabbit.webdav.DavResourceFactory) { 
// no body
} 
    protected int validateDestination(org.apache.jackrabbit.webdav.DavResource, org.apache.jackrabbit.webdav.WebdavRequest, boolean) throws org.apache.jackrabbit.webdav.DavException
    {
        org.apache.jackrabbit.webdav.server.AbstractWebdavServlet r0;
        org.apache.jackrabbit.webdav.DavResource $r1, $r7;
        org.apache.jackrabbit.webdav.WebdavRequest $r2;
        boolean $z0;
        java.lang.String $r3, $r4;
        org.apache.jackrabbit.webdav.DavResourceLocator $r5, $r6;

        r0 := @this: org.apache.jackrabbit.webdav.server.AbstractWebdavServlet;

        $r1 := @parameter0: org.apache.jackrabbit.webdav.DavResource;

        $r2 := @parameter1: org.apache.jackrabbit.webdav.WebdavRequest;

        $z0 := @parameter2: boolean;

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavRequest: java.lang.String getHeader(java.lang.String)>("Destination");

        if $r3 == null goto label1;

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        return 400;

     label2:
        $r5 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResourceLocator getLocator()>();

        $r6 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavRequest: org.apache.jackrabbit.webdav.DavResourceLocator getRequestLocator()>();

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        return 403;

     label3:
        $z0 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: boolean exists()>();

        if $z0 == 0 goto label4;

        $z0 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavRequest: boolean isOverwrite()>();

        if $z0 == 0 goto label5;

        $z0 = interfaceinvoke $r2.<org.apache.jackrabbit.webdav.WebdavRequest: boolean matchesIfHeader(org.apache.jackrabbit.webdav.DavResource)>($r1);

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r1.<org.apache.jackrabbit.webdav.DavResource: org.apache.jackrabbit.webdav.DavResource getCollection()>();

        interfaceinvoke $r7.<org.apache.jackrabbit.webdav.DavResource: void removeMember(org.apache.jackrabbit.webdav.DavResource)>($r1);

        return 204;

     label4:
        return 201;

     label5:
        return 412;
    }
