org.apache.jackrabbit.webdav.xml.DomUtil extends java.lang.Object
private static final org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory BUILDER_FACTORY
private static javax.xml.transform.TransformerFactory TRANSFORMER_FACTORY
private static org.slf4j.Logger log
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory $r1;
        javax.xml.transform.TransformerFactory $r2;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/xml/DomUtil;");

        <org.apache.jackrabbit.webdav.xml.DomUtil: org.slf4j.Logger log> = $r0;

        $r1 = new org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory;

        specialinvoke $r1.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: void <init>()>();

        <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory BUILDER_FACTORY> = $r1;

        $r2 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        <org.apache.jackrabbit.webdav.xml.DomUtil: javax.xml.transform.TransformerFactory TRANSFORMER_FACTORY> = $r2;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.xml.DomUtil r0;

        r0 := @this: org.apache.jackrabbit.webdav.xml.DomUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.w3c.dom.Element addChildElement(org.w3c.dom.Element, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Element $r0, $r4;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Document $r3;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r3, $r1, $r2);

        interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        return $r4;
    }
    public static org.w3c.dom.Element addChildElement(org.w3c.dom.Element, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace, java.lang.String)
    {
        org.w3c.dom.Element $r0, $r5;
        java.lang.String $r1, $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Document $r4;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 := @parameter3: java.lang.String;

        $r4 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r4, $r1, $r2, $r3);

        interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r5);

        return $r5;
    }
    public static org.w3c.dom.Element addChildElement(org.w3c.dom.Node, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Node $r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        boolean $z0;
        org.w3c.dom.Document $r3;
        org.w3c.dom.Element $r4;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 = interfaceinvoke $r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $z0 = $r0 instanceof org.w3c.dom.Document;

        if $z0 == 0 goto label1;

        $r3 = (org.w3c.dom.Document) $r0;

     label1:
        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r3, $r1, $r2);

        interfaceinvoke $r0.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        return $r4;
    }
    public static org.w3c.dom.Document createDocument() throws javax.xml.parsers.ParserConfigurationException
    {
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory $r0;
        javax.xml.parsers.DocumentBuilder $r1;
        org.w3c.dom.Document $r2;

        $r0 = <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory BUILDER_FACTORY>;

        $r1 = virtualinvoke $r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r2 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

        return $r2;
    }
    public static org.w3c.dom.Element createElement(org.w3c.dom.Document, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Document $r0;
        java.lang.String $r1, $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r4;

        $r0 := @parameter0: org.w3c.dom.Document;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getURI()>();

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getPrefixedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        $r4 = interfaceinvoke $r0.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r3, $r1);

        return $r4;

     label1:
        $r4 = interfaceinvoke $r0.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>($r1);

        return $r4;
    }
    public static org.w3c.dom.Element createElement(org.w3c.dom.Document, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace, java.lang.String)
    {
        org.w3c.dom.Document $r0;
        java.lang.String $r1, $r3;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r4;

        $r0 := @parameter0: org.w3c.dom.Document;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 := @parameter3: java.lang.String;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1, $r2);

        staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: void setText(org.w3c.dom.Element,java.lang.String)>($r4, $r3);

        return $r4;
    }
    public static org.w3c.dom.Element depthToXml(java.lang.String, org.w3c.dom.Document)
    {
        java.lang.String $r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.w3c.dom.Document;

        $r2 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r1, "depth", $r2, $r0);

        return $r3;
    }
    public static org.w3c.dom.Element depthToXml(boolean, org.w3c.dom.Document)
    {
        boolean $z0;
        org.w3c.dom.Document $r0;
        org.w3c.dom.Element $r1;
        java.lang.String $r2;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: org.w3c.dom.Document;

        if $z0 == 0 goto label2;

        $r2 = "infinity";

     label1:
        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element depthToXml(java.lang.String,org.w3c.dom.Document)>($r2, $r0);

        return $r1;

     label2:
        $r2 = "0";

        goto label1;
    }
    public static java.lang.String getAttribute(org.w3c.dom.Element, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1, $r4;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Attr $r3;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r0 != null goto label1;

        return null;

     label1:
        if $r2 != null goto label3;

        $r3 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>($r1);

     label2:
        if $r3 == null goto label4;

        $r1 = interfaceinvoke $r3.<org.w3c.dom.Attr: java.lang.String getValue()>();

        return $r1;

     label3:
        $r4 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getURI()>();

        $r3 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>($r4, $r1);

        goto label2;

     label4:
        return null;
    }
    public static org.w3c.dom.Element getChildElement(org.w3c.dom.Node, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Node $r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.NodeList $r3;
        int i0, $i1;
        boolean $z0;
        org.w3c.dom.Element r4;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r0 == null goto label3;

        $r3 = interfaceinvoke $r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i1 goto label3;

        $r0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isElement(org.w3c.dom.Node)>($r0);

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1, $r2);

        if $z0 == 0 goto label2;

        r4 = (org.w3c.dom.Element) $r0;

        return r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }
    public static org.w3c.dom.Element getChildElement(org.w3c.dom.Node, javax.xml.namespace.QName)
    {
        org.w3c.dom.Node $r0;
        javax.xml.namespace.QName $r1;
        org.w3c.dom.NodeList $r2;
        int i0, $i1;
        boolean $z0;
        org.w3c.dom.Element r3;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: javax.xml.namespace.QName;

        if $r0 == null goto label3;

        $r2 = interfaceinvoke $r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i1 goto label3;

        $r0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isElement(org.w3c.dom.Node)>($r0);

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matches(org.w3c.dom.Node,javax.xml.namespace.QName)>($r0, $r1);

        if $z0 == 0 goto label2;

        r3 = (org.w3c.dom.Element) $r0;

        return r3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }
    public static java.lang.String getChildText(org.w3c.dom.Element, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1, $r2);

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getText(org.w3c.dom.Element)>($r0);

        return $r1;
    }
    public static java.lang.String getChildTextTrim(org.w3c.dom.Element, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1, $r2);

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getTextTrim(org.w3c.dom.Element)>($r0);

        return $r1;
    }
    public static java.lang.String getChildTextTrim(org.w3c.dom.Element, javax.xml.namespace.QName)
    {
        org.w3c.dom.Element $r0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: javax.xml.namespace.QName;

        $r0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,javax.xml.namespace.QName)>($r0, $r1);

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getTextTrim(org.w3c.dom.Element)>($r0);

        return $r2;
    }
    public static org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r1;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 = new org.apache.jackrabbit.webdav.xml.ElementIterator;

        specialinvoke $r1.<org.apache.jackrabbit.webdav.xml.ElementIterator: void <init>(org.w3c.dom.Element)>($r0);

        return $r1;
    }
    public static org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r3;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 = new org.apache.jackrabbit.webdav.xml.ElementIterator;

        specialinvoke $r3.<org.apache.jackrabbit.webdav.xml.ElementIterator: void <init>(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1, $r2);

        return $r3;
    }
    public static org.apache.jackrabbit.webdav.xml.ElementIterator getChildren(org.w3c.dom.Element, javax.xml.namespace.QName)
    {
        org.w3c.dom.Element $r0;
        javax.xml.namespace.QName $r1;
        org.apache.jackrabbit.webdav.xml.ElementIterator $r2;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: javax.xml.namespace.QName;

        $r2 = new org.apache.jackrabbit.webdav.xml.ElementIterator;

        specialinvoke $r2.<org.apache.jackrabbit.webdav.xml.ElementIterator: void <init>(org.w3c.dom.Element,javax.xml.namespace.QName)>($r0, $r1);

        return $r2;
    }
    public static java.util.List getContent(org.w3c.dom.Node)
    {
        org.w3c.dom.Node $r0;
        java.util.ArrayList r1;
        org.w3c.dom.NodeList $r2;
        int i0, $i1;
        boolean $z0;

        $r0 := @parameter0: org.w3c.dom.Node;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        if $r0 == null goto label3;

        $r2 = interfaceinvoke $r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i1 goto label3;

        $r0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isAcceptedNode(org.w3c.dom.Node)>($r0);

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r0);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r1;
    }
    public static java.lang.String getExpandedName(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.xml.Namespace $r0, $r3;
        java.lang.StringBuffer r1, $r5;
        java.lang.String r2, $r4;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r0 == null goto label2;

        $r3 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace EMPTY_NAMESPACE>;

        $z0 = virtualinvoke $r0.<org.apache.jackrabbit.webdav.xml.Namespace: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("{");

        $r4 = virtualinvoke $r0.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getURI()>();

        $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return r2;
    }
    public static org.w3c.dom.Element getFirstChildElement(org.w3c.dom.Node)
    {
        org.w3c.dom.Node $r0;
        org.w3c.dom.NodeList $r1;
        int i0, $i1;
        boolean $z0;
        org.w3c.dom.Element r2;

        $r0 := @parameter0: org.w3c.dom.Node;

        if $r0 == null goto label3;

        $r1 = interfaceinvoke $r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i1 goto label3;

        $r0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isElement(org.w3c.dom.Node)>($r0);

        if $z0 == 0 goto label2;

        r2 = (org.w3c.dom.Element) $r0;

        return r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }
    public static org.apache.jackrabbit.webdav.xml.Namespace getNamespace(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1, $r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        $r2 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getPrefix()>();

        if $r1 != null goto label1;

        $r3 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace EMPTY_NAMESPACE>;

        return $r3;

     label1:
        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String,java.lang.String)>($r2, $r1);

        return $r3;
    }
    public static org.w3c.dom.Attr[] getNamespaceAttributes(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        java.util.ArrayList r1;
        org.w3c.dom.NamedNodeMap $r2;
        int i0, $i1;
        org.w3c.dom.Node $r3;
        org.w3c.dom.Attr r4;
        org.apache.jackrabbit.webdav.xml.Namespace $r5;
        java.lang.String $r6, $r7;
        boolean $z0;
        org.w3c.dom.Attr[] $r8;
        java.lang.Object[] $r9;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i0 >= $i1 goto label3;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i0);

        r4 = (org.w3c.dom.Attr) $r3;

        $r5 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace XMLNS_NAMESPACE>;

        $r6 = virtualinvoke $r5.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getURI()>();

        $r7 = interfaceinvoke r4.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r8 = newarray (org.w3c.dom.Attr)[i0];

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r8 = (org.w3c.dom.Attr[]) $r9;

        return $r8;
    }
    public static java.lang.String getPrefixedName(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.apache.jackrabbit.webdav.xml.Namespace $r0, $r3;
        java.lang.StringBuffer r1;
        java.lang.String r2, $r4, $r5;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r0 == null goto label2;

        $r3 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace EMPTY_NAMESPACE>;

        $z0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.xml.Namespace: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label2;

        $r3 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace EMPTY_NAMESPACE>;

        $r4 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getPrefix()>();

        $r5 = virtualinvoke $r0.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        r1 = new java.lang.StringBuffer;

        $r4 = virtualinvoke $r0.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getPrefix()>();

        specialinvoke r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return r2;
    }
    public static java.lang.String getQualifiedName(java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        java.lang.String $r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        $r0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getExpandedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1);

        return $r0;
    }
    public static java.lang.String getText(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        java.lang.StringBuffer r1;
        org.w3c.dom.NodeList $r2;
        int i0, $i1;
        org.w3c.dom.Node $r3;
        boolean $z0;
        org.w3c.dom.CharacterData r4;
        java.lang.String $r5;

        $r0 := @parameter0: org.w3c.dom.Element;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        if $r0 == null goto label3;

        $r2 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i1 goto label3;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isText(org.w3c.dom.Node)>($r3);

        if $z0 == 0 goto label2;

        r4 = (org.w3c.dom.CharacterData) $r3;

        $r5 = interfaceinvoke r4.<org.w3c.dom.CharacterData: java.lang.String getData()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        i0 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        if i0 != 0 goto label4;

        return null;

     label4:
        $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
    public static java.lang.String getText(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1, r2;

        $r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getText(org.w3c.dom.Element)>($r0);

        if $r1 != null goto label1;

        return r2;

     label1:
        return $r1;
    }
    public static java.lang.String getTextTrim(org.w3c.dom.Element)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getText(org.w3c.dom.Element)>($r0);

        if $r1 != null goto label1;

        return $r1;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        return $r1;
    }
    public static boolean hasChildElement(org.w3c.dom.Node, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Node $r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element getChildElement(org.w3c.dom.Node,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r1, $r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean hasContent(org.w3c.dom.Node)
    {
        org.w3c.dom.Node $r0;
        org.w3c.dom.NodeList $r1;
        int i0, $i1;
        boolean $z0;

        $r0 := @parameter0: org.w3c.dom.Node;

        if $r0 == null goto label3;

        $r1 = interfaceinvoke $r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i1 goto label3;

        $r0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isAcceptedNode(org.w3c.dom.Node)>($r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
    public static org.w3c.dom.Element hrefToXml(java.lang.String, org.w3c.dom.Document)
    {
        java.lang.String $r0;
        org.w3c.dom.Document $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.w3c.dom.Document;

        $r2 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r1, "href", $r2, $r0);

        return $r3;
    }
    private static boolean isAcceptedNode(org.w3c.dom.Node)
    {
        org.w3c.dom.Node $r0;
        boolean $z0;

        $r0 := @parameter0: org.w3c.dom.Node;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isElement(org.w3c.dom.Node)>($r0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean isText(org.w3c.dom.Node)>($r0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    static boolean isElement(org.w3c.dom.Node)
    {
        org.w3c.dom.Node $r0;
        short $s0;

        $r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke $r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    static boolean isText(org.w3c.dom.Node)
    {
        org.w3c.dom.Node $r0;
        short $s0;

        $r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke $r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 3 goto label1;

        if $s0 != 4 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static boolean matches(org.w3c.dom.Node, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Node $r0;
        java.lang.String $r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        boolean $z0;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r0 != null goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matchingNamespace(org.w3c.dom.Node,org.apache.jackrabbit.webdav.xml.Namespace)>($r0, $r2);

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: boolean matchingLocalName(org.w3c.dom.Node,java.lang.String)>($r0, $r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public static boolean matches(org.w3c.dom.Node, javax.xml.namespace.QName)
    {
        org.w3c.dom.Node $r0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: javax.xml.namespace.QName;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke $r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r2 == null goto label3;

        $r2 = interfaceinvoke $r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

     label2:
        $r3 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r3 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        return 1;

     label3:
        $r2 = "";

        goto label2;

     label4:
        return 0;
    }
    private static boolean matchingLocalName(org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.Node $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke $r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
    private static boolean matchingNamespace(org.w3c.dom.Node, org.apache.jackrabbit.webdav.xml.Namespace)
    {
        org.w3c.dom.Node $r0;
        org.apache.jackrabbit.webdav.xml.Namespace $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: org.w3c.dom.Node;

        $r1 := @parameter1: org.apache.jackrabbit.webdav.xml.Namespace;

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke $r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.xml.Namespace: boolean isSame(java.lang.String)>($r2);

        return $z0;
    }
    public static org.w3c.dom.Document parseDocument(java.io.InputStream) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        java.io.InputStream $r0;
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory $r1;
        javax.xml.parsers.DocumentBuilder $r2;
        org.w3c.dom.Document $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory BUILDER_FACTORY>;

        $r2 = virtualinvoke $r1.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r3 = virtualinvoke $r2.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>($r0);

        return $r3;
    }
    public static void setAttribute(org.w3c.dom.Element, java.lang.String, org.apache.jackrabbit.webdav.xml.Namespace, java.lang.String)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1, $r3, $r6;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Attr $r5;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.jackrabbit.webdav.xml.Namespace;

        $r3 := @parameter3: java.lang.String;

        if $r2 != null goto label1;

        $r4 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Attr createAttribute(java.lang.String)>($r1);

        interfaceinvoke $r5.<org.w3c.dom.Attr: void setValue(java.lang.String)>($r3);

        interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>($r5);

        return;

     label1:
        $r4 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r6 = virtualinvoke $r2.<org.apache.jackrabbit.webdav.xml.Namespace: java.lang.String getURI()>();

        $r1 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: java.lang.String getPrefixedName(java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace)>($r1, $r2);

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>($r6, $r1);

        interfaceinvoke $r5.<org.w3c.dom.Attr: void setValue(java.lang.String)>($r3);

        interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>($r5);

        return;
    }
    public static void setBuilderFactory(javax.xml.parsers.DocumentBuilderFactory)
    {
        javax.xml.parsers.DocumentBuilderFactory $r0;
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory $r1;

        $r0 := @parameter0: javax.xml.parsers.DocumentBuilderFactory;

        $r1 = <org.apache.jackrabbit.webdav.xml.DomUtil: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory BUILDER_FACTORY>;

        virtualinvoke $r1.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: void setFactory(javax.xml.parsers.DocumentBuilderFactory)>($r0);

        return;
    }
    public static void setNamespaceAttribute(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1, $r2;
        org.apache.jackrabbit.webdav.xml.Namespace $r3, $r4;
        boolean $z0;
        org.slf4j.Logger $r5;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace EMPTY_NAMESPACE>;

        $r4 = staticinvoke <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace getNamespace(java.lang.String,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r3.<org.apache.jackrabbit.webdav.xml.Namespace: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.jackrabbit.webdav.xml.DomUtil: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>("Empty namespace -> omit attribute setting.");

        return;

     label1:
        $r3 = <org.apache.jackrabbit.webdav.xml.Namespace: org.apache.jackrabbit.webdav.xml.Namespace XMLNS_NAMESPACE>;

        staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: void setAttribute(org.w3c.dom.Element,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r0, $r1, $r3, $r2);

        return;
    }
    public static void setText(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.w3c.dom.Document $r3;
        org.w3c.dom.Text $r4;

        $r0 := @parameter0: org.w3c.dom.Element;

        $r1 := @parameter1: java.lang.String;

        if $r1 == null goto label2;

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r1);

        interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

     label2:
        return;
    }
    public static org.w3c.dom.Element timeoutToXml(long, org.w3c.dom.Document)
    {
        long $l0, $l1;
        org.w3c.dom.Document $r0;
        byte $b2;
        boolean z0;
        java.lang.String r1;
        org.apache.jackrabbit.webdav.xml.Namespace $r2;
        org.w3c.dom.Element $r3;
        java.lang.StringBuilder $r4;

        $l0 := @parameter0: long;

        $r0 := @parameter1: org.w3c.dom.Document;

        $l1 = $l0 / 1000L;

        $b2 = $l1 cmp 2147483647L;

        if $b2 > 0 goto label1;

        $b2 = $l0 cmp 2147483647L;

        if $b2 != 0 goto label4;

     label1:
        z0 = 1;

     label2:
        if z0 == 0 goto label5;

        r1 = "Infinite";

     label3:
        $r2 = <org.apache.jackrabbit.webdav.DavConstants: org.apache.jackrabbit.webdav.xml.Namespace NAMESPACE>;

        $r3 = staticinvoke <org.apache.jackrabbit.webdav.xml.DomUtil: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,org.apache.jackrabbit.webdav.xml.Namespace,java.lang.String)>($r0, "timeout", $r2, r1);

        return $r3;

     label4:
        z0 = 0;

        goto label2;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Second-");

        $l0 = $l0 / 1000L;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;
    }
    public static void transformDocument(org.w3c.dom.Document, java.io.OutputStream) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException
    {
        org.w3c.dom.Document $r0;
        java.io.OutputStream $r1;
        javax.xml.transform.TransformerFactory $r2;
        javax.xml.transform.Transformer $r3;
        javax.xml.transform.dom.DOMSource $r4;
        javax.xml.transform.stream.StreamResult $r5;
        javax.xml.transform.Result $r6;

        $r0 := @parameter0: org.w3c.dom.Document;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = <org.apache.jackrabbit.webdav.xml.DomUtil: javax.xml.transform.TransformerFactory TRANSFORMER_FACTORY>;

        $r3 = virtualinvoke $r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        $r4 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r4.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r0);

        $r5 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r5.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>($r1);

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.ResultHelper: javax.xml.transform.Result getResult(javax.xml.transform.Result)>($r5);

        virtualinvoke $r3.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r4, $r6);

        return;
    }
    public static void transformDocument(org.w3c.dom.Document, java.io.Writer) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException
    {
        org.w3c.dom.Document $r0;
        java.io.Writer $r1;
        javax.xml.transform.TransformerFactory $r2;
        javax.xml.transform.Transformer $r3;
        javax.xml.transform.dom.DOMSource $r4;
        javax.xml.transform.stream.StreamResult $r5;
        javax.xml.transform.Result $r6;

        $r0 := @parameter0: org.w3c.dom.Document;

        $r1 := @parameter1: java.io.Writer;

        $r2 = <org.apache.jackrabbit.webdav.xml.DomUtil: javax.xml.transform.TransformerFactory TRANSFORMER_FACTORY>;

        $r3 = virtualinvoke $r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();

        $r4 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r4.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r0);

        $r5 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r5.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r1);

        $r6 = staticinvoke <org.apache.jackrabbit.webdav.xml.ResultHelper: javax.xml.transform.Result getResult(javax.xml.transform.Result)>($r5);

        virtualinvoke $r3.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r4, $r6);

        return;
    }
