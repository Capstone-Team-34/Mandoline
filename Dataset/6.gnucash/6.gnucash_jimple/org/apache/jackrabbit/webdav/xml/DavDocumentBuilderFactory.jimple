org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory extends java.lang.Object
private static final org.xml.sax.EntityResolver DEFAULT_ENTITY_RESOLVER
private static final org.slf4j.Logger LOG
private javax.xml.parsers.DocumentBuilderFactory BUILDER_FACTORY
private final javax.xml.parsers.DocumentBuilderFactory DEFAULT_FACTORY
    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory$1 $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jackrabbit/webdav/xml/DomUtil;");

        <org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: org.slf4j.Logger LOG> = $r0;

        $r1 = new org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory$1;

        specialinvoke $r1.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory$1: void <init>()>();

        <org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: org.xml.sax.EntityResolver DEFAULT_ENTITY_RESOLVER> = $r1;

        return;
    }
    public void <init>()
    {
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory r0;
        javax.xml.parsers.DocumentBuilderFactory $r1;

        r0 := @this: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = specialinvoke r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory createFactory()>();

        r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory DEFAULT_FACTORY> = $r1;

        $r1 = r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory DEFAULT_FACTORY>;

        r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory BUILDER_FACTORY> = $r1;

        return;
    }
    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger r0;

        r0 = <org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: org.slf4j.Logger LOG>;

        return r0;
    }
    private javax.xml.parsers.DocumentBuilderFactory createFactory()
    {
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory r0;
        javax.xml.parsers.DocumentBuilderFactory $r1;
        javax.xml.parsers.ParserConfigurationException r2;
        org.slf4j.Logger $r3;
        java.lang.AbstractMethodError r4;

        r0 := @this: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory;

        $r1 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringComments(boolean)>(1);

        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringElementContentWhitespace(boolean)>(1);

        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilderFactory: void setCoalescing(boolean)>(1);

     label1:
        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilderFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", 1);

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        $r3 = <org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: org.slf4j.Logger LOG>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Secure XML processing is not supported", r2);

        return $r1;

     label4:
        r4 := @caughtexception;

        $r3 = <org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: org.slf4j.Logger LOG>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Secure XML processing is not supported", r4);

        return $r1;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
        catch java.lang.AbstractMethodError from label1 to label2 with label4;
    }
    public javax.xml.parsers.DocumentBuilder newDocumentBuilder() throws javax.xml.parsers.ParserConfigurationException
    {
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory r0;
        javax.xml.parsers.DocumentBuilderFactory $r1, $r3;
        javax.xml.parsers.DocumentBuilder $r2;
        org.xml.sax.EntityResolver $r4;
        org.xml.sax.helpers.DefaultHandler $r5;

        r0 := @this: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory;

        $r1 = r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory BUILDER_FACTORY>;

        $r2 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r3 = r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory BUILDER_FACTORY>;

        $r1 = r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory DEFAULT_FACTORY>;

        if $r3 != $r1 goto label1;

        $r4 = <org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: org.xml.sax.EntityResolver DEFAULT_ENTITY_RESOLVER>;

        virtualinvoke $r2.<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>($r4);

     label1:
        $r5 = new org.xml.sax.helpers.DefaultHandler;

        specialinvoke $r5.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        virtualinvoke $r2.<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>($r5);

        return $r2;
    }
    public void setFactory(javax.xml.parsers.DocumentBuilderFactory)
    {
        org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory r0;
        org.slf4j.Logger $r1;
        javax.xml.parsers.DocumentBuilderFactory r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory;

        r2 := @parameter0: javax.xml.parsers.DocumentBuilderFactory;

        $r1 = <org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: org.slf4j.Logger LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DocumentBuilderFactory changed to: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>($r4);

        if r2 == null goto label2;

     label1:
        r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory BUILDER_FACTORY> = r2;

        return;

     label2:
        r2 = r0.<org.apache.jackrabbit.webdav.xml.DavDocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory DEFAULT_FACTORY>;

        goto label1;
    }
