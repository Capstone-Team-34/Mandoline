org.joda.time.Interval extends org.joda.time.base.BaseInterval implements org.joda.time.ReadableInterval java.io.Serializable
private static final long serialVersionUID
    public void <init>(long, long)
    {
        org.joda.time.Interval r0;
        long $l0, $l1;

        r0 := @this: org.joda.time.Interval;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, null);

        return;
    }
    public void <init>(long, long, org.joda.time.Chronology)
    {
        org.joda.time.Interval r0;
        long $l0, $l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.Interval;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r1);

        return;
    }
    public void <init>(long, long, org.joda.time.DateTimeZone)
    {
        org.joda.time.Interval r0;
        long $l0, $l1;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.Interval;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.joda.time.Interval r0;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>($r1, null);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Interval r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        return;
    }
    public void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadableDuration $r1;
        org.joda.time.ReadableInstant $r2;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableDuration;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>($r1, $r2);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.ReadableDuration $r2;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableDuration;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>($r1, $r2);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadableInstant $r1, $r2;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>($r1, $r2);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadablePeriod)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.ReadablePeriod $r2;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadablePeriod;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>($r1, $r2);

        return;
    }
    public void <init>(org.joda.time.ReadablePeriod, org.joda.time.ReadableInstant)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadablePeriod $r1;
        org.joda.time.ReadableInstant $r2;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>($r1, $r2);

        return;
    }
    public static org.joda.time.Interval parse(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.Interval $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new org.joda.time.Interval;

        specialinvoke $r1.<org.joda.time.Interval: void <init>(java.lang.Object)>($r0);

        return $r1;
    }
    public boolean abuts(org.joda.time.ReadableInterval)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadableInterval $r1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInterval;

        if $r1 != null goto label2;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label1;

        $l1 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label4;

     label1:
        return 1;

     label2:
        $l0 = interfaceinvoke $r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label3;

        $l0 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        $l1 = interfaceinvoke $r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }
    public org.joda.time.Interval gap(org.joda.time.ReadableInterval)
    {
        org.joda.time.Interval r0, $r2;
        org.joda.time.ReadableInterval $r1;
        long $l0, $l1, $l2, $l3;
        byte $b4;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInterval;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>($r1);

        $l0 = interfaceinvoke $r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $l1 = interfaceinvoke $r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $l2 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $l3 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        $b4 = $l2 cmp $l1;

        if $b4 <= 0 goto label1;

        $r2 = new org.joda.time.Interval;

        $r3 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r2.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l1, $l2, $r3);

        return $r2;

     label1:
        $b4 = $l0 cmp $l3;

        if $b4 <= 0 goto label2;

        $r2 = new org.joda.time.Interval;

        $r3 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r2.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l3, $l0, $r3);

        return $r2;

     label2:
        return null;
    }
    public org.joda.time.Interval overlap(org.joda.time.ReadableInterval)
    {
        org.joda.time.Interval r0, $r2;
        org.joda.time.ReadableInterval $r1;
        boolean $z0;
        long $l0, $l1, $l2;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInterval;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>($r1);

        $z0 = virtualinvoke r0.<org.joda.time.Interval: boolean overlaps(org.joda.time.ReadableInterval)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $l1 = interfaceinvoke $r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l1);

        $l1 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        $l2 = interfaceinvoke $r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l2);

        $r2 = new org.joda.time.Interval;

        $r3 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r2.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r3);

        return $r2;
    }
    public org.joda.time.Interval toInterval()
    {
        org.joda.time.Interval r0;

        r0 := @this: org.joda.time.Interval;

        return r0;
    }
    public org.joda.time.Interval withChronology(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0, $r3;
        org.joda.time.Interval $r1, r2;
        long $l0, $l1;

        r2 := @this: org.joda.time.Interval;

        $r0 := @parameter0: org.joda.time.Chronology;

        $r3 = virtualinvoke r2.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        if $r3 != $r0 goto label1;

        return r2;

     label1:
        $r1 = new org.joda.time.Interval;

        $l0 = virtualinvoke r2.<org.joda.time.Interval: long getStartMillis()>();

        $l1 = virtualinvoke r2.<org.joda.time.Interval: long getEndMillis()>();

        specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r0);

        return $r1;
    }
    public org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration $r0;
        org.joda.time.Interval $r1;
        long $l0, $l1;
        byte $b2;
        org.joda.time.Chronology $r2;

        $r1 := @this: org.joda.time.Interval;

        $r0 := @parameter0: org.joda.time.ReadableDuration;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>($r0);

        $l1 = virtualinvoke $r1.<org.joda.time.Interval: long toDurationMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return $r1;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l1 = virtualinvoke $r1.<org.joda.time.Interval: long getStartMillis()>();

        $l0 = virtualinvoke $r2.<org.joda.time.Chronology: long add(long,long,int)>($l1, $l0, 1);

        $r1 = new org.joda.time.Interval;

        specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l1, $l0, $r2);

        return $r1;
    }
    public org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration $r0;
        org.joda.time.Interval $r1;
        long $l0, $l1;
        byte $b2;
        org.joda.time.Chronology $r2;

        $r1 := @this: org.joda.time.Interval;

        $r0 := @parameter0: org.joda.time.ReadableDuration;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>($r0);

        $l1 = virtualinvoke $r1.<org.joda.time.Interval: long toDurationMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return $r1;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l1 = virtualinvoke $r1.<org.joda.time.Interval: long getEndMillis()>();

        $l0 = virtualinvoke $r2.<org.joda.time.Chronology: long add(long,long,int)>($l1, $l0, -1);

        $r1 = new org.joda.time.Interval;

        specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return $r1;
    }
    public org.joda.time.Interval withEnd(org.joda.time.ReadableInstant)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadableInstant $r1;
        long $l0;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        r0 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Interval withEndMillis(long)>($l0);

        return r0;
    }
    public org.joda.time.Interval withEndMillis(long)
    {
        long $l0, $l1;
        org.joda.time.Interval $r0, r1;
        byte $b2;
        org.joda.time.Chronology $r2;

        r1 := @this: org.joda.time.Interval;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r1;

     label1:
        $r0 = new org.joda.time.Interval;

        $l1 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r0.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l1, $l0, $r2);

        return $r0;
    }
    public org.joda.time.Interval withPeriodAfterStart(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadablePeriod $r1;
        org.joda.time.Chronology $r2;
        long $l0, $l1;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        if $r1 != null goto label1;

        r0 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>(null);

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r1, $l0, 1);

        r0 = new org.joda.time.Interval;

        specialinvoke r0.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return r0;
    }
    public org.joda.time.Interval withPeriodBeforeEnd(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadablePeriod $r1;
        org.joda.time.Chronology $r2;
        long $l0, $l1;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        if $r1 != null goto label1;

        r0 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)>(null);

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r1, $l0, -1);

        r0 = new org.joda.time.Interval;

        specialinvoke r0.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l1, $l0, $r2);

        return r0;
    }
    public org.joda.time.Interval withStart(org.joda.time.ReadableInstant)
    {
        org.joda.time.Interval r0;
        org.joda.time.ReadableInstant $r1;
        long $l0;

        r0 := @this: org.joda.time.Interval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        r0 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Interval withStartMillis(long)>($l0);

        return r0;
    }
    public org.joda.time.Interval withStartMillis(long)
    {
        long $l0, $l1;
        org.joda.time.Interval $r0, r1;
        byte $b2;
        org.joda.time.Chronology $r2;

        r1 := @this: org.joda.time.Interval;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r1;

     label1:
        $r0 = new org.joda.time.Interval;

        $l1 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r0.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return $r0;
    }
