org.joda.time.tz.ZoneInfoCompiler$Zone extends java.lang.Object
public final java.lang.String iFormat
public final java.lang.String iName
private org.joda.time.tz.ZoneInfoCompiler$Zone iNext
public final int iOffsetMillis
public final java.lang.String iRules
public final org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear
public final int iUntilYear
    private void <init>(java.lang.String, java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        java.lang.String $r1;
        java.util.StringTokenizer $r2;
        int $i0;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r3;
        boolean $z0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.StringTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName> = $r1;

        $r1 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r1);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis> = $i0;

        $r1 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r1 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>($r1);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules> = $r1;

        $r1 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat> = $r1;

        $i0 = 2147483647;

        $r3 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>();

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r3 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>($r2);

     label1:
        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear> = $i0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear> = $r3;

        return;
    }
    void <init>(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        java.util.StringTokenizer $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r1 := @parameter0: java.util.StringTokenizer;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r2, $r1);

        return;
    }
    private static void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone, org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)
    {
        org.joda.time.tz.DateTimeZoneBuilder $r0;
        java.util.Map $r1;
        org.joda.time.tz.ZoneInfoCompiler$Zone $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.Exception $r4;
        java.lang.Object $r5;
        org.joda.time.tz.ZoneInfoCompiler$RuleSet $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r9;

        $r2 := @parameter0: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r0 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 := @parameter2: java.util.Map;

     label1:
        if $r2 == null goto label8;

        $i0 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis>;

        virtualinvoke $r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>($i0);

        $r3 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        if $r3 != null goto label3;

        $r3 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke $r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r3, 0);

     label2:
        $i0 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        if $i0 != 2147483647 goto label7;

        return;

     label3:
        $r3 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r3);

        $r3 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke $r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r3, $i0);

     label4:
        goto label2;

     label5:
        $r4 := @caughtexception;

        $r3 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r5;

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rules not found: ");

        $r3 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r7;

     label6:
        $r3 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke $r6.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>($r0, $r3);

        goto label2;

     label7:
        $r9 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear>;

        $i0 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        virtualinvoke $r9.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>($r0, $i0);

        $r2 = $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        goto label1;

     label8:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }
    public void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        org.joda.time.tz.DateTimeZoneBuilder $r1;
        java.util.Map $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        $r2 := @parameter1: java.util.Map;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>(r0, $r1, $r2);

        return;
    }
    void chain(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0, $r3;
        java.util.StringTokenizer $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r1 := @parameter0: java.util.StringTokenizer;

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        if $r3 == null goto label1;

        r0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        virtualinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>($r1);

        return;

     label1:
        $r3 = new org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        specialinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r2, $r1);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> = $r3;

        return;
    }
    public java.lang.String toString()
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0, $r4;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        int $i0;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r3;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Zone]\nName: ");

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OffsetMillis: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rules: ");

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format: ");

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UntilYear: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        if $r4 != null goto label1;

        return $r2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...\n");

        r0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        $r2 = virtualinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
