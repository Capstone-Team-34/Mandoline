org.joda.time.tz.ZoneInfoCompiler$RuleSet extends java.lang.Object
private java.util.List iRules
    void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)
    {
        org.joda.time.tz.ZoneInfoCompiler$RuleSet r0;
        org.joda.time.tz.ZoneInfoCompiler$Rule $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$RuleSet;

        $r1 := @parameter0: org.joda.time.tz.ZoneInfoCompiler$Rule;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules> = $r2;

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String)
    {
        org.joda.time.tz.ZoneInfoCompiler$RuleSet r0;
        org.joda.time.tz.DateTimeZoneBuilder $r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.util.List $r3;
        java.lang.Object $r4;
        org.joda.time.tz.ZoneInfoCompiler$Rule $r5;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$RuleSet;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        $r2 := @parameter1: java.lang.String;

        $i0 = 0;

     label1:
        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (org.joda.time.tz.ZoneInfoCompiler$Rule) $r4;

        virtualinvoke $r5.<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)
    {
        org.joda.time.tz.ZoneInfoCompiler$RuleSet r0;
        org.joda.time.tz.ZoneInfoCompiler$Rule $r1, $r5;
        java.lang.String $r2, $r6;
        java.util.List $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$RuleSet;

        $r1 := @parameter0: org.joda.time.tz.ZoneInfoCompiler$Rule;

        $r2 = $r1.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.joda.time.tz.ZoneInfoCompiler$Rule) $r4;

        $r6 = $r5.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Rule name mismatch");

        throw $r7;

     label1:
        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
