org.joda.time.format.DateTimeParserBucket extends java.lang.Object
private final org.joda.time.Chronology iChrono
private final java.lang.Integer iDefaultPivotYear
private final int iDefaultYear
private final org.joda.time.DateTimeZone iDefaultZone
private final java.util.Locale iLocale
private final long iMillis
private java.lang.Integer iOffset
private java.lang.Integer iPivotYear
private org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields
private int iSavedFieldsCount
private boolean iSavedFieldsShared
private java.lang.Object iSavedState
private org.joda.time.DateTimeZone iZone
    public void <init>(long, org.joda.time.Chronology, java.util.Locale)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        long $l0;
        org.joda.time.Chronology $r1;
        java.util.Locale $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        $r2 := @parameter2: java.util.Locale;

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>($l0, $r1, $r2, null, 2000);

        return;
    }
    public void <init>(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        long $l0;
        org.joda.time.Chronology $r1;
        java.util.Locale $r2;
        java.lang.Integer $r3;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        $r2 := @parameter2: java.util.Locale;

        $r3 := @parameter3: java.lang.Integer;

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>($l0, $r1, $r2, $r3, 2000);

        return;
    }
    public void <init>(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer, int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        long $l0;
        org.joda.time.Chronology $r1;
        java.lang.Integer $r2;
        int $i1;
        java.util.Locale $r3;
        org.joda.time.DateTimeZone $r4;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r5;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        $r3 := @parameter2: java.util.Locale;

        $r2 := @parameter3: java.lang.Integer;

        $i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> = $l0;

        $r4 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iDefaultZone> = $r4;

        $r1 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> = $r1;

        if $r3 != null goto label1;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale> = $r3;

        r0.<org.joda.time.format.DateTimeParserBucket: int iDefaultYear> = $i1;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iDefaultPivotYear> = $r2;

        $r4 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iDefaultZone>;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = $r4;

        $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iDefaultPivotYear>;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = $r2;

        $r5 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[8];

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r5;

        return;
    }
    static org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        org.joda.time.DateTimeZone r1;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 = $r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        return r1;
    }
    static org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket, org.joda.time.DateTimeZone)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        org.joda.time.DateTimeZone $r1;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        $r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = $r1;

        return $r1;
    }
    static java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        java.lang.Integer r1;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 = $r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        return r1;
    }
    static java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket, java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        java.lang.Integer $r1;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter1: java.lang.Integer;

        $r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = $r1;

        return $r1;
    }
    static org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        org.joda.time.format.DateTimeParserBucket$SavedField[] r1;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 = $r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        return r1;
    }
    static org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket, org.joda.time.format.DateTimeParserBucket$SavedField[])
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r1;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter1: org.joda.time.format.DateTimeParserBucket$SavedField[];

        $r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r1;

        return $r1;
    }
    static int access$300(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        int i0;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        i0 = $r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        return i0;
    }
    static int access$302(org.joda.time.format.DateTimeParserBucket, int)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        int $i0;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $i0 := @parameter1: int;

        $r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i0;

        return $i0;
    }
    static boolean access$402(org.joda.time.format.DateTimeParserBucket, boolean)
    {
        org.joda.time.format.DateTimeParserBucket $r0;
        boolean $z0;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $z0 := @parameter1: boolean;

        $r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = $z0;

        return $z0;
    }
    static int compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)
    {
        org.joda.time.DurationField $r0, $r1;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: org.joda.time.DurationField;

        $r1 := @parameter1: org.joda.time.DurationField;

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label4;

     label1:
        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return -1;

     label4:
        if $r1 == null goto label5;

        $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label6;

     label5:
        return 1;

     label6:
        $i0 = virtualinvoke $r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r1);

        $i0 = neg $i0;

        return $i0;
    }
    private org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        int $i0, $i1;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r1, $r2;
        boolean $z0;
        org.joda.time.format.DateTimeParserBucket$SavedField $r3;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>;

        if $z0 == 0 goto label7;

     label1:
        $i1 = lengthof $r1;

        if $i0 != $i1 goto label5;

        $i1 = $i0 * 2;

     label2:
        $r2 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r2;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

     label3:
        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        $r3 = $r2[$i0];

        if $r3 != null goto label6;

        $r3 = new org.joda.time.format.DateTimeParserBucket$SavedField;

        specialinvoke $r3.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>();

        $r2[$i0] = $r3;

     label4:
        $i0 = $i0 + 1;

        r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i0;

        return $r3;

     label5:
        $i1 = lengthof $r1;

        goto label2;

     label6:
        goto label4;

     label7:
        $r2 = $r1;

        goto label3;
    }
    private static void sort(org.joda.time.format.DateTimeParserBucket$SavedField[], int)
    {
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.format.DateTimeParserBucket$SavedField $r1, $r2;

        $r0 := @parameter0: org.joda.time.format.DateTimeParserBucket$SavedField[];

        $i0 := @parameter1: int;

        $i2 = 0;

        if $i0 <= 10 goto label2;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>($r0, 0, $i0);

        return;

     label1:
        $i2 = $i2 + 1;

     label2:
        if $i2 >= $i0 goto label4;

        $i3 = $i2;

     label3:
        if $i3 <= 0 goto label1;

        $i1 = $i3 + -1;

        $r1 = $r0[$i1];

        $r2 = $r0[$i3];

        $i1 = virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2);

        if $i1 <= 0 goto label1;

        $r1 = $r0[$i3];

        $i1 = $i3 + -1;

        $r2 = $r0[$i1];

        $r0[$i3] = $r2;

        $i1 = $i3 + -1;

        $r0[$i1] = $r1;

        $i3 = $i3 + -1;

        goto label3;

     label4:
        return;
    }
    public long computeMillis()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>(0, null);

        return $l0;
    }
    public long computeMillis(boolean)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean $z0;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $z0 := @parameter0: boolean;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>($z0, null);

        return $l0;
    }
    public long computeMillis(boolean, java.lang.CharSequence)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean $z0, $z1;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i3;
        org.joda.time.format.DateTimeParserBucket$SavedField $r2;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r3;
        java.lang.Object $r4;
        org.joda.time.DurationFieldType $r5;
        org.joda.time.Chronology $r6;
        org.joda.time.DurationField $r7, $r8, $r10;
        org.joda.time.DateTimeField $r9;
        org.joda.time.DateTimeFieldType $r11;
        long $l2, $l4;
        org.joda.time.IllegalFieldValueException $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r14, $r17;
        java.lang.Integer $r15;
        org.joda.time.DateTimeZone $r16;
        org.joda.time.IllegalInstantException $r18;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.CharSequence;

        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>;

        if $z1 == 0 goto label01;

        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r4;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r3;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

     label01:
        staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>($r3, $i0);

        if $i0 <= 0 goto label02;

        $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $r6 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r7 = virtualinvoke $r5.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r6);

        $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $r6 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r8 = virtualinvoke $r5.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r6);

        $r2 = $r3[0];

        $r9 = $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>;

        $r10 = virtualinvoke $r9.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>($r10, $r7);

        if $i1 < 0 goto label02;

        $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>($r10, $r8);

        if $i1 > 0 goto label02;

        $r11 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iDefaultYear>;

        virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r11, $i0);

        $l2 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>($z0, $r1);

        return $l2;

     label02:
        $l2 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>;

        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label06;

        $r2 = $r3[$i1];

     label04:
        $l2 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l2, $z0);

     label05:
        $i1 = $i1 + 1;

        goto label03;

     label06:
        if $z0 == 0 goto label13;

        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label13;

        $r2 = $r3[$i1];

        $i3 = $i0 + -1;

        if $i1 != $i3 goto label10;

        $z0 = 1;

     label08:
        $l2 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l2, $z0);

     label09:
        $i1 = $i1 + 1;

        goto label07;

     label10:
        $z0 = 0;

        goto label08;

     label11:
        $r12 := @caughtexception;

        if $r1 == null goto label12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \"");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>($r14);

     label12:
        throw $r12;

     label13:
        $r15 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        if $r15 == null goto label14;

        $r15 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        $i0 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i0;

        $l2 = $l2 - $l4;

        return $l2;

     label14:
        $r16 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        if $r16 == null goto label16;

        $r16 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $i0 = virtualinvoke $r16.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>($l2);

        $l4 = (long) $i0;

        $l2 = $l2 - $l4;

        $r16 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r16.<org.joda.time.DateTimeZone: int getOffset(long)>($l2);

        if $i0 == $i1 goto label16;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal instant due to time zone offset transition (");

        $r16 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = $r14;

        if $r1 == null goto label15;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \"");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r18 = new org.joda.time.IllegalInstantException;

        specialinvoke $r18.<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>($r17);

        throw $r18;

     label16:
        return $l2;

        catch org.joda.time.IllegalFieldValueException from label04 to label05 with label11;
        catch org.joda.time.IllegalFieldValueException from label08 to label09 with label11;
    }
    public long computeMillis(boolean, java.lang.String)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean $z0;
        java.lang.String $r1;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.String;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>($z0, $r1);

        return $l0;
    }
    long doParseMillis(org.joda.time.format.InternalParser, java.lang.CharSequence)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.InternalParser $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2;
        long $l3;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: org.joda.time.format.InternalParser;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>(r0, $r2, 0);

        $i1 = $i0;

        if $i0 < 0 goto label1;

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i0 < $i2 goto label2;

        $l3 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>(1, $r2);

        return $l3;

     label1:
        $i1 = $i0 ^ -1;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>($r4, $i1);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }
    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        return r1;
    }
    public java.util.Locale getLocale()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.util.Locale r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale>;

        return r1;
    }
    public int getOffset()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        if $r1 == null goto label1;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        return 0;
    }
    public java.lang.Integer getOffsetInteger()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        return r1;
    }
    public java.lang.Integer getPivotYear()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear>;

        return r1;
    }
    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        return r1;
    }
    public long parseMillis(org.joda.time.format.DateTimeParser, java.lang.CharSequence)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.DateTimeParser $r1;
        java.lang.CharSequence $r2;
        org.joda.time.format.InternalParser $r3;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: org.joda.time.format.DateTimeParser;

        $r2 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: void reset()>();

        $r3 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r1);

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>($r3, $r2);

        return $l0;
    }
    public void reset()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.Integer $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iDefaultZone>;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = $r1;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = null;

        $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iDefaultPivotYear>;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = $r2;

        r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = 0;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        return;
    }
    public boolean restoreState(java.lang.Object)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.format.DateTimeParserBucket$SavedState $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState;

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) $r1;

        $z0 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>(r0);

        if $z0 == 0 goto label1;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r1;

        return 1;

     label1:
        return 0;
    }
    public void saveField(org.joda.time.DateTimeField, int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeField $r1;
        int $i0;
        org.joda.time.format.DateTimeParserBucket$SavedField $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>();

        virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>($r1, $i0);

        return;
    }
    public void saveField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        org.joda.time.format.DateTimeParserBucket$SavedField $r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>();

        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>($r4, $i0);

        return;
    }
    public void saveField(org.joda.time.DateTimeFieldType, java.lang.String, java.util.Locale)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.String $r2;
        java.util.Locale $r3;
        org.joda.time.format.DateTimeParserBucket$SavedField $r4;
        org.joda.time.Chronology $r5;
        org.joda.time.DateTimeField $r6;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Locale;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>();

        $r5 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r6 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        virtualinvoke $r4.<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>($r6, $r2, $r3);

        return;
    }
    public java.lang.Object saveState()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Object $r1;
        org.joda.time.format.DateTimeParserBucket$SavedState $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>;

        if $r1 != null goto label1;

        $r2 = new org.joda.time.format.DateTimeParserBucket$SavedState;

        specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>(r0);

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r2;

     label1:
        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>;

        return $r1;
    }
    public void setOffset(int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $i0 := @parameter0: int;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = $r1;

        return;
    }
    public void setOffset(java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: java.lang.Integer;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = $r1;

        return;
    }
    public void setPivotYear(java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: java.lang.Integer;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = $r1;

        return;
    }
    public void setZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = $r1;

        return;
    }
