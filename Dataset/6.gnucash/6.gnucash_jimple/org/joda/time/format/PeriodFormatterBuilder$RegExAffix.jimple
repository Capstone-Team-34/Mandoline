org.joda.time.format.PeriodFormatterBuilder$RegExAffix extends org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix
private static final java.util.Comparator LENGTH_DESC_COMPARATOR
private final java.util.regex.Pattern[] iPatterns
private final java.lang.String[] iSuffixes
private final java.lang.String[] iSuffixesSortedDescByLength
    static void <clinit>()
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1 $r0;

        $r0 = new org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1;

        specialinvoke $r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>();

        <org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.Comparator LENGTH_DESC_COMPARATOR> = $r0;

        return;
    }
    void <init>(java.lang.String[], java.lang.String[])
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.String[] $r1, $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        int $i0, $i1;
        java.util.regex.Pattern[] $r5;
        java.util.concurrent.ConcurrentMap $r6;
        java.util.regex.Pattern $r7, $r8;
        java.util.Comparator $r9;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.String[]) $r4;

        r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes> = $r2;

        $i0 = lengthof $r1;

        $r5 = newarray (java.util.regex.Pattern)[$i0];

        r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns> = $r5;

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r6 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>();

        $r3 = $r1[$i0];

        $r4 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = (java.util.regex.Pattern) $r4;

        if $r7 != null goto label2;

        $r3 = $r1[$i0];

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r3);

        $r7 = $r8;

        $r6 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>();

        $r3 = $r1[$i0];

        interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, $r8);

     label2:
        $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $r5[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (java.lang.String[]) $r4;

        r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength> = $r1;

        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength>;

        $r9 = <org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.Comparator LENGTH_DESC_COMPARATOR>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r1, $r9);

        return;
    }
    private int selectSuffixIndex(int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.util.regex.Pattern[] $r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        boolean $z0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $i0 = 0;

     label1:
        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $r3 = $r2[$i0];

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        return $i0;
    }
    public int calculatePrintedLength(int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $i0 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>($i0);

        $r2 = $r1[$i0];

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        return $i0;
    }
    public java.lang.String[] getAffixes()
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.Object $r1;
        java.lang.String[] $r2;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.String[]) $r1;

        return $r2;
    }
    public int parse(java.lang.String, int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String[] $r3;
        boolean $z0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength>;

        $i1 = lengthof $r3;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $r2 = $r3[$i2];

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i0, $r2, 0, $i3);

        if $z0 == 0 goto label2;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        $z0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: boolean matchesOtherAffix(int,java.lang.String,int)>($i3, $r1, $i0);

        if $z0 != 0 goto label2;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i1 + $i0;

        return $i0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i0 = $i0 ^ -1;

        return $i0;
    }
    public void printTo(java.io.Writer, int) throws java.io.IOException
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.io.Writer $r1;
        int $i0;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $r1 := @parameter0: java.io.Writer;

        $i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $i0 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>($i0);

        $r3 = $r2[$i0];

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r3);

        return;
    }
    public void printTo(java.lang.StringBuffer, int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $r1 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $i0 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>($i0);

        $r3 = $r2[$i0];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        return;
    }
    public int scan(java.lang.String, int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String[] $r3;
        boolean $z0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = $i0;

     label1:
        if $i3 >= $i2 goto label5;

        $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength>;

        $i1 = lengthof $r3;

        $i4 = 0;

     label2:
        if $i4 >= $i1 goto label4;

        $r2 = $r3[$i4];

        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i3, $r2, 0, $i5);

        if $z0 == 0 goto label3;

        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        $z0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: boolean matchesOtherAffix(int,java.lang.String,int)>($i5, $r1, $i3);

        if $z0 != 0 goto label3;

        return $i3;

     label3:
        $i4 = $i4 + 1;

        goto label2;

     label4:
        $i3 = $i3 + 1;

        goto label1;

     label5:
        $i0 = $i0 ^ -1;

        return $i0;
    }
