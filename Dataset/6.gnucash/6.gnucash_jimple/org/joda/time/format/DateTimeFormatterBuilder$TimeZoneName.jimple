org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName extends java.lang.Object implements org.joda.time.format.InternalPrinter org.joda.time.format.InternalParser
static final int LONG_NAME
static final int SHORT_NAME
private final java.util.Map iParseLookup
private final int iType
    void <init>(int, java.util.Map)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        int $i0;
        java.util.Map $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType> = $i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.util.Map iParseLookup> = $r1;

        return;
    }
    private java.lang.String print(long, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        long $l0;
        org.joda.time.DateTimeZone $r1;
        java.util.Locale $r2;
        int $i1;
        java.lang.String $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        $r2 := @parameter2: java.util.Locale;

        if $r1 != null goto label1;

        return "";

     label1:
        $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType>;

        lookupswitch($i1)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label2;
        };

     label2:
        return "";

     label3:
        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>($l0, $r2);

        return $r3;

     label4:
        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>($l0, $r2);

        return $r3;
    }
    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType>;

        if $i0 != 1 goto label1;

        return 4;

     label1:
        return 20;
    }
    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType>;

        if $i0 != 1 goto label1;

        return 4;

     label1:
        return 20;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2;
        java.util.Map $r3;
        java.lang.String $r4, $r8;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.joda.time.DateTimeZone $r9;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.util.Map iParseLookup>;

        if $r3 == null goto label4;

     label1:
        $r4 = null;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $z0 = staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>($r2, $i0, $r8);

        if $z0 == 0 goto label7;

        if $r4 == null goto label3;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label7;

     label3:
        $r4 = $r8;

        goto label2;

     label4:
        $r3 = staticinvoke <org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>();

        goto label1;

     label5:
        if $r4 == null goto label6;

        $r7 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r9 = (org.joda.time.DateTimeZone) $r7;

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>($r9);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i1 + $i0;

        return $i0;

     label6:
        $i0 = $i0 ^ -1;

        return $i0;

     label7:
        $r8 = $r4;

        goto label3;
    }
    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        java.lang.Appendable $r1;
        long $l0, $l2;
        org.joda.time.Chronology $r2;
        int $i1;
        org.joda.time.DateTimeZone $r3;
        java.util.Locale $r4;
        java.lang.String $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.joda.time.DateTimeZone;

        $r4 := @parameter5: java.util.Locale;

        $l2 = (long) $i1;

        $l0 = $l0 - $l2;

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>($l0, $r3, $r4);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

        return;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadablePartial $r2;
        java.util.Locale $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 := @parameter2: java.util.Locale;

        return;
    }
