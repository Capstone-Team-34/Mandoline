org.joda.time.format.DateTimeFormatter extends java.lang.Object
private final org.joda.time.Chronology iChrono
private final int iDefaultYear
private final java.util.Locale iLocale
private final boolean iOffsetParsed
private final org.joda.time.format.InternalParser iParser
private final java.lang.Integer iPivotYear
private final org.joda.time.format.InternalPrinter iPrinter
private final org.joda.time.DateTimeZone iZone
    public void <init>(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter $r1;
        org.joda.time.format.DateTimeParser $r2;
        org.joda.time.format.InternalPrinter $r3;
        org.joda.time.format.InternalParser $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        $r2 := @parameter1: org.joda.time.format.DateTimeParser;

        $r3 = staticinvoke <org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>($r1);

        $r4 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r2);

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r3, $r4);

        return;
    }
    void <init>(org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter $r1;
        org.joda.time.format.InternalParser $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: org.joda.time.format.InternalPrinter;

        $r2 := @parameter1: org.joda.time.format.InternalParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter> = $r1;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser> = $r2;

        r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> = null;

        r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> = 0;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> = null;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> = null;

        r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> = null;

        r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> = 2000;

        return;
    }
    private void <init>(org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter $r1;
        org.joda.time.format.InternalParser $r2;
        java.util.Locale $r3;
        boolean $z0;
        org.joda.time.Chronology $r4;
        org.joda.time.DateTimeZone $r5;
        java.lang.Integer $r6;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: org.joda.time.format.InternalPrinter;

        $r2 := @parameter1: org.joda.time.format.InternalParser;

        $r3 := @parameter2: java.util.Locale;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: org.joda.time.Chronology;

        $r5 := @parameter5: org.joda.time.DateTimeZone;

        $r6 := @parameter6: java.lang.Integer;

        $i0 := @parameter7: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter> = $r1;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser> = $r2;

        r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> = $r3;

        r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> = $z0;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> = $r4;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> = $r5;

        r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> = $r6;

        r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> = $i0;

        return;
    }
    private void printTo(java.lang.Appendable, long, org.joda.time.Chronology) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable $r1;
        long $l0, $l3, $l4;
        org.joda.time.Chronology $r2;
        java.util.Locale $r3;
        org.joda.time.format.InternalPrinter $r4;
        org.joda.time.DateTimeZone $r5, $r6;
        int $i1, $i2;
        byte $b5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r2);

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r6 = $r5;

        $i1 = virtualinvoke $r5.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $i2 = $i1;

        $l3 = (long) $i1;

        $l3 = $l3 + $l0;

        $l4 = $l0 ^ $l3;

        $b5 = $l4 cmp 0L;

        if $b5 >= 0 goto label1;

        $l4 = (long) $i1;

        $l4 = $l4 ^ $l0;

        $b5 = $l4 cmp 0L;

        if $b5 < 0 goto label1;

        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $i2 = 0;

        $l3 = $l0;

     label1:
        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke $r4.<org.joda.time.format.InternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>($r1, $l3, $r2, $i2, $r6, $r3);

        return;
    }
    private org.joda.time.format.InternalParser requireParser()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalParser $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        if $r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Parsing not supported");

        throw $r2;

     label1:
        return $r1;
    }
    private org.joda.time.format.InternalPrinter requirePrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        if $r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Printing not supported");

        throw $r2;

     label1:
        return $r1;
    }
    private org.joda.time.Chronology selectChronology(org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r1, $r2;
        org.joda.time.DateTimeZone $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        if $r2 == null goto label1;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

     label1:
        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r3 == null goto label2;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r1 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r3);

     label2:
        return $r1;
    }
    public org.joda.time.Chronology getChronolgy()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        return r1;
    }
    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        return r1;
    }
    public int getDefaultYear()
    {
        org.joda.time.format.DateTimeFormatter r0;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        return i0;
    }
    public java.util.Locale getLocale()
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.util.Locale r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        return r1;
    }
    public org.joda.time.format.DateTimeParser getParser()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimeParser $r1;
        org.joda.time.format.InternalParser $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r1 = staticinvoke <org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>($r2);

        return $r1;
    }
    org.joda.time.format.InternalParser getParser0()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalParser r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        return r1;
    }
    public java.lang.Integer getPivotYear()
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Integer r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        return r1;
    }
    public org.joda.time.format.DateTimePrinter getPrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter $r1;
        org.joda.time.format.InternalPrinter $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r1 = staticinvoke <org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>($r2);

        return $r1;
    }
    org.joda.time.format.InternalPrinter getPrinter0()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        return r1;
    }
    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.DateTimeZone r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        return r1;
    }
    public boolean isOffsetParsed()
    {
        org.joda.time.format.DateTimeFormatter r0;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        return z0;
    }
    public boolean isParser()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalParser $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isPrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.joda.time.DateTime parseDateTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        java.lang.Integer $r3;
        int $i0, $i1, $i2;
        org.joda.time.format.InternalParser $r4;
        org.joda.time.Chronology $r5, $r6;
        org.joda.time.format.DateTimeParserBucket $r7;
        long $l3;
        boolean $z0;
        org.joda.time.DateTimeZone $r8;
        org.joda.time.DateTime $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.String;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        $r6 = $r5;

        $r7 = new org.joda.time.format.DateTimeParserBucket;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r7.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, $r5, $r2, $r3, $i0);

        $i0 = interfaceinvoke $r4.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r7, $r1, 0);

        $i1 = $i0;

        if $i0 < 0 goto label3;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i2 goto label4;

        $l3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, $r1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i0);

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r8);

     label1:
        $r9 = new org.joda.time.DateTime;

        specialinvoke $r9.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l3, $r6);

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r8 == null goto label5;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r9 = virtualinvoke $r9.<org.joda.time.DateTime: org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)>($r8);

        return $r9;

     label2:
        $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r8 == null goto label1;

        $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r8);

        goto label1;

     label3:
        $i1 = $i0 ^ -1;

     label4:
        $r10 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>($r1, $i1);

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r10;

     label5:
        return $r9;
    }
    public int parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.ReadWritableInstant $r1;
        java.lang.String $r2;
        int $i0, $i2, $i3;
        java.util.Locale $r3;
        java.lang.Integer $r4;
        org.joda.time.format.InternalParser $r5;
        java.lang.IllegalArgumentException $r6;
        long $l1, $l4;
        org.joda.time.Chronology $r7, $r8;
        org.joda.time.DateTimeField $r9;
        org.joda.time.DateTimeZone $r10;
        org.joda.time.format.DateTimeParserBucket $r11;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: org.joda.time.ReadWritableInstant;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Instant must not be null");

        throw $r6;

     label1:
        $l1 = interfaceinvoke $r1.<org.joda.time.ReadWritableInstant: long getMillis()>();

        $r7 = interfaceinvoke $r1.<org.joda.time.ReadWritableInstant: org.joda.time.Chronology getChronology()>();

        $r8 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r7);

        $r9 = virtualinvoke $r8.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i2 = virtualinvoke $r9.<org.joda.time.DateTimeField: int get(long)>($l1);

        $r10 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $i3 = virtualinvoke $r10.<org.joda.time.DateTimeZone: int getOffset(long)>($l1);

        $l4 = (long) $i3;

        $l1 = $l1 + $l4;

        $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r7);

        $r8 = $r7;

        $r11 = new org.joda.time.format.DateTimeParserBucket;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r11.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>($l1, $r7, $r3, $r4, $i2);

        $i0 = interfaceinvoke $r5.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r11, $r2, $i0);

        $l1 = virtualinvoke $r11.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, $r2);

        interfaceinvoke $r1.<org.joda.time.ReadWritableInstant: void setMillis(long)>($l1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r11.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r4 == null goto label3;

        $r4 = virtualinvoke $r11.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r10 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i2);

        $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r10);

     label2:
        interfaceinvoke $r1.<org.joda.time.ReadWritableInstant: void setChronology(org.joda.time.Chronology)>($r8);

        $r10 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r10 == null goto label4;

        $r10 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        interfaceinvoke $r1.<org.joda.time.ReadWritableInstant: void setZone(org.joda.time.DateTimeZone)>($r10);

        return $i0;

     label3:
        $r10 = virtualinvoke $r11.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r10 == null goto label2;

        $r10 = virtualinvoke $r11.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r10);

        goto label2;

     label4:
        return $i0;
    }
    public org.joda.time.LocalDate parseLocalDate(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String $r1;
        org.joda.time.LocalDateTime $r2;
        org.joda.time.LocalDate $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>();

        return $r3;
    }
    public org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        java.lang.Integer $r3;
        int $i0, $i1, $i2;
        org.joda.time.format.InternalParser $r4;
        org.joda.time.Chronology $r5, $r6;
        org.joda.time.format.DateTimeParserBucket $r7;
        long $l3;
        org.joda.time.DateTimeZone $r8;
        org.joda.time.LocalDateTime $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.String;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        $r5 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r6 = $r5;

        $r7 = new org.joda.time.format.DateTimeParserBucket;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r7.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, $r5, $r2, $r3, $i0);

        $i0 = interfaceinvoke $r4.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r7, $r1, 0);

        $i1 = $i0;

        if $i0 < 0 goto label3;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i2 goto label4;

        $l3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, $r1);

        $r3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i0);

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r8);

     label1:
        $r9 = new org.joda.time.LocalDateTime;

        specialinvoke $r9.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>($l3, $r6);

        return $r9;

     label2:
        $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r8 == null goto label1;

        $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r8);

        goto label1;

     label3:
        $i1 = $i0 ^ -1;

     label4:
        $r10 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>($r1, $i1);

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r10;
    }
    public org.joda.time.LocalTime parseLocalTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String $r1;
        org.joda.time.LocalDateTime $r2;
        org.joda.time.LocalTime $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>();

        return $r3;
    }
    public long parseMillis(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        java.lang.Integer $r3;
        int $i0;
        org.joda.time.format.InternalParser $r4;
        org.joda.time.Chronology $r5;
        org.joda.time.format.DateTimeParserBucket $r6;
        long $l1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.String;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5);

        $r6 = new org.joda.time.format.DateTimeParserBucket;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, $r5, $r2, $r3, $i0);

        $l1 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>($r4, $r1);

        return $l1;
    }
    public org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        java.lang.Integer $r3;
        int $i0, $i1, $i2;
        org.joda.time.format.InternalParser $r4;
        org.joda.time.Chronology $r5, $r6;
        org.joda.time.format.DateTimeParserBucket $r7;
        long $l3;
        boolean $z0;
        org.joda.time.DateTimeZone $r8;
        org.joda.time.MutableDateTime $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.String;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        $r6 = $r5;

        $r7 = new org.joda.time.format.DateTimeParserBucket;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r7.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, $r5, $r2, $r3, $i0);

        $i0 = interfaceinvoke $r4.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r7, $r1, 0);

        $i1 = $i0;

        if $i0 < 0 goto label3;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i2 goto label4;

        $l3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, $r1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i0);

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r8);

     label1:
        $r9 = new org.joda.time.MutableDateTime;

        specialinvoke $r9.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>($l3, $r6);

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r8 == null goto label5;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        virtualinvoke $r9.<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>($r8);

        return $r9;

     label2:
        $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r8 == null goto label1;

        $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r8);

        goto label1;

     label3:
        $i1 = $i0 ^ -1;

     label4:
        $r10 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>($r1, $i1);

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r10;

     label5:
        return $r9;
    }
    public java.lang.String print(long)
    {
        org.joda.time.format.DateTimeFormatter r0;
        long $l0;
        java.lang.StringBuilder $r1;
        org.joda.time.format.InternalPrinter $r2;
        int $i1;
        java.lang.String $r3;
        java.io.IOException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        $i1 = interfaceinvoke $r2.<org.joda.time.format.InternalPrinter: int estimatePrintedLength()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>($r1, $l0);

     label2:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public java.lang.String print(org.joda.time.ReadableInstant)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.ReadableInstant $r1;
        java.lang.StringBuilder $r2;
        org.joda.time.format.InternalPrinter $r3;
        int $i0;
        java.lang.String $r4;
        java.io.IOException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 = new java.lang.StringBuilder;

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        $i0 = interfaceinvoke $r3.<org.joda.time.format.InternalPrinter: int estimatePrintedLength()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>($r2, $r1);

     label2:
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public java.lang.String print(org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.ReadablePartial $r1;
        java.lang.StringBuilder $r2;
        org.joda.time.format.InternalPrinter $r3;
        int $i0;
        java.lang.String $r4;
        java.io.IOException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = new java.lang.StringBuilder;

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        $i0 = interfaceinvoke $r3.<org.joda.time.format.InternalPrinter: int estimatePrintedLength()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>($r2, $r1);

     label2:
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void printTo(java.io.Writer, long) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.io.Writer $r1;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.io.Writer;

        $l0 := @parameter1: long;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>($r1, $l0);

        return;
    }
    public void printTo(java.io.Writer, org.joda.time.ReadableInstant) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.io.Writer $r1;
        org.joda.time.ReadableInstant $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>($r1, $r2);

        return;
    }
    public void printTo(java.io.Writer, org.joda.time.ReadablePartial) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.io.Writer $r1;
        org.joda.time.ReadablePartial $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>($r1, $r2);

        return;
    }
    public void printTo(java.lang.Appendable, long) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable $r1;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>($r1, $l0, null);

        return;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadableInstant) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadableInstant $r2;
        long $l0;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r2);

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r2);

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>($r1, $l0, $r3);

        return;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadablePartial $r2;
        org.joda.time.format.InternalPrinter $r3;
        java.lang.IllegalArgumentException $r4;
        java.util.Locale $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r4;

     label1:
        $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke $r3.<org.joda.time.format.InternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>($r1, $r2, $r5);

        return;
    }
    public void printTo(java.lang.StringBuffer, long)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer $r1;
        long $l0;
        java.io.IOException $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.StringBuffer;

        $l0 := @parameter1: long;

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>($r1, $l0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer $r1;
        org.joda.time.ReadableInstant $r2;
        java.io.IOException $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.StringBuffer;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>($r1, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer $r1;
        org.joda.time.ReadablePartial $r2;
        java.io.IOException $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.StringBuffer;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>($r1, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0, $r7;
        org.joda.time.format.InternalPrinter $r1;
        org.joda.time.format.InternalParser $r2;
        java.util.Locale $r3;
        boolean $z0;
        org.joda.time.DateTimeZone $r4;
        java.lang.Integer $r5;
        int $i0;
        org.joda.time.format.DateTimeFormatter r6, $r8;

        r6 := @this: org.joda.time.format.DateTimeFormatter;

        $r0 := @parameter0: org.joda.time.Chronology;

        $r7 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        if $r7 != $r0 goto label1;

        return r6;

     label1:
        $r8 = new org.joda.time.format.DateTimeFormatter;

        $r1 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r2 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r3 = r6.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r6.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r4 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r5 = r6.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r6.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r8.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r1, $r2, $r3, $z0, $r0, $r4, $r5, $i0);

        return $r8;
    }
    public org.joda.time.format.DateTimeFormatter withDefaultYear(int)
    {
        org.joda.time.format.DateTimeFormatter r0, $r1;
        int $i0;
        org.joda.time.format.InternalPrinter $r2;
        org.joda.time.format.InternalParser $r3;
        java.util.Locale $r4;
        boolean $z0;
        org.joda.time.Chronology $r5;
        org.joda.time.DateTimeZone $r6;
        java.lang.Integer $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $i0 := @parameter0: int;

        $r1 = new org.joda.time.format.DateTimeFormatter;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r2, $r3, $r4, $z0, $r5, $r6, $r7, $i0);

        return $r1;
    }
    public org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatter r0, $r8;
        java.util.Locale $r1, $r7;
        org.joda.time.format.InternalPrinter $r2;
        org.joda.time.format.InternalParser $r3;
        boolean $z0;
        org.joda.time.Chronology $r4;
        org.joda.time.DateTimeZone $r5;
        java.lang.Integer $r6;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.util.Locale;

        $r7 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>();

        if $r1 == $r7 goto label1;

        if $r1 == null goto label2;

        $r7 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>();

        $z0 = virtualinvoke $r1.<java.util.Locale: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r8 = new org.joda.time.format.DateTimeFormatter;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r8.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r2, $r3, $r1, $z0, $r4, $r5, $r6, $i0);

        return $r8;
    }
    public org.joda.time.format.DateTimeFormatter withOffsetParsed()
    {
        org.joda.time.format.InternalPrinter $r0;
        org.joda.time.format.InternalParser $r1;
        java.util.Locale $r2;
        org.joda.time.Chronology $r3;
        java.lang.Integer $r4;
        int $i0;
        org.joda.time.format.DateTimeFormatter r5, $r6;
        boolean $z0;

        r5 := @this: org.joda.time.format.DateTimeFormatter;

        $z0 = r5.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 != 1 goto label1;

        return r5;

     label1:
        $r6 = new org.joda.time.format.DateTimeFormatter;

        $r0 = r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r1 = r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r2 = r5.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r3 = r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r4 = r5.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r5.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r6.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r0, $r1, $r2, 1, $r3, null, $r4, $i0);

        return $r6;
    }
    public org.joda.time.format.DateTimeFormatter withPivotYear(int)
    {
        org.joda.time.format.DateTimeFormatter r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)
    {
        org.joda.time.format.DateTimeFormatter r0, $r8;
        java.lang.Integer $r1, $r7;
        org.joda.time.format.InternalPrinter $r2;
        org.joda.time.format.InternalParser $r3;
        java.util.Locale $r4;
        boolean $z0;
        org.joda.time.Chronology $r5;
        org.joda.time.DateTimeZone $r6;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 := @parameter0: java.lang.Integer;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        if $r7 == $r1 goto label1;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        if $r7 == null goto label2;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $z0 = virtualinvoke $r7.<java.lang.Integer: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r8 = new org.joda.time.format.DateTimeFormatter;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r8.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r2, $r3, $r4, $z0, $r5, $r6, $r1, $i0);

        return $r8;
    }
    public org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0, $r7;
        org.joda.time.format.InternalPrinter $r1;
        org.joda.time.format.InternalParser $r2;
        java.util.Locale $r3;
        org.joda.time.Chronology $r4;
        java.lang.Integer $r5;
        int $i0;
        org.joda.time.format.DateTimeFormatter r6, $r8;

        r6 := @this: org.joda.time.format.DateTimeFormatter;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r7 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r7 != $r0 goto label1;

        return r6;

     label1:
        $r8 = new org.joda.time.format.DateTimeFormatter;

        $r1 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r2 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r3 = r6.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r4 = r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r5 = r6.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r6.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r8.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r1, $r2, $r3, 0, $r4, $r0, $r5, $i0);

        return $r8;
    }
    public org.joda.time.format.DateTimeFormatter withZoneUTC()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r1);

        return r0;
    }
