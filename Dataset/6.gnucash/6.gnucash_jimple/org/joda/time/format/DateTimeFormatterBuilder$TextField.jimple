org.joda.time.format.DateTimeFormatterBuilder$TextField extends java.lang.Object implements org.joda.time.format.InternalPrinter org.joda.time.format.InternalParser
private static java.util.Map cParseCache
private final org.joda.time.DateTimeFieldType iFieldType
private final boolean iShort
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache> = $r0;

        return;
    }
    void <init>(org.joda.time.DateTimeFieldType, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        org.joda.time.DateTimeFieldType $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType> = $r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort> = $z0;

        return;
    }
    private java.lang.String print(long, org.joda.time.Chronology, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        long $l0;
        org.joda.time.Chronology $r1;
        java.util.Locale $r2;
        boolean $z0;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;
        java.lang.String $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        $r2 := @parameter2: java.util.Locale;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>($l0, $r2);

        return $r5;

     label1:
        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>($l0, $r2);

        return $r5;
    }
    private java.lang.String print(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        org.joda.time.ReadablePartial $r1;
        java.util.Locale $r2;
        org.joda.time.DateTimeFieldType $r3;
        boolean $z0;
        org.joda.time.Chronology $r4;
        org.joda.time.DateTimeField $r5;
        java.lang.String $r6;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: java.util.Locale;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $z0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r3);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r4 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4);

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>($r1, $r2);

        return $r6;

     label1:
        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>($r1, $r2);

        return $r6;

     label2:
        return "\ufffd";
    }
    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>();

        return $i0;
    }
    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z0 == 0 goto label1;

        return 6;

     label1:
        return 20;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2, $r17;
        int $i0, $i1, $i2, $i3;
        java.util.Locale $r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        org.joda.time.DateTimeFieldType $r7, $r15;
        java.lang.Object[] $r8;
        org.joda.time.MutableDateTime $r9;
        org.joda.time.DateTimeZone $r10;
        org.joda.time.MutableDateTime$Property $r11;
        java.lang.String $r12, $r14;
        java.lang.Boolean $r13;
        boolean $z0;
        java.lang.Integer $r16;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>();

        $r4 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r4 = (java.util.Map) $r5;

        if $r4 != null goto label11;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r4 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = $r6;

     label01:
        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r8 = (java.lang.Object[]) $r5;

        if $r8 != null goto label08;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(32);

        $r9 = new org.joda.time.MutableDateTime;

        $r10 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        specialinvoke $r9.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>(0L, $r10);

        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r11 = virtualinvoke $r9.<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>($r7);

        $i1 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: int getMinimumValueOverall()>();

        $i2 = $i1;

        $i3 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: int getMaximumValueOverall()>();

        $i1 = $i3 - $i1;

        if $i1 <= 32 goto label02;

        $i0 = $i0 ^ -1;

        return $i0;

     label02:
        $i1 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: int getMaximumTextLength(java.util.Locale)>($r3);

     label03:
        if $i2 > $i3 goto label04;

        virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>($i2);

        $r12 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>($r3);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r12 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r12 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r12 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>($r3);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r12 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r12 = virtualinvoke $r11.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $i2 = $i2 + 1;

        goto label03;

     label04:
        $r12 = "en";

        $r14 = virtualinvoke $r3.<java.util.Locale: java.lang.String getLanguage()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 == 0 goto label05;

        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r15 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>();

        if $r7 != $r15 goto label05;

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BCE", $r13);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("bce", $r13);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CE", $r13);

        $r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ce", $r13);

        $i1 = 3;

     label05:
        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = $r6;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8[1] = $r16;

        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r4 = $r6;

     label06:
        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i3 = $i1 + $i0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

     label07:
        if $i2 <= $i0 goto label10;

        $r17 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i2);

        $r12 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r12);

        if $z0 == 0 goto label09;

        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>($r7, $r12, $r3);

        return $i2;

     label08:
        $r5 = $r8[0];

        $r4 = (java.util.Map) $r5;

        $r5 = $r8[1];

        $r16 = (java.lang.Integer) $r5;

        $i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        goto label06;

     label09:
        $i2 = $i2 + -1;

        goto label07;

     label10:
        $i0 = $i0 ^ -1;

        return $i0;

     label11:
        goto label01;
    }
    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        java.lang.Appendable $r1;
        long $l0;
        org.joda.time.Chronology $r2;
        int $i1;
        org.joda.time.DateTimeZone $r3;
        java.util.Locale $r4;
        java.lang.String $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.joda.time.DateTimeZone;

        $r4 := @parameter5: java.util.Locale;

     label1:
        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>($l0, $r2, $r4);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadablePartial $r2;
        java.util.Locale $r3;
        java.lang.String $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 := @parameter2: java.util.Locale;

     label1:
        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>($r2, $r3);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
