org.joda.time.chrono.GJChronology extends org.joda.time.chrono.AssembledChronology
static final org.joda.time.Instant DEFAULT_CUTOVER
private static final java.util.concurrent.ConcurrentHashMap cCache
private static final long serialVersionUID
private org.joda.time.Instant iCutoverInstant
private long iCutoverMillis
private long iGapDuration
private org.joda.time.chrono.GregorianChronology iGregorianChronology
private org.joda.time.chrono.JulianChronology iJulianChronology
    static void <clinit>()
    {
        org.joda.time.Instant $r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        $r0 = new org.joda.time.Instant;

        specialinvoke $r0.<org.joda.time.Instant: void <init>(long)>(-12219292800000L);

        <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.GJChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r1;

        return;
    }
    private void <init>(org.joda.time.Chronology, org.joda.time.chrono.JulianChronology, org.joda.time.chrono.GregorianChronology, org.joda.time.Instant)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.JulianChronology $r2;
        org.joda.time.chrono.GregorianChronology $r3;
        org.joda.time.Instant $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: org.joda.time.chrono.JulianChronology;

        $r3 := @parameter2: org.joda.time.chrono.GregorianChronology;

        $r4 := @parameter3: org.joda.time.Instant;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r2;

        $r5[1] = $r3;

        $r5[2] = $r4;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r1, $r5);

        return;
    }
    private void <init>(org.joda.time.chrono.JulianChronology, org.joda.time.chrono.GregorianChronology, org.joda.time.Instant)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.JulianChronology $r1;
        org.joda.time.chrono.GregorianChronology $r2;
        org.joda.time.Instant $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 := @parameter0: org.joda.time.chrono.JulianChronology;

        $r2 := @parameter1: org.joda.time.chrono.GregorianChronology;

        $r3 := @parameter2: org.joda.time.Instant;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r1;

        $r4[1] = $r2;

        $r4[2] = $r3;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(null, $r4);

        return;
    }
    static long access$000(org.joda.time.chrono.GJChronology)
    {
        org.joda.time.chrono.GJChronology $r0;
        long l0;

        $r0 := @parameter0: org.joda.time.chrono.GJChronology;

        l0 = $r0.<org.joda.time.chrono.GJChronology: long iGapDuration>;

        return l0;
    }
    static org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)
    {
        org.joda.time.chrono.GJChronology $r0;
        org.joda.time.chrono.GregorianChronology r1;

        $r0 := @parameter0: org.joda.time.chrono.GJChronology;

        r1 = $r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        return r1;
    }
    private static long convertByWeekyear(long, org.joda.time.Chronology, org.joda.time.Chronology)
    {
        long $l0, $l2;
        org.joda.time.Chronology $r0, $r1;
        org.joda.time.DateTimeField $r2, $r3;
        int $i1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: org.joda.time.Chronology;

        $r1 := @parameter2: org.joda.time.Chronology;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $r3 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $r3 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l2, $i1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $r3 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l2, $i1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $r3 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l2, $i1);

        return $l0;
    }
    private static long convertByYear(long, org.joda.time.Chronology, org.joda.time.Chronology)
    {
        long $l0;
        org.joda.time.Chronology $r0, $r1;
        org.joda.time.DateTimeField $r2;
        int $i1, $i2, $i3, $i4;

        $l0 := @parameter0: long;

        $r0 := @parameter1: org.joda.time.Chronology;

        $r1 := @parameter2: org.joda.time.Chronology;

        $r2 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        $r2 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        $r2 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $i3 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        $r2 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i4 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        $l0 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i1, $i2, $i3, $i4);

        return $l0;
    }
    public static org.joda.time.chrono.GJChronology getInstance()
    {
        org.joda.time.Instant $r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.GJChronology $r2;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r0 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r1, $r0, 4);

        return $r2;
    }
    public static org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.GJChronology $r1;
        org.joda.time.Instant $r2;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r0, $r2, 4);

        return $r1;
    }
    public static org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, long, int)
    {
        org.joda.time.DateTimeZone $r0;
        long $l0, $l2;
        int $i1;
        org.joda.time.Instant $r1;
        byte $b3;
        org.joda.time.chrono.GJChronology $r2;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $r1 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $l2 = virtualinvoke $r1.<org.joda.time.Instant: long getMillis()>();

        $b3 = $l0 cmp $l2;

        if $b3 != 0 goto label2;

        $r1 = null;

     label1:
        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r0, $r1, $i1);

        return $r2;

     label2:
        $r1 = new org.joda.time.Instant;

        specialinvoke $r1.<org.joda.time.Instant: void <init>(long)>($l0);

        goto label1;
    }
    public static org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant)
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.chrono.GJChronology $r2;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r0, $r1, 4);

        return $r2;
    }
    public static org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)
    {
        org.joda.time.DateTimeZone $r0, $r8;
        org.joda.time.ReadableInstant $r1;
        int $i0, $i2;
        org.joda.time.chrono.GregorianChronology $r2;
        org.joda.time.Instant $r3;
        org.joda.time.chrono.GJCacheKey $r4;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.Object $r6;
        org.joda.time.chrono.GJChronology $r7, $r10;
        org.joda.time.chrono.JulianChronology $r9;
        org.joda.time.LocalDate $r11;
        long $l1;
        java.lang.IllegalArgumentException $r12;
        org.joda.time.chrono.ZonedChronology $r13;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 := @parameter1: org.joda.time.ReadableInstant;

        $i0 := @parameter2: int;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r0);

        if $r1 != null goto label3;

        $r3 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

     label1:
        $r4 = new org.joda.time.chrono.GJCacheKey;

        specialinvoke $r4.<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>($r0, $r3, $i0);

        $r5 = <org.joda.time.chrono.GJChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (org.joda.time.chrono.GJChronology) $r6;

        if $r7 != null goto label7;

        $r8 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r0 != $r8 goto label4;

        $r7 = new org.joda.time.chrono.GJChronology;

        $r9 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, $i0);

        $r2 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, $i0);

        specialinvoke $r7.<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>($r9, $r2, $r3);

     label2:
        $r5 = <org.joda.time.chrono.GJChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r4, $r7);

        $r10 = (org.joda.time.chrono.GJChronology) $r6;

        if $r10 == null goto label5;

        return $r10;

     label3:
        $r3 = interfaceinvoke $r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>();

        $r11 = new org.joda.time.LocalDate;

        $l1 = virtualinvoke $r3.<org.joda.time.Instant: long getMillis()>();

        $r2 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>($r0);

        specialinvoke $r11.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l1, $r2);

        $i2 = virtualinvoke $r11.<org.joda.time.LocalDate: int getYear()>();

        if $i2 > 0 goto label6;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cutover too early. Must be on or after 0001-01-01.");

        throw $r12;

     label4:
        $r8 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r7 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r8, $r3, $i0);

        $r10 = new org.joda.time.chrono.GJChronology;

        $r13 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r7, $r0);

        $r9 = $r7.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $r2 = $r7.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $r3 = $r7.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>($r13, $r9, $r2, $r3);

        $r7 = $r10;

        goto label2;

     label5:
        return $r7;

     label6:
        goto label1;

     label7:
        return $r7;
    }
    public static org.joda.time.chrono.GJChronology getInstanceUTC()
    {
        org.joda.time.Instant $r0;
        org.joda.time.chrono.GJChronology $r1;
        org.joda.time.DateTimeZone $r2;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r0 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r2, $r0, 4);

        return $r1;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.Instant $r1;
        org.joda.time.DateTimeZone $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        r0 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r2, $r1, $i0);

        return r0;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3;
        org.joda.time.chrono.JulianChronology $r4;
        org.joda.time.chrono.GregorianChronology $r5;
        org.joda.time.Instant $r6;
        long $l0, $l3;
        org.joda.time.Chronology $r7;
        int $i1, $i2;
        java.lang.IllegalArgumentException $r8;
        org.joda.time.DateTimeField $r9, $r11;
        org.joda.time.chrono.GJChronology$CutoverField $r10;
        org.joda.time.chrono.GJChronology$ImpreciseCutoverField $r12;
        org.joda.time.DurationField $r13, $r14;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: java.lang.Object getParam()>();

        $r3 = (java.lang.Object[]) $r2;

        $r2 = $r3[0];

        $r4 = (org.joda.time.chrono.JulianChronology) $r2;

        $r2 = $r3[1];

        $r5 = (org.joda.time.chrono.GregorianChronology) $r2;

        $r2 = $r3[2];

        $r6 = (org.joda.time.Instant) $r2;

        $l0 = virtualinvoke $r6.<org.joda.time.Instant: long getMillis()>();

        r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> = $l0;

        r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> = $r4;

        r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> = $r5;

        r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> = $r6;

        $r7 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r7 == null goto label1;

        return;

     label1:
        $i1 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>();

        $i2 = virtualinvoke $r5.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>();

        if $i1 == $i2 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label2:
        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l3 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l3 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>($l3);

        $l0 = $l0 - $l3;

        r0.<org.joda.time.chrono.GJChronology: long iGapDuration> = $l0;

        virtualinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5);

        $r9 = virtualinvoke $r5.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField millisOfDay()>();

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $i1 = virtualinvoke $r9.<org.joda.time.DateTimeField: int get(long)>($l0);

        if $i1 != 0 goto label3;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfSecond()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfDay()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfMinute()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfDay()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfHour()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfDay()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfDay()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfHalfday()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfDay()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfHalfday()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField halfdayOfDay()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r10;

     label3:
        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField era()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r10;

        $r12 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField year()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r12;

        $r9 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r13 = virtualinvoke $r9.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r13;

        $r12 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfEra()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r13 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r9, $r11, $r13, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r12;

        $r12 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField centuryOfEra()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r12;

        $r9 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r13 = virtualinvoke $r9.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r13;

        $r12 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfCentury()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>;

        $r13 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $r14 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>(r0, $r9, $r11, $r13, $r14, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r12;

        $r12 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField monthOfYear()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r13 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>(r0, $r9, $r11, null, $r13, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r12;

        $r9 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r13 = virtualinvoke $r9.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r13;

        $r12 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyear()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>(r0, $r9, $r11, null, $l0, 1);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r12;

        $r9 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r13 = virtualinvoke $r9.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13;

        $r12 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyearOfCentury()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>;

        $r13 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>;

        $r14 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r12.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>(r0, $r9, $r11, $r13, $r14, $l0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r12;

        $r9 = virtualinvoke $r5.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField year()>();

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l0 = virtualinvoke $r9.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0);

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfYear()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>;

        $r13 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>(r0, $r9, $r11, $r13, $l0, 0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r10;

        $r9 = virtualinvoke $r5.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField weekyear()>();

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l0 = virtualinvoke $r9.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0);

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>;

        $r13 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>(r0, $r9, $r11, $r13, $l0, 1);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r10;

        $r10 = new org.joda.time.chrono.GJChronology$CutoverField;

        $r9 = virtualinvoke $r4.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfMonth()>();

        $r11 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>;

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        specialinvoke $r10.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r9, $r11, $l0);

        $r13 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>;

        $r10.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> = $r13;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r10;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.GJChronology r0, $r2;
        long $l0, $l1;
        java.lang.Object $r1;
        boolean $z0;
        byte $b2;
        int $i3, $i4;
        org.joda.time.DateTimeZone $r3, $r4;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.GJChronology;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.chrono.GJChronology) $r1;

        $l1 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l0 = $r2.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $i3 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        $i4 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        if $i3 != $i4 goto label2;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.GJChronology r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Chronology $r1;
        long $l4, $l5;
        org.joda.time.chrono.GregorianChronology $r2;
        byte $b6;
        org.joda.time.chrono.JulianChronology $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $l4;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l4 = virtualinvoke $r2.<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, $i3);

        $l5 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b6 = $l4 cmp $l5;

        if $b6 >= 0 goto label2;

        $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l4 = virtualinvoke $r3.<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, $i3);

        $l5 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b6 = $l4 cmp $l5;

        if $b6 < 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified date does not exist");

        throw $r4;

     label2:
        return $l4;
    }
    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.GJChronology r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.Chronology $r1;
        long $l7, $l8, $l10;
        org.joda.time.chrono.GregorianChronology $r2;
        byte $b9;
        org.joda.time.chrono.JulianChronology $r3;
        java.lang.IllegalArgumentException $r4;
        org.joda.time.IllegalFieldValueException $r5;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

        return $l7;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

     label2:
        $l7 = virtualinvoke $r2.<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

     label3:
        $l8 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b9 = $l7 cmp $l8;

        if $b9 >= 0 goto label7;

        $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l7 = virtualinvoke $r3.<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

        $l8 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b9 = $l7 cmp $l8;

        if $b9 < 0 goto label7;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified date does not exist");

        throw $r4;

     label4:
        $r5 := @caughtexception;

        if $i1 != 2 goto label5;

        if $i2 == 29 goto label6;

     label5:
        throw $r5;

     label6:
        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l8 = virtualinvoke $r2.<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i0, $i1, 28, $i3, $i4, $i5, $i6);

        $l7 = $l8;

        $l10 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $b9 = $l8 cmp $l10;

        if $b9 < 0 goto label3;

        throw $r5;

     label7:
        return $l7;

        catch org.joda.time.IllegalFieldValueException from label2 to label3 with label4;
    }
    public org.joda.time.Instant getGregorianCutover()
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.Instant r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        return r1;
    }
    public int getMinimumDaysInFirstWeek()
    {
        org.joda.time.chrono.GJChronology r0;
        int $i0;
        org.joda.time.chrono.GregorianChronology $r1;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>();

        return $i0;
    }
    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        return $r2;

     label1:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r2;
    }
    long gregorianToJulianByWeekyear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        long $l0;
        org.joda.time.chrono.JulianChronology $r1;
        org.joda.time.chrono.GregorianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l0 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>($l0, $r2, $r1);

        return $l0;
    }
    long gregorianToJulianByYear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        long $l0;
        org.joda.time.chrono.JulianChronology $r1;
        org.joda.time.chrono.GregorianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $l0 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>($l0, $r2, $r1);

        return $l0;
    }
    public int hashCode()
    {
        org.joda.time.chrono.GJChronology r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.Instant $r3;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = "GJ";

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 * 11;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        $i0 = $i0 + $i1;

        $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        $i1 = virtualinvoke $r3.<org.joda.time.Instant: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    long julianToGregorianByWeekyear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        long $l0;
        org.joda.time.chrono.GregorianChronology $r1;
        org.joda.time.chrono.JulianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l0 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>($l0, $r2, $r1);

        return $l0;
    }
    long julianToGregorianByYear(long)
    {
        org.joda.time.chrono.GJChronology r0;
        long $l0;
        org.joda.time.chrono.GregorianChronology $r1;
        org.joda.time.chrono.JulianChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>;

        $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>;

        $l0 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>($l0, $r2, $r1);

        return $l0;
    }
    public java.lang.String toString()
    {
        org.joda.time.chrono.GJChronology r0;
        java.lang.StringBuffer $r1;
        org.joda.time.DateTimeZone $r2;
        java.lang.String $r3;
        long $l0, $l1;
        org.joda.time.Instant $r4;
        byte $b2;
        org.joda.time.Chronology $r5;
        org.joda.time.DateTimeField $r6;
        org.joda.time.format.DateTimeFormatter $r7;
        int $i3;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(60);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("GJChronology");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $r4 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>;

        $l1 = virtualinvoke $r4.<org.joda.time.Instant: long getMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",cutover=");

        $r5 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        $l0 = virtualinvoke $r6.<org.joda.time.DateTimeField: long remainder(long)>($l0);

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label4;

        $r7 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>();

     label1:
        $r5 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>();

        $r7 = virtualinvoke $r7.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>($r5);

        $l0 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>;

        virtualinvoke $r7.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>($r1, $l0);

     label2:
        $i3 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        if $i3 == 4 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",mdfw=");

        $i3 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label4:
        $r7 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>();

        goto label1;
    }
    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r2);

        return $r1;
    }
    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.GJChronology r0;
        org.joda.time.DateTimeZone $r1, $r2;
        org.joda.time.Instant $r3;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 != $r2 goto label2;

        return r0;

     label2:
        $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>();

        r0 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r1, $r3, $i0);

        return r0;
    }
