org.joda.time.chrono.GJChronology$CutoverField extends org.joda.time.field.BaseDateTimeField
private static final long serialVersionUID
final boolean iConvertByWeekyear
final long iCutover
protected org.joda.time.DurationField iDurationField
final org.joda.time.DateTimeField iGregorianField
final org.joda.time.DateTimeField iJulianField
protected org.joda.time.DurationField iRangeDurationField
final org.joda.time.chrono.GJChronology this$0
    void <init>(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.chrono.GJChronology $r1;
        org.joda.time.DateTimeField $r2, $r3;
        long $l0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.chrono.GJChronology;

        $r2 := @parameter1: org.joda.time.DateTimeField;

        $r3 := @parameter2: org.joda.time.DateTimeField;

        $l0 := @parameter3: long;

        specialinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>($r1, $r2, $r3, $l0, 0);

        return;
    }
    void <init>(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long, boolean)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.chrono.GJChronology $r1;
        org.joda.time.DateTimeField $r2, $r3;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.chrono.GJChronology;

        $r2 := @parameter1: org.joda.time.DateTimeField;

        $r3 := @parameter2: org.joda.time.DateTimeField;

        $l0 := @parameter3: long;

        $z0 := @parameter4: boolean;

        specialinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>($r1, $r2, $r3, null, $l0, $z0);

        return;
    }
    void <init>(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, long, boolean)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.chrono.GJChronology $r1;
        org.joda.time.DateTimeField $r2, $r3;
        long $l0;
        boolean $z0;
        org.joda.time.DurationField $r4, $r6;
        org.joda.time.DateTimeFieldType $r5;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.chrono.GJChronology;

        $r2 := @parameter1: org.joda.time.DateTimeField;

        $r3 := @parameter2: org.joda.time.DateTimeField;

        $r4 := @parameter3: org.joda.time.DurationField;

        $l0 := @parameter4: long;

        $z0 := @parameter5: boolean;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0> = $r1;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke r0.<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>($r5);

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField> = $r2;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField> = $r3;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover> = $l0;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear> = $z0;

        $r6 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField> = $r6;

        if $r4 != null goto label1;

        $r6 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r4 = $r6;

        if $r6 != null goto label1;

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

     label1:
        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> = $r4;

        return;
    }
    public long add(long, int)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0;
        int $i1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>($l0, $i1);

        return $l0;
    }
    public long add(long, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,long)>($l0, $l1);

        return $l0;
    }
    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i3, $i4;
        int[] $r2;
        boolean $z0;
        long $l2;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.chrono.GJChronology $r4;
        org.joda.time.DateTimeField $r5;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $i1 := @parameter3: int;

        if $i1 != 0 goto label1;

        return $r2;

     label1:
        $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>($r1);

        if $z0 == 0 goto label4;

        $l2 = 0L;

        $i0 = 0;

        $i3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

     label2:
        if $i0 >= $i3 goto label3;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4);

        $i4 = $r2[$i0];

        $l2 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>($l2, $i4);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $l2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>($l2, $i1);

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $r2 = virtualinvoke $r4.<org.joda.time.chrono.GJChronology: int[] get(org.joda.time.ReadablePartial,long)>($r1, $l2);

        return $r2;

     label4:
        $r2 = specialinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i0, $r2, $i1);

        return $r2;
    }
    public int get(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1;
        int $i3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i3;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i3;
    }
    public java.lang.String getAsShortText(int, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        int $i0;
        java.util.Locale $r1;
        java.lang.String $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Locale;

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i0, $r1);

        return $r2;
    }
    public java.lang.String getAsShortText(long, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        java.util.Locale $r1;
        byte $b2;
        org.joda.time.DateTimeField $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>($l0, $r1);

        return $r3;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>($l0, $r1);

        return $r3;
    }
    public java.lang.String getAsText(int, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        int $i0;
        java.util.Locale $r1;
        java.lang.String $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Locale;

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i0, $r1);

        return $r2;
    }
    public java.lang.String getAsText(long, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        java.util.Locale $r1;
        byte $b2;
        org.joda.time.DateTimeField $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>($l0, $r1);

        return $r3;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>($l0, $r1);

        return $r3;
    }
    public int getDifference(long, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        int $i2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getDifference(long,long)>($l0, $l1);

        return $i2;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long getDifferenceAsLong(long,long)>($l0, $l1);

        return $l0;
    }
    public org.joda.time.DurationField getDurationField()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField>;

        return r1;
    }
    public int getLeapAmount(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1;
        int $i3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getLeapAmount(long)>($l0);

        return $i3;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getLeapAmount(long)>($l0);

        return $i3;
    }
    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DurationField $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r1 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>();

        return $r1;
    }
    public int getMaximumShortTextLength(java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        java.util.Locale $r1;
        org.joda.time.DateTimeField $r2;
        int $i0, $i1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>($r1);

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>($r1);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        return $i0;
    }
    public int getMaximumTextLength(java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        java.util.Locale $r1;
        org.joda.time.DateTimeField $r2;
        int $i0, $i1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>($r1);

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>($r1);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        return $i0;
    }
    public int getMaximumValue()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        int $i0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        return $i0;
    }
    public int getMaximumValue(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1, $r2;
        int $i3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue(long)>($l0);

        return $i3;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i3);

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label2;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l0, -1);

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

     label2:
        return $i3;
    }
    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial $r1;
        org.joda.time.chrono.GJChronology $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>();

        $l0 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: long set(org.joda.time.ReadablePartial,long)>($r1, 0L);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>($l0);

        return $i1;
    }
    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial $r1;
        int[] $r2;
        org.joda.time.chrono.GJChronology $r3;
        int $i0, $i2, $i3, $i4;
        long $l1;
        org.joda.time.DateTimeFieldType $r4;
        org.joda.time.DateTimeField $r5;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: int[];

        $r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>();

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        $l1 = 0L;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $r4 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i2);

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        $i3 = $r2[$i2];

        $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int getMaximumValue(long)>($l1);

        if $i3 > $i4 goto label2;

        $i3 = $r2[$i2];

        $l1 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i3);

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>($l1);

        return $i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        int $i0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        return $i0;
    }
    public int getMinimumValue(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1;
        int $i3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue(long)>($l0);

        return $i3;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i3);

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label2;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

     label2:
        return $i3;
    }
    public int getMinimumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>($r1);

        return $i0;
    }
    public int getMinimumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial $r1;
        int[] $r2;
        int $i0;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: int[];

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        return $i0;
    }
    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField>;

        return r1;
    }
    protected long gregorianToJulian(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0;
        boolean $z0;
        org.joda.time.chrono.GJChronology $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>($l0);

        return $l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>($l0);

        return $l0;
    }
    public boolean isLeap(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLeap(long)>($l0);

        return $z0;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLeap(long)>($l0);

        return $z0;
    }
    public boolean isLenient()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        return 0;
    }
    protected long julianToGregorian(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0;
        boolean $z0;
        org.joda.time.chrono.GJChronology $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>($l0);

        return $l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>($l0);

        return $l0;
    }
    public long roundCeiling(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1, $l3;
        byte $b2;
        org.joda.time.DateTimeField $r1;
        org.joda.time.chrono.GJChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0);

        return $l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0);

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label2;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2);

        $l3 = $l0 - $l1;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l3 cmp $l1;

        if $b2 < 0 goto label2;

        $l0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>($l0);

     label2:
        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1, $l3;
        byte $b2;
        org.joda.time.DateTimeField $r1;
        org.joda.time.chrono.GJChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label2;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2);

        $l3 = $l1 + $l0;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l3 cmp $l1;

        if $b2 >= 0 goto label2;

        $l0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>($l0);

        return $l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

     label2:
        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l2, $l4, $l5;
        int $i1, $i6;
        byte $b3;
        org.joda.time.DateTimeField $r1;
        org.joda.time.chrono.GJChronology $r2;
        org.joda.time.IllegalFieldValueException $r3;
        org.joda.time.DateTimeFieldType $r4;
        java.lang.Integer $r5;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = $l0 cmp $l2;

        if $b3 < 0 goto label2;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $l2 = $l0;

        $l4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = $l0 cmp $l4;

        if $b3 >= 0 goto label4;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l4 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2);

        $l4 = $l4 + $l0;

        $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = $l4 cmp $l5;

        if $b3 >= 0 goto label1;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>($l0);

     label1:
        $i6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>($l2);

        if $i6 == $i1 goto label5;

        $r3 = new org.joda.time.IllegalFieldValueException;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r3.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, null, null);

        throw $r3;

     label2:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $l2 = $l0;

        $l4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = $l0 cmp $l4;

        if $b3 < 0 goto label6;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l4 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2);

        $l4 = $l0 - $l4;

        $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = $l4 cmp $l5;

        if $b3 < 0 goto label3;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>($l0);

     label3:
        $i6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>($l2);

        if $i6 == $i1 goto label7;

        $r3 = new org.joda.time.IllegalFieldValueException;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r3.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, null, null);

        throw $r3;

     label4:
        return $l0;

     label5:
        return $l2;

     label6:
        return $l0;

     label7:
        return $l2;
    }
    public long set(long, java.lang.String, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l1, $l3;
        java.lang.String $r1;
        java.util.Locale $r2;
        byte $b2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.chrono.GJChronology $r4;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.Locale;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>($l0, $r1, $r2);

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label2;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r4);

        $l1 = $l1 + $l0;

        $l3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l1 cmp $l3;

        if $b2 >= 0 goto label2;

        $l0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>($l0);

        return $l0;

     label1:
        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>($l0, $r1, $r2);

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label2;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r4);

        $l1 = $l0 - $l1;

        $l3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = $l1 cmp $l3;

        if $b2 < 0 goto label2;

        $l0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>($l0);

     label2:
        return $l0;
    }
