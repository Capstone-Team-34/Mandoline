org.joda.time.chrono.BasicFixedMonthChronology extends org.joda.time.chrono.BasicChronology
static final long MILLIS_PER_MONTH
static final long MILLIS_PER_YEAR
static final int MONTH_LENGTH
private static final long serialVersionUID
    void <init>(org.joda.time.Chronology, java.lang.Object, int)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        org.joda.time.Chronology $r1;
        java.lang.Object $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>($r1, $r2, $i0);

        return;
    }
    long getAverageMillisPerMonth()
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        return 2592000000L;
    }
    long getAverageMillisPerYear()
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        return 31557600000L;
    }
    long getAverageMillisPerYearDividedByTwo()
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        return 15778800000L;
    }
    int getDayOfMonth(long)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfYear(long)>($l0);

        $i1 = $i1 + -1;

        $i1 = $i1 % 30;

        $i1 = $i1 + 1;

        return $i1;
    }
    int getDaysInMonthMax()
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        return 30;
    }
    int getDaysInMonthMax(int)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $i0 := @parameter0: int;

        if $i0 == 13 goto label1;

        return 30;

     label1:
        return 6;
    }
    int getDaysInYearMonth(int, int)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 == 13 goto label1;

        return 30;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>($i0);

        if $z0 == 0 goto label2;

        return 6;

     label2:
        return 5;
    }
    int getMaxMonth()
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        return 13;
    }
    int getMonthOfYear(long)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfYear(long)>($l0);

        $i1 = $i1 + -1;

        $i1 = $i1 / 30;

        $i1 = $i1 + 1;

        return $i1;
    }
    int getMonthOfYear(long, int)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>($i1);

        $l0 = $l0 - $l2;

        $l0 = $l0 / 2592000000L;

        $i1 = (int) $l0;

        $i1 = $i1 + 1;

        return $i1;
    }
    long getTotalMillisByYearMonth(int, int)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i1 + -1;

        $l2 = (long) $i0;

        $l2 = $l2 * 2592000000L;

        return $l2;
    }
    long getYearDifference(long, long)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        long $l0, $l1, $l4;
        int $i2, $i3;
        byte $b5;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getYear(long)>($l0);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getYear(long)>($l1);

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>($i2);

        $l0 = $l0 - $l4;

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMillis(int)>($i3);

        $l1 = $l1 - $l4;

        $i2 = $i2 - $i3;

        $b5 = $l0 cmp $l1;

        if $b5 >= 0 goto label1;

        $i2 = $i2 + -1;

     label1:
        $l0 = (long) $i2;

        return $l0;
    }
    boolean isLeapYear(int)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $i0 := @parameter0: int;

        $i0 = $i0 & 3;

        if $i0 != 3 goto label1;

        return 1;

     label1:
        return 0;
    }
    long setYear(long, int)
    {
        org.joda.time.chrono.BasicFixedMonthChronology r0;
        long $l0, $l5;
        int $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicFixedMonthChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getYear(long)>($l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfYear(long,int)>($l0, $i2);

        $i3 = $i2;

        $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getMillisOfDay(long)>($l0);

        if $i2 <= 365 goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>($i1);

        if $z0 != 0 goto label1;

        $i3 = $i2 + -1;

     label1:
        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getYearMonthDayMillis(int,int,int)>($i1, 1, $i3);

        $l5 = (long) $i4;

        $l0 = $l5 + $l0;

        return $l0;
    }
