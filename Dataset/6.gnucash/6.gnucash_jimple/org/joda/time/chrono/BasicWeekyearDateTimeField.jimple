org.joda.time.chrono.BasicWeekyearDateTimeField extends org.joda.time.field.ImpreciseDateTimeField
private static final long WEEK_53
private static final long serialVersionUID
private final org.joda.time.chrono.BasicChronology iChronology
    void <init>(org.joda.time.chrono.BasicChronology)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeFieldType $r2;
        long $l0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r1 := @parameter0: org.joda.time.chrono.BasicChronology;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYear()>();

        specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>($r2, $l0);

        r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> = $r1;

        return;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.chrono.BasicChronology $r2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekyear()>();

        return $r1;
    }
    public long add(long, int)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        int $i0, $i2;
        long $l1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        return $l1;

     label1:
        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>($l1);

        $i0 = $i2 + $i0;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>($l1, $i0);

        return $l1;
    }
    public long add(long, long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>($l0, $i2);

        return $l0;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>($l0, $i1);

        return $l0;
    }
    public int get(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0;
        int $i1;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>($l0);

        return $i1;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0, $l1;
        byte $b2;
        int $i3, $i4, $i5;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int getDifference(long,long)>($l1, $l0);

        $i3 = neg $i3;

        $l0 = (long) $i3;

        return $l0;

     label1:
        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>($l0);

        $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>($l1);

        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>($l0);

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>($l1);

        $b2 = $l1 cmp 31449600000L;

        if $b2 < 0 goto label4;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i5 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i3);

        if $i5 > 52 goto label4;

        $l1 = $l1 - 604800000L;

     label2:
        $i3 = $i3 - $i4;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label3;

        $i3 = $i3 + -1;

     label3:
        $l0 = (long) $i3;

        return $l0;

     label4:
        goto label2;
    }
    public int getLeapAmount(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0;
        org.joda.time.chrono.BasicChronology $r1, $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>($l0);

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i1);

        $i1 = $i1 + -52;

        return $i1;
    }
    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.DurationField $r1;
        org.joda.time.chrono.BasicChronology $r2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>();

        return $r1;
    }
    public int getMaximumValue()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        int $i0;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        return $i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        int $i0;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        return $i0;
    }
    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        return null;
    }
    public boolean isLeap(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0;
        org.joda.time.chrono.BasicChronology $r1, $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>($l0);

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i1);

        if $i1 <= 52 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isLenient()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        return 0;
    }
    public long remainder(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0, $l1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>($l0);

        $l0 = $l0 - $l1;

        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long $l0, $l2;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeField $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>($l0);

        if $i1 <= 1 goto label1;

        $i1 = $i1 + -1;

        $l2 = (long) $i1;

        $l2 = $l2 * 604800000L;

        $l0 = $l0 - $l2;

     label1:
        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        int $i0, $i2, $i3, $i4, $i5;
        long $l1, $l6;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i2, $i3, $i4);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>($l1);

        if $i3 != $i0 goto label1;

        return $l1;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>($l1);

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i3);

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i5 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i0);

        $i3 = $i5;

        if $i5 >= $i4 goto label5;

     label2:
        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>($l1);

        if $i4 <= $i3 goto label7;

     label3:
        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l6 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>($l1, $i0);

        $l1 = $l6;

        $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>($l6);

        if $i4 >= $i0 goto label6;

        $l1 = $l6 + 604800000L;

     label4:
        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>($l1);

        $i0 = $i3 - $i0;

        $l6 = (long) $i0;

        $l6 = $l6 * 604800000L;

        $l1 = $l6 + $l1;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i2);

        return $l1;

     label5:
        $i3 = $i4;

        goto label2;

     label6:
        if $i4 <= $i0 goto label4;

        $l1 = $l6 - 604800000L;

        goto label4;

     label7:
        $i3 = $i4;

        goto label3;
    }
