org.joda.time.chrono.ISOChronology extends org.joda.time.chrono.AssembledChronology
private static final org.joda.time.chrono.ISOChronology INSTANCE_UTC
private static final java.util.concurrent.ConcurrentHashMap cCache
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.chrono.ISOChronology $r0;
        org.joda.time.chrono.GregorianChronology $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.joda.time.DateTimeZone $r3;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.ISOChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r2;

        $r0 = new org.joda.time.chrono.ISOChronology;

        $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>();

        specialinvoke $r0.<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>($r1);

        <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> = $r0;

        $r2 = <org.joda.time.chrono.ISOChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r0);

        return;
    }
    private void <init>(org.joda.time.Chronology)
    {
        org.joda.time.chrono.ISOChronology r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r1, null);

        return;
    }
    public static org.joda.time.chrono.ISOChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.ISOChronology $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0);

        return $r1;
    }
    public static org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ISOChronology $r0, $r4;
        org.joda.time.DateTimeZone $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        org.joda.time.chrono.ZonedChronology $r5;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = <org.joda.time.chrono.ISOChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r0 = (org.joda.time.chrono.ISOChronology) $r3;

        if $r0 != null goto label2;

        $r0 = new org.joda.time.chrono.ISOChronology;

        $r4 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        $r5 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r4, $r1);

        specialinvoke $r0.<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>($r5);

        $r2 = <org.joda.time.chrono.ISOChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r0);

        $r4 = (org.joda.time.chrono.ISOChronology) $r3;

        if $r4 == null goto label2;

        return $r4;

     label2:
        return $r0;
    }
    public static org.joda.time.chrono.ISOChronology getInstanceUTC()
    {
        org.joda.time.chrono.ISOChronology r0;

        r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        return r0;
    }
    private java.lang.Object writeReplace()
    {
        org.joda.time.chrono.ISOChronology r0;
        org.joda.time.chrono.ISOChronology$Stub $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        $r1 = new org.joda.time.chrono.ISOChronology$Stub;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        specialinvoke $r1.<org.joda.time.chrono.ISOChronology$Stub: void <init>(org.joda.time.DateTimeZone)>($r2);

        return $r1;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.ISOChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeZone $r3, $r4;
        org.joda.time.field.DividedDateTimeField $r5;
        org.joda.time.DateTimeField $r6;
        org.joda.time.DateTimeFieldType $r7;
        org.joda.time.DurationField $r8;
        org.joda.time.field.RemainderDateTimeField $r9;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology getBase()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r3 != $r4 goto label1;

        $r5 = new org.joda.time.field.DividedDateTimeField;

        $r6 = <org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField INSTANCE>;

        $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        specialinvoke $r5.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r6, $r7, 100);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r5;

        $r6 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r8 = virtualinvoke $r6.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r8;

        $r9 = new org.joda.time.field.RemainderDateTimeField;

        $r6 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r5 = (org.joda.time.field.DividedDateTimeField) $r6;

        $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        specialinvoke $r9.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>($r5, $r7);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r9;

        $r9 = new org.joda.time.field.RemainderDateTimeField;

        $r6 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r5 = (org.joda.time.field.DividedDateTimeField) $r6;

        $r8 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>;

        $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r9.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>($r5, $r8, $r7);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r9;

     label1:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.ISOChronology r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.DateTimeZone $r3, $r4;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.ISOChronology;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.chrono.ISOChronology) $r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = virtualinvoke $r2.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label2:
        return 0;
    }
    public int hashCode()
    {
        org.joda.time.chrono.ISOChronology r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        $r1 = "ISO";

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 * 11;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.joda.time.chrono.ISOChronology r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ISOChronology");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        return "ISOChronology";
    }
    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.ISOChronology r0;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>;

        return r0;
    }
    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ISOChronology r0;
        org.joda.time.DateTimeZone $r1, $r2;

        r0 := @this: org.joda.time.chrono.ISOChronology;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 != $r2 goto label2;

        return r0;

     label2:
        r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        return r0;
    }
