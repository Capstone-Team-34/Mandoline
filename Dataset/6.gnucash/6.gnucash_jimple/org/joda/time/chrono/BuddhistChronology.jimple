org.joda.time.chrono.BuddhistChronology extends org.joda.time.chrono.AssembledChronology
public static final int BE
private static final int BUDDHIST_OFFSET
private static final org.joda.time.DateTimeField ERA_FIELD
private static final org.joda.time.chrono.BuddhistChronology INSTANCE_UTC
private static final java.util.concurrent.ConcurrentHashMap cCache
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.chrono.BuddhistChronology $r0;
        org.joda.time.chrono.BasicSingleEraDateTimeField $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.joda.time.DateTimeZone $r3;

        $r1 = new org.joda.time.chrono.BasicSingleEraDateTimeField;

        specialinvoke $r1.<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>("BE");

        <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.BuddhistChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r2;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r0 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r3);

        <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC> = $r0;

        return;
    }
    private void <init>(org.joda.time.Chronology, java.lang.Object)
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.Chronology $r1;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r1, $r2);

        return;
    }
    public static org.joda.time.chrono.BuddhistChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.BuddhistChronology $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r0);

        return $r1;
    }
    public static org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.BuddhistChronology $r0, $r4;
        org.joda.time.DateTimeZone $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        org.joda.time.chrono.GJChronology $r5;
        org.joda.time.DateTime $r6;
        org.joda.time.chrono.LimitChronology $r7;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = <org.joda.time.chrono.BuddhistChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.joda.time.chrono.BuddhistChronology) $r3;

        if $r4 != null goto label2;

        $r0 = new org.joda.time.chrono.BuddhistChronology;

        $r5 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>($r1, null);

        specialinvoke $r0.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r5, null);

        $r6 = new org.joda.time.DateTime;

        specialinvoke $r6.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, $r0);

        $r4 = new org.joda.time.chrono.BuddhistChronology;

        $r7 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r0, $r6, null);

        specialinvoke $r4.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r7, "");

        $r2 = <org.joda.time.chrono.BuddhistChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r4);

        $r0 = (org.joda.time.chrono.BuddhistChronology) $r3;

        if $r0 == null goto label2;

        return $r0;

     label2:
        return $r4;
    }
    public static org.joda.time.chrono.BuddhistChronology getInstanceUTC()
    {
        org.joda.time.chrono.BuddhistChronology r0;

        r0 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC>;

        return r0;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology getBase()>();

        if $r1 != null goto label1;

        r0 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstanceUTC()>();

        return r0;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        r0 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r2);

        return r0;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        java.lang.Object $r2;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.field.UnsupportedDurationField $r4;
        org.joda.time.DateTimeField $r5;
        org.joda.time.field.OffsetDateTimeField $r6;
        org.joda.time.field.SkipUndoDateTimeField $r7;
        org.joda.time.field.DelegatedDateTimeField $r8;
        org.joda.time.DurationField $r9;
        org.joda.time.DateTimeFieldType $r10;
        org.joda.time.field.DividedDateTimeField $r11;
        org.joda.time.field.RemainderDateTimeField $r12;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: java.lang.Object getParam()>();

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>();

        $r4 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r3);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r4;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r7 = new org.joda.time.field.SkipUndoDateTimeField;

        specialinvoke $r7.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r5);

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r7, 543);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r6;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r8 = new org.joda.time.field.DelegatedDateTimeField;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r9 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>;

        $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        specialinvoke $r8.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>($r5, $r9, $r10);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r8;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r7 = new org.joda.time.field.SkipUndoDateTimeField;

        specialinvoke $r7.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r5);

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r7, 543);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r6;

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r5, 99);

        $r11 = new org.joda.time.field.DividedDateTimeField;

        $r9 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>;

        $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        specialinvoke $r11.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>($r6, $r9, $r10, 100);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r11;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r9 = virtualinvoke $r5.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r9;

        $r12 = new org.joda.time.field.RemainderDateTimeField;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r11 = (org.joda.time.field.DividedDateTimeField) $r5;

        specialinvoke $r12.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r11);

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r12, $r10, 1);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r6;

        $r12 = new org.joda.time.field.RemainderDateTimeField;

        $r5 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r9 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r12.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>($r5, $r9, $r10, 100);

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r12, $r10, 1);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r6;

        $r5 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r5;

     label1:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.BuddhistChronology r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.DateTimeZone $r3, $r4;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.BuddhistChronology;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.chrono.BuddhistChronology) $r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = virtualinvoke $r2.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label2:
        return 0;
    }
    public int hashCode()
    {
        org.joda.time.chrono.BuddhistChronology r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 = "Buddhist";

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 * 11;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BuddhistChronology");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        return "BuddhistChronology";
    }
    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.BuddhistChronology r0;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r0 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC>;

        return r0;
    }
    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.DateTimeZone $r1, $r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 != $r2 goto label2;

        return r0;

     label2:
        r0 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        return r0;
    }
