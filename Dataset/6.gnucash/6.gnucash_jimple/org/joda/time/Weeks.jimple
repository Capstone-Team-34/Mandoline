org.joda.time.Weeks extends org.joda.time.base.BaseSingleFieldPeriod
public static final org.joda.time.Weeks MAX_VALUE
public static final org.joda.time.Weeks MIN_VALUE
public static final org.joda.time.Weeks ONE
private static final org.joda.time.format.PeriodFormatter PARSER
public static final org.joda.time.Weeks THREE
public static final org.joda.time.Weeks TWO
public static final org.joda.time.Weeks ZERO
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.Weeks $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.PeriodType $r2;

        $r0 = new org.joda.time.Weeks;

        specialinvoke $r0.<org.joda.time.Weeks: void <init>(int)>(0);

        <org.joda.time.Weeks: org.joda.time.Weeks ZERO> = $r0;

        $r0 = new org.joda.time.Weeks;

        specialinvoke $r0.<org.joda.time.Weeks: void <init>(int)>(1);

        <org.joda.time.Weeks: org.joda.time.Weeks ONE> = $r0;

        $r0 = new org.joda.time.Weeks;

        specialinvoke $r0.<org.joda.time.Weeks: void <init>(int)>(2);

        <org.joda.time.Weeks: org.joda.time.Weeks TWO> = $r0;

        $r0 = new org.joda.time.Weeks;

        specialinvoke $r0.<org.joda.time.Weeks: void <init>(int)>(3);

        <org.joda.time.Weeks: org.joda.time.Weeks THREE> = $r0;

        $r0 = new org.joda.time.Weeks;

        specialinvoke $r0.<org.joda.time.Weeks: void <init>(int)>(2147483647);

        <org.joda.time.Weeks: org.joda.time.Weeks MAX_VALUE> = $r0;

        $r0 = new org.joda.time.Weeks;

        specialinvoke $r0.<org.joda.time.Weeks: void <init>(int)>(-2147483648);

        <org.joda.time.Weeks: org.joda.time.Weeks MIN_VALUE> = $r0;

        $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>();

        $r1 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r2);

        <org.joda.time.Weeks: org.joda.time.format.PeriodFormatter PARSER> = $r1;

        return;
    }
    private void <init>(int)
    {
        org.joda.time.Weeks r0;
        int $i0;

        r0 := @this: org.joda.time.Weeks;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>($i0);

        return;
    }
    public static org.joda.time.Weeks parseWeeks(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.Period $r2;
        int $i0;
        org.joda.time.Weeks $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r3 = <org.joda.time.Weeks: org.joda.time.Weeks ZERO>;

        return $r3;

     label1:
        $r1 = <org.joda.time.Weeks: org.joda.time.format.PeriodFormatter PARSER>;

        $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r0);

        $i0 = virtualinvoke $r2.<org.joda.time.Period: int getWeeks()>();

        $r3 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return $r3;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.Weeks r0;
        int $i0;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        r0 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return r0;
    }
    public static org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod $r0;
        int $i0;
        org.joda.time.Weeks $r1;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>($r0, 604800000L);

        $r1 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return $r1;
    }
    public static org.joda.time.Weeks weeks(int)
    {
        int $i0;
        org.joda.time.Weeks $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case -2147483648: goto label7;
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 2147483647: goto label6;
            default: goto label1;
        };

     label1:
        $r0 = new org.joda.time.Weeks;

        specialinvoke $r0.<org.joda.time.Weeks: void <init>(int)>($i0);

        return $r0;

     label2:
        $r0 = <org.joda.time.Weeks: org.joda.time.Weeks ZERO>;

        return $r0;

     label3:
        $r0 = <org.joda.time.Weeks: org.joda.time.Weeks ONE>;

        return $r0;

     label4:
        $r0 = <org.joda.time.Weeks: org.joda.time.Weeks TWO>;

        return $r0;

     label5:
        $r0 = <org.joda.time.Weeks: org.joda.time.Weeks THREE>;

        return $r0;

     label6:
        $r0 = <org.joda.time.Weeks: org.joda.time.Weeks MAX_VALUE>;

        return $r0;

     label7:
        $r0 = <org.joda.time.Weeks: org.joda.time.Weeks MIN_VALUE>;

        return $r0;
    }
    public static org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant $r0, $r1;
        org.joda.time.DurationFieldType $r2;
        int $i0;
        org.joda.time.Weeks $r3;

        $r0 := @parameter0: org.joda.time.ReadableInstant;

        $r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r0, $r1, $r2);

        $r3 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return $r3;
    }
    public static org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial $r0, $r1;
        boolean $z0;
        org.joda.time.Chronology $r2;
        org.joda.time.DurationField $r3;
        org.joda.time.LocalDate $r4;
        long $l0, $l1;
        int $i2;
        org.joda.time.Weeks $r5;

        $r0 := @parameter0: org.joda.time.ReadablePartial;

        $r1 := @parameter1: org.joda.time.ReadablePartial;

        $z0 = $r0 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $r4 = (org.joda.time.LocalDate) $r1;

        $l0 = virtualinvoke $r4.<org.joda.time.LocalDate: long getLocalMillis()>();

        $r4 = (org.joda.time.LocalDate) $r0;

        $l1 = virtualinvoke $r4.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i2 = virtualinvoke $r3.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l1);

        $r5 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i2);

        return $r5;

     label1:
        $r5 = <org.joda.time.Weeks: org.joda.time.Weeks ZERO>;

        $i2 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>($r0, $r1, $r5);

        $r5 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i2);

        return $r5;
    }
    public static org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)
    {
        org.joda.time.ReadableInterval $r0;
        org.joda.time.DateTime $r1, $r2;
        org.joda.time.DurationFieldType $r3;
        int $i0;
        org.joda.time.Weeks $r4;

        $r0 := @parameter0: org.joda.time.ReadableInterval;

        if $r0 != null goto label1;

        $r4 = <org.joda.time.Weeks: org.joda.time.Weeks ZERO>;

        return $r4;

     label1:
        $r1 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>();

        $r2 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getEnd()>();

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r1, $r2, $r3);

        $r4 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return $r4;
    }
    public org.joda.time.Weeks dividedBy(int)
    {
        int $i0, $i1;
        org.joda.time.Weeks r0;

        r0 := @this: org.joda.time.Weeks;

        $i0 := @parameter0: int;

        if $i0 != 1 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = $i1 / $i0;

        r0 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return r0;
    }
    public org.joda.time.DurationFieldType getFieldType()
    {
        org.joda.time.Weeks r0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.Weeks;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        return $r1;
    }
    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.Weeks r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Weeks;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>();

        return $r1;
    }
    public int getWeeks()
    {
        org.joda.time.Weeks r0;
        int $i0;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        return $i0;
    }
    public boolean isGreaterThan(org.joda.time.Weeks)
    {
        org.joda.time.Weeks r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Weeks;

        $r1 := @parameter0: org.joda.time.Weeks;

        if $r1 != null goto label2;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i1 = virtualinvoke $r1.<org.joda.time.Weeks: int getValue()>();

        if $i0 > $i1 goto label3;

        return 0;

     label3:
        return 1;
    }
    public boolean isLessThan(org.joda.time.Weeks)
    {
        org.joda.time.Weeks r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Weeks;

        $r1 := @parameter0: org.joda.time.Weeks;

        if $r1 != null goto label2;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i1 = virtualinvoke $r1.<org.joda.time.Weeks: int getValue()>();

        if $i0 < $i1 goto label3;

        return 0;

     label3:
        return 1;
    }
    public org.joda.time.Weeks minus(int)
    {
        org.joda.time.Weeks r0;
        int $i0;

        r0 := @this: org.joda.time.Weeks;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>($i0);

        return r0;
    }
    public org.joda.time.Weeks minus(org.joda.time.Weeks)
    {
        org.joda.time.Weeks $r0, r1;
        int $i0;

        r1 := @this: org.joda.time.Weeks;

        $r0 := @parameter0: org.joda.time.Weeks;

        if $r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke $r0.<org.joda.time.Weeks: int getValue()>();

        r1 = virtualinvoke r1.<org.joda.time.Weeks: org.joda.time.Weeks minus(int)>($i0);

        return r1;
    }
    public org.joda.time.Weeks multipliedBy(int)
    {
        org.joda.time.Weeks r0;
        int $i0, $i1;

        r0 := @this: org.joda.time.Weeks;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i1, $i0);

        r0 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return r0;
    }
    public org.joda.time.Weeks negated()
    {
        org.joda.time.Weeks r0;
        int $i0;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return r0;
    }
    public org.joda.time.Weeks plus(int)
    {
        int $i0, $i1;
        org.joda.time.Weeks r0;

        r0 := @this: org.joda.time.Weeks;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, $i0);

        r0 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return r0;
    }
    public org.joda.time.Weeks plus(org.joda.time.Weeks)
    {
        org.joda.time.Weeks $r0, r1;
        int $i0;

        r1 := @this: org.joda.time.Weeks;

        $r0 := @parameter0: org.joda.time.Weeks;

        if $r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke $r0.<org.joda.time.Weeks: int getValue()>();

        r1 = virtualinvoke r1.<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>($i0);

        return r1;
    }
    public org.joda.time.Days toStandardDays()
    {
        org.joda.time.Weeks r0;
        int $i0;
        org.joda.time.Days $r1;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 7);

        $r1 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return $r1;
    }
    public org.joda.time.Duration toStandardDuration()
    {
        org.joda.time.Weeks r0;
        org.joda.time.Duration $r1;
        int $i0;
        long $l1;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $l1 = (long) $i0;

        $r1 = new org.joda.time.Duration;

        $l1 = $l1 * 604800000L;

        specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>($l1);

        return $r1;
    }
    public org.joda.time.Hours toStandardHours()
    {
        org.joda.time.Weeks r0;
        int $i0;
        org.joda.time.Hours $r1;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 168);

        $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i0);

        return $r1;
    }
    public org.joda.time.Minutes toStandardMinutes()
    {
        org.joda.time.Weeks r0;
        int $i0;
        org.joda.time.Minutes $r1;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 10080);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i0);

        return $r1;
    }
    public org.joda.time.Seconds toStandardSeconds()
    {
        org.joda.time.Weeks r0;
        int $i0;
        org.joda.time.Seconds $r1;

        r0 := @this: org.joda.time.Weeks;

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 604800);

        $r1 = staticinvoke <org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>($i0);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.joda.time.Weeks r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.Weeks;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P");

        $i0 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("W");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
