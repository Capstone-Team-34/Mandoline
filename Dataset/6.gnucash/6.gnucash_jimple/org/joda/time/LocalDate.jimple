org.joda.time.LocalDate extends org.joda.time.base.BaseLocal implements org.joda.time.ReadablePartial java.io.Serializable
private static final java.util.Set DATE_DURATION_TYPES
private static final int DAY_OF_MONTH
private static final int MONTH_OF_YEAR
private static final int YEAR
private static final long serialVersionUID
private final org.joda.time.Chronology iChronology
private transient int iHash
private final long iLocalMillis
    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.Set $r1;
        org.joda.time.DurationFieldType $r2;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES> = $r0;

        $r1 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r1 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r1 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r1 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r1 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r1 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r1 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }
    public void <init>()
    {
        org.joda.time.LocalDate r0;
        long $l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalDate;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(int, int, int)
    {
        org.joda.time.LocalDate r0;
        int $i0, $i1, $i2;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke r0.<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $r1);

        return;
    }
    public void <init>(int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.LocalDate r0;
        int $i0, $i1, $i2;
        org.joda.time.Chronology $r1;
        long $l3;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        $r1 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $l3 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, 0);

        r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> = $r1;

        r0.<org.joda.time.LocalDate: long iLocalMillis> = $l3;

        return;
    }
    public void <init>(long)
    {
        org.joda.time.LocalDate r0;
        long $l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalDate;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.LocalDate r0;
        long $l0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2, $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.LocalDate;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>($r3, $l0);

        $r1 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r4 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke $r4.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        r0.<org.joda.time.LocalDate: long iLocalMillis> = $l0;

        r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> = $r1;

        return;
    }
    public void <init>(long, org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        long $l0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.LocalDate;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        specialinvoke r0.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.joda.time.LocalDate r0;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>($r1, null);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.LocalDate r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2, $r5;
        org.joda.time.convert.ConverterManager $r3;
        org.joda.time.convert.PartialConverter $r4;
        org.joda.time.format.DateTimeFormatter $r6;
        int[] $r7;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>($r1);

        $r2 = interfaceinvoke $r4.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> = $r5;

        $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>();

        $r7 = interfaceinvoke $r4.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r0, $r1, $r2, $r6);

        $r2 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $i0 = $r7[0];

        $i1 = $r7[1];

        $i2 = $r7[2];

        $l3 = virtualinvoke $r2.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, 0);

        r0.<org.joda.time.LocalDate: long iLocalMillis> = $l3;

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.convert.ConverterManager $r3;
        org.joda.time.convert.PartialConverter $r4;
        org.joda.time.Chronology $r5, $r6;
        org.joda.time.format.DateTimeFormatter $r7;
        int[] $r8;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>($r1);

        $r5 = interfaceinvoke $r4.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>($r1, $r2);

        $r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r5);

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> = $r6;

        $r7 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>();

        $r8 = interfaceinvoke $r4.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r0, $r1, $r5, $r7);

        $r5 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $i0 = $r8[0];

        $i1 = $r8[1];

        $i2 = $r8[2];

        $l3 = virtualinvoke $r5.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, 0);

        r0.<org.joda.time.LocalDate: long iLocalMillis> = $l3;

        return;
    }
    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        long $l0;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.Chronology;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        specialinvoke r0.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeZone $r1;
        long $l0;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        specialinvoke r0.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return;
    }
    public static org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)
    {
        java.util.Calendar $r0;
        org.joda.time.LocalDate $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2;

        $r0 := @parameter0: java.util.Calendar;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The calendar must not be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(0);

        $i1 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i2 = $i1;

        $r1 = new org.joda.time.LocalDate;

        if $i0 != 1 goto label3;

     label2:
        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(2);

        $i0 = $i0 + 1;

        $i1 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(5);

        specialinvoke $r1.<org.joda.time.LocalDate: void <init>(int,int,int)>($i2, $i0, $i1);

        return $r1;

     label3:
        $i2 = 1 - $i1;

        goto label2;
    }
    public static org.joda.time.LocalDate fromDateFields(java.util.Date)
    {
        java.util.Date $r0;
        java.lang.IllegalArgumentException $r1;
        long $l0;
        byte $b1;
        java.util.GregorianCalendar $r2;
        org.joda.time.LocalDate $r3;
        int $i2, $i3, $i4;

        $r0 := @parameter0: java.util.Date;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r1;

     label1:
        $l0 = virtualinvoke $r0.<java.util.Date: long getTime()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r2.<java.util.GregorianCalendar: void setTime(java.util.Date)>($r0);

        $r3 = staticinvoke <org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>($r2);

        return $r3;

     label2:
        $r3 = new org.joda.time.LocalDate;

        $i2 = virtualinvoke $r0.<java.util.Date: int getYear()>();

        $i2 = $i2 + 1900;

        $i3 = virtualinvoke $r0.<java.util.Date: int getMonth()>();

        $i3 = $i3 + 1;

        $i4 = virtualinvoke $r0.<java.util.Date: int getDate()>();

        specialinvoke $r3.<org.joda.time.LocalDate: void <init>(int,int,int)>($i2, $i3, $i4);

        return $r3;
    }
    public static org.joda.time.LocalDate now()
    {
        org.joda.time.LocalDate $r0;

        $r0 = new org.joda.time.LocalDate;

        specialinvoke $r0.<org.joda.time.LocalDate: void <init>()>();

        return $r0;
    }
    public static org.joda.time.LocalDate now(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0;
        java.lang.NullPointerException $r1;
        org.joda.time.LocalDate $r2;

        $r0 := @parameter0: org.joda.time.Chronology;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Chronology must not be null");

        throw $r1;

     label1:
        $r2 = new org.joda.time.LocalDate;

        specialinvoke $r2.<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>($r0);

        return $r2;
    }
    public static org.joda.time.LocalDate now(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0;
        java.lang.NullPointerException $r1;
        org.joda.time.LocalDate $r2;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Zone must not be null");

        throw $r1;

     label1:
        $r2 = new org.joda.time.LocalDate;

        specialinvoke $r2.<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>($r0);

        return $r2;
    }
    public static org.joda.time.LocalDate parse(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.joda.time.LocalDate $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>();

        $r2 = staticinvoke <org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>($r0, $r1);

        return $r2;
    }
    public static org.joda.time.LocalDate parse(java.lang.String, org.joda.time.format.DateTimeFormatter)
    {
        java.lang.String $r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.joda.time.LocalDate $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.joda.time.format.DateTimeFormatter;

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>($r0);

        return $r2;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.LocalDate r0, $r2;
        org.joda.time.Chronology $r1;
        long $l0;
        org.joda.time.chrono.ISOChronology $r3;
        org.joda.time.DateTimeZone $r4, $r5;
        boolean $z0;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        if $r1 != null goto label1;

        $r2 = new org.joda.time.LocalDate;

        $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r2.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r3);

        return $r2;

     label1:
        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r4.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r2 = new org.joda.time.LocalDate;

        $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>;

        $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $r1 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        specialinvoke $r2.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return $r2;

     label2:
        return r0;
    }
    public org.joda.time.LocalDate$Property centuryOfEra()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public volatile int compareTo(java.lang.Object)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        java.lang.Object $r1;
        org.joda.time.ReadablePartial $r2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.ReadablePartial) $r1;

        $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>($r2);

        return $i0;
    }
    public int compareTo(org.joda.time.ReadablePartial)
    {
        org.joda.time.LocalDate r0, $r3;
        org.joda.time.ReadablePartial $r1;
        org.joda.time.Chronology $r2, $r4;
        boolean $z0;
        long $l0, $l1;
        byte $b2;
        int $i3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != $r1 goto label1;

        return 0;

     label1:
        $z0 = $r1 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label5;

        $r3 = (org.joda.time.LocalDate) $r1;

        $r4 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $r2 = $r3.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>;

        $l1 = $r3.<org.joda.time.LocalDate: long iLocalMillis>;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label3;

        $b2 = -1;

     label2:
        return $b2;

     label3:
        $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>;

        $l1 = $r3.<org.joda.time.LocalDate: long iLocalMillis>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

        $b2 = 0;

        goto label2;

     label4:
        $b2 = 1;

        goto label2;

     label5:
        $i3 = specialinvoke r0.<org.joda.time.base.BaseLocal: int compareTo(org.joda.time.ReadablePartial)>($r1);

        return $i3;
    }
    public org.joda.time.LocalDate$Property dayOfMonth()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.LocalDate$Property dayOfWeek()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.LocalDate$Property dayOfYear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.LocalDate r0, $r3;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2, $r4;
        long $l0, $l1;
        boolean $z0;
        byte $b2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label4;

        $r3 = (org.joda.time.LocalDate) $r1;

        $r4 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $r2 = $r3.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        $l1 = r0.<org.joda.time.LocalDate: long iLocalMillis>;

        $l0 = $r3.<org.joda.time.LocalDate: long iLocalMillis>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label3;

        $z0 = 1;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        $z0 = specialinvoke r0.<org.joda.time.base.BaseLocal: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }
    public org.joda.time.LocalDate$Property era()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public int get(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.Chronology $r5;
        org.joda.time.DateTimeField $r6;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>($r1);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r6.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getCenturyOfEra()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.LocalDate;

        r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        return r1;
    }
    public int getDayOfMonth()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getDayOfWeek()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getDayOfYear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getEra()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.DateTimeField $r5;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.joda.time.Chronology;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        return $r5;

     label3:
        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        return $r5;

     label4:
        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        return $r5;
    }
    protected long getLocalMillis()
    {
        org.joda.time.LocalDate r0;
        long l0;

        r0 := @this: org.joda.time.LocalDate;

        l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>;

        return l0;
    }
    public int getMonthOfYear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getValue(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        org.joda.time.Chronology $r4;
        org.joda.time.DateTimeField $r5;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i0 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l1);

        return $i0;

     label3:
        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i0 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l1);

        return $i0;

     label4:
        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i0 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l1);

        return $i0;
    }
    public int getWeekOfWeekyear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getWeekyear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getYear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getYearOfCentury()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int getYearOfEra()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public int hashCode()
    {
        org.joda.time.LocalDate r0;
        int $i0;

        r0 := @this: org.joda.time.LocalDate;

        $i0 = r0.<org.joda.time.LocalDate: int iHash>;

        if $i0 != 0 goto label1;

        $i0 = specialinvoke r0.<org.joda.time.base.BaseLocal: int hashCode()>();

        r0.<org.joda.time.LocalDate: int iHash> = $i0;

     label1:
        return $i0;
    }
    public boolean isSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationFieldType $r2;
        java.util.Set $r3;
        boolean $z0;
        org.joda.time.Chronology $r4;
        org.joda.time.DurationField $r5;
        long $l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r6;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r3 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r4);

        $l0 = virtualinvoke $r5.<org.joda.time.DurationField: long getUnitMillis()>();

        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke $r5.<org.joda.time.DurationField: long getUnitMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label3;

     label2:
        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4);

        $z0 = virtualinvoke $r6.<org.joda.time.DateTimeField: boolean isSupported()>();

        return $z0;

     label3:
        return 0;
    }
    public boolean isSupported(org.joda.time.DurationFieldType)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DurationField $r3, $r5;
        java.util.Set $r4;
        boolean $z0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r2);

        $r4 = <org.joda.time.LocalDate: java.util.Set DATE_DURATION_TYPES>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $l0 = virtualinvoke $r3.<org.joda.time.DurationField: long getUnitMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke $r5.<org.joda.time.DurationField: long getUnitMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label3;

     label2:
        $z0 = virtualinvoke $r3.<org.joda.time.DurationField: boolean isSupported()>();

        return $z0;

     label3:
        return 0;
    }
    public org.joda.time.LocalDate minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, -1);

        return r0;
    }
    public org.joda.time.LocalDate minusDays(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate minusMonths(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate minusWeeks(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate minusYears(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate$Property monthOfYear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.LocalDate plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, 1);

        return r0;
    }
    public org.joda.time.LocalDate plusDays(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate plusMonths(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate plusWeeks(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate plusYears(int)
    {
        int $i0;
        org.joda.time.LocalDate r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.LocalDate$Property $r5;
        org.joda.time.Chronology $r6;
        org.joda.time.DateTimeField $r7;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>($r1);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = new org.joda.time.LocalDate$Property;

        $r6 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r7 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r6);

        specialinvoke $r5.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r7);

        return $r5;
    }
    public int size()
    {
        org.joda.time.LocalDate r0;

        r0 := @this: org.joda.time.LocalDate;

        return 3;
    }
    public java.util.Date toDate()
    {
        org.joda.time.LocalDate r0, $r2, $r3;
        java.util.Date $r1, $r4;
        int $i0, $i1, $i2;
        boolean $z0;
        long $l3, $l4;
        java.util.TimeZone $r5;

        r0 := @this: org.joda.time.LocalDate;

        $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>();

        $r1 = new java.util.Date;

        $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>();

        $i1 = $i1 + -1900;

        $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>();

        $i2 = $i2 + -1;

        specialinvoke $r1.<java.util.Date: void <init>(int,int,int)>($i1, $i2, $i0);

        $r2 = staticinvoke <org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>($r1);

        $r3 = $r2;

        $z0 = virtualinvoke $r2.<org.joda.time.LocalDate: boolean isBefore(org.joda.time.ReadablePartial)>(r0);

        if $z0 == 0 goto label4;

     label1:
        $z0 = virtualinvoke $r3.<org.joda.time.LocalDate: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        $l3 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $l3 = $l3 + 3600000L;

        virtualinvoke $r1.<java.util.Date: void setTime(long)>($l3);

        $r3 = staticinvoke <org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>($r1);

        goto label1;

     label2:
        $i1 = virtualinvoke $r1.<java.util.Date: int getDate()>();

        if $i1 != $i0 goto label3;

        $l3 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $l3 = $l3 - 1000L;

        virtualinvoke $r1.<java.util.Date: void setTime(long)>($l3);

        goto label2;

     label3:
        $l3 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $l3 = $l3 + 1000L;

        virtualinvoke $r1.<java.util.Date: void setTime(long)>($l3);

        return $r1;

     label4:
        $z0 = virtualinvoke $r2.<org.joda.time.LocalDate: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label5;

        $r4 = new java.util.Date;

        $l3 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $i1 = virtualinvoke $r5.<java.util.TimeZone: int getDSTSavings()>();

        $l4 = (long) $i1;

        $l3 = $l3 - $l4;

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l3);

        $i1 = virtualinvoke $r4.<java.util.Date: int getDate()>();

        if $i1 == $i0 goto label6;

     label5:
        return $r1;

     label6:
        return $r4;
    }
    public org.joda.time.DateMidnight toDateMidnight()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateMidnight $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }
    public org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateMidnight $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r1);

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        $r3 = new org.joda.time.DateMidnight;

        $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>();

        $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>();

        $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>();

        specialinvoke $r3.<org.joda.time.DateMidnight: void <init>(int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $r2);

        return $r3;
    }
    public org.joda.time.DateTime toDateTime(org.joda.time.LocalTime)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalTime $r1;
        org.joda.time.DateTime $r2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.LocalTime;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>($r1, null);

        return $r2;
    }
    public org.joda.time.DateTime toDateTime(org.joda.time.LocalTime, org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalTime $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.DateTime $r3;
        org.joda.time.Chronology $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.LocalTime;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>($r2);

        return $r3;

     label1:
        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r1.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        if $r4 == $r5 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chronology of the time does not match");

        throw $r6;

     label2:
        $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r2);

        $r3 = new org.joda.time.DateTime;

        $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>();

        $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>();

        $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>();

        $i3 = virtualinvoke $r1.<org.joda.time.LocalTime: int getHourOfDay()>();

        $i4 = virtualinvoke $r1.<org.joda.time.LocalTime: int getMinuteOfHour()>();

        $i5 = virtualinvoke $r1.<org.joda.time.LocalTime: int getSecondOfMinute()>();

        $i6 = virtualinvoke $r1.<org.joda.time.LocalTime: int getMillisOfSecond()>();

        specialinvoke $r3.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $r4);

        return $r3;
    }
    public org.joda.time.DateTime toDateTimeAtCurrentTime()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTime $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }
    public org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.Chronology $r2;
        long $l0;
        org.joda.time.DateTime $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r1);

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $l0 = virtualinvoke $r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, $l0);

        $r3 = new org.joda.time.DateTime;

        specialinvoke $r3.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r3;
    }
    public org.joda.time.DateTime toDateTimeAtMidnight()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTime $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }
    public org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTime $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r1);

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        $r3 = new org.joda.time.DateTime;

        $i0 = virtualinvoke r0.<org.joda.time.LocalDate: int getYear()>();

        $i1 = virtualinvoke r0.<org.joda.time.LocalDate: int getMonthOfYear()>();

        $i2 = virtualinvoke r0.<org.joda.time.LocalDate: int getDayOfMonth()>();

        specialinvoke $r3.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, 0, 0, 0, $r2);

        return $r3;
    }
    public org.joda.time.DateTime toDateTimeAtStartOfDay()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTime $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }
    public org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.Chronology $r2;
        long $l0;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateTime $r4;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r1);

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l0 = $l0 + 21600000L;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>($l0, 0);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        $r4 = new org.joda.time.DateTime;

        specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r4;
    }
    public org.joda.time.Interval toInterval()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.Interval $r1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }
    public org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTime $r2, $r3;
        org.joda.time.Interval $r4;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r1);

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>($r1);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>(1);

        $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>($r1);

        $r4 = new org.joda.time.Interval;

        specialinvoke $r4.<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>($r2, $r3);

        return $r4;
    }
    public org.joda.time.LocalDateTime toLocalDateTime(org.joda.time.LocalTime)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalTime $r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.Chronology $r3, $r4;
        long $l0, $l1;
        org.joda.time.LocalDateTime $r5;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.LocalTime;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The time must not be null");

        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r1.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        if $r3 == $r4 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chronology of the time does not match");

        throw $r2;

     label2:
        $l0 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r1.<org.joda.time.LocalTime: long getLocalMillis()>();

        $l0 = $l0 + $l1;

        $r5 = new org.joda.time.LocalDateTime;

        $r3 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        specialinvoke $r5.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r3);

        return $r5;
    }
    public java.lang.String toString()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>();

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r2;
    }
    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.LocalDate r0;
        java.lang.String $r1;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: java.lang.String toString()>();

        return $r1;

     label1:
        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r1;
    }
    public java.lang.String toString(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.joda.time.LocalDate r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Locale;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: java.lang.String toString()>();

        return $r1;

     label1:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>($r2);

        $r1 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r1;
    }
    public org.joda.time.LocalDate$Property weekOfWeekyear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.LocalDate$Property weekyear()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.LocalDate withCenturyOfEra(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withDayOfMonth(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withDayOfWeek(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withDayOfYear(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withEra(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.LocalDate r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.Chronology $r5;
        org.joda.time.DateTimeField $r6;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>($r1);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationFieldType $r0;
        int $i0;
        org.joda.time.LocalDate r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.Chronology $r5;
        org.joda.time.DurationField $r6;
        long $l1;

        r1 := @this: org.joda.time.LocalDate;

        $r0 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke r1.<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>($r0);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        if $i0 != 0 goto label3;

        return r1;

     label3:
        $r5 = virtualinvoke r1.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r0.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r5);

        $l1 = virtualinvoke r1.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r6.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r1 = virtualinvoke r1.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r1;
    }
    public org.joda.time.LocalDate withFields(org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial $r0;
        org.joda.time.LocalDate r1;
        org.joda.time.Chronology $r2;
        long $l0;

        r1 := @this: org.joda.time.LocalDate;

        $r0 := @parameter0: org.joda.time.ReadablePartial;

        if $r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r1.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l0 = virtualinvoke $r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>($r0, $l0);

        r1 = virtualinvoke r1.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l0);

        return r1;
    }
    org.joda.time.LocalDate withLocalMillis(long)
    {
        long $l0, $l1;
        org.joda.time.LocalDate r0, $r3;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        byte $b2;

        r0 := @this: org.joda.time.LocalDate;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.LocalDate;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        specialinvoke $r3.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return $r3;
    }
    public org.joda.time.LocalDate withMonthOfYear(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.ReadablePeriod $r0;
        int $i0, $i2, $i3;
        org.joda.time.LocalDate r1;
        long $l1, $l4;
        org.joda.time.Chronology $r2;
        org.joda.time.DurationFieldType $r3;
        boolean $z0;
        org.joda.time.DurationField $r4;

        r1 := @this: org.joda.time.LocalDate;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 := @parameter1: int;

        if $r0 == null goto label5;

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $l1 = virtualinvoke r1.<org.joda.time.LocalDate: long getLocalMillis()>();

        $r2 = virtualinvoke r1.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $i2 = 0;

     label2:
        $i3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int size()>();

        if $i2 >= $i3 goto label4;

        $i3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int getValue(int)>($i2);

        $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, $i0);

        $l4 = (long) $i3;

        $r3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i2);

        $z0 = virtualinvoke r1.<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>($r3);

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r3.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r2);

        $l1 = virtualinvoke $r4.<org.joda.time.DurationField: long add(long,long)>($l1, $l4);

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        r1 = virtualinvoke r1.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

     label5:
        return r1;
    }
    public org.joda.time.LocalDate withWeekOfWeekyear(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withWeekyear(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withYear(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withYearOfCentury(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate withYearOfEra(int)
    {
        org.joda.time.LocalDate r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.LocalDate;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.LocalDate$Property year()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.LocalDate$Property yearOfCentury()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.LocalDate$Property yearOfEra()
    {
        org.joda.time.LocalDate r0;
        org.joda.time.LocalDate$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalDate;

        $r1 = new org.joda.time.LocalDate$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
