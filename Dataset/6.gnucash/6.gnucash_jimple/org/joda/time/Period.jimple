org.joda.time.Period extends org.joda.time.base.BasePeriod implements org.joda.time.ReadablePeriod java.io.Serializable
public static final org.joda.time.Period ZERO
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.Period $r0;

        $r0 = new org.joda.time.Period;

        specialinvoke $r0.<org.joda.time.Period: void <init>()>();

        <org.joda.time.Period: org.joda.time.Period ZERO> = $r0;

        return;
    }
    public void <init>()
    {
        org.joda.time.Period r0;

        r0 := @this: org.joda.time.Period;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>(0L, null, null);

        return;
    }
    public void <init>(int, int, int, int)
    {
        org.joda.time.Period r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(int,int,int,int,int,int,int,int,org.joda.time.PeriodType)>(0, 0, 0, 0, $i0, $i1, $i2, $i3, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, int, int, int)
    {
        org.joda.time.Period r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $i7 := @parameter7: int;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(int,int,int,int,int,int,int,int,org.joda.time.PeriodType)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $i7 := @parameter7: int;

        $r1 := @parameter8: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(int,int,int,int,int,int,int,int,org.joda.time.PeriodType)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $r1);

        return;
    }
    public void <init>(long)
    {
        org.joda.time.Period r0;
        long $l0;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long)>($l0);

        return;
    }
    public void <init>(long, long)
    {
        org.joda.time.Period r0;
        long $l0, $l1;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, $l1, null, null);

        return;
    }
    public void <init>(long, long, org.joda.time.Chronology)
    {
        org.joda.time.Period r0;
        long $l0, $l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, $l1, null, $r1);

        return;
    }
    public void <init>(long, long, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        long $l0, $l1;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, $l1, $r1, null);

        return;
    }
    public void <init>(long, long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.Period r0;
        long $l0, $l1;
        org.joda.time.PeriodType $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.PeriodType;

        $r2 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, $l1, $r1, $r2);

        return;
    }
    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.Period r0;
        long $l0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, null, $r1);

        return;
    }
    public void <init>(long, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        long $l0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, $r1, null);

        return;
    }
    public void <init>(long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.Period r0;
        long $l0;
        org.joda.time.PeriodType $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.Period;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.PeriodType;

        $r2 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, $r1, $r2);

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.joda.time.Period r0;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>($r1, null, null);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Period r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>($r1, null, $r2);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        java.lang.Object $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>($r1, $r2, null);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.Period r0;
        java.lang.Object $r1;
        org.joda.time.PeriodType $r2;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.PeriodType;

        $r3 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>($r1, $r2, $r3);

        return;
    }
    public void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadableDuration $r1;
        org.joda.time.ReadableInstant $r2;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadableDuration;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>($r1, $r2, null);

        return;
    }
    public void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadableDuration $r1;
        org.joda.time.ReadableInstant $r2;
        org.joda.time.PeriodType $r3;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadableDuration;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        $r3 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>($r1, $r2, $r3);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.ReadableDuration $r2;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableDuration;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>($r1, $r2, null);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.ReadableDuration $r2;
        org.joda.time.PeriodType $r3;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableDuration;

        $r3 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>($r1, $r2, $r3);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadableInstant $r1, $r2;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>($r1, $r2, null);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadableInstant $r1, $r2;
        org.joda.time.PeriodType $r3;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        $r3 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>($r1, $r2, $r3);

        return;
    }
    public void <init>(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadablePartial $r1, $r2;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>($r1, $r2, null);

        return;
    }
    public void <init>(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        org.joda.time.ReadablePartial $r1, $r2;
        org.joda.time.PeriodType $r3;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>($r1, $r2, $r3);

        return;
    }
    private void <init>(int[], org.joda.time.PeriodType)
    {
        org.joda.time.Period r0;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return;
    }
    private void checkYearsAndMonths(java.lang.String)
    {
        org.joda.time.Period r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>();

        if $i0 == 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert to ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as this period contains months and months vary in length");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.Period: int getYears()>();

        if $i0 == 0 goto label2;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert to ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as this period contains years and years vary in length");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label2:
        return;
    }
    public static org.joda.time.Period days(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = $i0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public static org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial $r0, $r1;
        int[] $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DurationFieldType[] $r4;
        org.joda.time.DateTimeFieldType $r5, $r6;
        org.joda.time.DurationFieldType $r7, $r8;
        org.joda.time.Period $r9;
        org.joda.time.PeriodType $r10;

        $r0 := @parameter0: org.joda.time.ReadablePartial;

        $r1 := @parameter1: org.joda.time.ReadablePartial;

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null");

        throw $r3;

     label2:
        $i0 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: int size()>();

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        if $i0 == $i1 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r3;

     label3:
        $i0 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: int size()>();

        $r4 = newarray (org.joda.time.DurationFieldType)[$i0];

        $i0 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: int size()>();

        $r2 = newarray (int)[$i0];

        $i0 = 0;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: int size()>();

     label4:
        if $i0 >= $i1 goto label7;

        $r5 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        $r6 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        if $r5 == $r6 goto label5;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r3;

     label5:
        $r5 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        $r7 = virtualinvoke $r5.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r4[$i0] = $r7;

        if $i0 <= 0 goto label6;

        $i2 = $i0 + -1;

        $r7 = $r4[$i2];

        $r8 = $r4[$i0];

        if $r7 != $r8 goto label6;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not have overlapping fields");

        throw $r3;

     label6:
        $i2 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int getValue(int)>($i0);

        $i3 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: int getValue(int)>($i0);

        $i2 = $i2 - $i3;

        $r2[$i0] = $i2;

        $i0 = $i0 + 1;

        goto label4;

     label7:
        $r9 = new org.joda.time.Period;

        $r10 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>($r4);

        specialinvoke $r9.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r10);

        return $r9;
    }
    public static org.joda.time.Period hours(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = $i0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public static org.joda.time.Period millis(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = $i0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public static org.joda.time.Period minutes(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = $i0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public static org.joda.time.Period months(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[8];

        $r2[0] = 0;

        $r2[1] = $i0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public static org.joda.time.Period parse(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.Period $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        $r2 = staticinvoke <org.joda.time.Period: org.joda.time.Period parse(java.lang.String,org.joda.time.format.PeriodFormatter)>($r0, $r1);

        return $r2;
    }
    public static org.joda.time.Period parse(java.lang.String, org.joda.time.format.PeriodFormatter)
    {
        java.lang.String $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.Period $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.joda.time.format.PeriodFormatter;

        $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r0);

        return $r2;
    }
    public static org.joda.time.Period seconds(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = $i0;

        $r2[7] = 0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public static org.joda.time.Period weeks(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = $i0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public static org.joda.time.Period years(int)
    {
        int $i0;
        org.joda.time.Period $r0;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 = new org.joda.time.Period;

        $r2 = newarray (int)[9];

        $r2[0] = $i0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r2[8] = 0;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r1);

        return $r0;
    }
    public int getDays()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int DAY_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public int getHours()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int HOUR_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public int getMillis()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MILLI_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public int getMinutes()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public int getMonths()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MONTH_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public int getSeconds()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int SECOND_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public int getWeeks()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public int getYears()
    {
        org.joda.time.Period r0;
        int $i0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0);

        return $i0;
    }
    public org.joda.time.Period minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod $r0;
        org.joda.time.Period r1, $r5;
        int[] $r2;
        org.joda.time.PeriodType $r3;
        int $i0, $i1;
        org.joda.time.DurationFieldType $r4;

        r1 := @this: org.joda.time.Period;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        if $r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Period: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MONTH_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int DAY_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int HOUR_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int SECOND_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MILLI_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        $i1 = neg $i1;

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r5 = new org.joda.time.Period;

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r5.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r3);

        return $r5;
    }
    public org.joda.time.Period minusDays(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusDays(int)>($i0);

        return r0;
    }
    public org.joda.time.Period minusHours(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusHours(int)>($i0);

        return r0;
    }
    public org.joda.time.Period minusMillis(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMillis(int)>($i0);

        return r0;
    }
    public org.joda.time.Period minusMinutes(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>($i0);

        return r0;
    }
    public org.joda.time.Period minusMonths(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMonths(int)>($i0);

        return r0;
    }
    public org.joda.time.Period minusSeconds(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusSeconds(int)>($i0);

        return r0;
    }
    public org.joda.time.Period minusWeeks(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusWeeks(int)>($i0);

        return r0;
    }
    public org.joda.time.Period minusYears(int)
    {
        org.joda.time.Period r0;
        int $i0;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusYears(int)>($i0);

        return r0;
    }
    public org.joda.time.Period multipliedBy(int)
    {
        int $i0, $i1, $i2;
        org.joda.time.Period r0, $r1;
        int[] $r2;
        org.joda.time.PeriodType $r3;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = <org.joda.time.Period: org.joda.time.Period ZERO>;

        if r0 == $r1 goto label4;

        if $i0 != 1 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $i1 = 0;

     label2:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label3;

        $i2 = $r2[$i1];

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i2, $i0);

        $r2[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r1 = new org.joda.time.Period;

        $r3 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r1.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r3);

        return $r1;

     label4:
        return r0;
    }
    public org.joda.time.Period negated()
    {
        org.joda.time.Period r0;

        r0 := @this: org.joda.time.Period;

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period multipliedBy(int)>(-1);

        return r0;
    }
    public org.joda.time.Period normalizedStandard()
    {
        org.joda.time.Period r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Period;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        r0 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>($r1);

        return r0;
    }
    public org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)
    {
        org.joda.time.Period r0, $r2;
        org.joda.time.PeriodType $r1;
        int $i0, $i3;
        long $l1, $l2;
        org.joda.time.chrono.ISOChronology $r3;
        org.joda.time.DurationFieldType $r4;
        boolean $z0;
        byte $b4;
        java.lang.UnsupportedOperationException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.PeriodType;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>($r1);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 1000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 60000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getHours()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 3600000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getDays()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 86400000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 604800000L;

        $l1 = $l1 + $l2;

        $r2 = new org.joda.time.Period;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r2.<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l1, $r1, $r3);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getYears()>();

        $i3 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>();

        if $i0 != 0 goto label1;

        if $i3 == 0 goto label4;

     label1:
        $l1 = (long) $i0;

        $l1 = $l1 * 12L;

        $l2 = (long) $i3;

        $l1 = $l2 + $l1;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>;

        $z0 = virtualinvoke $r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r4);

        if $z0 == 0 goto label2;

        $l2 = $l1 / 12L;

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2);

        $r2 = virtualinvoke $r2.<org.joda.time.Period: org.joda.time.Period withYears(int)>($i0);

        $i0 = $i0 * 12;

        $l2 = (long) $i0;

        $l1 = $l1 - $l2;

     label2:
        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>;

        $z0 = virtualinvoke $r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r4);

        if $z0 == 0 goto label3;

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $r2 = virtualinvoke $r2.<org.joda.time.Period: org.joda.time.Period withMonths(int)>($i0);

        $l2 = (long) $i0;

        $l1 = $l1 - $l2;

     label3:
        $b4 = $l1 cmp 0L;

        if $b4 == 0 goto label4;

        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: ");

        $r7 = virtualinvoke r0.<org.joda.time.Period: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label4:
        return $r2;
    }
    public org.joda.time.Period plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod $r0;
        org.joda.time.Period r1, $r5;
        int[] $r2;
        org.joda.time.PeriodType $r3;
        int $i0, $i1;
        org.joda.time.DurationFieldType $r4;

        r1 := @this: org.joda.time.Period;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        if $r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Period: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MONTH_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int DAY_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int HOUR_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int SECOND_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i0 = <org.joda.time.PeriodType: int MILLI_INDEX>;

        $r4 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>;

        $i1 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4);

        virtualinvoke $r3.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r1, $i0, $r2, $i1);

        $r5 = new org.joda.time.Period;

        $r3 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r5.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r3);

        return $r5;
    }
    public org.joda.time.Period plusDays(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int DAY_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period plusHours(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int HOUR_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period plusMillis(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int MILLI_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period plusMinutes(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int MINUTE_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period plusMonths(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int MONTH_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period plusSeconds(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int SECOND_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period plusWeeks(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int WEEK_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period plusYears(int)
    {
        int $i0, $i1;
        org.joda.time.Period r0, $r3;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int YEAR_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period toPeriod()
    {
        org.joda.time.Period r0;

        r0 := @this: org.joda.time.Period;

        return r0;
    }
    public org.joda.time.Days toStandardDays()
    {
        org.joda.time.Period r0;
        int $i0;
        long $l1, $l2;
        org.joda.time.Days $r1;

        r0 := @this: org.joda.time.Period;

        specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Days");

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 1000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 60000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getHours()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 3600000L;

        $l1 = $l1 + $l2;

        $l1 = $l1 / 86400000L;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getDays()>();

        $l2 = (long) $i0;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 7L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $r1 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return $r1;
    }
    public org.joda.time.Duration toStandardDuration()
    {
        org.joda.time.Period r0;
        int $i0;
        long $l1, $l2;
        org.joda.time.Duration $r1;

        r0 := @this: org.joda.time.Period;

        specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Duration");

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 1000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 60000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getHours()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 3600000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getDays()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 86400000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 604800000L;

        $l1 = $l1 + $l2;

        $r1 = new org.joda.time.Duration;

        specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>($l1);

        return $r1;
    }
    public org.joda.time.Hours toStandardHours()
    {
        org.joda.time.Period r0;
        int $i0;
        long $l1, $l2;
        org.joda.time.Hours $r1;

        r0 := @this: org.joda.time.Period;

        specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Hours");

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 1000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 60000L;

        $l1 = $l1 + $l2;

        $l1 = $l1 / 3600000L;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getHours()>();

        $l2 = (long) $i0;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getDays()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 24L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 168L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i0);

        return $r1;
    }
    public org.joda.time.Minutes toStandardMinutes()
    {
        org.joda.time.Period r0;
        int $i0;
        long $l1, $l2;
        org.joda.time.Minutes $r1;

        r0 := @this: org.joda.time.Period;

        specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Minutes");

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 1000L;

        $l1 = $l1 + $l2;

        $l1 = $l1 / 60000L;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>();

        $l2 = (long) $i0;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getHours()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 60L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getDays()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 1440L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 10080L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i0);

        return $r1;
    }
    public org.joda.time.Seconds toStandardSeconds()
    {
        org.joda.time.Period r0;
        int $i0;
        long $l1, $l2;
        org.joda.time.Seconds $r1;

        r0 := @this: org.joda.time.Period;

        specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Seconds");

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>();

        $i0 = $i0 / 1000;

        $l1 = (long) $i0;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>();

        $l2 = (long) $i0;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 60L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getHours()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 3600L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getDays()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 86400L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 604800L;

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $r1 = staticinvoke <org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>($i0);

        return $r1;
    }
    public org.joda.time.Weeks toStandardWeeks()
    {
        org.joda.time.Period r0;
        int $i0;
        long $l1, $l2;
        org.joda.time.Weeks $r1;

        r0 := @this: org.joda.time.Period;

        specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Weeks");

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 1000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 60000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getHours()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 3600000L;

        $l1 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getDays()>();

        $l2 = (long) $i0;

        $l2 = $l2 * 86400000L;

        $l2 = $l1 + $l2;

        $i0 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>();

        $l1 = (long) $i0;

        $l2 = $l2 / 604800000L;

        $l1 = $l2 + $l1;

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $r1 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return $r1;
    }
    public org.joda.time.Period withDays(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int DAY_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period withField(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.Period r0, $r4;
        org.joda.time.DurationFieldType $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        int[] $r3;
        org.joda.time.PeriodType $r5;

        r0 := @this: org.joda.time.Period;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>($r3, $r1, $i0);

        $r4 = new org.joda.time.Period;

        $r5 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r4.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r3, $r5);

        return $r4;
    }
    public org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationFieldType $r0;
        int $i0;
        org.joda.time.Period r1, $r4;
        java.lang.IllegalArgumentException $r2;
        int[] $r3;
        org.joda.time.PeriodType $r5;

        r1 := @this: org.joda.time.Period;

        $r0 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r2;

     label1:
        if $i0 != 0 goto label2;

        return r1;

     label2:
        $r3 = virtualinvoke r1.<org.joda.time.Period: int[] getValues()>();

        specialinvoke r1.<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>($r3, $r0, $i0);

        $r4 = new org.joda.time.Period;

        $r5 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r4.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r3, $r5);

        return $r4;
    }
    public org.joda.time.Period withFields(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod $r0;
        org.joda.time.Period r1, $r3;
        int[] $r2;
        org.joda.time.PeriodType $r4;

        r1 := @this: org.joda.time.Period;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        if $r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Period: int[] getValues()>();

        $r2 = specialinvoke r1.<org.joda.time.base.BasePeriod: int[] mergePeriodInto(int[],org.joda.time.ReadablePeriod)>($r2, $r0);

        $r3 = new org.joda.time.Period;

        $r4 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r2, $r4);

        return $r3;
    }
    public org.joda.time.Period withHours(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int HOUR_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period withMillis(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int MILLI_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period withMinutes(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int MINUTE_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period withMonths(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int MONTH_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period withPeriodType(org.joda.time.PeriodType)
    {
        org.joda.time.PeriodType $r0, $r2;
        org.joda.time.Period r1, $r3;
        boolean $z0;

        r1 := @this: org.joda.time.Period;

        $r0 := @parameter0: org.joda.time.PeriodType;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>($r0);

        $r2 = virtualinvoke r1.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $z0 = virtualinvoke $r0.<org.joda.time.PeriodType: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r3 = new org.joda.time.Period;

        specialinvoke $r3.<org.joda.time.Period: void <init>(java.lang.Object,org.joda.time.PeriodType)>(r1, $r0);

        return $r3;
    }
    public org.joda.time.Period withSeconds(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int SECOND_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period withWeeks(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int WEEK_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.Period withYears(int)
    {
        org.joda.time.Period r0, $r3;
        int $i0, $i1;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.Period;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        $i1 = <org.joda.time.PeriodType: int YEAR_INDEX>;

        virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, $r1, $i0);

        $r3 = new org.joda.time.Period;

        $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>();

        specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2);

        return $r3;
    }
