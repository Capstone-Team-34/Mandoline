org.joda.time.convert.StringConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.InstantConverter org.joda.time.convert.PartialConverter org.joda.time.convert.DurationConverter org.joda.time.convert.PeriodConverter org.joda.time.convert.IntervalConverter
static final org.joda.time.convert.StringConverter INSTANCE
    static void <clinit>()
    {
        org.joda.time.convert.StringConverter $r0;

        $r0 = new org.joda.time.convert.StringConverter;

        specialinvoke $r0.<org.joda.time.convert.StringConverter: void <init>()>();

        <org.joda.time.convert.StringConverter: org.joda.time.convert.StringConverter INSTANCE> = $r0;

        return;
    }
    protected void <init>()
    {
        org.joda.time.convert.StringConverter r0;

        r0 := @this: org.joda.time.convert.StringConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }
    public long getDurationMillis(java.lang.Object)
    {
        org.joda.time.convert.StringConverter r0;
        java.lang.Object $r1;
        byte $b0, $b5;
        java.lang.String $r2, $r3;
        int $i1, $i3, $i4;
        char $c2;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        long $l6, $l7;

        r0 := @this: org.joda.time.convert.StringConverter;

        $r1 := @parameter0: java.lang.Object;

        $b0 = 1;

        $r2 = (java.lang.String) $r1;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 < 4 goto label06;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        if $c2 == 80 goto label01;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        if $c2 != 112 goto label06;

     label01:
        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        if $c2 == 84 goto label02;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        if $c2 != 116 goto label06;

     label02:
        $i3 = $i1 + -1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        if $c2 == 83 goto label03;

        $i3 = $i1 + -1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        if $c2 != 115 goto label06;

     label03:
        $i1 = $i1 + -1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(2, $i1);

        $i1 = 0;

        $z0 = 0;

        $i3 = -1;

     label04:
        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 >= $i4 goto label12;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i1);

        if $c2 < 48 goto label07;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i1);

        if $c2 > 57 goto label07;

     label05:
        $i1 = $i1 + 1;

        goto label04;

     label06:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label07:
        if $i1 != 0 goto label08;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        if $c2 != 45 goto label08;

        $z0 = 1;

        goto label05;

     label08:
        if $z0 == 0 goto label10;

        $b5 = 1;

     label09:
        if $i1 <= $b5 goto label11;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 46 goto label11;

        if $i3 != -1 goto label11;

        $i3 = $i1;

        goto label05;

     label10:
        $b5 = 0;

        goto label09;

     label11:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label12:
        if $z0 == 0 goto label16;

     label13:
        if $i3 <= 0 goto label17;

        $r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($b0, $i3);

        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $i1 = $i3 + 1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1);

        $r2 = $r3;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 == 3 goto label14;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

     label14:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $l7 = (long) $i1;

     label15:
        if $z0 == 0 goto label19;

        $l6 = neg $l6;

        $l6 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l6, 1000);

        $l7 = neg $l7;

        $l7 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l6, $l7);

        return $l7;

     label16:
        $b0 = 0;

        goto label13;

     label17:
        if $z0 == 0 goto label18;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($b0, $i1);

        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        $l7 = 0L;

        goto label15;

     label18:
        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        $l7 = 0L;

        goto label15;

     label19:
        $l6 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l6, 1000);

        $l7 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l6, $l7);

        return $l7;
    }
    public long getInstantMillis(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.StringConverter r0;
        org.joda.time.Chronology $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.joda.time.format.DateTimeFormatter $r4;
        long $l0;

        r0 := @this: org.joda.time.convert.StringConverter;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.joda.time.Chronology;

        $r3 = (java.lang.String) $r2;

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        $r4 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>($r1);

        $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>($r3);

        return $l0;
    }
    public int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology, org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.convert.StringConverter r0;
        org.joda.time.ReadablePartial $r1;
        org.joda.time.format.DateTimeFormatter $r2;
        java.lang.Object $r3;
        org.joda.time.Chronology $r4;
        org.joda.time.DateTimeZone $r5;
        java.lang.String $r6;
        long $l0;
        int[] $r7;

        r0 := @this: org.joda.time.convert.StringConverter;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r3 := @parameter1: java.lang.Object;

        $r4 := @parameter2: org.joda.time.Chronology;

        $r2 := @parameter3: org.joda.time.format.DateTimeFormatter;

        $r5 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>();

        if $r5 == null goto label1;

        $r5 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>();

        $r4 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r5);

     label1:
        $r2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>($r4);

        $r6 = (java.lang.String) $r3;

        $l0 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>($r6);

        $r7 = virtualinvoke $r4.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePartial,long)>($r1, $l0);

        return $r7;
    }
    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.StringConverter r0;

        r0 := @this: org.joda.time.convert.StringConverter;

        return class "Ljava/lang/String;";
    }
    public void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.StringConverter r0;
        org.joda.time.ReadWritableInterval $r1;
        java.lang.Object $r2;
        org.joda.time.Chronology $r3, $r14;
        org.joda.time.Period $r4;
        java.lang.String $r5, $r8, $r9;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        org.joda.time.format.DateTimeFormatter $r10;
        org.joda.time.format.PeriodFormatter $r11, $r13;
        long $l2, $l4;
        char $c3;
        org.joda.time.PeriodType $r12;
        org.joda.time.DateTime $r15;

        r0 := @this: org.joda.time.convert.StringConverter;

        $r1 := @parameter0: org.joda.time.ReadWritableInterval;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.joda.time.Chronology;

        $r4 = null;

        $r5 = (java.lang.String) $r2;

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(47);

        if $i0 >= 0 goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format requires a \'/\' separator: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label01:
        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 > 0 goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label02:
        $i0 = $i0 + 1;

        $r9 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i0);

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 > 0 goto label03;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label03:
        $r10 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        $r10 = virtualinvoke $r10.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>($r3);

        $r11 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        $l2 = 0L;

        $c3 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(0);

        if $c3 == 80 goto label04;

        if $c3 != 112 goto label07;

     label04:
        $r12 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>($r8);

        $r13 = virtualinvoke $r11.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r12);

        $r4 = virtualinvoke $r13.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r8);

        $r14 = null;

     label05:
        $c3 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(0);

        if $c3 == 80 goto label06;

        if $c3 != 112 goto label12;

     label06:
        if $r4 == null goto label08;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interval composed of two durations: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label07:
        $r15 = virtualinvoke $r10.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>($r8);

        $l2 = virtualinvoke $r15.<org.joda.time.DateTime: long getMillis()>();

        $r14 = virtualinvoke $r15.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        goto label05;

     label08:
        $r12 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r11.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r12);

        $r4 = virtualinvoke $r11.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r9);

        if $r3 == null goto label11;

     label09:
        $l4 = virtualinvoke $r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r4, $l2, 1);

     label10:
        interfaceinvoke $r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>($l2, $l4);

        interfaceinvoke $r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>($r3);

        return;

     label11:
        $r3 = $r14;

        goto label09;

     label12:
        $r15 = virtualinvoke $r10.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>($r9);

        $l4 = virtualinvoke $r15.<org.joda.time.DateTime: long getMillis()>();

        if $r14 == null goto label15;

     label13:
        if $r3 == null goto label16;

     label14:
        if $r4 == null goto label17;

        $l2 = virtualinvoke $r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r4, $l4, -1);

        goto label10;

     label15:
        $r14 = virtualinvoke $r15.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        goto label13;

     label16:
        $r3 = $r14;

        goto label14;

     label17:
        goto label10;
    }
    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.StringConverter r0;
        org.joda.time.ReadWritablePeriod $r1;
        org.joda.time.Chronology $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        org.joda.time.format.PeriodFormatter $r5;
        int $i0, $i1;
        org.joda.time.PeriodType $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: org.joda.time.convert.StringConverter;

        $r1 := @parameter0: org.joda.time.ReadWritablePeriod;

        $r3 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.joda.time.Chronology;

        $r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        interfaceinvoke $r1.<org.joda.time.ReadWritablePeriod: void clear()>();

        $i0 = virtualinvoke $r5.<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>($r1, $r4, 0);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        if $i0 >= 0 goto label1;

        $r6 = interfaceinvoke $r1.<org.joda.time.ReadWritablePeriod: org.joda.time.PeriodType getPeriodType()>();

        $r5 = virtualinvoke $r5.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r6);

        virtualinvoke $r5.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>($r4);

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label2:
        return;
    }
