org.joda.time.convert.ReadableIntervalConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.IntervalConverter org.joda.time.convert.DurationConverter org.joda.time.convert.PeriodConverter
static final org.joda.time.convert.ReadableIntervalConverter INSTANCE
    static void <clinit>()
    {
        org.joda.time.convert.ReadableIntervalConverter $r0;

        $r0 = new org.joda.time.convert.ReadableIntervalConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableIntervalConverter: void <init>()>();

        <org.joda.time.convert.ReadableIntervalConverter: org.joda.time.convert.ReadableIntervalConverter INSTANCE> = $r0;

        return;
    }
    protected void <init>()
    {
        org.joda.time.convert.ReadableIntervalConverter r0;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }
    public long getDurationMillis(java.lang.Object)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        long $l0;
        java.lang.Object $r1;
        org.joda.time.ReadableInterval $r2;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.ReadableInterval) $r1;

        $l0 = interfaceinvoke $r2.<org.joda.time.ReadableInterval: long toDurationMillis()>();

        return $l0;
    }
    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadableIntervalConverter r0;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        return class "Lorg/joda/time/ReadableInterval;";
    }
    public boolean isReadableInterval(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        return 1;
    }
    public void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        org.joda.time.ReadWritableInterval $r1;
        org.joda.time.Chronology $r2;
        java.lang.Object $r3;
        org.joda.time.ReadableInterval $r4;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        $r1 := @parameter0: org.joda.time.ReadWritableInterval;

        $r3 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.joda.time.Chronology;

        $r4 = (org.joda.time.ReadableInterval) $r3;

        interfaceinvoke $r1.<org.joda.time.ReadWritableInterval: void setInterval(org.joda.time.ReadableInterval)>($r4);

        if $r2 == null goto label1;

        interfaceinvoke $r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>($r2);

        return;

     label1:
        $r2 = interfaceinvoke $r4.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        interfaceinvoke $r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>($r2);

        return;
    }
    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        org.joda.time.ReadWritablePeriod $r1;
        org.joda.time.Chronology $r2;
        java.lang.Object $r3;
        org.joda.time.ReadableInterval $r4;
        long $l0, $l1;
        int[] $r5;
        int $i2, $i3;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        $r1 := @parameter0: org.joda.time.ReadWritablePeriod;

        $r3 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.joda.time.Chronology;

        $r4 = (org.joda.time.ReadableInterval) $r3;

        if $r2 == null goto label3;

     label1:
        $l0 = interfaceinvoke $r4.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $l1 = interfaceinvoke $r4.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>($r1, $l0, $l1);

        $i2 = 0;

     label2:
        $i3 = lengthof $r5;

        if $i2 >= $i3 goto label4;

        $i3 = $r5[$i2];

        interfaceinvoke $r1.<org.joda.time.ReadWritablePeriod: void setValue(int,int)>($i2, $i3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>($r4);

        goto label1;

     label4:
        return;
    }
