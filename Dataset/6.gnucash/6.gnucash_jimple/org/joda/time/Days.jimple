org.joda.time.Days extends org.joda.time.base.BaseSingleFieldPeriod
public static final org.joda.time.Days FIVE
public static final org.joda.time.Days FOUR
public static final org.joda.time.Days MAX_VALUE
public static final org.joda.time.Days MIN_VALUE
public static final org.joda.time.Days ONE
private static final org.joda.time.format.PeriodFormatter PARSER
public static final org.joda.time.Days SEVEN
public static final org.joda.time.Days SIX
public static final org.joda.time.Days THREE
public static final org.joda.time.Days TWO
public static final org.joda.time.Days ZERO
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.Days $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.PeriodType $r2;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(0);

        <org.joda.time.Days: org.joda.time.Days ZERO> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(1);

        <org.joda.time.Days: org.joda.time.Days ONE> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(2);

        <org.joda.time.Days: org.joda.time.Days TWO> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(3);

        <org.joda.time.Days: org.joda.time.Days THREE> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(4);

        <org.joda.time.Days: org.joda.time.Days FOUR> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(5);

        <org.joda.time.Days: org.joda.time.Days FIVE> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(6);

        <org.joda.time.Days: org.joda.time.Days SIX> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(7);

        <org.joda.time.Days: org.joda.time.Days SEVEN> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(2147483647);

        <org.joda.time.Days: org.joda.time.Days MAX_VALUE> = $r0;

        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>(-2147483648);

        <org.joda.time.Days: org.joda.time.Days MIN_VALUE> = $r0;

        $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>();

        $r1 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r2);

        <org.joda.time.Days: org.joda.time.format.PeriodFormatter PARSER> = $r1;

        return;
    }
    private void <init>(int)
    {
        org.joda.time.Days r0;
        int $i0;

        r0 := @this: org.joda.time.Days;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>($i0);

        return;
    }
    public static org.joda.time.Days days(int)
    {
        int $i0;
        org.joda.time.Days $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case -2147483648: goto label11;
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 2147483647: goto label10;
            default: goto label01;
        };

     label01:
        $r0 = new org.joda.time.Days;

        specialinvoke $r0.<org.joda.time.Days: void <init>(int)>($i0);

        return $r0;

     label02:
        $r0 = <org.joda.time.Days: org.joda.time.Days ZERO>;

        return $r0;

     label03:
        $r0 = <org.joda.time.Days: org.joda.time.Days ONE>;

        return $r0;

     label04:
        $r0 = <org.joda.time.Days: org.joda.time.Days TWO>;

        return $r0;

     label05:
        $r0 = <org.joda.time.Days: org.joda.time.Days THREE>;

        return $r0;

     label06:
        $r0 = <org.joda.time.Days: org.joda.time.Days FOUR>;

        return $r0;

     label07:
        $r0 = <org.joda.time.Days: org.joda.time.Days FIVE>;

        return $r0;

     label08:
        $r0 = <org.joda.time.Days: org.joda.time.Days SIX>;

        return $r0;

     label09:
        $r0 = <org.joda.time.Days: org.joda.time.Days SEVEN>;

        return $r0;

     label10:
        $r0 = <org.joda.time.Days: org.joda.time.Days MAX_VALUE>;

        return $r0;

     label11:
        $r0 = <org.joda.time.Days: org.joda.time.Days MIN_VALUE>;

        return $r0;
    }
    public static org.joda.time.Days daysBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant $r0, $r1;
        org.joda.time.DurationFieldType $r2;
        int $i0;
        org.joda.time.Days $r3;

        $r0 := @parameter0: org.joda.time.ReadableInstant;

        $r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r0, $r1, $r2);

        $r3 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return $r3;
    }
    public static org.joda.time.Days daysBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial $r0, $r1;
        boolean $z0;
        org.joda.time.Chronology $r2;
        org.joda.time.DurationField $r3;
        org.joda.time.LocalDate $r4;
        long $l0, $l1;
        int $i2;
        org.joda.time.Days $r5;

        $r0 := @parameter0: org.joda.time.ReadablePartial;

        $r1 := @parameter1: org.joda.time.ReadablePartial;

        $z0 = $r0 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $r4 = (org.joda.time.LocalDate) $r1;

        $l0 = virtualinvoke $r4.<org.joda.time.LocalDate: long getLocalMillis()>();

        $r4 = (org.joda.time.LocalDate) $r0;

        $l1 = virtualinvoke $r4.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i2 = virtualinvoke $r3.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l1);

        $r5 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i2);

        return $r5;

     label1:
        $r5 = <org.joda.time.Days: org.joda.time.Days ZERO>;

        $i2 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>($r0, $r1, $r5);

        $r5 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i2);

        return $r5;
    }
    public static org.joda.time.Days daysIn(org.joda.time.ReadableInterval)
    {
        org.joda.time.ReadableInterval $r0;
        org.joda.time.DateTime $r1, $r2;
        org.joda.time.DurationFieldType $r3;
        int $i0;
        org.joda.time.Days $r4;

        $r0 := @parameter0: org.joda.time.ReadableInterval;

        if $r0 != null goto label1;

        $r4 = <org.joda.time.Days: org.joda.time.Days ZERO>;

        return $r4;

     label1:
        $r1 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>();

        $r2 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getEnd()>();

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r1, $r2, $r3);

        $r4 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return $r4;
    }
    public static org.joda.time.Days parseDays(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.Period $r2;
        int $i0;
        org.joda.time.Days $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r3 = <org.joda.time.Days: org.joda.time.Days ZERO>;

        return $r3;

     label1:
        $r1 = <org.joda.time.Days: org.joda.time.format.PeriodFormatter PARSER>;

        $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r0);

        $i0 = virtualinvoke $r2.<org.joda.time.Period: int getDays()>();

        $r3 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return $r3;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.Days r0;
        int $i0;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        r0 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return r0;
    }
    public static org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod $r0;
        int $i0;
        org.joda.time.Days $r1;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>($r0, 86400000L);

        $r1 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return $r1;
    }
    public org.joda.time.Days dividedBy(int)
    {
        int $i0, $i1;
        org.joda.time.Days r0;

        r0 := @this: org.joda.time.Days;

        $i0 := @parameter0: int;

        if $i0 != 1 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = $i1 / $i0;

        r0 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return r0;
    }
    public int getDays()
    {
        org.joda.time.Days r0;
        int $i0;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        return $i0;
    }
    public org.joda.time.DurationFieldType getFieldType()
    {
        org.joda.time.Days r0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.Days;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        return $r1;
    }
    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.Days r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Days;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>();

        return $r1;
    }
    public boolean isGreaterThan(org.joda.time.Days)
    {
        org.joda.time.Days r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Days;

        $r1 := @parameter0: org.joda.time.Days;

        if $r1 != null goto label2;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i1 = virtualinvoke $r1.<org.joda.time.Days: int getValue()>();

        if $i0 > $i1 goto label3;

        return 0;

     label3:
        return 1;
    }
    public boolean isLessThan(org.joda.time.Days)
    {
        org.joda.time.Days r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Days;

        $r1 := @parameter0: org.joda.time.Days;

        if $r1 != null goto label2;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i1 = virtualinvoke $r1.<org.joda.time.Days: int getValue()>();

        if $i0 < $i1 goto label3;

        return 0;

     label3:
        return 1;
    }
    public org.joda.time.Days minus(int)
    {
        org.joda.time.Days r0;
        int $i0;

        r0 := @this: org.joda.time.Days;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.Days: org.joda.time.Days plus(int)>($i0);

        return r0;
    }
    public org.joda.time.Days minus(org.joda.time.Days)
    {
        org.joda.time.Days $r0, r1;
        int $i0;

        r1 := @this: org.joda.time.Days;

        $r0 := @parameter0: org.joda.time.Days;

        if $r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke $r0.<org.joda.time.Days: int getValue()>();

        r1 = virtualinvoke r1.<org.joda.time.Days: org.joda.time.Days minus(int)>($i0);

        return r1;
    }
    public org.joda.time.Days multipliedBy(int)
    {
        org.joda.time.Days r0;
        int $i0, $i1;

        r0 := @this: org.joda.time.Days;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i1, $i0);

        r0 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return r0;
    }
    public org.joda.time.Days negated()
    {
        org.joda.time.Days r0;
        int $i0;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return r0;
    }
    public org.joda.time.Days plus(int)
    {
        int $i0, $i1;
        org.joda.time.Days r0;

        r0 := @this: org.joda.time.Days;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, $i0);

        r0 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i0);

        return r0;
    }
    public org.joda.time.Days plus(org.joda.time.Days)
    {
        org.joda.time.Days $r0, r1;
        int $i0;

        r1 := @this: org.joda.time.Days;

        $r0 := @parameter0: org.joda.time.Days;

        if $r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke $r0.<org.joda.time.Days: int getValue()>();

        r1 = virtualinvoke r1.<org.joda.time.Days: org.joda.time.Days plus(int)>($i0);

        return r1;
    }
    public org.joda.time.Duration toStandardDuration()
    {
        org.joda.time.Days r0;
        org.joda.time.Duration $r1;
        int $i0;
        long $l1;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $l1 = (long) $i0;

        $r1 = new org.joda.time.Duration;

        $l1 = $l1 * 86400000L;

        specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>($l1);

        return $r1;
    }
    public org.joda.time.Hours toStandardHours()
    {
        org.joda.time.Days r0;
        int $i0;
        org.joda.time.Hours $r1;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 24);

        $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i0);

        return $r1;
    }
    public org.joda.time.Minutes toStandardMinutes()
    {
        org.joda.time.Days r0;
        int $i0;
        org.joda.time.Minutes $r1;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 1440);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i0);

        return $r1;
    }
    public org.joda.time.Seconds toStandardSeconds()
    {
        org.joda.time.Days r0;
        int $i0;
        org.joda.time.Seconds $r1;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 86400);

        $r1 = staticinvoke <org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>($i0);

        return $r1;
    }
    public org.joda.time.Weeks toStandardWeeks()
    {
        org.joda.time.Days r0;
        int $i0;
        org.joda.time.Weeks $r1;

        r0 := @this: org.joda.time.Days;

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $i0 = $i0 / 7;

        $r1 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i0);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.joda.time.Days r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.Days;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P");

        $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("D");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
