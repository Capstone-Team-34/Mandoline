org.joda.time.field.PreciseDateTimeField extends org.joda.time.field.PreciseDurationDateTimeField
private static final long serialVersionUID
private final int iRange
private final org.joda.time.DurationField iRangeField
    public void <init>(org.joda.time.DateTimeFieldType, org.joda.time.DurationField, org.joda.time.DurationField)
    {
        org.joda.time.field.PreciseDateTimeField r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.joda.time.field.PreciseDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 := @parameter1: org.joda.time.DurationField;

        $r3 := @parameter2: org.joda.time.DurationField;

        specialinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        $z0 = virtualinvoke $r3.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Range duration field must be precise");

        throw $r4;

     label1:
        $l0 = virtualinvoke $r3.<org.joda.time.DurationField: long getUnitMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>();

        $l0 = $l0 / $l1;

        $i2 = (int) $l0;

        r0.<org.joda.time.field.PreciseDateTimeField: int iRange> = $i2;

        $i2 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>;

        if $i2 >= 2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The effective range must be at least 2");

        throw $r4;

     label2:
        r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField> = $r3;

        return;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.field.PreciseDateTimeField r0;
        long $l0, $l5, $l6;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.joda.time.field.PreciseDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>($l0);

        $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>();

        $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, $i1, $i3, $i4);

        $i1 = $i1 - $i2;

        $l5 = (long) $i1;

        $l6 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>();

        $l5 = $l5 * $l6;

        $l0 = $l5 + $l0;

        return $l0;
    }
    public int get(long)
    {
        org.joda.time.field.PreciseDateTimeField r0;
        long $l0, $l2;
        byte $b1;
        int $i3, $i4;

        r0 := @this: org.joda.time.field.PreciseDateTimeField;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>();

        $l0 = $l0 / $l2;

        $i3 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>;

        $l2 = (long) $i3;

        $l0 = $l0 % $l2;

        $i3 = (int) $l0;

        return $i3;

     label1:
        $i3 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>;

        $i3 = $i3 + -1;

        $l0 = 1L + $l0;

        $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>();

        $l0 = $l0 / $l2;

        $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>;

        $l2 = (long) $i4;

        $l0 = $l0 % $l2;

        $i4 = (int) $l0;

        $i3 = $i3 + $i4;

        return $i3;
    }
    public int getMaximumValue()
    {
        org.joda.time.field.PreciseDateTimeField r0;
        int $i0;

        r0 := @this: org.joda.time.field.PreciseDateTimeField;

        $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>;

        $i0 = $i0 + -1;

        return $i0;
    }
    public int getRange()
    {
        org.joda.time.field.PreciseDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.PreciseDateTimeField;

        i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>;

        return i0;
    }
    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.field.PreciseDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.field.PreciseDateTimeField;

        r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>;

        return r1;
    }
    public long set(long, int)
    {
        org.joda.time.field.PreciseDateTimeField r0;
        long $l0, $l2, $l5;
        int $i1, $i3, $i4;

        r0 := @this: org.joda.time.field.PreciseDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>();

        $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i3, $i4);

        $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>($l0);

        $i1 = $i1 - $i3;

        $l5 = (long) $i1;

        $l2 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>;

        $l2 = $l5 * $l2;

        $l0 = $l2 + $l0;

        return $l0;
    }
