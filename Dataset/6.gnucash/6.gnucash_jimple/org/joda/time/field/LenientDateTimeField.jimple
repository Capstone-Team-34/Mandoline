org.joda.time.field.LenientDateTimeField extends org.joda.time.field.DelegatedDateTimeField
private static final long serialVersionUID
private final org.joda.time.Chronology iBase
    protected void <init>(org.joda.time.DateTimeField, org.joda.time.Chronology)
    {
        org.joda.time.field.LenientDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.field.LenientDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>($r1);

        r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase> = $r2;

        return;
    }
    public static org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField, org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0;
        org.joda.time.DateTimeField $r1;
        boolean $z0;
        org.joda.time.field.StrictDateTimeField $r2;
        org.joda.time.field.LenientDateTimeField $r3;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r0 := @parameter1: org.joda.time.Chronology;

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = $r1 instanceof org.joda.time.field.StrictDateTimeField;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.field.StrictDateTimeField) $r1;

        $r1 = virtualinvoke $r2.<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

     label2:
        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>();

        if $z0 != 0 goto label3;

        $r3 = new org.joda.time.field.LenientDateTimeField;

        specialinvoke $r3.<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>($r1, $r0);

        return $r3;

     label3:
        return $r1;
    }
    public final boolean isLenient()
    {
        org.joda.time.field.LenientDateTimeField r0;

        r0 := @this: org.joda.time.field.LenientDateTimeField;

        return 1;
    }
    public long set(long, int)
    {
        org.joda.time.field.LenientDateTimeField r0;
        long $l0, $l2, $l3, $l4;
        int $i1;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.field.LenientDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $l3 = (long) $i1;

        $i1 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: int get(long)>($l0);

        $l4 = (long) $i1;

        $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>($l3, $l4);

        $r3 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r1 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>;

        $r1 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r1);

        $l2 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,long)>($l2, $l3);

        $r1 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l2, 0, $l0);

        return $l0;
    }
