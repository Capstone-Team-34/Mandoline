org.joda.time.base.BaseDateTime extends org.joda.time.base.AbstractDateTime implements org.joda.time.ReadableDateTime java.io.Serializable
private static final long serialVersionUID
private volatile org.joda.time.Chronology iChronology
private volatile long iMillis
    public void <init>()
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, int, int)
    {
        org.joda.time.base.BaseDateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.Chronology $r1;
        long $l7;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 := @parameter7: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>($r1);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r1;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l7 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>($l7, $r1);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l7;

        return;
    }
    public void <init>(int, int, int, int, int, int, int, org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 := @parameter7: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $r2);

        return;
    }
    public void <init>(long)
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0, $l1;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2, $r3;
        boolean $z0;
        int $i2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>($r1);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r1;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l0 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>($l0, $r1);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l0;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $z0 = virtualinvoke $r2.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l1 = r0.<org.joda.time.base.BaseDateTime: long iMillis>;

        $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l1);

        virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i2);

     label1:
        return;
    }
    public void <init>(long, org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2, $r5;
        org.joda.time.convert.ConverterManager $r3;
        org.joda.time.convert.InstantConverter $r4;
        long $l0;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>($r1);

        $r5 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        $r5 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>($r5);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r5;

        $l0 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        $r2 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l0 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>($l0, $r2);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l0;

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.convert.ConverterManager $r3;
        org.joda.time.convert.InstantConverter $r4;
        org.joda.time.Chronology $r5;
        long $l0;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>($r1);

        $r5 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>($r1, $r2);

        $r5 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>($r5);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r5;

        $l0 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>($r1, $r5);

        $l0 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>($l0, $r5);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l0;

        return;
    }
    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology $r1;
        long $l0;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $r1 := @parameter0: org.joda.time.Chronology;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.DateTimeZone $r1;
        long $l0;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return;
    }
    protected org.joda.time.Chronology checkChronology(org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        return $r1;
    }
    protected long checkInstant(long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        return $l0;
    }
    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        return r1;
    }
    public long getMillis()
    {
        org.joda.time.base.BaseDateTime r0;
        long l0;

        r0 := @this: org.joda.time.base.BaseDateTime;

        l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>;

        return l0;
    }
    protected void setChronology(org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>($r1);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r1;

        return;
    }
    protected void setMillis(long)
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l0 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>($l0, $r1);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l0;

        return;
    }
