org.joda.time.base.BasePartial extends org.joda.time.base.AbstractPartial implements org.joda.time.ReadablePartial java.io.Serializable
private static final long serialVersionUID
private final org.joda.time.Chronology iChronology
private final int[] iValues
    protected void <init>()
    {
        org.joda.time.base.BasePartial r0;
        long $l0;

        r0 := @this: org.joda.time.base.BasePartial;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>($l0, null);

        return;
    }
    protected void <init>(long)
    {
        org.joda.time.base.BasePartial r0;
        long $l0;

        r0 := @this: org.joda.time.base.BasePartial;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>($l0, null);

        return;
    }
    protected void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePartial r0;
        long $l0;
        org.joda.time.Chronology $r1, $r2;
        int[] $r3;

        r0 := @this: org.joda.time.base.BasePartial;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> = $r2;

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePartial,long)>(r0, $l0);

        r0.<org.joda.time.base.BasePartial: int[] iValues> = $r3;

        return;
    }
    protected void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePartial r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2, $r5;
        org.joda.time.convert.ConverterManager $r3;
        org.joda.time.convert.PartialConverter $r4;
        int[] $r6;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>($r1);

        $r2 = interfaceinvoke $r4.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> = $r5;

        $r6 = interfaceinvoke $r4.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>(r0, $r1, $r2);

        r0.<org.joda.time.base.BasePartial: int[] iValues> = $r6;

        return;
    }
    protected void <init>(java.lang.Object, org.joda.time.Chronology, org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.base.BasePartial r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2, $r6;
        org.joda.time.format.DateTimeFormatter $r3;
        org.joda.time.convert.ConverterManager $r4;
        org.joda.time.convert.PartialConverter $r5;
        int[] $r7;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        $r3 := @parameter2: org.joda.time.format.DateTimeFormatter;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r4 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r5 = virtualinvoke $r4.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>($r1);

        $r2 = interfaceinvoke $r5.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r6 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> = $r6;

        $r7 = interfaceinvoke $r5.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r0, $r1, $r2, $r3);

        r0.<org.joda.time.base.BasePartial: int[] iValues> = $r7;

        return;
    }
    protected void <init>(org.joda.time.Chronology)
    {
        org.joda.time.base.BasePartial r0;
        org.joda.time.Chronology $r1;
        long $l0;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: org.joda.time.Chronology;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    protected void <init>(org.joda.time.base.BasePartial, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePartial r0, $r1;
        org.joda.time.Chronology $r2;
        int[] $r3;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: org.joda.time.base.BasePartial;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> = $r2;

        $r3 = $r1.<org.joda.time.base.BasePartial: int[] iValues>;

        r0.<org.joda.time.base.BasePartial: int[] iValues> = $r3;

        return;
    }
    protected void <init>(org.joda.time.base.BasePartial, int[])
    {
        org.joda.time.base.BasePartial r0, $r1;
        int[] $r2;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: org.joda.time.base.BasePartial;

        $r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r3 = $r1.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>;

        r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> = $r3;

        r0.<org.joda.time.base.BasePartial: int[] iValues> = $r2;

        return;
    }
    protected void <init>(int[], org.joda.time.Chronology)
    {
        org.joda.time.base.BasePartial r0;
        int[] $r1;
        org.joda.time.Chronology $r2, $r3;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> = $r3;

        virtualinvoke $r2.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, $r1);

        r0.<org.joda.time.base.BasePartial: int[] iValues> = $r1;

        return;
    }
    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.base.BasePartial r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.base.BasePartial;

        r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>;

        return r1;
    }
    public int getValue(int)
    {
        org.joda.time.base.BasePartial r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.joda.time.base.BasePartial;

        $i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>;

        $i0 = $r1[$i0];

        return $i0;
    }
    public int[] getValues()
    {
        org.joda.time.base.BasePartial r0;
        java.lang.Object $r1;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePartial;

        $r2 = r0.<org.joda.time.base.BasePartial: int[] iValues>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (int[]) $r1;

        return $r2;
    }
    protected void setValue(int, int)
    {
        org.joda.time.base.BasePartial r0;
        int $i0, $i1;
        org.joda.time.DateTimeField $r1;
        int[] $r2, $r3, $r4;

        r0 := @this: org.joda.time.base.BasePartial;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePartial: org.joda.time.DateTimeField getField(int)>($i0);

        $r2 = r0.<org.joda.time.base.BasePartial: int[] iValues>;

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, $i0, $r2, $i1);

        $r3 = r0.<org.joda.time.base.BasePartial: int[] iValues>;

        $r4 = r0.<org.joda.time.base.BasePartial: int[] iValues>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        return;
    }
    protected void setValues(int[])
    {
        org.joda.time.base.BasePartial r0;
        int[] $r1, $r3, $r4;
        org.joda.time.Chronology $r2;
        int $i0;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: int[];

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>();

        virtualinvoke $r2.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, $r1);

        $r3 = r0.<org.joda.time.base.BasePartial: int[] iValues>;

        $r4 = r0.<org.joda.time.base.BasePartial: int[] iValues>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        return;
    }
    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.base.BasePartial r0;
        java.lang.String $r1;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;

     label1:
        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r1;
    }
    public java.lang.String toString(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.joda.time.base.BasePartial r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        r0 := @this: org.joda.time.base.BasePartial;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Locale;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;

     label1:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>($r2);

        $r1 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r1;
    }
