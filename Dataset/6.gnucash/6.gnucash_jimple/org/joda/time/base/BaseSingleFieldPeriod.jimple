org.joda.time.base.BaseSingleFieldPeriod extends java.lang.Object implements org.joda.time.ReadablePeriod java.lang.Comparable java.io.Serializable
private static final long START_1972
private static final long serialVersionUID
private volatile int iPeriod
    protected void <init>(int)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        int $i0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> = $i0;

        return;
    }
    protected static int between(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.DurationFieldType)
    {
        org.joda.time.ReadableInstant $r0, $r1;
        org.joda.time.DurationFieldType $r2;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.Chronology $r4;
        org.joda.time.DurationField $r5;
        long $l0, $l1;
        int $i2;

        $r0 := @parameter0: org.joda.time.ReadableInstant;

        $r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 := @parameter2: org.joda.time.DurationFieldType;

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadableInstant objects must not be null");

        throw $r3;

     label2:
        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r0);

        $r5 = virtualinvoke $r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r4);

        $l0 = interfaceinvoke $r1.<org.joda.time.ReadableInstant: long getMillis()>();

        $l1 = interfaceinvoke $r0.<org.joda.time.ReadableInstant: long getMillis()>();

        $i2 = virtualinvoke $r5.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l1);

        return $i2;
    }
    protected static int between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePartial $r0, $r1;
        org.joda.time.ReadablePeriod $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r4, $r5;
        boolean $z0;
        org.joda.time.Chronology $r6;
        long $l2, $l3;
        int[] $r7;

        $r0 := @parameter0: org.joda.time.ReadablePartial;

        $r1 := @parameter1: org.joda.time.ReadablePartial;

        $r2 := @parameter2: org.joda.time.ReadablePeriod;

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null");

        throw $r3;

     label2:
        $i0 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: int size()>();

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        if $i0 == $i1 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r3;

     label3:
        $i0 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: int size()>();

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label6;

        $r4 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        $r5 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        if $r4 == $r5 goto label5;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r3;

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>($r0);

        if $z0 != 0 goto label7;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must be contiguous");

        throw $r3;

     label7:
        $r6 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r6);

        $r6 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $l2 = virtualinvoke $r6.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>($r0, 63072000000L);

        $l3 = virtualinvoke $r6.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>($r1, 63072000000L);

        $r7 = virtualinvoke $r6.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>($r2, $l2, $l3);

        $i0 = $r7[0];

        return $i0;
    }
    protected static int standardPeriodIn(org.joda.time.ReadablePeriod, long)
    {
        org.joda.time.ReadablePeriod $r0;
        long $l0, $l2, $l4;
        int $i1, $i3;
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.DurationFieldType $r2;
        org.joda.time.DurationField $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        $l0 := @parameter1: long;

        $i1 = 0;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $l2 = 0L;

     label2:
        $i3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int size()>();

        if $i1 >= $i3 goto label5;

        $i3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int getValue(int)>($i1);

        if $i3 == 0 goto label4;

        $r2 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i1);

        $r3 = virtualinvoke $r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r1);

        $z0 = virtualinvoke $r3.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert period to duration as ");

        $r6 = virtualinvoke $r3.<org.joda.time.DurationField: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not precise in the period ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label3:
        $l4 = virtualinvoke $r3.<org.joda.time.DurationField: long getUnitMillis()>();

        $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l4, $i3);

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l2, $l4);

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $l0 = $l2 / $l0;

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l0);

        return $i1;
    }
    public volatile int compareTo(java.lang.Object)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.base.BaseSingleFieldPeriod) $r1;

        $i0 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>($r2);

        return $i0;
    }
    public int compareTo(org.joda.time.base.BaseSingleFieldPeriod)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0, $r1;
        java.lang.Class $r2, $r3;
        java.lang.ClassCastException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        int $i0, $i1;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 := @parameter0: org.joda.time.base.BaseSingleFieldPeriod;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label1;

        $r4 = new java.lang.ClassCastException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be compared to ");

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $i0 = virtualinvoke $r1.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        if $i1 <= $i0 goto label2;

        return 1;

     label2:
        if $i1 >= $i0 goto label3;

        return -1;

     label3:
        return 0;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.ReadablePeriod $r2;
        org.joda.time.PeriodType $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.ReadablePeriod;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (org.joda.time.ReadablePeriod) $r1;

        $r3 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>();

        $r4 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.PeriodType getPeriodType()>();

        if $r3 != $r4 goto label3;

        $i0 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: int getValue(int)>(0);

        $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        if $i0 == $i1 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public int get(org.joda.time.DurationFieldType)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        org.joda.time.DurationFieldType $r1, $r2;
        int $i0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $r2 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        if $r1 != $r2 goto label1;

        $i0 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        return $i0;

     label1:
        return 0;
    }
public abstract org.joda.time.DurationFieldType getFieldType() { 
// no body
} 
    public org.joda.time.DurationFieldType getFieldType(int)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        int $i0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;
        org.joda.time.DurationFieldType $r3;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $i0 := @parameter0: int;

        if $i0 == 0 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        return $r3;
    }
public abstract org.joda.time.PeriodType getPeriodType() { 
// no body
} 
    protected int getValue()
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        int i0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>;

        return i0;
    }
    public int getValue(int)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        int $i0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $i0 := @parameter0: int;

        if $i0 == 0 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        return $i0;
    }
    public int hashCode()
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        int $i0, $i1;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $i0 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        $i0 = $i0 + 459;

        $i0 = $i0 * 27;

        $r1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    public boolean isSupported(org.joda.time.DurationFieldType)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        org.joda.time.DurationFieldType $r1, $r2;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $r2 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        if $r1 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void setValue(int)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        int $i0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $i0 := @parameter0: int;

        r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> = $i0;

        return;
    }
    public int size()
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        return 1;
    }
    public org.joda.time.MutablePeriod toMutablePeriod()
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        org.joda.time.MutablePeriod $r1;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 = new org.joda.time.MutablePeriod;

        specialinvoke $r1.<org.joda.time.MutablePeriod: void <init>()>();

        virtualinvoke $r1.<org.joda.time.MutablePeriod: void add(org.joda.time.ReadablePeriod)>(r0);

        return $r1;
    }
    public org.joda.time.Period toPeriod()
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        org.joda.time.Period $r1;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 = <org.joda.time.Period: org.joda.time.Period ZERO>;

        $r1 = virtualinvoke $r1.<org.joda.time.Period: org.joda.time.Period withFields(org.joda.time.ReadablePeriod)>(r0);

        return $r1;
    }
