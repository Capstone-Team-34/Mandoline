org.joda.time.DateTimeZone extends java.lang.Object implements java.io.Serializable
private static final int MAX_MILLIS
public static final org.joda.time.DateTimeZone UTC
private static final java.util.concurrent.atomic.AtomicReference cDefault
private static final java.util.concurrent.atomic.AtomicReference cNameProvider
private static final java.util.concurrent.atomic.AtomicReference cProvider
private static final long serialVersionUID
private final java.lang.String iID
    static void <clinit>()
    {
        org.joda.time.DateTimeZone $r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        $r0 = <org.joda.time.UTCDateTimeZone: org.joda.time.DateTimeZone INSTANCE>;

        <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider> = $r1;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider> = $r1;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault> = $r1;

        return;
    }
    protected void <init>(java.lang.String)
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id must not be null");

        throw $r2;

     label1:
        r0.<org.joda.time.DateTimeZone: java.lang.String iID> = $r1;

        return;
    }
    private static org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        org.joda.time.tz.FixedDateTimeZone $r1;
        org.joda.time.DateTimeZone r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return r2;

     label1:
        $r1 = new org.joda.time.tz.FixedDateTimeZone;

        specialinvoke $r1.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>($r0, null, $i0, $i0);

        return $r1;
    }
    public static org.joda.time.DateTimeZone forID(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.DateTimeZone $r1;
        boolean $z0;
        org.joda.time.tz.Provider $r2;
        int $i0;
        long $l1;
        byte $b2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z0 == 0 goto label2;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r1;

     label2:
        $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>();

        $r1 = interfaceinvoke $r2.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r0);

        if $r1 != null goto label6;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label5;

     label3:
        $i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>($r0);

        $l1 = (long) $i0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label4;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r1;

     label4:
        $r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i0);

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>($r0, $i0);

        return $r1;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The datetime zone id \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not recognised");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r3;

     label6:
        return $r1;
    }
    public static org.joda.time.DateTimeZone forOffsetHours(int) throws java.lang.IllegalArgumentException
    {
        int $i0;
        org.joda.time.DateTimeZone $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>($i0, 0);

        return $r0;
    }
    public static org.joda.time.DateTimeZone forOffsetHoursMinutes(int, int) throws java.lang.IllegalArgumentException
    {
        int $i0, $i1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.joda.time.DateTimeZone $r3;
        java.lang.ArithmeticException $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != 0 goto label01;

        if $i1 != 0 goto label01;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r3;

     label01:
        if $i0 < -23 goto label02;

        if $i0 <= 23 goto label03;

     label02:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hours out of range: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label03:
        if $i1 < -59 goto label04;

        if $i1 <= 59 goto label05;

     label04:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minutes out of range: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label05:
        if $i0 <= 0 goto label06;

        if $i1 >= 0 goto label06;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Positive hours must not have negative minutes: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label06:
        $i0 = $i0 * 60;

        if $i0 >= 0 goto label11;

     label07:
        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

     label08:
        $i0 = $i0 - $i1;

     label09:
        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 60000);

     label10:
        $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i0);

        return $r3;

     label11:
        $i0 = $i0 + $i1;

        goto label09;

     label12:
        $r4 := @caughtexception;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset is too large");

        throw $r0;

        catch java.lang.ArithmeticException from label07 to label08 with label12;
        catch java.lang.ArithmeticException from label09 to label10 with label12;
    }
    public static org.joda.time.DateTimeZone forOffsetMillis(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.joda.time.DateTimeZone $r3;

        $i0 := @parameter0: int;

        if $i0 < -86399999 goto label1;

        if $i0 <= 86399999 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Millis out of range: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        $r2 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i0);

        $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>($r2, $i0);

        return $r3;
    }
    public static org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)
    {
        java.util.TimeZone $r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.String $r2, $r4;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        org.joda.time.tz.Provider $r5;
        int $i0;
        long $l1;
        byte $b2;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.util.TimeZone;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r1;

     label1:
        $r2 = virtualinvoke $r0.<java.util.TimeZone: java.lang.String getID()>();

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The TimeZone id must not be null");

        throw $r3;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z0 == 0 goto label3;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r1;

     label3:
        $r1 = null;

        $r4 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>($r2);

        $r5 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>();

        if $r4 == null goto label4;

        $r1 = interfaceinvoke $r5.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r4);

     label4:
        if $r1 != null goto label5;

        $r1 = interfaceinvoke $r5.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r2);

     label5:
        if $r1 != null goto label9;

        if $r4 != null goto label8;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("GMT+");

        if $z0 != 0 goto label6;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("GMT-");

        if $z0 == 0 goto label8;

     label6:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>($r2);

        $l1 = (long) $i0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label7;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r1;

     label7:
        $r2 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i0);

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>($r2, $i0);

        return $r1;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The datetime zone id \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not recognised");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label9:
        return $r1;
    }
    public static java.util.Set getAvailableIDs()
    {
        org.joda.time.tz.Provider $r0;
        java.util.Set $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>();

        $r1 = interfaceinvoke $r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>();

        return $r1;
    }
    private static java.lang.String getConvertedId(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        java.util.Map $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.joda.time.DateTimeZone$LazyInit: java.util.Map CONVERSION_MAP>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r0 = (java.lang.String) $r1;

        return $r0;
    }
    public static org.joda.time.DateTimeZone getDefault()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2, $r4;
        java.lang.String $r3;
        java.util.TimeZone $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.RuntimeException $r7;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (org.joda.time.DateTimeZone) $r1;

        if $r2 != null goto label12;

     label01:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone");

     label02:
        if $r3 == null goto label05;

     label03:
        $r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>($r3);

     label04:
        $r2 = $r4;

     label05:
        if $r2 != null goto label08;

     label06:
        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r5);

     label07:
        $r2 = $r4;

     label08:
        if $r2 != null goto label09;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

     label09:
        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r2);

        if $z0 != 0 goto label12;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (org.joda.time.DateTimeZone) $r1;

        return $r2;

     label10:
        $r6 := @caughtexception;

        goto label08;

     label11:
        $r7 := @caughtexception;

        goto label05;

     label12:
        return $r2;

        catch java.lang.RuntimeException from label01 to label02 with label11;
        catch java.lang.RuntimeException from label03 to label04 with label11;
        catch java.lang.IllegalArgumentException from label06 to label07 with label10;
    }
    private static org.joda.time.tz.NameProvider getDefaultNameProvider()
    {
        java.lang.RuntimeException $r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        org.joda.time.tz.NameProvider $r4;
        org.joda.time.tz.DefaultNameProvider $r5;
        java.lang.Exception $r6;
        java.lang.SecurityException $r7;

     label1:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.NameProvider");

     label2:
        if $r1 == null goto label8;

     label3:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (org.joda.time.tz.NameProvider) $r3;

     label4:
        if $r4 != null goto label9;

        $r5 = new org.joda.time.tz.DefaultNameProvider;

        specialinvoke $r5.<org.joda.time.tz.DefaultNameProvider: void <init>()>();

        return $r5;

     label5:
        $r6 := @caughtexception;

        $r0 = new java.lang.RuntimeException;

     label6:
        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r0;

     label7:
        $r7 := @caughtexception;

        $r4 = null;

        goto label4;

     label8:
        $r4 = null;

        goto label4;

     label9:
        return $r4;

        catch java.lang.SecurityException from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.SecurityException from label6 to label7 with label7;
    }
    private static org.joda.time.tz.Provider getDefaultProvider()
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        org.joda.time.tz.Provider $r4;
        java.lang.Exception $r5, $r9, $r11;
        java.lang.RuntimeException $r6;
        java.lang.SecurityException $r7, $r10;
        org.joda.time.tz.ZoneInfoProvider $r8;
        org.joda.time.tz.UTCProvider $r12;

     label01:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.Provider");

     label02:
        if $r1 == null goto label08;

     label03:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (org.joda.time.tz.Provider) $r3;

        $r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>($r4);

     label04:
        return $r4;

     label05:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

     label06:
        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label07:
        $r7 := @caughtexception;

     label08:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.Folder");

     label09:
        if $r1 == null goto label15;

        $r8 = new org.joda.time.tz.ZoneInfoProvider;

        $r0 = new java.io.File;

     label10:
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        specialinvoke $r8.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>($r0);

        $r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>($r8);

     label11:
        return $r4;

     label12:
        $r9 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

     label13:
        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r6;

     label14:
        $r10 := @caughtexception;

     label15:
        $r8 = new org.joda.time.tz.ZoneInfoProvider;

     label16:
        specialinvoke $r8.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>("org/joda/time/tz/data");

        $r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>($r8);

     label17:
        return $r4;

     label18:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $r12 = new org.joda.time.tz.UTCProvider;

        specialinvoke $r12.<org.joda.time.tz.UTCProvider: void <init>()>();

        return $r12;

        catch java.lang.SecurityException from label01 to label02 with label07;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.SecurityException from label06 to label07 with label07;
        catch java.lang.SecurityException from label08 to label09 with label14;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.SecurityException from label13 to label14 with label14;
        catch java.lang.Exception from label16 to label17 with label18;
    }
    public static org.joda.time.tz.NameProvider getNameProvider()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        org.joda.time.tz.NameProvider $r2;
        boolean $z0;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (org.joda.time.tz.NameProvider) $r1;

        if $r2 != null goto label1;

        $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>();

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r2);

        if $z0 != 0 goto label1;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (org.joda.time.tz.NameProvider) $r1;

     label1:
        return $r2;
    }
    public static org.joda.time.tz.Provider getProvider()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        org.joda.time.tz.Provider $r2;
        boolean $z0;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (org.joda.time.tz.Provider) $r1;

        if $r2 != null goto label1;

        $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>();

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r2);

        if $z0 != 0 goto label1;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (org.joda.time.tz.Provider) $r1;

     label1:
        return $r2;
    }
    private static int parseOffset(java.lang.String)
    {
        java.lang.String $r0;
        long $l0;
        org.joda.time.format.DateTimeFormatter $r1;
        int $i1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter OFFSET_FORMATTER>;

        $l0 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>($r0);

        $i1 = (int) $l0;

        $i1 = neg $i1;

        return $i1;
    }
    private static java.lang.String printOffset(int)
    {
        int $i0, $i1;
        java.lang.StringBuffer $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        if $i0 < 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

     label1:
        $i1 = $i0 / 3600000;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r0, $i1, 2);

        $i1 = $i1 * 3600000;

        $i0 = $i0 - $i1;

        $i1 = $i0 / 60000;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r0, $i1, 2);

        $i1 = $i1 * 60000;

        $i0 = $i0 - $i1;

        if $i0 != 0 goto label3;

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i0 = neg $i0;

        goto label1;

     label3:
        $i1 = $i0 / 1000;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r0, $i1, 2);

        $i1 = $i1 * 1000;

        $i0 = $i0 - $i1;

        if $i0 != 0 goto label4;

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r0, $i0, 3);

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }
    public static void setDefault(org.joda.time.DateTimeZone) throws java.lang.SecurityException
    {
        org.joda.time.DateTimeZone $r0;
        java.lang.SecurityManager $r1;
        org.joda.time.JodaTimePermission $r2;
        java.lang.IllegalArgumentException $r3;
        java.util.concurrent.atomic.AtomicReference $r4;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label1;

        $r2 = new org.joda.time.JodaTimePermission;

        specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setDefault");

        virtualinvoke $r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        if $r0 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The datetime zone must not be null");

        throw $r3;

     label2:
        $r4 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r0);

        return;
    }
    public static void setNameProvider(org.joda.time.tz.NameProvider) throws java.lang.SecurityException
    {
        org.joda.time.JodaTimePermission $r0;
        org.joda.time.tz.NameProvider $r1;
        java.lang.SecurityManager $r2;
        java.util.concurrent.atomic.AtomicReference $r3;

        $r1 := @parameter0: org.joda.time.tz.NameProvider;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 == null goto label1;

        $r0 = new org.joda.time.JodaTimePermission;

        specialinvoke $r0.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setNameProvider");

        virtualinvoke $r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

     label1:
        if $r1 != null goto label2;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>();

     label2:
        $r3 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r1);

        return;
    }
    public static void setProvider(org.joda.time.tz.Provider) throws java.lang.SecurityException
    {
        org.joda.time.JodaTimePermission $r0;
        org.joda.time.tz.Provider $r1;
        java.lang.SecurityManager $r2;
        java.util.concurrent.atomic.AtomicReference $r3;

        $r1 := @parameter0: org.joda.time.tz.Provider;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 == null goto label1;

        $r0 = new org.joda.time.JodaTimePermission;

        specialinvoke $r0.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setProvider");

        virtualinvoke $r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

     label1:
        if $r1 != null goto label3;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>();

     label2:
        $r3 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r1);

        return;

     label3:
        staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>($r1);

        goto label2;
    }
    private static org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)
    {
        org.joda.time.tz.Provider $r0;
        java.util.Set $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        org.joda.time.DateTimeZone $r3, $r4;

        $r0 := @parameter0: org.joda.time.tz.Provider;

        $r1 = interfaceinvoke $r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>();

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provider doesn\'t have any available ids");

        throw $r2;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("UTC");

        if $z0 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provider doesn\'t support UTC");

        throw $r2;

     label3:
        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r4 = interfaceinvoke $r0.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>("UTC");

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid UTC zone provided");

        throw $r2;

     label4:
        return $r0;
    }
    public long adjustOffset(long, boolean)
    {
        org.joda.time.DateTimeZone r0;
        boolean $z0;
        long $l0, $l1, $l2, $l4;
        int $i3;
        byte $b5;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        $l1 = $l0 - 10800000L;

        $l2 = 10800000L + $l0;

        $i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l1);

        $l4 = (long) $i3;

        $i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l2);

        $l2 = (long) $i3;

        $b5 = $l4 cmp $l2;

        if $b5 > 0 goto label1;

        return $l0;

     label1:
        $l4 = $l4 - $l2;

        $l2 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l1);

        $l1 = $l2 - $l4;

        $l2 = $l2 + $l4;

        $b5 = $l0 cmp $l1;

        if $b5 < 0 goto label3;

        $b5 = $l0 cmp $l2;

        if $b5 >= 0 goto label3;

        $l1 = $l0 - $l1;

        $b5 = $l1 cmp $l4;

        if $b5 < 0 goto label2;

        if $z0 != 0 goto label3;

        $l0 = $l0 - $l4;

        return $l0;

     label2:
        if $z0 == 0 goto label3;

        $l0 = $l0 + $l4;

     label3:
        return $l0;
    }
    public long convertLocalToUTC(long, boolean)
    {
        org.joda.time.DateTimeZone r0;
        long $l0, $l1, $l3, $l5, $l6;
        boolean $z0;
        int $i2, $i4;
        byte $b7;
        org.joda.time.IllegalInstantException $r1;
        java.lang.String $r2;
        java.lang.ArithmeticException $r3;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        $l1 = 9223372036854775807L;

        $i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $l3 = (long) $i2;

        $l3 = $l0 - $l3;

        $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3);

        if $i2 == $i4 goto label5;

        if $z0 != 0 goto label1;

        if $i2 >= 0 goto label5;

     label1:
        $l3 = (long) $i2;

        $l3 = $l0 - $l3;

        $l5 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l3);

        $l3 = $l5;

        $l6 = (long) $i2;

        $l6 = $l0 - $l6;

        $b7 = $l5 cmp $l6;

        if $b7 != 0 goto label2;

        $l3 = 9223372036854775807L;

     label2:
        $l5 = (long) $i4;

        $l5 = $l0 - $l5;

        $l5 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l5);

        $l6 = (long) $i4;

        $l6 = $l0 - $l6;

        $b7 = $l5 cmp $l6;

        if $b7 != 0 goto label6;

     label3:
        $b7 = $l3 cmp $l1;

        if $b7 == 0 goto label5;

        if $z0 == 0 goto label4;

        $r1 = new org.joda.time.IllegalInstantException;

        $r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r1.<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>($l0, $r2);

        throw $r1;

     label4:
        $l1 = (long) $i2;

        $l1 = $l0 - $l1;

        $l3 = $l0 ^ $l1;

        $b7 = $l3 cmp 0L;

        if $b7 >= 0 goto label7;

        $l3 = (long) $i2;

        $l0 = $l3 ^ $l0;

        $b7 = $l0 cmp 0L;

        if $b7 >= 0 goto label7;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Subtracting time zone offset caused overflow");

        throw $r3;

     label5:
        $i2 = $i4;

        goto label4;

     label6:
        $l1 = $l5;

        goto label3;

     label7:
        return $l1;
    }
    public long convertLocalToUTC(long, boolean, long)
    {
        org.joda.time.DateTimeZone r0;
        long $l0, $l1;
        boolean $z0;
        int $i2, $i3;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        $l1 := @parameter2: long;

        $i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l1);

        $l1 = (long) $i2;

        $l1 = $l0 - $l1;

        $i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l1);

        if $i3 != $i2 goto label1;

        return $l1;

     label1:
        $l0 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>($l0, $z0);

        return $l0;
    }
    public long convertUTCToLocal(long)
    {
        org.joda.time.DateTimeZone r0;
        long $l0, $l1, $l3;
        int $i2;
        byte $b4;
        java.lang.ArithmeticException $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $l3 = (long) $i2;

        $l3 = $l3 + $l0;

        $l1 = $l0 ^ $l3;

        $b4 = $l1 cmp 0L;

        if $b4 >= 0 goto label1;

        $l1 = (long) $i2;

        $l0 = $l1 ^ $l0;

        $b4 = $l0 cmp 0L;

        if $b4 < 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow");

        throw $r1;

     label1:
        return $l3;
    }
public abstract boolean equals(java.lang.Object) { 
// no body
} 
    public final java.lang.String getID()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String r1;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return r1;
    }
    public long getMillisKeepLocal(org.joda.time.DateTimeZone, long)
    {
        org.joda.time.DateTimeZone r0, $r1;
        long $l0, $l1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $l0 := @parameter1: long;

        if $r1 != null goto label3;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        if $r1 != r0 goto label2;

        return $l0;

     label2:
        $l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l1, 0, $l0);

        return $l0;

     label3:
        goto label1;
    }
    public final java.lang.String getName(long)
    {
        org.joda.time.DateTimeZone r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>($l0, null);

        return $r1;
    }
    public java.lang.String getName(long, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        long $l0;
        java.util.Locale $r1;
        java.lang.String $r2, $r5;
        org.joda.time.tz.NameProvider $r3;
        boolean $z0;
        org.joda.time.tz.DefaultNameProvider $r4;
        int $i1;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0);

        if $r2 != null goto label2;

        $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r2;

     label2:
        $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>();

        $z0 = $r3 instanceof org.joda.time.tz.DefaultNameProvider;

        if $z0 == 0 goto label4;

        $r4 = (org.joda.time.tz.DefaultNameProvider) $r3;

        $r5 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $z0 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>($l0);

        $r2 = virtualinvoke $r4.<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>($r1, $r5, $r2, $z0);

     label3:
        if $r2 != null goto label5;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $r2 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i1);

        return $r2;

     label4:
        $r5 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $r2 = interfaceinvoke $r3.<org.joda.time.tz.NameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>($r1, $r5, $r2);

        goto label3;

     label5:
        return $r2;
    }
public abstract java.lang.String getNameKey(long) { 
// no body
} 
public abstract int getOffset(long) { 
// no body
} 
    public final int getOffset(org.joda.time.ReadableInstant)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.ReadableInstant $r1;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        if $r1 != null goto label1;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        return $i1;

     label1:
        $l0 = interfaceinvoke $r1.<org.joda.time.ReadableInstant: long getMillis()>();

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        return $i1;
    }
    public int getOffsetFromLocal(long)
    {
        org.joda.time.DateTimeZone r0;
        long $l0, $l1, $l3, $l6, $l7;
        int $i2, $i4, $i5;
        byte $b8;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $l1 = 9223372036854775807L;

        $i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $l3 = (long) $i2;

        $l3 = $l0 - $l3;

        $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3);

        if $i2 == $i4 goto label3;

        $i5 = $i2 - $i4;

        if $i5 >= 0 goto label4;

        $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l3);

        $l3 = $l6;

        $l7 = (long) $i2;

        $l7 = $l0 - $l7;

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label1;

        $l3 = 9223372036854775807L;

     label1:
        $l6 = (long) $i4;

        $l6 = $l0 - $l6;

        $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l6);

        $l7 = (long) $i4;

        $l0 = $l0 - $l7;

        $b8 = $l6 cmp $l0;

        if $b8 != 0 goto label5;

     label2:
        $b8 = $l3 cmp $l1;

        if $b8 == 0 goto label4;

        return $i2;

     label3:
        if $i2 < 0 goto label4;

        $l0 = virtualinvoke r0.<org.joda.time.DateTimeZone: long previousTransition(long)>($l3);

        $b8 = $l0 cmp $l3;

        if $b8 >= 0 goto label4;

        $i5 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $i2 = $i5 - $i2;

        $l0 = $l3 - $l0;

        $l1 = (long) $i2;

        $b8 = $l0 cmp $l1;

        if $b8 <= 0 goto label6;

     label4:
        return $i4;

     label5:
        $l1 = $l6;

        goto label2;

     label6:
        return $i5;
    }
    public final java.lang.String getShortName(long)
    {
        org.joda.time.DateTimeZone r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>($l0, null);

        return $r1;
    }
    public java.lang.String getShortName(long, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        long $l0;
        java.util.Locale $r1;
        java.lang.String $r2, $r5;
        org.joda.time.tz.NameProvider $r3;
        boolean $z0;
        org.joda.time.tz.DefaultNameProvider $r4;
        int $i1;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0);

        if $r2 != null goto label2;

        $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r2;

     label2:
        $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>();

        $z0 = $r3 instanceof org.joda.time.tz.DefaultNameProvider;

        if $z0 == 0 goto label4;

        $r4 = (org.joda.time.tz.DefaultNameProvider) $r3;

        $r5 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $z0 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>($l0);

        $r2 = virtualinvoke $r4.<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>($r1, $r5, $r2, $z0);

     label3:
        if $r2 != null goto label5;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $r2 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i1);

        return $r2;

     label4:
        $r5 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $r2 = interfaceinvoke $r3.<org.joda.time.tz.NameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>($r1, $r5, $r2);

        goto label3;

     label5:
        return $r2;
    }
public abstract int getStandardOffset(long) { 
// no body
} 
    public int hashCode()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 + 57;

        return $i0;
    }
public abstract boolean isFixed() { 
// no body
} 
    public boolean isLocalDateTimeGap(org.joda.time.LocalDateTime)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.LocalDateTime $r1;
        boolean $z0;
        org.joda.time.IllegalInstantException $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 := @parameter0: org.joda.time.LocalDateTime;

        $z0 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isFixed()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        virtualinvoke $r1.<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>(r0);

     label2:
        return 0;

     label3:
        $r2 := @caughtexception;

        return 1;

        catch org.joda.time.IllegalInstantException from label1 to label2 with label3;
    }
    public boolean isStandardOffset(long)
    {
        org.joda.time.DateTimeZone r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.joda.time.DateTimeZone;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getStandardOffset(long)>($l0);

        if $i1 != $i2 goto label1;

        return 1;

     label1:
        return 0;
    }
public abstract long nextTransition(long) { 
// no body
} 
public abstract long previousTransition(long) { 
// no body
} 
    public java.lang.String toString()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        return $r1;
    }
    public java.util.TimeZone toTimeZone()
    {
        org.joda.time.DateTimeZone r0;
        java.util.TimeZone $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r2);

        return $r1;
    }
    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.DateTimeZone$Stub $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = new org.joda.time.DateTimeZone$Stub;

        $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        specialinvoke $r1.<org.joda.time.DateTimeZone$Stub: void <init>(java.lang.String)>($r2);

        return $r1;
    }
