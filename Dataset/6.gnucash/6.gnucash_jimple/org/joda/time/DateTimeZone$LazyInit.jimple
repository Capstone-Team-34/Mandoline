org.joda.time.DateTimeZone$LazyInit extends java.lang.Object
static final java.util.Map CONVERSION_MAP
static final org.joda.time.format.DateTimeFormatter OFFSET_FORMATTER
    static void <clinit>()
    {
        java.util.Map $r0;
        org.joda.time.format.DateTimeFormatter $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>();

        <org.joda.time.DateTimeZone$LazyInit: java.util.Map CONVERSION_MAP> = $r0;

        $r1 = staticinvoke <org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>();

        <org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter OFFSET_FORMATTER> = $r1;

        return;
    }
    void <init>()
    {
        org.joda.time.DateTimeZone$LazyInit r0;

        r0 := @this: org.joda.time.DateTimeZone$LazyInit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static org.joda.time.format.DateTimeFormatter buildFormatter()
    {
        org.joda.time.DateTimeZone$LazyInit$1 $r0;
        org.joda.time.format.DateTimeFormatterBuilder $r1;
        org.joda.time.format.DateTimeFormatter $r2;

        $r0 = new org.joda.time.DateTimeZone$LazyInit$1;

        specialinvoke $r0.<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>();

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>(null, 1, 2, 4);

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>();

        $r2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>($r0);

        return $r2;
    }
    private static java.util.Map buildMap()
    {
        java.util.Map $r0;
        java.util.HashMap $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("GMT", "UTC");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("WET", "WET");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CET", "CET");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MET", "CET");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ECT", "CET");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EET", "EET");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MIT", "Pacific/Apia");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HST", "Pacific/Honolulu");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AST", "America/Anchorage");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PST", "America/Los_Angeles");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MST", "America/Denver");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PNT", "America/Phoenix");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CST", "America/Chicago");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EST", "America/New_York");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IET", "America/Indiana/Indianapolis");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PRT", "America/Puerto_Rico");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CNT", "America/St_Johns");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AGT", "America/Argentina/Buenos_Aires");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BET", "America/Sao_Paulo");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ART", "Africa/Cairo");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CAT", "Africa/Harare");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EAT", "Africa/Addis_Ababa");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NET", "Asia/Yerevan");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PLT", "Asia/Karachi");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IST", "Asia/Kolkata");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BST", "Asia/Dhaka");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("VST", "Asia/Ho_Chi_Minh");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CTT", "Asia/Shanghai");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JST", "Asia/Tokyo");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ACT", "Australia/Darwin");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AET", "Australia/Sydney");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SST", "Pacific/Guadalcanal");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NST", "Pacific/Auckland");

        $r0 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r0;
    }
