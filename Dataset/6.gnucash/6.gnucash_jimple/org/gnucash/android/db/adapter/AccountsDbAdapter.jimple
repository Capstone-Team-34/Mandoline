org.gnucash.android.db.adapter.AccountsDbAdapter extends org.gnucash.android.db.adapter.DatabaseAdapter
public static final java.lang.String ACCOUNT_NAME_SEPARATOR
public static final java.lang.String ROOT_ACCOUNT_FULL_NAME
private final org.gnucash.android.db.adapter.CommoditiesDbAdapter mCommoditiesDbAdapter
private final org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter
    public void <init>(android.database.sqlite.SQLiteDatabase)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String[] $r2;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r3;
        org.gnucash.android.db.adapter.SplitsDbAdapter $r4;
        org.gnucash.android.db.adapter.CommoditiesDbAdapter $r5;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 = newarray (java.lang.String)[13];

        $r2[0] = "name";

        $r2[1] = "description";

        $r2[2] = "type";

        $r2[3] = "currency_code";

        $r2[4] = "color_code";

        $r2[5] = "favorite";

        $r2[6] = "full_name";

        $r2[7] = "is_placeholder";

        $r2[8] = "created_at";

        $r2[9] = "is_hidden";

        $r2[10] = "commodity_uid";

        $r2[11] = "parent_account_uid";

        $r2[12] = "default_transfer_account_uid";

        specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r1, "accounts", $r2);

        $r3 = new org.gnucash.android.db.adapter.TransactionsDbAdapter;

        $r4 = new org.gnucash.android.db.adapter.SplitsDbAdapter;

        specialinvoke $r4.<org.gnucash.android.db.adapter.SplitsDbAdapter: void <init>(android.database.sqlite.SQLiteDatabase)>($r1);

        specialinvoke $r3.<org.gnucash.android.db.adapter.TransactionsDbAdapter: void <init>(android.database.sqlite.SQLiteDatabase,org.gnucash.android.db.adapter.SplitsDbAdapter)>($r1, $r4);

        r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter> = $r3;

        $r5 = new org.gnucash.android.db.adapter.CommoditiesDbAdapter;

        specialinvoke $r5.<org.gnucash.android.db.adapter.CommoditiesDbAdapter: void <init>(android.database.sqlite.SQLiteDatabase)>($r1);

        r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.CommoditiesDbAdapter mCommoditiesDbAdapter> = $r5;

        return;
    }
    public void <init>(android.database.sqlite.SQLiteDatabase, org.gnucash.android.db.adapter.TransactionsDbAdapter)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r2;
        java.lang.String[] $r3;
        org.gnucash.android.db.adapter.CommoditiesDbAdapter $r4;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: org.gnucash.android.db.adapter.TransactionsDbAdapter;

        $r3 = newarray (java.lang.String)[13];

        $r3[0] = "name";

        $r3[1] = "description";

        $r3[2] = "type";

        $r3[3] = "currency_code";

        $r3[4] = "color_code";

        $r3[5] = "favorite";

        $r3[6] = "full_name";

        $r3[7] = "is_placeholder";

        $r3[8] = "created_at";

        $r3[9] = "is_hidden";

        $r3[10] = "commodity_uid";

        $r3[11] = "parent_account_uid";

        $r3[12] = "default_transfer_account_uid";

        specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r1, "accounts", $r3);

        r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter> = $r2;

        $r4 = new org.gnucash.android.db.adapter.CommoditiesDbAdapter;

        specialinvoke $r4.<org.gnucash.android.db.adapter.CommoditiesDbAdapter: void <init>(android.database.sqlite.SQLiteDatabase)>($r1);

        r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.CommoditiesDbAdapter mCommoditiesDbAdapter> = $r4;

        return;
    }
    private org.gnucash.android.model.Account buildSimpleAccountInstance(android.database.Cursor)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.Account r2;
        boolean $z0, $z1;
        int $i0;
        java.lang.String $r3, r4;
        org.gnucash.android.model.AccountType $r5;
        java.util.Currency $r6;
        org.gnucash.android.db.adapter.CommoditiesDbAdapter $r7;
        org.gnucash.android.model.Commodity $r8;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $z0 = 1;

        r2 = new org.gnucash.android.model.Account;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("name");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        specialinvoke r2.<org.gnucash.android.model.Account: void <init>(java.lang.String)>($r3);

        virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: void populateBaseModelAttributes(android.database.Cursor,org.gnucash.android.model.BaseModel)>($r1, r2);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("description");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        r4 = $r3;

        if $r3 != null goto label1;

        r4 = "";

     label1:
        virtualinvoke r2.<org.gnucash.android.model.Account: void setDescription(java.lang.String)>(r4);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("parent_account_uid");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setParentUID(java.lang.String)>($r3);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("type");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r5 = staticinvoke <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType valueOf(java.lang.String)>($r3);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setAccountType(org.gnucash.android.model.AccountType)>($r5);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("currency_code");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r6 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r3);

        $r7 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.CommoditiesDbAdapter mCommoditiesDbAdapter>;

        $r3 = virtualinvoke $r6.<java.util.Currency: java.lang.String getCurrencyCode()>();

        $r8 = virtualinvoke $r7.<org.gnucash.android.db.adapter.CommoditiesDbAdapter: org.gnucash.android.model.Commodity getCommodity(java.lang.String)>($r3);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setCommodity(org.gnucash.android.model.Commodity)>($r8);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("is_placeholder");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        if $i0 != 1 goto label6;

        $z1 = 1;

     label2:
        virtualinvoke r2.<org.gnucash.android.model.Account: void setPlaceHolderFlag(boolean)>($z1);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("default_transfer_account_uid");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setDefaultTransferAccountUID(java.lang.String)>($r3);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("color_code");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        if $r3 == null goto label3;

        virtualinvoke r2.<org.gnucash.android.model.Account: void setColor(java.lang.String)>($r3);

     label3:
        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("favorite");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        if $i0 != 1 goto label7;

        $z1 = 1;

     label4:
        virtualinvoke r2.<org.gnucash.android.model.Account: void setFavorite(boolean)>($z1);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("full_name");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setFullName(java.lang.String)>($r3);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("is_hidden");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        if $i0 != 1 goto label8;

     label5:
        virtualinvoke r2.<org.gnucash.android.model.Account: void setHidden(boolean)>($z0);

        return r2;

     label6:
        $z1 = 0;

        goto label2;

     label7:
        $z1 = 0;

        goto label4;

     label8:
        $z0 = 0;

        goto label5;
    }
    private org.gnucash.android.model.Money computeBalance(java.lang.String, long, long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r2, $r4;
        long $l0, $l1;
        java.lang.StringBuilder $r3;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r5;
        org.gnucash.android.model.AccountType $r6;
        boolean $z0;
        java.util.List $r7;
        int $i2;
        org.gnucash.android.db.adapter.SplitsDbAdapter $r8;
        byte $b3;
        org.gnucash.android.model.Money $r9;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r2 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Computing account balance for account ID ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r4);

        $r5 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r2 = virtualinvoke $r5.<org.gnucash.android.db.adapter.TransactionsDbAdapter: java.lang.String getAccountCurrencyCode(java.lang.String)>($r1);

        $r6 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.AccountType getAccountType(java.lang.String)>($r1);

        $z0 = virtualinvoke $r6.<org.gnucash.android.model.AccountType: boolean hasDebitNormalBalance()>();

        $r7 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.util.List getDescendantAccountUIDs(java.lang.String,java.lang.String,java.lang.String[])>($r1, null, null);

        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, $r1);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("all account list : ");

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, $r4);

        $r5 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r8 = virtualinvoke $r5.<org.gnucash.android.db.adapter.TransactionsDbAdapter: org.gnucash.android.db.adapter.SplitsDbAdapter getSplitDbAdapter()>();

        $b3 = $l0 cmp -1L;

        if $b3 != 0 goto label1;

        $b3 = $l1 cmp -1L;

        if $b3 != 0 goto label1;

        $r9 = virtualinvoke $r8.<org.gnucash.android.db.adapter.SplitsDbAdapter: org.gnucash.android.model.Money computeSplitBalance(java.util.List,java.lang.String,boolean)>($r7, $r2, $z0);

        return $r9;

     label1:
        $r9 = virtualinvoke $r8.<org.gnucash.android.db.adapter.SplitsDbAdapter: org.gnucash.android.model.Money computeSplitBalance(java.util.List,java.lang.String,boolean,long,long)>($r7, $r2, $z0, $l0, $l1);

        return $r9;
    }
    private java.lang.String convertToRGBHexString(int)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.String $r3;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $i0 = 16777215 & $i0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("#%06X", $r1);

        return $r3;
    }
    public static int getActiveAccountColorResource(java.lang.String)
    {
        java.lang.String $r0, r2, $r3;
        org.gnucash.android.db.adapter.AccountsDbAdapter $r1;
        int i0;
        long $l1;
        android.content.Context $r4;
        android.content.res.Resources $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.AccountsDbAdapter getInstance()>();

        r2 = null;

        i0 = -1;

     label1:
        if $r0 == null goto label2;

        $l1 = virtualinvoke $r1.<org.gnucash.android.db.adapter.AccountsDbAdapter: long getID(java.lang.String)>($r0);

        $r3 = virtualinvoke $r1.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAccountColorCode(long)>($l1);

        r2 = $r3;

        if $r3 == null goto label3;

        i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>($r3);

     label2:
        if r2 != null goto label4;

        $r4 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r5.<android.content.res.Resources: int getColor(int)>(2131624106);

        return i0;

     label3:
        $r0 = virtualinvoke $r1.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getParentAccountUID(java.lang.String)>($r0);

        goto label1;

     label4:
        return i0;
    }
    public static java.lang.String getImbalanceAccountName(java.util.Currency)
    {
        java.util.Currency $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.util.Currency;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getImbalanceAccountPrefix()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r0.<java.util.Currency: java.lang.String getCurrencyCode()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public static java.lang.String getImbalanceAccountPrefix()
    {
        java.lang.StringBuilder $r0;
        android.content.Context $r1;
        java.lang.String $r2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131296323);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public static org.gnucash.android.db.adapter.AccountsDbAdapter getInstance()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter $r0;

        $r0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: org.gnucash.android.db.adapter.AccountsDbAdapter getAccountsDbAdapter()>();

        return $r0;
    }
    public static java.lang.String getOpeningBalanceAccountFullName()
    {
        android.content.Context $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.StringBuilder $r2;

        $r0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131296257);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131296258);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131296258);

        return $r1;
    }
    public void addRecord(org.gnucash.android.model.Account, org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        org.gnucash.android.model.Account $r1;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r2;
        java.lang.String $r3, $r8;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r4;
        java.util.List $r5, $r9;
        org.gnucash.android.model.AccountType $r6, $r7;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        org.gnucash.android.model.Transaction r12;
        org.gnucash.android.model.Commodity $r13;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.Account;

        $r2 := @parameter1: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod;

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r3, "Replace account to db");

        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r3 = virtualinvoke $r1.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        $r5 = virtualinvoke $r4.<org.gnucash.android.db.adapter.TransactionsDbAdapter: java.util.List getScheduledTransactionsForAccount(java.lang.String)>($r3);

        specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: void addRecord(org.gnucash.android.model.BaseModel,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>($r1, $r2);

        $r3 = virtualinvoke $r1.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        $r6 = virtualinvoke $r1.<org.gnucash.android.model.Account: org.gnucash.android.model.AccountType getAccountType()>();

        $r7 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        if $r6 == $r7 goto label4;

        $r8 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getFullyQualifiedAccountName(java.lang.String)>($r3);

        virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: int updateRecord(java.lang.String,java.lang.String,java.lang.String)>($r3, "full_name", $r8);

        $r9 = virtualinvoke $r1.<org.gnucash.android.model.Account: java.util.List getTransactions()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.gnucash.android.model.Transaction) $r11;

        $r13 = virtualinvoke $r1.<org.gnucash.android.model.Account: org.gnucash.android.model.Commodity getCommodity()>();

        virtualinvoke r12.<org.gnucash.android.model.Transaction: void setCommodity(org.gnucash.android.model.Commodity)>($r13);

        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        virtualinvoke $r4.<org.gnucash.android.db.adapter.TransactionsDbAdapter: void addRecord(org.gnucash.android.model.Transaction,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r12, $r2);

        goto label1;

     label2:
        $r10 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.gnucash.android.model.Transaction) $r11;

        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r2 = <org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod update>;

        virtualinvoke $r4.<org.gnucash.android.db.adapter.TransactionsDbAdapter: void addRecord(org.gnucash.android.model.Transaction,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r12, $r2);

        goto label3;

     label4:
        return;
    }
    public volatile void addRecord(org.gnucash.android.model.BaseModel, org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r1;
        org.gnucash.android.model.BaseModel $r2;
        org.gnucash.android.model.Account $r3;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r2 := @parameter0: org.gnucash.android.model.BaseModel;

        $r1 := @parameter1: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod;

        $r3 = (org.gnucash.android.model.Account) $r2;

        virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: void addRecord(org.gnucash.android.model.Account,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>($r3, $r1);

        return;
    }
    public org.gnucash.android.model.Account buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.Account $r2;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r3;
        java.lang.String $r4;
        java.util.List $r5;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $r2 = specialinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Account buildSimpleAccountInstance(android.database.Cursor)>($r1);

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r4 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        $r5 = virtualinvoke $r3.<org.gnucash.android.db.adapter.TransactionsDbAdapter: java.util.List getAllTransactionsForAccount(java.lang.String)>($r4);

        virtualinvoke $r2.<org.gnucash.android.model.Account: void setTransactions(java.util.List)>($r5);

        return $r2;
    }
    public volatile org.gnucash.android.model.BaseModel buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.Account $r2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Account buildModelInstance(android.database.Cursor)>($r1);

        return $r2;
    }
    public long bulkAddRecords(java.util.List, org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.util.List r1, $r7;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r2;
        java.util.ArrayList r3;
        int $i0;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.gnucash.android.model.Account r6;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r8;
        java.lang.String $r9;
        long $l1;
        byte $b2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod;

        r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i0 = $i0 * 2;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.gnucash.android.model.Account) $r5;

        $r7 = virtualinvoke r6.<org.gnucash.android.model.Account: java.util.List getTransactions()>();

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r8 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r9 = virtualinvoke r6.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        $r7 = virtualinvoke $r8.<org.gnucash.android.db.adapter.TransactionsDbAdapter: java.util.List getScheduledTransactionsForAccount(java.lang.String)>($r9);

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label1;

     label2:
        $l1 = specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: long bulkAddRecords(java.util.List,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r1, $r2);

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r8 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        virtualinvoke $r8.<org.gnucash.android.db.adapter.TransactionsDbAdapter: long bulkAddRecords(java.util.List,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r3, $r2);

     label3:
        return $l1;
    }
    public java.lang.String createAccountHierarchy(java.lang.String, org.gnucash.android.model.AccountType)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, r5, r8, $r10;
        org.gnucash.android.model.AccountType $r2;
        org.gnucash.android.model.Account r3;
        java.util.ArrayList r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.String[] $r7;
        int $i0, $i1;
        java.lang.StringBuilder $r9;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r11;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.gnucash.android.model.AccountType;

        r5 = "";

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fullName cannot be empty");

        throw $r6;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getOrCreateGnuCashRootAccountUID()>();

        r8 = "";

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r7;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        r5 = $r7[$i1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String findAccountUidByFullName(java.lang.String)>(r8);

        if $r10 == null goto label4;

        $r1 = $r10;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

        goto label2;

     label4:
        r3 = new org.gnucash.android.model.Account;

        specialinvoke r3.<org.gnucash.android.model.Account: void <init>(java.lang.String)>(r5);

        virtualinvoke r3.<org.gnucash.android.model.Account: void setAccountType(org.gnucash.android.model.AccountType)>($r2);

        virtualinvoke r3.<org.gnucash.android.model.Account: void setParentUID(java.lang.String)>($r1);

        virtualinvoke r3.<org.gnucash.android.model.Account: void setFullName(java.lang.String)>(r8);

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        $r1 = virtualinvoke r3.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        goto label3;

     label5:
        $i0 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label6;

        $r11 = <org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod insert>;

        virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: long bulkAddRecords(java.util.List,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r4, $r11);

     label6:
        return $r1;
    }
    public int deleteAllRecords()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("prices", null, null);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("splits", null, null);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("transactions", null, null);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("scheduled_actions", null, null);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("budget_amounts", null, null);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("budgets", null, null);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("recurrences", null, null);

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $i0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("accounts", null, null);

        return $i0;
    }
    public boolean deleteRecord(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r3;
        android.content.ContentValues r2;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.String[] $r5;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: boolean deleteRecord(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        virtualinvoke r2.<android.content.ContentValues: void putNull(java.lang.String)>("default_transfer_account_uid");

        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String mTableName>;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = $r1;

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>($r3, r2, "default_transfer_account_uid=?", $r5);

     label1:
        return $z0;
    }
    public android.database.Cursor fetchAccounts(java.lang.String, java.lang.String[], java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r3, $r4, $r6;
        java.lang.String[] $r2;
        java.lang.StringBuilder $r5;
        android.database.sqlite.SQLiteDatabase $r7;
        android.database.Cursor $r8;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        if $r3 != null goto label1;

        $r3 = "name ASC";

     label1:
        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetching all accounts from db where ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" order by ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r4, $r6);

        $r7 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r8 = virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", null, $r1, $r2, null, null, $r3);

        return $r8;
    }
    public android.database.Cursor fetchAccountsOrderedByFullName(java.lang.String, java.lang.String[])
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r3, $r5;
        java.lang.String[] $r2;
        java.lang.StringBuilder $r4;
        android.database.sqlite.SQLiteDatabase $r6;
        android.database.Cursor $r7;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetching all accounts from db where ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r3, $r5);

        $r6 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r7 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", null, $r1, $r2, null, null, "full_name ASC");

        return $r7;
    }
    public android.database.Cursor fetchAllRecords()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3;
        org.gnucash.android.model.AccountType $r4;
        android.database.Cursor $r5;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r1, "Fetching all accounts from db");

        $r2 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = newarray (java.lang.String)[1];

        $r4 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        $r1 = virtualinvoke $r4.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r3[0] = $r1;

        $r5 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", null, "is_hidden = 0 AND type != ?", $r3, null, null, "name ASC");

        return $r5;
    }
    public android.database.Cursor fetchAllRecordsOrderedByFullName()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3;
        org.gnucash.android.model.AccountType $r4;
        android.database.Cursor $r5;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r1, "Fetching all accounts from db");

        $r2 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = newarray (java.lang.String)[1];

        $r4 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        $r1 = virtualinvoke $r4.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r3[0] = $r1;

        $r5 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", null, "is_hidden = 0 AND type != ?", $r3, null, null, "full_name ASC");

        return $r5;
    }
    public android.database.Cursor fetchFavoriteAccounts()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.Cursor $r1;
        java.lang.String $r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r2 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r2, "Fetching favorite accounts from db");

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r1 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", null, "favorite = 1", null, null, null, "name ASC");

        return $r1;
    }
    public android.database.Cursor fetchRecentAccounts(int)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String[] $r2;
        java.lang.String $r3;
        android.database.Cursor $r4;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $i0 := @parameter0: int;

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "accounts.*";

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r4 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("transactions LEFT OUTER JOIN splits ON transactions.uid = splits.transaction_uid , accounts ON splits.account_uid = accounts.uid", $r2, "is_hidden = 0", null, "splits.account_uid", null, "MAX ( transactions.timestamp ) DESC", $r3);

        return $r4;
    }
    public android.database.Cursor fetchSubAccounts(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.StringBuilder $r3;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.String[] $r6;
        android.database.Cursor $r7;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetching sub accounts for account id ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r2, $r4);

        $r5 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = $r1;

        $r7 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", null, "is_hidden = 0 AND parent_account_uid = ?", $r6, null, null, "name ASC");

        return $r7;
    }
    public android.database.Cursor fetchTopLevelAccounts()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        org.gnucash.android.model.AccountType $r3;
        android.database.Cursor $r4;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 = newarray (java.lang.String)[2];

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getOrCreateGnuCashRootAccountUID()>();

        $r1[0] = $r2;

        $r3 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        $r2 = virtualinvoke $r3.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r1[1] = $r2;

        $r4 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.Cursor fetchAccounts(java.lang.String,java.lang.String[],java.lang.String)>("(parent_account_uid IS NULL OR parent_account_uid = ?) AND is_hidden = 0 AND type != ?", $r1, "name ASC");

        return $r4;
    }
    public java.lang.String findAccountUidByFullName(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r4;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r5;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r6;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "uid";

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("accounts", $r2, "full_name= ?", $r4, null, null, null, "1");

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $i0 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label4:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $r1;

     label5:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return null;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }
    public org.gnucash.android.model.Money getAccountBalance(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        org.gnucash.android.model.Money $r2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Money computeBalance(java.lang.String,long,long)>($r1, -1L, -1L);

        return $r2;
    }
    public org.gnucash.android.model.Money getAccountBalance(java.lang.String, long, long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        long $l0, $l1;
        org.gnucash.android.model.Money $r2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r2 = specialinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Money computeBalance(java.lang.String,long,long)>($r1, $l0, $l1);

        return $r2;
    }
    public org.gnucash.android.model.Money getAccountBalance(java.util.List, long, long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.util.List r1;
        long $l0, $l1;
        java.lang.String $r2;
        org.gnucash.android.model.Money $r3, $r7;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.gnucash.android.model.AccountType r6;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        r1 := @parameter0: java.util.List;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r2 = staticinvoke <org.gnucash.android.app.GnuCashApplication: java.lang.String getDefaultCurrencyCode()>();

        $r3 = staticinvoke <org.gnucash.android.model.Money: org.gnucash.android.model.Money createZeroInstance(java.lang.String)>($r2);

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.gnucash.android.model.AccountType) $r5;

        $r7 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Money getAccountBalance(org.gnucash.android.model.AccountType,long,long)>(r6, $l0, $l1);

        $r3 = virtualinvoke $r3.<org.gnucash.android.model.Money: org.gnucash.android.model.Money add(org.gnucash.android.model.Money)>($r7);

        goto label1;

     label2:
        return $r3;
    }
    public org.gnucash.android.model.Money getAccountBalance(org.gnucash.android.model.AccountType, long, long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        org.gnucash.android.model.AccountType $r1;
        long $l0, $l1;
        java.util.ArrayList r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r6, $r8;
        android.database.Cursor $r5;
        boolean $z0;
        int $i2;
        java.lang.StringBuilder $r7;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r9;
        org.gnucash.android.db.adapter.SplitsDbAdapter $r10;
        byte $b3;
        org.gnucash.android.model.Money $r11;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.AccountType;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r3 = newarray (java.lang.String)[1];

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.Cursor fetchAccounts(java.lang.String,java.lang.String[],java.lang.String)>("type= ?", $r3, null);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        $i2 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r4 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i2);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        $z0 = virtualinvoke $r1.<org.gnucash.android.model.AccountType: boolean hasDebitNormalBalance()>();

        $r4 = staticinvoke <org.gnucash.android.app.GnuCashApplication: java.lang.String getDefaultCurrencyCode()>();

        $r6 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("all account list : ");

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, $r8);

        $r9 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r10 = virtualinvoke $r9.<org.gnucash.android.db.adapter.TransactionsDbAdapter: org.gnucash.android.db.adapter.SplitsDbAdapter getSplitDbAdapter()>();

        $b3 = $l0 cmp -1L;

        if $b3 != 0 goto label3;

        $b3 = $l1 cmp -1L;

        if $b3 != 0 goto label3;

        $r11 = virtualinvoke $r10.<org.gnucash.android.db.adapter.SplitsDbAdapter: org.gnucash.android.model.Money computeSplitBalance(java.util.List,java.lang.String,boolean)>(r2, $r4, $z0);

        return $r11;

     label3:
        $r11 = virtualinvoke $r10.<org.gnucash.android.db.adapter.SplitsDbAdapter: org.gnucash.android.model.Money computeSplitBalance(java.util.List,java.lang.String,boolean,long,long)>(r2, $r4, $z0, $l0, $l1);

        return $r11;
    }
    public java.lang.String getAccountColorCode(long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        long $l0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String[] $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.database.Cursor $r5;
        boolean $z0;
        int $i1;
        java.lang.Throwable $r6;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $l0 := @parameter0: long;

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "_id";

        $r2[1] = "color_code";

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r2, $r4, null, null, null, null);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $i1 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("color_code");

        $r4 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label4:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $r4;

     label5:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return null;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }
    public java.lang.String getAccountFullName(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3, $r4;
        android.database.Cursor $r5;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "full_name";

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r3, "uid = ?", $r4, null, null, null);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $i0 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("full_name");

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label4:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $r1;

     label5:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("account UID: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label6:
        $r8 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }
    public java.lang.String getAccountName(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAttribute(java.lang.String,java.lang.String)>($r1, "name");

        return $r1;
    }
    public org.gnucash.android.model.AccountType getAccountType(long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        long $l0;
        java.lang.String $r1;
        org.gnucash.android.model.AccountType $r2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getUID(long)>($l0);

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.AccountType getAccountType(java.lang.String)>($r1);

        return $r2;
    }
    public org.gnucash.android.model.Money getAccountsBalance(java.util.List, long, long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.util.List r1;
        long $l0, $l1;
        java.lang.String $r2, $r5;
        org.gnucash.android.model.Money $r3, $r9;
        boolean $z0;
        java.lang.Object $r4;
        org.gnucash.android.model.AccountType $r6;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r7;
        org.gnucash.android.db.adapter.SplitsDbAdapter $r8;
        byte $b2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        r1 := @parameter0: java.util.List;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r2 = staticinvoke <org.gnucash.android.app.GnuCashApplication: java.lang.String getDefaultCurrencyCode()>();

        $r3 = staticinvoke <org.gnucash.android.model.Money: org.gnucash.android.model.Money createZeroInstance(java.lang.String)>($r2);

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.AccountType getAccountType(java.lang.String)>($r5);

        $z0 = virtualinvoke $r6.<org.gnucash.android.model.AccountType: boolean hasDebitNormalBalance()>();

        $r7 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r8 = virtualinvoke $r7.<org.gnucash.android.db.adapter.TransactionsDbAdapter: org.gnucash.android.db.adapter.SplitsDbAdapter getSplitDbAdapter()>();

        $b2 = $l0 cmp -1L;

        if $b2 != 0 goto label3;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label3;

        $r9 = virtualinvoke $r8.<org.gnucash.android.db.adapter.SplitsDbAdapter: org.gnucash.android.model.Money computeSplitBalance(java.util.List,java.lang.String,boolean)>(r1, $r2, $z0);

     label2:
        $r3 = virtualinvoke $r3.<org.gnucash.android.model.Money: org.gnucash.android.model.Money add(org.gnucash.android.model.Money)>($r9);

        return $r3;

     label3:
        $r9 = virtualinvoke $r8.<org.gnucash.android.db.adapter.SplitsDbAdapter: org.gnucash.android.model.Money computeSplitBalance(java.util.List,java.lang.String,boolean,long,long)>(r1, $r2, $z0, $l0, $l1);

        goto label2;
    }
    public java.util.List getAllOpeningBalanceTransactions()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.util.ArrayList r1, r2;
        org.gnucash.android.model.Split r3;
        org.gnucash.android.model.Transaction r4;
        android.database.Cursor $r5;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r6;
        org.gnucash.android.db.adapter.SplitsDbAdapter $r7;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.String $r8, $r9, $r15;
        org.gnucash.android.model.AccountType $r10;
        org.gnucash.android.model.Money $r11;
        java.math.BigDecimal $r12, $r13;
        android.content.Context $r14;
        org.gnucash.android.model.TransactionType $r16;
        java.lang.Throwable $r17;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r5 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.Cursor fetchAccounts(java.lang.String,java.lang.String[],java.lang.String)>(null, null, null);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $r6 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        $r7 = virtualinvoke $r6.<org.gnucash.android.db.adapter.TransactionsDbAdapter: org.gnucash.android.db.adapter.SplitsDbAdapter getSplitDbAdapter()>();

     label2:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label9;

     label4:
        $i0 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_id");

        $l1 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>($i0);

        $r8 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getUID(long)>($l1);

        $r9 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getCurrencyCode(java.lang.String)>($r8);

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r10 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.AccountType getAccountType(java.lang.String)>($r8);

        $z0 = virtualinvoke $r10.<org.gnucash.android.model.AccountType: boolean hasDebitNormalBalance()>();

        $r11 = virtualinvoke $r7.<org.gnucash.android.db.adapter.SplitsDbAdapter: org.gnucash.android.model.Money computeSplitBalance(java.util.List,java.lang.String,boolean)>(r1, $r9, $z0);

        $r12 = virtualinvoke $r11.<org.gnucash.android.model.Money: java.math.BigDecimal asBigDecimal()>();

        $r13 = new java.math.BigDecimal;

        specialinvoke $r13.<java.math.BigDecimal: void <init>(int)>(0);

        $i0 = virtualinvoke $r12.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r13);

     label5:
        if $i0 == 0 goto label2;

     label6:
        r4 = new org.gnucash.android.model.Transaction;

        $r14 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.String getString(int)>(2131296258);

        specialinvoke r4.<org.gnucash.android.model.Transaction: void <init>(java.lang.String)>($r15);

        $r15 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAccountName(java.lang.String)>($r8);

        virtualinvoke r4.<org.gnucash.android.model.Transaction: void setNote(java.lang.String)>($r15);

        virtualinvoke r4.<org.gnucash.android.model.Transaction: void setCurrencyCode(java.lang.String)>($r9);

        $r10 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.AccountType getAccountType(java.lang.String)>($r8);

        $z0 = virtualinvoke $r11.<org.gnucash.android.model.Money: boolean isNegative()>();

        $r16 = staticinvoke <org.gnucash.android.model.Transaction: org.gnucash.android.model.TransactionType getTypeForBalance(org.gnucash.android.model.AccountType,boolean)>($r10, $z0);

        r3 = new org.gnucash.android.model.Split;

        $r11 = virtualinvoke $r11.<org.gnucash.android.model.Money: org.gnucash.android.model.Money abs()>();

        specialinvoke r3.<org.gnucash.android.model.Split: void <init>(org.gnucash.android.model.Money,java.lang.String)>($r11, $r8);

        virtualinvoke r3.<org.gnucash.android.model.Split: void setType(org.gnucash.android.model.TransactionType)>($r16);

        virtualinvoke r4.<org.gnucash.android.model.Transaction: void addSplit(org.gnucash.android.model.Split)>(r3);

        $r8 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getOrCreateOpeningBalanceAccountUID()>();

        r3 = virtualinvoke r3.<org.gnucash.android.model.Split: org.gnucash.android.model.Split createPair(java.lang.String)>($r8);

        virtualinvoke r4.<org.gnucash.android.model.Transaction: void addSplit(org.gnucash.android.model.Split)>(r3);

        virtualinvoke r4.<org.gnucash.android.model.Transaction: void setExported(boolean)>(1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label7:
        goto label2;

     label8:
        $r17 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r17;

     label9:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
    public java.util.List getCurrenciesInUse()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String[] $r1;
        java.util.ArrayList r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r4;
        boolean $z0;
        int $i0;
        java.lang.String $r5;
        java.util.Currency $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "currency_code";

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(1, "accounts", $r1, null, null, null, null, null, null);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("currency_code");

        $r5 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r6 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        goto label1;

     label5:
        $r7 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        throw $r7;

     label6:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public java.lang.String getCurrencyCode(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAccountCurrencyCode(java.lang.String)>($r1);

        return $r1;
    }
    public long getDefaultTransferAccountID(long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        long $l0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String[] $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.database.Cursor $r5;
        boolean $z0;
        int $i1;
        java.lang.Throwable $r6;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $l0 := @parameter0: long;

        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "default_transfer_account_uid";

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r2, $r4, null, null, null, null);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label7;

     label3:
        $i1 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("default_transfer_account_uid");

        $r4 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label4:
        if $r4 != null goto label5;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return 0L;

     label5:
        $l0 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: long getID(java.lang.String)>($r4);

     label6:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $l0;

     label7:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return 0L;

     label8:
        $r6 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }
    public java.util.List getDescendantAccountUIDs(java.lang.String, java.lang.String, java.lang.String[])
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r2;
        java.lang.String[] $r3, $r7;
        java.util.ArrayList r4, r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.StringBuilder $r8, $r11;
        android.database.Cursor $r9;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r10;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label01:
        $r6 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "uid";

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parent_account_uid IN ( \'");

        $r1 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("\' , \'", r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' )");

        if $r2 != null goto label09;

        $r1 = "";

     label02:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r7, $r1, $r3, null, null, null);

        virtualinvoke r5.<java.util.ArrayList: void clear()>();

        if $r9 == null goto label11;

     label03:
        $i0 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

     label04:
        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToNext()>();

     label05:
        if $z0 == 0 goto label10;

     label06:
        $r1 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label07:
        goto label04;

     label08:
        $r10 := @caughtexception;

        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        throw $r10;

     label09:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label02;

     label10:
        interfaceinvoke $r9.<android.database.Cursor: void close()>();

     label11:
        $i0 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label12;

        virtualinvoke r4.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r5);

        goto label01;

     label12:
        return r4;

        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
    }
    public java.util.List getExportableAccounts(java.sql.Timestamp)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.sql.Timestamp $r1;
        java.lang.String[] $r2, $r5;
        java.util.LinkedList r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.String $r6;
        android.database.Cursor $r7;
        boolean $z0;
        org.gnucash.android.model.Account $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.sql.Timestamp;

        r3 = new java.util.LinkedList;

        specialinvoke r3.<java.util.LinkedList: void <init>()>();

        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "accounts.*";

        $r5 = newarray (java.lang.String)[1];

        $r6 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.lang.String getUtcStringFromTimestamp(java.sql.Timestamp)>($r1);

        $r5[0] = $r6;

        $r7 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("transactions , splits ON transactions.uid = splits.transaction_uid , accounts ON accounts.uid = splits.account_uid", $r2, "transactions.modified_at > ?", $r5, "accounts.uid", null, null);

     label1:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r8 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Account buildModelInstance(android.database.Cursor)>($r7);

        virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r8);

     label4:
        goto label1;

     label5:
        $r9 := @caughtexception;

        interfaceinvoke $r7.<android.database.Cursor: void close()>();

        throw $r9;

     label6:
        interfaceinvoke $r7.<android.database.Cursor: void close()>();

        return r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public java.lang.String getFullyQualifiedAccountName(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAccountName(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getParentAccountUID(java.lang.String)>($r1);

        if $r1 == null goto label2;

        $r3 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getOrCreateGnuCashRootAccountUID()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getFullyQualifiedAccountName(java.lang.String)>($r1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label2:
        return $r2;
    }
    public java.lang.String getImbalanceAccountUID(java.util.Currency)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.util.Currency $r1;
        java.lang.String $r2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.util.Currency;

        $r2 = staticinvoke <org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getImbalanceAccountName(java.util.Currency)>($r1);

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String findAccountUidByFullName(java.lang.String)>($r2);

        return $r2;
    }
    public java.lang.String getOrCreateGnuCashRootAccountUID()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.content.ContentValues r1;
        org.gnucash.android.model.Account r2;
        byte $b0;
        java.lang.String[] $r3;
        org.gnucash.android.model.AccountType $r4;
        java.lang.String $r5;
        android.database.Cursor $r6;
        boolean $z0;
        int $i1;
        org.gnucash.android.db.adapter.CommoditiesDbAdapter $r7;
        android.database.sqlite.SQLiteDatabase $r8;
        org.gnucash.android.model.Commodity $r9;
        java.lang.Integer $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $b0 = 1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        $r5 = virtualinvoke $r4.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r3[0] = $r5;

        $r6 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.Cursor fetchAccounts(java.lang.String,java.lang.String[],java.lang.String)>("type= ?", $r3, null);

     label1:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $i1 = interfaceinvoke $r6.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r5 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label4:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        return $r5;

     label5:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        r2 = new org.gnucash.android.model.Account;

        $r7 = new org.gnucash.android.db.adapter.CommoditiesDbAdapter;

        $r8 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        specialinvoke $r7.<org.gnucash.android.db.adapter.CommoditiesDbAdapter: void <init>(android.database.sqlite.SQLiteDatabase)>($r8);

        $r9 = virtualinvoke $r7.<org.gnucash.android.db.adapter.CommoditiesDbAdapter: org.gnucash.android.model.Commodity getCommodity(java.lang.String)>("USD");

        specialinvoke r2.<org.gnucash.android.model.Account: void <init>(java.lang.String,org.gnucash.android.model.Commodity)>("ROOT Account", $r9);

        $r4 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        virtualinvoke r2.<org.gnucash.android.model.Account: void setAccountType(org.gnucash.android.model.AccountType)>($r4);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setFullName(java.lang.String)>(" ");

        virtualinvoke r2.<org.gnucash.android.model.Account: void setHidden(boolean)>(1);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setPlaceHolderFlag(boolean)>(1);

        r1 = new android.content.ContentValues;

        specialinvoke r1.<android.content.ContentValues: void <init>()>();

        $r5 = virtualinvoke r2.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uid", $r5);

        $r5 = virtualinvoke r2.<org.gnucash.android.model.Account: java.lang.String getName()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r5);

        $r5 = virtualinvoke r2.<org.gnucash.android.model.Account: java.lang.String getFullName()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("full_name", $r5);

        $r4 = virtualinvoke r2.<org.gnucash.android.model.Account: org.gnucash.android.model.AccountType getAccountType()>();

        $r5 = virtualinvoke $r4.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r5);

        $z0 = virtualinvoke r2.<org.gnucash.android.model.Account: boolean isHidden()>();

        if $z0 == 0 goto label8;

     label6:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_hidden", $r10);

        $r5 = staticinvoke <org.gnucash.android.app.GnuCashApplication: java.lang.String getDefaultCurrencyCode()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("currency_code", $r5);

        $r5 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getCommodityUID(java.lang.String)>($r5);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("commodity_uid", $r5);

        $r5 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r5, "Creating ROOT account");

        $r8 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", null, r1);

        $r5 = virtualinvoke r2.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        return $r5;

     label7:
        $r11 := @caughtexception;

        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        throw $r11;

     label8:
        $b0 = 0;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }
    public java.lang.String getOrCreateImbalanceAccountUID(java.util.Currency)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.util.Currency $r1;
        org.gnucash.android.model.Account r2;
        java.lang.String $r3, $r5;
        org.gnucash.android.db.adapter.CommoditiesDbAdapter $r4;
        org.gnucash.android.model.Commodity $r6;
        org.gnucash.android.model.AccountType $r7;
        boolean $z0;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r8;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.util.Currency;

        $r3 = staticinvoke <org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getImbalanceAccountName(java.util.Currency)>($r1);

        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.CommoditiesDbAdapter mCommoditiesDbAdapter>;

        $r5 = virtualinvoke $r1.<java.util.Currency: java.lang.String getCurrencyCode()>();

        $r6 = virtualinvoke $r4.<org.gnucash.android.db.adapter.CommoditiesDbAdapter: org.gnucash.android.model.Commodity getCommodity(java.lang.String)>($r5);

        $r5 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String findAccountUidByFullName(java.lang.String)>($r3);

        if $r5 != null goto label3;

        r2 = new org.gnucash.android.model.Account;

        specialinvoke r2.<org.gnucash.android.model.Account: void <init>(java.lang.String,org.gnucash.android.model.Commodity)>($r3, $r6);

        $r7 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType BANK>;

        virtualinvoke r2.<org.gnucash.android.model.Account: void setAccountType(org.gnucash.android.model.AccountType)>($r7);

        $r3 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getOrCreateGnuCashRootAccountUID()>();

        virtualinvoke r2.<org.gnucash.android.model.Account: void setParentUID(java.lang.String)>($r3);

        $z0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: boolean isDoubleEntryEnabled()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        virtualinvoke r2.<org.gnucash.android.model.Account: void setHidden(boolean)>($z0);

        virtualinvoke r2.<org.gnucash.android.model.Account: void setColor(java.lang.String)>("#964B00");

        $r8 = <org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod insert>;

        virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: void addRecord(org.gnucash.android.model.Account,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r2, $r8);

        $r3 = virtualinvoke r2.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        return $r3;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return $r5;
    }
    public java.lang.String getOrCreateOpeningBalanceAccountUID()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        org.gnucash.android.model.AccountType $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r2 = staticinvoke <org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getOpeningBalanceAccountFullName()>();

        $r3 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String findAccountUidByFullName(java.lang.String)>($r2);

        if $r3 != null goto label1;

        $r1 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType EQUITY>;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String createAccountHierarchy(java.lang.String,org.gnucash.android.model.AccountType)>($r2, $r1);

        return $r2;

     label1:
        return $r3;
    }
    public java.lang.String getParentAccountUID(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r4;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r5;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r6;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "parent_account_uid";

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("accounts", $r2, "uid = ?", $r4, null, null, null, null);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $r1 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, "Found parent account UID, returning value");

        $i0 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("parent_account_uid");

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label4:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $r1;

     label5:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return null;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }
    public java.util.List getSimpleAccountList()
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.util.LinkedList r1;
        android.database.Cursor $r2;
        boolean $z0;
        org.gnucash.android.model.Account $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        r1 = new java.util.LinkedList;

        specialinvoke r1.<java.util.LinkedList: void <init>()>();

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.Cursor fetchAccounts(java.lang.String,java.lang.String[],java.lang.String)>(null, null, "full_name ASC");

     label1:
        $z0 = interfaceinvoke $r2.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r3 = specialinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Account buildSimpleAccountInstance(android.database.Cursor)>($r2);

        virtualinvoke r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

     label4:
        goto label1;

     label5:
        $r4 := @caughtexception;

        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw $r4;

     label6:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public java.util.List getSimpleAccountList(java.lang.String, java.lang.String[], java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r3;
        java.lang.String[] $r2;
        java.util.LinkedList r4;
        android.database.Cursor $r5;
        boolean $z0;
        org.gnucash.android.model.Account $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        r4 = new java.util.LinkedList;

        specialinvoke r4.<java.util.LinkedList: void <init>()>();

        $r5 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.Cursor fetchAccounts(java.lang.String,java.lang.String[],java.lang.String)>($r1, $r2, $r3);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r6 = specialinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.Account buildSimpleAccountInstance(android.database.Cursor)>($r5);

        virtualinvoke r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

     label4:
        goto label1;

     label5:
        $r7 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r7;

     label6:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public int getSubAccountCount(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3;
        android.database.Cursor $r4;
        int $i0;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r1;

        $r4 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT COUNT(*) FROM accounts WHERE parent_account_uid = ?", $r3);

        interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>(0);

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return $i0;
    }
    public int getTransactionMaxSplitNum(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r4;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r5;
        boolean $z0;
        long $l0;
        int $i1;
        java.lang.Throwable $r6;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "MAX(trans_split_count)";

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("trans_extra_info", $r2, "trans_acct_t_uid IN ( SELECT DISTINCT transactions_uid FROM trans_split_acct WHERE accounts_uid = ? )", $r4, null, null, null);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(0);

     label4:
        $i1 = (int) $l0;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $i1;

     label5:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return 0;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }
    public boolean isFavoriteAccount(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAttribute(java.lang.String,java.lang.String)>($r1, "favorite");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isHiddenAccount(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAttribute(java.lang.String,java.lang.String)>($r1, "is_hidden");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isPlaceholderAccount(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAttribute(java.lang.String,java.lang.String)>($r1, "is_placeholder");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int markAsExported(java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1;
        android.content.ContentValues r2;
        java.lang.Integer $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.String[] $r5;
        int $i0;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_exported", $r3);

        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = $r1;

        $i0 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("transactions", r2, "uid IN ( SELECT DISTINCT transactions.uid FROM transactions , splits ON transactions.uid = splits.transaction_uid , accounts ON splits.account_uid = accounts.uid WHERE accounts.uid = ?  ) ", $r5);

        return $i0;
    }
    public void reassignDescendantAccounts(java.lang.String, java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r2, $r7, r14;
        android.content.ContentValues r3;
        java.util.HashMap r4;
        java.util.List $r5, $r8;
        int $i0;
        java.lang.StringBuilder $r6;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        org.gnucash.android.model.Account r11, $r17;
        org.gnucash.android.model.AccountType $r12, $r13;
        android.database.sqlite.SQLiteDatabase $r15;
        java.lang.String[] $r16;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r5 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.util.List getDescendantAccountUIDs(java.lang.String,java.lang.String,java.lang.String[])>($r1, null, null);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 0 goto label10;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid IN (\'");

        $r7 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("\',\'", $r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.util.List getSimpleAccountList(java.lang.String,java.lang.String[],java.lang.String)>($r7, null, null);

        r4 = new java.util.HashMap;

        specialinvoke r4.<java.util.HashMap: void <init>()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.gnucash.android.model.Account) $r10;

        $r7 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r11);

        goto label01;

     label02:
        $r12 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.AccountType getAccountType(java.lang.String)>($r2);

        $r13 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        if $r12 != $r13 goto label07;

        $r7 = "";

     label03:
        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r10;

        $r10 = virtualinvoke r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r14);

        r11 = (org.gnucash.android.model.Account) $r10;

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getParentUID()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z0 == 0 goto label09;

        virtualinvoke r11.<org.gnucash.android.model.Account: void setParentUID(java.lang.String)>($r2);

        if $r7 == null goto label05;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label08;

     label05:
        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getName()>();

        virtualinvoke r11.<org.gnucash.android.model.Account: void setFullName(java.lang.String)>(r14);

     label06:
        virtualinvoke r3.<android.content.ContentValues: void clear()>();

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("parent_account_uid", $r2);

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getFullName()>();

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("full_name", r14);

        $r15 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r16 = newarray (java.lang.String)[1];

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        $r16[0] = r14;

        virtualinvoke $r15.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r3, "uid = ?", $r16);

        goto label04;

     label07:
        $r7 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getAccountFullName(java.lang.String)>($r2);

        goto label03;

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<org.gnucash.android.model.Account: void setFullName(java.lang.String)>(r14);

        goto label06;

     label09:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getParentUID()>();

        $r10 = virtualinvoke r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r14);

        $r17 = (org.gnucash.android.model.Account) $r10;

        r14 = virtualinvoke $r17.<org.gnucash.android.model.Account: java.lang.String getFullName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<org.gnucash.android.model.Account: void setFullName(java.lang.String)>(r14);

        virtualinvoke r3.<android.content.ContentValues: void clear()>();

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getFullName()>();

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("full_name", r14);

        $r15 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r16 = newarray (java.lang.String)[1];

        r14 = virtualinvoke r11.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        $r16[0] = r14;

        virtualinvoke $r15.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r3, "uid = ?", $r16);

        goto label04;

     label10:
        return;
    }
    public boolean recursiveDeleteAccount(long)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        long $l0;
        android.content.ContentValues r1;
        java.lang.String $r2, $r5, $r7;
        org.gnucash.android.model.AccountType $r3, $r4;
        java.lang.StringBuilder $r6;
        java.util.List $r8;
        android.database.sqlite.SQLiteDatabase $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        org.gnucash.android.db.adapter.TransactionsDbAdapter $r12;
        java.lang.Throwable $r13;
        int $i1;
        byte $b2;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $l0 := @parameter0: long;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getUID(long)>($l0);

        $r3 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.model.AccountType getAccountType(java.lang.String)>($r2);

        $r4 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        if $r3 != $r4 goto label01;

        return 0;

     label01:
        $r5 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String LOG_TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delete account with rowId with its transactions and sub-accounts: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, $r7);

        $r8 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.util.List getDescendantAccountUIDs(java.lang.String,java.lang.String,java.lang.String[])>($r2, null, null);

        $r9 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label02:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r10 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label04:
        if $z0 == 0 goto label08;

     label05:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r11;

        $r12 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: org.gnucash.android.db.adapter.TransactionsDbAdapter mTransactionsAdapter>;

        virtualinvoke $r12.<org.gnucash.android.db.adapter.TransactionsDbAdapter: void deleteTransactionsForAccount(java.lang.String)>($r2);

     label06:
        goto label03;

     label07:
        $r13 := @caughtexception;

        $r9 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r13;

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("\',\'", $r8);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid IN (");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r9.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("accounts", $r5, null);

     label09:
        $l0 = (long) $i1;

        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label11;

     label10:
        r1 = new android.content.ContentValues;

        specialinvoke r1.<android.content.ContentValues: void <init>()>();

        virtualinvoke r1.<android.content.ContentValues: void putNull(java.lang.String)>("default_transfer_account_uid");

        $r9 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r5 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String mTableName>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("default_transfer_account_uid IN (");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>($r5, r1, $r2, null);

     label11:
        $r9 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label12:
        $r9 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 1;

        catch java.lang.Throwable from label02 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label12 with label07;
    }
    protected android.database.sqlite.SQLiteStatement setBindings(android.database.sqlite.SQLiteStatement, org.gnucash.android.model.Account)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.sqlite.SQLiteStatement $r1;
        org.gnucash.android.model.Account $r2;
        long $l0, $l2;
        java.lang.String $r3, r7;
        org.gnucash.android.model.AccountType $r4, $r8;
        org.gnucash.android.model.Commodity $r5;
        int $i1;
        boolean $z0;
        java.sql.Timestamp $r6;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteStatement;

        $r2 := @parameter1: org.gnucash.android.model.Account;

        $l0 = 1L;

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void clearBindings()>();

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getName()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(1, $r3);

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getDescription()>();

        if $r3 == null goto label01;

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getDescription()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(2, $r3);

     label01:
        $r4 = virtualinvoke $r2.<org.gnucash.android.model.Account: org.gnucash.android.model.AccountType getAccountType()>();

        $r3 = virtualinvoke $r4.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(3, $r3);

        $r5 = virtualinvoke $r2.<org.gnucash.android.model.Account: org.gnucash.android.model.Commodity getCommodity()>();

        $r3 = virtualinvoke $r5.<org.gnucash.android.model.Commodity: java.lang.String getCurrencyCode()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(4, $r3);

        $i1 = virtualinvoke $r2.<org.gnucash.android.model.Account: int getColor()>();

        if $i1 == -3355444 goto label02;

        $i1 = virtualinvoke $r2.<org.gnucash.android.model.Account: int getColor()>();

        $r3 = specialinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String convertToRGBHexString(int)>($i1);

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(5, $r3);

     label02:
        $z0 = virtualinvoke $r2.<org.gnucash.android.model.Account: boolean isFavorite()>();

        if $z0 == 0 goto label09;

        $l2 = 1L;

     label03:
        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(6, $l2);

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getFullName()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(7, $r3);

        $z0 = virtualinvoke $r2.<org.gnucash.android.model.Account: boolean isPlaceholderAccount()>();

        if $z0 == 0 goto label10;

        $l2 = 1L;

     label04:
        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(8, $l2);

        $r6 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.sql.Timestamp getCreatedTimestamp()>();

        $r3 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.lang.String getUtcStringFromTimestamp(java.sql.Timestamp)>($r6);

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(9, $r3);

        $z0 = virtualinvoke $r2.<org.gnucash.android.model.Account: boolean isHidden()>();

        if $z0 == 0 goto label11;

     label05:
        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(10, $l0);

        $r5 = virtualinvoke $r2.<org.gnucash.android.model.Account: org.gnucash.android.model.Commodity getCommodity()>();

        $r3 = virtualinvoke $r5.<org.gnucash.android.model.Commodity: java.lang.String getUID()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(11, $r3);

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getParentUID()>();

        r7 = $r3;

        if $r3 != null goto label06;

        $r4 = virtualinvoke $r2.<org.gnucash.android.model.Account: org.gnucash.android.model.AccountType getAccountType()>();

        $r8 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        if $r4 == $r8 goto label06;

        r7 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: java.lang.String getOrCreateGnuCashRootAccountUID()>();

     label06:
        if r7 == null goto label07;

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(12, r7);

     label07:
        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getDefaultTransferAccountUID()>();

        if $r3 == null goto label08;

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getDefaultTransferAccountUID()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(13, $r3);

     label08:
        $r3 = virtualinvoke $r2.<org.gnucash.android.model.Account: java.lang.String getUID()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(14, $r3);

        return $r1;

     label09:
        $l2 = 0L;

        goto label03;

     label10:
        $l2 = 0L;

        goto label04;

     label11:
        $l0 = 0L;

        goto label05;
    }
    protected volatile android.database.sqlite.SQLiteStatement setBindings(android.database.sqlite.SQLiteStatement, org.gnucash.android.model.BaseModel)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        android.database.sqlite.SQLiteStatement $r1;
        org.gnucash.android.model.BaseModel $r2;
        org.gnucash.android.model.Account $r3;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteStatement;

        $r2 := @parameter1: org.gnucash.android.model.BaseModel;

        $r3 = (org.gnucash.android.model.Account) $r2;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteStatement setBindings(android.database.sqlite.SQLiteStatement,org.gnucash.android.model.Account)>($r1, $r3);

        return $r1;
    }
    public int updateAccount(long, java.lang.String, java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        long $l0;
        java.lang.String $r1, $r2;
        int $i1;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: int updateRecord(java.lang.String,long,java.lang.String,java.lang.String)>("accounts", $l0, $r1, $r2);

        return $i1;
    }
    public int updateAllAccounts(java.lang.String, java.lang.String)
    {
        org.gnucash.android.db.adapter.AccountsDbAdapter r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues r3;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: org.gnucash.android.db.adapter.AccountsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

        if $r2 != null goto label2;

        virtualinvoke r3.<android.content.ContentValues: void putNull(java.lang.String)>($r1);

     label1:
        $r4 = r0.<org.gnucash.android.db.adapter.AccountsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $i0 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r3, null, null);

        return $i0;

     label2:
        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r1, $r2);

        goto label1;
    }
