org.gnucash.android.db.adapter.ScheduledActionDbAdapter extends org.gnucash.android.db.adapter.DatabaseAdapter
private org.gnucash.android.db.adapter.RecurrenceDbAdapter mRecurrenceDbAdapter
    public void <init>(android.database.sqlite.SQLiteDatabase, org.gnucash.android.db.adapter.RecurrenceDbAdapter)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;
        org.gnucash.android.db.adapter.RecurrenceDbAdapter $r2;
        java.lang.String[] $r3;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: org.gnucash.android.db.adapter.RecurrenceDbAdapter;

        $r3 = newarray (java.lang.String)[16];

        $r3[0] = "action_uid";

        $r3[1] = "type";

        $r3[2] = "start_time";

        $r3[3] = "end_time";

        $r3[4] = "last_run";

        $r3[5] = "is_enabled";

        $r3[6] = "created_at";

        $r3[7] = "tag";

        $r3[8] = "total_frequency";

        $r3[9] = "recurrence_uid";

        $r3[10] = "auto_create";

        $r3[11] = "auto_notify";

        $r3[12] = "adv_creation";

        $r3[13] = "adv_notify";

        $r3[14] = "template_act_uid";

        $r3[15] = "execution_count";

        specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r1, "scheduled_actions", $r3);

        r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: org.gnucash.android.db.adapter.RecurrenceDbAdapter mRecurrenceDbAdapter> = $r2;

        r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: java.lang.String LOG_TAG> = "ScheduledActionDbAdapter";

        return;
    }
    public static org.gnucash.android.db.adapter.ScheduledActionDbAdapter getInstance()
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter $r0;

        $r0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: org.gnucash.android.db.adapter.ScheduledActionDbAdapter getScheduledEventDbAdapter()>();

        return $r0;
    }
    public volatile void addRecord(org.gnucash.android.model.BaseModel, org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r1;
        org.gnucash.android.model.BaseModel $r2;
        org.gnucash.android.model.ScheduledAction $r3;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r2 := @parameter0: org.gnucash.android.model.BaseModel;

        $r1 := @parameter1: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod;

        $r3 = (org.gnucash.android.model.ScheduledAction) $r2;

        virtualinvoke r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: void addRecord(org.gnucash.android.model.ScheduledAction,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>($r3, $r1);

        return;
    }
    public void addRecord(org.gnucash.android.model.ScheduledAction, org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        org.gnucash.android.model.ScheduledAction $r1;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r2;
        org.gnucash.android.db.adapter.RecurrenceDbAdapter $r3;
        org.gnucash.android.model.Recurrence $r4;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.ScheduledAction;

        $r2 := @parameter1: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod;

        $r3 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: org.gnucash.android.db.adapter.RecurrenceDbAdapter mRecurrenceDbAdapter>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: org.gnucash.android.model.Recurrence getRecurrence()>();

        virtualinvoke $r3.<org.gnucash.android.db.adapter.RecurrenceDbAdapter: void addRecord(org.gnucash.android.model.BaseModel,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>($r4, $r2);

        specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: void addRecord(org.gnucash.android.model.BaseModel,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>($r1, $r2);

        return;
    }
    public volatile org.gnucash.android.model.BaseModel buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.ScheduledAction $r2;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)>($r1);

        return $r2;
    }
    public org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.ScheduledAction r2;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r3, $r4, $r5, $r6, $r7;
        long $l1, $l2, $l3;
        boolean z0;
        org.gnucash.android.model.ScheduledAction$ActionType $r8;
        org.gnucash.android.db.adapter.RecurrenceDbAdapter $r9;
        org.gnucash.android.model.BaseModel $r10;
        org.gnucash.android.model.Recurrence $r11;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("action_uid");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("start_time");

        $l1 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("end_time");

        $l2 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("last_run");

        $l3 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("type");

        $r4 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("tag");

        $r5 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("is_enabled");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        if $i0 <= 0 goto label4;

        z0 = 1;

     label1:
        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("total_frequency");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        $i4 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("execution_count");

        $i4 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i4);

        $i5 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("auto_create");

        $i5 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i5);

        $i6 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("auto_notify");

        $i6 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i6);

        $i7 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("adv_creation");

        $i7 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i7);

        $i8 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("adv_notify");

        $i8 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i8);

        $i9 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("recurrence_uid");

        $r6 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i9);

        $i9 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("template_act_uid");

        $r7 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i9);

        r2 = new org.gnucash.android.model.ScheduledAction;

        $r8 = staticinvoke <org.gnucash.android.model.ScheduledAction$ActionType: org.gnucash.android.model.ScheduledAction$ActionType valueOf(java.lang.String)>($r4);

        specialinvoke r2.<org.gnucash.android.model.ScheduledAction: void <init>(org.gnucash.android.model.ScheduledAction$ActionType)>($r8);

        virtualinvoke r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: void populateBaseModelAttributes(android.database.Cursor,org.gnucash.android.model.BaseModel)>($r1, r2);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setStartTime(long)>($l1);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setEndTime(long)>($l2);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setActionUID(java.lang.String)>($r3);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setLastRun(long)>($l3);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setTag(java.lang.String)>($r5);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setEnabled(boolean)>(z0);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setTotalPlannedExecutionCount(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setExecutionCount(int)>($i4);

        if $i5 != 1 goto label5;

        z0 = 1;

     label2:
        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setAutoCreate(boolean)>(z0);

        if $i6 != 1 goto label6;

        z0 = 1;

     label3:
        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setAutoNotify(boolean)>(z0);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setAdvanceCreateDays(int)>($i7);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setAdvanceNotifyDays(int)>($i8);

        $r9 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: org.gnucash.android.db.adapter.RecurrenceDbAdapter mRecurrenceDbAdapter>;

        $r10 = virtualinvoke $r9.<org.gnucash.android.db.adapter.RecurrenceDbAdapter: org.gnucash.android.model.BaseModel getRecord(java.lang.String)>($r6);

        $r11 = (org.gnucash.android.model.Recurrence) $r10;

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setRecurrence(org.gnucash.android.model.Recurrence)>($r11);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setTemplateAccountUID(java.lang.String)>($r7);

        return r2;

     label4:
        z0 = 0;

        goto label1;

     label5:
        z0 = 0;

        goto label2;

     label6:
        z0 = 0;

        goto label3;
    }
    public long bulkAddRecords(java.util.List, org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        java.util.List r1;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r2;
        java.util.ArrayList r3;
        int $i0;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.gnucash.android.model.ScheduledAction r6;
        org.gnucash.android.model.Recurrence $r7;
        org.gnucash.android.db.adapter.RecurrenceDbAdapter $r8;
        long $l1;
        java.lang.String $r9, $r12;
        java.lang.Object[] $r10;
        java.lang.Long $r11;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod;

        r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.gnucash.android.model.ScheduledAction) $r5;

        $r7 = virtualinvoke r6.<org.gnucash.android.model.ScheduledAction: org.gnucash.android.model.Recurrence getRecurrence()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r8 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: org.gnucash.android.db.adapter.RecurrenceDbAdapter mRecurrenceDbAdapter>;

        $l1 = virtualinvoke $r8.<org.gnucash.android.db.adapter.RecurrenceDbAdapter: long bulkAddRecords(java.util.List,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r3, $r2);

        $r9 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: java.lang.String LOG_TAG>;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Added %d recurrences for scheduled actions", $r10);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r9, $r12);

        $l1 = specialinvoke r0.<org.gnucash.android.db.adapter.DatabaseAdapter: long bulkAddRecords(java.util.List,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>(r1, $r2);

        return $l1;
    }
    public long getActionInstanceCount(java.lang.String)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        android.database.sqlite.SQLiteStatement $r3;
        long $l0;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("SELECT COUNT(*) FROM transactions WHERE scheduled_action_uid=?");

        virtualinvoke $r3.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(1, $r1);

        $l0 = virtualinvoke $r3.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

        return $l0;
    }
    public java.util.List getAllEnabledScheduledActions()
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r4;
        boolean $z0;
        org.gnucash.android.model.ScheduledAction $r5;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r3 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r1 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: java.lang.String mTableName>;

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r1, null, "is_enabled=1", null, null, null, null);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)>($r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return r2;
    }
    public java.util.List getScheduledActionsWithUID(java.lang.String)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4;
        android.database.Cursor $r5;
        boolean $z0;
        org.gnucash.android.model.ScheduledAction $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("scheduled_actions", null, "action_uid= ?", $r4, null, null, null);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r6 = virtualinvoke r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)>($r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        goto label1;

     label5:
        $r7 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r7;

     label6:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    protected volatile android.database.sqlite.SQLiteStatement setBindings(android.database.sqlite.SQLiteStatement, org.gnucash.android.model.BaseModel)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        android.database.sqlite.SQLiteStatement $r1;
        org.gnucash.android.model.BaseModel $r2;
        org.gnucash.android.model.ScheduledAction $r3;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteStatement;

        $r2 := @parameter1: org.gnucash.android.model.BaseModel;

        $r3 = (org.gnucash.android.model.ScheduledAction) $r2;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement setBindings(android.database.sqlite.SQLiteStatement,org.gnucash.android.model.ScheduledAction)>($r1, $r3);

        return $r1;
    }
    protected android.database.sqlite.SQLiteStatement setBindings(android.database.sqlite.SQLiteStatement, org.gnucash.android.model.ScheduledAction)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        android.database.sqlite.SQLiteStatement $r1;
        org.gnucash.android.model.ScheduledAction $r2;
        long $l0, $l1;
        java.lang.String $r3;
        org.gnucash.android.model.ScheduledAction$ActionType $r4;
        boolean $z0;
        java.sql.Timestamp $r5;
        int $i2;
        org.gnucash.android.model.Recurrence $r6;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteStatement;

        $r2 := @parameter1: org.gnucash.android.model.ScheduledAction;

        $l0 = 1L;

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void clearBindings()>();

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: java.lang.String getActionUID()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(1, $r3);

        $r4 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: org.gnucash.android.model.ScheduledAction$ActionType getActionType()>();

        $r3 = virtualinvoke $r4.<org.gnucash.android.model.ScheduledAction$ActionType: java.lang.String name()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(2, $r3);

        $l1 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: long getStartTime()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(3, $l1);

        $l1 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: long getEndTime()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(4, $l1);

        $l1 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: long getLastRunTime()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(5, $l1);

        $z0 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: boolean isEnabled()>();

        if $z0 == 0 goto label5;

        $l1 = 1L;

     label1:
        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(6, $l1);

        $r5 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: java.sql.Timestamp getCreatedTimestamp()>();

        $r3 = virtualinvoke $r5.<java.sql.Timestamp: java.lang.String toString()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(7, $r3);

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: java.lang.String getTag()>();

        if $r3 != null goto label6;

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindNull(int)>(8);

     label2:
        $i2 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: int getTotalPlannedExecutionCount()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(9, $r3);

        $r6 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: org.gnucash.android.model.Recurrence getRecurrence()>();

        $r3 = virtualinvoke $r6.<org.gnucash.android.model.Recurrence: java.lang.String getUID()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(10, $r3);

        $z0 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: boolean shouldAutoCreate()>();

        if $z0 == 0 goto label7;

        $l1 = 1L;

     label3:
        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(11, $l1);

        $z0 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: boolean shouldAutoNotify()>();

        if $z0 == 0 goto label8;

     label4:
        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(12, $l0);

        $i2 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: int getAdvanceCreateDays()>();

        $l0 = (long) $i2;

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(13, $l0);

        $i2 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: int getAdvanceNotifyDays()>();

        $l0 = (long) $i2;

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(14, $l0);

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: java.lang.String getTemplateAccountUID()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(15, $r3);

        $i2 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: int getExecutionCount()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(16, $r3);

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: java.lang.String getUID()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(17, $r3);

        return $r1;

     label5:
        $l1 = 0L;

        goto label1;

     label6:
        $r3 = virtualinvoke $r2.<org.gnucash.android.model.ScheduledAction: java.lang.String getTag()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(8, $r3);

        goto label2;

     label7:
        $l1 = 0L;

        goto label3;

     label8:
        $l0 = 0L;

        goto label4;
    }
    public long updateRecurrenceAttributes(org.gnucash.android.model.ScheduledAction)
    {
        org.gnucash.android.db.adapter.ScheduledActionDbAdapter r0;
        org.gnucash.android.model.ScheduledAction $r1;
        android.content.ContentValues r2;
        org.gnucash.android.db.adapter.RecurrenceDbAdapter r3;
        java.lang.String[] r4;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.String $r6;
        org.gnucash.android.model.Recurrence $r7;
        org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod $r8;
        long $l0;
        java.lang.Long $r9;
        int $i1;
        java.lang.Integer $r10;

        r0 := @this: org.gnucash.android.db.adapter.ScheduledActionDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.ScheduledAction;

        r3 = new org.gnucash.android.db.adapter.RecurrenceDbAdapter;

        $r5 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        specialinvoke r3.<org.gnucash.android.db.adapter.RecurrenceDbAdapter: void <init>(android.database.sqlite.SQLiteDatabase)>($r5);

        $r6 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getUID()>();

        $r6 = virtualinvoke r3.<org.gnucash.android.db.adapter.RecurrenceDbAdapter: java.lang.String getAttribute(java.lang.String,java.lang.String)>($r6, "recurrence_uid");

        $r7 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: org.gnucash.android.model.Recurrence getRecurrence()>();

        virtualinvoke $r7.<org.gnucash.android.model.Recurrence: void setUID(java.lang.String)>($r6);

        $r8 = <org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod: org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod update>;

        virtualinvoke r3.<org.gnucash.android.db.adapter.RecurrenceDbAdapter: void addRecord(org.gnucash.android.model.BaseModel,org.gnucash.android.db.adapter.DatabaseAdapter$UpdateMethod)>($r7, $r8);

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        virtualinvoke r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: android.content.ContentValues extractBaseModelAttributes(android.content.ContentValues,org.gnucash.android.model.BaseModel)>(r2, $r1);

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getStartTime()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("start_time", $r9);

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getEndTime()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("end_time", $r9);

        $r6 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getTag()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tag", $r6);

        $i1 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: int getTotalPlannedExecutionCount()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("total_frequency", $r10);

        $r6 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, "Updating scheduled event recurrence attributes");

        r4 = newarray (java.lang.String)[1];

        $r6 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getUID()>();

        r4[0] = $r6;

        $r5 = r0.<org.gnucash.android.db.adapter.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $i1 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("scheduled_actions", r2, "uid=?", r4);

        $l0 = (long) $i1;

        return $l0;
    }
