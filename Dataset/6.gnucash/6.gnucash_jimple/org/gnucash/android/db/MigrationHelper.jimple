org.gnucash.android.db.MigrationHelper extends java.lang.Object
public static final java.lang.String LOG_TAG
static final java.lang.Runnable moveExportedFilesToNewDefaultLocation
    static void <clinit>()
    {
        org.gnucash.android.db.MigrationHelper$1 $r0;

        $r0 = new org.gnucash.android.db.MigrationHelper$1;

        specialinvoke $r0.<org.gnucash.android.db.MigrationHelper$1: void <init>()>();

        <org.gnucash.android.db.MigrationHelper: java.lang.Runnable moveExportedFilesToNewDefaultLocation> = $r0;

        return;
    }
    public void <init>()
    {
        org.gnucash.android.db.MigrationHelper r0;

        r0 := @this: org.gnucash.android.db.MigrationHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.String getFullyQualifiedAccountName(android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, r5, $r6;
        java.lang.String[] $r2, $r3;
        android.database.Cursor $r4;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "parent_account_uid";

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r1;

        $r4 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("accounts", $r2, "uid = ?", $r3, null, null, null, null);

        r5 = null;

        if $r4 == null goto label1;

        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("parent_account_uid");

        r5 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i0);

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

     label1:
        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "name";

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r1;

        $r4 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r2, "uid = ?", $r3, null, null, null);

        $r1 = null;

        if $r4 == null goto label2;

        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label2;

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("name");

        $r1 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i0);

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

     label2:
        $r6 = staticinvoke <org.gnucash.android.db.MigrationHelper: java.lang.String getGnuCashRootAccountUID(android.database.sqlite.SQLiteDatabase)>($r0);

        if r5 == null goto label4;

        if $r1 == null goto label4;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label3;

        return $r1;

     label3:
        r5 = staticinvoke <org.gnucash.android.db.MigrationHelper: java.lang.String getFullyQualifiedAccountName(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r0, r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return $r1;
    }
    private static java.lang.String getGnuCashRootAccountUID(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.StringBuilder $r1;
        org.gnucash.android.model.AccountType $r2;
        java.lang.String $r3;
        android.database.Cursor $r4;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type= \'");

        $r2 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        $r3 = virtualinvoke $r2.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", null, $r3, null, null, null, "name ASC");

        if $r4 == null goto label1;

        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r3 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i0);

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return $r3;

     label1:
        return null;
    }
    static void importCommodities(android.database.sqlite.SQLiteDatabase) throws org.xml.sax.SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.io.BufferedInputStream r1;
        org.gnucash.android.importer.CommoditiesXmlHandler r2;
        javax.xml.parsers.SAXParserFactory $r3;
        javax.xml.parsers.SAXParser $r4;
        org.xml.sax.XMLReader $r5;
        android.content.Context $r6;
        android.content.res.Resources $r7;
        java.io.InputStream $r8;
        org.xml.sax.InputSource $r9;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r3 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

        $r4 = virtualinvoke $r3.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        $r5 = virtualinvoke $r4.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

        $r6 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(2131099649);

        r1 = new java.io.BufferedInputStream;

        specialinvoke r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r8);

        r2 = new org.gnucash.android.importer.CommoditiesXmlHandler;

        specialinvoke r2.<org.gnucash.android.importer.CommoditiesXmlHandler: void <init>(android.database.sqlite.SQLiteDatabase)>($r0);

        interfaceinvoke $r5.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>(r2);

        $r9 = new org.xml.sax.InputSource;

        specialinvoke $r9.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        interfaceinvoke $r5.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r9);

        return;
    }
    static void moveFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.io.FileInputStream $r2;
        java.nio.channels.FileChannel $r3, $r5;
        java.io.FileOutputStream $r4;
        long $l0, $l1;
        byte $b2;
        java.lang.Throwable $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r3 = virtualinvoke $r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        $r5 = virtualinvoke $r4.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

     label1:
        $l0 = virtualinvoke $r3.<java.nio.channels.FileChannel: long size()>();

        $l0 = virtualinvoke $r3.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(0L, $l0, $r5);

        $l1 = virtualinvoke $r0.<java.io.File: long length()>();

     label2:
        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label4;

     label3:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

     label4:
        if $r3 == null goto label5;

        virtualinvoke $r3.<java.nio.channels.FileChannel: void close()>();

     label5:
        virtualinvoke $r5.<java.nio.channels.FileChannel: void close()>();

        return;

     label6:
        $r6 := @caughtexception;

        if $r3 == null goto label7;

        virtualinvoke $r3.<java.nio.channels.FileChannel: void close()>();

     label7:
        virtualinvoke $r5.<java.nio.channels.FileChannel: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }
    public static java.sql.Timestamp subtractTimeZoneOffset(java.sql.Timestamp, java.util.TimeZone)
    {
        java.sql.Timestamp $r0, $r2;
        java.util.TimeZone $r1;
        long l0, $l2;
        int $i1;

        $r0 := @parameter0: java.sql.Timestamp;

        $r1 := @parameter1: java.util.TimeZone;

        l0 = virtualinvoke $r0.<java.sql.Timestamp: long getTime()>();

        $i1 = virtualinvoke $r1.<java.util.TimeZone: int getOffset(long)>(l0);

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        l0 = (long) $i1;

        $r2 = new java.sql.Timestamp;

        $l2 = virtualinvoke $r0.<java.sql.Timestamp: long getTime()>();

        l0 = $l2 - l0;

        specialinvoke $r2.<java.sql.Timestamp: void <init>(long)>(l0);

        return $r2;
    }
    static int upgradeDbToVersion10(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String[] $r1, $r2;
        android.content.ContentValues r3;
        org.gnucash.android.export.ExportParams r4;
        java.lang.String $r5;
        org.gnucash.android.model.ScheduledAction$ActionType $r6;
        android.database.Cursor $r7;
        boolean $z0;
        int $i0;
        org.gnucash.android.export.ExportFormat $r8;
        org.gnucash.android.export.ExportParams$ExportTarget $r9;
        java.sql.Timestamp $r10;
        java.lang.Throwable $r11;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r5 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r5, "Upgrading database to version 9");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "uid";

        $r1[1] = "tag";

        $r2 = newarray (java.lang.String)[1];

        $r6 = <org.gnucash.android.model.ScheduledAction$ActionType: org.gnucash.android.model.ScheduledAction$ActionType BACKUP>;

        $r5 = virtualinvoke $r6.<org.gnucash.android.model.ScheduledAction$ActionType: java.lang.String name()>();

        $r2[0] = $r5;

        $r7 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("scheduled_actions", $r1, "type = ?", $r2, null, null, null);

        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

     label02:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

     label03:
        if $z0 == 0 goto label12;

     label04:
        $i0 = interfaceinvoke $r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("tag");

        $r5 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r1 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        r4 = new org.gnucash.android.export.ExportParams;

        $r5 = $r1[0];

        $r8 = staticinvoke <org.gnucash.android.export.ExportFormat: org.gnucash.android.export.ExportFormat valueOf(java.lang.String)>($r5);

        specialinvoke r4.<org.gnucash.android.export.ExportParams: void <init>(org.gnucash.android.export.ExportFormat)>($r8);

        $r5 = $r1[1];

        $r9 = staticinvoke <org.gnucash.android.export.ExportParams$ExportTarget: org.gnucash.android.export.ExportParams$ExportTarget valueOf(java.lang.String)>($r5);

        virtualinvoke r4.<org.gnucash.android.export.ExportParams: void setExportTarget(org.gnucash.android.export.ExportParams$ExportTarget)>($r9);

        $r5 = $r1[3];

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r5);

        virtualinvoke r4.<org.gnucash.android.export.ExportParams: void setDeleteTransactionsAfterExport(boolean)>($z0);

        $r5 = $r1[2];

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r5);

     label05:
        if $z0 == 0 goto label10;

     label06:
        $r10 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.sql.Timestamp getTimestampFromEpochZero()>();

        virtualinvoke r4.<org.gnucash.android.export.ExportParams: void setExportStartTime(java.sql.Timestamp)>($r10);

     label07:
        $i0 = interfaceinvoke $r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r5 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r3.<android.content.ContentValues: void clear()>();

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uid", $r5);

        $r5 = virtualinvoke r4.<org.gnucash.android.export.ExportParams: java.lang.String toCsv()>();

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tag", $r5);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("scheduled_actions", null, r3);

     label08:
        goto label02;

     label09:
        $r11 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r11;

     label10:
        $r10 = staticinvoke <org.gnucash.android.util.PreferencesHelper: java.sql.Timestamp getLastExportTime()>();

        virtualinvoke r4.<org.gnucash.android.export.ExportParams: void setExportStartTime(java.sql.Timestamp)>($r10);

     label11:
        goto label07;

     label12:
        interfaceinvoke $r7.<android.database.Cursor: void close()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label13:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 10;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }
    static int upgradeDbToVersion11(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.content.ContentValues r1;
        java.lang.IllegalArgumentException r2;
        java.util.HashMap r3;
        java.lang.String $r4, $r8;
        java.lang.String[] $r5;
        org.gnucash.android.model.ScheduledAction$ActionType $r6;
        android.database.Cursor $r7;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r9, $r11;
        java.sql.Timestamp $r10;
        java.util.Set $r12;
        java.util.Iterator $r13;
        java.lang.Object $r14;
        java.util.Map$Entry r15;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Upgrading database to version 9");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r5 = newarray (java.lang.String)[1];

        $r6 = <org.gnucash.android.model.ScheduledAction$ActionType: org.gnucash.android.model.ScheduledAction$ActionType BACKUP>;

        $r4 = virtualinvoke $r6.<org.gnucash.android.model.ScheduledAction$ActionType: java.lang.String name()>();

        $r5[0] = $r4;

        $r7 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("scheduled_actions", null, "type= ?", $r5, null, null, null);

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

     label02:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

     label03:
        if $z0 == 0 goto label17;

     label04:
        $i0 = interfaceinvoke $r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r4 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("tag");

        $r8 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r5 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

     label05:
        $r8 = $r5[2];

     label06:
        staticinvoke <org.gnucash.android.util.TimestampHelper: java.sql.Timestamp getTimestampFromUtcString(java.lang.String)>($r8);

     label07:
        $r8 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(";", $r5);

     label08:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r8);

     label09:
        goto label02;

     label10:
        $r9 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r9;

     label11:
        r2 := @caughtexception;

     label12:
        $r10 = staticinvoke <org.gnucash.android.util.PreferencesHelper: java.sql.Timestamp getLastExportTime()>();

        $r8 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.lang.String getUtcStringFromTimestamp(java.sql.Timestamp)>($r10);

        $r5[2] = $r8;

     label13:
        $r8 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(";", $r5);

     label14:
        goto label08;

     label15:
        $r11 := @caughtexception;

     label16:
        staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(";", $r5);

        throw $r11;

     label17:
        interfaceinvoke $r7.<android.database.Cursor: void close()>();

        r1 = new android.content.ContentValues;

        specialinvoke r1.<android.content.ContentValues: void <init>()>();

        $r12 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

     label19:
        if $z0 == 0 goto label22;

     label20:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r14;

        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        $r14 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r4 = (java.lang.String) $r14;

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tag", $r4);

        $r5 = newarray (java.lang.String)[1];

        $r14 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = (java.lang.String) $r14;

        $r5[0] = $r4;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("scheduled_actions", r1, "uid = ?", $r5);

     label21:
        goto label18;

     label22:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label23:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 11;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.IllegalArgumentException from label06 to label07 with label11;
        catch java.lang.Throwable from label05 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label16 to label19 with label10;
        catch java.lang.Throwable from label20 to label21 with label10;
        catch java.lang.Throwable from label22 to label23 with label10;
    }
    static int upgradeDbToVersion12(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.sql.Timestamp $r1;
        java.util.TimeZone $r2;
        java.lang.Exception $r3;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MigrationHelper", "Upgrading database to version 12");

     label1:
        $r1 = staticinvoke <org.gnucash.android.util.PreferencesHelper: java.sql.Timestamp getLastExportTime()>();

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $r1 = staticinvoke <org.gnucash.android.db.MigrationHelper: java.sql.Timestamp subtractTimeZoneOffset(java.sql.Timestamp,java.util.TimeZone)>($r1, $r2);

        staticinvoke <org.gnucash.android.util.PreferencesHelper: void setLastExportTime(java.sql.Timestamp)>($r1);

     label2:
        return 12;

     label3:
        $r3 := @caughtexception;

        return 11;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    static int upgradeDbToVersion13(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.content.Intent r1;
        android.content.ContentValues r2;
        org.gnucash.android.model.Recurrence r3;
        java.lang.String $r4, $r10, $r14, $r16, $r17;
        java.lang.StringBuilder $r5;
        java.lang.String[] $r6;
        android.database.Cursor $r7;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1, $l2;
        org.gnucash.android.model.PeriodType $r8;
        java.sql.Timestamp $r9;
        java.lang.Integer $r11;
        java.lang.Throwable $r12;
        android.content.Context $r13;
        android.content.SharedPreferences $r15;
        android.content.SharedPreferences$Editor $r18;
        android.app.PendingIntent $r19;
        java.lang.Object $r20;
        android.app.AlarmManager r21;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Upgrading database to version 13");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE recurrences (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, recurrence_mult integer not null default 1, recurrence_period_type varchar(255) not null, recurrence_byday varchar(255), recurrence_period_start timestamp not null, recurrence_period_end timestamp, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP); ");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("recurrences");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE budgets (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, name varchar(255) not null, description varchar(255), recurrence_uid varchar(255) not null, num_periods integer, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (recurrence_uid) REFERENCES recurrences (uid) );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("budgets");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE UNIQUE INDEX \'budgets_uid_index\' ON budgets(uid)");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE budget_amounts (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, budget_uid varchar(255) not null, account_uid varchar(255) not null, amount_num integer not null, amount_denom integer not null, period_num integer not null, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (account_uid) REFERENCES accounts (uid) ON DELETE CASCADE, FOREIGN KEY (budget_uid) REFERENCES budgets (uid) ON DELETE CASCADE );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("budget_amounts");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE UNIQUE INDEX \'budget_amounts_uid_index\' ON budget_amounts(uid)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE scheduled_actions RENAME TO scheduled_actions_bak");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE scheduled_actions (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, action_uid varchar(255) not null, type varchar(255) not null, recurrence_uid varchar(255) not null, template_act_uid varchar(255) not null, last_run integer default 0, start_time integer not null, end_time integer default 0, tag text, is_enabled tinyint default 1, auto_create tinyint default 1, auto_notify tinyint default 0, adv_creation integer default 0, adv_notify integer default 0, total_frequency integer default 0, execution_count integer default 0, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (recurrence_uid) REFERENCES recurrences (uid) );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("scheduled_actions");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO scheduled_actions ( _id , uid , action_uid , type , last_run , start_time , end_time , is_enabled , total_frequency , execution_count , created_at , modified_at , recurrence_uid , template_act_uid , tag)  SELECT scheduled_actions_bak._id , scheduled_actions_bak.uid , scheduled_actions_bak.action_uid , scheduled_actions_bak.type , scheduled_actions_bak.last_run , scheduled_actions_bak.start_time , scheduled_actions_bak.end_time , scheduled_actions_bak.is_enabled , scheduled_actions_bak.total_frequency , scheduled_actions_bak.execution_count , scheduled_actions_bak.created_at , scheduled_actions_bak.modified_at ,  \'dummy-string\' , \'dummy-string\' ,scheduled_actions_bak.tag FROM scheduled_actions_bak;");

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = "uid";

        $r6[1] = "period";

        $r6[2] = "start_time";

        $r7 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("scheduled_actions_bak", $r6, null, null, null, null, null);

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>()>();

     label02:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

     label03:
        if $z0 == 0 goto label07;

     label04:
        $i0 = interfaceinvoke $r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r4 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("period");

        $l1 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("start_time");

        $l2 = interfaceinvoke $r7.<android.database.Cursor: long getLong(int)>($i0);

        $r8 = staticinvoke <org.gnucash.android.model.PeriodType: org.gnucash.android.model.PeriodType parse(long)>($l1);

        r3 = new org.gnucash.android.model.Recurrence;

        specialinvoke r3.<org.gnucash.android.model.Recurrence: void <init>(org.gnucash.android.model.PeriodType)>($r8);

        $r9 = new java.sql.Timestamp;

        specialinvoke $r9.<java.sql.Timestamp: void <init>(long)>($l2);

        virtualinvoke r3.<org.gnucash.android.model.Recurrence: void setPeriodStart(java.sql.Timestamp)>($r9);

        virtualinvoke r2.<android.content.ContentValues: void clear()>();

        $r10 = virtualinvoke r3.<org.gnucash.android.model.Recurrence: java.lang.String getUID()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uid", $r10);

        $r8 = virtualinvoke r3.<org.gnucash.android.model.Recurrence: org.gnucash.android.model.PeriodType getPeriodType()>();

        $i0 = virtualinvoke $r8.<org.gnucash.android.model.PeriodType: int getMultiplier()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("recurrence_mult", $r11);

        $r8 = virtualinvoke r3.<org.gnucash.android.model.Recurrence: org.gnucash.android.model.PeriodType getPeriodType()>();

        $r10 = virtualinvoke $r8.<org.gnucash.android.model.PeriodType: java.lang.String name()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("recurrence_period_type", $r10);

        $r9 = virtualinvoke r3.<org.gnucash.android.model.Recurrence: java.sql.Timestamp getPeriodStart()>();

        $r10 = virtualinvoke $r9.<java.sql.Timestamp: java.lang.String toString()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("recurrence_period_start", $r10);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("recurrences", null, r2);

        virtualinvoke r2.<android.content.ContentValues: void clear()>();

        $r10 = virtualinvoke r3.<org.gnucash.android.model.Recurrence: java.lang.String getUID()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("recurrence_uid", $r10);

        $r10 = staticinvoke <org.gnucash.android.model.BaseModel: java.lang.String generateUID()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("template_act_uid", $r10);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = $r4;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("scheduled_actions", r2, "uid = ?", $r6);

     label05:
        goto label02;

     label06:
        $r12 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r12;

     label07:
        interfaceinvoke $r7.<android.database.Cursor: void close()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE scheduled_actions_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE splits RENAME TO splits_bak");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE splits (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, memo text, type varchar(255) not null, value_num integer not null, value_denom integer not null, quantity_num integer not null, quantity_denom integer not null, account_uid varchar(255) not null, transaction_uid varchar(255) not null, reconcile_state varchar(1) not null default \'n\', reconcile_date timestamp not null default current_timestamp, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (account_uid) REFERENCES accounts (uid) ON DELETE CASCADE, FOREIGN KEY (transaction_uid) REFERENCES transactions (uid) ON DELETE CASCADE );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("splits");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO splits ( _id , uid , memo , type , value_num , value_denom , quantity_num , quantity_denom , account_uid , transaction_uid)  SELECT splits_bak._id , splits_bak.uid , splits_bak.memo , splits_bak.type , splits_bak.value_num , splits_bak.value_denom , splits_bak.quantity_num , splits_bak.quantity_denom , splits_bak.account_uid , splits_bak.transaction_uid FROM splits_bak;");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE splits_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label08:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MigrationHelper", "Migrating shared preferences into book preferences");

        $r13 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        $r4 = virtualinvoke $r13.<android.content.Context: java.lang.String getString(int)>(2131296887);

        $r10 = virtualinvoke $r13.<android.content.Context: java.lang.String getString(int)>(2131296884);

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.String getString(int)>(2131296886);

        $r15 = staticinvoke <android.support.v7.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r13);

        $r9 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.sql.Timestamp getTimestampFromEpochZero()>();

        $r16 = virtualinvoke $r9.<java.sql.Timestamp: java.lang.String toString()>();

        $r16 = interfaceinvoke $r15.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("last_export_time", $r16);

        $z0 = interfaceinvoke $r15.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>($r4, 1);

        $z1 = interfaceinvoke $r15.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>($r10, 0);

        $r15 = staticinvoke <android.support.v7.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r13);

        $r17 = virtualinvoke $r13.<android.content.Context: java.lang.String getString(int)>(2131296887);

        if $z0 != 0 goto label11;

        $z2 = 1;

     label09:
        $z2 = interfaceinvoke $r15.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>($r17, $z2);

        $r17 = staticinvoke <org.gnucash.android.db.MigrationHelper: java.lang.String getGnuCashRootAccountUID(android.database.sqlite.SQLiteDatabase)>($r0);

        $r15 = virtualinvoke $r13.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>($r17, 0);

        $r18 = interfaceinvoke $r15.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r18 = interfaceinvoke $r18.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("last_export_time", $r16);

        $r18 = interfaceinvoke $r18.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>($r4, $z0);

        $r18 = interfaceinvoke $r18.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>($r10, $z1);

        $r18 = interfaceinvoke $r18.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>($r14, $z2);

        interfaceinvoke $r18.<android.content.SharedPreferences$Editor: void apply()>();

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r13, class "Lorg/gnucash/android/service/ScheduledActionService;");

        $r19 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>($r13, 0, r1, 536870912);

        if $r19 == null goto label10;

        $r20 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r21 = (android.app.AlarmManager) $r20;

        virtualinvoke r21.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r19);

        virtualinvoke $r19.<android.app.PendingIntent: void cancel()>();

     label10:
        $r13 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        staticinvoke <org.gnucash.android.app.GnuCashApplication: void startScheduledActionExecutionService(android.content.Context)>($r13);

        return 13;

     label11:
        $z2 = 0;

        goto label09;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }
    public static int upgradeDbToVersion2(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.content.ContentValues r1;
        java.lang.String $r2;
        org.gnucash.android.model.AccountType $r3;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "Adding column for parent accounts");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE transactions ADD COLUMN double_account_uid varchar(255)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE accounts ADD COLUMN parent_account_uid varchar(255)");

        $r2 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "Converting account types to GnuCash compatible types");

        r1 = new android.content.ContentValues;

        specialinvoke r1.<android.content.ContentValues: void <init>()>();

        $r3 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType CASH>;

        $r2 = virtualinvoke $r3.<org.gnucash.android.model.AccountType: java.lang.String toString()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r2);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r1, null, null);

        return 2;
    }
    static int upgradeDbToVersion3(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE accounts ADD COLUMN is_placeholder tinyint default 0");

        return 3;
    }
    static int upgradeDbToVersion4(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE transactions ADD COLUMN recurrence_period integer default 0");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE accounts ADD COLUMN default_transfer_account_uid varchar(255)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" ALTER TABLE accounts ADD COLUMN color_code varchar(255)");

        return 4;
    }
    static int upgradeDbToVersion5(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" ALTER TABLE accounts ADD COLUMN favorite tinyint default 0");

        return 5;
    }
    static int upgradeDbToVersion6(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.content.ContentValues r1;
        java.lang.String[] $r2;
        android.database.Cursor $r3;
        boolean $z0;
        int $i0;
        java.lang.String $r4;
        long $l1;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" ALTER TABLE accounts ADD COLUMN full_name varchar(255) ");

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "_id";

        $r2[1] = "uid";

        $r3 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r2, null, null, null, null, null);

     label1:
        if $r3 == null goto label2;

        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r4 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r4 = staticinvoke <org.gnucash.android.db.MigrationHelper: java.lang.String getFullyQualifiedAccountName(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r0, $r4);

        if $r4 == null goto label1;

        r1 = new android.content.ContentValues;

        specialinvoke r1.<android.content.ContentValues: void <init>()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("full_name", $r4);

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_id");

        $l1 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id = ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r1, $r4, null);

        goto label1;

     label2:
        if $r3 == null goto label3;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

     label3:
        return 6;
    }
    static int upgradeDbToVersion7(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE transactions RENAME TO transactions_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create table transactions (_id integer primary key autoincrement, uid varchar(255) not null, name varchar(255), description text, timestamp integer not null, is_exported tinyint default 0, currency_code varchar(255) not null, recurrence_period integer default 0, UNIQUE (uid) );");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO transactions ( _id , uid , name , description , timestamp , is_exported , currency_code , recurrence_period )  SELECT transactions_bak._id , transactions_bak.uid , transactions_bak.name , transactions_bak.description , transactions_bak.timestamp , transactions_bak.is_exported , accounts.currency_code , transactions_bak.recurrence_period FROM transactions_bak , accounts ON transactions_bak.account_uid == accounts.uid");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE splits (_id integer primary key autoincrement, uid varchar(255) not null, memo text, type varchar(255) not null, amount varchar(255) not null, account_uid varchar(255) not null, transaction_uid varchar(255) not null, FOREIGN KEY (account_uid) REFERENCES accounts (uid), FOREIGN KEY (transaction_uid) REFERENCES transactions (uid), UNIQUE (uid) );");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO splits ( uid , type , amount , account_uid , transaction_uid ) SELECT LOWER(HEX(RANDOMBLOB(16))) , CASE WHEN accounts.type IN ( \'CASH\' , \'BANK\', \'ASSET\', \'EXPENSE\', \'RECEIVABLE\', \'STOCK\', \'MUTUAL\' ) THEN CASE WHEN amount < 0 THEN \'CREDIT\' ELSE \'DEBIT\' END ELSE CASE WHEN amount < 0 THEN \'DEBIT\' ELSE \'CREDIT\' END END , ABS ( transactions_bak.amount ) , transactions_bak.account_uid , transactions_bak.uid FROM transactions_bak , accounts ON transactions_bak.account_uid = accounts.uid UNION SELECT LOWER(HEX(RANDOMBLOB(16))) AS uid , CASE WHEN accounts.type IN ( \'CASH\' , \'BANK\', \'ASSET\', \'EXPENSE\', \'RECEIVABLE\', \'STOCK\', \'MUTUAL\' ) THEN CASE WHEN amount < 0 THEN \'DEBIT\' ELSE \'CREDIT\' END ELSE CASE WHEN amount < 0 THEN \'CREDIT\' ELSE \'DEBIT\' END END , ABS ( transactions_bak.amount ) , transactions_bak.double_account_uid , transactions_baK.uid FROM transactions_bak , accounts ON transactions_bak.account_uid = accounts.uid WHERE transactions_bak.double_account_uid IS NOT NULL");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE transactions_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 7;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    static int upgradeDbToVersion8(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.content.ContentValues r1;
        android.content.Intent r2;
        java.sql.Timestamp r3;
        java.lang.String $r4, $r9, $r14, $r25, $r26, $r29;
        java.io.File $r5;
        java.lang.StringBuilder $r6;
        java.lang.Thread $r7;
        java.lang.Runnable $r8;
        java.lang.String[] $r10, $r11;
        org.gnucash.android.model.AccountType $r12;
        android.database.Cursor $r13, $r27;
        boolean $z0;
        int $i0;
        long $l1, $l2, $l3;
        java.lang.Long $r15;
        java.lang.Integer $r16;
        android.content.Context $r17;
        android.app.PendingIntent $r18;
        java.lang.Object $r19;
        android.app.AlarmManager r20;
        java.lang.Throwable $r21, $r22, $r28, $r30;
        double $d0;
        java.math.BigDecimal $r23, $r24;
        byte $b4;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Upgrading database to version 8");

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = <org.gnucash.android.export.Exporter: java.lang.String BASE_FOLDER_PATH>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/backups/");

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r4);

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = <org.gnucash.android.export.Exporter: java.lang.String BASE_FOLDER_PATH>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/exports/");

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r4);

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        $r7 = new java.lang.Thread;

        $r8 = <org.gnucash.android.db.MigrationHelper: java.lang.Runnable moveExportedFilesToNewDefaultLocation>;

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Creating scheduled actions table");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE scheduled_actions (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, action_uid varchar(255) not null, type varchar(255) not null, period  integer not null, last_run integer default 0, start_time integer not null, end_time integer default 0, tag text, is_enabled tinyint default 1, total_frequency integer default 0, execution_count integer default 0, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("scheduled_actions");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Migrating accounts table");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE accounts RENAME TO accounts_bak");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE accounts (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, name varchar(255) not null, type varchar(255) not null, currency_code varchar(255) not null, description varchar(255), color_code varchar(255), favorite tinyint default 0, is_hidden tinyint default 0, full_name varchar(255), is_placeholder tinyint default 0, parent_account_uid varchar(255), default_transfer_account_uid varchar(255), created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("accounts");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO accounts ( _id,uid , name , type , currency_code , color_code , favorite , full_name , is_placeholder , is_hidden , parent_account_uid , default_transfer_account_uid) SELECT accounts_bak._id , accounts_bak.uid , accounts_bak.name , accounts_bak.type , accounts_bak.currency_code , accounts_bak.color_code , accounts_bak.favorite , accounts_bak.full_name , accounts_bak.is_placeholder ,  CASE WHEN accounts_bak.type = \'ROOT\' THEN 1 ELSE 0 END, accounts_bak.parent_account_uid , accounts_bak.default_transfer_account_uid FROM accounts_bak;");

        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Migrating transactions table");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE transactions RENAME TO transactions_bak");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE transactions (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, name varchar(255), description text, timestamp integer not null, is_exported tinyint default 0, is_template tinyint default 0, currency_code varchar(255) not null, scheduled_action_uid varchar(255), created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (scheduled_action_uid) REFERENCES scheduled_actions (uid) ON DELETE SET NULL );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("transactions");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO transactions ( _id , uid , name , description , timestamp , is_exported , currency_code , is_template)  SELECT transactions_bak._id , transactions_bak.uid , transactions_bak.name , transactions_bak.description , transactions_bak.timestamp , transactions_bak.is_exported , transactions_bak.currency_code ,  CASE WHEN transactions_bak.recurrence_period > 0 THEN 1 ELSE 0 END  FROM transactions_bak;");

        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Migrating splits table");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE splits RENAME TO splits_bak");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE splits (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, memo text, type varchar(255) not null, amount varchar(255) not null, account_uid varchar(255) not null, transaction_uid varchar(255) not null, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (account_uid) REFERENCES accounts (uid) ON DELETE CASCADE, FOREIGN KEY (transaction_uid) REFERENCES transactions (uid) ON DELETE CASCADE );");

        $r4 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("splits");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO splits ( _id , uid , memo , type , amount , account_uid , transaction_uid)  SELECT splits_bak._id , splits_bak.uid , splits_bak.memo , splits_bak.type , splits_bak.amount , splits_bak.account_uid , splits_bak.transaction_uid FROM splits_bak;");

        r3 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.sql.Timestamp getTimestampFromNow()>();

        $r4 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.lang.String getUtcStringFromTimestamp(java.sql.Timestamp)>(r3);

        $r9 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r9, "Creating default root account if none exists");

        r1 = new android.content.ContentValues;

        specialinvoke r1.<android.content.ContentValues: void <init>()>();

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "uid";

        $r11 = newarray (java.lang.String)[1];

        $r12 = <org.gnucash.android.model.AccountType: org.gnucash.android.model.AccountType ROOT>;

        $r9 = virtualinvoke $r12.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r11[0] = $r9;

        $r13 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r10, "type= ?", $r11, null, null, null);

     label02:
        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToFirst()>();

     label03:
        if $z0 == 0 goto label13;

     label04:
        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r9 = interfaceinvoke $r13.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label05:
        interfaceinvoke $r13.<android.database.Cursor: void close()>();

        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("parent_account_uid", $r9);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "ROOT";

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r1, "parent_account_uid IS NULL AND type != ?", $r10);

        $r14 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r14, "Migrating existing recurring transactions");

        $r13 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("transactions_bak", null, "recurrence_period > 0", null, null, null, null);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label06:
        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToNext()>();

     label07:
        if $z0 == 0 goto label19;

     label08:
        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        r3 = new java.sql.Timestamp;

        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("timestamp");

        $l2 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>($i0);

        specialinvoke r3.<java.sql.Timestamp: void <init>(long)>($l2);

        $r14 = staticinvoke <org.gnucash.android.util.TimestampHelper: java.lang.String getUtcStringFromTimestamp(java.sql.Timestamp)>(r3);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("created_at", $r14);

        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_id");

        $l2 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>($i0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("transactions", r1, $r14, null);

        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        $r14 = staticinvoke <org.gnucash.android.model.BaseModel: java.lang.String generateUID()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uid", $r14);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("created_at", $r4);

        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r14 = interfaceinvoke $r13.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("action_uid", $r14);

        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("recurrence_period");

        $l3 = interfaceinvoke $r13.<android.database.Cursor: long getLong(int)>($i0);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("period", $r15);

        $l3 = virtualinvoke r3.<java.sql.Timestamp: long getTime()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("start_time", $r15);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("end_time", $r16);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("last_run", $r15);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", "TRANSACTION");

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tag", "");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_enabled", $r16);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("total_frequency", $r16);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("execution_count", $r16);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("scheduled_actions", null, r1);

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.INSERT");

        virtualinvoke r2.<android.content.Intent: android.content.Intent setType(java.lang.String)>("vnd.android.cursor.item/vnd.org.gnucash.android.transaction");

        $r17 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

     label09:
        $i0 = (int) $l2;

     label10:
        $r18 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r17, $i0, r2, 268435456);

        $r19 = virtualinvoke $r17.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r20 = (android.app.AlarmManager) $r19;

        virtualinvoke r20.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r18);

     label11:
        goto label06;

     label12:
        $r21 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r21;

     label13:
        $r14 = staticinvoke <org.gnucash.android.model.BaseModel: java.lang.String generateUID()>();

     label14:
        $r9 = $r14;

     label15:
        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uid", $r14);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("created_at", $r4);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", "ROOT");

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", "ROOT");

        $r14 = <org.gnucash.android.model.Money: java.lang.String DEFAULT_CURRENCY_CODE>;

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("currency_code", $r14);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_placeholder", $r16);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_hidden", $r16);

        virtualinvoke r1.<android.content.ContentValues: void putNull(java.lang.String)>("color_code");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("favorite", $r16);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("full_name", " ");

        virtualinvoke r1.<android.content.ContentValues: void putNull(java.lang.String)>("parent_account_uid");

        virtualinvoke r1.<android.content.ContentValues: void putNull(java.lang.String)>("default_transfer_account_uid");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", null, r1);

     label16:
        goto label05;

     label17:
        $r22 := @caughtexception;

     label18:
        interfaceinvoke $r13.<android.database.Cursor: void close()>();

        throw $r22;

     label19:
        interfaceinvoke $r13.<android.database.Cursor: void close()>();

        $r14 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r14, "Auto-balancing existing transaction splits");

        $r10 = newarray (java.lang.String)[4];

        $r10[0] = "transactions.uid AS trans_uid";

        $r10[1] = "transactions.currency_code AS trans_currency";

        $r10[2] = "TOTAL ( CASE WHEN splits.type = \'DEBIT\' THEN splits.amount ELSE - splits.amount END ) AS trans_acct_balance";

        $r10[3] = "COUNT ( DISTINCT accounts.currency_code ) AS trans_currency_count";

        $r13 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("transactions , splits ON transactions.uid=splits.transaction_uid , accounts ON splits.account_uid=accounts.uid", $r10, "transactions.is_template == 0", null, "transactions.uid", "trans_acct_balance != 0 AND trans_currency_count = 1", null);

     label20:
        $z0 = interfaceinvoke $r13.<android.database.Cursor: boolean moveToNext()>();

     label21:
        if $z0 == 0 goto label44;

     label22:
        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("trans_acct_balance");

        $d0 = interfaceinvoke $r13.<android.database.Cursor: double getDouble(int)>($i0);

        $r23 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        $r23 = virtualinvoke $r23.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4);

        $r24 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $i0 = virtualinvoke $r23.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r24);

     label23:
        if $i0 == 0 goto label20;

     label24:
        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("trans_currency");

        $r25 = interfaceinvoke $r13.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r17 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        $r14 = virtualinvoke $r17.<android.content.Context: java.lang.String getString(int)>(2131296323);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "uid";

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = $r26;

        $r27 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r10, "full_name= ?", $r11, null, null, null);

     label25:
        $z0 = interfaceinvoke $r27.<android.database.Cursor: boolean moveToFirst()>();

     label26:
        if $z0 == 0 goto label34;

     label27:
        $i0 = interfaceinvoke $r27.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $r14 = interfaceinvoke $r27.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label28:
        interfaceinvoke $r27.<android.database.Cursor: void close()>();

        $i0 = interfaceinvoke $r13.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("trans_uid");

        $r25 = interfaceinvoke $r13.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        $r26 = staticinvoke <org.gnucash.android.model.BaseModel: java.lang.String generateUID()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uid", $r26);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("created_at", $r4);

        $r24 = virtualinvoke $r23.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        $r26 = virtualinvoke $r24.<java.math.BigDecimal: java.lang.String toPlainString()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("amount", $r26);

        $r24 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $i0 = virtualinvoke $r23.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r24);

     label29:
        if $i0 >= 0 goto label43;

        $r26 = "DEBIT";

     label30:
        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r26);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("memo", "");

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("account_uid", $r14);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("transaction_uid", $r25);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("splits", null, r1);

        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("modified_at", $r4);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = $r25;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("transactions", r1, "uid == ?", $r10);

     label31:
        goto label20;

     label32:
        $r28 := @caughtexception;

     label33:
        interfaceinvoke $r13.<android.database.Cursor: void close()>();

        throw $r28;

     label34:
        $r29 = staticinvoke <org.gnucash.android.model.BaseModel: java.lang.String generateUID()>();

     label35:
        $r14 = $r29;

     label36:
        virtualinvoke r1.<android.content.ContentValues: void clear()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uid", $r29);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("created_at", $r4);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r26);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", "BANK");

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("currency_code", $r25);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_placeholder", $r16);

        $z0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: boolean isDoubleEntryEnabled()>();

     label37:
        if $z0 == 0 goto label42;

        $b4 = 0;

     label38:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b4);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_hidden", $r16);

        virtualinvoke r1.<android.content.ContentValues: void putNull(java.lang.String)>("color_code");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("favorite", $r16);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("full_name", $r26);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("parent_account_uid", $r9);

        virtualinvoke r1.<android.content.ContentValues: void putNull(java.lang.String)>("default_transfer_account_uid");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", null, r1);

     label39:
        goto label28;

     label40:
        $r30 := @caughtexception;

     label41:
        interfaceinvoke $r27.<android.database.Cursor: void close()>();

        throw $r30;

     label42:
        $b4 = 1;

        goto label38;

     label43:
        $r26 = "CREDIT";

        goto label30;

     label44:
        interfaceinvoke $r13.<android.database.Cursor: void close()>();

        $r4 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Dropping temporary migration tables");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE splits_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE accounts_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE transactions_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label45:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        $r17 = staticinvoke <org.gnucash.android.app.GnuCashApplication: android.content.Context getAppContext()>();

        staticinvoke <org.gnucash.android.app.GnuCashApplication: void startScheduledActionExecutionService(android.content.Context)>($r17);

        return 8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label20 with label12;
        catch java.lang.Throwable from label20 to label21 with label32;
        catch java.lang.Throwable from label22 to label23 with label32;
        catch java.lang.Throwable from label24 to label25 with label32;
        catch java.lang.Throwable from label25 to label26 with label40;
        catch java.lang.Throwable from label27 to label28 with label40;
        catch java.lang.Throwable from label28 to label29 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label33 to label34 with label12;
        catch java.lang.Throwable from label34 to label35 with label40;
        catch java.lang.Throwable from label36 to label37 with label40;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label41 to label42 with label32;
        catch java.lang.Throwable from label44 to label45 with label12;
    }
    static int upgradeDbToVersion9(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.ArrayList r1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;
        org.gnucash.android.model.Commodity$Namespace $r4;
        android.database.Cursor $r5;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r6, $r7, $r10;
        java.lang.Exception r8;
        java.lang.RuntimeException $r9;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "Upgrading database to version 9");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE commodities (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, namespace varchar(255) not null default ");

        $r4 = <org.gnucash.android.model.Commodity$Namespace: org.gnucash.android.model.Commodity$Namespace ISO4217>;

        $r2 = virtualinvoke $r4.<org.gnucash.android.model.Commodity$Namespace: java.lang.String name()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fullname");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" varchar(255) not null, ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mnemonic");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" varchar(255) not null, ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("local_symbol");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" varchar(255) not null default \'\', ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cusip");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" varchar(255), ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fraction");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer not null, ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("quote_flag");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer not null, ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("created_at");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("modified_at");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r2 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("commodities");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE UNIQUE INDEX \'commodities_uid_index\' ON commodities(uid)");

     label02:
        staticinvoke <org.gnucash.android.db.MigrationHelper: void importCommodities(android.database.sqlite.SQLiteDatabase)>($r0);

     label03:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" ALTER TABLE accounts ADD COLUMN commodity_uid varchar(255)  REFERENCES commodities (uid) ");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" ALTER TABLE transactions ADD COLUMN commodity_uid varchar(255)  REFERENCES commodities (uid) ");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("UPDATE accounts SET commodity_uid =  (SELECT uid FROM commodities WHERE accounts.commodity_uid = commodities.uid)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("UPDATE transactions SET commodity_uid =  (SELECT uid FROM commodities WHERE transactions.commodity_uid = commodities.uid)");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE prices (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, commodity_guid varchar(255) not null, currency_guid varchar(255) not null, type varchar(255), date TIMESTAMP not null, source text, value_num integer not null, value_denom integer not null, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, UNIQUE (commodity_guid, currency_guid) ON CONFLICT REPLACE, FOREIGN KEY (commodity_guid) REFERENCES commodities (uid) ON DELETE CASCADE, FOREIGN KEY (currency_guid) REFERENCES commodities (uid) ON DELETE CASCADE );");

        $r2 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("prices");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE UNIQUE INDEX \'prices_uid_index\' ON prices(uid)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE splits RENAME TO splits_bak");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE splits (_id integer primary key autoincrement, uid varchar(255) not null UNIQUE, memo text, type varchar(255) not null, value_num integer not null, value_denom integer not null, quantity_num integer not null, quantity_denom integer not null, account_uid varchar(255) not null, transaction_uid varchar(255) not null, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (account_uid) REFERENCES accounts (uid) ON DELETE CASCADE, FOREIGN KEY (transaction_uid) REFERENCES transactions (uid) ON DELETE CASCADE );");

        $r2 = staticinvoke <org.gnucash.android.db.DatabaseHelper: java.lang.String createUpdatedAtTrigger(java.lang.String)>("splits");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("INSERT INTO splits ( _id , uid , memo , type , value_num , value_denom , quantity_num , quantity_denom , account_uid , transaction_uid)  SELECT splits_bak._id , splits_bak.uid , splits_bak.memo , splits_bak.type , splits_bak.amount * 100, 100, splits_bak.amount * 100, 100, splits_bak.account_uid , splits_bak.transaction_uid FROM splits_bak;");

        $r5 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT A.uid AS account_uid  FROM accounts AS A, commodities AS C  WHERE A.currency_code = C.mnemonic AND C.fraction= 1", null);

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label04:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label05:
        if $z0 == 0 goto label13;

     label06:
        $i0 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("account_uid");

        $r2 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label07:
        goto label04;

     label08:
        $r6 := @caughtexception;

     label09:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

     label10:
        $r7 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r7;

     label11:
        r8 := @caughtexception;

     label12:
        $r2 = <org.gnucash.android.db.DatabaseHelper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, "Error loading currencies into the database", r8);

        staticinvoke <com.crashlytics.android.Crashlytics: void logException(java.lang.Throwable)>(r8);

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r8);

        throw $r9;

     label13:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        $r2 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("\' , \'", r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REPLACE INTO splits ( uid , memo , type , account_uid , transaction_uid , created_at , modified_at , value_num , value_denom , quantity_num , quantity_denom)  SELECT uid , memo , type , account_uid , transaction_uid , created_at , modified_at ,  ROUND (value_num/ 100), 1,  ROUND (quantity_num/ 100), 1  FROM splits WHERE account_uid IN (\'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r5 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT A.uid AS account_uid  FROM accounts AS A, commodities AS C  WHERE A.currency_code = C.mnemonic AND C.fraction= 1000", null);

        interfaceinvoke r1.<java.util.List: void clear()>();

     label14:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label15:
        if $z0 == 0 goto label20;

     label16:
        $i0 = interfaceinvoke $r5.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("account_uid");

        $r2 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label17:
        goto label14;

     label18:
        $r10 := @caughtexception;

     label19:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r10;

     label20:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        $r2 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("\' , \'", r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REPLACE INTO splits ( uid , memo , type , account_uid , transaction_uid , created_at , modified_at , value_num , value_denom , quantity_num , quantity_denom)  SELECT uid , memo , type , account_uid , transaction_uid , created_at , modified_at , value_num* 10, 1000, quantity_num* 10, 1000  FROM splits WHERE account_uid IN (\'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE splits_bak");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label21:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 9;

     label22:
        r8 := @caughtexception;

        goto label12;

     label23:
        r8 := @caughtexception;

        goto label12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch org.xml.sax.SAXException from label02 to label03 with label11;
        catch javax.xml.parsers.ParserConfigurationException from label02 to label03 with label22;
        catch java.io.IOException from label02 to label03 with label23;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label12 to label14 with label10;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label21 with label10;
    }
