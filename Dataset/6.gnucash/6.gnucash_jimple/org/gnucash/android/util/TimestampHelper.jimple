org.gnucash.android.util.TimestampHelper extends java.lang.Object
public static final java.sql.Timestamp EPOCH_ZERO_TIMESTAMP
private static final org.joda.time.format.DateTimeFormatter UTC_DATE_FORMAT
private static final org.joda.time.format.DateTimeFormatter UTC_DATE_WITH_MILLISECONDS_FORMAT
private static final org.joda.time.DateTimeZone UTC_TIME_ZONE
    static void <clinit>()
    {
        java.sql.Timestamp $r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.format.DateTimeFormatter $r2;

        $r0 = new java.sql.Timestamp;

        specialinvoke $r0.<java.sql.Timestamp: void <init>(long)>(0L);

        <org.gnucash.android.util.TimestampHelper: java.sql.Timestamp EPOCH_ZERO_TIMESTAMP> = $r0;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>("UTC");

        <org.gnucash.android.util.TimestampHelper: org.joda.time.DateTimeZone UTC_TIME_ZONE> = $r1;

        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        <org.gnucash.android.util.TimestampHelper: org.joda.time.format.DateTimeFormatter UTC_DATE_FORMAT> = $r2;

        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd HH:mm:ss.SSS");

        <org.gnucash.android.util.TimestampHelper: org.joda.time.format.DateTimeFormatter UTC_DATE_WITH_MILLISECONDS_FORMAT> = $r2;

        return;
    }
    private void <init>()
    {
        org.gnucash.android.util.TimestampHelper r0;

        r0 := @this: org.gnucash.android.util.TimestampHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.sql.Timestamp getTimestampFromEpochZero()
    {
        java.sql.Timestamp r0;

        r0 = <org.gnucash.android.util.TimestampHelper: java.sql.Timestamp EPOCH_ZERO_TIMESTAMP>;

        return r0;
    }
    public static java.sql.Timestamp getTimestampFromNow()
    {
        java.sql.Timestamp $r0;
        long $l0;

        $r0 = new java.sql.Timestamp;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r0.<java.sql.Timestamp: void <init>(long)>($l0);

        return $r0;
    }
    public static java.sql.Timestamp getTimestampFromUtcString(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException r1, r2;
        org.joda.time.format.DateTimeFormatter $r3;
        org.joda.time.DateTimeZone $r4;
        org.joda.time.DateTime $r5;
        java.sql.Timestamp $r6;
        long $l0;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: java.lang.String;

        $r3 = <org.gnucash.android.util.TimestampHelper: org.joda.time.format.DateTimeFormatter UTC_DATE_WITH_MILLISECONDS_FORMAT>;

        $r4 = <org.gnucash.android.util.TimestampHelper: org.joda.time.DateTimeZone UTC_TIME_ZONE>;

     label01:
        $r3 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r4);

        $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>($r0);

     label02:
        $r6 = new java.sql.Timestamp;

     label03:
        $l0 = virtualinvoke $r5.<org.joda.time.DateTime: long getMillis()>();

        specialinvoke $r6.<java.sql.Timestamp: void <init>(long)>($l0);

     label04:
        return $r6;

     label05:
        r1 := @caughtexception;

        $r3 = <org.gnucash.android.util.TimestampHelper: org.joda.time.format.DateTimeFormatter UTC_DATE_FORMAT>;

        $r4 = <org.gnucash.android.util.TimestampHelper: org.joda.time.DateTimeZone UTC_TIME_ZONE>;

     label06:
        $r3 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r4);

        $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>($r0);

     label07:
        $r6 = new java.sql.Timestamp;

     label08:
        $l0 = virtualinvoke $r5.<org.joda.time.DateTime: long getMillis()>();

        specialinvoke $r6.<java.sql.Timestamp: void <init>(long)>($l0);

     label09:
        return $r6;

     label10:
        r2 := @caughtexception;

        r1 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown utcString = \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r0, r2);

        throw r1;

        catch java.lang.IllegalArgumentException from label01 to label02 with label05;
        catch java.lang.IllegalArgumentException from label03 to label04 with label05;
        catch java.lang.IllegalArgumentException from label06 to label07 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
    }
    public static java.lang.String getUtcStringFromTimestamp(java.sql.Timestamp)
    {
        java.sql.Timestamp $r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.format.DateTimeFormatter $r2;
        long $l0;
        java.lang.String $r3;

        $r0 := @parameter0: java.sql.Timestamp;

        $r2 = <org.gnucash.android.util.TimestampHelper: org.joda.time.format.DateTimeFormatter UTC_DATE_WITH_MILLISECONDS_FORMAT>;

        $r1 = <org.gnucash.android.util.TimestampHelper: org.joda.time.DateTimeZone UTC_TIME_ZONE>;

        $r2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r1);

        $l0 = virtualinvoke $r0.<java.sql.Timestamp: long getTime()>();

        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>($l0);

        return $r3;
    }
