okio.Okio$2 extends java.lang.Object implements okio.Source
final java.io.InputStream val$in
final okio.Timeout val$timeout
    void <init>(okio.Timeout, java.io.InputStream)
    {
        okio.Okio$2 r0;
        okio.Timeout $r1;
        java.io.InputStream $r2;

        r0 := @this: okio.Okio$2;

        $r1 := @parameter0: okio.Timeout;

        $r2 := @parameter1: java.io.InputStream;

        r0.<okio.Okio$2: okio.Timeout val$timeout> = $r1;

        r0.<okio.Okio$2: java.io.InputStream val$in> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.Okio$2 r0;
        java.io.InputStream $r1;

        r0 := @this: okio.Okio$2;

        $r1 = r0.<okio.Okio$2: java.io.InputStream val$in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        okio.Okio$2 r0;
        okio.Buffer $r1;
        long $l0, $l3;
        int i1, $i4;
        byte $b2;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        okio.Timeout $r5;
        okio.Segment $r6;
        java.io.InputStream $r7;
        byte[] $r8;

        r0 := @this: okio.Okio$2;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label2;

        return 0L;

     label2:
        $r5 = r0.<okio.Okio$2: okio.Timeout val$timeout>;

        virtualinvoke $r5.<okio.Timeout: void throwIfReached()>();

        $r6 = virtualinvoke $r1.<okio.Buffer: okio.Segment writableSegment(int)>(1);

        i1 = $r6.<okio.Segment: int limit>;

        i1 = 2048 - i1;

        $l3 = (long) i1;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l3);

        i1 = (int) $l0;

        $r7 = r0.<okio.Okio$2: java.io.InputStream val$in>;

        $r8 = $r6.<okio.Segment: byte[] data>;

        $i4 = $r6.<okio.Segment: int limit>;

        i1 = virtualinvoke $r7.<java.io.InputStream: int read(byte[],int,int)>($r8, $i4, i1);

        if i1 != -1 goto label3;

        return -1L;

     label3:
        $i4 = $r6.<okio.Segment: int limit>;

        $i4 = $i4 + i1;

        $r6.<okio.Segment: int limit> = $i4;

        $l3 = $r1.<okio.Buffer: long size>;

        $l0 = (long) i1;

        $l0 = $l3 + $l0;

        $r1.<okio.Buffer: long size> = $l0;

        $l0 = (long) i1;

        return $l0;
    }
    public okio.Timeout timeout()
    {
        okio.Okio$2 r0;
        okio.Timeout r1;

        r0 := @this: okio.Okio$2;

        r1 = r0.<okio.Okio$2: okio.Timeout val$timeout>;

        return r1;
    }
    public java.lang.String toString()
    {
        okio.Okio$2 r0;
        java.lang.StringBuilder $r1;
        java.io.InputStream $r2;
        java.lang.String $r3;

        r0 := @this: okio.Okio$2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("source(");

        $r2 = r0.<okio.Okio$2: java.io.InputStream val$in>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
