okio.Okio$3 extends okio.AsyncTimeout
final java.net.Socket val$socket
    void <init>(java.net.Socket)
    {
        okio.Okio$3 r0;
        java.net.Socket $r1;

        r0 := @this: okio.Okio$3;

        $r1 := @parameter0: java.net.Socket;

        r0.<okio.Okio$3: java.net.Socket val$socket> = $r1;

        specialinvoke r0.<okio.AsyncTimeout: void <init>()>();

        return;
    }
    protected void timedOut()
    {
        okio.Okio$3 r0;
        java.lang.Exception r1;
        java.util.logging.Level $r2;
        java.net.Socket $r3;
        java.util.logging.Logger $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: okio.Okio$3;

     label1:
        $r3 = r0.<okio.Okio$3: java.net.Socket val$socket>;

        virtualinvoke $r3.<java.net.Socket: void close()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r4 = staticinvoke <okio.Okio: java.util.logging.Logger access$000()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close timed out socket ");

        $r3 = r0.<okio.Okio$3: java.net.Socket val$socket>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r6, r1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
