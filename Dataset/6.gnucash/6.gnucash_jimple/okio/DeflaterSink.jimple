okio.DeflaterSink extends java.lang.Object implements okio.Sink
private boolean closed
private final java.util.zip.Deflater deflater
private final okio.BufferedSink sink
    void <init>(okio.BufferedSink, java.util.zip.Deflater)
    {
        okio.DeflaterSink r0;
        okio.BufferedSink $r1;
        java.util.zip.Deflater $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: okio.DeflaterSink;

        $r1 := @parameter0: okio.BufferedSink;

        $r2 := @parameter1: java.util.zip.Deflater;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source == null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inflater == null");

        throw $r3;

     label2:
        r0.<okio.DeflaterSink: okio.BufferedSink sink> = $r1;

        r0.<okio.DeflaterSink: java.util.zip.Deflater deflater> = $r2;

        return;
    }
    public void <init>(okio.Sink, java.util.zip.Deflater)
    {
        okio.DeflaterSink r0;
        okio.Sink $r1;
        java.util.zip.Deflater $r2;
        okio.BufferedSink $r3;

        r0 := @this: okio.DeflaterSink;

        $r1 := @parameter0: okio.Sink;

        $r2 := @parameter1: java.util.zip.Deflater;

        $r3 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r1);

        specialinvoke r0.<okio.DeflaterSink: void <init>(okio.BufferedSink,java.util.zip.Deflater)>($r3, $r2);

        return;
    }
    private void deflate(boolean) throws java.io.IOException
    {
        okio.DeflaterSink r0;
        boolean $z0, $z1;
        okio.BufferedSink $r1;
        okio.Buffer $r2;
        okio.Segment $r3, $r6;
        java.util.zip.Deflater $r4;
        byte[] $r5;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: okio.DeflaterSink;

        $z0 := @parameter0: boolean;

        $r1 = r0.<okio.DeflaterSink: okio.BufferedSink sink>;

        $r2 = interfaceinvoke $r1.<okio.BufferedSink: okio.Buffer buffer()>();

     label1:
        $r3 = virtualinvoke $r2.<okio.Buffer: okio.Segment writableSegment(int)>(1);

        if $z0 == 0 goto label3;

        $r4 = r0.<okio.DeflaterSink: java.util.zip.Deflater deflater>;

        $r5 = $r3.<okio.Segment: byte[] data>;

        $i0 = $r3.<okio.Segment: int limit>;

        $i1 = $r3.<okio.Segment: int limit>;

        $i1 = 2048 - $i1;

        $i0 = virtualinvoke $r4.<java.util.zip.Deflater: int deflate(byte[],int,int,int)>($r5, $i0, $i1, 2);

     label2:
        if $i0 <= 0 goto label4;

        $i1 = $r3.<okio.Segment: int limit>;

        $i1 = $i1 + $i0;

        $r3.<okio.Segment: int limit> = $i1;

        $l2 = $r2.<okio.Buffer: long size>;

        $l3 = (long) $i0;

        $l2 = $l2 + $l3;

        $r2.<okio.Buffer: long size> = $l2;

        $r1 = r0.<okio.DeflaterSink: okio.BufferedSink sink>;

        interfaceinvoke $r1.<okio.BufferedSink: okio.BufferedSink emitCompleteSegments()>();

        goto label1;

     label3:
        $r4 = r0.<okio.DeflaterSink: java.util.zip.Deflater deflater>;

        $r5 = $r3.<okio.Segment: byte[] data>;

        $i0 = $r3.<okio.Segment: int limit>;

        $i1 = $r3.<okio.Segment: int limit>;

        $i1 = 2048 - $i1;

        $i0 = virtualinvoke $r4.<java.util.zip.Deflater: int deflate(byte[],int,int)>($r5, $i0, $i1);

        goto label2;

     label4:
        $r4 = r0.<okio.DeflaterSink: java.util.zip.Deflater deflater>;

        $z1 = virtualinvoke $r4.<java.util.zip.Deflater: boolean needsInput()>();

        if $z1 == 0 goto label1;

        $i0 = $r3.<okio.Segment: int pos>;

        $i1 = $r3.<okio.Segment: int limit>;

        if $i0 != $i1 goto label5;

        $r6 = virtualinvoke $r3.<okio.Segment: okio.Segment pop()>();

        $r2.<okio.Buffer: okio.Segment head> = $r6;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r3);

     label5:
        return;
    }
    public void close() throws java.io.IOException
    {
        okio.DeflaterSink r0;
        boolean $z0;
        java.lang.Throwable r1, r4, r5;
        java.util.zip.Deflater $r2;
        okio.BufferedSink $r3;

        r0 := @this: okio.DeflaterSink;

        $z0 = r0.<okio.DeflaterSink: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = null;

     label2:
        virtualinvoke r0.<okio.DeflaterSink: void finishDeflate()>();

     label3:
        $r2 = r0.<okio.DeflaterSink: java.util.zip.Deflater deflater>;

        virtualinvoke $r2.<java.util.zip.Deflater: void end()>();

     label4:
        $r3 = r0.<okio.DeflaterSink: okio.BufferedSink sink>;

        interfaceinvoke $r3.<okio.BufferedSink: void close()>();

     label5:
        r0.<okio.DeflaterSink: boolean closed> = 1;

        if r1 == null goto label9;

        staticinvoke <okio.Util: void sneakyRethrow(java.lang.Throwable)>(r1);

        return;

     label6:
        r1 := @caughtexception;

        goto label3;

     label7:
        r4 := @caughtexception;

        if r1 != null goto label4;

        r1 = r4;

        goto label4;

     label8:
        r5 := @caughtexception;

        if r1 != null goto label5;

        r1 = r5;

        goto label5;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label8;
    }
    void finishDeflate() throws java.io.IOException
    {
        okio.DeflaterSink r0;
        java.util.zip.Deflater $r1;

        r0 := @this: okio.DeflaterSink;

        $r1 = r0.<okio.DeflaterSink: java.util.zip.Deflater deflater>;

        virtualinvoke $r1.<java.util.zip.Deflater: void finish()>();

        specialinvoke r0.<okio.DeflaterSink: void deflate(boolean)>(0);

        return;
    }
    public void flush() throws java.io.IOException
    {
        okio.DeflaterSink r0;
        okio.BufferedSink $r1;

        r0 := @this: okio.DeflaterSink;

        specialinvoke r0.<okio.DeflaterSink: void deflate(boolean)>(1);

        $r1 = r0.<okio.DeflaterSink: okio.BufferedSink sink>;

        interfaceinvoke $r1.<okio.BufferedSink: void flush()>();

        return;
    }
    public okio.Timeout timeout()
    {
        okio.DeflaterSink r0;
        okio.Timeout $r1;
        okio.BufferedSink $r2;

        r0 := @this: okio.DeflaterSink;

        $r2 = r0.<okio.DeflaterSink: okio.BufferedSink sink>;

        $r1 = interfaceinvoke $r2.<okio.BufferedSink: okio.Timeout timeout()>();

        return $r1;
    }
    public java.lang.String toString()
    {
        okio.DeflaterSink r0;
        java.lang.StringBuilder $r1;
        okio.BufferedSink $r2;
        java.lang.String $r3;

        r0 := @this: okio.DeflaterSink;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DeflaterSink(");

        $r2 = r0.<okio.DeflaterSink: okio.BufferedSink sink>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okio.DeflaterSink r0;
        okio.Buffer $r1;
        okio.Segment r2, $r5;
        int i0, $i4, $i6;
        long $l1, $l2, $l5;
        byte $b3;
        java.util.zip.Deflater $r3;
        byte[] $r4;

        r0 := @this: okio.DeflaterSink;

        $r1 := @parameter0: okio.Buffer;

        $l1 := @parameter1: long;

        $l2 = $r1.<okio.Buffer: long size>;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l2, 0L, $l1);

     label1:
        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label3;

        r2 = $r1.<okio.Buffer: okio.Segment head>;

        i0 = r2.<okio.Segment: int limit>;

        $i4 = r2.<okio.Segment: int pos>;

        i0 = i0 - $i4;

        $l2 = (long) i0;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l2);

        i0 = (int) $l2;

        $r3 = r0.<okio.DeflaterSink: java.util.zip.Deflater deflater>;

        $r4 = r2.<okio.Segment: byte[] data>;

        $i4 = r2.<okio.Segment: int pos>;

        virtualinvoke $r3.<java.util.zip.Deflater: void setInput(byte[],int,int)>($r4, $i4, i0);

        specialinvoke r0.<okio.DeflaterSink: void deflate(boolean)>(0);

        $l2 = $r1.<okio.Buffer: long size>;

        $l5 = (long) i0;

        $l2 = $l2 - $l5;

        $r1.<okio.Buffer: long size> = $l2;

        $i4 = r2.<okio.Segment: int pos>;

        $i4 = $i4 + i0;

        r2.<okio.Segment: int pos> = $i4;

        $i4 = r2.<okio.Segment: int pos>;

        $i6 = r2.<okio.Segment: int limit>;

        if $i4 != $i6 goto label2;

        $r5 = virtualinvoke r2.<okio.Segment: okio.Segment pop()>();

        $r1.<okio.Buffer: okio.Segment head> = $r5;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>(r2);

     label2:
        $l2 = (long) i0;

        $l1 = $l1 - $l2;

        goto label1;

     label3:
        return;
    }
