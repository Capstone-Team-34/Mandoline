okio.Segment extends java.lang.Object
static final int SIZE
final byte[] data
int limit
okio.Segment next
boolean owner
int pos
okio.Segment prev
boolean shared
    void <init>()
    {
        okio.Segment r0;
        byte[] $r1;

        r0 := @this: okio.Segment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[2048];

        r0.<okio.Segment: byte[] data> = $r1;

        r0.<okio.Segment: boolean owner> = 1;

        r0.<okio.Segment: boolean shared> = 0;

        return;
    }
    void <init>(okio.Segment)
    {
        okio.Segment r0, $r1;
        int $i0, $i1;
        byte[] $r2;

        r0 := @this: okio.Segment;

        $r1 := @parameter0: okio.Segment;

        $r2 = $r1.<okio.Segment: byte[] data>;

        $i0 = $r1.<okio.Segment: int pos>;

        $i1 = $r1.<okio.Segment: int limit>;

        specialinvoke r0.<okio.Segment: void <init>(byte[],int,int)>($r2, $i0, $i1);

        $r1.<okio.Segment: boolean shared> = 1;

        return;
    }
    void <init>(byte[], int, int)
    {
        okio.Segment r0;
        byte[] $r1;
        int $i0, $i1;

        r0 := @this: okio.Segment;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okio.Segment: byte[] data> = $r1;

        r0.<okio.Segment: int pos> = $i0;

        r0.<okio.Segment: int limit> = $i1;

        r0.<okio.Segment: boolean owner> = 0;

        r0.<okio.Segment: boolean shared> = 1;

        return;
    }
    public void compact()
    {
        okio.Segment r0, $r1;
        int i0, i1, $i2;
        java.lang.IllegalStateException $r2;
        boolean $z0;

        r0 := @this: okio.Segment;

        $r1 = r0.<okio.Segment: okio.Segment prev>;

        if $r1 != r0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<okio.Segment: okio.Segment prev>;

        $z0 = $r1.<okio.Segment: boolean owner>;

        if $z0 != 0 goto label2;

        return;

     label2:
        i1 = r0.<okio.Segment: int limit>;

        i0 = r0.<okio.Segment: int pos>;

        i1 = i1 - i0;

        $r1 = r0.<okio.Segment: okio.Segment prev>;

        i0 = $r1.<okio.Segment: int limit>;

        i0 = 2048 - i0;

        $r1 = r0.<okio.Segment: okio.Segment prev>;

        $z0 = $r1.<okio.Segment: boolean shared>;

        if $z0 == 0 goto label4;

        $i2 = 0;

     label3:
        i0 = i0 + $i2;

        if i1 > i0 goto label5;

        $r1 = r0.<okio.Segment: okio.Segment prev>;

        virtualinvoke r0.<okio.Segment: void writeTo(okio.Segment,int)>($r1, i1);

        virtualinvoke r0.<okio.Segment: okio.Segment pop()>();

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>(r0);

        return;

     label4:
        $r1 = r0.<okio.Segment: okio.Segment prev>;

        $i2 = $r1.<okio.Segment: int pos>;

        goto label3;

     label5:
        return;
    }
    public okio.Segment pop()
    {
        okio.Segment r0, $r1, $r2, $r3;

        r0 := @this: okio.Segment;

        $r1 = r0.<okio.Segment: okio.Segment next>;

        if $r1 == r0 goto label2;

        $r1 = r0.<okio.Segment: okio.Segment next>;

     label1:
        $r2 = r0.<okio.Segment: okio.Segment prev>;

        $r3 = r0.<okio.Segment: okio.Segment next>;

        $r2.<okio.Segment: okio.Segment next> = $r3;

        $r2 = r0.<okio.Segment: okio.Segment next>;

        $r3 = r0.<okio.Segment: okio.Segment prev>;

        $r2.<okio.Segment: okio.Segment prev> = $r3;

        r0.<okio.Segment: okio.Segment next> = null;

        r0.<okio.Segment: okio.Segment prev> = null;

        return $r1;

     label2:
        $r1 = null;

        goto label1;
    }
    public okio.Segment push(okio.Segment)
    {
        okio.Segment r0, $r1, $r2;

        r0 := @this: okio.Segment;

        $r1 := @parameter0: okio.Segment;

        $r1.<okio.Segment: okio.Segment prev> = r0;

        $r2 = r0.<okio.Segment: okio.Segment next>;

        $r1.<okio.Segment: okio.Segment next> = $r2;

        $r2 = r0.<okio.Segment: okio.Segment next>;

        $r2.<okio.Segment: okio.Segment prev> = $r1;

        r0.<okio.Segment: okio.Segment next> = $r1;

        return $r1;
    }
    public okio.Segment split(int)
    {
        okio.Segment r0, r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: okio.Segment;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $i2 = r0.<okio.Segment: int limit>;

        $i1 = r0.<okio.Segment: int pos>;

        $i1 = $i2 - $i1;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        r1 = new okio.Segment;

        specialinvoke r1.<okio.Segment: void <init>(okio.Segment)>(r0);

        $i1 = r1.<okio.Segment: int pos>;

        $i1 = $i1 + $i0;

        r1.<okio.Segment: int limit> = $i1;

        $i1 = r0.<okio.Segment: int pos>;

        $i0 = $i1 + $i0;

        r0.<okio.Segment: int pos> = $i0;

        r0 = r0.<okio.Segment: okio.Segment prev>;

        virtualinvoke r0.<okio.Segment: okio.Segment push(okio.Segment)>(r1);

        return r1;
    }
    public void writeTo(okio.Segment, int)
    {
        okio.Segment r0, $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3, $r4;

        r0 := @this: okio.Segment;

        $r1 := @parameter0: okio.Segment;

        $i0 := @parameter1: int;

        $z0 = $r1.<okio.Segment: boolean owner>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i2 = $r1.<okio.Segment: int limit>;

        $i2 = $i2 + $i0;

        if $i2 <= 2048 goto label4;

        $z0 = $r1.<okio.Segment: boolean shared>;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $i2 = $r1.<okio.Segment: int limit>;

        $i2 = $i2 + $i0;

        $i1 = $r1.<okio.Segment: int pos>;

        $i2 = $i2 - $i1;

        if $i2 <= 2048 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label3:
        $r3 = $r1.<okio.Segment: byte[] data>;

        $i2 = $r1.<okio.Segment: int pos>;

        $r4 = $r1.<okio.Segment: byte[] data>;

        $i3 = $r1.<okio.Segment: int limit>;

        $i1 = $r1.<okio.Segment: int pos>;

        $i1 = $i3 - $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i2, $r4, 0, $i1);

        $i2 = $r1.<okio.Segment: int limit>;

        $i1 = $r1.<okio.Segment: int pos>;

        $i2 = $i2 - $i1;

        $r1.<okio.Segment: int limit> = $i2;

        $r1.<okio.Segment: int pos> = 0;

     label4:
        $r3 = r0.<okio.Segment: byte[] data>;

        $i2 = r0.<okio.Segment: int pos>;

        $r4 = $r1.<okio.Segment: byte[] data>;

        $i1 = $r1.<okio.Segment: int limit>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i2, $r4, $i1, $i0);

        $i2 = $r1.<okio.Segment: int limit>;

        $i2 = $i2 + $i0;

        $r1.<okio.Segment: int limit> = $i2;

        $i2 = r0.<okio.Segment: int pos>;

        $i0 = $i2 + $i0;

        r0.<okio.Segment: int pos> = $i0;

        return;
    }
