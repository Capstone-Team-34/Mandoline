okio.ByteString extends java.lang.Object implements java.io.Serializable
public static final okio.ByteString EMPTY
static final char[] HEX_DIGITS
private static final long serialVersionUID
final byte[] data
transient int hashCode
transient java.lang.String utf8
    static void <clinit>()
    {
        okio.ByteString $r0;
        char[] $r1;
        byte[] $r2;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 97;

        $r1[11] = 98;

        $r1[12] = 99;

        $r1[13] = 100;

        $r1[14] = 101;

        $r1[15] = 102;

        <okio.ByteString: char[] HEX_DIGITS> = $r1;

        $r2 = newarray (byte)[0];

        $r0 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r2);

        <okio.ByteString: okio.ByteString EMPTY> = $r0;

        return;
    }
    void <init>(byte[])
    {
        okio.ByteString r0;
        byte[] $r1;

        r0 := @this: okio.ByteString;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okio.ByteString: byte[] data> = $r1;

        return;
    }
    public static okio.ByteString decodeBase64(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        okio.ByteString $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("base64 == null");

        throw $r2;

     label1:
        $r1 = staticinvoke <okio.Base64: byte[] decode(java.lang.String)>($r0);

        if $r1 == null goto label2;

        $r3 = new okio.ByteString;

        specialinvoke $r3.<okio.ByteString: void <init>(byte[])>($r1);

        return $r3;

     label2:
        return null;
    }
    public static okio.ByteString decodeHex(java.lang.String)
    {
        java.lang.String $r0;
        int i0, $i1, $i3;
        byte[] r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        char $c2;
        byte $b4;
        okio.ByteString $r4;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("hex == null");

        throw $r2;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 % 2;

        if $i1 == 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected hex string: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label2:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 / 2;

        r1 = newarray (byte)[$i1];

        $i1 = 0;

     label3:
        i0 = lengthof r1;

        if $i1 >= i0 goto label4;

        i0 = $i1 * 2;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i0);

        i0 = staticinvoke <okio.ByteString: int decodeHexDigit(char)>($c2);

        i0 = i0 << 4;

        $i3 = $i1 * 2;

        $i3 = $i3 + 1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        $i3 = staticinvoke <okio.ByteString: int decodeHexDigit(char)>($c2);

        i0 = i0 + $i3;

        $b4 = (byte) i0;

        r1[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r4 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>(r1);

        return $r4;
    }
    private static int decodeHexDigit(char)
    {
        char $c0;
        int $i1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $c0 := @parameter0: char;

        if $c0 < 48 goto label1;

        if $c0 > 57 goto label1;

        $i1 = $c0 + -48;

        return $i1;

     label1:
        if $c0 < 97 goto label2;

        if $c0 > 102 goto label2;

        $i1 = $c0 + -97;

        $i1 = $i1 + 10;

        return $i1;

     label2:
        if $c0 < 65 goto label3;

        if $c0 > 70 goto label3;

        $i1 = $c0 + -65;

        $i1 = $i1 + 10;

        return $i1;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected hex digit: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }
    private okio.ByteString digest(java.lang.String)
    {
        okio.ByteString r0;
        java.lang.String $r1;
        java.security.NoSuchAlgorithmException r2;
        byte[] $r3;
        java.security.MessageDigest $r4;
        java.lang.AssertionError $r5;

        r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1);

     label2:
        $r3 = r0.<okio.ByteString: byte[] data>;

     label3:
        $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        r0 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r3);

     label4:
        return r0;

     label5:
        r2 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r5;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }
    public static okio.ByteString encodeUtf8(java.lang.String)
    {
        java.lang.String $r0;
        okio.ByteString r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;
        java.nio.charset.Charset $r4;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("s == null");

        throw $r3;

     label1:
        r1 = new okio.ByteString;

        $r4 = <okio.Util: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        specialinvoke r1.<okio.ByteString: void <init>(byte[])>($r2);

        r1.<okio.ByteString: java.lang.String utf8> = $r0;

        return r1;
    }
    public static transient okio.ByteString of(byte[])
    {
        byte[] $r0;
        java.lang.Object $r1;
        java.lang.IllegalArgumentException $r2;
        okio.ByteString $r3;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data == null");

        throw $r2;

     label1:
        $r3 = new okio.ByteString;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (byte[]) $r1;

        specialinvoke $r3.<okio.ByteString: void <init>(byte[])>($r0);

        return $r3;
    }
    public static okio.ByteString of(byte[], int, int)
    {
        byte[] $r0, r1;
        int $i0, $i1, $i4;
        long $l2, $l3, $l5;
        java.lang.IllegalArgumentException $r2;
        okio.ByteString $r3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data == null");

        throw $r2;

     label1:
        $i4 = lengthof $r0;

        $l5 = (long) $i4;

        $l2 = (long) $i0;

        $l3 = (long) $i1;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3);

        r1 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        $r3 = new okio.ByteString;

        specialinvoke $r3.<okio.ByteString: void <init>(byte[])>(r1);

        return $r3;
    }
    public static okio.ByteString read(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, i1, $i2;
        byte[] r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.io.EOFException $r5;
        okio.ByteString $r6;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("in == null");

        throw $r2;

     label1:
        if $i0 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        r1 = newarray (byte)[$i0];

        i1 = 0;

     label3:
        if i1 >= $i0 goto label5;

        $i2 = $i0 - i1;

        $i2 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i1, $i2);

        if $i2 != -1 goto label4;

        $r5 = new java.io.EOFException;

        specialinvoke $r5.<java.io.EOFException: void <init>()>();

        throw $r5;

     label4:
        i1 = i1 + $i2;

        goto label3;

     label5:
        $r6 = new okio.ByteString;

        specialinvoke $r6.<okio.ByteString: void <init>(byte[])>(r1);

        return $r6;
    }
    private void readObject(java.io.ObjectInputStream) throws java.io.IOException
    {
        okio.ByteString r0, $r2;
        java.io.ObjectInputStream $r1;
        int $i0;
        java.lang.Class $r3;
        java.lang.reflect.Field $r4;
        byte[] $r5;
        java.lang.NoSuchFieldException r6;
        java.lang.AssertionError $r7;
        java.lang.IllegalAccessException r8;

        r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        $r2 = staticinvoke <okio.ByteString: okio.ByteString read(java.io.InputStream,int)>($r1, $i0);

        $r3 = class "Lokio/ByteString;";

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("data");

        virtualinvoke $r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        $r5 = $r2.<okio.ByteString: byte[] data>;

     label3:
        virtualinvoke $r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r5);

     label4:
        return;

     label5:
        r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label6:
        r8 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

        catch java.lang.NoSuchFieldException from label1 to label2 with label5;
        catch java.lang.NoSuchFieldException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
    }
    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        okio.ByteString r0;
        java.io.ObjectOutputStream $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r2;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = r0.<okio.ByteString: byte[] data>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void write(byte[])>($r2);

        return;
    }
    public java.lang.String base64()
    {
        okio.ByteString r0;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: okio.ByteString;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $r1 = staticinvoke <okio.Base64: java.lang.String encode(byte[])>($r2);

        return $r1;
    }
    public java.lang.String base64Url()
    {
        okio.ByteString r0;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: okio.ByteString;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $r1 = staticinvoke <okio.Base64: java.lang.String encodeUrl(byte[])>($r2);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        okio.ByteString r0, $r2;
        java.lang.Object r1;
        boolean $z0;
        int $i0, $i1;
        byte[] $r3, $r4;

        r0 := @this: okio.ByteString;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof okio.ByteString;

        if $z0 == 0 goto label3;

        $r2 = (okio.ByteString) r1;

        $i0 = virtualinvoke $r2.<okio.ByteString: int size()>();

        $r3 = r0.<okio.ByteString: byte[] data>;

        $i1 = lengthof $r3;

        if $i0 != $i1 goto label3;

        $r2 = (okio.ByteString) r1;

        $r3 = r0.<okio.ByteString: byte[] data>;

        $r4 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r4;

        $z0 = virtualinvoke $r2.<okio.ByteString: boolean rangeEquals(int,byte[],int,int)>(0, $r3, 0, $i0);

        if $z0 == 0 goto label3;

        $z0 = 1;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }
    public byte getByte(int)
    {
        okio.ByteString r0;
        int $i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: okio.ByteString;

        $i0 := @parameter0: int;

        $r1 = r0.<okio.ByteString: byte[] data>;

        $b1 = $r1[$i0];

        return $b1;
    }
    public int hashCode()
    {
        okio.ByteString r0;
        byte[] $r1;
        int $i0;

        r0 := @this: okio.ByteString;

        $i0 = r0.<okio.ByteString: int hashCode>;

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $r1 = r0.<okio.ByteString: byte[] data>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        r0.<okio.ByteString: int hashCode> = $i0;

        return $i0;
    }
    public java.lang.String hex()
    {
        okio.ByteString r0;
        byte[] r1;
        byte b0;
        int i1, i2, i3, i4, $i5;
        char[] r2, $r3;
        char $c6;
        java.lang.String $r4;

        r0 := @this: okio.ByteString;

        r1 = r0.<okio.ByteString: byte[] data>;

        i1 = lengthof r1;

        i1 = i1 * 2;

        r2 = newarray (char)[i1];

        r1 = r0.<okio.ByteString: byte[] data>;

        i1 = lengthof r1;

        i2 = 0;

        i3 = 0;

     label1:
        if i2 >= i1 goto label2;

        b0 = r1[i2];

        i4 = i3 + 1;

        $r3 = <okio.ByteString: char[] HEX_DIGITS>;

        $i5 = b0 >> 4;

        $i5 = $i5 & 15;

        $c6 = $r3[$i5];

        r2[i3] = $c6;

        i3 = i4 + 1;

        $r3 = <okio.ByteString: char[] HEX_DIGITS>;

        $i5 = b0 & 15;

        $c6 = $r3[$i5];

        r2[i4] = $c6;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r2);

        return $r4;
    }
    public okio.ByteString md5()
    {
        okio.ByteString r0;

        r0 := @this: okio.ByteString;

        r0 = specialinvoke r0.<okio.ByteString: okio.ByteString digest(java.lang.String)>("MD5");

        return r0;
    }
    public boolean rangeEquals(int, okio.ByteString, int, int)
    {
        okio.ByteString r0, $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        byte[] $r2;

        r0 := @this: okio.ByteString;

        $i0 := @parameter0: int;

        $r1 := @parameter1: okio.ByteString;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $z0 = virtualinvoke $r1.<okio.ByteString: boolean rangeEquals(int,byte[],int,int)>($i1, $r2, $i0, $i2);

        return $z0;
    }
    public boolean rangeEquals(int, byte[], int, int)
    {
        okio.ByteString r0;
        int $i0, $i1, $i2, $i3;
        byte[] $r1, $r2;
        boolean $z0;

        r0 := @this: okio.ByteString;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $i3 = lengthof $r2;

        $i3 = $i3 - $i2;

        if $i0 > $i3 goto label1;

        $i3 = lengthof $r1;

        $i3 = $i3 - $i2;

        if $i1 > $i3 goto label1;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $z0 = staticinvoke <okio.Util: boolean arrayRangeEquals(byte[],int,byte[],int,int)>($r2, $i0, $r1, $i1, $i2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public okio.ByteString sha256()
    {
        okio.ByteString r0;

        r0 := @this: okio.ByteString;

        r0 = specialinvoke r0.<okio.ByteString: okio.ByteString digest(java.lang.String)>("SHA-256");

        return r0;
    }
    public int size()
    {
        okio.ByteString r0;
        byte[] $r1;
        int $i0;

        r0 := @this: okio.ByteString;

        $r1 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public okio.ByteString substring(int)
    {
        okio.ByteString r0;
        int $i0, $i1;
        byte[] $r1;

        r0 := @this: okio.ByteString;

        $i0 := @parameter0: int;

        $r1 = r0.<okio.ByteString: byte[] data>;

        $i1 = lengthof $r1;

        r0 = virtualinvoke r0.<okio.ByteString: okio.ByteString substring(int,int)>($i0, $i1);

        return r0;
    }
    public okio.ByteString substring(int, int)
    {
        int $i0, $i1, i2, $i3;
        byte[] r0, $r5;
        okio.ByteString r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r1 := @this: okio.ByteString;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("beginIndex < 0");

        throw $r2;

     label1:
        r0 = r1.<okio.ByteString: byte[] data>;

        i2 = lengthof r0;

        if $i1 <= i2 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endIndex > length(");

        r0 = r1.<okio.ByteString: byte[] data>;

        $i0 = lengthof r0;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        i2 = $i1 - $i0;

        if i2 >= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("endIndex < beginIndex");

        throw $r2;

     label3:
        if $i0 != 0 goto label4;

        r0 = r1.<okio.ByteString: byte[] data>;

        $i3 = lengthof r0;

        if $i1 != $i3 goto label4;

        return r1;

     label4:
        r0 = newarray (byte)[i2];

        $r5 = r1.<okio.ByteString: byte[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i0, r0, 0, i2);

        r1 = new okio.ByteString;

        specialinvoke r1.<okio.ByteString: void <init>(byte[])>(r0);

        return r1;
    }
    public okio.ByteString toAsciiLowercase()
    {
        int i0, i1, $i3;
        java.lang.Object $r0;
        okio.ByteString r1;
        byte[] $r2;
        byte b2;

        r1 := @this: okio.ByteString;

        i1 = 0;

     label1:
        $r2 = r1.<okio.ByteString: byte[] data>;

        i0 = lengthof $r2;

        if i1 >= i0 goto label8;

        $r2 = r1.<okio.ByteString: byte[] data>;

        b2 = $r2[i1];

        if b2 < 65 goto label2;

        if b2 <= 90 goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = r1.<okio.ByteString: byte[] data>;

        $r0 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (byte[]) $r0;

        $i3 = b2 + 32;

        b2 = (byte) $i3;

        $r2[i1] = b2;

        i1 = i1 + 1;

     label4:
        i0 = lengthof $r2;

        if i1 >= i0 goto label7;

        b2 = $r2[i1];

        if b2 < 65 goto label5;

        if b2 <= 90 goto label6;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        i0 = b2 + 32;

        b2 = (byte) i0;

        $r2[i1] = b2;

        goto label5;

     label7:
        r1 = new okio.ByteString;

        specialinvoke r1.<okio.ByteString: void <init>(byte[])>($r2);

     label8:
        return r1;
    }
    public okio.ByteString toAsciiUppercase()
    {
        int i0, i1, $i3;
        java.lang.Object $r0;
        okio.ByteString r1;
        byte[] $r2;
        byte b2;

        r1 := @this: okio.ByteString;

        i1 = 0;

     label1:
        $r2 = r1.<okio.ByteString: byte[] data>;

        i0 = lengthof $r2;

        if i1 >= i0 goto label8;

        $r2 = r1.<okio.ByteString: byte[] data>;

        b2 = $r2[i1];

        if b2 < 97 goto label2;

        if b2 <= 122 goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = r1.<okio.ByteString: byte[] data>;

        $r0 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (byte[]) $r0;

        $i3 = b2 + -32;

        b2 = (byte) $i3;

        $r2[i1] = b2;

        i1 = i1 + 1;

     label4:
        i0 = lengthof $r2;

        if i1 >= i0 goto label7;

        b2 = $r2[i1];

        if b2 < 97 goto label5;

        if b2 <= 122 goto label6;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        i0 = b2 + -32;

        b2 = (byte) i0;

        $r2[i1] = b2;

        goto label5;

     label7:
        r1 = new okio.ByteString;

        specialinvoke r1.<okio.ByteString: void <init>(byte[])>($r2);

     label8:
        return r1;
    }
    public byte[] toByteArray()
    {
        okio.ByteString r0;
        java.lang.Object $r1;
        byte[] $r2;

        r0 := @this: okio.ByteString;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (byte[]) $r1;

        return $r2;
    }
    public java.lang.String toString()
    {
        okio.ByteString r0;
        byte[] $r1;
        int $i0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;

        r0 := @this: okio.ByteString;

        $r1 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return "ByteString[size=0]";

     label1:
        $r1 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r1;

        if $i0 > 16 goto label2;

        $r2 = newarray (java.lang.Object)[2];

        $r1 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<okio.ByteString: java.lang.String hex()>();

        $r2[1] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ByteString[size=%s data=%s]", $r2);

        return $r4;

     label2:
        $r2 = newarray (java.lang.Object)[2];

        $r1 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        r0 = virtualinvoke r0.<okio.ByteString: okio.ByteString md5()>();

        $r4 = virtualinvoke r0.<okio.ByteString: java.lang.String hex()>();

        $r2[1] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ByteString[size=%s md5=%s]", $r2);

        return $r4;
    }
    public java.lang.String utf8()
    {
        okio.ByteString r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;
        java.lang.String r3;

        r0 := @this: okio.ByteString;

        r3 = r0.<okio.ByteString: java.lang.String utf8>;

        if r3 == null goto label1;

        return r3;

     label1:
        r3 = new java.lang.String;

        $r1 = r0.<okio.ByteString: byte[] data>;

        $r2 = <okio.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke r3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r2);

        r0.<okio.ByteString: java.lang.String utf8> = r3;

        return r3;
    }
    public void write(java.io.OutputStream) throws java.io.IOException
    {
        okio.ByteString r0;
        java.io.OutputStream $r1;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;

        r0 := @this: okio.ByteString;

        $r1 := @parameter0: java.io.OutputStream;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out == null");

        throw $r2;

     label1:
        $r3 = r0.<okio.ByteString: byte[] data>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }
    void write(okio.Buffer)
    {
        okio.ByteString r0;
        okio.Buffer $r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: okio.ByteString;

        $r1 := @parameter0: okio.Buffer;

        $r2 = r0.<okio.ByteString: byte[] data>;

        $r3 = r0.<okio.ByteString: byte[] data>;

        $i0 = lengthof $r3;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r2, 0, $i0);

        return;
    }
