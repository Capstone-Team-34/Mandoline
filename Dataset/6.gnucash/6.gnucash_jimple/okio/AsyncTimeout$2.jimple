okio.AsyncTimeout$2 extends java.lang.Object implements okio.Source
final okio.AsyncTimeout this$0
final okio.Source val$source
    void <init>(okio.AsyncTimeout, okio.Source)
    {
        okio.AsyncTimeout$2 r0;
        okio.AsyncTimeout $r1;
        okio.Source $r2;

        r0 := @this: okio.AsyncTimeout$2;

        $r1 := @parameter0: okio.AsyncTimeout;

        $r2 := @parameter1: okio.Source;

        r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0> = $r1;

        r0.<okio.AsyncTimeout$2: okio.Source val$source> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.AsyncTimeout$2 r0;
        java.io.IOException r1;
        okio.AsyncTimeout $r2;
        okio.Source $r3;
        java.lang.Throwable $r4;

        r0 := @this: okio.AsyncTimeout$2;

     label1:
        $r3 = r0.<okio.AsyncTimeout$2: okio.Source val$source>;

     label2:
        interfaceinvoke $r3.<okio.Source: void close()>();

     label3:
        $r2 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        virtualinvoke $r2.<okio.AsyncTimeout: void exit(boolean)>(1);

        return;

     label4:
        r1 := @caughtexception;

     label5:
        $r2 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        r1 = virtualinvoke $r2.<okio.AsyncTimeout: java.io.IOException exit(java.io.IOException)>(r1);

        throw r1;

     label6:
        $r4 := @caughtexception;

        $r2 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        virtualinvoke $r2.<okio.AsyncTimeout: void exit(boolean)>(0);

        throw $r4;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        okio.AsyncTimeout$2 r0;
        okio.Buffer $r1;
        long $l0;
        java.io.IOException r2;
        okio.AsyncTimeout $r3;
        okio.Source $r4;
        java.lang.Throwable $r5;

        r0 := @this: okio.AsyncTimeout$2;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $r3 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        virtualinvoke $r3.<okio.AsyncTimeout: void enter()>();

     label1:
        $r4 = r0.<okio.AsyncTimeout$2: okio.Source val$source>;

     label2:
        $l0 = interfaceinvoke $r4.<okio.Source: long read(okio.Buffer,long)>($r1, $l0);

     label3:
        $r3 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        virtualinvoke $r3.<okio.AsyncTimeout: void exit(boolean)>(1);

        return $l0;

     label4:
        r2 := @caughtexception;

     label5:
        $r3 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        r2 = virtualinvoke $r3.<okio.AsyncTimeout: java.io.IOException exit(java.io.IOException)>(r2);

        throw r2;

     label6:
        $r5 := @caughtexception;

        $r3 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        virtualinvoke $r3.<okio.AsyncTimeout: void exit(boolean)>(0);

        throw $r5;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }
    public okio.Timeout timeout()
    {
        okio.AsyncTimeout$2 r0;
        okio.AsyncTimeout r1;

        r0 := @this: okio.AsyncTimeout$2;

        r1 = r0.<okio.AsyncTimeout$2: okio.AsyncTimeout this$0>;

        return r1;
    }
    public java.lang.String toString()
    {
        okio.AsyncTimeout$2 r0;
        java.lang.StringBuilder $r1;
        okio.Source $r2;
        java.lang.String $r3;

        r0 := @this: okio.AsyncTimeout$2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AsyncTimeout.source(");

        $r2 = r0.<okio.AsyncTimeout$2: okio.Source val$source>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
