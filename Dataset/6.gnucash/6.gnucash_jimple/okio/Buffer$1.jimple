okio.Buffer$1 extends java.io.OutputStream
final okio.Buffer this$0
    void <init>(okio.Buffer)
    {
        okio.Buffer$1 r0;
        okio.Buffer $r1;

        r0 := @this: okio.Buffer$1;

        $r1 := @parameter0: okio.Buffer;

        r0.<okio.Buffer$1: okio.Buffer this$0> = $r1;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        return;
    }
    public void close()
    {
        okio.Buffer$1 r0;

        r0 := @this: okio.Buffer$1;

        return;
    }
    public void flush()
    {
        okio.Buffer$1 r0;

        r0 := @this: okio.Buffer$1;

        return;
    }
    public java.lang.String toString()
    {
        okio.Buffer$1 r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: okio.Buffer$1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".outputStream()");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public void write(int)
    {
        okio.Buffer$1 r0;
        int $i0;
        okio.Buffer $r1;
        byte $b1;

        r0 := @this: okio.Buffer$1;

        $i0 := @parameter0: int;

        $r1 = r0.<okio.Buffer$1: okio.Buffer this$0>;

        $b1 = (byte) $i0;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($b1);

        return;
    }
    public void write(byte[], int, int)
    {
        okio.Buffer$1 r0;
        byte[] $r1;
        int $i0, $i1;
        okio.Buffer $r2;

        r0 := @this: okio.Buffer$1;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<okio.Buffer$1: okio.Buffer this$0>;

        virtualinvoke $r2.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
