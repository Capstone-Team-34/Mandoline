okio.Okio$1 extends java.lang.Object implements okio.Sink
final java.io.OutputStream val$out
final okio.Timeout val$timeout
    void <init>(okio.Timeout, java.io.OutputStream)
    {
        okio.Okio$1 r0;
        okio.Timeout $r1;
        java.io.OutputStream $r2;

        r0 := @this: okio.Okio$1;

        $r1 := @parameter0: okio.Timeout;

        $r2 := @parameter1: java.io.OutputStream;

        r0.<okio.Okio$1: okio.Timeout val$timeout> = $r1;

        r0.<okio.Okio$1: java.io.OutputStream val$out> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.Okio$1 r0;
        java.io.OutputStream $r1;

        r0 := @this: okio.Okio$1;

        $r1 = r0.<okio.Okio$1: java.io.OutputStream val$out>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }
    public void flush() throws java.io.IOException
    {
        okio.Okio$1 r0;
        java.io.OutputStream $r1;

        r0 := @this: okio.Okio$1;

        $r1 = r0.<okio.Okio$1: java.io.OutputStream val$out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }
    public okio.Timeout timeout()
    {
        okio.Okio$1 r0;
        okio.Timeout r1;

        r0 := @this: okio.Okio$1;

        r1 = r0.<okio.Okio$1: okio.Timeout val$timeout>;

        return r1;
    }
    public java.lang.String toString()
    {
        okio.Okio$1 r0;
        java.lang.StringBuilder $r1;
        java.io.OutputStream $r2;
        java.lang.String $r3;

        r0 := @this: okio.Okio$1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sink(");

        $r2 = r0.<okio.Okio$1: java.io.OutputStream val$out>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okio.Okio$1 r0;
        okio.Buffer $r1;
        okio.Segment r2, $r6;
        int i0, $i4;
        long $l1, $l2, $l5;
        byte $b3;
        okio.Timeout $r3;
        java.io.OutputStream $r4;
        byte[] $r5;

        r0 := @this: okio.Okio$1;

        $r1 := @parameter0: okio.Buffer;

        $l1 := @parameter1: long;

        $l2 = $r1.<okio.Buffer: long size>;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l2, 0L, $l1);

     label1:
        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label2;

        $r3 = r0.<okio.Okio$1: okio.Timeout val$timeout>;

        virtualinvoke $r3.<okio.Timeout: void throwIfReached()>();

        r2 = $r1.<okio.Buffer: okio.Segment head>;

        i0 = r2.<okio.Segment: int limit>;

        $i4 = r2.<okio.Segment: int pos>;

        i0 = i0 - $i4;

        $l2 = (long) i0;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l2);

        i0 = (int) $l2;

        $r4 = r0.<okio.Okio$1: java.io.OutputStream val$out>;

        $r5 = r2.<okio.Segment: byte[] data>;

        $i4 = r2.<okio.Segment: int pos>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i4, i0);

        $i4 = r2.<okio.Segment: int pos>;

        $i4 = $i4 + i0;

        r2.<okio.Segment: int pos> = $i4;

        $l2 = (long) i0;

        $l1 = $l1 - $l2;

        $l2 = $r1.<okio.Buffer: long size>;

        $l5 = (long) i0;

        $l2 = $l2 - $l5;

        $r1.<okio.Buffer: long size> = $l2;

        i0 = r2.<okio.Segment: int pos>;

        $i4 = r2.<okio.Segment: int limit>;

        if i0 != $i4 goto label1;

        $r6 = virtualinvoke r2.<okio.Segment: okio.Segment pop()>();

        $r1.<okio.Buffer: okio.Segment head> = $r6;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>(r2);

        goto label1;

     label2:
        return;
    }
