net.objecthunter.exp4j.ArrayStack extends java.lang.Object
private double[] data
private int idx
    void <init>()
    {
        net.objecthunter.exp4j.ArrayStack r0;

        r0 := @this: net.objecthunter.exp4j.ArrayStack;

        specialinvoke r0.<net.objecthunter.exp4j.ArrayStack: void <init>(int)>(5);

        return;
    }
    void <init>(int)
    {
        net.objecthunter.exp4j.ArrayStack r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        double[] $r2;

        r0 := @this: net.objecthunter.exp4j.ArrayStack;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Stack\'s capacity must be positive");

        throw $r1;

     label1:
        $r2 = newarray (double)[$i0];

        r0.<net.objecthunter.exp4j.ArrayStack: double[] data> = $r2;

        r0.<net.objecthunter.exp4j.ArrayStack: int idx> = -1;

        return;
    }
    boolean isEmpty()
    {
        net.objecthunter.exp4j.ArrayStack r0;
        int $i0;

        r0 := @this: net.objecthunter.exp4j.ArrayStack;

        $i0 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        if $i0 != -1 goto label1;

        return 1;

     label1:
        return 0;
    }
    double peek()
    {
        net.objecthunter.exp4j.ArrayStack r0;
        int $i0;
        java.util.EmptyStackException $r1;
        double[] $r2;
        double $d0;

        r0 := @this: net.objecthunter.exp4j.ArrayStack;

        $i0 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        if $i0 != -1 goto label1;

        $r1 = new java.util.EmptyStackException;

        specialinvoke $r1.<java.util.EmptyStackException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<net.objecthunter.exp4j.ArrayStack: double[] data>;

        $i0 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        $d0 = $r2[$i0];

        return $d0;
    }
    double pop()
    {
        net.objecthunter.exp4j.ArrayStack r0;
        int $i0, $i1;
        java.util.EmptyStackException $r1;
        double[] $r2;
        double $d0;

        r0 := @this: net.objecthunter.exp4j.ArrayStack;

        $i0 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        if $i0 != -1 goto label1;

        $r1 = new java.util.EmptyStackException;

        specialinvoke $r1.<java.util.EmptyStackException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<net.objecthunter.exp4j.ArrayStack: double[] data>;

        $i1 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        $i0 = $i1 + -1;

        r0.<net.objecthunter.exp4j.ArrayStack: int idx> = $i0;

        $d0 = $r2[$i1];

        return $d0;
    }
    void push(double)
    {
        net.objecthunter.exp4j.ArrayStack r0;
        double $d0, $d1;
        double[] r1, $r2, $r3;
        int $i0, $i1;

        r0 := @this: net.objecthunter.exp4j.ArrayStack;

        $d0 := @parameter0: double;

        $i0 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        $i0 = $i0 + 1;

        r1 = r0.<net.objecthunter.exp4j.ArrayStack: double[] data>;

        $i1 = lengthof r1;

        if $i0 != $i1 goto label1;

        r1 = r0.<net.objecthunter.exp4j.ArrayStack: double[] data>;

        $i0 = lengthof r1;

        $d1 = (double) $i0;

        $d1 = $d1 * 1.2;

        $i0 = (int) $d1;

        $i0 = $i0 + 1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<net.objecthunter.exp4j.ArrayStack: double[] data>;

        $r3 = r0.<net.objecthunter.exp4j.ArrayStack: double[] data>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        r0.<net.objecthunter.exp4j.ArrayStack: double[] data> = r1;

     label1:
        r1 = r0.<net.objecthunter.exp4j.ArrayStack: double[] data>;

        $i0 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        $i0 = $i0 + 1;

        r0.<net.objecthunter.exp4j.ArrayStack: int idx> = $i0;

        r1[$i0] = $d0;

        return;
    }
    int size()
    {
        net.objecthunter.exp4j.ArrayStack r0;
        int $i0;

        r0 := @this: net.objecthunter.exp4j.ArrayStack;

        $i0 = r0.<net.objecthunter.exp4j.ArrayStack: int idx>;

        $i0 = $i0 + 1;

        return $i0;
    }
