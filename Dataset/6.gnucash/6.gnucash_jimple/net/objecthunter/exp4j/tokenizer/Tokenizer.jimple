net.objecthunter.exp4j.tokenizer.Tokenizer extends java.lang.Object
private final char[] expression
private final int expressionLength
private net.objecthunter.exp4j.tokenizer.Token lastToken
private int pos
private final java.util.Map userFunctions
private final java.util.Map userOperators
private final java.util.Set variableNames
    public void <init>(java.lang.String, java.util.Map, java.util.Map, java.util.Set)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        java.lang.String $r1;
        java.util.Map r2, r3;
        java.util.Set r4;
        char[] $r5;
        int $i0;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = 0;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression> = $r5;

        $r5 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i0 = lengthof $r5;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int expressionLength> = $i0;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Map userFunctions> = r2;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Map userOperators> = r3;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Set variableNames> = r4;

        return;
    }
    private net.objecthunter.exp4j.function.Function getFunction(java.lang.String)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        java.lang.String $r1;
        net.objecthunter.exp4j.function.Function r2;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $r1 := @parameter0: java.lang.String;

        r2 = null;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Map userFunctions>;

        if $r3 == null goto label1;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Map userFunctions>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r2 = (net.objecthunter.exp4j.function.Function) $r4;

     label1:
        if r2 != null goto label2;

        r2 = staticinvoke <net.objecthunter.exp4j.function.Functions: net.objecthunter.exp4j.function.Function getBuiltinFunction(java.lang.String)>($r1);

     label2:
        return r2;
    }
    private net.objecthunter.exp4j.operator.Operator getOperator(java.lang.String)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        java.lang.String $r1;
        byte b0;
        net.objecthunter.exp4j.operator.Operator r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        int $i1;
        net.objecthunter.exp4j.tokenizer.Token $r5;
        char $c2;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $r1 := @parameter0: java.lang.String;

        b0 = 2;

        r2 = null;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Map userOperators>;

        if $r3 == null goto label1;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Map userOperators>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r2 = (net.objecthunter.exp4j.operator.Operator) $r4;

     label1:
        if r2 != null goto label4;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 1 goto label4;

        $r5 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        if $r5 == null goto label2;

        $r5 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i1 = virtualinvoke $r5.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i1 == 2 goto label2;

        $r5 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i1 = virtualinvoke $r5.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i1 == 4 goto label2;

        $r5 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i1 = virtualinvoke $r5.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i1 != 7 goto label3;

     label2:
        b0 = 1;

     label3:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        r2 = staticinvoke <net.objecthunter.exp4j.operator.Operators: net.objecthunter.exp4j.operator.Operator getBuiltinOperator(char,int)>($c2, b0);

     label4:
        return r2;
    }
    public static boolean isAlphabetic(int)
    {
        int $i0;
        boolean $z0;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(int)>($i0);

        return $z0;
    }
    private boolean isArgumentSeparator(char)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        char $c0;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $c0 := @parameter0: char;

        if $c0 != 44 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean isCloseParentheses(char)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        char $c0;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $c0 := @parameter0: char;

        if $c0 == 41 goto label1;

        if $c0 == 125 goto label1;

        if $c0 != 93 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private boolean isEndOfExpression(int)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        int $i0, $i1;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $i0 := @parameter0: int;

        $i1 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int expressionLength>;

        if $i1 > $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean isNumeric(char, boolean)
    {
        char $c0;
        boolean $z0, $z1;

        $c0 := @parameter0: char;

        $z0 := @parameter1: boolean;

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        if $z1 != 0 goto label1;

        if $c0 == 46 goto label1;

        if $c0 == 101 goto label1;

        if $c0 == 69 goto label1;

        if $z0 == 0 goto label2;

        if $c0 == 45 goto label1;

        if $c0 != 43 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private boolean isOpenParentheses(char)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        char $c0;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $c0 := @parameter0: char;

        if $c0 == 40 goto label1;

        if $c0 == 123 goto label1;

        if $c0 != 91 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private net.objecthunter.exp4j.tokenizer.Token parseArgumentSeparatorToken(char)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        char $c0;
        int $i1;
        net.objecthunter.exp4j.tokenizer.ArgumentSeparatorToken $r1;
        net.objecthunter.exp4j.tokenizer.Token r2;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $c0 := @parameter0: char;

        $i1 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $i1 = $i1 + 1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = $i1;

        $r1 = new net.objecthunter.exp4j.tokenizer.ArgumentSeparatorToken;

        specialinvoke $r1.<net.objecthunter.exp4j.tokenizer.ArgumentSeparatorToken: void <init>()>();

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r1;

        r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return r2;
    }
    private net.objecthunter.exp4j.tokenizer.Token parseFunctionOrVariable()
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        java.lang.String r1, $r7;
        int i0, i1, i2, $i3;
        char[] $r2;
        net.objecthunter.exp4j.tokenizer.Token r3;
        boolean $z0;
        char $c4;
        java.util.Set $r4;
        net.objecthunter.exp4j.function.Function $r5;
        java.lang.StringBuilder $r6, $r10;
        net.objecthunter.exp4j.tokenizer.VariableToken $r8;
        net.objecthunter.exp4j.tokenizer.FunctionToken $r9;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        i1 = 1;

        r3 = null;

        i2 = 1;

        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isEndOfExpression(int)>(i0);

        if $z0 == 0 goto label1;

        $i3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $i3 = $i3 + 1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = $i3;

     label1:
        $i3 = i0 + i2;

        $i3 = $i3 + -1;

        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isEndOfExpression(int)>($i3);

        if $z0 != 0 goto label5;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i0 + i2;

        $i3 = $i3 + -1;

        $c4 = $r2[$i3];

        $z0 = staticinvoke <net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isAlphabetic(int)>($c4);

        if $z0 != 0 goto label2;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i0 + i2;

        $i3 = $i3 + -1;

        $c4 = $r2[$i3];

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z0 != 0 goto label2;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i0 + i2;

        $i3 = $i3 + -1;

        $c4 = $r2[$i3];

        if $c4 != 95 goto label5;

     label2:
        $r7 = new java.lang.String;

        r1 = $r7;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r2, i0, i2);

        $r4 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Set variableNames>;

        if $r4 == null goto label4;

        $r4 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: java.util.Set variableNames>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        i1 = i2;

        $r8 = new net.objecthunter.exp4j.tokenizer.VariableToken;

        r3 = $r8;

        specialinvoke $r8.<net.objecthunter.exp4j.tokenizer.VariableToken: void <init>(java.lang.String)>($r7);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r5 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.function.Function getFunction(java.lang.String)>(r1);

        if $r5 == null goto label3;

        i1 = i2;

        $r9 = new net.objecthunter.exp4j.tokenizer.FunctionToken;

        r3 = $r9;

        specialinvoke $r9.<net.objecthunter.exp4j.tokenizer.FunctionToken: void <init>(net.objecthunter.exp4j.function.Function)>($r5);

        goto label3;

     label5:
        if r3 != null goto label6;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse setVariable or function starting at pos ");

        i1 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in expression \'");

        $r7 = new java.lang.String;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r11;

     label6:
        i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        i1 = i0 + i1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = i1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = r3;

        r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return r3;
    }
    private net.objecthunter.exp4j.tokenizer.Token parseNumberToken(char)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        char $c0, $c4;
        int i1, i2, $i3;
        boolean $z0;
        net.objecthunter.exp4j.tokenizer.NumberToken $r1;
        java.lang.String $r2;
        double $d0;
        char[] $r3;
        net.objecthunter.exp4j.tokenizer.Token r4;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $c0 := @parameter0: char;

        i1 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        i2 = 1;

        $i3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $i3 = $i3 + 1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = $i3;

        $i3 = i1 + 1;

        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isEndOfExpression(int)>($i3);

        if $z0 == 0 goto label1;

        $r1 = new net.objecthunter.exp4j.tokenizer.NumberToken;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        specialinvoke $r1.<net.objecthunter.exp4j.tokenizer.NumberToken: void <init>(double)>($d0);

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r1;

        r4 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return r4;

     label1:
        $i3 = i1 + i2;

        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isEndOfExpression(int)>($i3);

        if $z0 != 0 goto label5;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i1 + i2;

        $c0 = $r3[$i3];

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i1 + i2;

        $i3 = $i3 + -1;

        $c4 = $r3[$i3];

        if $c4 == 101 goto label2;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i1 + i2;

        $i3 = $i3 + -1;

        $c4 = $r3[$i3];

        if $c4 != 69 goto label4;

     label2:
        $z0 = 1;

     label3:
        $z0 = staticinvoke <net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isNumeric(char,boolean)>($c0, $z0);

        if $z0 == 0 goto label5;

        i2 = i2 + 1;

        $i3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $i3 = $i3 + 1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = $i3;

        goto label1;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i1 + i2;

        $i3 = $i3 + -1;

        $c0 = $r3[$i3];

        if $c0 == 101 goto label6;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i3 = i1 + i2;

        $i3 = $i3 + -1;

        $c0 = $r3[$i3];

        if $c0 != 69 goto label7;

     label6:
        i2 = i2 + -1;

        $i3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $i3 = $i3 + -1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = $i3;

     label7:
        $r1 = new net.objecthunter.exp4j.tokenizer.NumberToken;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        specialinvoke $r1.<net.objecthunter.exp4j.tokenizer.NumberToken: void <init>(char[],int,int)>($r3, i1, i2);

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r1;

        r4 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return r4;
    }
    private net.objecthunter.exp4j.tokenizer.Token parseOperatorToken(char)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        char $c0;
        int i1, i2, i3;
        java.lang.StringBuilder r1;
        net.objecthunter.exp4j.operator.Operator r2, $r5;
        boolean $z0;
        char[] $r3;
        java.lang.String $r4;
        net.objecthunter.exp4j.tokenizer.OperatorToken $r6;
        net.objecthunter.exp4j.tokenizer.Token r7;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $c0 := @parameter0: char;

        i2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        i3 = 1;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        r2 = null;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

     label1:
        i1 = i2 + i3;

        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isEndOfExpression(int)>(i1);

        if $z0 != 0 goto label2;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        i1 = i2 + i3;

        $c0 = $r3[i1];

        $z0 = staticinvoke <net.objecthunter.exp4j.operator.Operator: boolean isAllowedOperatorChar(char)>($c0);

        if $z0 == 0 goto label2;

        $r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        i1 = i3 + 1;

        i3 = i2 + i3;

        $c0 = $r3[i3];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        i3 = i1;

        goto label1;

     label2:
        i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if i2 <= 0 goto label4;

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.operator.Operator getOperator(java.lang.String)>($r4);

        if $r5 != null goto label3;

        i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        i2 = i2 + -1;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>(i2);

        goto label2;

     label3:
        r2 = $r5;

     label4:
        i2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        i2 = i2 + i3;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = i2;

        $r6 = new net.objecthunter.exp4j.tokenizer.OperatorToken;

        specialinvoke $r6.<net.objecthunter.exp4j.tokenizer.OperatorToken: void <init>(net.objecthunter.exp4j.operator.Operator)>(r2);

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r6;

        r7 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return r7;
    }
    private net.objecthunter.exp4j.tokenizer.Token parseParentheses(boolean)
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        boolean $z0;
        net.objecthunter.exp4j.tokenizer.OpenParenthesesToken $r1;
        int $i0;
        net.objecthunter.exp4j.tokenizer.CloseParenthesesToken $r2;
        net.objecthunter.exp4j.tokenizer.Token r3;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = new net.objecthunter.exp4j.tokenizer.OpenParenthesesToken;

        specialinvoke $r1.<net.objecthunter.exp4j.tokenizer.OpenParenthesesToken: void <init>()>();

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r1;

     label1:
        $i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $i0 = $i0 + 1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = $i0;

        r3 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return r3;

     label2:
        $r2 = new net.objecthunter.exp4j.tokenizer.CloseParenthesesToken;

        specialinvoke $r2.<net.objecthunter.exp4j.tokenizer.CloseParenthesesToken: void <init>()>();

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r2;

        goto label1;
    }
    public boolean hasNext()
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        int $i0, $i1;
        char[] $r1;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $r1 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i1 = lengthof $r1;

        $i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        if $i1 <= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public net.objecthunter.exp4j.tokenizer.Token nextToken()
    {
        net.objecthunter.exp4j.tokenizer.Tokenizer r0;
        char[] $r1;
        int $i0;
        char c1;
        boolean $z0;
        net.objecthunter.exp4j.tokenizer.Token $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        net.objecthunter.exp4j.tokenizer.OperatorToken $r6;
        net.objecthunter.exp4j.operator.Operator $r7;

        r0 := @this: net.objecthunter.exp4j.tokenizer.Tokenizer;

        $r1 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        c1 = $r1[$i0];

     label01:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c1);

        if $z0 == 0 goto label02;

        $r1 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: char[] expression>;

        $i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $i0 = $i0 + 1;

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos> = $i0;

        c1 = $r1[$i0];

        goto label01;

     label02:
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c1);

        if $z0 != 0 goto label03;

        if c1 != 46 goto label06;

     label03:
        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        if $r2 == null goto label05;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 != 1 goto label04;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse char \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (Code:");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") at [");

        $i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label04:
        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 2 goto label05;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 4 goto label05;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 3 goto label05;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 7 goto label05;

        $r6 = new net.objecthunter.exp4j.tokenizer.OperatorToken;

        $r7 = staticinvoke <net.objecthunter.exp4j.operator.Operators: net.objecthunter.exp4j.operator.Operator getBuiltinOperator(char,int)>(42, 2);

        specialinvoke $r6.<net.objecthunter.exp4j.tokenizer.OperatorToken: void <init>(net.objecthunter.exp4j.operator.Operator)>($r7);

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r6;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return $r2;

     label05:
        $r2 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token parseNumberToken(char)>(c1);

        return $r2;

     label06:
        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isArgumentSeparator(char)>(c1);

        if $z0 == 0 goto label07;

        $r2 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token parseArgumentSeparatorToken(char)>(c1);

        return $r2;

     label07:
        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isOpenParentheses(char)>(c1);

        if $z0 == 0 goto label09;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        if $r2 == null goto label08;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 2 goto label08;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 4 goto label08;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 3 goto label08;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 7 goto label08;

        $r6 = new net.objecthunter.exp4j.tokenizer.OperatorToken;

        $r7 = staticinvoke <net.objecthunter.exp4j.operator.Operators: net.objecthunter.exp4j.operator.Operator getBuiltinOperator(char,int)>(42, 2);

        specialinvoke $r6.<net.objecthunter.exp4j.tokenizer.OperatorToken: void <init>(net.objecthunter.exp4j.operator.Operator)>($r7);

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r6;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return $r2;

     label08:
        $r2 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token parseParentheses(boolean)>(1);

        return $r2;

     label09:
        $z0 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isCloseParentheses(char)>(c1);

        if $z0 == 0 goto label10;

        $r2 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token parseParentheses(boolean)>(0);

        return $r2;

     label10:
        $z0 = staticinvoke <net.objecthunter.exp4j.operator.Operator: boolean isAllowedOperatorChar(char)>(c1);

        if $z0 == 0 goto label11;

        $r2 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token parseOperatorToken(char)>(c1);

        return $r2;

     label11:
        $z0 = staticinvoke <net.objecthunter.exp4j.tokenizer.Tokenizer: boolean isAlphabetic(int)>(c1);

        if $z0 != 0 goto label12;

        if c1 != 95 goto label14;

     label12:
        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        if $r2 == null goto label13;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 2 goto label13;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 4 goto label13;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 3 goto label13;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        $i0 = virtualinvoke $r2.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 7 goto label13;

        $r6 = new net.objecthunter.exp4j.tokenizer.OperatorToken;

        $r7 = staticinvoke <net.objecthunter.exp4j.operator.Operators: net.objecthunter.exp4j.operator.Operator getBuiltinOperator(char,int)>(42, 2);

        specialinvoke $r6.<net.objecthunter.exp4j.tokenizer.OperatorToken: void <init>(net.objecthunter.exp4j.operator.Operator)>($r7);

        r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken> = $r6;

        $r2 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token lastToken>;

        return $r2;

     label13:
        $r2 = specialinvoke r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token parseFunctionOrVariable()>();

        return $r2;

     label14:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse char \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (Code:");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") at [");

        $i0 = r0.<net.objecthunter.exp4j.tokenizer.Tokenizer: int pos>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }
