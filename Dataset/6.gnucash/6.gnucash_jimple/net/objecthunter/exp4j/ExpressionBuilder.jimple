net.objecthunter.exp4j.ExpressionBuilder extends java.lang.Object
private final java.lang.String expression
private final java.util.Map userFunctions
private final java.util.Map userOperators
private final java.util.Set variableNames
    public void <init>(java.lang.String)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.util.HashMap $r4;
        java.util.HashSet $r5;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expression can not be empty");

        throw $r3;

     label2:
        r0.<net.objecthunter.exp4j.ExpressionBuilder: java.lang.String expression> = $r1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(4);

        r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userOperators> = $r4;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(4);

        r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userFunctions> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(int)>(4);

        r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Set variableNames> = $r5;

        return;
    }
    private void checkOperatorSymbol(net.objecthunter.exp4j.operator.Operator)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        net.objecthunter.exp4j.operator.Operator $r1;
        char c0;
        int i1, i2;
        java.lang.String $r2;
        char[] $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: net.objecthunter.exp4j.operator.Operator;

        $r2 = virtualinvoke $r1.<net.objecthunter.exp4j.operator.Operator: java.lang.String getSymbol()>();

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        i1 = lengthof $r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        c0 = $r3[i2];

        $z0 = staticinvoke <net.objecthunter.exp4j.operator.Operator: boolean isAllowedOperatorChar(char)>(c0);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The operator symbol \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is invalid");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }
    public net.objecthunter.exp4j.Expression build()
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        java.util.Map $r1, $r10;
        java.util.Set $r2;
        java.lang.String $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        net.objecthunter.exp4j.function.Function $r7;
        java.lang.StringBuilder $r8;
        net.objecthunter.exp4j.Expression $r9;
        net.objecthunter.exp4j.tokenizer.Token[] $r11;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r3 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.lang.String expression>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The expression can not be empty");

        throw $r4;

     label1:
        $r2 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Set variableNames>;

        $r5 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r6;

        $r7 = staticinvoke <net.objecthunter.exp4j.function.Functions: net.objecthunter.exp4j.function.Function getBuiltinFunction(java.lang.String)>($r3);

        if $r7 != null goto label3;

        $r1 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userFunctions>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A variable can not have the same name as a function [");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label4:
        $r9 = new net.objecthunter.exp4j.Expression;

        $r3 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.lang.String expression>;

        $r10 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userFunctions>;

        $r1 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userOperators>;

        $r2 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Set variableNames>;

        $r11 = staticinvoke <net.objecthunter.exp4j.shuntingyard.ShuntingYard: net.objecthunter.exp4j.tokenizer.Token[] convertToRPN(java.lang.String,java.util.Map,java.util.Map,java.util.Set)>($r3, $r10, $r1, $r2);

        $r1 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userFunctions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r9.<net.objecthunter.exp4j.Expression: void <init>(net.objecthunter.exp4j.tokenizer.Token[],java.util.Set)>($r11, $r2);

        return $r9;
    }
    public net.objecthunter.exp4j.ExpressionBuilder function(net.objecthunter.exp4j.function.Function)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        net.objecthunter.exp4j.function.Function $r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: net.objecthunter.exp4j.function.Function;

        $r2 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userFunctions>;

        $r3 = virtualinvoke $r1.<net.objecthunter.exp4j.function.Function: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        return r0;
    }
    public net.objecthunter.exp4j.ExpressionBuilder functions(java.util.List)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        java.util.List r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        net.objecthunter.exp4j.function.Function r4;
        java.util.Map $r5;
        java.lang.String $r6;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        r1 := @parameter0: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.objecthunter.exp4j.function.Function) $r3;

        $r5 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userFunctions>;

        $r6 = virtualinvoke r4.<net.objecthunter.exp4j.function.Function: java.lang.String getName()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r4);

        goto label1;

     label2:
        return r0;
    }
    public transient net.objecthunter.exp4j.ExpressionBuilder functions(net.objecthunter.exp4j.function.Function[])
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        net.objecthunter.exp4j.function.Function[] $r1;
        net.objecthunter.exp4j.function.Function r2;
        int i0, i1;
        java.util.Map $r3;
        java.lang.String $r4;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: net.objecthunter.exp4j.function.Function[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        $r3 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userFunctions>;

        $r4 = virtualinvoke r2.<net.objecthunter.exp4j.function.Function: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    public net.objecthunter.exp4j.ExpressionBuilder operator(java.util.List)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        java.util.List r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        net.objecthunter.exp4j.operator.Operator r4;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        r1 := @parameter0: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.objecthunter.exp4j.operator.Operator) $r3;

        virtualinvoke r0.<net.objecthunter.exp4j.ExpressionBuilder: net.objecthunter.exp4j.ExpressionBuilder operator(net.objecthunter.exp4j.operator.Operator)>(r4);

        goto label1;

     label2:
        return r0;
    }
    public net.objecthunter.exp4j.ExpressionBuilder operator(net.objecthunter.exp4j.operator.Operator)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        net.objecthunter.exp4j.operator.Operator $r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: net.objecthunter.exp4j.operator.Operator;

        specialinvoke r0.<net.objecthunter.exp4j.ExpressionBuilder: void checkOperatorSymbol(net.objecthunter.exp4j.operator.Operator)>($r1);

        $r2 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Map userOperators>;

        $r3 = virtualinvoke $r1.<net.objecthunter.exp4j.operator.Operator: java.lang.String getSymbol()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        return r0;
    }
    public transient net.objecthunter.exp4j.ExpressionBuilder operator(net.objecthunter.exp4j.operator.Operator[])
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        net.objecthunter.exp4j.operator.Operator[] $r1;
        int i0, i1;
        net.objecthunter.exp4j.operator.Operator r2;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: net.objecthunter.exp4j.operator.Operator[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        virtualinvoke r0.<net.objecthunter.exp4j.ExpressionBuilder: net.objecthunter.exp4j.ExpressionBuilder operator(net.objecthunter.exp4j.operator.Operator)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    public net.objecthunter.exp4j.ExpressionBuilder variable(java.lang.String)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        java.lang.String $r1;
        java.util.Set $r2;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Set variableNames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public net.objecthunter.exp4j.ExpressionBuilder variables(java.util.Set)
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        java.util.Set r1, $r2;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Set variableNames>;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }
    public transient net.objecthunter.exp4j.ExpressionBuilder variables(java.lang.String[])
    {
        net.objecthunter.exp4j.ExpressionBuilder r0;
        java.lang.String[] $r1;
        java.util.Set $r2;

        r0 := @this: net.objecthunter.exp4j.ExpressionBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 = r0.<net.objecthunter.exp4j.ExpressionBuilder: java.util.Set variableNames>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r1);

        return r0;
    }
