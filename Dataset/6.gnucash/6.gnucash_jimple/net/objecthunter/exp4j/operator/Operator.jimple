net.objecthunter.exp4j.operator.Operator extends java.lang.Object
public static final char[] ALLOWED_OPERATOR_CHARS
public static final int PRECEDENCE_ADDITION
public static final int PRECEDENCE_DIVISION
public static final int PRECEDENCE_MODULO
public static final int PRECEDENCE_MULTIPLICATION
public static final int PRECEDENCE_POWER
public static final int PRECEDENCE_SUBTRACTION
public static final int PRECEDENCE_UNARY_MINUS
public static final int PRECEDENCE_UNARY_PLUS
protected final boolean leftAssociative
protected final int numOperands
protected final int precedence
protected final java.lang.String symbol
    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[18];

        $r0[0] = 43;

        $r0[1] = 45;

        $r0[2] = 42;

        $r0[3] = 47;

        $r0[4] = 37;

        $r0[5] = 94;

        $r0[6] = 33;

        $r0[7] = 35;

        $r0[8] = 167;

        $r0[9] = 36;

        $r0[10] = 38;

        $r0[11] = 59;

        $r0[12] = 58;

        $r0[13] = 126;

        $r0[14] = 60;

        $r0[15] = 62;

        $r0[16] = 124;

        $r0[17] = 61;

        <net.objecthunter.exp4j.operator.Operator: char[] ALLOWED_OPERATOR_CHARS> = $r0;

        return;
    }
    public void <init>(java.lang.String, int, boolean, int)
    {
        net.objecthunter.exp4j.operator.Operator r0;
        java.lang.String $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: net.objecthunter.exp4j.operator.Operator;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.objecthunter.exp4j.operator.Operator: int numOperands> = $i0;

        r0.<net.objecthunter.exp4j.operator.Operator: boolean leftAssociative> = $z0;

        r0.<net.objecthunter.exp4j.operator.Operator: java.lang.String symbol> = $r1;

        r0.<net.objecthunter.exp4j.operator.Operator: int precedence> = $i1;

        return;
    }
    public static boolean isAllowedOperatorChar(char)
    {
        char $c0, c1;
        char[] r0;
        int i2, i3;

        $c0 := @parameter0: char;

        r0 = <net.objecthunter.exp4j.operator.Operator: char[] ALLOWED_OPERATOR_CHARS>;

        i2 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        c1 = r0[i3];

        if $c0 != c1 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }
public abstract transient double apply(double[]) { 
// no body
} 
    public int getNumOperands()
    {
        net.objecthunter.exp4j.operator.Operator r0;
        int i0;

        r0 := @this: net.objecthunter.exp4j.operator.Operator;

        i0 = r0.<net.objecthunter.exp4j.operator.Operator: int numOperands>;

        return i0;
    }
    public int getPrecedence()
    {
        net.objecthunter.exp4j.operator.Operator r0;
        int i0;

        r0 := @this: net.objecthunter.exp4j.operator.Operator;

        i0 = r0.<net.objecthunter.exp4j.operator.Operator: int precedence>;

        return i0;
    }
    public java.lang.String getSymbol()
    {
        net.objecthunter.exp4j.operator.Operator r0;
        java.lang.String r1;

        r0 := @this: net.objecthunter.exp4j.operator.Operator;

        r1 = r0.<net.objecthunter.exp4j.operator.Operator: java.lang.String symbol>;

        return r1;
    }
    public boolean isLeftAssociative()
    {
        net.objecthunter.exp4j.operator.Operator r0;
        boolean z0;

        r0 := @this: net.objecthunter.exp4j.operator.Operator;

        z0 = r0.<net.objecthunter.exp4j.operator.Operator: boolean leftAssociative>;

        return z0;
    }
