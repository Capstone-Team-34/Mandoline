com.crashlytics.android.answers.BackgroundManager extends java.lang.Object
private static final int BACKGROUND_DELAY
final java.util.concurrent.atomic.AtomicReference backgroundFutureRef
private final java.util.concurrent.ScheduledExecutorService executorService
private volatile boolean flushOnBackground
boolean inBackground
private final java.util.List listeners
    public void <init>(java.util.concurrent.ScheduledExecutorService)
    {
        com.crashlytics.android.answers.BackgroundManager r0;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.util.ArrayList $r2;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: com.crashlytics.android.answers.BackgroundManager;

        $r1 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.crashlytics.android.answers.BackgroundManager: java.util.List listeners> = $r2;

        r0.<com.crashlytics.android.answers.BackgroundManager: boolean flushOnBackground> = 1;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.crashlytics.android.answers.BackgroundManager: java.util.concurrent.atomic.AtomicReference backgroundFutureRef> = $r3;

        r0.<com.crashlytics.android.answers.BackgroundManager: boolean inBackground> = 1;

        r0.<com.crashlytics.android.answers.BackgroundManager: java.util.concurrent.ScheduledExecutorService executorService> = $r1;

        return;
    }
    static void access$000(com.crashlytics.android.answers.BackgroundManager)
    {
        com.crashlytics.android.answers.BackgroundManager $r0;

        $r0 := @parameter0: com.crashlytics.android.answers.BackgroundManager;

        specialinvoke $r0.<com.crashlytics.android.answers.BackgroundManager: void notifyBackground()>();

        return;
    }
    private void notifyBackground()
    {
        com.crashlytics.android.answers.BackgroundManager r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        com.crashlytics.android.answers.BackgroundManager$Listener $r4;

        r0 := @this: com.crashlytics.android.answers.BackgroundManager;

        $r1 = r0.<com.crashlytics.android.answers.BackgroundManager: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.crashlytics.android.answers.BackgroundManager$Listener) $r3;

        interfaceinvoke $r4.<com.crashlytics.android.answers.BackgroundManager$Listener: void onBackground()>();

        goto label1;

     label2:
        return;
    }
    public void onActivityPaused()
    {
        com.crashlytics.android.answers.BackgroundManager r0;
        java.util.concurrent.TimeUnit $r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.concurrent.ScheduledExecutorService $r3;
        com.crashlytics.android.answers.BackgroundManager$1 $r4;
        java.util.concurrent.ScheduledFuture $r5;
        java.util.concurrent.RejectedExecutionException $r6;
        b.a.a.a.t $r7;

        r0 := @this: com.crashlytics.android.answers.BackgroundManager;

        $z0 = r0.<com.crashlytics.android.answers.BackgroundManager: boolean flushOnBackground>;

        if $z0 == 0 goto label6;

        $z0 = r0.<com.crashlytics.android.answers.BackgroundManager: boolean inBackground>;

        if $z0 != 0 goto label6;

        r0.<com.crashlytics.android.answers.BackgroundManager: boolean inBackground> = 1;

        $r2 = r0.<com.crashlytics.android.answers.BackgroundManager: java.util.concurrent.atomic.AtomicReference backgroundFutureRef>;

        $r3 = r0.<com.crashlytics.android.answers.BackgroundManager: java.util.concurrent.ScheduledExecutorService executorService>;

        $r4 = new com.crashlytics.android.answers.BackgroundManager$1;

     label1:
        specialinvoke $r4.<com.crashlytics.android.answers.BackgroundManager$1: void <init>(com.crashlytics.android.answers.BackgroundManager)>(r0);

     label2:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label3:
        $r5 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, 5000L, $r1);

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r5);

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        $r7 = staticinvoke <b.a.a.a.f: b.a.a.a.t h()>();

        interfaceinvoke $r7.<b.a.a.a.t: void a(java.lang.String,java.lang.String,java.lang.Throwable)>("Answers", "Failed to schedule background detector", $r6);

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label5;
        catch java.util.concurrent.RejectedExecutionException from label3 to label4 with label5;
    }
    public void onActivityResumed()
    {
        com.crashlytics.android.answers.BackgroundManager r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.concurrent.ScheduledFuture $r3;

        r0 := @this: com.crashlytics.android.answers.BackgroundManager;

        r0.<com.crashlytics.android.answers.BackgroundManager: boolean inBackground> = 0;

        $r2 = r0.<com.crashlytics.android.answers.BackgroundManager: java.util.concurrent.atomic.AtomicReference backgroundFutureRef>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        $r3 = (java.util.concurrent.ScheduledFuture) $r1;

        if $r3 == null goto label1;

        interfaceinvoke $r3.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);

     label1:
        return;
    }
    public void registerListener(com.crashlytics.android.answers.BackgroundManager$Listener)
    {
        com.crashlytics.android.answers.BackgroundManager r0;
        com.crashlytics.android.answers.BackgroundManager$Listener $r1;
        java.util.List $r2;

        r0 := @this: com.crashlytics.android.answers.BackgroundManager;

        $r1 := @parameter0: com.crashlytics.android.answers.BackgroundManager$Listener;

        $r2 = r0.<com.crashlytics.android.answers.BackgroundManager: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void setFlushOnBackground(boolean)
    {
        com.crashlytics.android.answers.BackgroundManager r0;
        boolean $z0;

        r0 := @this: com.crashlytics.android.answers.BackgroundManager;

        $z0 := @parameter0: boolean;

        r0.<com.crashlytics.android.answers.BackgroundManager: boolean flushOnBackground> = $z0;

        return;
    }
