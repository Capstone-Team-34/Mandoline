org.joda.time.DateTime extends org.joda.time.base.BaseDateTime implements java.io.Serializable org.joda.time.ReadableDateTime
private static final long serialVersionUID
    public void <init>()
    {
        org.joda.time.DateTime r0;

        r0 := @this: org.joda.time.DateTime;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>()>();

        return;
    }
    public void <init>(int, int, int, int, int)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, 0, 0);

        return;
    }
    public void <init>(int, int, int, int, int, int)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, 0);

        return;
    }
    public void <init>(int, int, int, int, int, int, int)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

        return;
    }
    public void <init>(int, int, int, int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 := @parameter7: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, int, int, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 := @parameter7: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 := @parameter6: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $i4, $i5, 0, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, int, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 := @parameter6: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>($i0, $i1, $i2, $i3, $i4, $i5, 0, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r1 := @parameter5: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $i4, 0, 0, $r1);

        return;
    }
    public void <init>(int, int, int, int, int, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r1 := @parameter5: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>($i0, $i1, $i2, $i3, $i4, 0, 0, $r1);

        return;
    }
    public void <init>(long)
    {
        org.joda.time.DateTime r0;
        long $l0;

        r0 := @this: org.joda.time.DateTime;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long)>($l0);

        return;
    }
    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.DateTime r0;
        long $l0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.DateTime;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(long, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTime r0;
        long $l0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.DateTime;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>($l0, $r1);

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.joda.time.DateTime r0;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>($r1, null);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.DateTime r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTime r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>($r1, $r2);

        return;
    }
    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>($r1);

        return;
    }
    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>($r1);

        return;
    }
    public static org.joda.time.DateTime now()
    {
        org.joda.time.DateTime $r0;

        $r0 = new org.joda.time.DateTime;

        specialinvoke $r0.<org.joda.time.DateTime: void <init>()>();

        return $r0;
    }
    public static org.joda.time.DateTime now(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0;
        java.lang.NullPointerException $r1;
        org.joda.time.DateTime $r2;

        $r0 := @parameter0: org.joda.time.Chronology;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Chronology must not be null");

        throw $r1;

     label1:
        $r2 = new org.joda.time.DateTime;

        specialinvoke $r2.<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>($r0);

        return $r2;
    }
    public static org.joda.time.DateTime now(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0;
        java.lang.NullPointerException $r1;
        org.joda.time.DateTime $r2;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Zone must not be null");

        throw $r1;

     label1:
        $r2 = new org.joda.time.DateTime;

        specialinvoke $r2.<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>($r0);

        return $r2;
    }
    public static org.joda.time.DateTime parse(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.joda.time.DateTime $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        $r1 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>();

        $r2 = staticinvoke <org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>($r0, $r1);

        return $r2;
    }
    public static org.joda.time.DateTime parse(java.lang.String, org.joda.time.format.DateTimeFormatter)
    {
        java.lang.String $r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.joda.time.DateTime $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.joda.time.format.DateTimeFormatter;

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>($r0);

        return $r2;
    }
    public org.joda.time.DateTime$Property centuryOfEra()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property dayOfMonth()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property dayOfWeek()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property dayOfYear()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property era()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property hourOfDay()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property millisOfDay()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property millisOfSecond()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime minus(long)
    {
        org.joda.time.DateTime r0;
        long $l0;

        r0 := @this: org.joda.time.DateTime;

        $l0 := @parameter0: long;

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withDurationAdded(long,int)>($l0, -1);

        return r0;
    }
    public org.joda.time.DateTime minus(org.joda.time.ReadableDuration)
    {
        org.joda.time.DateTime r0;
        org.joda.time.ReadableDuration $r1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.ReadableDuration;

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withDurationAdded(org.joda.time.ReadableDuration,int)>($r1, -1);

        return r0;
    }
    public org.joda.time.DateTime minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.DateTime r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, -1);

        return r0;
    }
    public org.joda.time.DateTime minusDays(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime minusHours(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime minusMillis(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime minusMinutes(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime minusMonths(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime minusSeconds(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime minusWeeks(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime minusYears(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime$Property minuteOfDay()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property minuteOfHour()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property monthOfYear()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime plus(long)
    {
        org.joda.time.DateTime r0;
        long $l0;

        r0 := @this: org.joda.time.DateTime;

        $l0 := @parameter0: long;

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withDurationAdded(long,int)>($l0, 1);

        return r0;
    }
    public org.joda.time.DateTime plus(org.joda.time.ReadableDuration)
    {
        org.joda.time.DateTime r0;
        org.joda.time.ReadableDuration $r1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.ReadableDuration;

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withDurationAdded(org.joda.time.ReadableDuration,int)>($r1, 1);

        return r0;
    }
    public org.joda.time.DateTime plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.DateTime r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, 1);

        return r0;
    }
    public org.joda.time.DateTime plusDays(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime plusHours(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime plusMillis(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime plusMinutes(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime plusMonths(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime plusSeconds(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime plusWeeks(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime plusYears(int)
    {
        int $i0;
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeField $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        org.joda.time.DateTime$Property $r7;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        $z0 = virtualinvoke $r4.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $r7 = new org.joda.time.DateTime$Property;

        specialinvoke $r7.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r4);

        return $r7;
    }
    public org.joda.time.DateTime$Property secondOfDay()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property secondOfMinute()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateMidnight toDateMidnight()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateMidnight $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateMidnight;

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }
    public org.joda.time.DateTime toDateTime()
    {
        org.joda.time.DateTime r0;

        r0 := @this: org.joda.time.DateTime;

        return r0;
    }
    public org.joda.time.DateTime toDateTime(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0, $r2;
        org.joda.time.DateTime r1;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r0);

        $r2 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        if $r2 != $r0 goto label1;

        return r1;

     label1:
        r1 = specialinvoke r1.<org.joda.time.base.BaseDateTime: org.joda.time.DateTime toDateTime(org.joda.time.Chronology)>($r0);

        return r1;
    }
    public org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0, $r2;
        org.joda.time.DateTime r1;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r0);

        $r2 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.DateTimeZone getZone()>();

        if $r2 != $r0 goto label1;

        return r1;

     label1:
        r1 = specialinvoke r1.<org.joda.time.base.BaseDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>($r0);

        return r1;
    }
    public org.joda.time.DateTime toDateTimeISO()
    {
        org.joda.time.DateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        if $r1 != $r2 goto label1;

        return r0;

     label1:
        r0 = specialinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.DateTime toDateTimeISO()>();

        return r0;
    }
    public org.joda.time.LocalDate toLocalDate()
    {
        org.joda.time.DateTime r0;
        org.joda.time.LocalDate $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.LocalDate;

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }
    public org.joda.time.LocalDateTime toLocalDateTime()
    {
        org.joda.time.DateTime r0;
        org.joda.time.LocalDateTime $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.LocalDateTime;

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }
    public org.joda.time.LocalTime toLocalTime()
    {
        org.joda.time.DateTime r0;
        org.joda.time.LocalTime $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.LocalTime;

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }
    public org.joda.time.TimeOfDay toTimeOfDay()
    {
        org.joda.time.DateTime r0;
        org.joda.time.TimeOfDay $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.TimeOfDay;

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.TimeOfDay: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }
    public org.joda.time.YearMonthDay toYearMonthDay()
    {
        org.joda.time.DateTime r0;
        org.joda.time.YearMonthDay $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.YearMonthDay;

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.YearMonthDay: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }
    public org.joda.time.DateTime$Property weekOfWeekyear()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property weekyear()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime withCenturyOfEra(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withChronology(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0, $r2;
        org.joda.time.DateTime r1, $r3;
        long $l0;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r0);

        $r2 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        if $r0 != $r2 goto label1;

        return r1;

     label1:
        $r3 = new org.joda.time.DateTime;

        $l0 = virtualinvoke r1.<org.joda.time.DateTime: long getMillis()>();

        specialinvoke $r3.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r0);

        return $r3;
    }
    public org.joda.time.DateTime withDate(int, int, int)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Chronology $r1, $r2;
        long $l4, $l5;
        org.joda.time.DateTimeZone $r3;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $i3 = virtualinvoke r0.<org.joda.time.DateTime: int getMillisOfDay()>();

        $l4 = virtualinvoke $r2.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $l5 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l4 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l4, 0, $l5);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l4);

        return r0;
    }
    public org.joda.time.DateTime withDate(org.joda.time.LocalDate)
    {
        org.joda.time.DateTime r0;
        org.joda.time.LocalDate $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.LocalDate;

        $i0 = virtualinvoke $r1.<org.joda.time.LocalDate: int getYear()>();

        $i1 = virtualinvoke $r1.<org.joda.time.LocalDate: int getMonthOfYear()>();

        $i2 = virtualinvoke $r1.<org.joda.time.LocalDate: int getDayOfMonth()>();

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withDate(int,int,int)>($i0, $i1, $i2);

        return r0;
    }
    public org.joda.time.DateTime withDayOfMonth(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withDayOfWeek(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withDayOfYear(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withDurationAdded(long, int)
    {
        long $l0, $l3;
        int $i1;
        org.joda.time.DateTime r0;
        byte $b2;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.DateTime;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label2;

        if $i1 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $l3 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l0 = virtualinvoke $r1.<org.joda.time.Chronology: long add(long,long,int)>($l3, $l0, $i1);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l0);

     label2:
        return r0;
    }
    public org.joda.time.DateTime withDurationAdded(org.joda.time.ReadableDuration, int)
    {
        org.joda.time.ReadableDuration $r0;
        int $i0;
        org.joda.time.DateTime r1;
        long $l1;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.ReadableDuration;

        $i0 := @parameter1: int;

        if $r0 == null goto label2;

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $l1 = interfaceinvoke $r0.<org.joda.time.ReadableDuration: long getMillis()>();

        r1 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.DateTime withDurationAdded(long,int)>($l1, $i0);

     label2:
        return r1;
    }
    public org.joda.time.DateTime withEarlierOffsetAtOverlap()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTimeZone $r1;
        long $l0;

        r0 := @this: org.joda.time.DateTime;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTimeZone getZone()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long adjustOffset(long,boolean)>($l0, 0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l0);

        return r0;
    }
    public org.joda.time.DateTime withEra(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeField $r4;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationFieldType $r0;
        int $i0;
        org.joda.time.DateTime r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DurationField $r4;
        long $l1;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r2;

     label1:
        if $i0 != 0 goto label2;

        return r1;

     label2:
        $r3 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r0.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r3);

        $l1 = virtualinvoke r1.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r4.<org.joda.time.DurationField: long add(long,int)>($l1, $i0);

        r1 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r1;
    }
    public org.joda.time.DateTime withFields(org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial $r0;
        org.joda.time.DateTime r1;
        org.joda.time.Chronology $r2;
        long $l0;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.ReadablePartial;

        if $r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r1.<org.joda.time.DateTime: long getMillis()>();

        $l0 = virtualinvoke $r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>($r0, $l0);

        r1 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l0);

        return r1;
    }
    public org.joda.time.DateTime withHourOfDay(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withLaterOffsetAtOverlap()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTimeZone $r1;
        long $l0;

        r0 := @this: org.joda.time.DateTime;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTimeZone getZone()>();

        $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long adjustOffset(long,boolean)>($l0, 1);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l0);

        return r0;
    }
    public org.joda.time.DateTime withMillis(long)
    {
        long $l0, $l1;
        org.joda.time.DateTime r0, $r1;
        byte $b2;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r0;

     label1:
        $r1 = new org.joda.time.DateTime;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }
    public org.joda.time.DateTime withMillisOfDay(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withMillisOfSecond(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withMinuteOfHour(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withMonthOfYear(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.ReadablePeriod $r0;
        int $i0;
        org.joda.time.DateTime r1;
        org.joda.time.Chronology $r2;
        long $l1;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 := @parameter1: int;

        if $r0 == null goto label2;

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $l1 = virtualinvoke r1.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r0, $l1, $i0);

        r1 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

     label2:
        return r1;
    }
    public org.joda.time.DateTime withSecondOfMinute(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withTime(int, int, int, int)
    {
        org.joda.time.DateTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.Chronology $r1, $r2;
        long $l7, $l8;
        org.joda.time.DateTimeZone $r3;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $i4 = virtualinvoke r0.<org.joda.time.DateTime: int getYear()>();

        $i5 = virtualinvoke r0.<org.joda.time.DateTime: int getMonthOfYear()>();

        $i6 = virtualinvoke r0.<org.joda.time.DateTime: int getDayOfMonth()>();

        $l7 = virtualinvoke $r2.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i4, $i5, $i6, $i0, $i1, $i2, $i3);

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $l8 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l7 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l7, 0, $l8);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l7);

        return r0;
    }
    public org.joda.time.DateTime withTime(org.joda.time.LocalTime)
    {
        org.joda.time.DateTime r0;
        org.joda.time.LocalTime $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.LocalTime;

        $i0 = virtualinvoke $r1.<org.joda.time.LocalTime: int getHourOfDay()>();

        $i1 = virtualinvoke $r1.<org.joda.time.LocalTime: int getMinuteOfHour()>();

        $i2 = virtualinvoke $r1.<org.joda.time.LocalTime: int getSecondOfMinute()>();

        $i3 = virtualinvoke $r1.<org.joda.time.LocalTime: int getMillisOfSecond()>();

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withTime(int,int,int,int)>($i0, $i1, $i2, $i3);

        return r0;
    }
    public org.joda.time.DateTime withTimeAtStartOfDay()
    {
        org.joda.time.DateTime r0;
        org.joda.time.LocalDate $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.LocalDate toLocalDate()>();

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTimeZone getZone()>();

        r0 = virtualinvoke $r1.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>($r2);

        return r0;
    }
    public org.joda.time.DateTime withWeekOfWeekyear(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withWeekyear(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withYear(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withYearOfCentury(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withYearOfEra(int)
    {
        org.joda.time.DateTime r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1;

        r0 := @this: org.joda.time.DateTime;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i0);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>($l1);

        return r0;
    }
    public org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.DateTime;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        r0 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>($r2);

        return r0;
    }
    public org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0, $r2;
        org.joda.time.DateTime r1, $r3;
        long $l0;
        org.joda.time.Chronology $r4;

        r1 := @this: org.joda.time.DateTime;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r0);

        $r2 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.DateTimeZone getZone()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r2);

        if $r0 != $r2 goto label1;

        return r1;

     label1:
        $l0 = virtualinvoke r1.<org.joda.time.DateTime: long getMillis()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>($r0, $l0);

        $r3 = new org.joda.time.DateTime;

        $r4 = virtualinvoke r1.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r0);

        specialinvoke $r3.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r4);

        return $r3;
    }
    public org.joda.time.DateTime$Property year()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property yearOfCentury()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
    public org.joda.time.DateTime$Property yearOfEra()
    {
        org.joda.time.DateTime r0;
        org.joda.time.DateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.DateTime;

        $r1 = new org.joda.time.DateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }
