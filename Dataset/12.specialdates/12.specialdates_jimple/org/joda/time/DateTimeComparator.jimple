org.joda.time.DateTimeComparator extends java.lang.Object implements java.io.Serializable java.util.Comparator
private static final org.joda.time.DateTimeComparator ALL_INSTANCE
private static final org.joda.time.DateTimeComparator DATE_INSTANCE
private static final org.joda.time.DateTimeComparator TIME_INSTANCE
private static final long serialVersionUID
private final org.joda.time.DateTimeFieldType iLowerLimit
private final org.joda.time.DateTimeFieldType iUpperLimit
    static void <clinit>()
    {
        org.joda.time.DateTimeComparator $r0;
        org.joda.time.DateTimeFieldType $r1;

        $r0 = new org.joda.time.DateTimeComparator;

        specialinvoke $r0.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(null, null);

        <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE> = $r0;

        $r0 = new org.joda.time.DateTimeComparator;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        specialinvoke $r0.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>($r1, null);

        <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE> = $r0;

        $r0 = new org.joda.time.DateTimeComparator;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        specialinvoke $r0.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(null, $r1);

        <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE> = $r0;

        return;
    }
    protected void <init>(org.joda.time.DateTimeFieldType, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType $r1, $r2;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> = $r1;

        r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> = $r2;

        return;
    }
    public static org.joda.time.DateTimeComparator getDateOnlyInstance()
    {
        org.joda.time.DateTimeComparator r0;

        r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE>;

        return r0;
    }
    public static org.joda.time.DateTimeComparator getInstance()
    {
        org.joda.time.DateTimeComparator r0;

        r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE>;

        return r0;
    }
    public static org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeFieldType $r0;
        org.joda.time.DateTimeComparator $r1;

        $r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $r1 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>($r0, null);

        return $r1;
    }
    public static org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeFieldType $r0, $r1, $r2;
        org.joda.time.DateTimeComparator $r3;

        $r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $r1 := @parameter1: org.joda.time.DateTimeFieldType;

        if $r0 != null goto label1;

        if $r1 != null goto label1;

        $r3 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE>;

        return $r3;

     label1:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        if $r0 != $r2 goto label2;

        if $r1 != null goto label2;

        $r3 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE>;

        return $r3;

     label2:
        if $r0 != null goto label3;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        if $r1 != $r2 goto label3;

        $r3 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE>;

        return $r3;

     label3:
        $r3 = new org.joda.time.DateTimeComparator;

        specialinvoke $r3.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>($r0, $r1);

        return $r3;
    }
    public static org.joda.time.DateTimeComparator getTimeOnlyInstance()
    {
        org.joda.time.DateTimeComparator r0;

        r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE>;

        return r0;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType $r1, $r2;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r2 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        r0 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>($r2, $r1);

        return r0;
    }
    public int compare(java.lang.Object, java.lang.Object)
    {
        org.joda.time.DateTimeComparator r0;
        java.lang.Object $r1, $r2;
        org.joda.time.convert.ConverterManager $r3;
        org.joda.time.convert.InstantConverter $r4;
        org.joda.time.Chronology $r5, $r6;
        long $l0, $l1, $l2, $l3;
        org.joda.time.DateTimeFieldType $r7;
        org.joda.time.DateTimeField $r8;
        byte $b4;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>($r1);

        $r5 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>($r1, null);

        $l0 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>($r1, $r5);

        $l1 = $l0;

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>($r2);

        $r6 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>($r2, null);

        $l2 = interfaceinvoke $r4.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>($r2, $r6);

        $l3 = $l2;

        $r7 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r7 == null goto label1;

        $r7 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r8 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        $l1 = virtualinvoke $r8.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        $r7 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r8 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r6);

        $l3 = virtualinvoke $r8.<org.joda.time.DateTimeField: long roundFloor(long)>($l2);

     label1:
        $r7 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r7 == null goto label2;

        $r7 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r8 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        $l1 = virtualinvoke $r8.<org.joda.time.DateTimeField: long remainder(long)>($l1);

        $r7 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r8 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r6);

        $l3 = virtualinvoke $r8.<org.joda.time.DateTimeField: long remainder(long)>($l3);

     label2:
        $b4 = $l1 cmp $l3;

        if $b4 >= 0 goto label3;

        return -1;

     label3:
        $b4 = $l1 cmp $l3;

        if $b4 <= 0 goto label4;

        return 1;

     label4:
        return 0;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.DateTimeComparator r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.DateTimeFieldType $r3, $r4;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.joda.time.DateTimeComparator;

        if $z0 == 0 goto label3;

        $r2 = (org.joda.time.DateTimeComparator) $r1;

        $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>();

        if $r3 == $r4 goto label1;

        $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r3 == null goto label3;

        $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

     label1:
        $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>();

        if $r3 == $r4 goto label2;

        $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r3 == null goto label3;

        $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    public org.joda.time.DateTimeFieldType getLowerLimit()
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType r1;

        r0 := @this: org.joda.time.DateTimeComparator;

        r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        return r1;
    }
    public org.joda.time.DateTimeFieldType getUpperLimit()
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType r1;

        r0 := @this: org.joda.time.DateTimeComparator;

        r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        return r1;
    }
    public int hashCode()
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.DateTimeComparator;

        $i0 = 0;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r1 != null goto label3;

        $i1 = 0;

     label1:
        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r1 != null goto label4;

     label2:
        $i0 = $i0 * 123;

        $i1 = $i1 + $i0;

        return $i1;

     label3:
        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label1;

     label4:
        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label2;
    }
    public java.lang.String toString()
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType $r1, $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r2 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r1 != $r2 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DateTimeComparator[");

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r1 != null goto label2;

        $r4 = "";

     label1:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        goto label1;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DateTimeComparator[");

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r1 != null goto label6;

        $r4 = "";

     label4:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r1 != null goto label7;

        $r4 = "";

     label5:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label6:
        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        goto label4;

     label7:
        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        goto label5;
    }
