org.joda.time.chrono.ZonedChronology$ZonedDateTimeField extends org.joda.time.field.BaseDateTimeField
private static final long serialVersionUID
final org.joda.time.DurationField iDurationField
final org.joda.time.DateTimeField iField
final org.joda.time.DurationField iLeapDurationField
final org.joda.time.DurationField iRangeDurationField
final boolean iTimeField
final org.joda.time.DateTimeZone iZone
    void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeZone, org.joda.time.DurationField, org.joda.time.DurationField, org.joda.time.DurationField)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.DurationField $r3, $r4, $r5;
        org.joda.time.DateTimeFieldType $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        $r3 := @parameter2: org.joda.time.DurationField;

        $r4 := @parameter3: org.joda.time.DurationField;

        $r5 := @parameter4: org.joda.time.DurationField;

        $r6 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke r0.<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>($r6);

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> = $r1;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> = $r2;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField> = $r3;

        $z0 = staticinvoke <org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>($r3);

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField> = $z0;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField> = $r4;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iLeapDurationField> = $r5;

        return;
    }
    private int getOffsetToAdd(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l2;
        int $i1;
        org.joda.time.DateTimeZone $r1;
        byte $b3;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $l2 = (long) $i1;

        $l2 = $l2 + $l0;

        $l2 = $l2 ^ $l0;

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label1;

        $l2 = (long) $i1;

        $l0 = $l2 ^ $l0;

        $b3 = $l0 cmp 0L;

        if $b3 < 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow");

        throw $r2;

     label1:
        return $i1;
    }
    public long add(long, int)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l3;
        int $i1, $i2;
        boolean $z0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l3 = (long) $i2;

        $l0 = $l3 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>($l0, $i1);

        $l3 = (long) $i2;

        $l0 = $l0 - $l3;

        return $l0;

     label1:
        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l3 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l3 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>($l3, $i1);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l3, 0, $l0);

        return $l0;
    }
    public long add(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l1, $l3;
        boolean $z0;
        int $i2;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l3 = (long) $i2;

        $l0 = $l3 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,long)>($l0, $l1);

        $l1 = (long) $i2;

        $l0 = $l0 - $l1;

        return $l0;

     label1:
        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l3 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,long)>($l3, $l1);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l1, 0, $l0);

        return $l0;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l3;
        int $i1, $i2;
        boolean $z0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l3 = (long) $i2;

        $l0 = $l3 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long addWrapField(long,int)>($l0, $i1);

        $l3 = (long) $i2;

        $l0 = $l0 - $l3;

        return $l0;

     label1:
        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l3 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l3 = virtualinvoke $r1.<org.joda.time.DateTimeField: long addWrapField(long,int)>($l3, $i1);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l3, 0, $l0);

        return $l0;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.DateTimeField $r3, $r4;
        org.joda.time.DateTimeZone $r5, $r6;
        org.joda.time.DurationField $r7, $r8;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.chrono.ZonedChronology$ZonedDateTimeField) $r1;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r4 = $r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $r6 = $r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $z0 = virtualinvoke $r5.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>;

        $r8 = $r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>;

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        $r7 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        $r8 = $r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public int get(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    public java.lang.String getAsShortText(int, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        int $i0;
        java.util.Locale $r1;
        java.lang.String $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Locale;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i0, $r1);

        return $r2;
    }
    public java.lang.String getAsShortText(long, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        java.util.Locale $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.DateTimeZone $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>($l0, $r1);

        return $r4;
    }
    public java.lang.String getAsText(int, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        int $i0;
        java.util.Locale $r1;
        java.lang.String $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Locale;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i0, $r1);

        return $r2;
    }
    public java.lang.String getAsText(long, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        java.util.Locale $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.DateTimeZone $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>($l0, $r1);

        return $r4;
    }
    public int getDifference(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l1, $l4;
        org.joda.time.DateTimeField $r1;
        int $i2, $i3;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l1);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label2;

        $i3 = $i2;

     label1:
        $l4 = (long) $i3;

        $l0 = $l4 + $l0;

        $l4 = (long) $i2;

        $l1 = $l4 + $l1;

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getDifference(long,long)>($l0, $l1);

        return $i2;

     label2:
        $i3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l0);

        goto label1;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l1, $l4;
        org.joda.time.DateTimeField $r1;
        int $i2, $i3;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l1);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label2;

        $i3 = $i2;

     label1:
        $l4 = (long) $i3;

        $l0 = $l4 + $l0;

        $l4 = (long) $i2;

        $l1 = $l4 + $l1;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long getDifferenceAsLong(long,long)>($l0, $l1);

        return $l0;

     label2:
        $i3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l0);

        goto label1;
    }
    public final org.joda.time.DurationField getDurationField()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>;

        return r1;
    }
    public int getLeapAmount(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getLeapAmount(long)>($l0);

        return $i1;
    }
    public final org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iLeapDurationField>;

        return r1;
    }
    public int getMaximumShortTextLength(java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        java.util.Locale $r1;
        int $i0;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>($r1);

        return $i0;
    }
    public int getMaximumTextLength(java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        java.util.Locale $r1;
        int $i0;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>($r1);

        return $i0;
    }
    public int getMaximumValue()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        int $i0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        return $i0;
    }
    public int getMaximumValue(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue(long)>($l0);

        return $i1;
    }
    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>($r1);

        return $i0;
    }
    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int[] $r2;
        int $i0;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: int[];

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        return $i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        int $i0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        return $i0;
    }
    public int getMinimumValue(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue(long)>($l0);

        return $i1;
    }
    public int getMinimumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>($r1);

        return $i0;
    }
    public int getMinimumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int[] $r2;
        int $i0;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: int[];

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        return $i0;
    }
    public final org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        return r1;
    }
    public int hashCode()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        int $i0, $i1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public boolean isLeap(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLeap(long)>($l0);

        return $z0;
    }
    public boolean isLenient()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        boolean $z0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>();

        return $z0;
    }
    public long remainder(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>($l0);

        return $l0;
    }
    public long roundCeiling(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l2;
        boolean $z0;
        int $i1;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l2 = (long) $i1;

        $l0 = $l2 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0);

        $l2 = (long) $i1;

        $l0 = $l0 - $l2;

        return $l0;

     label1:
        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l2);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l2, 0, $l0);

        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l2;
        boolean $z0;
        int $i1;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l2 = (long) $i1;

        $l0 = $l2 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        $l2 = (long) $i1;

        $l0 = $l0 - $l2;

        return $l0;

     label1:
        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l2);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l2, 0, $l0);

        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l2;
        int $i1, $i3;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.IllegalInstantException $r3;
        java.lang.String $r4;
        org.joda.time.IllegalFieldValueException $r5;
        org.joda.time.DateTimeFieldType $r6;
        java.lang.Integer $r7;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l2, $i1);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l2, 0, $l0);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>($l0);

        if $i3 == $i1 goto label1;

        $r3 = new org.joda.time.IllegalInstantException;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r3.<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>($l2, $r4);

        $r5 = new org.joda.time.IllegalFieldValueException;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r6 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = virtualinvoke $r3.<org.joda.time.IllegalInstantException: java.lang.String getMessage()>();

        specialinvoke $r5.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>($r6, $r7, $r4);

        virtualinvoke $r5.<org.joda.time.IllegalFieldValueException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r5;

     label1:
        return $l0;
    }
    public long set(long, java.lang.String, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long $l0, $l1;
        java.lang.String $r1;
        java.util.Locale $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DateTimeZone $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.Locale;

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l1 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l1 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>($l1, $r1, $r2);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>($l1, 0, $l0);

        return $l0;
    }
