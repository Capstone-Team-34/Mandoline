org.joda.time.chrono.ZonedChronology$ZonedDurationField extends org.joda.time.field.BaseDurationField
private static final long serialVersionUID
final org.joda.time.DurationField iField
final boolean iTimeField
final org.joda.time.DateTimeZone iZone
    void <init>(org.joda.time.DurationField, org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.DurationFieldType $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $r1 := @parameter0: org.joda.time.DurationField;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke $r1.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        specialinvoke r0.<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>($r3);

        $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> = $r1;

        $z0 = staticinvoke <org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>($r1);

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField> = $z0;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone> = $r2;

        return;
    }
    private long addOffset(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>($l0);

        return $l0;
    }
    private int getOffsetFromLocalToSubtract(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l2;
        int $i1;
        org.joda.time.DateTimeZone $r1;
        byte $b3;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>($l0);

        $l2 = (long) $i1;

        $l2 = $l0 - $l2;

        $l2 = $l2 ^ $l0;

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label1;

        $l2 = (long) $i1;

        $l0 = $l2 ^ $l0;

        $b3 = $l0 cmp 0L;

        if $b3 >= 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Subtracting time zone offset caused overflow");

        throw $r2;

     label1:
        return $i1;
    }
    private int getOffsetToAdd(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l2;
        int $i1;
        org.joda.time.DateTimeZone $r1;
        byte $b3;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $l2 = (long) $i1;

        $l2 = $l2 + $l0;

        $l2 = $l2 ^ $l0;

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label1;

        $l2 = (long) $i1;

        $l0 = $l2 ^ $l0;

        $b3 = $l0 cmp 0L;

        if $b3 < 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow");

        throw $r2;

     label1:
        return $i1;
    }
    public long add(long, int)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l4;
        int $i1, $i2, $i3;
        org.joda.time.DurationField $r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>($l0);

        $i3 = $i2;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l4 = (long) $i2;

        $l0 = $l4 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>($l0, $i1);

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label2;

     label1:
        $l4 = (long) $i3;

        $l0 = $l0 - $l4;

        return $l0;

     label2:
        $i3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>($l0);

        goto label1;
    }
    public long add(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l1, $l4;
        int $i2, $i3;
        org.joda.time.DurationField $r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>($l0);

        $i3 = $i2;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l4 = (long) $i2;

        $l0 = $l4 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>($l0, $l1);

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label2;

     label1:
        $l1 = (long) $i3;

        $l0 = $l0 - $l1;

        return $l0;

     label2:
        $i3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>($l0);

        goto label1;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.DurationField $r3, $r4;
        org.joda.time.DateTimeZone $r5, $r6;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.chrono.ZonedChronology$ZonedDurationField) $r1;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $r4 = $r2.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $r6 = $r2.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $z0 = virtualinvoke $r5.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public int getDifference(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l1, $l4;
        org.joda.time.DurationField $r1;
        int $i2, $i3;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>($l1);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label2;

        $i3 = $i2;

     label1:
        $l4 = (long) $i3;

        $l0 = $l4 + $l0;

        $l4 = (long) $i2;

        $l1 = $l4 + $l1;

        $i2 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l1);

        return $i2;

     label2:
        $i3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>($l0);

        goto label1;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l1, $l4;
        org.joda.time.DurationField $r1;
        int $i2, $i3;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>($l1);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label2;

        $i3 = $i2;

     label1:
        $l4 = (long) $i3;

        $l0 = $l4 + $l0;

        $l4 = (long) $i2;

        $l1 = $l4 + $l1;

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getDifferenceAsLong(long,long)>($l0, $l1);

        return $l0;

     label2:
        $i3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>($l0);

        goto label1;
    }
    public long getMillis(int, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        int $i0;
        long $l1;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>($l1);

        $l1 = virtualinvoke $r1.<org.joda.time.DurationField: long getMillis(int,long)>($i0, $l1);

        return $l1;
    }
    public long getMillis(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l1;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>($l1);

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getMillis(long,long)>($l0, $l1);

        return $l0;
    }
    public long getUnitMillis()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>();

        return $l0;
    }
    public int getValue(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l1;
        org.joda.time.DurationField $r1;
        int $i2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>($l1);

        $i2 = virtualinvoke $r1.<org.joda.time.DurationField: int getValue(long,long)>($l0, $l1);

        return $i2;
    }
    public long getValueAsLong(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long $l0, $l1;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>($l1);

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getValueAsLong(long,long)>($l0, $l1);

        return $l0;
    }
    public int hashCode()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField $r1;
        int $i0, $i1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public boolean isPrecise()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        boolean $z0;
        org.joda.time.DurationField $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isPrecise()>();

        return $z0;

     label1:
        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $z0 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean isFixed()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
