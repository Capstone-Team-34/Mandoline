org.joda.time.chrono.BaseChronology extends org.joda.time.Chronology implements java.io.Serializable
private static final long serialVersionUID
    protected void <init>()
    {
        org.joda.time.chrono.BaseChronology r0;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        specialinvoke r0.<org.joda.time.Chronology: void <init>()>();

        return;
    }
    public long add(long, long, int)
    {
        org.joda.time.chrono.BaseChronology r0;
        long $l0, $l2;
        int $i1;
        byte $b3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $b3 = $l0 cmp 0L;

        if $b3 == 0 goto label2;

        if $i1 != 0 goto label1;

        return $l2;

     label1:
        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l0, $i1);

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l2, $l0);

     label2:
        return $l2;
    }
    public long add(org.joda.time.ReadablePeriod, long, int)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePeriod $r1;
        int $i0, $i3, $i4, $i5;
        long $l1, $l2, $l6;
        byte $b7;
        org.joda.time.DurationFieldType $r2;
        org.joda.time.DurationField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        $l2 := @parameter1: long;

        $i0 := @parameter2: int;

        if $i0 == 0 goto label3;

        if $r1 == null goto label3;

        $i3 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: int size()>();

        $i4 = 0;

     label1:
        if $i4 >= $i3 goto label3;

        $i5 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: int getValue(int)>($i4);

        $l6 = (long) $i5;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i4);

        $r3 = virtualinvoke $r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0);

        $l1 = (long) $i0;

        $l1 = $l6 * $l1;

        $l2 = virtualinvoke $r3.<org.joda.time.DurationField: long add(long,long)>($l2, $l1);

     label2:
        $i4 = $i4 + 1;

        goto label1;

     label3:
        return $l2;
    }
    public org.joda.time.DurationField centuries()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeField centuryOfEra()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField clockhourOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField clockhourOfHalfday()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField dayOfMonth()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField dayOfWeek()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField dayOfYear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField days()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeField era()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField eras()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public int[] get(org.joda.time.ReadablePartial, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePartial $r1;
        long $l0;
        int[] $r2;
        int $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $l0 := @parameter1: long;

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        $r2 = newarray (int)[$i1];

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i2);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0);

        $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l0);

        $r2[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r2;
    }
    public int[] get(org.joda.time.ReadablePeriod, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePeriod $r1;
        long $l0, $l3;
        int[] $r2;
        int $i1, $i4, $i5;
        byte $b2;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.DurationField $r4;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        $l0 := @parameter1: long;

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: int size()>();

        $r2 = newarray (int)[$i1];

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label3;

        $l3 = 0L;

        $i4 = 0;

     label1:
        if $i4 >= $i1 goto label3;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i4);

        $r4 = virtualinvoke $r3.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0);

        $z0 = virtualinvoke $r4.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z0 == 0 goto label2;

        $i5 = virtualinvoke $r4.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l3);

        $l3 = virtualinvoke $r4.<org.joda.time.DurationField: long add(long,int)>($l3, $i5);

        $r2[$i4] = $i5;

     label2:
        $i4 = $i4 + 1;

        goto label1;

     label3:
        return $r2;
    }
    public int[] get(org.joda.time.ReadablePeriod, long, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePeriod $r1;
        long $l0, $l1;
        int[] $r2;
        int $i2, $i4, $i5;
        byte $b3;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.DurationField $r4;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $i2 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: int size()>();

        $r2 = newarray (int)[$i2];

        $b3 = $l0 cmp $l1;

        if $b3 == 0 goto label3;

        $i4 = 0;

     label1:
        if $i4 >= $i2 goto label3;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i4);

        $r4 = virtualinvoke $r3.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0);

        $i5 = virtualinvoke $r4.<org.joda.time.DurationField: int getDifference(long,long)>($l1, $l0);

        if $i5 == 0 goto label2;

        $l0 = virtualinvoke $r4.<org.joda.time.DurationField: long add(long,int)>($l0, $i5);

     label2:
        $r2[$i4] = $i5;

        $i4 = $i4 + 1;

        goto label1;

     label3:
        return $r2;
    }
    public long getDateTimeMillis(int, int, int, int)
    {
        org.joda.time.chrono.BaseChronology r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DateTimeField $r1;
        long $l4;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>();

        $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i0);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>();

        $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i1);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i2);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>();

        $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i3);

        return $l4;
    }
    public long getDateTimeMillis(int, int, int, int, int, int, int)
    {
        org.joda.time.chrono.BaseChronology r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.DateTimeField $r1;
        long $l7;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>();

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i0);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>();

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l7, $i1);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l7, $i2);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>();

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l7, $i3);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l7, $i4);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l7, $i5);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l7, $i6);

        return $l7;
    }
    public long getDateTimeMillis(long, int, int, int, int)
    {
        org.joda.time.chrono.BaseChronology r0;
        long $l0;
        int $i1, $i2, $i3, $i4;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i2);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i3);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i4);

        return $l0;
    }
public abstract org.joda.time.DateTimeZone getZone() { 
// no body
} 
    public org.joda.time.DateTimeField halfdayOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField halfdays()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeField hourOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField hourOfHalfday()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField hours()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DurationField millis()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeField millisOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField millisOfSecond()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField minuteOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField minuteOfHour()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField minutes()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeField monthOfYear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField months()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeField secondOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField secondOfMinute()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField seconds()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public long set(org.joda.time.ReadablePartial, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePartial $r1;
        long $l0;
        int $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $l0 := @parameter1: long;

        $i1 = 0;

        $i2 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

     label1:
        if $i1 >= $i2 goto label2;

        $r2 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0);

        $i3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int getValue(int)>($i1);

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $l0;
    }
public abstract java.lang.String toString() { 
// no body
} 
    public void validate(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePartial $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.joda.time.DateTimeField $r3;
        org.joda.time.IllegalFieldValueException $r4;
        org.joda.time.DateTimeFieldType $r5;
        java.lang.Integer $r6, $r7;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: int[];

        $i0 = 0;

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label5;

        $i3 = $r2[$i2];

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i2);

        $i4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue()>();

        if $i3 >= $i4 goto label2;

        $r4 = new org.joda.time.IllegalFieldValueException;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7, null);

        throw $r4;

     label2:
        $i4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue()>();

        if $i3 <= $i4 goto label3;

        $r4 = new org.joda.time.IllegalFieldValueException;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, null, $r7);

        throw $r4;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

     label5:
        if $i0 >= $i1 goto label7;

        $i2 = $r2[$i0];

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i0);

        $i3 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        if $i2 >= $i3 goto label6;

        $r4 = new org.joda.time.IllegalFieldValueException;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7, null);

        throw $r4;

     label6:
        $i3 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        if $i2 <= $i3 goto label4;

        $r4 = new org.joda.time.IllegalFieldValueException;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, null, $r7);

        throw $r4;

     label7:
        return;
    }
    public org.joda.time.DateTimeField weekOfWeekyear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField weeks()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeField weekyear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField weekyearOfCentury()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField weekyears()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
public abstract org.joda.time.Chronology withUTC() { 
// no body
} 
public abstract org.joda.time.Chronology withZone(org.joda.time.DateTimeZone) { 
// no body
} 
    public org.joda.time.DateTimeField year()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField yearOfCentury()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DateTimeField yearOfEra()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }
    public org.joda.time.DurationField years()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }
