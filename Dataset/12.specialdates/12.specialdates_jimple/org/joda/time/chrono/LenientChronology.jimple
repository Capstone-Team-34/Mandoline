org.joda.time.chrono.LenientChronology extends org.joda.time.chrono.AssembledChronology
private static final long serialVersionUID
private transient org.joda.time.Chronology iWithUTC
    private void <init>(org.joda.time.Chronology)
    {
        org.joda.time.chrono.LenientChronology r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r1, null);

        return;
    }
    private final org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)
    {
        org.joda.time.chrono.LenientChronology r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>();

        $r1 = staticinvoke <org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>($r1, $r2);

        return $r1;
    }
    public static org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0;
        java.lang.IllegalArgumentException $r1;
        org.joda.time.chrono.LenientChronology $r2;

        $r0 := @parameter0: org.joda.time.Chronology;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must supply a chronology");

        throw $r1;

     label1:
        $r2 = new org.joda.time.chrono.LenientChronology;

        specialinvoke $r2.<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>($r0);

        return $r2;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.LenientChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r2;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>;

        $r2 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r2;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.LenientChronology r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.Chronology $r3, $r4;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.LenientChronology;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (org.joda.time.chrono.LenientChronology) $r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>();

        $r4 = virtualinvoke $r2.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }
    public int hashCode()
    {
        org.joda.time.chrono.LenientChronology r0;
        org.joda.time.Chronology $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 * 7;

        $i0 = 236548278 + $i0;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.joda.time.chrono.LenientChronology r0;
        java.lang.StringBuilder $r1;
        org.joda.time.Chronology $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LenientChronology[");

        $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.LenientChronology r0, $r4;
        org.joda.time.DateTimeZone $r1, $r3;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r2 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>;

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeZone getZone()>();

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r3 != $r1 goto label2;

        r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> = r0;

     label1:
        $r2 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>;

        return $r2;

     label2:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>();

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r4 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r2);

        r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> = $r4;

        goto label1;
    }
    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.LenientChronology r0;
        org.joda.time.DateTimeZone $r1, $r2;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.chrono.LenientChronology;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r1 != $r2 goto label2;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>();

        return $r3;

     label2:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 == $r2 goto label3;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>();

        $r3 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        r0 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r3);

     label3:
        return r0;
    }
