org.joda.time.chrono.BasicMonthOfYearDateTimeField extends org.joda.time.field.ImpreciseDateTimeField
private static final int MIN
private static final long serialVersionUID
private final org.joda.time.chrono.BasicChronology iChronology
private final int iLeapMonth
private final int iMax
    void <init>(org.joda.time.chrono.BasicChronology, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i0, $i2;
        org.joda.time.DateTimeFieldType $r2;
        long $l1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 := @parameter0: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter1: int;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $l1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerMonth()>();

        specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>($r2, $l1);

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> = $r1;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>();

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> = $i2;

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iLeapMonth> = $i0;

        return;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.chrono.BasicChronology $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField monthOfYear()>();

        return $r1;
    }
    public long add(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        int $i0, $i3, $i4, $i5, $i6;
        long $l1, $l2;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l2 := @parameter0: long;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        return $l2;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>($l2);

        $l1 = (long) $i3;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l2);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l2, $i3);

        $i5 = $i4 + -1;

        $i5 = $i5 + $i0;

        if $i5 < 0 goto label4;

        $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i0 = $i5 / $i0;

        $i0 = $i0 + $i3;

        $i6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i5 = $i5 % $i6;

        $i5 = $i5 + 1;

     label2:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>($l2, $i3, $i4);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i0, $i5);

        $i6 = $i4;

        if $i3 <= $i4 goto label6;

     label3:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>($i0, $i5, $i6);

        $l2 = $l2 + $l1;

        return $l2;

     label4:
        $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i0 = $i5 / $i0;

        $i0 = $i0 + $i3;

        $i0 = $i0 + -1;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        $i6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i5 = $i5 % $i6;

        if $i5 != 0 goto label5;

        $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

     label5:
        $i6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i5 = $i6 - $i5;

        $i5 = $i5 + 1;

        if $i5 != 1 goto label2;

        $i0 = $i0 + 1;

        goto label2;

     label6:
        $i6 = $i3;

        goto label3;
    }
    public long add(long, long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0, $l1, $l3, $l7, $l8, $l9;
        int $i2, $i4, $i6, $i10, $i11;
        byte $b5;
        org.joda.time.chrono.BasicChronology $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i4 = (int) $l1;

        $l3 = (long) $i4;

        $b5 = $l3 cmp $l1;

        if $b5 != 0 goto label1;

        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>($l0, $i4);

        return $l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>($l0);

        $l3 = (long) $i4;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i6 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i4);

        $i2 = $i6 + -1;

        $l7 = (long) $i2;

        $l7 = $l7 + $l1;

        $b5 = $l7 cmp 0L;

        if $b5 < 0 goto label4;

        $l8 = (long) $i4;

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l9 = (long) $i2;

        $l9 = $l7 / $l9;

        $l8 = $l8 + $l9;

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l9 = (long) $i2;

        $l7 = $l7 % $l9;

        $l7 = $l7 + 1L;

     label2:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $l9 = (long) $i2;

        $b5 = $l8 cmp $l9;

        if $b5 < 0 goto label3;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        $l9 = (long) $i2;

        $b5 = $l8 cmp $l9;

        if $b5 <= 0 goto label6;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Magnitude of add amount is too large: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label4:
        $l8 = (long) $i4;

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l9 = (long) $i2;

        $l9 = $l7 / $l9;

        $l8 = $l8 + $l9;

        $l8 = $l8 - 1L;

        $l7 = staticinvoke <java.lang.Math: long abs(long)>($l7);

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l9 = (long) $i2;

        $l7 = $l7 % $l9;

        $i2 = (int) $l7;

        if $i2 != 0 goto label5;

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

     label5:
        $i10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i2 = $i10 - $i2;

        $i2 = $i2 + 1;

        $l7 = (long) $i2;

        $b5 = $l7 cmp 1L;

        if $b5 != 0 goto label2;

        $l8 = $l8 + 1L;

        goto label2;

     label6:
        $i10 = (int) $l8;

        $i2 = (int) $l7;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>($l0, $i4, $i6);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i6 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i10, $i2);

        $i11 = $i6;

        if $i4 <= $i6 goto label8;

     label7:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>($i10, $i2, $i11);

        $l0 = $l0 + $l3;

        return $l0;

     label8:
        $i11 = $i4;

        goto label7;
    }
    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;
        org.joda.time.DateTimeFieldType $r3, $r4;
        boolean $z0;
        long $l4;
        org.joda.time.chrono.BasicChronology $r5;
        org.joda.time.DateTimeField $r6;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $i1 := @parameter3: int;

        $i2 = 0;

        if $i1 != 0 goto label1;

        return $r2;

     label1:
        $i3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        if $i3 <= 0 goto label2;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(0);

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        if $i0 != 0 goto label2;

        $i0 = $r2[0];

        $i0 = $i0 + -1;

        $i1 = $i1 % 12;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 12;

        $i0 = $i0 % 12;

        $i0 = $i0 + 1;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>($r1, 0, $r2, $i0);

        return $r2;

     label2:
        $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>($r1);

        if $z0 == 0 goto label5;

        $l4 = 0L;

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

     label3:
        if $i2 >= $i0 goto label4;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i2);

        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r6 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        $i3 = $r2[$i2];

        $l4 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i3);

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>($l4, $i1);

        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int[] get(org.joda.time.ReadablePartial,long)>($r1, $l4);

        return $r2;

     label5:
        $r2 = specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i0, $r2, $i1);

        return $r2;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>($l0);

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i3, $i1, 1, $i2);

        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
    public int get(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0;
        int $i1;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>($l0);

        return $i1;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0, $l1, $l8, $l9;
        byte $b2;
        int $i3, $i4, $i5, $i6, $i7, $i10;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getDifference(long,long)>($l1, $l0);

        $i3 = neg $i3;

        $l0 = (long) $i3;

        return $l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i3);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i5 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l1);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i6 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l1, $i5);

        $i7 = $i3 - $i5;

        $l8 = (long) $i7;

        $i7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l9 = (long) $i7;

        $l8 = $l8 * $l9;

        $l9 = (long) $i4;

        $l8 = $l8 + $l9;

        $l9 = (long) $i6;

        $l8 = $l8 - $l9;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i7 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>($l0, $i3, $i4);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i3, $i4);

        if $i7 != $i10 goto label2;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>($l1, $i5, $i6);

        if $i10 <= $i7 goto label2;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, $i7);

     label2:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l9 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>($i3, $i4);

        $l0 = $l0 - $l9;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l9 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>($i5, $i6);

        $l1 = $l1 - $l9;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label3;

        $l0 = $l8 - 1L;

        return $l0;

     label3:
        return $l8;
    }
    public int getLeapAmount(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>($l0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.DurationField $r1;
        org.joda.time.chrono.BasicChronology $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>();

        return $r1;
    }
    public int getMaximumValue()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        return i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        return 1;
    }
    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.DurationField $r1;
        org.joda.time.chrono.BasicChronology $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>();

        return $r1;
    }
    public boolean isLeap(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $z0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>($i1);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i1);

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iLeapMonth>;

        if $i1 != $i2 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isLenient()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        return 0;
    }
    public long remainder(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0, $l1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>($l0);

        $l0 = $l0 - $l1;

        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1, $i2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i1);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>($i1, $i2);

        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long $l0, $l6;
        int $i1, $i2, $i3, $i4, $i5;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, 1, $i2);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>($l0, $i2);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i2, $i1);

        $i5 = $i4;

        if $i3 <= $i4 goto label2;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l6 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>($i2, $i1, $i5);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>($l0);

        $l0 = (long) $i1;

        $l0 = $l6 + $l0;

        return $l0;

     label2:
        $i5 = $i3;

        goto label1;
    }
