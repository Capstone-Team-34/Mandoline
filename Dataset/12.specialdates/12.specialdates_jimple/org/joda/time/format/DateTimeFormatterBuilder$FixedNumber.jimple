org.joda.time.format.DateTimeFormatterBuilder$FixedNumber extends org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber
    protected void <init>(org.joda.time.DateTimeFieldType, int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$FixedNumber r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$FixedNumber;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>($r1, $i0, $z0, $i0);

        return;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$FixedNumber r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        char $c3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$FixedNumber;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r1, $r2, $i0);

        if $i1 >= 0 goto label1;

        return $i1;

     label1:
        $i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int iMaxParsedDigits>;

        $i2 = $i2 + $i0;

        if $i1 == $i2 goto label5;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: boolean iSigned>;

        if $z0 == 0 goto label3;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c3 == 45 goto label2;

        if $c3 != 43 goto label3;

     label2:
        $i2 = $i2 + 1;

     label3:
        if $i1 <= $i2 goto label4;

        $i0 = $i2 + 1;

        $i0 = $i0 ^ -1;

        return $i0;

     label4:
        if $i1 >= $i2 goto label5;

        $i0 = $i1 ^ -1;

        return $i0;

     label5:
        return $i1;
    }
