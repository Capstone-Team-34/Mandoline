org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear extends java.lang.Object implements org.joda.time.format.InternalParser org.joda.time.format.InternalPrinter
private final boolean iLenientParse
private final int iPivot
private final org.joda.time.DateTimeFieldType iType
    void <init>(org.joda.time.DateTimeFieldType, int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType> = $r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int iPivot> = $i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse> = $z0;

        return;
    }
    private int getTwoDigitYear(long, org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        long $l0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;
        int $i1, $i2;
        java.lang.RuntimeException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r1);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

     label2:
        $i2 = $i1;

        if $i1 >= 0 goto label3;

        $i2 = neg $i1;

     label3:
        $i1 = $i2 % 100;

        return $i1;

     label4:
        $r4 := @caughtexception;

        return -1;

        catch java.lang.RuntimeException from label1 to label2 with label4;
    }
    private int getTwoDigitYear(org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        org.joda.time.ReadablePartial $r1;
        org.joda.time.DateTimeFieldType $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.RuntimeException $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $z0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r2);

        if $z0 == 0 goto label5;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r2);

     label2:
        $i1 = $i0;

        if $i0 >= 0 goto label3;

        $i1 = neg $i0;

     label3:
        $i0 = $i1 % 100;

        return $i0;

     label4:
        $r3 := @caughtexception;

     label5:
        return -1;

        catch java.lang.RuntimeException from label1 to label2 with label4;
    }
    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse>;

        if $z0 == 0 goto label1;

        return 4;

     label1:
        return 2;
    }
    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        return 2;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2;
        int $i0, $i2, $i3, $i4;
        byte $b1;
        boolean $z0, $z1;
        char $c5;
        java.lang.String $r3;
        org.joda.time.DateTimeFieldType $r4;
        java.lang.StringIndexOutOfBoundsException $r5;
        java.lang.Integer $r6;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $b1 = 0;

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i3 = $i2 - $i0;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse>;

        if $z0 != 0 goto label01;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(2, $i3);

        if $i2 >= 2 goto label20;

        $i0 = $i0 ^ -1;

        return $i0;

     label01:
        $i2 = 0;

        $z1 = 0;

        $z0 = 0;

     label02:
        if $i2 >= $i3 goto label08;

        $i4 = $i0 + $i2;

        $c5 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i4);

        if $i2 != 0 goto label07;

        if $c5 == 45 goto label03;

        if $c5 != 43 goto label07;

     label03:
        if $c5 != 45 goto label05;

        $z1 = 1;

     label04:
        if $z1 == 0 goto label06;

        $i2 = $i2 + 1;

        $z0 = 1;

        goto label02;

     label05:
        $z1 = 0;

        goto label04;

     label06:
        $i0 = $i0 + 1;

        $z0 = 1;

        $i3 = $i3 + -1;

        goto label02;

     label07:
        if $c5 < 48 goto label08;

        if $c5 <= 57 goto label09;

     label08:
        if $i2 != 0 goto label10;

        $i0 = $i0 ^ -1;

        return $i0;

     label09:
        $i2 = $i2 + 1;

        goto label02;

     label10:
        if $z0 != 0 goto label11;

        if $i2 == 2 goto label20;

     label11:
        if $i2 < 9 goto label13;

        $i2 = $i0 + $i2;

        $r2 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i2);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label12:
        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r4, $i4);

        return $i2;

     label13:
        if $z1 == 0 goto label29;

        $i4 = $i0 + 1;

     label14:
        $i3 = $i4 + 1;

     label15:
        $c5 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i4);

     label16:
        $i2 = $i0 + $i2;

        $i4 = $c5 + -48;

        $i0 = $i3;

     label17:
        if $i0 >= $i2 goto label19;

        $i3 = $i4 << 3;

        $i4 = $i4 << 1;

        $i4 = $i3 + $i4;

        $i3 = $i0 + 1;

        $c5 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        $i0 = $c5 + $i4;

        $i4 = $i0 + -48;

        $i0 = $i3;

        goto label17;

     label18:
        $r5 := @caughtexception;

        $i0 = $i0 ^ -1;

        return $i0;

     label19:
        if $z1 == 0 goto label12;

        $i4 = neg $i4;

        goto label12;

     label20:
        $c5 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c5 < 48 goto label21;

        if $c5 <= 57 goto label22;

     label21:
        $i0 = $i0 ^ -1;

        return $i0;

     label22:
        $i2 = $c5 + -48;

        $i3 = $i0 + 1;

        $c5 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i3);

        if $c5 < 48 goto label23;

        if $c5 <= 57 goto label24;

     label23:
        $i0 = $i0 ^ -1;

        return $i0;

     label24:
        $i3 = $i2 << 3;

        $i2 = $i2 << 1;

        $i2 = $i2 + $i3;

        $i2 = $i2 + $c5;

        $i2 = $i2 + -48;

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int iPivot>;

        $r6 = virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>();

        if $r6 == null goto label25;

        $r6 = virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>();

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label25:
        $i3 = $i3 + -50;

        if $i3 < 0 goto label28;

        $i4 = $i3 % 100;

     label26:
        if $i2 >= $i4 goto label27;

        $b1 = 100;

     label27:
        $i3 = $b1 + $i3;

        $i3 = $i3 - $i4;

        $i2 = $i3 + $i2;

        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r4, $i2);

        $i0 = $i0 + 2;

        return $i0;

     label28:
        $i4 = $i3 + 1;

        $i4 = $i4 % 100;

        $i4 = $i4 + 99;

        goto label26;

     label29:
        $i4 = $i0;

        goto label14;

        catch java.lang.StringIndexOutOfBoundsException from label15 to label16 with label18;
    }
    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        java.lang.Appendable $r1;
        long $l0;
        org.joda.time.Chronology $r2;
        int $i1;
        org.joda.time.DateTimeZone $r3;
        java.util.Locale $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.joda.time.DateTimeZone;

        $r4 := @parameter5: java.util.Locale;

        $i1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>($l0, $r2);

        if $i1 >= 0 goto label1;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        return;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r1, $i1, 2);

        return;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadablePartial $r2;
        java.util.Locale $r3;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 := @parameter2: java.util.Locale;

        $i0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>($r2);

        if $i0 >= 0 goto label1;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        return;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r1, $i0, 2);

        return;
    }
