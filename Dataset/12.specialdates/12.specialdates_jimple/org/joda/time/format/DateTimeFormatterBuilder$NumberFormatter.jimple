org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter extends java.lang.Object implements org.joda.time.format.InternalParser org.joda.time.format.InternalPrinter
protected final org.joda.time.DateTimeFieldType iFieldType
protected final int iMaxParsedDigits
protected final boolean iSigned
    void <init>(org.joda.time.DateTimeFieldType, int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType> = $r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> = $i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: boolean iSigned> = $z0;

        return;
    }
    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>;

        return i0;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        char $c4;
        java.lang.String $r3;
        org.joda.time.DateTimeFieldType $r4;
        java.lang.StringIndexOutOfBoundsException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>;

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        $z0 = 0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $i1 = 0;

     label01:
        if $i1 >= $i2 goto label21;

        $i3 = $i0 + $i1;

        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i3);

        if $i1 != 0 goto label09;

        if $c4 == 45 goto label02;

        if $c4 != 43 goto label09;

     label02:
        $z1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: boolean iSigned>;

        if $z1 == 0 goto label09;

        if $c4 != 45 goto label05;

        $z0 = 1;

     label03:
        $i3 = $i1 + 1;

        if $i3 >= $i2 goto label21;

        $i3 = $i0 + $i1;

        $i3 = $i3 + 1;

        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i3);

        if $c4 < 48 goto label21;

        if $c4 <= 57 goto label06;

     label04:
        if $i1 != 0 goto label11;

        $i0 = $i0 ^ -1;

        return $i0;

     label05:
        $z0 = 0;

        goto label03;

     label06:
        if $z0 == 0 goto label08;

        $i1 = $i1 + 1;

     label07:
        $i2 = $i2 + 1;

        $i3 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i3 = $i3 - $i0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        goto label01;

     label08:
        $i0 = $i0 + 1;

        goto label07;

     label09:
        if $c4 < 48 goto label21;

        if $c4 <= 57 goto label10;

        goto label04;

     label10:
        $i1 = $i1 + 1;

        goto label01;

     label11:
        if $i1 < 9 goto label13;

        $i1 = $i0 + $i1;

        $r2 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i0 = $i1;

     label12:
        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>;

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r4, $i3);

        return $i0;

     label13:
        if $z0 == 0 goto label20;

        $i3 = $i0 + 1;

     label14:
        $i2 = $i3 + 1;

     label15:
        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i3);

     label16:
        $i0 = $i0 + $i1;

        $i3 = $c4 + -48;

     label17:
        if $i2 >= $i0 goto label19;

        $i1 = $i3 << 3;

        $i3 = $i3 << 1;

        $i3 = $i1 + $i3;

        $i1 = $i2 + 1;

        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i2);

        $i2 = $c4 + $i3;

        $i3 = $i2 + -48;

        $i2 = $i1;

        goto label17;

     label18:
        $r5 := @caughtexception;

        $i0 = $i0 ^ -1;

        return $i0;

     label19:
        if $z0 == 0 goto label12;

        $i3 = neg $i3;

        goto label12;

     label20:
        $i3 = $i0;

        goto label14;

     label21:
        goto label04;

        catch java.lang.StringIndexOutOfBoundsException from label15 to label16 with label18;
    }
