org.joda.time.format.DateTimeFormatterBuilder$Fraction extends java.lang.Object implements org.joda.time.format.InternalParser org.joda.time.format.InternalPrinter
private final org.joda.time.DateTimeFieldType iFieldType
protected int iMaxDigits
protected int iMinDigits
    protected void <init>(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> = $r1;

        if $i1 <= 18 goto label1;

        $i1 = 18;

     label1:
        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits> = $i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> = $i1;

        return;
    }
    private long[] getFractionData(long, org.joda.time.DateTimeField)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        long $l0, $l1, $l3, $l4;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DurationField $r2;
        int $i2;
        byte $b5;
        long[] $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.DateTimeField;

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $l1 = virtualinvoke $r2.<org.joda.time.DurationField: long getUnitMillis()>();

        $i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

     label01:
        lookupswitch($i2)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label09;
            case 7: goto label10;
            case 8: goto label11;
            case 9: goto label12;
            case 10: goto label13;
            case 11: goto label14;
            case 12: goto label15;
            case 13: goto label16;
            case 14: goto label17;
            case 15: goto label18;
            case 16: goto label19;
            case 17: goto label20;
            case 18: goto label21;
            default: goto label02;
        };

     label02:
        $l3 = 1L;

     label03:
        $l4 = $l1 * $l3;

        $l4 = $l4 / $l3;

        $b5 = $l4 cmp $l1;

        if $b5 != 0 goto label22;

        $r3 = newarray (long)[2];

        $l0 = $l3 * $l0;

        $l0 = $l0 / $l1;

        $r3[0] = $l0;

        $l0 = (long) $i2;

        $r3[1] = $l0;

        return $r3;

     label04:
        $l3 = 10L;

        goto label03;

     label05:
        $l3 = 100L;

        goto label03;

     label06:
        $l3 = 1000L;

        goto label03;

     label07:
        $l3 = 10000L;

        goto label03;

     label08:
        $l3 = 100000L;

        goto label03;

     label09:
        $l3 = 1000000L;

        goto label03;

     label10:
        $l3 = 10000000L;

        goto label03;

     label11:
        $l3 = 100000000L;

        goto label03;

     label12:
        $l3 = 1000000000L;

        goto label03;

     label13:
        $l3 = 10000000000L;

        goto label03;

     label14:
        $l3 = 100000000000L;

        goto label03;

     label15:
        $l3 = 1000000000000L;

        goto label03;

     label16:
        $l3 = 10000000000000L;

        goto label03;

     label17:
        $l3 = 100000000000000L;

        goto label03;

     label18:
        $l3 = 1000000000000000L;

        goto label03;

     label19:
        $l3 = 10000000000000000L;

        goto label03;

     label20:
        $l3 = 100000000000000000L;

        goto label03;

     label21:
        $l3 = 1000000000000000000L;

        goto label03;

     label22:
        $i2 = $i2 + -1;

        goto label01;
    }
    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        return i0;
    }
    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        return i0;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i5;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.Chronology $r4;
        org.joda.time.DateTimeField $r5;
        long $l3, $l4, $l7;
        org.joda.time.DurationField $r6, $r8;
        char $c6;
        byte $b8;
        org.joda.time.field.PreciseDateTimeField $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>;

        $r4 = virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4);

        $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $l3 = 0L;

        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $l4 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>();

        $l4 = $l4 * 10L;

        $i1 = 0;

     label1:
        if $i1 >= $i2 goto label2;

        $i5 = $i0 + $i1;

        $c6 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i5);

        if $c6 < 48 goto label2;

        if $c6 <= 57 goto label3;

     label2:
        $l3 = $l3 / 10L;

        if $i1 != 0 goto label4;

        $i0 = $i0 ^ -1;

        return $i0;

     label3:
        $i1 = $i1 + 1;

        $l4 = $l4 / 10L;

        $i5 = $c6 + -48;

        $l7 = (long) $i5;

        $l7 = $l7 * $l4;

        $l3 = $l3 + $l7;

        goto label1;

     label4:
        $b8 = $l3 cmp 2147483647L;

        if $b8 <= 0 goto label5;

        $i0 = $i0 ^ -1;

        return $i0;

     label5:
        $r7 = new org.joda.time.field.PreciseDateTimeField;

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r6 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE>;

        $r8 = virtualinvoke $r5.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        specialinvoke $r7.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r3, $r6, $r8);

        $i2 = (int) $l3;

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>($r7, $i2);

        $i0 = $i1 + $i0;

        return $i0;
    }
    protected void printTo(java.lang.Appendable, long, org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        java.lang.Appendable $r1;
        long $l0, $l3;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;
        int $i1, $i4, $i5, $i6;
        byte $b2;
        java.lang.RuntimeException $r5;
        long[] $r6;
        java.lang.String $r7;
        char $c7;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>;

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>;

     label01:
        $l0 = virtualinvoke $r4.<org.joda.time.DateTimeField: long remainder(long)>($l0);

     label02:
        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label05;

     label03:
        $i1 = $i1 + -1;

        if $i1 < 0 goto label15;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        goto label03;

     label04:
        $r5 := @caughtexception;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>($r1, $i1);

        return;

     label05:
        $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>($l0, $r4);

        $l0 = $r6[0];

        $l3 = $r6[1];

        $i4 = (int) $l3;

        $l3 = 2147483647L & $l0;

        $b2 = $l3 cmp $l0;

        if $b2 != 0 goto label08;

        $i5 = (int) $l0;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

     label06:
        $i6 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i5 = $i6;

     label07:
        if $i6 >= $i4 goto label09;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        $i1 = $i1 + -1;

        $i4 = $i4 + -1;

        goto label07;

     label08:
        $r7 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        goto label06;

     label09:
        if $i1 >= $i4 goto label14;

     label10:
        if $i1 >= $i4 goto label11;

        if $i5 <= 1 goto label11;

        $i6 = $i5 + -1;

        $c7 = virtualinvoke $r7.<java.lang.String: char charAt(int)>($i6);

        if $c7 == 48 goto label13;

     label11:
        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i5 >= $i1 goto label14;

        $i1 = 0;

     label12:
        if $i1 >= $i5 goto label15;

        $c7 = virtualinvoke $r7.<java.lang.String: char charAt(int)>($i1);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c7);

        $i1 = $i1 + 1;

        goto label12;

     label13:
        $i4 = $i4 + -1;

        $i5 = $i5 + -1;

        goto label10;

     label14:
        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r7);

     label15:
        return;

        catch java.lang.RuntimeException from label01 to label02 with label04;
    }
    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        java.lang.Appendable $r1;
        long $l0;
        org.joda.time.Chronology $r2;
        int $i1;
        org.joda.time.DateTimeZone $r3;
        java.util.Locale $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.joda.time.DateTimeZone;

        $r4 := @parameter5: java.util.Locale;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>($r1, $l0, $r2);

        return;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadablePartial $r2;
        java.util.Locale $r3;
        org.joda.time.Chronology $r4;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 := @parameter2: java.util.Locale;

        $r4 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke $r4.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>($r2, 0L);

        $r4 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>($r1, $l0, $r4);

        return;
    }
