org.joda.time.format.ISODateTimeFormat extends java.lang.Object
    protected void <init>()
    {
        org.joda.time.format.ISODateTimeFormat r0;

        r0 := @this: org.joda.time.format.ISODateTimeFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder $r0;
        boolean $z0;

        $r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

     label1:
        return;
    }
    public static org.joda.time.format.DateTimeFormatter basicDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2300()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2800()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2900()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicOrdinalDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3000()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3100()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3200()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicTTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2600()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2700()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2400()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2500()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicWeekDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3300()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicWeekDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3400()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3500()>();

        return $r0;
    }
    private static void checkNotStrictISO(java.util.Collection, boolean)
    {
        java.util.Collection $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.util.Collection;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid ISO8601 format for fields: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        return;
    }
    public static org.joda.time.format.DateTimeFormatter date()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>();

        return $r0;
    }
    private static boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder $r0;
        java.util.Collection $r1;
        boolean $z0, $z1, $z2;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        $r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $z2 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z2 == 0 goto label4;

        $r3 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>();

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r3);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $z2 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z2 == 0 goto label2;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>(2);

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(2);

        return 0;

     label1:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>(2);

        return 1;

     label2:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>($r1, $z1);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(2);

        return 0;

     label3:
        return 1;

     label4:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label6;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>(2);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label5;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(2);

        return 0;

     label5:
        return 1;

     label6:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z0 == 0 goto label7;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(2);

     label7:
        return 0;
    }
    private static boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder $r0;
        java.util.Collection $r1;
        boolean $z0, $z1;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        $r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>();

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r3);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>(3);

        return 0;

     label1:
        return 1;

     label2:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>(3);

     label3:
        return 0;
    }
    private static boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder $r0;
        java.util.Collection $r1;
        boolean $z0, $z1, $z2;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        $r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        $z2 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z2 == 0 goto label4;

        $r3 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>();

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r3);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>();

        $z2 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z2 == 0 goto label2;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(87);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>(2);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(1);

        return 0;

     label1:
        return 1;

     label2:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $z2 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z2 == 0 goto label3;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>($r1, $z1);

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(87);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(1);

        return 0;

     label3:
        return 1;

     label4:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label6;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(87);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>(2);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z1 == 0 goto label5;

        staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>($r0, $z0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(1);

        return 0;

     label5:
        return 1;

     label6:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z0 == 0 goto label7;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(87);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(1);

     label7:
        return 0;
    }
    public static org.joda.time.format.DateTimeFormatter dateElementParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$400()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateHour()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4400()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateHourMinute()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4500()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4600()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4800()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4700()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$900()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$200()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1600()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter dateTimeParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$800()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter forFields(java.util.Collection, boolean, boolean)
    {
        java.util.Collection $r0;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.util.HashSet $r2;
        org.joda.time.format.DateTimeFormatterBuilder $r3;
        org.joda.time.DateTimeFieldType $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        org.joda.time.format.DateTimeFormatter $r7;
        java.lang.UnsupportedOperationException $r8;

        $r0 := @parameter0: java.util.Collection;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        if $r0 == null goto label01;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The fields must not be null or empty");

        throw $r1;

     label02:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r0);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r3 = new org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>();

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z2 == 0 goto label05;

        $z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>($r3, $r2, $z0, $z1);

     label03:
        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        if $i1 >= $i0 goto label11;

        $z3 = 1;

     label04:
        staticinvoke <org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>($r3, $r2, $z0, $z1, $z2, $z3);

        $z0 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>();

        if $z0 != 0 goto label12;

        $r1 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid format for fields: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label05:
        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z2 == 0 goto label06;

        $z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>($r3, $r2, $z0, $z1);

        goto label03;

     label06:
        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z2 == 0 goto label07;

        $z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>($r3, $r2, $z0, $z1);

        goto label03;

     label07:
        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z2 == 0 goto label08;

        $z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>($r3, $r2, $z0, $z1);

        goto label03;

     label08:
        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z2 == 0 goto label09;

        $z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>($r3, $r2, $z0, $z1);

        goto label03;

     label09:
        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r4);

        if $z2 == 0 goto label10;

        $r7 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>();

        virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r7);

        $z2 = 1;

        goto label03;

     label10:
        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r4);

        if $z2 == 0 goto label15;

        $r7 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>();

        virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r7);

        $z2 = 1;

        goto label03;

     label11:
        $z3 = 0;

        goto label04;

     label12:
        interfaceinvoke $r0.<java.util.Collection: boolean retainAll(java.util.Collection)>($r2);

     label13:
        $r7 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>();

        return $r7;

     label14:
        $r8 := @caughtexception;

        goto label13;

     label15:
        $z2 = 0;

        goto label03;

        catch java.lang.UnsupportedOperationException from label12 to label13 with label14;
    }
    public static org.joda.time.format.DateTimeFormatter hour()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter hourMinute()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4000()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter hourMinuteSecond()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4100()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4200()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1000()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter localDateParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter localTimeParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$600()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter ordinalDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1700()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter ordinalDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1800()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1900()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter tTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter tTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1400()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter time()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>();

        return $r0;
    }
    private static void time(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean, boolean, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder $r0;
        java.util.Collection $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.joda.time.DateTimeFieldType $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $z2 := @parameter4: boolean;

        $z3 := @parameter5: boolean;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $z4 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $z5 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $z6 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $z7 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z4 != 0 goto label01;

        if $z5 != 0 goto label01;

        if $z6 != 0 goto label01;

        if $z7 != 0 goto label01;

        return;

     label01:
        if $z4 != 0 goto label02;

        if $z5 != 0 goto label02;

        if $z6 != 0 goto label02;

        if $z7 == 0 goto label04;

     label02:
        if $z1 == 0 goto label03;

        if $z2 == 0 goto label03;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid ISO8601 format for fields because Date was reduced precision: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label03:
        if $z3 == 0 goto label04;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(84);

     label04:
        if $z4 == 0 goto label05;

        if $z5 == 0 goto label05;

        if $z6 != 0 goto label06;

     label05:
        if $z4 == 0 goto label12;

        if $z6 != 0 goto label12;

        if $z7 != 0 goto label12;

     label06:
        if $z4 == 0 goto label17;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>(2);

     label07:
        if $z0 == 0 goto label08;

        if $z4 == 0 goto label08;

        if $z5 == 0 goto label08;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(58);

     label08:
        if $z5 == 0 goto label19;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>(2);

     label09:
        if $z0 == 0 goto label10;

        if $z5 == 0 goto label10;

        if $z6 == 0 goto label10;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(58);

     label10:
        if $z6 == 0 goto label21;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>(2);

     label11:
        if $z7 == 0 goto label22;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(46);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>(3);

        return;

     label12:
        if $z1 == 0 goto label13;

        if $z3 == 0 goto label13;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid ISO8601 format for fields because Time was truncated: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label13:
        if $z4 != 0 goto label16;

        if $z5 == 0 goto label14;

        if $z6 != 0 goto label06;

     label14:
        if $z5 == 0 goto label15;

        if $z7 == 0 goto label06;

     label15:
        if $z6 != 0 goto label06;

     label16:
        if $z1 == 0 goto label06;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid ISO8601 format for fields: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label17:
        if $z5 != 0 goto label18;

        if $z6 != 0 goto label18;

        if $z7 == 0 goto label07;

     label18:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        goto label07;

     label19:
        if $z6 != 0 goto label20;

        if $z7 == 0 goto label09;

     label20:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        goto label09;

     label21:
        if $z7 == 0 goto label11;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45);

        goto label11;

     label22:
        return;
    }
    public static org.joda.time.format.DateTimeFormatter timeElementParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$700()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter timeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1200()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter timeParser()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$500()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter weekDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter weekDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2100()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2200()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter weekyear()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter weekyearWeek()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3800()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter weekyearWeekDay()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter year()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter yearMonth()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>();

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter yearMonthDay()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>();

        return $r0;
    }
