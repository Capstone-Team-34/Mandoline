org.joda.time.format.DateTimeFormat extends java.lang.Object
static final int DATE
static final int DATETIME
static final int FULL
static final int LONG
static final int MEDIUM
static final int NONE
private static final int PATTERN_CACHE_SIZE
static final int SHORT
static final int TIME
private static final java.util.concurrent.ConcurrentHashMap cPatternCache
private static final java.util.concurrent.atomic.AtomicReferenceArray cStyleCache
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(25);

        <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache> = $r1;

        return;
    }
    protected void <init>()
    {
        org.joda.time.format.DateTimeFormat r0;

        r0 := @this: org.joda.time.format.DateTimeFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)
    {
        org.joda.time.format.DateTimeFormatterBuilder $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>($r0, $r1);

        return;
    }
    private static org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int, int)
    {
        int $i0, $i1;
        byte $b2;
        org.joda.time.format.DateTimeFormat$StyleFormatter $r0;
        org.joda.time.format.DateTimeFormatter $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $b2 = 2;

        if $i0 != 4 goto label2;

        $b2 = 1;

     label1:
        $r0 = new org.joda.time.format.DateTimeFormat$StyleFormatter;

        specialinvoke $r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: void <init>(int,int,int)>($i0, $i1, $b2);

        $r1 = new org.joda.time.format.DateTimeFormatter;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r0, $r0);

        return $r1;

     label2:
        if $i1 != 4 goto label1;

        $b2 = 0;

        goto label1;
    }
    private static org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        org.joda.time.format.DateTimeFormatter $r4, $r6;
        org.joda.time.format.DateTimeFormatterBuilder $r5;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid pattern specification");

        throw $r1;

     label2:
        $r2 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (org.joda.time.format.DateTimeFormatter) $r3;

        if $r4 != null goto label3;

        $r5 = new org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>();

        staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>($r5, $r0);

        $r4 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>();

        $r2 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: int size()>();

        if $i0 >= 500 goto label3;

        $r2 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r4);

        $r6 = (org.joda.time.format.DateTimeFormatter) $r3;

        if $r6 == null goto label3;

        return $r6;

     label3:
        return $r4;
    }
    private static org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i2;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        char $c1;
        org.joda.time.format.DateTimeFormatter $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 == 2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid style specification: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i0 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c1);

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        $i2 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c1);

        if $i0 != 4 goto label3;

        if $i2 != 4 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Style \'--\' is invalid");

        throw $r1;

     label3:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>($i0, $i2);

        return $r3;
    }
    private static org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int, int)
    {
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.atomic.AtomicReferenceArray $r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.Object $r2;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << 2;

        $i2 = $i2 + $i0;

        $i2 = $i2 + $i1;

        $r0 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $i3 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if $i2 < $i3 goto label1;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>($i0, $i1);

        return $r1;

     label1:
        $r0 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $r2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        $r1 = (org.joda.time.format.DateTimeFormatter) $r2;

        if $r1 != null goto label2;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>($i0, $i1);

        $r0 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,java.lang.Object,java.lang.Object)>($i2, null, $r1);

        if $z0 != 0 goto label2;

        $r0 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $r2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        $r1 = (org.joda.time.format.DateTimeFormatter) $r2;

     label2:
        return $r1;
    }
    public static org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.DateTimeFormatter $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>($r0);

        return $r1;
    }
    public static org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.DateTimeFormatter $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>($r0);

        return $r1;
    }
    public static org.joda.time.format.DateTimeFormatter fullDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 4);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter fullDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 0);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter fullTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 0);

        return $r0;
    }
    private static boolean isNumericToken(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        int $i0;
        char $c1;

        $r0 := @parameter0: java.lang.String;

        $z0 = 1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 67: goto label2;
            case 68: goto label2;
            case 70: goto label2;
            case 72: goto label2;
            case 75: goto label2;
            case 77: goto label3;
            case 83: goto label2;
            case 87: goto label2;
            case 89: goto label2;
            case 99: goto label2;
            case 100: goto label2;
            case 101: goto label2;
            case 104: goto label2;
            case 107: goto label2;
            case 109: goto label2;
            case 115: goto label2;
            case 119: goto label2;
            case 120: goto label2;
            case 121: goto label2;
            default: goto label1;
        };

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        if $i0 > 2 goto label1;

        return 1;
    }
    public static org.joda.time.format.DateTimeFormatter longDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(1, 4);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter longDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(1, 1);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter longTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 1);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter mediumDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(2, 4);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter mediumDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(2, 2);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter mediumTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 2);

        return $r0;
    }
    private static void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)
    {
        org.joda.time.format.DateTimeFormatterBuilder $r0;
        java.lang.String $r1, $r3, $r7;
        int[] $r2;
        int $i0, $i1, $i2, $i4, $i5;
        char $c3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        boolean $z0, $z1;
        org.joda.time.DateTime $r6;

        $r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter1: java.lang.String;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = newarray (int)[1];

        $i0 = 0;

     label01:
        if $i0 >= $i1 goto label43;

        $r2[0] = $i0;

        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>($r1, $r2);

        $i0 = $r2[0];

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 != 0 goto label02;

        return;

     label02:
        $c3 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c3)
        {
            case 39: goto label41;
            case 67: goto label06;
            case 68: goto label34;
            case 69: goto label32;
            case 71: goto label04;
            case 72: goto label25;
            case 75: goto label27;
            case 77: goto label19;
            case 83: goto label30;
            case 89: goto label07;
            case 90: goto label38;
            case 97: goto label23;
            case 100: goto label22;
            case 101: goto label31;
            case 104: goto label24;
            case 107: goto label26;
            case 109: goto label28;
            case 115: goto label29;
            case 119: goto label35;
            case 120: goto label07;
            case 121: goto label07;
            case 122: goto label36;
            default: goto label03;
        };

     label03:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal pattern component: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label04:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>();

     label05:
        $i0 = $i0 + 1;

        goto label01;

     label06:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>($i2, $i2);

        goto label05;

     label07:
        if $i2 != 2 goto label12;

        $z0 = 1;

        $i2 = $i0 + 1;

        if $i2 >= $i1 goto label09;

        $i2 = $r2[0];

        $i2 = $i2 + 1;

        $r2[0] = $i2;

        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>($r1, $r2);

        $z1 = staticinvoke <org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>($r3);

        if $z1 == 0 goto label08;

        $z0 = 0;

     label08:
        $i2 = $r2[0];

        $i2 = $i2 + -1;

        $r2[0] = $i2;

     label09:
        lookupswitch($c3)
        {
            case 120: goto label11;
            default: goto label10;
        };

     label10:
        $r6 = new org.joda.time.DateTime;

        specialinvoke $r6.<org.joda.time.DateTime: void <init>()>();

        $i2 = virtualinvoke $r6.<org.joda.time.DateTime: int getYear()>();

        $i2 = $i2 + -30;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>($i2, $z0);

        goto label05;

     label11:
        $r6 = new org.joda.time.DateTime;

        specialinvoke $r6.<org.joda.time.DateTime: void <init>()>();

        $i2 = virtualinvoke $r6.<org.joda.time.DateTime: int getWeekyear()>();

        $i2 = $i2 + -30;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>($i2, $z0);

        goto label05;

     label12:
        $i4 = 9;

        $i5 = $i0 + 1;

        if $i5 >= $i1 goto label14;

        $i5 = $r2[0];

        $i5 = $i5 + 1;

        $r2[0] = $i5;

        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>($r1, $r2);

        $z0 = staticinvoke <org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>($r3);

        if $z0 == 0 goto label13;

        $i4 = $i2;

     label13:
        $i5 = $r2[0];

        $i5 = $i5 + -1;

        $r2[0] = $i5;

     label14:
        lookupswitch($c3)
        {
            case 89: goto label16;
            case 120: goto label17;
            case 121: goto label18;
            default: goto label15;
        };

     label15:
        goto label05;

     label16:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>($i2, $i4);

        goto label05;

     label17:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>($i2, $i4);

        goto label05;

     label18:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>($i2, $i4);

        goto label05;

     label19:
        if $i2 < 3 goto label21;

        if $i2 < 4 goto label20;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>();

        goto label05;

     label20:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>();

        goto label05;

     label21:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>($i2);

        goto label05;

     label22:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>($i2);

        goto label05;

     label23:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>();

        goto label05;

     label24:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>($i2);

        goto label05;

     label25:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>($i2);

        goto label05;

     label26:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>($i2);

        goto label05;

     label27:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>($i2);

        goto label05;

     label28:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>($i2);

        goto label05;

     label29:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>($i2);

        goto label05;

     label30:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>($i2, $i2);

        goto label05;

     label31:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>($i2);

        goto label05;

     label32:
        if $i2 < 4 goto label33;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>();

        goto label05;

     label33:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>();

        goto label05;

     label34:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>($i2);

        goto label05;

     label35:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>($i2);

        goto label05;

     label36:
        if $i2 < 4 goto label37;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>();

        goto label05;

     label37:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>(null);

        goto label05;

     label38:
        if $i2 != 1 goto label39;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>(null, "Z", 0, 2, 2);

        goto label05;

     label39:
        if $i2 != 2 goto label40;

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>(null, "Z", 1, 2, 2);

        goto label05;

     label40:
        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>();

        goto label05;

     label41:
        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 != 1 goto label42;

        $c3 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>($c3);

        goto label05;

     label42:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(java.lang.String)>($r3);

        virtualinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>($r7);

        goto label05;

     label43:
        return;
    }
    private static java.lang.String parseToken(java.lang.String, int[])
    {
        java.lang.String $r0;
        int[] $r1;
        java.lang.StringBuilder $r2;
        int $i0, $i1, $i3;
        char $c2, $c4;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: int[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = $r1[0];

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 < 65 goto label01;

        if $c2 <= 90 goto label02;

     label01:
        if $c2 < 97 goto label04;

        if $c2 > 122 goto label04;

     label02:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label03:
        $i3 = $i0 + 1;

        if $i3 >= $i1 goto label12;

        $i3 = $i0 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != $c2 goto label12;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $i0 = $i0 + 1;

        goto label03;

     label04:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $z0 = 0;

     label05:
        if $i0 >= $i1 goto label12;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 != 39 goto label09;

        $i3 = $i0 + 1;

        if $i3 >= $i1 goto label07;

        $i3 = $i0 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 39 goto label07;

        $i0 = $i0 + 1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label06:
        $i0 = $i0 + 1;

        goto label05;

     label07:
        if $z0 != 0 goto label08;

        $z0 = 1;

        goto label06;

     label08:
        $z0 = 0;

        goto label06;

     label09:
        if $z0 != 0 goto label13;

        if $c2 < 65 goto label10;

        if $c2 <= 90 goto label11;

     label10:
        if $c2 < 97 goto label13;

        if $c2 > 122 goto label13;

     label11:
        $i0 = $i0 + -1;

     label12:
        $r1[0] = $i0;

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label13:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label06;
    }
    public static java.lang.String patternForStyle(java.lang.String, java.util.Locale)
    {
        java.lang.String $r0;
        java.util.Locale $r1;
        org.joda.time.format.DateTimeFormatter $r2;
        org.joda.time.format.InternalPrinter $r3;
        org.joda.time.format.DateTimeFormat$StyleFormatter $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>($r0);

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>();

        $r4 = (org.joda.time.format.DateTimeFormat$StyleFormatter) $r3;

        $r0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>($r1);

        return $r0;
    }
    private static int selectStyle(char)
    {
        char $c0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $c0 := @parameter0: char;

        lookupswitch($c0)
        {
            case 45: goto label6;
            case 70: goto label5;
            case 76: goto label4;
            case 77: goto label3;
            case 83: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid style character: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        return 3;

     label3:
        return 2;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        return 4;
    }
    public static org.joda.time.format.DateTimeFormatter shortDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(3, 4);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter shortDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(3, 3);

        return $r0;
    }
    public static org.joda.time.format.DateTimeFormatter shortTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 3);

        return $r0;
    }
