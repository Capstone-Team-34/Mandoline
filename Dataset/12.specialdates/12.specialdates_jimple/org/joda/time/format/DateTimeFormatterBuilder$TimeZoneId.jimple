org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId extends java.lang.Enum implements org.joda.time.format.InternalParser org.joda.time.format.InternalPrinter
private static final org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $VALUES
static final java.util.Set ALL_IDS
public static final enum org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE
static final int MAX_LENGTH
    static void <clinit>()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId $r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5;

        $r0 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        specialinvoke $r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>("INSTANCE", 0);

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE> = $r0;

        $r1 = newarray (org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId)[1];

        $r0 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE>;

        $r1[0] = $r0;

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $VALUES> = $r1;

        $r2 = staticinvoke <org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>();

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS> = $r2;

        $r2 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        goto label1;

     label2:
        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int MAX_LENGTH> = $i0;

        return;
    }
    private void <init>(java.lang.String, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }
    public static org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneId;", $r0);

        $r2 = (org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId) $r1;

        return $r2;
    }
    public static final org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values()
    {
        java.lang.Object $r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $r1;

        $r1 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[]) $r0;

        return $r1;
    }
    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        i0 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int MAX_LENGTH>;

        return i0;
    }
    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        i0 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int MAX_LENGTH>;

        return i0;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r7;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.joda.time.DateTimeZone $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $r3 = null;

        $r4 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        $z0 = staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>($r2, $i0, $r7);

        if $z0 == 0 goto label5;

        if $r3 == null goto label2;

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label5;

     label2:
        $r3 = $r7;

        goto label1;

     label3:
        if $r3 == null goto label4;

        $r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>($r3);

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>($r8);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i1 + $i0;

        return $i0;

     label4:
        $i0 = $i0 ^ -1;

        return $i0;

     label5:
        $r7 = $r3;

        goto label2;
    }
    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        java.lang.Appendable $r1;
        long $l0;
        org.joda.time.Chronology $r2;
        int $i1;
        org.joda.time.DateTimeZone $r3;
        java.util.Locale $r4;
        java.lang.String $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.joda.time.DateTimeZone;

        $r4 := @parameter5: java.util.Locale;

        if $r3 == null goto label2;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeZone: java.lang.String getID()>();

     label1:
        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

        return;

     label2:
        $r5 = "";

        goto label1;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadablePartial $r2;
        java.util.Locale $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 := @parameter2: java.util.Locale;

        return;
    }
