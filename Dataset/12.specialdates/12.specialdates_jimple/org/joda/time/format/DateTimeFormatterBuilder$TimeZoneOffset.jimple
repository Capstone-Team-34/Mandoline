org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset extends java.lang.Object implements org.joda.time.format.InternalParser org.joda.time.format.InternalPrinter
private final int iMaxFields
private final int iMinFields
private final boolean iShowSeparators
private final java.lang.String iZeroOffsetParseText
private final java.lang.String iZeroOffsetPrintText
    void <init>(java.lang.String, java.lang.String, boolean, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 = 4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> = $r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> = $r2;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators> = $z0;

        if $i0 <= 0 goto label1;

        if $i1 >= $i0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        if $i0 <= 4 goto label4;

        $i1 = 4;

     label3:
        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> = $i2;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields> = $i1;

        return;

     label4:
        $i2 = $i0;

        goto label3;
    }
    private int digitCount(java.lang.CharSequence, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2, $i3;
        char $c4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i2 = 0;

     label1:
        if $i1 <= 0 goto label3;

        $i3 = $i0 + $i2;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i3);

        if $c4 < 48 goto label3;

        if $c4 <= 57 goto label2;

        return $i2;

     label2:
        $i2 = $i2 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label3:
        return $i2;
    }
    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>();

        return $i0;
    }
    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        int $i0, $i1;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        $i0 = $i0 + 1;

        $i0 = $i0 << 1;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label1;

        $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        $i1 = $i1 + -1;

        $i0 = $i0 + $i1;

     label1:
        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        if $r1 == null goto label2;

        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 <= $i0 goto label2;

        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

     label2:
        return $i0;
    }
    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        org.joda.time.format.DateTimeParserBucket $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i4, $i5;
        boolean $z0, $z1;
        java.lang.String $r3;
        char $c3;
        java.lang.Integer $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $z0 = 0;

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - $i0;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        if $r3 == null goto label01;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 != 0 goto label03;

        if $i1 <= 0 goto label02;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c3 == 45 goto label01;

        if $c3 != 43 goto label02;

     label01:
        if $i1 > 1 goto label04;

        $i0 = $i0 ^ -1;

        return $i0;

     label02:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r4);

        return $i0;

     label03:
        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        $z1 = staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>($r2, $i0, $r3);

        if $z1 == 0 goto label01;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r4);

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        return $i0;

     label04:
        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c3 != 45 goto label06;

        $z1 = 1;

     label05:
        $i1 = $i1 + -1;

        $i4 = $i0 + 1;

        $i0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>($r2, $i4, 2);

        if $i0 >= 2 goto label08;

        $i0 = $i4 ^ -1;

        return $i0;

     label06:
        if $c3 != 43 goto label07;

        $z1 = 0;

        goto label05;

     label07:
        $i0 = $i0 ^ -1;

        return $i0;

     label08:
        $i0 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>($r2, $i4);

        if $i0 <= 23 goto label09;

        $i0 = $i4 ^ -1;

        return $i0;

     label09:
        $i0 = $i0 * 3600000;

        $i2 = $i1 + -2;

        $i1 = $i4 + 2;

        if $i2 > 0 goto label12;

        $i2 = $i0;

        $i0 = $i1;

     label10:
        if $z1 == 0 goto label30;

        $i1 = neg $i2;

     label11:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r4);

        return $i0;

     label12:
        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c3 != 58 goto label14;

        $i1 = $i1 + 1;

        $i2 = $i2 + -1;

        $z0 = 1;

     label13:
        $i4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>($r2, $i1, 2);

        if $i4 != 0 goto label16;

        if $z0 != 0 goto label16;

        $i2 = $i0;

        $i0 = $i1;

        goto label10;

     label14:
        if $c3 < 48 goto label15;

        if $c3 <= 57 goto label13;

     label15:
        $i2 = $i0;

        $i0 = $i1;

        goto label10;

     label16:
        if $i4 >= 2 goto label17;

        $i0 = $i1 ^ -1;

        return $i0;

     label17:
        $i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>($r2, $i1);

        if $i4 <= 59 goto label18;

        $i0 = $i1 ^ -1;

        return $i0;

     label18:
        $i4 = $i4 * 60000;

        $i4 = $i0 + $i4;

        $i2 = $i2 + -2;

        $i0 = $i1 + 2;

        if $i2 > 0 goto label19;

        $i2 = $i4;

        goto label10;

     label19:
        if $z0 == 0 goto label21;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c3 == 58 goto label20;

        $i2 = $i4;

        goto label10;

     label20:
        $i2 = $i2 + -1;

        $i0 = $i0 + 1;

     label21:
        $i1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>($r2, $i0, 2);

        if $i1 != 0 goto label22;

        if $z0 != 0 goto label22;

        $i2 = $i4;

        goto label10;

     label22:
        if $i1 >= 2 goto label23;

        $i0 = $i0 ^ -1;

        return $i0;

     label23:
        $i1 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>($r2, $i0);

        if $i1 <= 59 goto label24;

        $i0 = $i0 ^ -1;

        return $i0;

     label24:
        $i1 = $i1 * 1000;

        $i1 = $i4 + $i1;

        $i2 = $i2 + -2;

        $i5 = $i0 + 2;

        if $i2 > 0 goto label25;

        $i2 = $i1;

        $i0 = $i5;

        goto label10;

     label25:
        if $z0 == 0 goto label27;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i5);

        if $c3 == 46 goto label26;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i5);

        if $c3 == 44 goto label26;

        $i2 = $i1;

        $i0 = $i5;

        goto label10;

     label26:
        $i5 = $i5 + 1;

     label27:
        $i0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>($r2, $i5, 3);

        if $i0 != 0 goto label28;

        if $z0 != 0 goto label28;

        $i2 = $i1;

        $i0 = $i5;

        goto label10;

     label28:
        if $i0 >= 1 goto label29;

        $i0 = $i5 ^ -1;

        return $i0;

     label29:
        $i4 = $i5 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i5);

        $i2 = $c3 + -48;

        $i2 = $i2 * 100;

        $i2 = $i2 + $i1;

        if $i0 <= 1 goto label32;

        $i1 = $i4 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i4);

        $i4 = $c3 + -48;

        $i4 = $i4 * 10;

        $i2 = $i4 + $i2;

        if $i0 <= 2 goto label31;

        $i0 = $i1 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i1);

        $i1 = $c3 + -48;

        $i2 = $i2 + $i1;

        goto label10;

     label30:
        $i1 = $i2;

        goto label11;

     label31:
        $i0 = $i1;

        goto label10;

     label32:
        $i0 = $i4;

        goto label10;
    }
    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.Appendable $r1;
        long $l0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeZone $r3;
        java.util.Locale $r4;
        int $i1, $i2, $i3;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $r1 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: org.joda.time.Chronology;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.joda.time.DateTimeZone;

        $r4 := @parameter5: java.util.Locale;

        if $r3 != null goto label01;

        return;

     label01:
        if $i1 != 0 goto label02;

        $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        if $r5 == null goto label02;

        $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

        return;

     label02:
        if $i1 < 0 goto label10;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(43);

     label03:
        $i2 = $i1 / 3600000;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r1, $i2, 2);

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i3 == 1 goto label11;

        $i2 = $i2 * 3600000;

        $i1 = $i1 - $i2;

        if $i1 != 0 goto label04;

        $i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i2 <= 1 goto label11;

     label04:
        $i2 = $i1 / 60000;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label05;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(58);

     label05:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r1, $i2, 2);

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i3 == 2 goto label11;

        $i2 = $i2 * 60000;

        $i1 = $i1 - $i2;

        if $i1 != 0 goto label06;

        $i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i2 <= 2 goto label11;

     label06:
        $i2 = $i1 / 1000;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label07;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(58);

     label07:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r1, $i2, 2);

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i3 == 3 goto label11;

        $i2 = $i2 * 1000;

        $i1 = $i1 - $i2;

        if $i1 != 0 goto label08;

        $i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i2 <= 3 goto label11;

     label08:
        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label09;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(46);

     label09:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r1, $i1, 3);

        return;

     label10:
        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        $i1 = neg $i1;

        goto label03;

     label11:
        return;
    }
    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.Appendable $r1;
        org.joda.time.ReadablePartial $r2;
        java.util.Locale $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: org.joda.time.ReadablePartial;

        $r3 := @parameter2: java.util.Locale;

        return;
    }
