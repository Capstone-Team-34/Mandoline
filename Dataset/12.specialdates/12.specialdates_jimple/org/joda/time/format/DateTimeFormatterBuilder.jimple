org.joda.time.format.DateTimeFormatterBuilder extends java.lang.Object
private java.util.ArrayList iElementPairs
private java.lang.Object iFormatter
    public void <init>()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> = $r1;

        return;
    }
    private org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.lang.Object;

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    private org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.InternalPrinter $r1;
        org.joda.time.format.InternalParser $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.InternalPrinter;

        $r2 := @parameter1: org.joda.time.format.InternalParser;

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return r0;
    }
    static void appendUnknownString(java.lang.Appendable, int)
    {
        java.lang.Appendable $r0;
        int $i0;

        $r0 := @parameter0: java.lang.Appendable;

        $i0 := @parameter1: int;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        goto label1;

     label2:
        return;
    }
    private void checkParser(org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeParser $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimeParser;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No parser supplied");

        throw $r2;

     label1:
        return;
    }
    private void checkPrinter(org.joda.time.format.DateTimePrinter)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimePrinter $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No printer supplied");

        throw $r2;

     label1:
        return;
    }
    static boolean csStartsWith(java.lang.CharSequence, int, java.lang.String)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        char $c4, $c5;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        if $i2 >= $i1 goto label1;

        return 0;

     label1:
        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $i3 = $i0 + $i2;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i3);

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        if $c4 != $c5 goto label4;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    static boolean csStartsWithIgnoreCase(java.lang.CharSequence, int, java.lang.String)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        char $c4, $c5;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        if $i2 >= $i1 goto label1;

        return 0;

     label1:
        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label4;

        $i3 = $i0 + $i2;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i3);

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        if $c4 == $c5 goto label3;

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c5);

        if $c4 == $c5 goto label3;

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c4);

        $c5 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c5);

        if $c4 != $c5 goto label5;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }
    private java.lang.Object getFormatter()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1, $r3, $r4;
        java.util.ArrayList $r2;
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$Composite $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>;

        if $r1 != null goto label5;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 2 goto label2;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(1);

        if $r3 == null goto label4;

        if $r3 == $r4 goto label1;

        if $r4 != null goto label2;

     label1:
        $r1 = $r3;

     label2:
        if $r1 != null goto label3;

        $r5 = new org.joda.time.format.DateTimeFormatterBuilder$Composite;

        $r1 = $r5;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r2);

     label3:
        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = $r1;

        return $r1;

     label4:
        $r1 = $r4;

        goto label2;

     label5:
        return $r1;
    }
    private boolean isFormatter(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private boolean isParser(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        boolean $z0;
        java.lang.Object $r1;
        org.joda.time.format.DateTimeFormatterBuilder$Composite $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.joda.time.format.InternalParser;

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite;

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) $r1;

        $z0 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>();

        return $z0;

     label1:
        return 1;

     label2:
        return 0;
    }
    private boolean isPrinter(java.lang.Object)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        boolean $z0;
        java.lang.Object $r1;
        org.joda.time.format.DateTimeFormatterBuilder$Composite $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.joda.time.format.InternalPrinter;

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite;

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) $r1;

        $z0 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>();

        return $z0;

     label1:
        return 1;

     label2:
        return 0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.format.InternalPrinter $r3;
        org.joda.time.format.InternalParser $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimeFormatter;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No formatter supplied");

        throw $r2;

     label1:
        $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>();

        $r4 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>();

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r3, $r4);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeParser $r1;
        org.joda.time.format.InternalParser $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimeParser;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>($r1);

        $r2 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>(null, $r2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimePrinter $r1;
        org.joda.time.format.InternalPrinter $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>($r1);

        $r2 = staticinvoke <org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>($r1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r2, null);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimePrinter $r1;
        org.joda.time.format.DateTimeParser $r2;
        org.joda.time.format.InternalPrinter $r3;
        org.joda.time.format.InternalParser $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        $r2 := @parameter1: org.joda.time.format.DateTimeParser;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>($r1);

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>($r2);

        $r3 = staticinvoke <org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>($r1);

        $r4 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r2);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r3, $r4);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser[])
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimePrinter $r1;
        org.joda.time.format.DateTimeParser[] $r2;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.format.DateTimeParser $r4;
        org.joda.time.format.InternalPrinter $r5;
        org.joda.time.format.InternalParser $r6;
        org.joda.time.format.InternalParser[] $r7;
        org.joda.time.format.DateTimeFormatterBuilder$MatchingParser $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        $r2 := @parameter1: org.joda.time.format.DateTimeParser[];

        $i0 = 0;

        if $r1 == null goto label1;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>($r1);

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No parsers supplied");

        throw $r3;

     label2:
        $i1 = lengthof $r2;

        if $i1 != 1 goto label4;

        $r4 = $r2[0];

        if $r4 != null goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No parser supplied");

        throw $r3;

     label3:
        $r5 = staticinvoke <org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>($r1);

        $r4 = $r2[0];

        $r6 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r4);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r5, $r6);

        return r0;

     label4:
        $r7 = newarray (org.joda.time.format.InternalParser)[$i1];

     label5:
        $i2 = $i1 + -1;

        if $i0 >= $i2 goto label7;

        $r4 = $r2[$i0];

        $r6 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r4);

        $r7[$i0] = $r6;

        if $r6 != null goto label6;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incomplete parser array");

        throw $r3;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        $r4 = $r2[$i0];

        $r6 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r4);

        $r7[$i0] = $r6;

        $r5 = staticinvoke <org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>($r1);

        $r8 = new org.joda.time.format.DateTimeFormatterBuilder$MatchingParser;

        specialinvoke $r8.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>($r7);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r5, $r8);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 3);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber $r3;
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r2;

     label1:
        if $i1 >= $i0 goto label2;

        $i1 = $i0;

     label2:
        if $i0 < 0 goto label3;

        if $i1 > 0 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label4:
        if $i0 > 1 goto label5;

        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r1, $i1, 0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return r0;

     label5:
        $r4 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>($r1, $i1, 0, $i0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendEraText()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.format.DateTimeFormatterBuilder$FixedNumber $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r2;

     label1:
        if $i0 > 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal number of digits: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = new org.joda.time.format.DateTimeFormatterBuilder$FixedNumber;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r1, $i0, 0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r5);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.format.DateTimeFormatterBuilder$FixedNumber $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r2;

     label1:
        if $i0 > 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal number of digits: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = new org.joda.time.format.DateTimeFormatterBuilder$FixedNumber;

        specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r1, $i0, 1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r5);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r2;

     label1:
        if $i1 >= $i0 goto label2;

        $i1 = $i0;

     label2:
        if $i0 < 0 goto label3;

        if $i1 > 0 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label4:
        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        char $c0;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $c0 := @parameter0: char;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>($c0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.DateTimeFormatterBuilder r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$StringLiteral $r3;
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral $r4;
        char $c1;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Literal must not be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label2;
        };

     label2:
        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$StringLiteral;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>($r0);

        r1 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

     label3:
        return r1;

     label4:
        $r4 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>($c1);

        r1 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4);

        return r1;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 8);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 3);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 4);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeParser $r1;
        org.joda.time.format.InternalParser[] $r2;
        org.joda.time.format.InternalParser $r3;
        org.joda.time.format.DateTimeFormatterBuilder$MatchingParser $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.format.DateTimeParser;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>($r1);

        $r2 = newarray (org.joda.time.format.InternalParser)[2];

        $r3 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>($r1);

        $r2[0] = $r3;

        $r2[1] = null;

        $r4 = new org.joda.time.format.DateTimeFormatterBuilder$MatchingParser;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>($r2);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>(null, $r4);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.joda.time.format.DateTimeFormat: void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r0, $r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 5);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.format.DateTimeFormatterBuilder$TextField $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r2;

     label1:
        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$TextField;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>($r1, 1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber $r3;
        org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r2;

     label1:
        if $i1 >= $i0 goto label2;

        $i1 = $i0;

     label2:
        if $i0 < 0 goto label3;

        if $i1 > 0 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label4:
        if $i0 > 1 goto label5;

        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r1, $i1, 1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return r0;

     label5:
        $r4 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>($r1, $i1, 1, $i0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.format.DateTimeFormatterBuilder$TextField $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field type must not be null");

        throw $r2;

     label1:
        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$TextField;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>($r1, 0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId $r1, $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r2 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE>;

        $r1 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE>;

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r2, $r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>(0, null);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r1, null);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName(java.util.Map)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.util.Map $r1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.util.Map;

        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>(0, $r1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r2, $r2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String, java.lang.String, boolean, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int $i0, $i1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>($r1, $r2, $z0, $i0, $i1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String, boolean, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.String $r1;
        boolean $z0;
        int $i0, $i1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>($r1, $r1, $z0, $i0, $i1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>(1, null);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r1, null);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.util.Map $r1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 := @parameter0: java.util.Map;

        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>(1, $r1);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r2, $r2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>($i0, 0);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        boolean $z0;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r2, $i0, $z0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>($i0, 0);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        boolean $z0;
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>($r2, $i0, $z0);

        r0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, 2);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendYear(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        r0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, $i0, $i1);

        return r0;
    }
    public boolean canBuildFormatter()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean canBuildParser()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean canBuildPrinter()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>($r1);

        return $z0;
    }
    public void clear()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null;

        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }
    public org.joda.time.format.DateTimeFormatter toFormatter()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.format.InternalPrinter $r2;
        org.joda.time.format.InternalParser $r3;
        org.joda.time.format.DateTimeFormatter $r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>($r1);

        if $z0 == 0 goto label6;

        $r2 = (org.joda.time.format.InternalPrinter) $r1;

     label1:
        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r3 = (org.joda.time.format.InternalParser) $r1;

     label2:
        if $r2 != null goto label3;

        if $r3 == null goto label4;

     label3:
        $r4 = new org.joda.time.format.DateTimeFormatter;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r2, $r3);

        return $r4;

     label4:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Both printing and parsing not supported");

        throw $r5;

     label5:
        $r3 = null;

        goto label2;

     label6:
        $r2 = null;

        goto label1;
    }
    public org.joda.time.format.DateTimeParser toParser()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.format.InternalParser $r2;
        org.joda.time.format.DateTimeParser $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.format.InternalParser) $r1;

        $r3 = staticinvoke <org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>($r2);

        return $r3;

     label1:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Parsing is not supported");

        throw $r4;
    }
    public org.joda.time.format.DateTimePrinter toPrinter()
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.format.InternalPrinter $r2;
        org.joda.time.format.DateTimePrinter $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>();

        $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.format.InternalPrinter) $r1;

        $r3 = staticinvoke <org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>($r2);

        return $r3;

     label1:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Printing is not supported");

        throw $r4;
    }
