org.joda.time.format.FormatUtils extends java.lang.Object
private static final double LOG_10
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        <org.joda.time.format.FormatUtils: double LOG_10> = $d0;

        return;
    }
    private void <init>()
    {
        org.joda.time.format.FormatUtils r0;

        r0 := @this: org.joda.time.format.FormatUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void appendPaddedInteger(java.lang.Appendable, int, int)
    {
        java.lang.Appendable $r0;
        double $d0, $d1;
        int $i0, $i1, $i3;
        char $c2;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Appendable;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 >= 0 goto label01;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        if $i0 == -2147483648 goto label03;

        $i0 = neg $i0;

     label01:
        if $i0 >= 10 goto label06;

     label02:
        if $i1 <= 1 goto label05;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        $i1 = $i1 + -1;

        goto label02;

     label03:
        if $i1 <= 10 goto label04;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        $i1 = $i1 + -1;

        goto label03;

     label04:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("2147483648");

        return;

     label05:
        $i0 = $i0 + 48;

        $c2 = (char) $i0;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c2);

        return;

     label06:
        if $i0 >= 100 goto label09;

     label07:
        if $i1 <= 2 goto label08;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        $i1 = $i1 + -1;

        goto label07;

     label08:
        $i1 = $i0 + 1;

        $i1 = $i1 * 13421772;

        $i1 = $i1 >> 27;

        $i3 = $i1 + 48;

        $c2 = (char) $i3;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c2);

        $i3 = $i1 << 3;

        $i0 = $i0 - $i3;

        $i1 = $i1 << 1;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 48;

        $c2 = (char) $i0;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c2);

        return;

     label09:
        if $i0 >= 1000 goto label11;

        $i3 = 3;

     label10:
        if $i1 <= $i3 goto label13;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        $i1 = $i1 + -1;

        goto label10;

     label11:
        if $i0 >= 10000 goto label12;

        $i3 = 4;

        goto label10;

     label12:
        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d0 = $d1 / $d0;

        $i3 = (int) $d0;

        $i3 = $i3 + 1;

        goto label10;

     label13:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

        return;
    }
    public static void appendPaddedInteger(java.lang.Appendable, long, int)
    {
        java.lang.Appendable $r0;
        byte $b0;
        long $l1, $l4;
        int $i2, $i3;
        java.lang.String $r1;
        double $d0, $d1;

        $r0 := @parameter0: java.lang.Appendable;

        $l1 := @parameter1: long;

        $i2 := @parameter2: int;

        $i3 = (int) $l1;

        $l4 = (long) $i3;

        $b0 = $l4 cmp $l1;

        if $b0 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r0, $i3, $i2);

        return;

     label1:
        if $i2 > 19 goto label2;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

        return;

     label2:
        $b0 = $l1 cmp 0L;

        if $b0 >= 0 goto label3;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        $b0 = $l1 cmp -9223372036854775808L;

        if $b0 == 0 goto label5;

        $l1 = neg $l1;

     label3:
        $d0 = (double) $l1;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d1 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d0 = $d0 / $d1;

        $i3 = (int) $d0;

        $i3 = $i3 + 1;

     label4:
        if $i2 <= $i3 goto label7;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        $i2 = $i2 + -1;

        goto label4;

     label5:
        if $i2 <= 19 goto label6;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        $i2 = $i2 + -1;

        goto label5;

     label6:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("9223372036854775808");

        return;

     label7:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

        return;
    }
    public static void appendPaddedInteger(java.lang.StringBuffer, int, int)
    {
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.io.IOException $r1;

        $r0 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>($r0, $i0, $i1);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static void appendPaddedInteger(java.lang.StringBuffer, long, int)
    {
        java.lang.StringBuffer $r0;
        long $l0;
        int $i1;
        java.io.IOException $r1;

        $r0 := @parameter0: java.lang.StringBuffer;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>($r0, $l0, $i1);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static void appendUnpaddedInteger(java.lang.Appendable, int)
    {
        java.lang.Appendable $r0;
        java.lang.String $r1;
        int $i0, $i2, $i3;
        char $c1;

        $r0 := @parameter0: java.lang.Appendable;

        $i0 := @parameter1: int;

        if $i0 >= 0 goto label1;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        if $i0 == -2147483648 goto label2;

        $i0 = neg $i0;

     label1:
        if $i0 >= 10 goto label3;

        $i0 = $i0 + 48;

        $c1 = (char) $i0;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c1);

        return;

     label2:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("2147483648");

        return;

     label3:
        if $i0 >= 100 goto label4;

        $i2 = $i0 + 1;

        $i2 = $i2 * 13421772;

        $i2 = $i2 >> 27;

        $i3 = $i2 + 48;

        $c1 = (char) $i3;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c1);

        $i3 = $i2 << 3;

        $i0 = $i0 - $i3;

        $i2 = $i2 << 1;

        $i0 = $i0 - $i2;

        $i0 = $i0 + 48;

        $c1 = (char) $i0;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c1);

        return;

     label4:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

        return;
    }
    public static void appendUnpaddedInteger(java.lang.Appendable, long)
    {
        java.lang.Appendable $r0;
        long $l0, $l2;
        byte $b1;
        java.lang.String $r1;
        int $i3;

        $r0 := @parameter0: java.lang.Appendable;

        $l0 := @parameter1: long;

        $i3 = (int) $l0;

        $l2 = (long) $i3;

        $b1 = $l2 cmp $l0;

        if $b1 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>($r0, $i3);

        return;

     label1:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

        return;
    }
    public static void appendUnpaddedInteger(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer $r0;
        int $i0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>($r0, $i0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static void appendUnpaddedInteger(java.lang.StringBuffer, long)
    {
        java.lang.StringBuffer $r0;
        long $l0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.lang.StringBuffer;

        $l0 := @parameter1: long;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>($r0, $l0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static int calculateDigitCount(long)
    {
        long $l0;
        double $d0, $d1;
        byte $b1;
        int $i2;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label1;

        $l0 = neg $l0;

        $i2 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>($l0);

        $i2 = $i2 + 1;

        return $i2;

     label1:
        return 20;

     label2:
        $b1 = $l0 cmp 10L;

        if $b1 >= 0 goto label3;

        return 1;

     label3:
        $b1 = $l0 cmp 100L;

        if $b1 >= 0 goto label4;

        return 2;

     label4:
        $b1 = $l0 cmp 1000L;

        if $b1 >= 0 goto label5;

        return 3;

     label5:
        $b1 = $l0 cmp 10000L;

        if $b1 >= 0 goto label6;

        return 4;

     label6:
        $d0 = (double) $l0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d0 = $d1 / $d0;

        $i2 = (int) $d0;

        $i2 = $i2 + 1;

        return $i2;
    }
    static java.lang.String createErrorMessage(java.lang.String, int)
    {
        java.lang.String $r0, $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = $i0 + 32;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = $i1 + 3;

        if $i2 > $i3 goto label2;

        $r1 = $r0;

     label1:
        if $i0 > 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label2:
        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>("...");

        goto label1;

     label3:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 < $i1 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is too short");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is malformed at \"");

        $r0 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    static int parseTwoDigits(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i2, $i3;
        char $c1;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $c1 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $i2 = $c1 + -48;

        $i3 = $i2 << 3;

        $i2 = $i2 << 1;

        $i3 = $i2 + $i3;

        $i0 = $i0 + 1;

        $c1 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $i0 = $i3 + $c1;

        $i0 = $i0 + -48;

        return $i0;
    }
    public static void writePaddedInteger(java.io.Writer, int, int)
    {
        java.io.Writer $r0;
        double $d0, $d1;
        int $i0, $i1, $i2;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.Writer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 >= 0 goto label01;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(45);

        if $i0 == -2147483648 goto label03;

        $i0 = neg $i0;

     label01:
        if $i0 >= 10 goto label06;

     label02:
        if $i1 <= 1 goto label05;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(48);

        $i1 = $i1 + -1;

        goto label02;

     label03:
        if $i1 <= 10 goto label04;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(48);

        $i1 = $i1 + -1;

        goto label03;

     label04:
        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>("2147483648");

        return;

     label05:
        $i0 = $i0 + 48;

        virtualinvoke $r0.<java.io.Writer: void write(int)>($i0);

        return;

     label06:
        if $i0 >= 100 goto label09;

     label07:
        if $i1 <= 2 goto label08;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(48);

        $i1 = $i1 + -1;

        goto label07;

     label08:
        $i1 = $i0 + 1;

        $i1 = $i1 * 13421772;

        $i1 = $i1 >> 27;

        $i2 = $i1 + 48;

        virtualinvoke $r0.<java.io.Writer: void write(int)>($i2);

        $i2 = $i1 << 3;

        $i0 = $i0 - $i2;

        $i1 = $i1 << 1;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 48;

        virtualinvoke $r0.<java.io.Writer: void write(int)>($i0);

        return;

     label09:
        if $i0 >= 1000 goto label11;

        $i2 = 3;

     label10:
        if $i1 <= $i2 goto label13;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(48);

        $i1 = $i1 + -1;

        goto label10;

     label11:
        if $i0 >= 10000 goto label12;

        $i2 = 4;

        goto label10;

     label12:
        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d0 = $d1 / $d0;

        $i2 = (int) $d0;

        $i2 = $i2 + 1;

        goto label10;

     label13:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r1);

        return;
    }
    public static void writePaddedInteger(java.io.Writer, long, int)
    {
        java.io.Writer $r0;
        byte $b0;
        long $l1, $l4;
        int $i2, $i3;
        java.lang.String $r1;
        double $d0, $d1;

        $r0 := @parameter0: java.io.Writer;

        $l1 := @parameter1: long;

        $i2 := @parameter2: int;

        $i3 = (int) $l1;

        $l4 = (long) $i3;

        $b0 = $l4 cmp $l1;

        if $b0 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>($r0, $i3, $i2);

        return;

     label1:
        if $i2 > 19 goto label2;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r1);

        return;

     label2:
        $b0 = $l1 cmp 0L;

        if $b0 >= 0 goto label3;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(45);

        $b0 = $l1 cmp -9223372036854775808L;

        if $b0 == 0 goto label5;

        $l1 = neg $l1;

     label3:
        $d0 = (double) $l1;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d1 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d0 = $d0 / $d1;

        $i3 = (int) $d0;

        $i3 = $i3 + 1;

     label4:
        if $i2 <= $i3 goto label7;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(48);

        $i2 = $i2 + -1;

        goto label4;

     label5:
        if $i2 <= 19 goto label6;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(48);

        $i2 = $i2 + -1;

        goto label5;

     label6:
        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>("9223372036854775808");

        return;

     label7:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r1);

        return;
    }
    public static void writeUnpaddedInteger(java.io.Writer, int)
    {
        java.io.Writer $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: java.io.Writer;

        $i0 := @parameter1: int;

        if $i0 >= 0 goto label1;

        virtualinvoke $r0.<java.io.Writer: void write(int)>(45);

        if $i0 == -2147483648 goto label2;

        $i0 = neg $i0;

     label1:
        if $i0 >= 10 goto label3;

        $i0 = $i0 + 48;

        virtualinvoke $r0.<java.io.Writer: void write(int)>($i0);

        return;

     label2:
        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>("2147483648");

        return;

     label3:
        if $i0 >= 100 goto label4;

        $i1 = $i0 + 1;

        $i1 = $i1 * 13421772;

        $i1 = $i1 >> 27;

        $i2 = $i1 + 48;

        virtualinvoke $r0.<java.io.Writer: void write(int)>($i2);

        $i2 = $i1 << 3;

        $i0 = $i0 - $i2;

        $i1 = $i1 << 1;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 48;

        virtualinvoke $r0.<java.io.Writer: void write(int)>($i0);

        return;

     label4:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r1);

        return;
    }
    public static void writeUnpaddedInteger(java.io.Writer, long)
    {
        java.io.Writer $r0;
        long $l0, $l2;
        byte $b1;
        java.lang.String $r1;
        int $i3;

        $r0 := @parameter0: java.io.Writer;

        $l0 := @parameter1: long;

        $i3 = (int) $l0;

        $l2 = (long) $i3;

        $b1 = $l2 cmp $l0;

        if $b1 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>($r0, $i3);

        return;

     label1:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r1);

        return;
    }
