org.joda.time.convert.ReadableDurationConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.DurationConverter org.joda.time.convert.PeriodConverter
static final org.joda.time.convert.ReadableDurationConverter INSTANCE
    static void <clinit>()
    {
        org.joda.time.convert.ReadableDurationConverter $r0;

        $r0 = new org.joda.time.convert.ReadableDurationConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableDurationConverter: void <init>()>();

        <org.joda.time.convert.ReadableDurationConverter: org.joda.time.convert.ReadableDurationConverter INSTANCE> = $r0;

        return;
    }
    protected void <init>()
    {
        org.joda.time.convert.ReadableDurationConverter r0;

        r0 := @this: org.joda.time.convert.ReadableDurationConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }
    public long getDurationMillis(java.lang.Object)
    {
        org.joda.time.convert.ReadableDurationConverter r0;
        long $l0;
        java.lang.Object $r1;
        org.joda.time.ReadableDuration $r2;

        r0 := @this: org.joda.time.convert.ReadableDurationConverter;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.ReadableDuration) $r1;

        $l0 = interfaceinvoke $r2.<org.joda.time.ReadableDuration: long getMillis()>();

        return $l0;
    }
    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadableDurationConverter r0;

        r0 := @this: org.joda.time.convert.ReadableDurationConverter;

        return class "Lorg/joda/time/ReadableDuration;";
    }
    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableDurationConverter r0;
        org.joda.time.ReadWritablePeriod $r1;
        org.joda.time.Chronology $r2;
        java.lang.Object $r3;
        org.joda.time.ReadableDuration $r4;
        long $l0;
        int[] $r5;
        int $i1, $i2;

        r0 := @this: org.joda.time.convert.ReadableDurationConverter;

        $r1 := @parameter0: org.joda.time.ReadWritablePeriod;

        $r3 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.joda.time.Chronology;

        $r4 = (org.joda.time.ReadableDuration) $r3;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $l0 = interfaceinvoke $r4.<org.joda.time.ReadableDuration: long getMillis()>();

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>($r1, $l0);

        $i1 = 0;

     label1:
        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label2;

        $i2 = $r5[$i1];

        interfaceinvoke $r1.<org.joda.time.ReadWritablePeriod: void setValue(int,int)>($i1, $i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
