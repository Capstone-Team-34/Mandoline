org.joda.time.convert.ReadableInstantConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.InstantConverter org.joda.time.convert.PartialConverter
static final org.joda.time.convert.ReadableInstantConverter INSTANCE
    static void <clinit>()
    {
        org.joda.time.convert.ReadableInstantConverter $r0;

        $r0 = new org.joda.time.convert.ReadableInstantConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableInstantConverter: void <init>()>();

        <org.joda.time.convert.ReadableInstantConverter: org.joda.time.convert.ReadableInstantConverter INSTANCE> = $r0;

        return;
    }
    protected void <init>()
    {
        org.joda.time.convert.ReadableInstantConverter r0;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }
    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableInstantConverter r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.ReadableInstant $r3;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        if $r2 != null goto label1;

        $r3 = (org.joda.time.ReadableInstant) $r1;

        $r2 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

     label1:
        return $r2;
    }
    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.convert.ReadableInstantConverter r0;
        org.joda.time.DateTimeZone $r1, $r6;
        java.lang.Object $r2;
        org.joda.time.ReadableInstant $r3;
        org.joda.time.Chronology $r4;
        org.joda.time.chrono.ISOChronology $r5;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        $r3 = (org.joda.time.ReadableInstant) $r2;

        $r4 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        if $r4 != null goto label1;

        $r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        return $r5;

     label1:
        $r6 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        if $r6 == $r1 goto label2;

        $r4 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        if $r4 != null goto label2;

        $r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        return $r5;

     label2:
        return $r4;
    }
    public long getInstantMillis(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableInstantConverter r0;
        org.joda.time.Chronology $r1;
        long $l0;
        java.lang.Object $r2;
        org.joda.time.ReadableInstant $r3;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.joda.time.Chronology;

        $r3 = (org.joda.time.ReadableInstant) $r2;

        $l0 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: long getMillis()>();

        return $l0;
    }
    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadableInstantConverter r0;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        return class "Lorg/joda/time/ReadableInstant;";
    }
