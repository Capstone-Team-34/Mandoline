org.joda.time.field.RemainderDateTimeField extends org.joda.time.field.DecoratedDateTimeField
private static final long serialVersionUID
final int iDivisor
final org.joda.time.DurationField iDurationField
final org.joda.time.DurationField iRangeField
    public void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeFieldType $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.DurationField $r4;
        org.joda.time.field.ScaledDurationField $r5;
        org.joda.time.DurationFieldType $r6;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r1, $r2);

        if $i0 >= 2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The divisor must be at least 2");

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        if $r4 != null goto label3;

        r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField> = null;

     label2:
        $r4 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iDurationField> = $r4;

        r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor> = $i0;

        return;

     label3:
        $r5 = new org.joda.time.field.ScaledDurationField;

        $r6 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        specialinvoke $r5.<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>($r4, $r6, $i0);

        r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField> = $r5;

        goto label2;
    }
    public void <init>(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.DateTimeFieldType $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.DurationField;

        $r3 := @parameter2: org.joda.time.DateTimeFieldType;

        $i0 := @parameter3: int;

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r1, $r3);

        if $i0 >= 2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The divisor must be at least 2");

        throw $r4;

     label1:
        r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField> = $r2;

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iDurationField> = $r2;

        r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor> = $i0;

        return;
    }
    public void <init>(org.joda.time.field.DividedDateTimeField)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        org.joda.time.field.DividedDateTimeField $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $r1 := @parameter0: org.joda.time.field.DividedDateTimeField;

        $r2 = virtualinvoke $r1.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke r0.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>($r1, $r2);

        return;
    }
    public void <init>(org.joda.time.field.DividedDateTimeField, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        org.joda.time.field.DividedDateTimeField $r1;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.DurationField $r4;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $r1 := @parameter0: org.joda.time.field.DividedDateTimeField;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType;

        $r3 = virtualinvoke $r1.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        specialinvoke r0.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>($r1, $r4, $r2);

        return;
    }
    public void <init>(org.joda.time.field.DividedDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        org.joda.time.field.DividedDateTimeField $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;
        int $i0;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $r1 := @parameter0: org.joda.time.field.DividedDateTimeField;

        $r2 := @parameter1: org.joda.time.DurationField;

        $r3 := @parameter2: org.joda.time.DateTimeFieldType;

        $r4 = virtualinvoke $r1.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r4, $r3);

        $i0 = $r1.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor> = $i0;

        r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iDurationField> = $r2;

        $r2 = $r1.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField>;

        r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField> = $r2;

        return;
    }
    private int getDivided(int)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        int $i0, $i1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i0 = $i0 / $i1;

        return $i0;

     label1:
        $i1 = $i0 + 1;

        $i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i0 = $i1 / $i0;

        $i0 = $i0 + -1;

        return $i0;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: int get(long)>($l0);

        $i3 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i3 = $i3 + -1;

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, $i1, 0, $i3);

        $l0 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
    public int get(long)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        if $i1 < 0 goto label1;

        $i2 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i2 = $i1 % $i2;

        return $i2;

     label1:
        $i2 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i2 = $i2 + -1;

        $i3 = $i1 + 1;

        $i1 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i1 = $i3 % $i1;

        $i2 = $i1 + $i2;

        return $i2;
    }
    public int getDivisor()
    {
        org.joda.time.field.RemainderDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        return i0;
    }
    public org.joda.time.DurationField getDurationField()
    {
        org.joda.time.field.RemainderDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        r1 = r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iDurationField>;

        return r1;
    }
    public int getMaximumValue()
    {
        org.joda.time.field.RemainderDateTimeField r0;
        int $i0;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i0 = $i0 + -1;

        return $i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.field.RemainderDateTimeField r0;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        return 0;
    }
    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.field.RemainderDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        r1 = r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField>;

        return r1;
    }
    public long remainder(long)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>($l0);

        return $l0;
    }
    public long roundCeiling(long)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0);

        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        return $l0;
    }
    public long roundHalfCeiling(long)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfCeiling(long)>($l0);

        return $l0;
    }
    public long roundHalfEven(long)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfEven(long)>($l0);

        return $l0;
    }
    public long roundHalfFloor(long)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfFloor(long)>($l0);

        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.field.RemainderDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.RemainderDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i2 = $i2 + -1;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, 0, $i2);

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        $i3 = specialinvoke r0.<org.joda.time.field.RemainderDateTimeField: int getDivided(int)>($i2);

        $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i2 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        $i2 = $i3 * $i2;

        $i1 = $i2 + $i1;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
