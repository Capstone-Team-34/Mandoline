org.joda.time.field.PreciseDurationDateTimeField extends org.joda.time.field.BaseDateTimeField
private static final long serialVersionUID
private final org.joda.time.DurationField iUnitField
final long iUnitMillis
    public void <init>(org.joda.time.DateTimeFieldType, org.joda.time.DurationField)
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        long $l0;
        byte $b1;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 := @parameter1: org.joda.time.DurationField;

        specialinvoke r0.<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>($r1);

        $z0 = virtualinvoke $r2.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unit duration field must be precise");

        throw $r3;

     label1:
        $l0 = virtualinvoke $r2.<org.joda.time.DurationField: long getUnitMillis()>();

        r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> = $l0;

        $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $b1 = $l0 cmp 1L;

        if $b1 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The unit milliseconds must be at least 1");

        throw $r3;

     label2:
        r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> = $r2;

        return;
    }
    public org.joda.time.DurationField getDurationField()
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>;

        return r1;
    }
    protected int getMaximumValueForSet(long, int)
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>($l0);

        return $i1;
    }
    public int getMinimumValue()
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        return 0;
    }
    public final long getUnitMillis()
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        long l0;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        return l0;
    }
    public boolean isLenient()
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        return 0;
    }
    public long remainder(long)
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l0 = $l0 % $l2;

        return $l0;

     label1:
        $l0 = $l0 + 1L;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l0 = $l0 % $l2;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l0 = $l0 + $l2;

        $l0 = $l0 - 1L;

        return $l0;
    }
    public long roundCeiling(long)
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $l0 = $l0 - 1L;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l2 = $l0 % $l2;

        $l0 = $l0 - $l2;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l0 = $l0 + $l2;

        return $l0;

     label1:
        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l2 = $l0 % $l2;

        $l0 = $l0 - $l2;

        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l2 = $l0 % $l2;

        $l0 = $l0 - $l2;

        return $l0;

     label1:
        $l0 = 1L + $l0;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l2 = $l0 % $l2;

        $l0 = $l0 - $l2;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l0 = $l0 - $l2;

        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.field.PreciseDurationDateTimeField r0;
        long $l0, $l2, $l5;
        int $i1, $i3, $i4;

        r0 := @this: org.joda.time.field.PreciseDurationDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>();

        $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>($l0, $i1);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i3, $i4);

        $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>($l0);

        $i1 = $i1 - $i3;

        $l5 = (long) $i1;

        $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>;

        $l2 = $l5 * $l2;

        $l0 = $l2 + $l0;

        return $l0;
    }
