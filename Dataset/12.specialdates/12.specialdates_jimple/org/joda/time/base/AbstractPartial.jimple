org.joda.time.base.AbstractPartial extends java.lang.Object implements java.lang.Comparable org.joda.time.ReadablePartial
    protected void <init>()
    {
        org.joda.time.base.AbstractPartial r0;

        r0 := @this: org.joda.time.base.AbstractPartial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compareTo(java.lang.Object)
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0;
        java.lang.Object $r1;
        org.joda.time.ReadablePartial $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.ReadablePartial) $r1;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>($r2);

        return $i0;
    }
    public int compareTo(org.joda.time.ReadablePartial)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.ClassCastException $r2;
        org.joda.time.DateTimeFieldType $r3, $r4;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != $r1 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        if $i0 == $i1 goto label2;

        $r2 = new java.lang.ClassCastException;

        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>("ReadablePartial objects must have matching field types");

        throw $r2;

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        $r4 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        if $r3 == $r4 goto label4;

        $r2 = new java.lang.ClassCastException;

        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>("ReadablePartial objects must have matching field types");

        throw $r2;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $i1 = 0;

     label6:
        if $i1 >= $i0 goto label9;

        $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i1);

        $i3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int getValue(int)>($i1);

        if $i2 <= $i3 goto label7;

        return 1;

     label7:
        $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i1);

        $i3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int getValue(int)>($i1);

        if $i2 >= $i3 goto label8;

        return -1;

     label8:
        $i1 = $i1 + 1;

        goto label6;

     label9:
        return 0;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.base.AbstractPartial r0;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.ReadablePartial $r2;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType $r3, $r4;
        org.joda.time.Chronology $r5, $r6;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.ReadablePartial;

        if $z0 == 0 goto label4;

        $r2 = (org.joda.time.ReadablePartial) $r1;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $i1 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: int size()>();

        if $i0 != $i1 goto label4;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i1);

        $i3 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: int getValue(int)>($i1);

        if $i2 != $i3 goto label4;

        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        $r4 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        if $r3 != $r4 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r5 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $r6 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $z0 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        return $z0;

     label4:
        return 0;
    }
    public int get(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>($r1);

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i0);

        return $i0;
    }
    public org.joda.time.DateTimeField getField(int)
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>($i0, $r1);

        return $r2;
    }
protected abstract org.joda.time.DateTimeField getField(int, org.joda.time.Chronology) { 
// no body
} 
    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.DateTimeFieldType $r3;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>($i0, $r1);

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        return $r3;
    }
    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DateTimeFieldType[] $r1;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $r1 = newarray (org.joda.time.DateTimeFieldType)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        $r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }
    public org.joda.time.DateTimeField[] getFields()
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DateTimeField[] $r1;
        int $i0, $i1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $r1 = newarray (org.joda.time.DateTimeField)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>($i0);

        $r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }
    public int[] getValues()
    {
        org.joda.time.base.AbstractPartial r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

        $r1 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i0);

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }
    public int hashCode()
    {
        org.joda.time.base.AbstractPartial r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $i0 = 157;

        $i1 = 0;

        $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label1:
        if $i1 >= $i2 goto label2;

        $i0 = $i0 * 23;

        $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i1);

        $i0 = $i0 + $i3;

        $i0 = $i0 * 23;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        $i3 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = $i1 + $i0;

        return $i1;
    }
    public int indexOf(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DateTimeFieldType $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = 0;

        $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label1:
        if $i0 >= $i1 goto label3;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        if $r2 != $r1 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }
    protected int indexOf(org.joda.time.DurationFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DurationFieldType $r1, $r3;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $i0 = 0;

        $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>();

     label1:
        if $i0 >= $i1 goto label3;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        if $r3 != $r1 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }
    protected int indexOfSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>($r1);

        if $i0 != -1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return $i0;
    }
    protected int indexOfSupported(org.joda.time.DurationFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DurationFieldType $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>($r1);

        if $i0 != -1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return $i0;
    }
    public boolean isAfter(org.joda.time.ReadablePartial)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>($r1);

        if $i0 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public boolean isBefore(org.joda.time.ReadablePartial)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>($r1);

        if $i0 >= 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public boolean isEqual(org.joda.time.ReadablePartial)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>($r1);

        if $i0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public boolean isSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>($r1);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.DateTime $r2;
        org.joda.time.Chronology $r3;
        long $l0;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        $l0 = virtualinvoke $r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, $l0);

        $r2 = new org.joda.time.DateTime;

        specialinvoke $r2.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r3);

        return $r2;
    }
    public java.lang.String toString(org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.base.AbstractPartial r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.base.AbstractPartial;

        $r1 := @parameter0: org.joda.time.format.DateTimeFormatter;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r2;
    }
