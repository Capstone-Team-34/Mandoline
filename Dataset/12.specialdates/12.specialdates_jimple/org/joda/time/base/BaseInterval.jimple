org.joda.time.base.BaseInterval extends org.joda.time.base.AbstractInterval implements java.io.Serializable org.joda.time.ReadableInterval
private static final long serialVersionUID
private volatile org.joda.time.Chronology iChronology
private volatile long iEndMillis
private volatile long iStartMillis
    protected void <init>(long, long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseInterval r0;
        long $l0, $l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseInterval;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r1;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l0, $l1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l1;

        return;
    }
    protected void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseInterval r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.convert.ConverterManager $r3;
        org.joda.time.convert.IntervalConverter $r4;
        boolean $z0;
        org.joda.time.ReadableInterval $r5;
        long $l0, $l1;
        org.joda.time.ReadWritableInterval $r6;
        org.joda.time.MutableInterval $r7;

        r0 := @this: org.joda.time.base.BaseInterval;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r4.<org.joda.time.convert.IntervalConverter: boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology)>($r1, $r2);

        if $z0 == 0 goto label4;

        $r5 = (org.joda.time.ReadableInterval) $r1;

        if $r2 == null goto label3;

     label1:
        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2;

        $l0 = interfaceinvoke $r5.<org.joda.time.ReadableInterval: long getStartMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $l0 = interfaceinvoke $r5.<org.joda.time.ReadableInterval: long getEndMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

     label2:
        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l1 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l0, $l1);

        return;

     label3:
        $r2 = interfaceinvoke $r5.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        goto label1;

     label4:
        $z0 = r0 instanceof org.joda.time.ReadWritableInterval;

        if $z0 == 0 goto label5;

        $r6 = (org.joda.time.ReadWritableInterval) r0;

        interfaceinvoke $r4.<org.joda.time.convert.IntervalConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>($r6, $r1, $r2);

        goto label2;

     label5:
        $r7 = new org.joda.time.MutableInterval;

        specialinvoke $r7.<org.joda.time.MutableInterval: void <init>()>();

        interfaceinvoke $r4.<org.joda.time.convert.IntervalConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>($r7, $r1, $r2);

        $r2 = virtualinvoke $r7.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2;

        $l0 = virtualinvoke $r7.<org.joda.time.MutableInterval: long getStartMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $l0 = virtualinvoke $r7.<org.joda.time.MutableInterval: long getEndMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        goto label2;
    }
    protected void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableDuration $r1;
        org.joda.time.ReadableInstant $r2;
        org.joda.time.Chronology $r3;
        long $l0, $l1;

        r0 := @this: org.joda.time.base.BaseInterval;

        $r1 := @parameter0: org.joda.time.ReadableDuration;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r2);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r2);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>($r1);

        $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        $l1 = neg $l1;

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l0, $l1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l1 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l0, $l1);

        return;
    }
    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.ReadableDuration $r2;
        org.joda.time.Chronology $r3;
        long $l0, $l1;

        r0 := @this: org.joda.time.base.BaseInterval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableDuration;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>($r2);

        $l1 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l0);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l1 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l0, $l1);

        return;
    }
    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableInstant $r1, $r2;
        long $l0, $l1;
        org.joda.time.chrono.ISOChronology $r3;
        org.joda.time.Chronology $r4;

        r0 := @this: org.joda.time.base.BaseInterval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        if $r1 != null goto label1;

        if $r2 != null goto label1;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        return;

     label1:
        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r4;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r2);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        $l1 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l1, $l0);

        return;
    }
    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.ReadablePeriod $r2;
        org.joda.time.Chronology $r3;
        long $l0, $l1;

        r0 := @this: org.joda.time.base.BaseInterval;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadablePeriod;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        if $r2 != null goto label2;

        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

     label1:
        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l1 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l0, $l1);

        return;

     label2:
        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l0 = virtualinvoke $r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r2, $l0, 1);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        goto label1;
    }
    protected void <init>(org.joda.time.ReadablePeriod, org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadablePeriod $r1;
        org.joda.time.ReadableInstant $r2;
        org.joda.time.Chronology $r3;
        long $l0, $l1;

        r0 := @this: org.joda.time.base.BaseInterval;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r2);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r2);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        if $r1 != null goto label2;

        $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

     label1:
        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l1 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l0, $l1);

        return;

     label2:
        $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        $l0 = virtualinvoke $r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>($r1, $l0, -1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        goto label1;
    }
    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.base.BaseInterval;

        r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology>;

        return r1;
    }
    public long getEndMillis()
    {
        org.joda.time.base.BaseInterval r0;
        long l0;

        r0 := @this: org.joda.time.base.BaseInterval;

        l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        return l0;
    }
    public long getStartMillis()
    {
        org.joda.time.base.BaseInterval r0;
        long l0;

        r0 := @this: org.joda.time.base.BaseInterval;

        l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        return l0;
    }
    protected void setInterval(long, long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseInterval r0;
        long $l0, $l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseInterval;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.Chronology;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l0, $l1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l1;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r1;

        return;
    }
