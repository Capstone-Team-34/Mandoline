org.joda.time.Partial extends org.joda.time.base.AbstractPartial implements java.io.Serializable org.joda.time.ReadablePartial
private static final long serialVersionUID
private final org.joda.time.Chronology iChronology
private transient org.joda.time.format.DateTimeFormatter[] iFormatter
private final org.joda.time.DateTimeFieldType[] iTypes
private final int[] iValues
    public void <init>()
    {
        org.joda.time.Partial r0;

        r0 := @this: org.joda.time.Partial;

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>(null);

        return;
    }
    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeFieldType[] $r2;
        int[] $r3;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        $r1 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r1;

        $r2 = newarray (org.joda.time.DateTimeFieldType)[0];

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r2;

        $r3 = newarray (int)[0];

        r0.<org.joda.time.Partial: int[] iValues> = $r3;

        return;
    }
    void <init>(org.joda.time.Chronology, org.joda.time.DateTimeFieldType[], int[])
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeFieldType[] $r2;
        int[] $r3;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType[];

        $r3 := @parameter2: int[];

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r1;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r2;

        r0.<org.joda.time.Partial: int[] iValues> = $r3;

        return;
    }
    public void <init>(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>($r1, $i0, null);

        return;
    }
    public void <init>(org.joda.time.DateTimeFieldType, int, org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType $r1;
        int $i0;
        org.joda.time.Chronology $r2;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.DateTimeFieldType[] $r4;
        int[] $r5;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r2 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r2;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null");

        throw $r3;

     label1:
        $r4 = newarray (org.joda.time.DateTimeFieldType)[1];

        $r4[0] = $r1;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r4;

        $r5 = newarray (int)[1];

        $r5[0] = $i0;

        r0.<org.joda.time.Partial: int[] iValues> = $r5;

        $r5 = r0.<org.joda.time.Partial: int[] iValues>;

        virtualinvoke $r2.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, $r5);

        return;
    }
    void <init>(org.joda.time.Partial, int[])
    {
        org.joda.time.Partial r0, $r1;
        int[] $r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeFieldType[] $r4;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.Partial;

        $r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r3 = $r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r3;

        $r4 = $r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r4;

        r0.<org.joda.time.Partial: int[] iValues> = $r2;

        return;
    }
    public void <init>(org.joda.time.ReadablePartial)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadablePartial $r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.Chronology $r3;
        int $i0, $i1;
        org.joda.time.DateTimeFieldType[] $r4;
        int[] $r5;
        org.joda.time.DateTimeFieldType $r6;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r2;

     label1:
        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r3);

        $r3 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r3;

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        $r4 = newarray (org.joda.time.DateTimeFieldType)[$i0];

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r4;

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        $r5 = newarray (int)[$i0];

        r0.<org.joda.time.Partial: int[] iValues> = $r5;

        $i0 = 0;

     label2:
        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        if $i0 >= $i1 goto label3;

        $r4 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r6 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i0);

        $r4[$i0] = $r6;

        $r5 = r0.<org.joda.time.Partial: int[] iValues>;

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int getValue(int)>($i0);

        $r5[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    public void <init>(org.joda.time.DateTimeFieldType[], int[])
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1;
        int[] $r2;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType[];

        $r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>($r1, $r2, null);

        return;
    }
    public void <init>(org.joda.time.DateTimeFieldType[], int[], org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1;
        int[] $r2;
        org.joda.time.Chronology $r3, $r10;
        org.joda.time.DateTimeFieldType $r4, $r12;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        org.joda.time.DurationField $r8, $r11, $r14;
        org.joda.time.DurationFieldType $r9, $r13;
        boolean $z0;
        java.lang.Object $r15;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType[];

        $r2 := @parameter1: int[];

        $r3 := @parameter2: org.joda.time.Chronology;

        $i0 = 0;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r3);

        $r3 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r3;

        if $r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Types array must not be null");

        throw $r5;

     label01:
        if $r2 != null goto label02;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Values array must not be null");

        throw $r5;

     label02:
        $i1 = lengthof $r2;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label03;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Values array must be the same length as the types array");

        throw $r5;

     label03:
        $i1 = lengthof $r1;

        if $i1 != 0 goto label04;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r1;

        r0.<org.joda.time.Partial: int[] iValues> = $r2;

        return;

     label04:
        $i1 = 0;

     label05:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label07;

        $r4 = $r1[$i1];

        if $r4 != null goto label06;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain null: index ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label06:
        $i1 = $i1 + 1;

        goto label05;

     label07:
        $r8 = null;

     label08:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label17;

        $r4 = $r1[$i0];

        $r9 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r10 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r11 = virtualinvoke $r9.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r10);

        if $i0 <= 0 goto label16;

        $z0 = virtualinvoke $r11.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label10;

        $z0 = virtualinvoke $r8.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 == 0 goto label09;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label09:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain duplicate unsupported: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label10:
        $i1 = virtualinvoke $r8.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r11);

        if $i1 >= 0 goto label11;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label11:
        if $i1 != 0 goto label16;

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label15;

        $i1 = $i0 + -1;

        $r12 = $r1[$i1];

        $r9 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r13 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r9 != null goto label12;

        if $r13 != null goto label16;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain duplicate: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label12:
        if $r13 != null goto label13;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label13:
        $r10 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r8 = virtualinvoke $r9.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r10);

        $r10 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r14 = virtualinvoke $r13.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r10);

        $i1 = virtualinvoke $r8.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r14);

        if $i1 >= 0 goto label14;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label14:
        $i1 = virtualinvoke $r8.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r14);

        if $i1 != 0 goto label16;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain duplicate: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label15:
        $z0 = virtualinvoke $r8.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 == 0 goto label16;

        $r9 = virtualinvoke $r8.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r13 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>;

        if $r9 == $r13 goto label16;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest, for year-based fields, years is defined as being largest: ");

        $i0 = $i0 + -1;

        $r12 = $r1[$i0];

        $r7 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r7 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label16:
        $i0 = $i0 + 1;

        $r8 = $r11;

        goto label08;

     label17:
        $r15 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.joda.time.DateTimeFieldType[]) $r15;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r1;

        virtualinvoke $r3.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, $r2);

        $r15 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (int[]) $r15;

        r0.<org.joda.time.Partial: int[] iValues> = $r2;

        return;
    }
    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.Partial;

        r1 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        return r1;
    }
    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        int $i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.DateTimeFieldType[] $r3;
        org.joda.time.DateTimeFieldType $r4;

        r0 := @this: org.joda.time.Partial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.joda.time.Chronology;

        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = $r3[$i0];

        $r2 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r1);

        return $r2;
    }
    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.Partial r0;
        int $i0;
        org.joda.time.DateTimeFieldType[] $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.Partial;

        $i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.Partial r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeFieldType[] $r2;

        r0 := @this: org.joda.time.Partial;

        $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.joda.time.DateTimeFieldType[]) $r1;

        return $r2;
    }
    public org.joda.time.format.DateTimeFormatter getFormatter()
    {
        org.joda.time.Partial r0;
        org.joda.time.format.DateTimeFormatter[] $r1;
        int $i0;
        java.util.ArrayList $r2;
        org.joda.time.DateTimeFieldType[] $r3;
        java.util.List $r4;
        org.joda.time.format.DateTimeFormatter $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if $r1 != null goto label7;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = newarray (org.joda.time.format.DateTimeFormatter)[2];

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

     label2:
        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>($r2, 1, 0);

     label3:
        $r1[0] = $r5;

     label4:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label5:
        if $i0 != 0 goto label6;

        $r5 = $r1[0];

        $r1[1] = $r5;

     label6:
        r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> = $r1;

     label7:
        $r5 = $r1[0];

        return $r5;

     label8:
        $r6 := @caughtexception;

        goto label6;

        catch java.lang.IllegalArgumentException from label2 to label3 with label8;
        catch java.lang.IllegalArgumentException from label4 to label5 with label8;
    }
    public int getValue(int)
    {
        org.joda.time.Partial r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.joda.time.Partial;

        $i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.Partial: int[] iValues>;

        $i0 = $r1[$i0];

        return $i0;
    }
    public int[] getValues()
    {
        org.joda.time.Partial r0;
        java.lang.Object $r1;
        int[] $r2;

        r0 := @this: org.joda.time.Partial;

        $r2 = r0.<org.joda.time.Partial: int[] iValues>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (int[]) $r1;

        return $r2;
    }
    public boolean isMatch(org.joda.time.ReadableInstant)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadableInstant $r1;
        long $l0;
        org.joda.time.Chronology $r2;
        int $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType[] $r3;
        org.joda.time.DateTimeFieldType $r4;
        org.joda.time.DateTimeField $r5;
        int[] $r6;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        $i1 = 0;

     label1:
        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i2 = lengthof $r3;

        if $i1 >= $i2 goto label3;

        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = $r3[$i1];

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $i2 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l0);

        $r6 = r0.<org.joda.time.Partial: int[] iValues>;

        $i3 = $r6[$i1];

        if $i2 == $i3 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }
    public boolean isMatch(org.joda.time.ReadablePartial)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.DateTimeFieldType[] $r3;
        org.joda.time.DateTimeFieldType $r4;
        int[] $r5;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r2;

     label1:
        $i1 = 0;

     label2:
        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i0 = lengthof $r3;

        if $i1 >= $i0 goto label4;

        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = $r3[$i1];

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r4);

        $r5 = r0.<org.joda.time.Partial: int[] iValues>;

        $i2 = $r5[$i1];

        if $i0 == $i2 goto label3;

        return 0;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return 1;
    }
    public org.joda.time.Partial minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, -1);

        return r0;
    }
    public org.joda.time.Partial plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, 1);

        return r0;
    }
    public org.joda.time.Partial$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.Partial$Property $r2;
        int $i0;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 = new org.joda.time.Partial$Property;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DateTimeFieldType)>($r1);

        specialinvoke $r2.<org.joda.time.Partial$Property: void <init>(org.joda.time.Partial,int)>(r0, $i0);

        return $r2;
    }
    public int size()
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1;
        int $i0;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.joda.time.Partial r0;
        org.joda.time.format.DateTimeFormatter[] $r1;
        java.lang.String $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>();

        $r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>();

        return $r2;

     label1:
        $r3 = $r1[1];

        if $r3 != null goto label2;

        $r2 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>();

        return $r2;

     label2:
        $r2 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r2;
    }
    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.Partial r0;
        java.lang.String $r1;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toString()>();

        return $r1;

     label1:
        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r1;
    }
    public java.lang.String toString(java.lang.String, java.util.Locale)
    {
        org.joda.time.Partial r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        r0 := @this: org.joda.time.Partial;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Locale;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toString()>();

        return $r1;

     label1:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>($r2);

        $r1 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r1;
    }
    public java.lang.String toStringList()
    {
        org.joda.time.Partial r0;
        java.lang.StringBuilder $r1, $r2;
        int $i0, $i1, $i2;
        org.joda.time.DateTimeFieldType[] $r3;
        org.joda.time.DateTimeFieldType $r4;
        java.lang.String $r5;
        int[] $r6;

        r0 := @this: org.joda.time.Partial;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        $r1 = new java.lang.StringBuilder;

        $i1 = $i0 * 20;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 <= 0 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = $r3[$i1];

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r6 = r0.<org.joda.time.Partial: int[] iValues>;

        $i2 = $r6[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
    public org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.DateTimeFieldType $r0, $r9;
        int $i0, $i1, $i2;
        int[] $r1, $r11;
        org.joda.time.Partial r2, $r12;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.DateTimeFieldType[] $r4, $r8;
        org.joda.time.DurationFieldType $r5;
        org.joda.time.Chronology $r6;
        org.joda.time.DurationField $r7, $r10, $r13;
        boolean $z0;
        org.joda.time.DateTimeField $r14;

        r2 := @this: org.joda.time.Partial;

        $r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null");

        throw $r3;

     label1:
        $i1 = virtualinvoke r2.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>($r0);

        if $i1 != -1 goto label7;

        $r4 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i1 = lengthof $r4;

        $i1 = $i1 + 1;

        $r4 = newarray (org.joda.time.DateTimeFieldType)[$i1];

        $i1 = lengthof $r4;

        $r1 = newarray (int)[$i1];

        $r5 = virtualinvoke $r0.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r6 = r2.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r7 = virtualinvoke $r5.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r6);

        $z0 = virtualinvoke $r7.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 == 0 goto label8;

        $i1 = 0;

     label2:
        $r8 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i2 = lengthof $r8;

        if $i1 >= $i2 goto label3;

        $r8 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r9 = $r8[$i1];

        $r5 = virtualinvoke $r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r6 = r2.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r10 = virtualinvoke $r5.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r6);

        $z0 = virtualinvoke $r10.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 == 0 goto label5;

        $i2 = virtualinvoke $r7.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r10);

        if $i2 <= 0 goto label4;

     label3:
        $r8 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r4, 0, $i1);

        $r11 = r2.<org.joda.time.Partial: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r1, 0, $i1);

        $r4[$i1] = $r0;

        $r1[$i1] = $i0;

        $r8 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i0 = $i1 + 1;

        $i2 = lengthof $r4;

        $i2 = $i2 - $i1;

        $i2 = $i2 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i1, $r4, $i0, $i2);

        $r11 = r2.<org.joda.time.Partial: int[] iValues>;

        $i0 = $i1 + 1;

        $i2 = lengthof $r1;

        $i2 = $i2 - $i1;

        $i2 = $i2 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i1, $r1, $i0, $i2);

        $r12 = new org.joda.time.Partial;

        $r6 = r2.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        specialinvoke $r12.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>($r4, $r1, $r6);

        $r6 = r2.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        virtualinvoke $r6.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r12, $r1);

        return $r12;

     label4:
        if $i2 != 0 goto label5;

        $r5 = virtualinvoke $r0.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r5 == null goto label3;

        $r5 = virtualinvoke $r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r5 != null goto label6;

     label5:
        $i1 = $i1 + 1;

        goto label2;

     label6:
        $r5 = virtualinvoke $r0.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r6 = r2.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r10 = virtualinvoke $r5.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r6);

        $r5 = virtualinvoke $r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r6 = r2.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        $r13 = virtualinvoke $r5.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r6);

        $i2 = virtualinvoke $r10.<org.joda.time.DurationField: int compareTo(java.lang.Object)>($r13);

        if $i2 <= 0 goto label5;

        goto label3;

     label7:
        $i2 = virtualinvoke r2.<org.joda.time.Partial: int getValue(int)>($i1);

        if $i0 == $i2 goto label9;

        $r1 = virtualinvoke r2.<org.joda.time.Partial: int[] getValues()>();

        $r14 = virtualinvoke r2.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i1);

        $r1 = virtualinvoke $r14.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r2, $i1, $r1, $i0);

        $r12 = new org.joda.time.Partial;

        specialinvoke $r12.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r2, $r1);

        return $r12;

     label8:
        $i1 = 0;

        goto label3;

     label9:
        return r2;
    }
    public org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0, $r3;
        int[] $r1;
        org.joda.time.Partial r2, $r4;
        org.joda.time.DateTimeFieldType[] $r5;

        r2 := @this: org.joda.time.Partial;

        $r0 := @parameter0: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r0);

        $r0 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r3 = virtualinvoke r2.<org.joda.time.Partial: org.joda.time.Chronology getChronology()>();

        if $r0 != $r3 goto label1;

        return r2;

     label1:
        $r4 = new org.joda.time.Partial;

        $r5 = r2.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r1 = r2.<org.joda.time.Partial: int[] iValues>;

        specialinvoke $r4.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r0, $r5, $r1);

        $r1 = r2.<org.joda.time.Partial: int[] iValues>;

        virtualinvoke $r0.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r4, $r1);

        return $r4;
    }
    public org.joda.time.Partial withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.DateTimeFieldType $r0;
        int $i0, $i1, $i2;
        org.joda.time.Partial r1, $r4;
        int[] $r2;
        org.joda.time.DateTimeField $r3;

        r1 := @this: org.joda.time.Partial;

        $r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DateTimeFieldType)>($r0);

        $i2 = virtualinvoke r1.<org.joda.time.Partial: int getValue(int)>($i1);

        if $i0 != $i2 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Partial: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i1);

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i1, $r2, $i0);

        $r4 = new org.joda.time.Partial;

        specialinvoke $r4.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r1, $r2);

        return $r4;
    }
    public org.joda.time.Partial withFieldAddWrapped(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationFieldType $r0;
        int $i0, $i1;
        org.joda.time.Partial r1, $r4;
        int[] $r2;
        org.joda.time.DateTimeField $r3;

        r1 := @this: org.joda.time.Partial;

        $r0 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DurationFieldType)>($r0);

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Partial: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i1);

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i1, $r2, $i0);

        $r4 = new org.joda.time.Partial;

        specialinvoke $r4.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r1, $r2);

        return $r4;
    }
    public org.joda.time.Partial withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationFieldType $r0;
        int $i0, $i1;
        org.joda.time.Partial r1, $r4;
        int[] $r2;
        org.joda.time.DateTimeField $r3;

        r1 := @this: org.joda.time.Partial;

        $r0 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DurationFieldType)>($r0);

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Partial: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i1);

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i1, $r2, $i0);

        $r4 = new org.joda.time.Partial;

        specialinvoke $r4.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r1, $r2);

        return $r4;
    }
    public org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.ReadablePeriod $r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Partial r1, $r5;
        int[] $r2;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.DateTimeField $r4;

        r1 := @this: org.joda.time.Partial;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 := @parameter1: int;

        if $r0 == null goto label5;

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Partial: int[] getValues()>();

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int size()>();

        if $i1 >= $i2 goto label4;

        $r3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i1);

        $i2 = virtualinvoke r1.<org.joda.time.Partial: int indexOf(org.joda.time.DurationFieldType)>($r3);

        if $i2 < 0 goto label3;

        $r4 = virtualinvoke r1.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>($i2);

        $i3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int getValue(int)>($i1);

        $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, $i0);

        $r2 = virtualinvoke $r4.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i2, $r2, $i3);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r5 = new org.joda.time.Partial;

        specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r1, $r2);

        return $r5;

     label5:
        return r1;
    }
    public org.joda.time.Partial without(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeFieldType $r0;
        org.joda.time.Partial r1, $r6;
        int $i0, $i1, $i2;
        org.joda.time.DateTimeFieldType[] $r2, $r4;
        int[] $r3, $r5;
        org.joda.time.Chronology $r7;

        r1 := @this: org.joda.time.Partial;

        $r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 = virtualinvoke r1.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>($r0);

        if $i0 == -1 goto label1;

        $i1 = virtualinvoke r1.<org.joda.time.Partial: int size()>();

        $i1 = $i1 + -1;

        $r2 = newarray (org.joda.time.DateTimeFieldType)[$i1];

        $i1 = virtualinvoke r1.<org.joda.time.Partial: int size()>();

        $i1 = $i1 + -1;

        $r3 = newarray (int)[$i1];

        $r4 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, 0, $i0);

        $r4 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i1 = $i0 + 1;

        $i2 = lengthof $r2;

        $i2 = $i2 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i1, $r2, $i0, $i2);

        $r5 = r1.<org.joda.time.Partial: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r3, 0, $i0);

        $r5 = r1.<org.joda.time.Partial: int[] iValues>;

        $i1 = $i0 + 1;

        $i2 = lengthof $r3;

        $i2 = $i2 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i1, $r3, $i0, $i2);

        $r6 = new org.joda.time.Partial;

        $r7 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        specialinvoke $r6.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r7, $r2, $r3);

        $r7 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        virtualinvoke $r7.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r6, $r3);

        return $r6;

     label1:
        return r1;
    }
