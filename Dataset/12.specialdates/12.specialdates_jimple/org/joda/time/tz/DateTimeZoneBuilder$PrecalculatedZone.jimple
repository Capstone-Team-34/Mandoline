org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone extends org.joda.time.DateTimeZone
private static final long serialVersionUID
private final java.lang.String[] iNameKeys
private final int[] iStandardOffsets
private final org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone
private final long[] iTransitions
private final int[] iWallOffsets
    private void <init>(java.lang.String, long[], int[], int[], java.lang.String[], org.joda.time.tz.DateTimeZoneBuilder$DSTZone)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        java.lang.String $r1;
        long[] $r2;
        int[] $r3, $r4;
        java.lang.String[] $r5;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: long[];

        $r3 := @parameter2: int[];

        $r4 := @parameter3: int[];

        $r5 := @parameter4: java.lang.String[];

        $r6 := @parameter5: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>($r1);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> = $r2;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> = $r3;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> = $r4;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> = $r5;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> = $r6;

        return;
    }
    static org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String, boolean, java.util.ArrayList, org.joda.time.tz.DateTimeZoneBuilder$DSTZone)
    {
        java.lang.String $r0, $r7, $r8, $r21;
        boolean $z0, $z1;
        java.util.ArrayList $r1;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r26;
        long[] $r3;
        int[] $r4, $r5;
        java.lang.String[] $r6, $r13, $r17;
        int $i0, $i1, $i3;
        java.lang.IllegalArgumentException $r9;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r10, $r12;
        java.lang.Object $r11;
        long $l2, $l4, $l5, $l6, $l7, $l8;
        java.text.DateFormatSymbols $r14;
        java.util.Locale $r15;
        java.lang.String[][] $r16;
        org.joda.time.chrono.ISOChronology $r18;
        org.joda.time.Period $r19;
        org.joda.time.PeriodType $r20;
        byte $b9;
        java.io.PrintStream $r22;
        java.lang.StringBuilder $r23;
        org.joda.time.DateTime $r24;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r25, $r27;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r28;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.util.ArrayList;

        $r2 := @parameter3: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label01:
        $r3 = newarray (long)[$i0];

        $r4 = newarray (int)[$i0];

        $r5 = newarray (int)[$i0];

        $r6 = newarray (java.lang.String)[$i0];

        $r10 = null;

        $i1 = 0;

     label02:
        if $i1 >= $i0 goto label04;

        $r11 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r12 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r11;

        $z1 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>($r10);

        if $z1 != 0 goto label03;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r9;

     label03:
        $l2 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $r3[$i1] = $l2;

        $i3 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

        $r4[$i1] = $i3;

        $i3 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>();

        $r5[$i1] = $i3;

        $r7 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        $r6[$i1] = $r7;

        $i1 = $i1 + 1;

        $r10 = $r12;

        goto label02;

     label04:
        $r14 = new java.text.DateFormatSymbols;

        $r15 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r14.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r15);

        $r16 = virtualinvoke $r14.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>();

        $i0 = 0;

        $r13 = newarray (java.lang.String)[5];

     label05:
        $i1 = lengthof $r16;

        if $i0 >= $i1 goto label07;

        $r17 = $r16[$i0];

        if $r17 == null goto label19;

        $i1 = lengthof $r17;

        if $i1 != 5 goto label19;

        $r7 = $r17[0];

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label19;

     label06:
        $i0 = $i0 + 1;

        $r13 = $r17;

        goto label05;

     label07:
        $r18 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $i0 = 0;

     label08:
        $i1 = lengthof $r6;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label12;

        $r7 = $r6[$i0];

        $i1 = $i0 + 1;

        $r8 = $r6[$i1];

        $i1 = $r4[$i0];

        $l2 = (long) $i1;

        $i1 = $i0 + 1;

        $i1 = $r4[$i1];

        $l4 = (long) $i1;

        $i1 = $r5[$i0];

        $l5 = (long) $i1;

        $i1 = $i0 + 1;

        $i1 = $r5[$i1];

        $l6 = (long) $i1;

        $r19 = new org.joda.time.Period;

        $l7 = $r3[$i0];

        $i1 = $i0 + 1;

        $l8 = $r3[$i1];

        $r20 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>();

        specialinvoke $r19.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l7, $l8, $r20, $r18);

        $b9 = $l2 cmp $l4;

        if $b9 == 0 goto label10;

        $b9 = $l5 cmp $l6;

        if $b9 != 0 goto label10;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label10;

        $i1 = virtualinvoke $r19.<org.joda.time.Period: int getYears()>();

        if $i1 != 0 goto label10;

        $i1 = virtualinvoke $r19.<org.joda.time.Period: int getMonths()>();

        if $i1 <= 4 goto label10;

        $i1 = virtualinvoke $r19.<org.joda.time.Period: int getMonths()>();

        if $i1 >= 8 goto label10;

        $r21 = $r13[2];

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z1 == 0 goto label10;

        $r21 = $r13[4];

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z1 == 0 goto label10;

        $z1 = staticinvoke <org.joda.time.tz.ZoneInfoLogger: boolean verbose()>();

        if $z1 == 0 goto label09;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixing duplicate name key - ");

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     - ");

        $r24 = new org.joda.time.DateTime;

        $l5 = $r3[$i0];

        specialinvoke $r24.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l5, $r18);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r24 = new org.joda.time.DateTime;

        $i1 = $i0 + 1;

        $l5 = $r3[$i1];

        specialinvoke $r24.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l5, $r18);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label09:
        $b9 = $l2 cmp $l4;

        if $b9 <= 0 goto label11;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Summer");

        $r7 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>();

        $r6[$i0] = $r7;

     label10:
        $i0 = $i0 + 1;

        goto label08;

     label11:
        $b9 = $l2 cmp $l4;

        if $b9 >= 0 goto label10;

        $i1 = $i0 + 1;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Summer");

        $r7 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>();

        $r6[$i1] = $r7;

        $i0 = $i0 + 1;

        goto label10;

     label12:
        if $r2 == null goto label18;

        $r25 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r7 = virtualinvoke $r25.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $r25 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r8 = virtualinvoke $r25.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label18;

        $z1 = staticinvoke <org.joda.time.tz.ZoneInfoLogger: boolean verbose()>();

        if $z1 == 0 goto label13;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixing duplicate recurrent name key - ");

        $r25 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r7 = virtualinvoke $r25.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label13:
        $r25 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $i0 = virtualinvoke $r25.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        if $i0 <= 0 goto label16;

        $r26 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r7 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $i0 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r25 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r25 = virtualinvoke $r25.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>("-Summer");

        $r27 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        specialinvoke $r26.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r7, $i0, $r25, $r27);

     label14:
        $r28 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        if $z0 == 0 goto label17;

     label15:
        specialinvoke $r28.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r0, $r3, $r4, $r5, $r6, $r26);

        return $r28;

     label16:
        $r26 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r7 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $i0 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r25 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r27 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r27 = virtualinvoke $r27.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>("-Summer");

        specialinvoke $r26.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r7, $i0, $r25, $r27);

        goto label14;

     label17:
        $r0 = "";

        goto label15;

     label18:
        $r26 = $r2;

        goto label14;

     label19:
        $r17 = $r13;

        goto label06;
    }
    static org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput, java.lang.String)
    {
        java.io.DataInput $r0;
        java.lang.String $r1, $r6;
        int[] $r2, $r3;
        java.lang.String[] $r4, $r5;
        int $i0, $i1, $i2, $i4;
        long[] $r7;
        long $l3;
        java.lang.ArrayIndexOutOfBoundsException $r8;
        java.io.IOException $r9;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r10;
        boolean $z0;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r11;

        $r0 := @parameter0: java.io.DataInput;

        $r1 := @parameter1: java.lang.String;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedShort()>();

        $r5 = newarray (java.lang.String)[$i0];

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label02;

        $r6 = interfaceinvoke $r0.<java.io.DataInput: java.lang.String readUTF()>();

        $r5[$i1] = $r6;

        $i1 = $i1 + 1;

        goto label01;

     label02:
        $i1 = interfaceinvoke $r0.<java.io.DataInput: int readInt()>();

        $r7 = newarray (long)[$i1];

        $r2 = newarray (int)[$i1];

        $r3 = newarray (int)[$i1];

        $r4 = newarray (java.lang.String)[$i1];

        $i2 = 0;

     label03:
        if $i2 >= $i1 goto label10;

        $l3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>($r0);

        $r7[$i2] = $l3;

        $l3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>($r0);

        $i4 = (int) $l3;

        $r2[$i2] = $i4;

        $l3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>($r0);

        $i4 = (int) $l3;

        $r3[$i2] = $i4;

        if $i0 >= 256 goto label07;

     label04:
        $i4 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

     label05:
        $r6 = $r5[$i4];

        $r4[$i2] = $r6;

     label06:
        $i2 = $i2 + 1;

        goto label03;

     label07:
        $i4 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedShort()>();

     label08:
        goto label05;

     label09:
        $r8 := @caughtexception;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding");

        throw $r9;

     label10:
        $r10 = null;

        $z0 = interfaceinvoke $r0.<java.io.DataInput: boolean readBoolean()>();

        if $z0 == 0 goto label11;

        $r10 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>($r0, $r1);

     label11:
        $r11 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r1, $r7, $r2, $r3, $r4, $r10);

        return $r11;

        catch java.lang.ArrayIndexOutOfBoundsException from label04 to label05 with label09;
        catch java.lang.ArrayIndexOutOfBoundsException from label05 to label06 with label09;
        catch java.lang.ArrayIndexOutOfBoundsException from label07 to label08 with label09;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r3, $r4;
        long[] $r5, $r6;
        java.lang.String[] $r7, $r8;
        int[] $r9, $r10;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r11, $r12;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        if $z0 == 0 goto label4;

        $r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) $r1;

        $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>();

        $r4 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $r6 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6);

        if $z0 == 0 goto label2;

        $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r8 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8);

        if $z0 == 0 goto label2;

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $r10 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10);

        if $z0 == 0 goto label2;

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $r10 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10);

        if $z0 == 0 goto label2;

        $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r11 != null goto label3;

        $r11 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r11 == null goto label5;

     label2:
        return 0;

     label3:
        $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $r12 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $z0 = virtualinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label2;

        return 1;

     label4:
        return 0;

     label5:
        return 1;
    }
    public java.lang.String getNameKey(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long $l0;
        long[] $r1;
        int $i1, $i2;
        java.lang.String[] $r2;
        java.lang.String $r3;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r1, $l0);

        if $i1 < 0 goto label1;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r3 = $r2[$i1];

        return $r3;

     label1:
        $i1 = $i1 ^ -1;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        if $i1 <= 0 goto label2;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $i1 = $i1 + -1;

        $r3 = $r2[$i1];

        return $r3;

     label2:
        return "UTC";

     label3:
        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r4 != null goto label4;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $i1 = $i1 + -1;

        $r3 = $r2[$i1];

        return $r3;

     label4:
        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $r3 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>($l0);

        return $r3;
    }
    public int getOffset(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long $l0;
        long[] $r1;
        int $i1, $i2;
        int[] $r2;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r3;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r1, $l0);

        if $i1 < 0 goto label1;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i1 = $r2[$i1];

        return $i1;

     label1:
        $i1 = $i1 ^ -1;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        if $i1 <= 0 goto label2;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i1 = $i1 + -1;

        $i1 = $r2[$i1];

        return $i1;

     label2:
        return 0;

     label3:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r3 != null goto label4;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i1 = $i1 + -1;

        $i1 = $r2[$i1];

        return $i1;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $i1 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>($l0);

        return $i1;
    }
    public int getStandardOffset(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long $l0;
        long[] $r1;
        int $i1, $i2;
        int[] $r2;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r3;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r1, $l0);

        if $i1 < 0 goto label1;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i1 = $r2[$i1];

        return $i1;

     label1:
        $i1 = $i1 ^ -1;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        if $i1 <= 0 goto label2;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i1 = $i1 + -1;

        $i1 = $r2[$i1];

        return $i1;

     label2:
        return 0;

     label3:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r3 != null goto label4;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i1 = $i1 + -1;

        $i1 = $r2[$i1];

        return $i1;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $i1 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>($l0);

        return $i1;
    }
    public boolean isCachable()
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r1;
        long[] $r2;
        int $i0, $i1, $i2;
        double $d0, $d1;
        long $l3, $l4;
        byte $b5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r1 == null goto label1;

        return 1;

     label1:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i0 = lengthof $r2;

        if $i0 > 1 goto label2;

        return 0;

     label2:
        $d0 = 0.0;

        $i0 = 1;

        $i1 = 0;

     label3:
        $i2 = lengthof $r2;

        if $i0 >= $i2 goto label5;

        $l3 = $r2[$i0];

        $i2 = $i0 + -1;

        $l4 = $r2[$i2];

        $l3 = $l3 - $l4;

        $b5 = $l3 cmp 63158400000L;

        if $b5 >= 0 goto label4;

        $d1 = (double) $l3;

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        if $i1 <= 0 goto label6;

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        $d0 = $d0 / 8.64E7;

        $b5 = $d0 cmpl 25.0;

        if $b5 >= 0 goto label7;

     label6:
        return 0;

     label7:
        return 1;
    }
    public boolean isFixed()
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        return 0;
    }
    public long nextTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long[] $r1;
        long $l0, $l3;
        int $i1, $i2;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2;
        byte $b4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r1, $l0);

        if $i1 < 0 goto label2;

        $i1 = $i1 + 1;

     label1:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $l0 = $r1[$i1];

        return $l0;

     label2:
        $i1 = $i1 ^ -1;

        goto label1;

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 == null goto label5;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        $l3 = $r1[$i1];

        $b4 = $l0 cmp $l3;

        if $b4 >= 0 goto label4;

        $l0 = $l3;

     label4:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $l0 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>($l0);

     label5:
        return $l0;
    }
    public long previousTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        int $i0, $i3;
        byte $b1;
        long $l2, $l4;
        long[] $r1;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $l2 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r1, $l2);

        if $i0 < 0 goto label1;

        $b1 = $l2 cmp -9223372036854775808L;

        if $b1 <= 0 goto label4;

        $l2 = $l2 - 1L;

        return $l2;

     label1:
        $i0 = $i0 ^ -1;

        $i3 = lengthof $r1;

        if $i0 >= $i3 goto label2;

        if $i0 <= 0 goto label4;

        $i0 = $i0 + -1;

        $l4 = $r1[$i0];

        $b1 = $l4 cmp -9223372036854775808L;

        if $b1 <= 0 goto label4;

        $l2 = $l4 - 1L;

        return $l2;

     label2:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 == null goto label3;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $l4 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>($l2);

        $b1 = $l4 cmp $l2;

        if $b1 >= 0 goto label3;

        return $l4;

     label3:
        $i0 = $i0 + -1;

        $l4 = $r1[$i0];

        $b1 = $l4 cmp -9223372036854775808L;

        if $b1 <= 0 goto label4;

        $l2 = $l4 - 1L;

     label4:
        return $l2;
    }
    public void writeTo(java.io.DataOutput)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        java.io.DataOutput $r1;
        int $i0, $i1, $i2, $i4;
        java.lang.String[] $r2, $r10;
        boolean $z0, $z1;
        long[] $r3;
        java.util.HashSet $r4;
        java.lang.String $r5, $r11;
        java.lang.UnsupportedOperationException $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        long $l3;
        int[] $r9;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r12;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $r1 := @parameter0: java.io.DataOutput;

        $z0 = 0;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i0 = lengthof $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label02;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r5 = $r2[$i1];

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 1;

        goto label01;

     label02:
        $i1 = interfaceinvoke $r4.<java.util.Set: int size()>();

        if $i1 <= 65535 goto label03;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("String pool is too large");

        throw $r6;

     label03:
        $r2 = newarray (java.lang.String)[$i1];

        $r7 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        $i2 = 0;

     label04:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r8;

        $r2[$i2] = $r5;

        $i2 = $i2 + 1;

        goto label04;

     label05:
        interfaceinvoke $r1.<java.io.DataOutput: void writeShort(int)>($i1);

        $i2 = 0;

     label06:
        if $i2 >= $i1 goto label07;

        $r5 = $r2[$i2];

        interfaceinvoke $r1.<java.io.DataOutput: void writeUTF(java.lang.String)>($r5);

        $i2 = $i2 + 1;

        goto label06;

     label07:
        interfaceinvoke $r1.<java.io.DataOutput: void writeInt(int)>($i0);

        $i2 = 0;

     label08:
        if $i2 >= $i0 goto label13;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $l3 = $r3[$i2];

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>($r1, $l3);

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i4 = $r9[$i2];

        $l3 = (long) $i4;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>($r1, $l3);

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i4 = $r9[$i2];

        $l3 = (long) $i4;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>($r1, $l3);

        $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r5 = $r10[$i2];

        $i4 = 0;

     label09:
        if $i4 >= $i1 goto label10;

        $r11 = $r2[$i4];

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label12;

        if $i1 >= 256 goto label11;

        interfaceinvoke $r1.<java.io.DataOutput: void writeByte(int)>($i4);

     label10:
        $i2 = $i2 + 1;

        goto label08;

     label11:
        interfaceinvoke $r1.<java.io.DataOutput: void writeShort(int)>($i4);

        goto label10;

     label12:
        $i4 = $i4 + 1;

        goto label09;

     label13:
        $r12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r12 == null goto label14;

        $z0 = 1;

     label14:
        interfaceinvoke $r1.<java.io.DataOutput: void writeBoolean(boolean)>($z0);

        $r12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r12 == null goto label15;

        $r12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>($r1);

     label15:
        return;
    }
