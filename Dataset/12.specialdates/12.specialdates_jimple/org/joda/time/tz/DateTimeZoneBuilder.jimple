org.joda.time.tz.DateTimeZoneBuilder extends java.lang.Object
private final java.util.ArrayList iRuleSets
    public void <init>()
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(10);

        r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> = $r1;

        return;
    }
    private boolean addTransition(java.util.ArrayList, org.joda.time.tz.DateTimeZoneBuilder$Transition)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.util.ArrayList $r1;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r2, $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        boolean $z0;
        long $l3, $l4, $l5;
        byte $b6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 := @parameter0: java.util.ArrayList;

        $r2 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i0 = 0;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i1 != 0 goto label1;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return 1;

     label1:
        $i2 = $i1 + -1;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r4 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r3;

        $z0 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>($r4);

        if $z0 == 0 goto label4;

        if $i1 < 2 goto label2;

        $i0 = $i1 + -2;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r3;

        $i0 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

     label2:
        $i2 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

        $l3 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $l4 = (long) $i0;

        $l3 = $l4 + $l3;

        $l4 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $l5 = (long) $i2;

        $l4 = $l5 + $l4;

        $b6 = $l4 cmp $l3;

        if $b6 == 0 goto label3;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return 1;

     label3:
        $i1 = $i1 + -1;

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        $z0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>($r1, $r2);

        return $z0;

     label4:
        return 0;
    }
    private static org.joda.time.DateTimeZone buildFixedZone(java.lang.String, java.lang.String, int, int)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0, $i1;
        boolean $z0;
        org.joda.time.tz.FixedDateTimeZone $r3;
        org.joda.time.DateTimeZone r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = "UTC";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        if $i0 != 0 goto label1;

        if $i1 != 0 goto label1;

        r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return r4;

     label1:
        $r3 = new org.joda.time.tz.FixedDateTimeZone;

        specialinvoke $r3.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>($r0, $r1, $i0, $i1);

        return $r3;
    }
    private org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.util.ArrayList $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(-2147483648, 119, 1, 1, 0, 0, 0);

     label1:
        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i0 = $i0 + -1;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r3;

        return $r4;
    }
    public static org.joda.time.DateTimeZone readFrom(java.io.DataInput, java.lang.String)
    {
        java.io.DataInput $r0;
        java.lang.String $r1, $r4;
        int $i0, $i2;
        java.io.IOException $r2;
        org.joda.time.tz.FixedDateTimeZone $r3;
        long $l1;
        org.joda.time.DateTimeZone $r5;
        boolean $z0;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r6;
        org.joda.time.tz.CachedDateTimeZone $r7;

        $r0 := @parameter0: java.io.DataInput;

        $r1 := @parameter1: java.lang.String;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        lookupswitch($i0)
        {
            case 67: goto label3;
            case 70: goto label2;
            case 80: goto label4;
            default: goto label1;
        };

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding");

        throw $r2;

     label2:
        $r3 = new org.joda.time.tz.FixedDateTimeZone;

        $r4 = interfaceinvoke $r0.<java.io.DataInput: java.lang.String readUTF()>();

        $l1 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>($r0);

        $i2 = (int) $l1;

        $l1 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>($r0);

        $i0 = (int) $l1;

        specialinvoke $r3.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>($r1, $r4, $i2, $i0);

        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r5;

     label3:
        $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>($r0, $r1);

        $r7 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>($r6);

        return $r7;

     label4:
        $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>($r0, $r1);

        return $r6;

     label5:
        return $r3;
    }
    public static org.joda.time.DateTimeZone readFrom(java.io.InputStream, java.lang.String)
    {
        java.lang.String $r0;
        java.io.InputStream $r1;
        boolean $z0;
        java.io.DataInput $r2;
        org.joda.time.DateTimeZone $r3;
        java.io.DataInputStream $r4;

        $r1 := @parameter0: java.io.InputStream;

        $r0 := @parameter1: java.lang.String;

        $z0 = $r1 instanceof java.io.DataInput;

        if $z0 == 0 goto label1;

        $r2 = (java.io.DataInput) $r1;

        $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r2, $r0);

        return $r3;

     label1:
        $r4 = new java.io.DataInputStream;

        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r4, $r0);

        return $r3;
    }
    static long readMillis(java.io.DataInput)
    {
        java.io.DataInput $r0;
        int $i0, $i1;
        long $l2, $l3;

        $r0 := @parameter0: java.io.DataInput;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = $i0 >> 6;

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $i0 = $i0 << 26;

        $i0 = $i0 >> 26;

        $l2 = (long) $i0;

        $l2 = $l2 * 1800000L;

        return $l2;

     label2:
        $i0 = $i0 << 26;

        $i0 = $i0 >> 2;

        $i1 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = $i1 << 16;

        $i0 = $i0 | $i1;

        $i1 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = $i1 << 8;

        $i0 = $i0 | $i1;

        $i1 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = $i0 | $i1;

        $l2 = (long) $i0;

        $l2 = $l2 * 60000L;

        return $l2;

     label3:
        $l2 = (long) $i0;

        $l2 = $l2 << 58;

        $l2 = $l2 >> 26;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = $i0 << 24;

        $l3 = (long) $i0;

        $l2 = $l2 | $l3;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = $i0 << 16;

        $l3 = (long) $i0;

        $l2 = $l2 | $l3;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = $i0 << 8;

        $l3 = (long) $i0;

        $l2 = $l2 | $l3;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $l3 = (long) $i0;

        $l2 = $l2 | $l3;

        $l2 = $l2 * 1000L;

        return $l2;

     label4:
        $l2 = interfaceinvoke $r0.<java.io.DataInput: long readLong()>();

        return $l2;
    }
    static void writeMillis(java.io.DataOutput, long)
    {
        java.io.DataOutput $r0;
        long $l0, $l1, $l3;
        byte $b2;
        int $i4;
        short $s5;

        $r0 := @parameter0: java.io.DataOutput;

        $l0 := @parameter1: long;

        $l1 = $l0 % 1800000L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $l1 = $l0 / 1800000L;

        $l3 = $l1 << 58;

        $l3 = $l3 >> 58;

        $b2 = $l3 cmp $l1;

        if $b2 != 0 goto label1;

        $l0 = $l1 & 63L;

        $i4 = (int) $l0;

        interfaceinvoke $r0.<java.io.DataOutput: void writeByte(int)>($i4);

        return;

     label1:
        $l1 = $l0 % 60000L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        $l1 = $l0 / 60000L;

        $l3 = $l1 << 34;

        $l3 = $l3 >> 34;

        $b2 = $l3 cmp $l1;

        if $b2 != 0 goto label2;

        $l0 = $l1 & 1073741823L;

        $i4 = (int) $l0;

        $i4 = $i4 | 1073741824;

        interfaceinvoke $r0.<java.io.DataOutput: void writeInt(int)>($i4);

        return;

     label2:
        $l1 = $l0 % 1000L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label3;

        $l1 = $l0 / 1000L;

        $l3 = $l1 << 26;

        $l3 = $l3 >> 26;

        $b2 = $l3 cmp $l1;

        if $b2 != 0 goto label3;

        $l0 = $l1 >> 32;

        $l0 = $l0 & 63L;

        $i4 = (int) $l0;

        $i4 = $i4 | 128;

        interfaceinvoke $r0.<java.io.DataOutput: void writeByte(int)>($i4);

        $l0 = $l1 & -1L;

        $i4 = (int) $l0;

        interfaceinvoke $r0.<java.io.DataOutput: void writeInt(int)>($i4);

        return;

     label3:
        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label5;

        $s5 = 255;

     label4:
        interfaceinvoke $r0.<java.io.DataOutput: void writeByte(int)>($s5);

        interfaceinvoke $r0.<java.io.DataOutput: void writeLong(long)>($l0);

        return;

     label5:
        $s5 = 192;

        goto label4;
    }
    public org.joda.time.tz.DateTimeZoneBuilder addCutover(int, char, int, int, int, boolean, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        int $i0, $i2, $i3, $i4, $i5, $i6;
        char $c1;
        boolean $z0;
        java.util.ArrayList $r1, $r3;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r2;
        java.lang.Object $r4;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $i0 := @parameter0: int;

        $c1 := @parameter1: char;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $z0 := @parameter5: boolean;

        $i5 := @parameter6: int;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i6 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i6 <= 0 goto label1;

        $r2 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        specialinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>($c1, $i2, $i3, $i4, $z0, $i5);

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i2 = $i2 + -1;

        $r4 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r4;

        virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>($i0, $r2);

     label1:
        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r5 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        return r0;
    }
    public org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String, int, int, int, char, int, int, int, boolean, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7;
        char $c3;
        boolean $z0;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r2;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r3;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r4;
        org.joda.time.tz.DateTimeZoneBuilder$Rule $r5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $c3 := @parameter4: char;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 := @parameter7: int;

        $z0 := @parameter8: boolean;

        $i7 := @parameter9: int;

        if $i1 > $i2 goto label1;

        $r3 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        specialinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>($c3, $i4, $i5, $i6, $z0, $i7);

        $r4 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        specialinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>($r3, $r1, $i0);

        $r5 = new org.joda.time.tz.DateTimeZoneBuilder$Rule;

        specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>($r4, $i1, $i2);

        $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>();

        virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>($r5);

     label1:
        return r0;
    }
    public org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String $r1;
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>();

        virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>();

        virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>($i0);

        return r0;
    }
    public org.joda.time.DateTimeZone toDateTimeZone(java.lang.String, boolean)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String $r1, $r11;
        boolean $z0, $z1;
        java.util.ArrayList $r2, $r6;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet $r3, $r8;
        java.lang.IllegalArgumentException $r4;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r5;
        long $l0;
        int $i1, $i2, $i3, $i4;
        java.lang.Object $r7;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r9;
        org.joda.time.DateTimeZone $r10;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r12;
        org.joda.time.tz.CachedDateTimeZone $r13;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $r1 != null goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label01:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r5 = null;

        $l0 = -9223372036854775808L;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i2 = 0;

     label02:
        if $i2 >= $i1 goto label08;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r8 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r7;

        $r9 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>($l0);

        if $r9 != null goto label04;

     label03:
        $i2 = $i2 + 1;

        goto label02;

     label04:
        specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>($r2, $r9);

        $l0 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $i3 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>();

        $r3 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>($r8);

     label05:
        $r9 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>($l0, $i3);

        if $r9 == null goto label06;

        $z1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>($r2, $r9);

        if $z1 == 0 goto label07;

        if $r5 == null goto label07;

     label06:
        $l0 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>($i3);

        goto label03;

     label07:
        $l0 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $i3 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>();

        if $r5 != null goto label05;

        $i4 = $i1 + -1;

        if $i2 != $i4 goto label05;

        $r5 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>($r1);

        goto label05;

     label08:
        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 != 0 goto label10;

        if $r5 == null goto label09;

        return $r5;

     label09:
        $r10 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>($r1, "UTC", 0, 0);

        return $r10;

     label10:
        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 != 1 goto label11;

        if $r5 != null goto label11;

        $r7 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r9 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r7;

        $r11 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        $i1 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

        $i2 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>();

        $r10 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>($r1, $r11, $i1, $i2);

        return $r10;

     label11:
        $r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r1, $z0, $r2, $r5);

        $z0 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>();

        if $z0 == 0 goto label12;

        $r13 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>($r12);

        return $r13;

     label12:
        return $r12;
    }
    public void writeTo(java.lang.String, java.io.DataOutput)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String $r1;
        java.io.DataOutput $r2;
        long $l0;
        org.joda.time.DateTimeZone $r3, $r4;
        boolean $z0;
        int $i1;
        org.joda.time.tz.CachedDateTimeZone $r5;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.DataOutput;

        $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>($r1, 0);

        $r4 = $r3;

        $z0 = $r3 instanceof org.joda.time.tz.FixedDateTimeZone;

        if $z0 == 0 goto label1;

        interfaceinvoke $r2.<java.io.DataOutput: void writeByte(int)>(70);

        $r1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(0L);

        interfaceinvoke $r2.<java.io.DataOutput: void writeUTF(java.lang.String)>($r1);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getOffset(long)>(0L);

        $l0 = (long) $i1;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>($r2, $l0);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getStandardOffset(long)>(0L);

        $l0 = (long) $i1;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>($r2, $l0);

        return;

     label1:
        $z0 = $r3 instanceof org.joda.time.tz.CachedDateTimeZone;

        if $z0 == 0 goto label3;

        interfaceinvoke $r2.<java.io.DataOutput: void writeByte(int)>(67);

        $r5 = (org.joda.time.tz.CachedDateTimeZone) $r3;

        $r4 = virtualinvoke $r5.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>();

     label2:
        $r6 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) $r4;

        virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>($r2);

        return;

     label3:
        interfaceinvoke $r2.<java.io.DataOutput: void writeByte(int)>(80);

        goto label2;
    }
    public void writeTo(java.lang.String, java.io.OutputStream)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String $r1;
        java.io.OutputStream $r2;
        boolean $z0;
        java.io.DataOutput $r3;
        java.io.DataOutputStream $r4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.OutputStream;

        $z0 = $r2 instanceof java.io.DataOutput;

        if $z0 == 0 goto label1;

        $r3 = (java.io.DataOutput) $r2;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>($r1, $r3);

        return;

     label1:
        $r4 = new java.io.DataOutputStream;

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r2);

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>($r1, $r4);

        return;
    }
