org.joda.time.tz.DateTimeZoneBuilder$Rule extends java.lang.Object
final int iFromYear
final org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence
final int iToYear
    void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> = $r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear> = $i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear> = $i1;

        return;
    }
    public int getFromYear()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        int i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        return i0;
    }
    public java.lang.String getNameKey()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        java.lang.String $r1;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r1 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        return $r1;
    }
    public org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r1;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r1 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()>();

        return $r1;
    }
    public int getSaveMillis()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $i0 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        return $i0;
    }
    public int getToYear()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        int i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>;

        return i0;
    }
    public long next(long, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        int $i0, $i1, $i3, $i5, $i6;
        long $l2, $l7, $l8;
        org.joda.time.chrono.ISOChronology $r1;
        byte $b4;
        org.joda.time.DateTimeField $r2;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r3;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $l2 := @parameter0: long;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $i3 = $i0 + $i1;

        $b4 = $l2 cmp -9223372036854775808L;

        if $b4 != 0 goto label3;

        $i5 = -2147483648;

     label1:
        $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        if $i5 >= $i6 goto label5;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        $l7 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i5);

        $l8 = (long) $i3;

        $l7 = $l7 - $l8;

        $l7 = $l7 - 1L;

     label2:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $l7 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>($l7, $i0, $i1);

        $b4 = $l7 cmp $l2;

        if $b4 <= 0 goto label4;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l8 = (long) $i3;

        $l8 = $l8 + $l7;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l8);

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>;

        if $i0 <= $i1 goto label4;

        return $l2;

     label3:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l7 = (long) $i3;

        $l7 = $l7 + $l2;

        $i5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l7);

        goto label1;

     label4:
        return $l7;

     label5:
        $l7 = $l2;

        goto label2;
    }
