org.joda.time.tz.CachedDateTimeZone extends org.joda.time.DateTimeZone
private static final int cInfoCacheMask
private static final long serialVersionUID
private final transient org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache
private final org.joda.time.DateTimeZone iZone
    static void <clinit>()
    {
        java.lang.Integer $r0;
        int $i0, $i1;
        java.lang.SecurityException $r1;

     label1:
        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>("org.joda.time.tz.CachedDateTimeZone.size");

     label2:
        if $r0 != null goto label5;

        $i0 = 512;

     label3:
        $i0 = $i0 + -1;

        <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask> = $i0;

        return;

     label4:
        $r1 := @caughtexception;

        $r0 = null;

        goto label2;

     label5:
        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + -1;

        $i1 = 0;

     label6:
        if $i0 <= 0 goto label7;

        $i1 = $i1 + 1;

        $i0 = $i0 >> 1;

        goto label6;

     label7:
        $i0 = 1 << $i1;

        goto label3;

        catch java.lang.SecurityException from label1 to label2 with label4;
    }
    private void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.String $r2;
        int $i0;
        org.joda.time.tz.CachedDateTimeZone$Info[] $r3;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>($r2);

        $i0 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>;

        $i0 = $i0 + 1;

        $r3 = newarray (org.joda.time.tz.CachedDateTimeZone$Info)[$i0];

        r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache> = $r3;

        r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> = $r1;

        return;
    }
    private org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long $l0, $l1, $l2;
        org.joda.time.tz.CachedDateTimeZone$Info $r1, $r3, $r4;
        org.joda.time.DateTimeZone $r2;
        byte $b3;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $l0 := @parameter0: long;

        $l2 = $l0 & -4294967296L;

        $r1 = new org.joda.time.tz.CachedDateTimeZone$Info;

        $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        specialinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r2, $l2);

        $l0 = $l2 | 4294967295L;

        $r3 = $r1;

     label1:
        $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $l1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long nextTransition(long)>($l2);

        $b3 = $l1 cmp $l2;

        if $b3 == 0 goto label3;

        $b3 = $l1 cmp $l0;

        if $b3 <= 0 goto label2;

        return $r1;

     label2:
        $r4 = new org.joda.time.tz.CachedDateTimeZone$Info;

        $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        specialinvoke $r4.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r2, $l1);

        $r3.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> = $r4;

        $r3 = $r4;

        $l2 = $l1;

        goto label1;

     label3:
        return $r1;
    }
    public static org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0;
        boolean $z0;
        org.joda.time.tz.CachedDateTimeZone $r1;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $z0 = $r0 instanceof org.joda.time.tz.CachedDateTimeZone;

        if $z0 == 0 goto label1;

        $r1 = (org.joda.time.tz.CachedDateTimeZone) $r0;

        return $r1;

     label1:
        $r1 = new org.joda.time.tz.CachedDateTimeZone;

        specialinvoke $r1.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>($r0);

        return $r1;
    }
    private org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long $l0, $l3;
        int $i1, $i2, $i4;
        org.joda.time.tz.CachedDateTimeZone$Info[] $r1;
        org.joda.time.tz.CachedDateTimeZone$Info $r2;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $l0 := @parameter0: long;

        $l3 = $l0 >> 32;

        $i1 = (int) $l3;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>;

        $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>;

        $i2 = $i1 & $i2;

        $r2 = $r1[$i2];

        if $r2 == null goto label1;

        $l3 = $r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>;

        $l3 = $l3 >> 32;

        $i4 = (int) $l3;

        if $i4 == $i1 goto label2;

     label1:
        $r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>($l0);

        $r1[$i2] = $r2;

     label2:
        return $r2;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        org.joda.time.DateTimeZone $r1, $r3;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $r2 := @parameter0: java.lang.Object;

        if r0 != $r2 goto label1;

        return 1;

     label1:
        $z0 = $r2 instanceof org.joda.time.tz.CachedDateTimeZone;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        r0 = (org.joda.time.tz.CachedDateTimeZone) $r2;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r1);

        return $z0;

     label2:
        return 0;
    }
    public java.lang.String getNameKey(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long $l0;
        org.joda.time.tz.CachedDateTimeZone$Info $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>($l0);

        $r2 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>($l0);

        return $r2;
    }
    public int getOffset(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long $l0;
        org.joda.time.tz.CachedDateTimeZone$Info $r1;
        int $i1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>($l0);

        $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>($l0);

        return $i1;
    }
    public int getStandardOffset(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long $l0;
        org.joda.time.tz.CachedDateTimeZone$Info $r1;
        int $i1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>($l0);

        $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>($l0);

        return $i1;
    }
    public org.joda.time.DateTimeZone getUncachedZone()
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        org.joda.time.DateTimeZone r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        return r1;
    }
    public int hashCode()
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        int $i0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>();

        return $i0;
    }
    public boolean isFixed()
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        boolean $z0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: boolean isFixed()>();

        return $z0;
    }
    public long nextTransition(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long $l0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long nextTransition(long)>($l0);

        return $l0;
    }
    public long previousTransition(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long $l0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long previousTransition(long)>($l0);

        return $l0;
    }
